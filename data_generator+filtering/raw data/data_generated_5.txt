
###
3.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'change_speed_to_slow': "Action: Change agent's speed to slow. Always returns True.", 'change_speed_to_fast': "Action: Change agent's speed to fast. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_triangle': 'Action: Form a triangle with two other agents. Always returns True.', 'is_agent_in formation': 'Condition: Check if the agent is in formation with two other agents. Returns True if the agent is in formation, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'join_formation': 'Action: Join formation with two other agents. Always returns True.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3.// USER COMMAND: generate behavior tree to 'avoid obstacles, form a triangle with two other agents, and join formation.'Output only the XML behavior tree without extra text.
3.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Action>avoid_obstacle</Action> <Action>form_triangle</Action> </Sequence> <Sequence> <Selector> <Condition>is_obstacle_detected</Condition> <Action>change_speed_to_slow</Action> </Selector> <Selector> <Condition>is_agent_in_formation</Condition> <Action>change_speed_to_fast</Action> </Selector> </Sequence> <Action>join_formation</Action> </Selector> </BehaviorTree>

###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'go_to_specific_location': "Condition: Check if agent is at specific location. Returns True if agent is at the specified location, False otherwise.", 'is_random_movement': 'Condition: Check if agent is moving randomly. Returns True if agent is moving randomly, False otherwise.', 'is_robot_resting': 'Condition: Check if the robot is resting. Returns True if the robot is resting, False otherwise.', 'move_to_random_location': "Action: Move agent to a random location. Always returns True.", 'move_to_specific_location': "Action: Move agent to a specific location. Always returns True.", 'move_to_target': "Action: Move agent to target's location. Always returns True.", 'return_to_nest': "Action: Return agent to nest's location. Always returns True.", 'set_random_movement': "Action: Set agent's movement to random. Always returns True.", 'set_robot_resting': "Action: Set robot to resting state. Always returns True.", 'synchronize_movement': 'Action: Synchronize movement with other robots. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Move to a specific location, return to nest, and synchronize movement with other robots.'Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Action>move_to_specific_location</Action> <Action>synchronize_movement</Action> </Sequence> <Sequence> <Action>return_to_nest</Action> <Selector> <Condition>is_robot_resting</Condition> <Action>move_to_target</Action> </Selector> </Sequence> </Selector> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'activate_sensor': 'Action: Activate the robot's sensor. Always returns True.', 'change_sensor_range': "Action: Change the range of the robot's sensor. Always returns True.", 'detect_obstacles': "Condition: Detect obstacles within sensor range. Returns True if obstacles are detected, False otherwise.", 'follow_path': "Action: Follow a predefined path using waypoints. Always returns True.", 'go_to_specific_location': "Condition: Check if agent is at specific location. Returns True if agent is at the specified location, False otherwise.", 'is_robot_at_nest': 'Condition: Check if the robot is at the nest. Returns True if the robot is at the nest, False otherwise.', 'move_to_random_location': "Action: Move agent to a random location. Always returns True.", 'move_to_specific_location_with_sensor': "Action: Move agent to a specific location while using the sensor to detect obstacles. Always returns True.", 'patrol_area': "Action: Patrol an area by moving between predefined locations. Always returns True.", 'teleport_to_point': "Action: Teleport the robot to a specific point. Always returns True.", 'use_sensor_to_avoid_obstacles': 'Action: Use the sensor to detect and avoid obstacles. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Move to a specific location while avoiding obstacles, patrol an area, and teleport to a specific point.'Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Action>move_to_specific_location_with_sensor</Action> <Action>use_sensor_to_avoid_obstacles</Action> </Sequence> <Sequence> <Action>patrol_area</Action> <Selector> <Condition>is_robot_at_nest</Condition> <Action>teleport_to_point</Action> </Selector> </Sequence> </Selector> </BehaviorTree>
 
###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'change_color_to_cyan': "Action: Change agent's color to cyan. Always returns True.", 'change_color_to_purple': "Action: Change agent's color to purple. Always returns True.", 'change_color_to_red': "Action: Change agent's color to red. Always returns True.", 'reach_waypoint': 'Action: Move towards specified waypoint. Returns True once the waypoint is reached.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_waypoint_reached': 'Condition: Check if the specified waypoint is reached. Returns True if the waypoint is reached, False otherwise.', 'move_backward': 'Action: Move the robot one step backward in the current direction. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Avoid obstacles and reach waypoint A, then change color to cyan and continue movement to waypoint B, finally change color to purple and return to the nest'Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_obstacle_detected</Condition><Action>avoid_obstacle</Action></Sequence><Sequence><Condition>is_agent_in_nest</Condition><Action>change_color_to_cyan</Action><Action>reach_waypoint</Action><Action>change_color_to_red</Action></Sequence><Sequence><Condition>is_waypoint_reached</Condition><Action>reach_waypoint</Action><Action>change_color_to_purple</Action><Action>reach_waypoint</Action><Action>change_color_to_cyan</Action></Sequence></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'change_color_to_red': "Action: Change agent's color to red. Always returns True.", 'follow_object': 'Action: Follow the closest detected object. Returns True once the object is reached.', 'look_around': 'Action: Scan the environment for objects and create an internal map. Always returns True.', 'is_object_detected': 'Condition: Check if any objects are detected in the environment. Returns True if at least one object is detected, False otherwise.', 'is_object_reachable': 'Condition: Check if the closest object is reachable. Returns True if the object is within 10 units of distance, False otherwise.', 'is_object_close': 'Condition: Check if the closest object can be reached within 5 units. Returns True if the object is within 5 units of distance, False otherwise.', 'get_object_info': 'Action: Obtain information about the closest object, such as color, size, and shape. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Scan the environment, follow the red object, and obtain its information'Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_object_detected</Condition><Action>look_around</Action><Selector><Sequence><Condition>is_object_reachable</Condition><Action>follow_object</Action></Sequence><Selector><Condition>is_object_close</Condition><Action>get_object_info</Action></Selector></Selector></Sequence></BehaviorTree>
###
4.// INSTRUCTIONS: Use only the following behaviors {'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_blue': "Action: Change agent's color to blue. Always returns True.", 'retreat': 'Action: Move away from detected danger. Always returns True.', 'follow_path': 'Action: Follow the designated path. Always returns True.', 'is_danger_detected': 'Condition: Check for danger in the environment. Returns True if danger is detected, False otherwise.', 'is_target_spotted': 'Condition: Check if the target is within view. Returns True if the target is visible, False otherwise.', 'is_path_safe': 'Condition: Check if the designated path is safe to follow. Returns True if the path is clear of danger, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Find target, avoid danger if spotted, and safely retrieve target.' Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>is_danger_detected</Condition><Action>retreat</Action><Sequence><Condition>is_path_safe</Condition><Action>follow_path</Action><Sequence><Condition>is_target_spotted</Condition><Action>change_color_to_blue</Action> </Sequence></Sequence></Sequence><Action>wander</Action></Selector></Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_blue': "Action: Change agent's color to blue. Always returns True.", 'retreat': 'Action: Move away from detected danger. Always returns True.', 'follow_path': 'Action: Follow the designated path. Always returns True.', 'is_danger_detected': 'Condition: Check for danger in the environment. Returns True if danger is detected, False otherwise.', 'is_target_spotted': 'Condition: Check if the target is within view. Returns True if the target is visible, False otherwise.', 'is_path_safe': 'Condition: Check if the designated path is safe to follow. Returns True if the path is clear of danger, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Defend the territory, attack any opponents in sight, and communicate with other robots to coordinate attacks.' Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_danger_detected</Condition><Action>retreat</Action><Action>change_color_to_blue</Action><Sequence><Condition>is_target_spotted</Condition><Action>change_color_to_blue</Action><Action>follow_path</Action></Sequence><Sequence><Condition>is_danger_detected</Condition><Action>retreat</Action></Sequence></Selector></BehaviorTree>	
###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_leader_detected': 'Condition: Check if the leader agent is within 15 units. Returns True if the leader agent is within 15 units of distance, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'signal_leader_detected': 'Action: Send signal to other agents upon detecting the leader. Always returns True.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'detect leader, form line, and change color to green.'Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>is_target_detected</Condition> <Sequence> <Action>signal_leader_detected</Action> <Action>form_line</Action> </Sequence> <Action>change_color_to_green</Action> </Sequence> <Sequence> <Condition>is_leader_detected</Condition> <Action>wander</Action> </Sequence> </Selector> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_collision': 'Action: Avoid collisions with other agents. Always returns True.', 'change_color_to_blue': "Action: Change agent's color to blue. Always returns True.", 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'circle_movement': 'Action: Move in a circle. Always returns True.', 'is_in_same_direction': 'Condition: Check if the agent is moving in the same direction as the target. Returns True if the agent is moving in the same direction, False otherwise.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'obstacle_avoidance': 'Action: Avoid detected obstacles. Always returns True.', 'rotate_to_target': 'Action: Rotate agent to face the target. Always returns True.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'circle around the target, avoid obstacles, and change color to blue.'Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>is_target_detected</Condition> <Action>rotate_to_target</Action> <Action>circle_movement</Action> </Sequence> <Sequence> <Condition>is_obstacle_detected</Condition> <Action>obstacle_avoidance</Action> <Sequence> <Condition>is_in_same_direction</Condition> <Action>change_color_to_blue</Action> </Sequence> </Sequence> </Selector> <Action>task_completed</Action> </Sequence> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_collision': 'Action: Avoid collisions with other agents. Always returns True.', 'change_color_to_blue': "Action: Change agent's color to blue. Always returns True.", 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'circle_movement': 'Action: Move in a circle. Always returns True.', 'is_in_same_direction': 'Condition: Check if the agent is moving in the same direction as the target. Returns True if the agent is moving in the same direction, False otherwise.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'obstacle_avoidance': 'Action: Avoid detected obstacles. Always returns True.', 'rotate_to_target': 'Action: Rotate agent to face the target. Always returns True.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'collect the objects and change color to green.'Output only the XML behavior tree without extra text.
6.// OUTPUT:
Sorry, I can't do the task with the provided behaviors. 
###
4.// INSTRUCTIONS: Use only the following behaviors {'return_to_start': 'Action: Return to the starting position of the formation.', 'rotate_left': 'Action: Rotate the entire formation 90 degrees to the left.', 'rotate_right': 'Action: Rotate the entire formation 90 degrees to the right.', 'travel_to_target': 'Action: Travel to a pre-determined target location.', 'release_food_pheromones': 'Action: Release pheromones to mark a source of food.', 'is_food_detected': 'Condition: Check if food source is detected in the environment.', 'is_pheromone_detected': 'Condition: Check if there are any pheromones detected within 10 units.', 'is_target_reached': 'Condition: Check if the target location has been reached.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Generate a behavior tree for a swarm of robots to collectively search for and mark a food source in the environment, then return to the starting position.
4.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>is_food_detected</Condition><Action>travel_to_target</Action></Sequence><Action>release_food_pheromones</Action></Selector><Selector><Sequence><Condition>is_pheromone_detected</Condition><Selector><Sequence><Condition>is_target_reached</Condition><Action>return_to_start</Action></Sequence><Action>rotate_left</Action></Selector></Sequence><Action>rotate_right</Action></Selector></Sequence></BehaviorTree>
 
###
5.// INSTRUCTIONS: Use only the following behaviors {'snake_forward': 'Action: Move forward in the shape of a snake to search for targets.', 'change_direction': 'Action: Change the direction of the snake movement.', 'surround_target': 'Action: Surround the target to contain it.', 'is_target_detected': 'Condition: Check if the target is detected within 10 units.', 'is_surrounded': 'Condition: Check if the target is surrounded by the snake formation.', 'stay_alert': 'Condition: Check for any obstacles or unexpected movement in the environment that may require a change in direction for the snake formation.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Generate a behavior tree for a swarm of robots to collectively surround and contain a target by moving in a snake-like formation.
5.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>is_target_detected</Condition><Selector><Sequence><Condition>is_surrounded</Condition><Action>surround_target</Action></Sequence><Action>snake_forward</Action></Selector></Sequence><Action>change_direction</Action></Selector><Selector><Sequence><Condition>stay_alert</Condition><Action>change_direction</Action></Sequence><Action>snake_forward</Action></Selector></Sequence></BehaviorTree>
 
###
6.// INSTRUCTIONS: Use only the following behaviors {'search_and_destroy': 'Action: Move randomly within the environment to search for and destroy targets.', 'avoid_hazard': 'Action: Avoid hazards and obstacles while moving.', 'target_lock': 'Action: Lock onto a detected target and continue pursuit.', 'is_obstacle_detected': 'Condition: Check if an obstacle is detected within 5 units.', 'is_hazard_present': 'Condition: Check if a hazardous object or area is detected.', 'is_target_detected': 'Condition: Check if a target is detected within 10 units.', 'is_target_destroyed': 'Condition: Check if the target has been successfully destroyed.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Generate a behavior tree for a swarm of robots to collectively search for and destroy targets while avoiding hazards and obstacles in the environment.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_target_detected</Condition><Selector><Sequence><Condition>is_target_destroyed</Condition><Action>search_and_destroy</Action></Sequence><Action>target_lock</Action></Selector></Sequence><Selector><Sequence><Condition>is_hazard_present</Condition><Action>avoid_hazard</Action></Sequence><Action>search_and_destroy</Action></Selector><Sequence><Condition>is_obstacle_detected</Condition><Action>avoid_hazard</Action></Sequence></Selector></BehaviorTree>
###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_red': "Action: Change agent's color to red. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Perform a group task by forming a circle and changing color to green, then move towards target and freeze movement once the target is reached'. Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree><Sequence><Sequence><Action>form_circle</Action><Action>change_color_to_green</Action></Sequence><Sequence><Action>continue_movement_agent</Action><Condition>is_target_detected</Condition><Action>wander</Action></Sequence></Sequence><Condition>is_target_reached</Condition><Action>task_completed</Action></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_blue': "Action: Change agent's color to blue. Always returns True.", 'change_color_to_red': "Action: Change agent's color to red. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'explore_area': 'Action: Move to a random unexplored area. Returns True if a new area is discovered, False otherwise.', 'is_area_explored': 'Condition: Check if current area has been explored. Returns True if area is explored, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Explore the environment by moving to a new unexplored area, and change color to blue once an obstacle is detected, then continue exploring until reaching the target and freezing movement'. Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree><Sequence><Sequence><Action>explore_area</Action><Condition>is_area_explored</Condition></Sequence><Sequence><Condition>is_obstacle_detected</Condition><Action>change_color_to_blue</Action></Sequence><Sequence><Condition>is_target_detected</Condition><Action>continue_movement_agent</Action><Action>wander</Action></Sequence></Sequence><Condition>is_target_reached</Condition><Action>task_completed</Action></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_blue': "Action: Change agent's color to blue. Always returns True.", 'change_color_to_red': "Action: Change agent's color to red. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'follow_path': 'Action: Follow a predetermined path. Returns True if the path is successfully followed, False otherwise.', 'is_at_intersection': 'Condition: Check if the agent is at an intersection. Returns True if the agent is at an intersection, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Follow a designated path, and change color to red if an obstacle is detected, then continue following the path until reaching the target and freezing movement'. Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree><Sequence><Sequence><Action>follow_path</Action><Condition>is_at_intersection</Condition></Sequence><Sequence><Condition>is_obstacle_detected</Condition><Action>change_color_to_red</Action></Sequence><Sequence><Condition>is_target_detected</Condition><Action>follow_path</Action><Action>wander</Action></Sequence></Sequence><Condition>is_target_reached</Condition><Action>task_completed</Action></BehaviorTree 
###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'calc_distance_to_target': 'Action: Calculate the distance to the target. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Measure distance to target, if the distance is greater than 10 units then avoid obstacles and continue movement towards target, when target is reached, change color to green'.Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>calc_distance_to_target</Condition><Sequence><Action>avoid_obstacle</Action><Condition>is_path_clear</Condition><Action>continue_movement_agent</Action></Sequence></Sequence><Sequence><Condition>is_target_reached</Condition><Action>change_color_to_green</Action></Sequence></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'execute_task': 'Action: Execute a specific task based on input provided. Returns True if successful, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Execute a specific task based on input provided, if task is completed change color to green'. Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree><Selector><Action>execute_task</Action><Condition>task_completed</Condition></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'calc_distance_to_target': 'Action: Calculate the distance to the target. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'follow_path': 'Action: Follow a predetermined path. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'is_impassable_area': 'Condition: Check if current area is impassable. Returns True if area is impassable, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Follow a predetermined path, if an obstacle is detected then avoid it, check if area is impassable and if target is reached, change color to white'. Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>follow_path</Action><Condition>is_obstacle_detected</Condition><Action>avoid_obstacle</Action></Sequence><Sequence><Condition>is_impassable_area</Condition><Action>change_color_to_white</Action></Sequence></Selector></BehaviorTree>
###
4.// INSTRUCTIONS: Use only the following behaviors {'find_hiding_spot': 'Condition: Check for possible hiding spots in the environment. Returns True if a spot is found, False otherwise.', 'hide': 'Action: Hide in the chosen hiding spot. Always returns True.', 'wait_for_signal': 'Action: Wait for a signal from the leader. Always returns True.', 'follow_leader': 'Action: Follow the leader's movements. Always returns True.', 'move_to_leader': 'Action: Move towards the leader. Always returns True.', 'is_leader_nearby': 'Condition: Check if the leader is within a certain distance. Returns True if the leader is nearby, False otherwise.', 'is_goal_reached': 'Condition: Check if the goal has been reached. Returns True if the goal is reached, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree for a swarm of robots to hide and wait for a signal from the leader before following them to a specified goal location.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_leader_nearby</Condition><Selector><Sequence><Condition>find_hiding_spot</Condition><Action>hide</Action></Sequence><Action>wander</Action></Selector></Sequence><Sequence><Condition>is_goal_reached</Condition><Action>wait_for_signal</Action><Action>follow_leader</Action></Sequence><Sequence><Condition>is_leader_nearby</Condition><Action>move_to_leader</Action></Sequence></Selector></BehaviorTree>

###
5. // INSTRUCTIONS: Use only the following behaviors {'detect_resource': 'Condition: Check for available resources in the environment. Returns True if a resource is detected, False otherwise.', 'collect_resource': 'Action: Move towards and collect the detected resource. Always returns True.', 'deposit_resource': 'Action: Deposit collected resources at the designated location. Always returns True.', 'return_home': 'Action: Return to the designated home location. Always returns True.', 'is_resource_limit_reached': 'Condition: Check if the maximum resource limit has been reached. Returns True if the limit is reached, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree for a swarm of robots to efficiently collect and deposit resources while avoiding going over the resource limit.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_resource_limit_reached</Condition><Action>return_home</Action></Sequence><Sequence><Condition>detect_resource</Condition><Action>collect_resource</Action><Action>deposit_resource</Action></Sequence></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'move_towards_food': 'Action: Move towards the nearest source of food. Always returns True.', 'pick_up_food': 'Action: Pick up the food once in range. Always returns True.', 'carry_food_to_nest': 'Action: Carry the food back to the nest. Always returns True.', 'drop_food_at_nest': 'Action: Drop the food at the nest. Always returns True.', 'is_food_nearby': 'Condition: Check if there is food within a certain range. Returns True if food is detected, False otherwise.', 'is_nest_reached': 'Condition: Check if the nest has been reached. Returns True if the nest is reached, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree for a swarm of robots to locate, collect, and deposit food while avoiding obstacles and returning to the nest.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_food_nearby</Condition><Action>move_towards_food</Action><Action>pick_up_food</Action><Action>carry_food_to_nest</Action></Sequence><Sequence><Condition>is_nest_reached</Condition><Action>drop_food_at_nest</Action></Sequence></Selector></BehaviorTree>
###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Navigate through obstacles and reach the detected target'Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_obstacle_detected</Condition><Selector><Sequence><Condition>is_path_clear</Condition><Action>move_forward</Action></Sequence><Action>avoid_obstacle</Action></Selector><Action>update_map</Action></Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Build and maintain a formation with other swarm robots'Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_agent_in_nest</Condition><Action>change_color_to_green</Action></Sequence><Selector><Sequence><Condition>is_line_formed</Condition></Sequence><Action>form_line</Action></Selector><Action>wander</Action></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Check and maintain the communication connection with other swarm robots while completing a task'Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>is_target_detected</Condition><Action>task_completed</Action></Sequence><Action>wander</Action></Selector><Sequence><Condition>is_obstacle_detected</Condition><Selector><Sequence><Condition>is_path_clear</Condition><Action>move_forward</Action></Sequence><Action>avoid_obstacle</Action></Selector></Sequence><Selector><Sequence><Condition>task_completed</Condition><Action>wander</Action></Sequence><Action>continue_movement_agent</Action></Selector></Sequence></BehaviorTree>     
###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.', 'dispense_food': 'Action: Dispense food to the surrounding area. Always returns True.', 'collect_food': 'Action: Collect and hold food from the environment. Always returns True.', 'is_food_detected': 'Condition: Check if food is within reach. Returns True if food is within 10 units of distance, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Collect food from the environment, form a line, and dispense food to the surrounding area'Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree> <Sequence> <Condition>is_food_detected</Condition> <Action>collect_food</Action> <Action>form_line</Action> <Action>dispense_food</Action> </Sequence> <Action>wander</Action> </BehaviorTree>
      
###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.', 'build_structure': 'Action: Construct a structure in the environment. Always returns True.', 'is_structure_complete': 'Condition: Check if the structure is built. Returns True if the structure is complete, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Build a tower structure with collected resources'Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree> <Sequence> <Condition>is_resource_accessible</Condition> <Action>collect_resource</Action> <Action>form_line</Action> <Action>build_structure</Action> </Sequence> <Action>wander</Action> </BehaviorTree>
      
###
6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.', 'communicate': 'Action: Communicate with other agents in the swarm. Always returns True.', 'is_message_received': 'Condition: Check if a message is received from another agent. Returns True if a message is received, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Communicate and coordinate with 
###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_orange': "Action: Change agent's color to orange. Always returns True.", 'go_straight': "Action: Move in a straight line for 10 units. Always returns True.", 'rotate_clockwise': "Action: Rotate the agent clockwise by 90 degrees. Always returns True.", 'rotate_counterclockwise': "Action: Rotate the agent counterclockwise by 90 degrees. Always returns True.", 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_color_green': 'Condition: Check if agent color is green. Returns True if agent color is green, False otherwise.', 'is_color_orange': 'Condition: Check if agent color is orange. Returns True if agent is orange, False otherwise.', 'is_at_dropoff': 'Condition: Check if the robot is at the designated drop-off location. Returns True if at the drop-off location, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Move in a straight line for 10 units, then rotate clockwise if the agent's color is green, otherwise rotate counterclockwise'.
4.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>is_color_green</Condition> <Action>rotate_clockwise</Action> <Action>agent_movement_freeze</Action> </Sequence> <Sequence> <Condition>is_color_orange</Condition> <Action>rotate_counterclockwise</Action> <Action>agent_movement_freeze</Action> </Sequence> <Sequence> <Condition>is_at_dropoff</Condition> <Action>go_straight</Action> </Sequence> </Selector> </Sequence> </BehaviorTree>
 
###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'check_battery_level': 'Condition: Check the agent battery level. Returns True if battery level is above 50%, False if battery level is below 50%.', 'charge_at_dock': "Action: Move to the designated charging dock. Always returns True.", 'collect_data': "Action: Collect data from the environment. Always returns True.", 'explore_area': "Action: Explore new areas within the environment. Always returns True.", 'go_back_to_start': "Action: Return to the starting point. Always returns True.", 'is_at_dock': 'Condition: Check if the agent is at the designated charging dock. Returns True if at the dock, False otherwise.', 'is_data_collected': 'Condition: Check if data has been collected. Returns True if data has been collected, False otherwise.', 'is_explored': 'Condition: Check if the agent has explored new areas. Returns True if new areas have been explored, False otherwise.', 'is_returning': 'Condition: Check if the agent is returning to the starting point. Returns True if the agent is returning, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'If battery level is below 50%, go to charging dock to charge, otherwise collect data and explore new areas.'
5.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>check_battery_level</Condition> <Selector> <Sequence> <Action>charge_at_dock</Action> <Sequence> <Condition>is_at_dock</Condition> <Action>agent_movement_freeze</Action> </Sequence> </Selector> <Sequence> <Action>collect_data</Action> <Action>explore_area</Action> </Sequence> </Selector> </Sequence> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'change_color_to_yellow': "Action: Change agent's color to yellow. Always returns True.", 'change_color_to_blue': "Action: Change agent's color to blue. Always returns True.", 'dissipate_heat': "Action: Use cooling mechanism to dissipate heat. Always returns True.", 'follow_leader': "Action: Follow the designated leader. Returns True if following, False otherwise.", 'locate_hotspot': 'Condition: Check the environment for hotspots. Returns True if hotspots are present, False otherwise.', 'navigate_to_hotspot': 'Action: Navigate to the nearest hotspot. Always returns True.', 'scan_environment': "Action: Use sensors to scan the environment for hotspots. Always returns True.", 'send_warning': "Action: Send a warning signal if a hotspot is detected. Returns True if signal is sent, False otherwise.", 'wait_for_leader': 'Condition: Check if the agent is waiting for the leader. Returns True if waiting, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'If a hotspot is detected, follow the leader to dissipate heat using a cooling mechanism. Otherwise, scan the environment and send a warning signal.'
6.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>locate_hotspot</Condition> <Action>follow_leader</Action> <Action>dissipate_heat</Action> <Action>agent_movement_freeze</Action> </Sequence> <Sequence> <Condition>locate_hotspot</Condition> <Sequence><Condition>wait_for_leader</Condition> <Action>follow_leader</Action></Sequence> <Sequence> <Condition>scan_environment</Condition> <Action>send_warning</Action> </Sequence> <Sequence> <Condition>is_following</Condition> <Sequence> <Condition>is_waiting</Condition> <Action>send_warning</Action> </Sequence> </Sequence> </Selector> </BehaviorTree>###
4.//INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_circle': 'Action: Form a circular shape with a radius of 5 units. Always returns True.', 'is_agent_in_nest': 'Condition: Check if agent is in the nest. Returns True if agent is in the nest, False otherwise.', 'is_circle_formed': 'Condition: Check if a circular shape is formed with a radius of 5 units. Returns True if the shape is formed, False otherwise.', 'is_target_detected': 'Condition: Check if target is within 10 units. Returns True if the target is within 10 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 5 units. Returns True if the target is within 5 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'follow_target': 'Action: Move towards the target with a speed of 3 units per second. Always returns True.', 'stop_movement': 'Action: Stop all movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Form a circle and follow the target at a set speed of 3 units per second.'Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree> <Sequence> <Sequence> <Action>follow_target</Action> <Condition>is_target_detected</Condition> </Sequence> <Condition>is_target_reached</Condition> <Action>stop_movement</Action> <Action>task_completed</Action> </Sequence> <Action>form_circle</Action> </BehaviorTree>

###
5.//INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_color_green': 'Condition: Check if the agent's color is currently green. Returns True if the color is green, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_line_formed': 'Condition: Check if a horizontal line is formed. Returns True if the line is formed with the center, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'create_grid': 'Action: Create a grid with 5 rows and 10 columns. Always returns True.', 'move_to_cell': 'Action: Move to a specific cell within the grid. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Create a 5x10 grid and move to the cell at coordinate (2,3).'Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Action>create_grid</Action> <Action>move_to_cell(2,3)</Action> </Sequence> <Action>task_completed</Action> </Selector> </BehaviorTree>

###
6.//INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'go_to_start': 'Action: Move the agent to the starting point. Always returns True.', 'is_agent_at_start': 'Condition: Check if the agent is at the starting point. Returns True if the agent is at the starting point, False otherwise.', 'is_color_green': 'Condition: Check if the agent's color is currently green. Returns True if the color is green, False otherwise.', 'is_finish_reached': 'Condition: Check if the finish line is reached. Returns True if the finish line is reached, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'follow_path': 'Action: Follow a predefined path to the finish line. Always returns True.', 'update_path': 'Action: Update the predefined path based on current location and obstacles. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Follow the predefined path to the finish line, updating it as necessary and returning to the starting point if obstacles are detected.'Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>is_agent_at_start</Condition> <Action>go_to_start</Action> </Sequence> <Sequence> <Action>follow_path</Action> <Condition>is_finish_reached</Condition> </Sequence> <Sequence> <Condition>is_path_clear</Condition> <Action>follow_path</Action> </Sequence> <Action>update_path</Action> <Action>follow_path</Action> </Selector> </BehaviorTree><BehaviorTree><Sequence><Condition>is_target_grabbed</Condition><Action>turn_left</Action><Action>task_completed</Action></Sequence></BehaviorTree>
<BehaviorTree><Selector><Sequence><Condition>is_line_formed</Condition><Action>change_color_to_red</Action></Sequence><Action>form_line</Action></Selector></BehaviorTree>

###
4.// INSTRUCTIONS: Use only the following behaviors {'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_blue': "Action: Change agent's color to blue. Always returns True.", 'check_battery_level': "Condition: Check the battery level. Returns True if battery level is above 50%, False otherwise.", 'end_mission': "Action: End the mission. Always returns True."}, to construct behavior tree in XML format to the following command.If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Change color to blue when battery level is low, else change color to green and end mission.' Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree> 
<Sequence> 
<Selector> 
<Sequence> 
<Condition> check_battery_level </Condition> 
<Action> change_color_to_green </Action> 
<Action> end_mission </Action> 
</Sequence>
<Action> change_color_to_blue </Action> 
</Selector> 
</Sequence> 
</BehaviorTree> 

###
5.// INSTRUCTIONS: Use only the following behaviors {'move_forward': "Action: Move the robot forward. Always returns True.", 'move_backward': "Action: Move the robot backward. Always returns True.", 'turn_left': "Action: Turn the robot 90 degrees to the left. Always returns True.", 'turn_right': "Action: Turn the robot 90 degrees to the right. Always returns True.", 'is_at_destination': "Condition: Check if the robot has reached its destination. Returns True if destination is reached, False otherwise."}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Move forward until robot reaches destination, if obstacle is detected turn right and continue moving forward'. Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree> 
<Selector> 
<Sequence> 
<Condition>is_at_destination</Condition> 
<Action>move_forward</Action> 
<Action>end_mission</Action> 
</Sequence> 
<Sequence>
<Condition>is_obstacle_detected</Condition>
<Action>turn_right</Action> 
<Action>move_forward</Action> 
</Sequence> 
</Selector> 
</BehaviorTree> 

###
6.// INSTRUCTIONS: Use only the following behaviors {'detect_target': "Condition: Check if a target is detected in the environment. Returns True if target is detected, False otherwise.", 'move_towards_target': "Action: Move towards the detected target. Always returns True.", 'detect_obstacle': "Action: Detect obstacles in the environment. Always returns True.", 'avoid_obstacle': "Action: Avoid detected obstacles. Always returns True.", 'recharge_battery': "Action: Recharge the robot's battery at designated location. Always returns True."}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Detect target and move towards it, if obstacle is detected, avoid it. Once target is reached, recharge battery at designated location.' Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree> 
<Selector> 
<Sequence> 
<Condition>detect_target</Condition> 
<Action>move_towards_target</Action> 
<Sequence> 
<Action>detect_obstacle</Action> 
<Action>avoid_obstacle</Action> 
</Sequence> 
<Action>recharge_battery</Action> 
<Sequence> 
<Condition>detect_target</Condition> 
<Action>move_towards_target</Action> 
</Sequence> 
</Sequence> 
</Selector> 
</BehaviorTree>###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_circle': 'Action: Form a circle with a radius of 10 units. Always returns True.', 'is_circle_formed': 'Condition: Check if a circle is formed with a radius of 10 units. Returns True if the circle is formed, False otherwise.', 'is_agent_moving': 'Condition: Check if the agent is currently moving. Returns True if the agent is moving, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Move forward until an obstacle is detected, then form a circle, change color to green, and remain in the circle for 5 seconds.'Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree><Sequence> <Sequence><Condition>is_obstacle_detected</Condition><Action>agent_movement_freeze</Action> </Sequence><Sequence><Condition>is_agent_moving</Condition><Action>continue_movement_agent</Action></Sequence><Sequence> <Condition>is_circle_formed</Condition><Action>change_color_to_green</Action><Action>form_circle</Action><TaskRepeater times="5"><Action>wander</Action></TaskRepeater><Action>task_completed</Action> <Sequence></BehaviorTree>
###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_square': 'Action: Form a square with sides of 10 units. Always returns True.', 'is_square_formed': 'Condition: Check if a square is formed with sides of 10 units. Returns True if the square is formed, False otherwise.', 'is_agent_moving': 'Condition: Check if the agent is currently moving. Returns True if the agent is moving, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Chase target until it is within 20 units, form a square around the target, and maintain square formation for 10 seconds.'Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree><Sequence><Selector> <Sequence><Condition>is_target_detected</Condition> <Action>continue_movement_agent</Action> </Sequence> <Action>wander</Action></Selector> <Sequence><Condition>is_agent_moving</Condition> <Action>change_color_to_green</Action> <Action>form_square</Action> <TaskRepeater times="10"><Action>wander</Action></TaskRepeater> <Action>task_completed</Action> <Sequence></BehaviorTree>
###
6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_red': "Action: Change agent's color to red. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'distribute_targets': 'Action: Divide available targets equally among all agents. Always returns True.', 'is_agent_moving': 'Condition: Check if the agent is currently moving. Returns True if the agent is moving, False otherwise.', 'is_target_distributed': 'Condition: Check if targets have been evenly distributed. Returns True if targets are equally divided among all agents, False otherwise.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Distribute targets evenly among all swarm robots and change color to red when all targets are collected.'Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree><Sequence> <Sequence> <Condition>is_target_detected</Condition> <Action>continue_movement_agent</Action> </Sequence> <Sequence> <Condition>is_target_distributed</Condition> <Action>change_color_to_red</Action> <Action>agent_movement_freeze</Action> </Sequence> <Sequence> <Action>distribute_targets</Action> <TaskRepeater times="5"><Action>wander</Action></TaskRepeater> <Action>task_completed</Action> </Sequence> <Selector> <Sequence> <Condition>is_agent_moving</Condition> <Action>continue_movement_agent</Action> </Sequence> <Sequence> <Condition>is_target_detected</Condition> <Action>wander</Action> </Sequence> </Selector> </BehaviorTree>
###
4.// INSTRUCTIONS:Use only the following behaviors { 'go_to_target': 'Action: Move towards the designated target. Returns True when target is reached.', 'is_destination_reached': 'Condition: Check if the destination has been reached. Returns True if the destination is reached, False otherwise.', 'move_left': 'Action: Move to the left of the current position. Returns True when completed.', 'move_right': 'Action: Move to the right of the current position. Returns True when completed.', 'move_back': 'Action: Move backwards from the current position. Returns True when completed.', 'move_forward': 'Action: Move forward from the current position. Returns True when completed.', 'is_path_blocked': 'Condition: Check if the path is blocked by an obstacle. Returns True if there is an obstacle in the current path, False otherwise.', 'scan_enemies': 'Action: Scan the surroundings for potential enemies. Returns True when completed.', 'is_enemy_found': 'Condition: Check if an enemy is detected in the scanned area. Returns True if an enemy is found, False otherwise.', 'attack': 'Action: Attack the detected enemy. Returns True when enemy is defeated.', 'is_enemy_defeated': 'Condition: Check if the enemy has been defeated. Returns True if the enemy is defeated, False otherwise.', 'is_game_over': 'Condition: Check if the game is over. Returns True if the game is over, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'scan surroundings, go to target while avoiding obstacles, attack enemy and repeat until game over'. Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>scan_enemies</Action><Sequence><Selector><Condition>is_enemy_found</Condition><Action>go_to_target</Action></Selector><Sequence><Selector><Condition>is_path_blocked</Condition><Action>move_left</Action><Action>move_right</Action><Action>move_back</Action><Action>move_forward</Action></Selector><Selector><Condition>is_game_over</Condition><Action>attack</Action></Selector></Sequence></Sequence></Sequence><Action>wander</Action></Selector></BehaviorTree>

###
5.// INSTRUCTIONS:Use only the following behaviors { 'charging_station_reached': 'Condition: Check if the charging station has been reached. Returns True if reached, False otherwise.', 'move_to_charging_station': 'Action: Move towards the designated charging station. Returns True when reached.', 'is_battery_low': 'Condition: Check if the battery level is below 30%. Returns True if battery level is low, False otherwise.', 'charger_connected': 'Action: Connect to the charging station. Returns True when connected.', 'charging_complete': 'Condition: Check if the charging process is complete. Returns True when charging is complete.', 'battery_full': 'Action: Signal that the battery is fully charged. Returns True when completed.', 'move_to_checkpoint': 'Action: Move towards the next designated checkpoint. Returns True when reached.', 'is_checkpoint_reached': 'Condition: Check if the checkpoint has been reached. Returns True if reached, False otherwise.', 'explore_surroundings': 'Action: Explore the surroundings to map the area. Returns True when completed.', 'map_complete': 'Condition: Check if the mapping process is complete. Returns True when mapping is complete.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'explore and map the area while maintaining battery level, go to charging station when battery is low, and continue exploration'. Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>explore_surroundings</Action><Condition>is_battery_low</Condition><Sequence><Selector><Condition>charging_complete</Condition><Action>battery_full</Action></Selector><Sequence><Selector><Condition>charging_complete</Condition><Action>charger_connected</Action></Sequence><Selector><Condition>move_to_checkpoint</Condition>,<Action>move_to_charging_station</Action></Sequence><Condition>is_checkpoint_reached</Condition><Action>map_complete</Action></Selector></BehaviorTree>

###
6.// INSTRUCTIONS:Use only the following behaviors { 'press_button': 'Action: Press the designated button. Returns True when completed.', 'button_pressed': 'Condition: Check if the button has been pressed. Returns True if button is pressed, False otherwise.', 'move_to_button': 'Action: Move towards the designated button. Returns True when reached.', 'is_button_reached': 'Condition: Check if the button has been reached. Returns True if reached, False otherwise.', 'look_around': 'Action: Look around for hidden clues. Returns True when completed.', 'clue_found': 'Condition: Check if a clue is found in the surroundings. Returns True if a clue is found, False otherwise.', 'read_clue': 'Action: Read the clue. Returns True when completed.', 'is_puzzle_solved': 'Condition: Check if the puzzle has been solved. Returns True if the puzzle is solved, False otherwise.', 'solve_puzzle': 'Action: Solve the puzzle using the gathered clues. Returns True when completed.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'analyze the puzzle, press the button, collect clues, and solve the puzzle sequentially'. Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Selector><Condition>is_puzzle_solved</Condition><Action>press_button</Action><Action>move_to_button</Action></Sequence><Selector><Sequence><Condition>is_button_reached</Condition><Action>look_around</Action></Sequence><Selector><Condition>clue_found</Condition><Action>read_clue</Action><Sequence><Condition>is_puzzle_solved</Condition><Action>solve_puzzle</Action></Sequence></Selector></Selector></BehaviorTree>###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Collect resources, avoid obstacles, and return to base to deposit resources.' Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>is_target_detected</Condition><Action>collect_resources</Action></Sequence><Action>wander</Action></Selector><Sequence><Condition>is_obstacle_detected</Condition><Action>avoid_obstacle</Action></Sequence><Sequence><Condition>is_agent_in_nest</Condition><Action>return_to_base</Action></Sequence></Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'close_umbrella': 'Action: Close the umbrella on the agent. Always returns True.', 'deploy_parachute': "Action: Deploy parachute above the agent. Always returns True.", 'is_raining': 'Condition: Check if it is currently raining. Returns True if it is raining, False otherwise.', 'open_umbrella': 'Action: Open the umbrella on the agent. Always returns True.', 'is_parachute_deployed': 'Condition: Check if the parachute above the agent is deployed. Returns True if the parachute is deployed, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'walk': 'Action: Move 10 steps forward. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say(Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Survive a sudden rainstorm by deploying the parachute and opening the umbrella.'Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_raining</Condition><Action>open_umbrella</Action><Sequence><Condition>is_parachute_deployed</Condition><Action>close_umbrella</Action><Action>deploy_parachute</Action></Sequence></Sequence><Sequence><Condition>is_agent_in_nest</Condition><Action>task_completed</Action></Sequence><Action>walk</Action></Selector></BehaviorTree>
###
6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'cancel_task': 'Action: Cancel the current task and reset the agent. Always returns True.', 'check_battery_level': "Condition: Check the battery level. Returns True if battery level is above 20%, False if below 20%.", 'charge_battery': 'Action: Begin the charging process for the agent. Always returns True.', 'download_data': "Action: Download collected data from the agent's sensors. Always returns True.", 'is_data_downloaded': 'Condition: Check if the collected data has been downloaded. Returns True if data has been downloaded, False otherwise.', 'is_task_complete': 'Condition: Check if the current task is complete. Returns True if the current task is complete, False otherwise.', 'navigate_to_target': 'Action: Navigate the agent to the designated target location. Always returns True.', 'record_data': 'Action: Record data collected from the agent\'s sensors. Always returns True.', 'stop_navigation': 'Action: Stop the agent\'s movement towards the target location. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Navigate to target location, record data, and charge battery when battery level is low.' Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>check_battery_level</Condition><Action>charge_battery</Action></Sequence><Sequence><Condition>is_data_downloaded</Condition><Action>cancel_task</Action><Action>download_data</Action></Sequence></Selector><Sequence><Condition>is_task_complete</Condition><Action>stop_navigation</Action></Sequence><Action>record_data</Action><Action>navigate_to_target</Action></Sequence></BehaviorTree> 
###
4.// INSTRUCTIONS: Use only the following behaviors {'continue_movement': "Action: Continue agent's movement. Always returns True.", 'detect_target': 'Condition: Detect target within range. Returns True if target is detected, False otherwise.', 'get_close_to_target': "Action: Move closer to the target. Always returns True.", 'grasp_target': 'Action: Grasp target object if it is within reach. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_target_grasped': 'Condition: Check if target object has been grasped. Returns True if target is grasped, False otherwise.', 'move_towards_nest': 'Action: Move towards nest if not already in nest. Always returns True.', 'move_to_random_location': 'Action: Move to a random location within the environment. Always returns True.', 'reposition_nest': 'Action: Reposition the nest to a different location. Always returns True.', 'reposition_target': 'Action: Reposition the target to a different location within the environment. Always returns True.', 'return_to_nest': 'Action: Move towards and return to the nest. Always returns True.', 'skip_task': 'Action: Skip the current task. Always returns True.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Search for and gather food, return to nest and reposition target if necessary, then signal completion.'Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>detect_target</Condition> <Sequence><Action>get_close_to_target</Action> <Action>grasp_target</Action> </Sequence> <Condition>is_target_grasped</Condition> <Action>move_towards_nest</Action> <Action>return_to_nest</Action></Sequence> <Sequence> <Condition>is_agent_in_nest</Condition> <Selector> <Action>reposition_nest</Action> <Action>reposition_target</Action> <Action>agent_movement</Action> </Selector> <Action>task_completed</Action> </Sequence> </Selector> </Sequence> </BehaviorTree>
 
###
5. // INSTRUCTIONS: Use only the following behaviors {'avoid_collision': 'Action: Avoid collisions with other robots. Always returns True.', 'change_color_to_red': "Action: Change agent's color to red. Always returns True.", 'change_color_to_yellow': "Action: Change agent's color to yellow. Always returns True.", 'is_agent_at_target': 'Condition: Check if the agent has reached the target location. Returns True if at the target location, False otherwise.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_agent_moving': 'Condition: Check if agent is currently moving. Returns True if agent is moving, False otherwise.', 'is_collision_possible': 'Condition: Check if a collision with another robot is possible. Returns True if a collision is possible, False otherwise.', 'is_target_reached': 'Condition: Check if the agent has reached the target object. Returns True if the target is reached, False otherwise.', 'move_through_obstacle': 'Action: Move through an obstacle blocking the agent. Always returns True.', 'navigate_to_target': 'Action: Navigate towards the target location. Always returns True.', 'signal_task_completion': 'Action: Signal task completion by freezing movement. Always returns True.', 'wait_for_other_robots': 'Action: Wait for other robots to reach the target location. Always returns True.', 'wait_for_signal': 'Action: Wait for a signal from another robot. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5. //USER COMMAND: generate behavior tree to 'Navigate through obstacles and reach target location, wait for signal from other robots, then change color to red to signal completion.'Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>is_collision_possible</Condition> <Action>avoid_collision</Action> <Action>move_through_obstacle</Action> </Sequence><Condition>is_agent_at_target</Condition> <Selector> <Action>wait_for_signal</Action> <Action>wait_for_other_robots</Action> </Selector> <Action>change_color_to_red</Action> <Action>signal_task_completion</Action></Sequence> <Action>navigate_to_target</Action> </Selector> </BehaviorTree>
 
###
6. // INSTRUCTIONS: Use only the following behaviors {'check_battery_level': 'Condition: Check battery level of the robot. Returns True if battery level is above 50%, False otherwise.', 'check_distance_from_nest': 'Condition: Check the distance from the robot to the nest. Returns True if within a certain range, False otherwise.', 'check_distance_to_target': 'Condition: Check the distance from the robot to the target. Returns True if within a certain range, False otherwise.', 'check_traffic_light': 'Condition: Check the traffic light for the robot. Returns True if light is green, False otherwise.', 'follow_traffic_light': 'Action: Follow the traffic light instructions. Always returns True.', 'go_to_recharging_station': 'Action: Move to the nearest recharging station. Always returns True.', 'navigate_to_nest': 'Action: Navigate towards the nest location. Always returns True.', 'navigate_to_target': 'Action: Navigate towards the target location. Always returns True.', 'recharge_battery': 'Action: Recharge the robot's battery at the recharging station. Always returns True.', 'signal_task_completion': 'Action: Signal task completion by freezing movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6. // USER COMMAND: generate behavior tree to 'Check battery level, navigate to nest if low, then navigate to target location, follow traffic light, and signal completion at target.'Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Condition>check_battery_level</Condition> <Selector> <Selector><Condition>check_distance_from_nest</Condition> <Action>go_to_recharging_station</Action> </Selector> <Action>recharge_battery</Action> </Selector> <Action>navigate_to_nest</Action> </Selector> <Selector> <Selector> <Condition>check_traffic_light</Condition> <Action>follow_traffic_light</Action> </Selector> <Sequence> <Condition>check_distance_to_target</Condition> <Action>signal
###
4.// INSTRUCTIONS: Use only the following behaviors {'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_red': "Action: Change agent's color to red. Always returns True.", 'change_color_to_yellow': "Action: Change agent's color to yellow. Always returns True.", 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'move_towards_target': 'Action: Move towards the target object. Always returns True.', 'move_away_from_target': 'Action: Move away from the target object. Always returns True.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Detect an obstacle, change color to red, move towards the target, then change color to yellow and signal task completion if target is reached.'Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>is_obstacle_detected</Condition> <Action>change_color_to_red</Action> </Sequence> <Action>avoid_obstacle</Action> </Selector> <Selector> <Sequence> <Condition>is_target_detected</Condition> <Action>move_towards_target</Action> <Selector> <Condition>is_target_reached</Condition> <Action>change_color_to_yellow</Action> <Action>task_completed</Action> </Selector> </Sequence> <Action>wander</Action> </Selector> </Sequence> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'change_color_to_blue': "Action: Change agent's color to blue. Always returns True.", 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_yellow': "Action: Change agent's color to yellow. Always returns True.", 'is_at_designated_area': 'Condition: Check if the agent is at the designated area. Returns True if the agent is at the designated area, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Gather at a designated area, change color to blue, form a line, then move towards the target and change color to yellow.'Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>is_at_designated_area</Condition> <Action>change_color_to_blue</Action> </Sequence> <Sequence> <Condition>is_line_formed</Condition> <Action>change_color_to_green</Action> </Sequence> <Action>form_line</Action> </Selector> <Selector> <Sequence> <Condition>is_target_detected</Condition> <Action>move_towards_target</Action> <Selector> <Condition>is_target_reached</Condition> <Action>change_color_to_yellow</Action> <Action>task_completed</Action> </Selector> </Sequence> <Action>wander</Action> </Selector> </Sequence> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_yellow': "Action: Change agent's color to yellow. Always returns True.", 'collect_resource': 'Action: Collect a resource object if it is within reach. Always returns True.', 'drop_resource': 'Action: Drop the collected resource at the designated location. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_resource_detected': 'Condition: Check if a resource object is within range. Returns True if a resource object is within range, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Collect resources and deposit them at the designated location, change color to green when carrying resources and yellow when depositing.'Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>is_resource_detected</Condition> <Action>change_color_to_green</Action> <Action>collect_resource</Action> </Sequence> <Action>wander</Action> </Selector> <Selector>
###
4.// INSTRUCTIONS: Use only the following behaviors {'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'find_homemade_food': 'Action: Search for homemade food in the environment. Returns True if food is found, False otherwise.', 'find_store_bought_food': 'Action: Search for store-bought food in the environment. Returns True if food is found, False otherwise.', 'eat_food': 'Action: Eat the food that has been found. Always returns True.', 'is_food_nearby': 'Condition: Check for food nearby. Returns True if food is detected, False otherwise.', 'is_agent_hungry': 'Condition: Check if the agent is hungry. Returns True if the agent's hunger level is above a threshold, False otherwise.', 'is_agent_full': 'Condition: Check if the agent is full. Returns True if the agent's hunger level is below a threshold, False otherwise.', 'rest': 'Action: Rest to reduce hunger level. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Find food, eat it, and rest when hungry'Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_food_nearby</Condition><Action>eat_food</Action></Sequence><Sequence><Condition>is_agent_hungry</Condition><Action>rest</Action></Sequence><Action>wander</Action></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_speed_to_fast': "Action: Change agent's speed to fast. Always returns True.", 'change_speed_to_slow': "Action: Change agent's speed to slow. Always returns True.", 'follow_leader': 'Action: Follow the leader robot in front. Always returns True.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'move_forward': 'Action: Move forward in the direction of the leader robot. Always returns True.', 'rotate_left': 'Action: Rotate 90 degrees to the left. Always returns True.', 'rotate_right': 'Action: Rotate 90 degrees to the right. Always returns True.', 'stop_movement': 'Action: Stop movement. Always returns True.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Follow a leader robot, change speed to fast, and stop movement when command is given'Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>is_line_formed</Condition><Action>move_forward</Action></Sequence><Sequence><Condition>is_target_detected</Condition><Action>stop_movement</Action></Sequence><Action>wander</Action></Selector><Sequence><Condition>is_line_formed</Condition><Action>move_forward</Action></Sequence><Action>change_speed_to_fast</Action></Sequence></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_blue': "Action: Change agent's color to blue. Always returns True.", 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_purple': "Action: Change agent's color to purple. Always returns True.", 'change_color_to_red': "Action: Change agent's color to red. Always returns True.", 'find_area_with_color': 'Action: Search for an area with a specific color. Returns True if the area is found, False otherwise.', 'is_area_found': 'Condition: Check if the designated area has been found. Returns True if the area is found, False otherwise.', 'is_area_colored_in_purple': 'Condition: Check if the designated area is colored in purple. Returns True if the area is found and colored in purple, False otherwise.', 'move_towards_area': 'Action: Move towards the designated area. Always returns True.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Find an area colored in purple, move towards it, and change color to red'Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_area_found</Condition><Action>move_towards_area</Action><Action>change_color_to_red</Action><Action>task_completed</Action></Sequence><Sequence><Condition>is_area_found</Condition><Action>move_towards_area</Action><Action>change_color_to_blue</Action><Action>task_completed</Action></Sequence><Action>wander</Action></Selector></BehaviorTree> 
###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Move towards the target while avoiding obstacles'Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree> <Sequence> <Condition>is_obstacle_detected</Condition> <Action>avoid_obstacle</Action> </Sequence> <Sequence> <Condition>is_path_clear</Condition> <Action>continue_movement_agent</Action> </Sequence> <Sequence> <Condition>is_target_reached</Condition> <Action>task_completed</Action> </Sequence> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Check if the robot is at the designated drop-off location, if not, move towards the target and grab it'Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>is_at_dropoff</Condition> <Action>task_completed</Action> </Sequence> <Sequence> <Condition>is_obstacle_detected</Condition> <Action>avoid_obstacle</Action> </Sequence> <Sequence> <Condition>is_target_reached</Condition> <Action>grab_target</Action> </Sequence> </Selector> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Check if the robot is in the nest, if not, move randomly within the environment'Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>is_agent_in_nest</Condition> <Action>wander</Action> </Sequence> <Sequence> <Condition>is_obstacle_detected</Condition> <Action>avoid_obstacle</Action> </Sequence> <Action>agent_movement_freeze</Action> </Selector> </BehaviorTree> ###
4.// INSTRUCTIONS: Use only the following behaviors {'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'move_forward': 'Action: Move forward 5 units. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Detect and avoid obstacles, then move forward 5 units.'Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>is_obstacle_detected</Condition> <Action>agent_movement_freeze</Action> </Sequence> <Sequence> <Condition>is_path_clear</Condition> <Action>move_forward</Action> </Sequence> </Selector> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_grid': 'Action: Form a grid pattern consisting of 4 vertical and 4 horizontal lines. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_grid_formed': 'Condition: Check if a grid pattern is formed. Returns True if the grid is formed with 4 horizontal and 4 vertical lines, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Detect and avoid obstacles, form a grid pattern, and change color to green.'Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>is_grid_formed</Condition> <Action>change_color_to_green</Action> <Action>task_completed</Action> </Sequence> <Action>wander</Action> </Selector> <Sequence><Condition>is_agent_in_nest</Condition> <Action>change_color_to_white</Action> </Sequence> </Sequence> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'detect_enemy': 'Condition: Check if an enemy is detected within 50 units. Returns True if an enemy is detected, False otherwise.', 'shoot_enemy': 'Action: Shoot at the detected enemy. Always returns True.', 'hide': 'Action: Hide behind an obstacle. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'If an enemy is detected, shoot at them, otherwise hide behind an obstacle.'Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>detect_enemy</Condition> <Action>shoot_enemy</Action> </Sequence> <Sequence> <Condition>detect_enemy</Condition> <Action>hide</Action> </Sequence> </Selector> </BehaviorTree>
###
4.// INSTRUCTIONS: Use only the following behaviors {'follow_path': 'Action: Follow the path towards a specified goal or destination.', 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_speed': 'Action: Change speed of movement to specified value.', 'request_help': 'Condition: Check if help is needed from other swarm robots. Returns True if help is needed, False otherwise.', 'is_goal_reached': 'Condition: Check if the goal or destination has been reached. Returns True if the goal or destination has been reached, False otherwise.', 'is_path_blocked': 'Condition: Check if the current path is blocked by an obstacle. Returns True if the path is blocked, False otherwise.', 'is_route_available': 'Condition: Check if an alternate route is available. Returns True if an alternate route is available, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Generate a behavior tree to navigate through a complex and maze-like environment, adjusting speed and requesting help from other robots if needed.
4.// OUTPUT:
<BehaviorTree> <Sequence> <Condition>is_obstacle_detected</Condition> <Selector> <Sequence> <Condition>is_path_blocked</Condition> <Sequence> <Condition>is_route_available</Condition> <Action>follow_alternate_path</Action> </Sequence> <Sequence> <Selector> <Condition>request_help</Condition> <Action>send_error_alert</Action> </Selector> <Action>change_speed</Action> <Action>follow_path</Action> </Sequence> </Sequence> <Action>wander</Action> </Selector> <Action>task_completed</Action> </Sequence> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'search_target': 'Action: Vigorously search for the given target until it is found or a time limit is reached.', 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_speed': 'Action: Change speed of movement to specified value.', 'strafe_left': 'Action: Move to the left while facing the target.', 'strafe_right': 'Action: Move to the right while facing the target.', 'face_target': 'Action: Turn towards the target.', 'is_target_found': 'Condition: Check if the target has been found. Returns True if the target has been found, False otherwise.', 'is_path_blocked': 'Condition: Check if the current path is blocked by an obstacle. Returns True if the path is blocked, False otherwise.', 'is_target_in_view': 'Condition: Check if the target is currently within the field of view. Returns True if the target is in view, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Generate a behavior tree for a robot to locate and track a specific target, while navigating through obstacles.
5.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>is_path_blocked</Condition> <Sequence> <Selector> <Sequence> <Condition>is_target_in_view</Condition> <Action>face_target</Action> <Action>change_speed</Action> </Sequence> <Selector> <Condition>is_target_in_view</Condition> <Action>strafe_left</Action> </Selector> <Selector> <Condition>is_target_in_view</Condition> <Action>strafe_right</Action> </Selector> </Selector> <Action>search_target</Action> </Sequence> <Action>wander</Action> </Selector> <Action>task_completed</Action> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'move_to_target': 'Action: Move towards the target at a steady speed.', 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_speed': 'Action: Change speed of movement to specified value.', 'request_assistance': 'Condition: Check if assistance is needed from other robots. Returns True if assistance is needed, False otherwise.', 'is_target_reached': 'Condition: Check if the target has been reached. Returns True if the target has been reached, False otherwise.', 'is_path_blocked': 'Condition: Check if the current path is blocked by an obstacle. Returns True if the path is blocked, False otherwise.', 'is_route_available': 'Condition: Check if an alternate route is available. Returns True if an alternate route is available, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Generate a behavior tree for a swarm of robots to navigate to a specified target, while being able to request assistance and adjust speed if necessary.
6.// OUTPUT:
<BehaviorTree> <Sequence> <Condition>is_path_blocked</Condition> <Sequence> <Condition>is_route_available</Condition> <Action>change_speed</Action> <Selector> <Condition>request_assistance</Condition> <Action>send_help_signal</Action> </Selector> <Action>move_to_target</Action> </Sequence> <Action>wander</Action> </Sequence> <Sequence> <Condition>is_target_reached</Condition> <Action>task_completed</Action> </Sequence> </BehaviorTree>
###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'search_area': 'Action: Move in a grid pattern to search the designated area. Always returns True.', 'wait_x_seconds': 'Action: Wait for x seconds before proceeding. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Search designated area for target for 30 seconds, then alert other robots by forming a line and changing color to red.'Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Action>search_area</Action><Selector><Sequence><Condition>is_target_detected</Condition><Action>agent_movement_freeze</Action><Action>task_completed</Action></Sequence><Action>wait_30_seconds</Action></Selector></Sequence><Sequence><Condition>is_line_formed</Condition><Action>change_color_to_red</Action></Sequence></Selector></Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'random_movement': 'Action: Move randomly within a designated area. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Move randomly within designated area, avoid obstacles and form a vertical line to signal completion.'Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Action>random_movement</Action><Action>avoid_obstacle</Action></Sequence><Sequence><Condition>is_agent_in_nest</Condition><Action>form_line</Action><Action>task_completed</Action></Sequence></Selector></Sequence></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'detect_friendlies': 'Condition: Check for nearby friendly robots. Returns True if a friendly robot is detected, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Move towards the target while avoiding obstacles and checking for friendly robots. Once target is reached, change color to green to signal success.'Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>detect_friendlies</Condition><Action>continue_movement_agent</Action></Sequence><Sequence><Condition>is_target_reached</Condition><Action>change_color_to_green</Action><Action>task_completed</Action></Sequence></Selector><Action>avoid_obstacle</Action></Sequence><Sequence 
###
4.// INSTRUCTIONS: Use only the following behaviors {'charge_used_ability': 'Action: Charge the used ability. Always returns True.', 'fly_to_closest_enemy': "Action: Fly towards the closest enemy. Always returns True.", 'is_ability_ready': 'Condition: Check if the ability is charged and ready to use. Returns True if the ability is ready, False otherwise.', 'is_enemy_detected': 'Condition: Check if there is an enemy within 10 units. Returns True if an enemy is detected within 10 units, False otherwise.', 'move_to_target': 'Action: Move towards a specific target. Always returns True.', 'use_ability': 'Action: Use a specific ability. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Fly towards and attack the closest enemy, then use a charged ability.'Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>is_enemy_detected</Condition> <Action>fly_to_closest_enemy</Action> <Selector> <Sequence> <Condition>is_ability_ready</Condition> <Action>use_ability</Action> </Sequence> <Action> charge_used_ability </Action> </Selector> </Sequence> <Sequence> <Action>charge_used_ability</Action> </Sequence> </Selector> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'collect_resources': 'Action: Collect resources from the environment. Always returns True.', 'deposit_resources': "Action: Deposit resources at the designated location. Always returns True.", 'find_closest_resource': 'Action: Move towards the closest available resource. Always returns True.', 'is_deposit_site_reachable': 'Condition: Check if the deposit site is reachable within 20 units. Returns True if reachable, False otherwise.', 'is_resource_depleted': 'Condition: Check if the current resource has been depleted. Returns True if depleted, False otherwise.', 'is_resource_nearby': 'Condition: Check if there is a resource nearby within 10 units. Returns True if a resource is detected within 10 units, False otherwise.', 'wait': 'Action: Remain stationary and wait for further instructions. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Collect resources, deposit at nearest site, and repeat until all resources are depleted.' Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>is_resource_nearby</Condition> <Selector> <Sequence> <Condition>is_resource_depleted</Condition> <Action>deposit_resources</Action> </Sequence> <Action>find_closest_resource</Action> </Selector> <Action> collect_resources </Action> </Sequence> <Sequence> <Condition>wait</Condition> </Sequence> </Selector> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'communicate': 'Action: Communicate with other robots. Always returns True.', 'follow_leader': "Action: Follow designated leader's movements. Always returns True.", 'is_leader_detected': 'Condition: Check if the designated leader is detected within 15 units. Returns True if detected, False otherwise.', 'is_other_robot_close': 'Condition: Check if there is another robot nearby within 10 units. Returns True if another robot is detected, False otherwise.', 'move_to_destination': 'Action: Move towards designated destination. Always returns True.', 'sync_motion': 'Action: Synchronize motion with other robots. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Follow designated leader, move to specific destination, and communicate with other robots while synchronizing motion.' Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Selector> <Sequence> <Condition>is_leader_detected</Condition> <Action>follow_leader</Action> <Selector> <Sequence> <Condition>is_other_robot_close</Condition> <Action>communicate</Action> <Action>sync_motion</Action> </Sequence> <Action> move_to_destination </Action> </Selector> </Sequence> <Condition>wait</Condition> </Selector> <Sequence> </BehaviorTree> 
###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_black': "Action: Change agent's color to black. Always returns True.", 'change_color_to_red': "Action: Change agent's color to red. Always returns True.", 'follow_path': 'Action: Follow the designated path. Always returns True.', 'move_to_nest': 'Action: Move towards the nest. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 10 units. Returns True if the target is within 10 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Find obstacles and avoid them, then follow designated path, reach the nest, change color to black.'Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_obstacle_detected</Condition><Action>avoid_obstacle</Action></Sequence><Action>wander</Action></Selector><Sequence><Condition>is_target_detected</Condition><Action>follow_path</Action><Sequence><Condition>is_agent_in_nest</Condition><Action>change_color_to_black</Action></Sequence><Action>task_completed</Action></Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'change_color_to_purple': "Action: Change agent's color to purple. Always returns True.", 'change_color_to_yellow': "Action: Change agent's color to yellow. Always returns True.", 'form_circle': 'Action: Form a circle with other agents. Always returns True.', 'grow_cluster': 'Action: Grow the cluster by adding neighboring agents. Always returns True.', 'is_agent_in_cluster': "Condition: Check if agent is part of an existing cluster. Returns True if the agent is part of a cluster, False otherwise.", 'is_cluster_formed': 'Condition: Check if a cluster is formed with the current agent as the center. Returns True if the cluster is formed, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 5 units. Returns True if the target is within 5 units of distance, False otherwise.', 'move_to_target': 'Action: Move towards the target. Always returns True.', 'return_to_cluster': 'Action: Return to the existing cluster. Always returns True.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Move towards target, form a circle with other agents, and change color to purple, then return to the cluster, grow the cluster, and change color to yellow.'Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree> <Sequence> <Condition>is_target_reached</Condition> <Action>form_circle</Action> <Sequence> <Condition>is_agent_in_cluster</Condition> <Action>change_color_to_yellow</Action> <Action>task_completed</Action> </Sequence> </Sequence> <Selector> <Sequence> <Condition>is_target_reached</Condition> <Action>move_to_target</Action> </Sequence> <Sequence> <Condition>is_cluster_formed</Condition> <Action>return_to_cluster</Action> <Action>grow_cluster</Action> </Sequence> </Selector> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_blue': "Action: Change agent's color to blue. Always returns True.", 'collect_resource': 'Action: Collect nearby resources. Returns True if resources are successfully collected, False otherwise.', 'drop_off_resource': 'Action: Drop off collected resources at designated location. Returns True if resources are successfully dropped off, False otherwise.', 'follow_path': 'Action: Follow the designated path. Always returns True.', 'is_agent_nearby': 'Condition: Check if there are other agents nearby. Returns True if other agents are within 10 units, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_resource_detected': 'Condition: Check if there are resources nearby. Returns True if resources are within 5 units, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Find resources, collect them, and drop them off at designated location, then follow path and change color to blue.'Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>is_resource_detected</Condition><Action>collect_resource</Action><Action>drop_off_resource</Action></Sequence><Action>wander</Action></Selector><Sequence><Condition>is_agent_nearby</Condition><Action>follow_path</Action><Action>change_color_to_blue</Action><Action>task_completed</Action></Sequence></Sequence></BehaviorTree> 
###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'drop_off_item': "Action: Drop off collected item at designated location. Returns True if item is successfully dropped off, False otherwise.", 'is_agent_carrying_item': "Condition: Check if agent is currently carrying an item. Returns True if an item is being carried, False otherwise.", 'is_destination_reached': "Condition: Check if destination is within 10 units. Returns True if the destination is within 10 units of distance, False otherwise.", 'pick_up_item': "Action: Pick up item at current location. Returns True if item is successfully picked up, False otherwise.", 'return_to_base': "Action: Move towards designated base location. Returns True upon reaching the base.", 'set_destination': "Action: Set designated destination for agent to reach.", 'wander': 'Action: Move randomly within the environment. Always returns True.', 'wait': "Action: Wait for a few seconds before resuming action. Always returns True."}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Collect item, return to base, drop off item at designated location' Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Action>pick_up_item</Action> <Sequence> <Condition>is_agent_carrying_item</Condition> <Action>return_to_base</Action> <Action>drop_off_item</Action> </Sequence> </Sequence> <Action>set_destination</Action> <Selector> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_blue': "Action: Change agent's color to blue. Always returns True.", 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'is_area_explored': 'Condition: Check if the current area has already been explored. Returns True if the area is explored, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'sense_neighbor_color': 'Action: Sense the color of the nearest neighbor and return the color value.', 'send_message': 'Action: Send a message to another agent in the swarm. Returns True if message is successfully sent, False otherwise.', 'set_destination': "Action: Set designated destination for agent to reach.", 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Explore an unknown environment and communicate with other swarm agents'Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Action>send_message</Action> <Action>set_destination</Action> <Action>wander</Action> </Sequence> <Action>continue_movement_agent</Action> <Selector> <Sequence> <Condition>is_path_clear</Condition> <Action>change_color_to_green</Action> </Sequence> <Action>change_color_to_blue</Action> </Selector> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_any_agent_moving': 'Condition: Check if any agent in the swarm is currently moving. Returns True if at least one agent is moving, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'release_agent': "Action: Release the agent from its current position. Returns True if agent is successfully released, False otherwise.", 'set_destination': "Action: Set designated destination for agent to reach.", 'stop_other_agents': "Action: Send a message to all other swarm agents to stop their current movement. Returns True if message is successfully sent, False otherwise.", 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Coordinate with other swarm agents to form a line and move together' Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Action>stop_other_agents</Action> <Action>form_line</Action> <Sequence> <Condition>is_any_agent_moving</Condition> <Action>release_agent</Action> </Sequence> </Sequence> <Action>continue_movement_agent</Action> <Selector> <Sequence> <Condition>is_obstacle_detected</Condition> <Action>avoid_obstacle</Action> </Sequence> <Action>set_destination</Action> <Sequence> <Condition>is_line_formed</Condition> <Action>change_color_to_green</Action> </Sequence> </Selector> </BehaviorTree> 
###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format. Output a behavior tree that avoids obstacles, wanders for 5 seconds, forms a vertical line, then changes color to green and white.
4.// USER COMMAND: Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>is_obstacle_detected</Condition><Action>avoid_obstacle</Action></Sequence><Action>wander</Action></Selector><Sequence><Sequence><Condition>is_line_formed</Condition><Action>change_color_to_green</Action><Action>task_completed</Action></Sequence><Action>form_line</Action></Sequence><Action>change_color_to_white</Action></Sequence></BehaviorTree>
 
###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format. Output a behavior tree that avoids obstacles, wanders for 3 seconds, then changes color to green and white until the target is reached.
5.// USER COMMAND: Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>is_obstacle_detected</Condition><Action>avoid_obstacle</Action></Sequence><Sequence><Action>wander</Action><Action>wander</Action><Action>wander</Action></Sequence></Selector><Sequence><Selector><Sequence><Condition>is_target_detected</Condition><Action>change_color_to_green</Action><Action>task_completed</Action></Sequence><Sequence><Action>change_color_to_white</Action><Action>task_completed</Action></Sequence></Selector></Sequence></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format. Output a behavior tree for swarm robots to cooperate and efficiently complete a task, such as collecting and depositing resources.
6.// USER COMMAND: Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>is_target_detected</Condition> <Action>continue_movement_agent</Action> <Action>agent_movement_freeze</Action> <Action>task_completed</Action> </Sequence> <Sequence> <Condition>is_agent_in_nest</Sequence> </Selector> <Sequence> <Selector> <Sequence> <Condition>is_obstacle_detected</Condition> <Action>avoid_obstacle</Action> </Sequence> <Action>wander</Action></Selector> <Selector> <Sequence> <Condition>is_line_formed</Condition> <Action>change_color_to_green</Action> <Action 
###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Explore an unknown environment, form a line once target is detected, and then return to the nest.'Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>is_target_detected</Condition> <Action>form_line</Action> </Sequence> <Sequence> <Condition>is_target_reached</Condition> <Selector> <Sequence> <Condition>is_path_clear</Condition> <Action>continue_movement_agent</Action> </Sequence> <Action>wander</Action> </Selector> </Sequence> <Sequence> <Condition>is_agent_in_nest</Condition> <Action>change_color_to_white</Action> <Action>agent_movement_freeze</Action> </Sequence> </Selector> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'disperse_agents': 'Action: Move away from other agents in the vicinity. Always returns True.', 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'move_randomly': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Avoid obstacles, move away from other agents, and find food while maintaining distance from other agents.'Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>is_obstacle_detected</Condition> <Action>avoid_obstacle</Action> <Action>move_randomly</Action> </Sequence> <Sequence> <Condition>is_agent_in_nest</Condition> <Selector> <Action>change_color_to_green</Action> <Sequence> <Condition>is_agent_close_to_other_agents</Condition> <Action>disperse_agents</Action> </Sequence> </Selector> </Sequence> </Selector> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'gather_resource': 'Action: Gather a resource from the environment. Returns True if successfully gathered a resource, False otherwise.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_resource_available': 'Condition: Check if there is a resource within 10 units. Returns True if a resource is within 10 units of distance, False otherwise.', 'is_resource_collected': 'Condition: Check if the agent has already collected a resource. Returns True if a resource has been collected, False otherwise.', 'return_to_nest': 'Action: Return to the nest. Returns True if the agent reaches the nest, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Collect resources from the environment and return them to the nest.'Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>is_resource_available</Condition> <Action>gather_resource</Action> <Action>return_to_nest</Action> </Sequence> <Sequence> <Condition>is_agent_in_nest</Condition> <Action>change_color_to_white</Action> <Action>agent_movement_freeze</Action> </Sequence> </Selector> </BehaviorTree>###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'is_in_target_range': 'Condition: Check if agent is in target detection range. Returns True if the agent is within 10 units of distance, False otherwise.', 'is_path_blocked': 'Condition: Check for obstacles ahead. Returns True if obstacles are present, False otherwise.', 'move_towards_target': 'Action: Move towards the target located at (20, 30). Always returns True.', 'set_speed_to_fast': "Action: Set agent's speed to fast. Always returns True.", 'set_speed_to_slow': "Action: Set agent's speed to slow. Always returns True." 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Reach the target at (20, 30) while avoiding obstacles, set speed to fast and freeze movement when target is reached'. Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>is_path_blocked</Condition><Action>avoid_obstacle</Action></Sequence><Action>wander</Action></Selector><Sequence><Condition>is_in_target_range</Condition><Action>set_speed_to_fast</Action><Action>move_towards_target</Action><Action>task_completed</Action></Sequence></Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'is_inventory_full': 'Condition: Check if the agent's inventory is full. Returns True if the inventory is full, False otherwise.', 'drop_items': 'Action: Drop all items from the agent's inventory. Always returns True.', 'pick_up_item': 'Action: Pick up item at current location. Always returns True.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Collect all items in the environment and return to nest, dropping items if inventory is full'. Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_inventory_full</Condition><Action>drop_items</Action></Sequence><Action>wander</Action></Selector><Sequence><Condition>is_target_detected</Condition><Sequence><Action>pick_up_item</Action><Condition>is_target_reached</Condition><Action>change_color_to_green</Action><Action>task_completed</Action></Sequence></Sequence><Sequence><Condition>is_agent_in_nest</Condition><Action>change_color_to_white</Action></Sequence><Sequence><Condition>is_obstacle_detected</Condition><Action>avoid_obstacle</Action></Sequence></BehaviorTree> 
###
4.// INSTRUCTIONS: Use only the following behaviors {'move_forward': 'Action: Move the robot one step forward in the current direction. Always returns True.', 'turn_left': 'Action: Turn the robot 90 degrees to the left. Always returns True.', 'turn_right': 'Action: Turn the robot 90 degrees to the right. Always returns True.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'follow_trail': 'Action: Follow a pre-determined path or trail. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Explore a maze and find the exit by following the marked path'. Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>is_path_clear</Condition><Action>turn_left</Action><Sequence><Condition>is_path_clear</Condition><Action>move_forward</Action></Sequence></Sequence><Sequence><Condition>is_path_clear</Condition><Action>turn_right</Action></Sequence></Selector><Action>follow_trail</Action></Sequence></BehaviorTree>
 
###
5.// INSTRUCTIONS: Use only the following behaviors {'move_forward': 'Action: Move the robot one step forward in the current direction. Always returns True.', 'turn_left': 'Action: Turn the robot 90 degrees to the left. Always returns True.', 'turn_right': 'Action: Turn the robot 90 degrees to the right. Always returns True.', 'is_path_blocked': 'Condition: Check if the path in the current direction is blocked or impassable. True if the path is blocked, False otherwise.', 'move_to_target': 'Action: Move towards a designated target location. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Navigate to a specified location while avoiding obstacles and following a logical path'. Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_path_blocked</Condition><Sequence><Condition>is_path_blocked</Condition><Action>turn_left</Action><Action>move_forward</Action></Sequence></Sequence><Sequence><Condition>is_path_blocked</Condition><Sequence><Condition>is_path_blocked</Condition><Action>turn_right</Action><Action>move_forward</Action></Sequence></Sequence><Action>move_to_target</Action></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'turn_left': 'Action: Turn the robot 90 degrees to the left. Always returns True.', 'turn_right': 'Action: Turn the robot 90 degrees to the right. Always returns True.', 'move_forward': 'Action: Move the robot one step forward in the current direction. Always returns True.', 'is_path_blocked': 'Condition: Check if the path in the current direction is blocked or impassable. True if the path is blocked, False otherwise.', 'is_area_explored': 'Condition: Check if the entire area has been thoroughly explored. Returns True if the area is fully mapped, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Thoroughly map an unknown area while avoiding obstacles and taking logical turns'. Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_area_explored</Condition><Action>turn_left</Action><Sequence><Condition>is_area_explored</Condition><Action>turn_right</Action></Sequence></Sequence><Sequence><Condition>is_path_blocked</Condition><Action>move_forward</Action></Sequence><Action>turn_left</Action></Selector></BehaviorTree>
###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'error_message': "Action: Display error message. Always returns True.", 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'navigate_to_target': 'Action: Navigate towards the target. Returns True if the agent is moving towards the target, False otherwise.', 'report_status': 'Action: Display current status. Always returns True.', 'stop_movement': "Action: Stop agent's movement. Always returns True.", 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Navigate to the target, display current status, avoid obstacles, and stop at designated location.'Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>is_target_detected</Condition> <Action>navigate_to_target</Action> </Sequence> <Sequence> <Condition>is_target_reached</Condition> <Action>stop_movement</Action> </Sequence> </Selector> <Sequence> <Condition>is_obstacle_detected</Condition> <Action>avoid_obstacle</Action> </Sequence> <Action>report_status</Action> </Sequence> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_red': "Action: Change agent's color to red. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'error_message': "Action: Display error message. Always returns True.", 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'pick_up_target': 'Action: Pick up the target object if within reach. Returns True if the object is picked up, False otherwise.', 'return_to_nest': 'Action: Return to the nest while avoiding obstacles. Returns True when the agent is back in the nest.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Find and pick up a target object, return to the nest, and change color to red.'Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>is_target_detected</Condition> <Action>pick_up_target</Action> <Sequence> <Condition>is_target_reached</Condition> <Action>return_to_nest</Action> <Action>change_color_to_red</Action> <Action>agent_movement_freeze</Action> </Sequence> </Sequence> <Sequence> <Condition>is_obstacle_detected</Condition> <Action>avoid_obstacle</Action> </Sequence> <Action>wander</Action> </Selector> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'calculate_distance': "Action: Calculate distance to target. Always returns True.", 'calculate_time': "Action: Record current time. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'follow_path': 'Action: Follow predefined path. Returns True if the agent is following the path, False otherwise.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_at_point': 'Condition: Check if agent is at specific point. Returns True if the agent is at the specified point, False otherwise.', 'is_close_to_target': 'Condition: Check if agent is within 10 units of target. Returns True if the agent is within 10 units of distance, False otherwise.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Calculate distance to target, follow predefined path, and signal task completion at specific point.'Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>is_target_detected</Condition> <Action>calculate_distance</Action> <Action>follow_path</Action> <Action>calculate_time</Action> <Sequence> <Condition>is_close_to_target</Condition> <Action>follow_path</Action> <Action>task_completed</Action> </Sequence> </Sequence> <Sequence> <Condition>is_agent_in_nest</Condition> <Action>wander</Action> </Sequence> </Selector> </BehaviorTree>    
###
4.// INSTRUCTIONS: Use only the following behaviors {'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'search_room_left': 'Action: Search the room by moving left 2 steps at a time.', 'search_room_right': 'Action: Search the room by moving right 2 steps at a time.', 'move_forward': 'Action: Move one step forward.', 'turn_left': 'Action: Turn the robot 90 degrees to the left.', 'turn_right': 'Action: Turn the robot 90 degrees to the right.', 'is_obstacle_ahead': 'Condition: Check if there is an obstacle ahead blocking the robot.', 'is_target_grabbed': 'Condition: Check if the target object has been grabbed. Returns True if the target is grabbed, False otherwise.', 'grab_target': 'Action: Grab the target object if it is within reach.', 'drop_target': 'Action: Drop the target object at the designated drop-off location.', 'is_at_dropoff': 'Condition: Check if the robot is at the designated drop-off location. Returns True if at the drop-off location, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'complete a maze by navigating to the target and dropping off the grabbed object' Output only the XML behavior tree without extra text.
4.// OUTPUT
<BehaviorTree><Selector><Sequence><Selector><Condition>is_target_grabbed</Condition><Selector><Sequence><Condition>is_at_dropoff</Condition><Action>drop_target</Action></Sequence><Sequence><Condition>is_obstacle_ahead</Condition><Selector><Sequence><Condition>is_obstacle_ahead</Condition><Action>turn_right</Action></Sequence><Action>move_forward</Action></Selector></Sequence></Selector></Sequence><Sequence><Condition>is_target_detected</Condition><Action>grab_target</Action></Sequence></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'change_color_to_red': "Action: Change agent's color to red. Always returns True.", 'look_up': 'Action: Look upwards for potential targets or obstacles.', 'look_down': 'Action: Look downwards for potential targets or obstacles.', 'look_left': 'Action: Look to the left for potential targets or obstacles.', 'look_right': 'Action: Look to the right for potential targets or obstacles.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_target_in_view': 'Condition: Check if target is within agent's field of view. Returns True if target is in field of view, False otherwise.', 'is_obstacle_in_view': 'Condition: Check if obstacle is within agent's field of view. Returns True if obstacle is in field of view, False otherwise.', 'is_at_dropoff': 'Condition: Check if the robot is at the designated drop-off location. Returns True if at the drop-off location, False otherwise.', 'move_forward': 'Action: Move one step forward.', 'turn_left': 'Action: Turn the robot 90 degrees to the left.', 'turn_right': 'Action: Turn the robot 90 degrees to the right.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'explore a room, looking for targets and avoiding obstacles' Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_target_in_view</Condition><Action>change_color_to_red</Action></Sequence><Sequence><Condition>is_obstacle_detected</Condition><Selector><Sequence><Condition>is_obstacle_in_view</Condition><Action>turn_right</Action></Sequence><Action>move_forward</Action></Selector></Sequence><Sequence><Condition>is_target_detected</Condition><Action>move_forward</Action></Sequence></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'change_color_to_blue': "Action: Change agent's color to blue. Always returns True.", 'collect_resource': 'Action: Collect the resource located nearby.', 'release_resource': 'Action: Release the resource at the designated drop-off location.', 'is_resource_detected': 'Condition: Check for nearby resources. Returns True if a resource is detected, False otherwise.', 'is_at_dropoff': 'Condition: Check if the robot is at the designated drop-off location. Returns True if at the drop-off location, False otherwise.', 'move_forward': 'Action: Move one step forward.', 'turn_left': 'Action: Turn the robot 90 degrees to the left.', 'turn_right': 'Action: Turn the robot 90 degrees to the right.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'collect resources and bring them to the drop-off location' Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_resource_detected</Condition><Action>collect_resource</Action></Sequence><Sequence><Condition>is_at_dropoff</Condition><Action>release_resource</Action></Sequence><Selector><Sequence><Condition>is_at_dropoff</Condition><Action>turn_right</Action></Sequence><Action>move_forward</Action></Selector></Selector></BehaviorTree>
###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_red': "Action: Change agent's color to red. Always returns True.", 'go_to_dropoff': 'Action: Go to designated drop-off location. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.', 'detect_intruder': 'Condition: Check if intruder is detected. Returns True if an intruder is detected within 30 units, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'If intruder is detected, form a line and change color to red to alert other robots, then go to designated drop-off location.' Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>detect_intruder</Condition> <Sequence> <Action>form_line</Action> <Action>change_color_to_red</Action> </Sequence> <Sequence> <Condition>is_target_reached</Condition> <Action>agent_movement_freeze</Action> </Sequence> </Sequence> <Action>change_color_to_green</Action> </Selector> <Sequence> <Condition>is_at_dropoff</Condition> <Action>go_to_dropoff</Action> </Sequence> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_blue': "Action: Change agent's color to blue. Always returns True.", 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'go_to_dropoff': 'Action: Go to designated drop-off location. Always returns True.', 'go_to_target': 'Action: Go to designated target location. Always returns True.', 'is_agent_at_target': 'Condition: Check if the agent has reached the target location. Returns True if the agent is at the target location, False otherwise.', 'is_in_swarm': 'Condition: Check if the agent is part of the swarm. Returns True if the agent is part of the swarm, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'avoid_black_area': 'Action: Avoid the black area on the map. Always returns True.', 'is_target_reached': 'Condition: Check if target is within 10 units. Returns True if the target is within 10 units of distance, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Move towards target, avoid black areas, change color to blue upon reaching target, then go to designated drop-off location.'Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Action>go_to_target</Action> <Condition>is_agent_at_target</Condition> <Sequence> <Action>avoid_black_area</Action> <Condition>is_in_swarm</Condition> <Action>change_color_to_blue</Action> </Sequence> </Sequence> <Sequence> <Condition>is_target_reached</Condition> <Action>agent_movement_freeze</Action> </Sequence> </Selector> <Sequence> <Condition>is_at_dropoff</Condition> <Action>go_to_dropoff</Action> </Sequence> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_red': "Action: Change agent's color to red. Always returns True.", 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'move_forward': 'Action: Move forward in a straight line. Always returns True.', 'move_backward': 'Action: Move backward in a straight line. Always returns True.', 'move_left': 'Action: Move left in a straight line. Always returns True.', 'move_right': 'Action: Move right in a straight line. Always returns True.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.', 'get_closer': 'Action: Move closer to target location. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Avoid obstacles, form a line while moving, and change color to red if target is detected. Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Action>avoid_obstacle</Action> <Condition>is_obstacle_detected</Condition> <Action>move_forward</Action> </Sequence> <Sequence> <Condition>is_target_detected</Condition> <Action>form_line</Action> <Action>change_color_to_red</Action> </Sequence> </Selector> <Action>change_color_to_green</Action> </BehaviorTree>
###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'increase_speed': 'Action: Increase agent's movement speed. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_slowing_down': 'Condition: Check if agent is reducing its movement speed. Returns True if agent is slowing down, False otherwise.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Evade obstacles while maintaining a maximum speed, form a line and change color to green when the target is detected, slow down when near the target'. Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>is_obstacle_detected</Condition><Action>avoid_obstacle</Action></Sequence><Action>increase_speed</Action></Selector><Sequence><Condition>is_target_detected</Condition><Action>change_color_to_green</Action><Sequence><Condition>is_target_reached</Condition><Action>agent_movement_freeze</Action></Sequence></Sequence></Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_red': "Action: Change agent's color to red. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'drop_target': "Action: Drop the target object at the designated drop-off location. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'grab_target': "Action: Grab the target object if it is within reach. Always returns True.", 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_grabbed': 'Condition: Check if the target object has been grabbed. Returns True if the target is grabbed, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Find the target, grab it, and form a vertical line. If obstacles are detected while holding the target, drop it and change color to red'. Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_target_detected</Condition><Action>grab_target</Action><Selector><Sequence><Condition>is_obstacle_detected</Condition><Action>avoid_obstacle</Action><Action>drop_target</Action><Action>change_color_to_red</Action></Sequence><Sequence><Condition>is_target_grabbed</Condition><Action>form_line</Action></Sequence></Selector></Sequence></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_slowing_down': 'Condition: Check if agent is reducing its movement speed. Returns True if agent is slowing down, False otherwise.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Move towards the target, avoid obstacles along the way, and form a vertical line when within 15 units of the target'. Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_target_detected</Condition><Selector><Sequence><Condition>is_obstacle_detected</Condition><Action>avoid_obstacle</Action></Sequence><Action>continue_movement_agent</Action></Selector><Sequence
###
4.// INSTRUCTIONS: Use only the following behaviors {'is_agent_facing_nest': 'Condition: Check if the agent is facing the nest. Returns True if the agent is facing the nest, False otherwise.', 'is_agent_near_nest': 'Condition: Check if the agent is within 5 units of the nest. Returns True if the agent is close enough to the nest, False otherwise.', 'move_towards_nest': 'Action: Move the agent towards the nest one step at a time.', 'turn_left': 'Action: Turn the agent 90 degrees to the left. Always returns True.', 'turn_right': 'Action: Turn the agent 90 degrees to the right. Always returns True.', 'start_dancing': 'Action: Perform a dance routine to signal completion of the task.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Generate behavior tree for a swarm of robots to collectively find and return to the nest, and perform a dance routine. Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_agent_near_nest</Condition><Action>start_dancing</Action></Sequence><Sequence><Condition>is_agent_facing_nest</Condition><Action>move_towards_nest</Action></Sequence><Selector><Sequence><Condition>is_nest_reached</Condition><Action>turn_left</Action></Sequence><Sequence><Condition>is_nest_reached</Condition><Action>turn_right</Action></Sequence></Selector></Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'is_agent_carrying_object': 'Condition: Check if the agent is currently carrying an object. Returns True if the agent is carrying an object, False otherwise.', 'pick_up_object': 'Action: Pick up the object at the agent's current location.', 'drop_object': 'Action: Drop the object at the desired location.', 'is_object_reachable': 'Condition: Check if the object is within reach of the agent. Returns True if the object is within reach, False otherwise.', 'move_towards_object': 'Action: Move towards the object one step at a time.', 'is_object_loaded': 'Condition: Check if the object has been successfully loaded onto the carrier robot. Returns True if the object is loaded, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Generate behavior tree for a swarm of robots to collaboratively pick up and transport a large object to a desired location. Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_agent_carrying_object</Condition><Action>drop_object</Action></Sequence><Sequence><Condition>is_object_reachable</Condition><Selector><Sequence><Condition>is_object_reachable</Condition><Sequence><Condition>is_agent_carrying_object</Condition><Action>move_towards_object</Action></Sequence></Selector><Action>pick_up_object</Action></Sequence></Selector><Sequence><Condition>is_object_loaded</Condition><Action>transport_object</Action></Sequence></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'is_agent_facing_target': 'Condition: Check if the agent is facing the target. Returns True if the agent is facing the target, False otherwise.', 'is_target_detected': 'Condition: Check if the target is within range. Returns True if the target is within range, False otherwise.', 'move_towards_target': 'Action: Move towards the target one step at a time.', 'turn_left': 'Action: Turn the agent 90 degrees to the left. Always returns True.', 'turn_right': 'Action: Turn the agent 90 degrees to the right. Always returns True.', 'collect_object': 'Action: Collect the target object at the agent's current location.', 'is_object_collected': 'Condition: Check if the object has been successfully collected. Returns True if the object has been collected, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Generate behavior tree for a swarm of robots to collaboratively detect, collect, and transport a target object to a specified location. Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_target_detected</Condition><Selector><Sequence><Condition>is_agent_facing_target</Condition><Action>move_towards_target</Action></Sequence><Selector><Sequence><Condition>is_agent_facing_target</Condition><Action>turn_left</Action></Sequence><Sequence><Condition>is_agent_facing_target</Condition><Action>turn_right</Action></Sequence></Selector></Selector></Sequence><Sequence><Condition>is_object_collected</Condition><Action>transport_object</Action></Sequence><Action>collect_object</Action></Selector></BehaviorTree>###
4.// INSTRUCTIONS: Use only the following behaviors {'detect_obstacle': 'Action: Scan the environment for obstacles. Always returns True.', 'eval_path': "Action: Evaluate available paths and choose the most efficient one. Always return True.", 'face_obstacle': "Action: Rotate to face the nearest obstacle. Always returns True.", 'follow_path': "Action: Follow the chosen path until the destination is reached. Returns True if the destination is reached, False otherwise.", 'initiate_movement': "Action: Initiate robot movement. Always returns True.", 'is_at_destination': 'Condition: Check if the robot has reached the final destination. Returns True if at the destination, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'move_backward': 'Action: Move the robot backwards. Always returns True.', 'move_forward': 'Action: Move the robot forward. Always returns True.', 'turn_left': 'Action: Turn the robot 90 degrees to the left. Always returns True.', 'turn_right': 'Action: Turn the robot 90 degrees to the right. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Detect an obstacle, calculate the most efficient path, and follow it while avoiding obstacles until reaching the destination.' Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree> <Sequence> <Condition>detect_obstacle</Condition> <Action>face_obstacle</Action> <Action>eval_path</Action> <Selector> <Sequence> <Condition>is_obstacle_detected</Condition> <Action>move_backward</Action> <Action>face_obstacle</Action> <Action>eval_path</Action> <Action>move_forward</Action> </Sequence> <Action>initiate_movement</Action> <Sequence> <Condition>is_at_destination</Condition> <Action>face_obstacle</Action> <Action>eval_path</Action> <Action>move_backward</Action> </Sequence> </Selector> </Sequence> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'gather_object': 'Action: Gather objects in the environment. Returns True if objects are found, False otherwise.', 'is_at_object': "Condition: Check if the robot is near an object to gather. Returns True if near an object, False otherwise.", 'is_object_in_hand': 'Condition: Check if the robot has successfully retrieved an object. Returns True if an object is held, False otherwise.', 'move_backward': 'Action: Move the robot backwards. Always returns True.', 'move_forward': 'Action: Move the robot forward. Always returns True.', 'rotate_left': 'Action: Rotate the robot 90 degrees to the left. Always returns True.', 'rotate_right': 'Action: Rotate the robot 90 degrees to the right. Always returns True.', 'scan_environment': 'Action: Scan the environment for objects. Returns True if objects are found, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Scan the environment, gather as many objects as possible, and return to the designated collection point.' Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Action>rotate_left</Action> <Action>scan_environment</Action> <Selector> <Sequence> <Condition>is_object_in_hand</Condition> <Sequence> <Condition>is_at_object</Condition> <Action>gather_object</Action> </Sequence> </Sequence> <Action>move_forward</Action> </Selector> <Sequence> <Condition>is_at_collection_point</Condition> <Action>rotate_left</Action> <Action>scan_environment</Action> <Selector> <Sequence> <Condition>is_at_object</Condition> <Action>gather_object</Action> </Sequence> </Selector> <Action>move_backward</Action> </Sequence> </Selector> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'build_structure': 'Action: Construct a new structure in the specified location. Returns True if the structure is successfully built, False otherwise.', 'gather_materials': 'Action: Gather materials needed for construction. Returns True if the required materials are found, False otherwise.', 'is_at_construction_site': 'Condition: Check if the robot has reached the designated construction site. Returns True if at the site, False otherwise.', 'is_material_available': 'Condition: Check if the required materials for construction are available. Returns True if materials are found, False otherwise.', 'is_structure_built': 'Condition: Check if the structure has been completed. Returns True if the structure is built, False otherwise.', 'move_backward': 'Action: Move the robot backwards. Always returns True.', 'move_forward': 'Action: Move the robot forward. Always returns True.', 'rotate_left': 'Action: Rotate the robot 90 degrees to the left. Always returns True.', 'rotate_right': 'Action: Rotate the robot 90 degrees to the right. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Gather materials, move to the construction site, and build a new structure.' Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree> <Sequence> <Action>rotate_left</Action> <Selector> <Sequence> <Condition>is_at_construction_site</Condition> <Selector> <Sequence> <Condition>is_material_available</Condition> <Action>gather_materials</Action> </Sequence> </Selector> <Action>rotate_right</Action> <Action>move_backward</Action> </Sequence> <Action>rotate_left</Action> <Selector> <Sequence> <Condition>is_structure_built</Condition> <Action>build_structure</Action> </Sequence> <Action>move_forward</Action> </Selector> </Sequence> </BehaviorTree> 
###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Follow target and change color to white when 10 units away' Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>is_target_detected</Condition> <Condition>is_target_reached</Condition> <Action>change_color_to_white</Action> <Action>agent_movement_freeze</Action> <Action>task_completed</Action> </Sequence> <Selector> <Condition>is_target_detected</Condition> <Action>continue_movement_agent</Action> </Selector> </Selector> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Detect when an obstacle is blocking the path and change color to green' Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>is_obstacle_detected</Condition> <Action>avoid_obstacle</Action> <Action>change_color_to_green</Action> </Sequence> <Sequence> <Condition>is_path_clear</Condition> <Action>continue_movement_agent</Action> </Sequence> </Selector> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Perform a random task' Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Action>wander</Action> </Sequence> </Selector> </BehaviorTree>
###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Complete an obstacle course by avoiding obstacles, forming a line, and changing color to blue at the finish line'. Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_obstacle_detected</Condition><Action>avoid_obstacle</Action></Sequence><Sequence><Condition>is_line_formed</Condition><Sequence><Condition>is_target_reached</Condition><Action>change_color_to_blue</Action></Sequence></Sequence><Action>form_line</Action><Action>continue_movement_agent</Action></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Collect and transport objects to the designated drop-off location'. Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_target_detected</Condition><Action>grab_target</Action><Sequence><Condition>is_at_dropoff</Condition><Action>drop_target</Action></Sequence></Sequence><Sequence><Condition>is_target_grabbed</Condition><Sequence><Condition>is_at_dropoff</Condition><Action>drop_target</Action></Sequence></Sequence><Action>wander</Action></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Assemble a puzzle in a team, each robot responsible for a different part of the puzzle'. Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_target_detected</Condition><Action>grab_target</Action><Sequence><Condition>is_at_dropoff</Condition><Action>drop_target</Action></Sequence></Sequence><Sequence><Condition>is_target_grabbed</Condition><Sequence><Condition>is_at_dropoff</Condition><Action>###
4.// INSTRUCTIONS: Use only the following behaviors {'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'wander': 'Action: Move randomly within the environment. Always returns True.', 'explore': 'Action: Explore the environment by moving in a direction for 5 seconds. Always returns True.', 'turn_left': 'Action: Turn the robot 90 degrees to the left. Always returns True.', 'turn_right': 'Action: Turn the robot 90 degrees to the right. Always returns True.', 'travel_to_goal': 'Action: Travel to a designated goal location. Always returns True.', 'is_goal_reached': 'Condition: Check if the goal has been reached. Returns True if the goal has been reached, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Explore the environment, travel to designated goal, and form a line with other robots once goal is reached'. Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_goal_reached</Condition><Action>turn_left</Action><Action>turn_left</Action><Action>form_line</Action></Sequence><Sequence><Condition>is_obstacle_detected</Condition><Action>avoid_obstacle</Action></Sequence><Action>wander</Action></Selector></BehaviorTree>
###
5.// INSTRUCTIONS: Use only {'explore': 'Action: Moves randomly and explores the environment. Always returns True.', 'follow_path': 'Action: Follows a predefined path to a designated goal. Always returns True.', 'stop': 'Action: Stops all movements. Always returns True.', 'is_path_clear': 'Condition: Checks if the path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_goal_reached': 'Condition: Checks if the goal has been reached. Returns True if the goal has been reached, False otherwise.', 'is_target_detected': 'Condition: Checks if a target is within 20 units. Returns True if a target is within 20 units of distance, False otherwise.', 'gather_resource': 'Action: Gathers resources located at the designated target location. ReturnsTrue always.', 'is_resource_gathered': 'Condition: Checks if resources have been gathered. Returns True if resources have been gathered, False otherwise.', 'deposit_resource': 'Action: Deposits gathered resources at the designated drop-off location. Returns True always.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Explore the environment, gather resources, and deposit them at designated drop-off location'. Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>is_path_clear</Condition><Action>explore</Action></Sequence><Selector><Sequence><Condition>is_target_detected</Condition><Action>gather_resource</Action></Sequence><Selector><Condition>is_resource_gathered</Condition><Sequence><Condition>is_path_clear</Condition><Action>deposit_resource</Action></Sequence></Selector></Selector></Selector><Sequence><Condition>is_path_clear</Condition><Action>stop</Action></Sequence></Sequence></BehaviorTree>
###
6.// INSTRUCTIONS: Use only {'explore': 'Action: Moves randomly and explores the environment. Always returns True.', 'follow_specific_path': "Action: Follows a specific path described by a sequence of coordinates. Always returns True.", 'vertical_line': 'Action: Forms a vertical line with other robots at the center. Returns True always.', 'is_path_clear': 'Condition: Checks if the path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_line_formed': 'Condition: Checks if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_target_reached': 'Condition: Checks if the target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'gather_resource': 'Action: Gathers resources located at the designated target location. ReturnsTrue always.', 'drop_resource': 'Action: Drops the gathered resource at the designated drop-off location. Returns True always.', 'is_resource_dropped': 'Condition: Checks if the resource has been dropped. Returns True if the resource has been dropped, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Explore the environment and form a vertical line at the center, then gather and drop a resource at designated locations'. Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_line_formed</Condition><Action>stop</Action><Sequence><Condition>is_path_clear</Condition><Action>follow_specific_path</Action></Sequence><Sequence><Condition>is_target_reached</Condition><Selector><Action>gather_resource</Action><Condition>is_resource_dropped</Condition><Action>drop_resource</Action></Selector></Sequence></Selector><Sequence><Condition>is_path_clear</Condition><Action>explore</Action></Sequence></Selector></BehaviorTree>
###
4.// INSTRUCTIONS: Use only the following behaviors {'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_red': "Action: Change agent's color to red. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'move_towards_target': 'Action: Move towards the target location. Always returns True.', 'is_at_target_location': 'Condition: Check if the agent is at the target location. Returns True if the agent is at the specified location, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wait_5_seconds': 'Action: Wait for 5 seconds. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Detect any obstacles, wait for 5 seconds, then move towards the target location and change color to red when reached.'Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>is_obstacle_detected</Condition> <Action>wait_5_seconds</Action> <Action>change_color_to_red</Action> </Sequence> <Sequence> <Action>move_towards_target</Action> <Condition>is_at_target_location</Condition> <Action>change_color_to_red</Action> <Action>task_completed</Action> </Sequence> </Selector> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_square': 'Action: Form a square shape with other agents. Always returns True.', 'is_at_square': 'Condition: Check if the agent is at a square shaped formation with other agents. Returns True if the agent is in a square formation, False otherwise.', 'is_at_target_location': 'Condition: Check if the agent is at the target location. Returns True if the agent is at the specified location, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Form a square shape with nearby agents and move towards the target location.'Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Action>form_square</Action> <Condition>is_at_square</Condition> </Sequence> <Sequence> <Action>move_towards_target</Action> <Condition>is_at_target_location</Condition> <Action>task_completed</Action> </Sequence> </Selector> <Action>wander</Action> </Sequence> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'change_color_to_blue': "Action: Change agent's color to blue. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'congregate': 'Action: Move towards other agents and form a group. Always returns True.', 'is_agent_in_groups': 'Condition: Check if the agent is in a group with other agents. Returns True if the agent is in a group, False otherwise.', 'is_agent_still': 'Condition: Check if the agent is not moving. Returns True if the agent is not moving, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'search_target': 'Action: Search for the target location. Always returns True.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Move towards other agents, change color to blue, search for the target location, and form a group.'Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Action>congregate</Action> <Condition>is_agent_in_groups</Condition> <Action>change_color_to_blue</Action> </Sequence> <Sequence> <Action>search_target</Action> <Condition>is_target_reached</Condition> <Action>task_completed</Action> </Sequence> </Selector> <Action>change_color_to_white</Action> </BehaviorTree>
###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Avoid obstacles and reach target within 15 units.'Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>is_obstacle_detected</Condition> <Action>avoid_obstacle</Action> </Sequence> <Sequence> <Condition>is_target_reached</Condition> <Action>agent_movement_freeze</Action> <Action>task_completed</Action> </Sequence> </Selector> </Sequence> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Form a vertical line, change color to green, and then continue movement.'Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Action>form_line</Action> <Action>change_color_to_green</Action> </Sequence> <Action>continue_movement_agent</Action> </Selector> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Move towards target if path is clear, change color to green upon reaching target, and then form a vertical line.'Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>is_path_clear</Condition> <Action>continue_movement_agent</Action> </Sequence> <Sequence> <Condition>is_target_reached</Condition> <Action>change_color_to_green</Action> </Sequence> <Action>form_line</Action> </Selector> </BehaviorTree>
###
4.// INSTRUCTIONS: Use only the following behaviors {'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'form_square': 'Action: Form a square shape with the agents. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_square_formed': 'Condition: Check if a square shape is formed with the agents. Returns True if the square is formed, False otherwise.', 'move_to_target': 'Action: Move towards the target location. Always returns True.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.', 'reset_color': "Action: Change agent's color back to white. Always returns True."}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Form a square with agents, then move towards target location and change color to green when arrived'. Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>is_path_clear</Condition><Sequence><Action>form_square</Action><Action>task_completed</Action></Sequence></Sequence><Sequence><Condition>is_square_formed</Condition><Action>move_to_target</Action></Sequence></Selector><Sequence><Condition>is_target_detected</Condition><Sequence><Condition>is_at_target_location</Condition><Action>change_color_to_green</Action></Sequence></Sequence></Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'move_to_target': 'Action: Move towards the target location. Always returns True.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'turn_left': 'Action: Turn the robot 90 degrees to the left. Always returns True.', 'turn_right': 'Action: Turn the robot 90 degrees to the right. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Navigate through obstacles to get to target, then form a line and turn left'. Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_path_clear</Condition><Sequence><Selector><Condition>is_target_detected</Condition><Action>move_to_target</Action></Selector><Sequence><Condition>is_target_detected</Condition><Action>turn_left</Action></Sequence></Sequence><Sequence><Condition>is_line_formed</Condition><Action>turn_left</Action></Sequence><Sequence><Condition>is_obstacle_detected</Condition><Action>avoid_obstacle</Action></Sequence><Action>wander</Action></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_green': 'Condition: Check if the agent's color is green. Returns True if the color is green, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'return_to_nest': 'Action: Return to the nest. Always returns True.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.', 'wait': 'Action: Stay in place for 5 seconds. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Wait for 5 seconds, then check if color is green. If not, return to nest'. Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>is_green</Condition><Action>wait</Action><Action>task_completed</Action></Sequence><Sequence><Condition>is_agent_in_nest</Condition><Action>return_to_nest</Action></Sequence><Sequence><Condition>is_obstacle_detected</Condition><Action>avoid_obstacle</Action></Sequence><Action>wander</Action></Selector></BehaviorTree>
###
4.// INSTRUCTIONS: Use only the following behaviors {'move_to_target_location': 'Action: Move the robot to the specified target location.', 'avoid_obstacle': 'Action: Avoid any detected obstacles while moving to the target location.', 'change_color_to_blue': "Action: Change robot's color to blue.", 'change_color_to_red': "Action: Change robot's color to red.", 'is_target_reached': 'Condition: Check if the robot has reached the specified target location.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Generate a behavior tree to move a robot from its current location to a specified target location, avoiding any obstacles in the way.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_target_reached</Condition><Action>change_color_to_blue</Action></Sequence><Sequence><Condition>is_obstacle_detected</Condition><Action>avoid_obstacle</Action></Sequence><Sequence><Condition>is_obstacle_ahead</Condition><Selector><Sequence><Condition>is_obstacle_ahead</Condition><Action>change_color_to_red</Action></Sequence><Action>move_forward</Action></Selector></Sequence></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'scan_area': 'Action: Scan the area for any potential targets or obstacles.', 'move_to_target_location': 'Action: Move the robot to the specified target location.', 'pick_up_object': 'Action: Pick up the specified object at the current location.', 'drop_object': 'Action: Drop the currently held object at the specified location.', 'is_target_found': 'Condition: Check if the target object has been found in the scanned area.', 'is_object_held': 'Condition: Check if the robot is currently holding an object.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Generate a behavior tree for a robot to scan an area, find and pick up a specific target object, and drop it off at a specific location.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_object_held</Condition><Action>drop_object</Action></Sequence><Sequence><Condition>is_target_found</Condition><Action>pick_up_object</Action></Sequence><Sequence><Condition>is_obstacle_detected</Condition><Action>avoid_obstacle</Action></Sequence><Sequence><Condition>is_area_scanned</Condition><Action>scan_area</Action></Sequence><Sequence><Condition>is_target_location_reached</Condition><Action>move_to_target_location</Action></Sequence></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'move_to_surrounding_area': 'Action: Move to a surrounding area specified by the user command.', 'search_for_object': 'Action: Search the surrounding area for the specified object.', 'gather_object': 'Action: Gather the specified object and bring it back to the starting location.', 'return_to_start': 'Action: Return to the starting location.', 'is_object_found': 'Condition: Check if the specified object has been found in the surrounding area.', 'is_object_gathered': 'Condition: Check if the specified object has been gathered and is being carried.', 'is_returned': 'Condition: Check if the robot has returned to the starting location.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Generate a behavior tree for a robot to explore and search for a specific object in a surrounding area and then return it to the starting location.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_object_gathered</Condition><Action>return_to_start</Action></Sequence><Sequence><Condition>is_returned</Condition><Action>gather_object</Action></Sequence><Sequence><Condition>is_object_found</Condition><Action>search_for_object</Action></Sequence><Sequence><Condition>is_surrounding_area_reached</Condition><Action>move_to_surrounding_area</Action></Sequence></Selector></BehaviorTree>
 
###
4.// INSTRUCTIONS: Use only the following behaviors {'move_to_target': "Action: Move towards the specified target location. Returns True once the target is reached.", 'is_target_reached': 'Condition: Check if the target location has been reached. Returns True if the target is within 5 units of distance, False otherwise.', 'is_path_obstructed': 'Condition: Check if the path to the target location is obstructed. Returns True if an obstacle is detected, False otherwise.', 'collect_item': 'Action: Collect the specified item, if present at the target location. Returns True once the item is collected.', 'drop_item': 'Action: Drop the currently held item. Returns True once the item is dropped.', 'is_holding_item': 'Condition: Check if the robot is currently holding an item. Returns True if an item is currently held, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Generate a behavior tree for a robot to navigate to a specific location, collect an item if present, and return to the initial location. The robot should also avoid any obstacles on the path.
4.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_holding_item</Condition><Selector><Sequence><Condition>is_path_obstructed</Condition><Action>move_around_obstacle</Action></Sequence><Action>move_to_target</Action></Selector></Sequence><Sequence><Condition>is_target_reached</Condition><Selector><Sequence><Condition>collect_item</Condition><Action>drop_item</Action></Sequence><Continue><Action>return_to_initial_location</Action></Continue></Selector></Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'move_to_target': "Action: Move towards the specified target location. Returns True once the target is reached.", 'is_target_reached': 'Condition: Check if the target location has been reached. Returns True if the target is within 5 units of distance, False otherwise.', 'is_path_obstructed': 'Condition: Check if the path to the target location is obstructed. Returns True if an obstacle is detected, False otherwise.', 'collect_item': 'Action: Collect the specified item, if present at the target location. Returns True once the item is collected.', 'drop_item': 'Action: Drop the currently held item. Returns True once the item is dropped.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Generate a behavior tree for a robot to navigate to a specific location, collect an item if present, and then return to the initial location. If the path is obstructed, the robot should wait until the path becomes clear.
5.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>is_path_obstructed</Condition><Wait>10 seconds</Wait><Continue></Continue></Sequence><Action>move_to_target</Action></Selector></Sequence><Sequence><Condition>is_target_reached</Condition><Selector><Sequence><Condition>collect_item</Condition><Action>drop_item</Action><Continue><Action>return_to_initial_location</Action></Continue></Sequence></Selector></Sequence></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'move_forward': 'Action: Move one step forward while maintaining formation.', 'shift_left': 'Action: Shift the entire formation one step to the left.', 'is_formation_broken': 'Condition: Check if the formation has become misaligned or broken.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Generate a behavior tree for a swarm of robots to maintain formation and avoid collisions with each other.
6.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_formation_broken</Condition><Action>reform_formation</Action></Sequence><Selector><Sequence><Condition>is_robot_ahead</Condition><Action>shift_left</Action></Sequence><Sequence><Condition>is_robot_behind</Condition><Action>shift_right</Action></Sequence></Selector><Sequence><Condition>is_robot_on_side</Condition><Action>move_forward</Action></Sequence></BehaviorTree>
###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_blue': "Action: Change agent's color to blue. Always returns True.", 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_red': "Action: Change agent's color to red. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'spread_out': 'Action: Move agent to a random location within a certain radius to spread out and avoid collisions. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_at_dropoff': 'Condition: Check if the robot is at the designated drop-off location. Returns True if at the drop-off location, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Move agent to spread out and avoid collisions while changing color to blue.' Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_obstacle_detected</Condition><Action>avoid_obstacle</Action></Sequence><Sequence><Condition>is_path_clear</Condition><Action>spread_out</Action></Sequence><Sequence><Condition>is_agent_in_nest</Condition><Action>change_color_to_blue</Action></Sequence></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'do_nothing': "Action: Do nothing, skip this node. Always returns True.", 'change_color_to_blue': "Action: Change agent's color to blue. Always returns True.", 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_red': "Action: Change agent's color to red. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_at_dropoff': 'Condition: Check if the robot is at the designated drop-off location. Returns True if at the drop-off location, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Move towards target, but if obstacle is detected, do nothing and continue movement.' Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>is_obstacle_detected</Condition> <Action>do_nothing</Action> <Action>agent_movement_freeze</Action> <Action>task_completed</Action> </Sequence> <Action>continue_movement_agent</Action></Selector> <Sequence> <Condition>is_target_detected</Condition> <Action>change_color_to_red</Action> <Action>agent_movement_freeze</Action> <Action>task_completed</Action> </Sequence> </Sequence> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_blue': "Action: Change agent's color to blue. Always returns True.", 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_red': "Action: Change agent's color to red. Always returns True.", 'follow_target': 'Action: Move towards the target location within a certain range. Returns True if target is reached, False otherwise.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_at_dropoff': 'Condition: Check if the robot is at the designated drop-off location. Returns True if at the drop-off location, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Follow and reach the target location, but avoid obstacles along the way.' Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>is_obstacle_detected</Condition> <Action>avoid_obstacle</Action> </Sequence> <Sequence> <Condition>is_path_clear</Condition> <Action>follow_target</Action> </Sequence> <Sequence> <Condition>is_target_reached</Condition> <Action>change_color_to_green</Action> <Action>agent_movement_freeze</Action> <Action>task_completed</Action> </Sequence> </Selector></BehaviorTree>
###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'move_to_target': 'Action: Move towards the target. Returns True if target is reached, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Move towards target and change color to green if target reached.'Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>is_target_reached</Condition> <Action>change_color_to_green</Action> <Action>agent_movement_freeze</Action> <Action>task_completed</Action> </Sequence> <Sequence> <Condition>is_path_clear</Condition> <Action>move_to_target</Action> </Sequence> </Selector> </Sequence> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_triangle': 'Action: Form a triangle shape with other agents. Returns True if triangle is formed, False otherwise.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_triangle_formed': 'Condition: Check if a triangle is formed with other agents. Returns True if triangle is formed, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Form a triangle with other agents, change color to white and continue moving if triangle is formed.'Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>is_triangle_formed</Condition> <Action>change_color_to_white</Action> <Action>continue_movement_agent</Action> </Sequence> <Action>form_triangle</Action> </Selector> </Sequence> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'follow_target': 'Action: Follow the target while within range. Returns True if target is within 30 units, False otherwise.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Follow target while changing color to green within a 30 unit range.'Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>is_target_detected</Condition> <Action>change_color_to_green</Action> <Action>follow_target</Action> </Sequence> <Sequence> <Condition>is_path_clear</Condition> <Action>continue_movement_agent</Action> </Sequence> </Selector> </Sequence> </BehaviorTree>
###
4.// INSTRUCTIONS: Use only the following behaviors {'move_left': 'Action: Move left one step.', 'move_right': 'Action: Move right one step.', 'is_wall_ahead': 'Condition: Check if a wall is blocking the path ahead. Returns True if a wall is detected, False otherwise.', 'is_gap_ahead': 'Condition: Check if there is a gap ahead. Returns True if a gap is detected, False otherwise.', 'pick_up_object': 'Action: Pick up and hold onto an object.', 'drop_object': 'Action: Drop the currently held object.', 'is_object_picked_up': 'Condition: Check if the agent is currently holding an object. Returns True if an object is held, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Navigate a maze while picking up and dropping objects along the way.'
4.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>is_object_picked_up</Condition> <Action>drop_object</Action> </Sequence> <Sequence> <Selector> <Condition>is_wall_ahead</Condition> <Action>move_right</Action> </Selector> <Selector> <Condition>is_gap_ahead</Condition> <Action>move_left</Action> </Selector> </Sequence> <Sequence> <Condition>is_object_picked_up</Condition> <Action>pick_up_object</Action> </Sequence> </Selector> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'observe_surroundings': 'Action: Observe and analyze the surroundings.', 'detect_enemy': 'Condition: Check if an enemy is detected. Returns True if an enemy is detected, False otherwise.', 'shoot': 'Action: Shoot at the detected enemy.', 'reload': 'Action: Reload ammunition.', 'is_ammo_low': 'Condition: Checks if ammunition count is low. Returns True if ammo count is low, False otherwise.', 'is_enemy_in_range': 'Condition: Check if enemy is within shooting range. Returns True if enemy is within range, False otherwise.', 'is_hidden': 'Condition: Check if the agent is currently hidden. Returns True if the agent is hiding, False otherwise.', 'hide': 'Action: Find a hiding spot and hide.', 'move_to_cover': 'Action: Move to a nearby cover spot.', 'wait': 'Action: Wait for a specified amount of time.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Perform stealthy attacks on enemies, utilizing cover and hiding spots when necessary.'
5.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>is_hidden</Condition> <Action>wait</Action> </Sequence> <Sequence> <Selector> <Condition>is_enemy_in_range</Condition> <Sequence> <Selector> <Condition>is_ammo_low</Condition> <Action>reload</Action> </Selector> <Action>shoot</Action> </Sequence> <Action>move_to_cover</Action> </Selector> <Action>observe_surroundings</Action> </Sequence> <Sequence> <Condition>detect_enemy</Condition> <Action>hide</Action> </Sequence> </Selector> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'search_for_object': 'Action: Search designated area for object.', 'scan_objects': 'Action: Scan the surroundings for potential objects to pick up.', 'pick_up_object': 'Action: Pick up and hold onto an object.', 'drop_object': 'Action: Drop the currently held object.', 'is_object_picked_up': 'Condition: Check if the agent is currently holding an object. Returns True if an object is held, False otherwise.', 'is_object_detected': 'Condition: Check if an object is within view. Returns True if an object is detected, False otherwise.', 'navigate_to_object': 'Action: Move towards the detected object.', 'is_obstacle_ahead': 'Condition: Check if there is an obstacle blocking the path ahead. Returns True if an obstacle is detected, False otherwise.', 'avoid_obstacle': 'Action: Avoid detected obstacles.', 'wait': 'Action: Wait for a specified amount of time.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Search for and retrieve a specified object within a designated area, while avoiding obstacles and adjusting movements accordingly.'
6.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>is_object_detected</Condition> <Selector> <Condition>is_object_picked_up</Condition> <Action>drop_object</Action> </Selector> <Action>pick_up_object</Action> </Sequence> <Sequence> <Selector> <Condition>is_obstacle_ahead</Condition> <Action>avoid_obstacle</Action> </Selector> <Selector> <Sequence> <Action>wait</Action> <Selector> <Condition>is_object_detected</Condition> <Action>navigate_to_object</Action> </Selector> </Sequence> </Selector> </Sequence> <Sequence> <Selector> <Condition>is_object_detected</Condition> <Action>scan_objects</Action> </Selector> <Action>search_for_object</Action> </Sequence> </Selector> </BehaviorTree>###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'change_speed_to_fast': 'Action: Change the agent�s speed to fast. Always returns True.', 'change_speed_to_slow': 'Action: Change the agent�s speed to slow. Always returns True.', 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'follow_leader': 'Action: Follow the designated leader. Always returns True.', 'follow_path': 'Action: Follow a predefined path. Always returns True.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_path_complete': 'Condition: Check if the current path has been completed. Returns True if the end of the path has been reached, False otherwise.', 'is_speed_set': 'Condition: Check if the agent's speed has been set. Returns True if the speed has been set, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Follow a predefined path at a slow speed, then change to a fast speed and follow a designated leader.'Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree> <Selector> <Condition>is_speed_set</Condition><Selector> <Sequence> <Action>change_speed_to_slow</Action> <Sequence><Condition>is_path_clear</Condition> <Action>follow_path</Action> </Sequence> </Sequence> <Action>change_speed_to_fast</Action> <Action>follow_leader</Action> </Selector> </BehaviorTree>
###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'change_robot_position': 'Action: Change robot�s position to a specified point. Always returns True.', 'check_area_clear': 'Condition: Check if the specified area is clear. Returns True if the area is clear of obstacles, False otherwise.', 'explore_area': 'Action: Explore the specified area. Always returns True.', 'move_forward': 'Action: Move the robot one step forward in the current direction. Always returns True.', 'move_to_target': 'Action: Move the robot towards the specified target. Returns True if the robot reaches the target, False otherwise.', 'pick_up_object': 'Action: Pick up the specified object. Returns True if the object is successfully picked up, False otherwise.', 'place_object': 'Action: Place the object at the current location. Returns True if the object is successfully placed, False otherwise.', 'rotate_left': 'Action: Rotate the robot to the left by a specified degree. Returns True if the rotation is successful, False otherwise.', 'rotate_right': 'Action: Rotate the robot to the right by a specified degree. Returns True if the rotation is successful, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Move to a specified location, check if it is clear, pick up an object, and place it at the current location.'Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Action>move_to_target</Action> <Sequence> <Condition>check_area_clear</Condition> <Selector> <Sequence> <Action>pick_up_object</Action> <Action>place_object</Action> </Sequence> <Action>task_completed</Action> </Selector> </Sequence> </Sequence> <Action>wander</Action> </Selector> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'check_status': 'Action: Check the agent's status and report it. Always returns True.', 'communicate_data': 'Action: Communicate data with other robots. Returns True if the communication is successful, False otherwise.', 'detect_intruders': 'Action: Detect any intruders in the area. Returns True if intruders are detected, False otherwise.', 'form_circle': 'Action: Form a circle with other robots. Returns True if the circle is formed, False otherwise.', 'is_area_secure': 'Condition: Check if the area is secure and free of intruders. Returns True if the area is secure, False otherwise.', 'navigate_to_coordinate': 'Action: Navigate to the specified coordinates. Returns True if the agent reaches the coordinates, False otherwise.', 'send_warning': 'Action: Send a warning signal to other robots. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Check the agent's status, form a circle with other robots, navigate to a specified location, and send a warning signal.'Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree> <Selector> <Condition>is_area_secure</Condition> <Selector> <Sequence> <Action>check_status</Action> <Action>form_circle</Action> <Action>navigate_to_coordinate</Action> </Sequence> <Action>send_warning</Action> </Selector> <Action>wander</Action> </Selector> </BehaviorTree> 
###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'circle_target': 'Action: Circle around the target. Always return True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_moving_cw': 'Condition: Check if the agent is moving clockwise. Returns True if the agent is moving clockwise, False otherwise.', 'is_moving_ccw': 'Condition: Check if the agent is moving counterclockwise. Returns True if the agent is moving counterclockwise, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 10 units. Returns True if the target is within 10 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Circle around the target, change color to green when target is reached, then return to nest and freeze movement if obstacles are detected along the way.'Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>is_target_reached</Condition> <Action>change_color_to_green</Action> </Sequence> <Sequence> <Condition>is_obstacle_detected</Condition> <Action>wander</Action> </Sequence> <Sequence> <Condition>is_agent_in_nest</Condition> <Action>agent_movement_freeze</Action> </Sequence> </Selector> <Selector> <Sequence> <Action>wander</Action> <Condition>is_moving_cw</Condition> </Sequence> <Sequence> <Action>wander</Action> <Condition>is_moving_ccw</Condition> </Sequence> <Sequence> <Condition>is_path_clear</Condition> <Action>circle_target</Action> </Sequence> </Selector> </Sequence> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'change_color_to_blue': "Action: Change agent's color to blue. Always returns True.", 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 30 units. Returns True if the target is within 30 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Form a line when target is detected within 30 units, change color to green and then blue, and move randomly until reaching the nest.'Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>is_target_detected</Condition> <Action>form_line</Action> <Action>change_color_to_green</Action> <Action>change_color_to_blue</Action> <Action>wander</Action> </Sequence> <Sequence> <Condition>is_agent_in_nest</Condition> <Action>agent_movement_freeze</Action> </Sequence> </Selector> <Selector> <Action>wander</Action> <Sequence> <Condition>is_path_clear</Condition> </Sequence> </Selector> </Sequence> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'drop_off_items': 'Action: Drop off carried items at designated location. Always returns True.', 'is_agent_at_location': 'Condition: Check if the agent is at designated location. Returns True if the agent is at designated location, False otherwise.', 'is_agent_facing_obstacle': 'Condition: Check if the agent is facing an obstacle. Returns True if the agent is facing an obstacle, False otherwise.', 'is_agent_holding_items': 'Condition: Check if the agent is carrying items. Returns True if the agent is carrying items, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'pick_up_items': 'Action: Pick up items at designated location. Always returns True.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Pick up items and drop them off at designated location, while avoiding obstacles along the way.'Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>is_agent_facing_obstacle</Condition> <Action>drop_off_items</Action> </Sequence> <Sequence> <Condition>is_agent_holding_items</Condition> <Action>is_agent_at_location</Action> <Action>agent_movement_freeze</Action> <Action>task_completed</Action> </Sequence> <Sequence> <Condition>is_path_clear</Condition> <Action>pick 
###
4.// INSTRUCTIONS: Use only the following behaviors {'move_towards_target': 'Action: Move towards the target object. Always returns True.', 'check_battery_level': 'Condition: Check the battery level. Returns True if battery level is above 20%, False otherwise.', 'target_within_10_units': 'Condition: Check if target is within 10 units. Returns True if target is within 10 units of distance, False otherwise.', 'target_within_5_units': 'Condition: Check if target is within 5 units. Returns True if target is within 5 units of distance, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Search for the target, if battery level is low or target is not detected within 10 units, return home and recharge battery.'
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>check_battery_level</Condition><Condition>target_within_10_units</Condition><Action>move_towards_target</Action></Sequence><Sequence><Condition>check_battery_level</Condition><Action>wander</Action></Sequence><Sequence><Condition>target_within_10_units</Condition><Selector><Sequence><Condition>target_within_5_units</Condition><Action>task_completed</Action></Sequence><Action>wander</Action></Selector></Sequence></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'move_to_nearest_obstacle': 'Action: Move to the nearest obstacle. Always returns True.', 'pick_up_obstacle': 'Action: Pick up the obstacle and carry it to the designated drop-off location. Always returns True.', 'drop_obstacle': 'Action: Drop the carried obstacle at the designated drop-off location. Always returns True.', 'check_carrying_obstacle': 'Condition: Check if the robot is carrying an obstacle. Returns True if carrying, False otherwise.', 'is_at_dropoff': 'Condition: Check if the robot is at the designated drop-off location. Returns True if at the drop-off location, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Collect all obstacles found within 50 units, then drop them off at the designated drop-off location'. Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>check_carrying_obstacle</Condition><Action>pickup_obstacle</Action><Selector><Sequence><Condition>is_at_dropoff</Condition><Action>drop_obstacle</Action></Sequence><Action>move_to_nearest_obstacle</Action></Selector></Sequence><Action>wander</Action></Selector></Sequence></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'move_randomly': 'Action: Move randomly within the environment. Always returns True.', 'eat_food': 'Action: Eat any food found within the environment. Always returns True.', 'check_energy_level': 'Action: Check the energy level of the robot. Returns True if energy level is above 50%, False otherwise.', 'is_surrounded': 'Condition: Check if the robot is surrounded by other robots. Returns True if surrounded, False otherwise.', 'is_food_detected': 'Condition: Check if food is nearby. Returns True if food is within sensing range, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Search for food around the environment, if energy level is low and surrounded by other robots, move randomly and eat food until energy level is above 80%'. Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_food_detected</Condition><Action>eat_food</Action><Sequence><Condition>check_energy_level</Condition><Condition>is_surrounded</Condition><Selector><Sequence><Condition>is_food_detected</Condition><Action>eat_food</Action></Sequence><Action>move_randomly</Action></Selector></Sequence></Sequence><Action>wander</Action></Selector></BehaviorTree>  
###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Change color to white, avoid obstacles, and continue movement'Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Action>avoid_obstacle</Action> <Self>move_randomly</Self> </Sequence> <Sequence> <Condition>is_obstacle_detected</Condition> <Action>continue_movement_agent</Action> </Sequence> <Action>change_color_to_white</Action> </Selector> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Check if path ahead is clear, if yes, then continue movement, if not, then avoid obstacles and form a line'.Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree> <Sequence> <Condition>is_path_clear</Condition> <Action>continue_movement_agent</Action> </Sequence> <Sequence> <Action>avoid_obstacle</Action> <Self>form_line</Self> </Sequence> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Check if target is within 15 units, if yes then change color to red and form a line, if not then wander'.Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree> <Condition>is_target_reached</Condition> <Selector> <Sequence> <Action>form_line</Action> <Action>change_color_to_red</Action> </Sequence> <Action>wander</Action> </Selector> </BehaviorTree>  
###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'move_right': 'Action: Move one step to the right. Always returns True.', 'move_left': 'Action: Move one step to the left. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'move left if obstacle detected, otherwise move right.'Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>is_obstacle_detected</Condition> <Action>move_left</Action> <Action>task_completed</Action> </Sequence> <Sequence> <Condition>is_path_clear</Condition> <Action>move_right</Action> <Action>task_completed</Action> </Sequence> </Selector> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_square': 'Action: Form a square shape with 4 agents. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_square_formed': 'Condition: Check if all 4 agents are in correct positions to form a square. Returns True if the square is formed, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'form a square with 4 agents and then change color to green.' Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>is_square_formed</Condition> <Action>change_color_to_green</Action> <Action>agent_movement_freeze</Action> <Action>task_completed</Action> </Sequence> <Action>form_square</Action></Selector> </Sequence> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'create_random_shape': 'Action: Create a random shape using agents. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_shape_created': 'Condition: Check if a random shape has been successfully created. Returns True if a shape is created, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree for agents to randomly create a shape and then change color to green. Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>is_shape_created</Condition> <Action>change_color_to_green</Action> <Action>agent_movement_freeze</Action> <Action>task_completed</Action> </Sequence> <Action>create_random_shape</Action></Selector> </Sequence> </BehaviorTree>
4.// INSTRUCTIONS: Use only the following behaviors {'search_area': 'Action: Search designated area for target.', 'return_home': 'Action: Return to home base.', 'collect_information': 'Action: Collect information about target.', 'follow_target': 'Action: Follow the target while maintaining distance of at least 5 units.', 'is_target_visible': 'Condition: Check if the target is visible. Returns True if visible, False otherwise.', 'is_agent_in_position': 'Condition: Check if the agent is in the designated position. Returns True if in position, False otherwise.', 'is_target_within_range': 'Condition: Check if the target is within 15 units. Returns True if within range, False otherwise.', 'is_target_captured': 'Condition: Check if the target has been captured. Returns True if captured, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Generate a behavior tree for the swarm robots to search and capture a moving target while maintaining distance and returning home once target is captured.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_target_visible</Condition><Action>follow_target</Action></Sequence><Sequence><Condition>is_target_within_range</Condition><Action>collect_information</Action></Sequence><Sequence><Condition>is_target_captured</Condition><Action>return_home</Action></Sequence><Action>search_area</Action></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'move_forward': 'Action: Move one step forward while maintaining formation.', 'move_backward': 'Action: Move one step backwards while maintaining formation.', 'turn_left': 'Action: Rotate 90 degrees to the left as a group.', 'turn_right': 'Action: Rotate 90 degrees to the right as a group.', 'activate_sensor': 'Action: Activate a specific sensor for data collection.', 'deactivate_sensor': 'Action: Deactivate a specific sensor.', 'is_obstacle_detected': 'Condition: Check if an obstacle is detected by the activated sensor. Returns True if obstacle detected, False otherwise.', 'is_sensor_active': 'Condition: Check if the specified sensor is currently activated. Returns True if active, False otherwise.', 'is_formation_broken': 'Condition: Check if the formation has become misaligned or broken.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Generate a behavior tree for the swarm robots to navigate an unfamiliar environment while utilizing sensor data for obstacle detection and maintaining formation.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_sensor_active</Condition><Selector><Sequence><Condition>is_obstacle_detected</Condition><Action>turn_left</Action></Sequence><Action>move_forward</Action></Selector></Sequence><Sequence><Condition>is_formation_broken</Condition><Action>reform_formation</Action></Sequence><Sequence><Condition>is_sensor_active</Condition><Action>activate_sensor</Action></Sequence></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'move_forward': 'Action: Move one step forward while avoiding obstacles.', 'move_left': 'Action: Move to the left while avoiding obstacles.', 'move_right': 'Action: Move to the right while avoiding obstacles.', 'change_speed_low': 'Action: Decrease movement speed for precise navigation.', 'change_speed_high': 'Action: Increase movement speed for faster navigation.', 'is_obstacle_detected': 'Condition: Check for obstacles near the robot. Returns True if an obstacle is detected, False otherwise.', 'is_at_boundary': 'Condition: Check if the robot is at the boundary of the environment. Returns True if at the boundary, False otherwise.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 5 units. Returns True if the target is within 5 units of distance, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Generate a behavior tree for the swarm robots to navigate a complex maze-like environment and reach the target while avoiding obstacles and adjusting speed for precision.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_at_boundary</Condition><Action>change_speed_low</Action><Selector><Sequence><Condition>is_obstacle_detected</Condition><Action>move_right</Action></Sequence><Action>move_forward</Action></Selector></Sequence><Sequence><Condition>is_target_reached</Condition><Action>move_forward</Action></Sequence><Sequence><Condition>is_target_detected</Condition><Action>move_left</Action></Sequence></Selector></BehaviorTree> 
###
4.// INSTRUCTIONS: Use only the following behaviors {'move_to_random_location': 'Action: Move the robot to a random location within a given range. Always returns True.', 'check_battery_level': 'Condition: Check the current battery level of the robot. Returns True if the battery level is above 50%, False otherwise.', 'find_charging_station': 'Action: Move the robot towards the nearest charging station. Always returns True.', 'charge_robot': 'Action: Charge the robot until the battery is fully charged. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Ensure the robot is fully charged before starting a new task.'Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>check_battery_level</Condition> <Action>move_to_random_location</Action> </Sequence> <Sequence> <Condition>check_battery_level</Condition> <Action>find_charging_station</Action> <Action>charge_robot</Action> </Sequence> </Selector> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'move_to_location': 'Action: Move the robot to a specified location. Always returns True.', 'check_location': 'Condition: Check the current location of the robot. Returns True if the robot is at the specified location, False otherwise.', 'pick_up_object': 'Action: Pick up the object at the current location and attach it to the robot. Always returns True.', 'place_object': 'Action: Place the attached object at a specified location. Always returns True.', 'check_attached_object': 'Condition: Check if the robot has an attached object. Returns True if the robot has an attached object, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Pick up an object at a specific location and then place it at another location.' Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Action>move_to_location</Action> <Condition>check_location</Condition> <Action>pick_up_object</Action> <Action>place_object</Action> <Condition>check_attached_object</Condition> </Sequence> <Selector> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'detect_danger': 'Condition: Check for any dangers in the environment. Returns True if a danger is present, False otherwise.', 'avoid_danger': 'Action: Avoid the detected danger. Always returns True.', 'navigate_to_safety': 'Action: Navigate to the nearest safe location. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Ensure the safety of the robot and navigate to a safe location.'Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Condition>detect_danger</Condition> <Action>avoid_danger</Action> <Action>navigate_to_safety</Action> </Selector> </Sequence> </BehaviorTree> 
###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_neutral': "Action: Change agent's color to neutral. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'move_to_center': 'Action: Move to the center of the environment, always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_center_reached': 'Condition: Check if agent has reached the center. Returns True if agent is within 5 units of the center, False otherwise.', 'is_color_neutral': 'Condition: Check if agent's color is neutral. Returns True if agent's color is neutral, False otherwise.', 'is_color_green': 'Condition: Check if agent's color is green. Returns True if agent's color is green, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Move to the center, change color to neutral, avoid obstacles, and return to the nest, freezing movement.'Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>is_center_reached</Condition> <Action>change_color_to_neutral</Action> <Action>continue_movement_agent</Action> </Sequence> <Action>avoid_obstacle</Action> <Sequence> <Condition>is_agent_in_nest</Condition> <Action>agent_movement_freeze</Action> <Action>task_completed</Action> </Sequence> </Selector> <Action>move_to_center</Action> </Sequence> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_red': "Action: Change agent's color to red. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'move_to_target': 'Action: Move towards target location. Always returns True.', 'rotate_left': 'Action: Rotate left by 90 degrees. Always returns True.', 'rotate_right': 'Action: Rotate right by 90 degrees. Always returns True.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Avoid obstacles, move to target, and rotate left.'Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Action>rotate_left</Action> <Condition>is_agent_in_nest</Condition> </Sequence> <Action>move_to_target</Action> <Action>avoid_obstacle</Action> </Selector> </Sequence> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_red': "Action: Change agent's color to red. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'move_to_location': 'Action: Move to specific location based on input coordinates. Always returns True.', 'rotate_left': 'Action: Rotate left by 90 degrees. Always returns True.', 'rotate_right': 'Action: Rotate right by 90 degrees. Always returns True.', 'compare_distance': 'Condition: Compare distance between two inputs. Returns True if the distance between the two inputs is less than 10 units, False otherwise.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_color_green': 'Condition: Check if agent's color is green. Returns True if agent's color is green, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Move to location (5,10), change color to green, avoid obstacles, and return to the nest, freezing movement.'Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Action>move_to_location(5,10)</Action> <Sequence> <Condition>compare_distance</Condition> <Action>avoid_obstacle</Action> </Sequence> </Sequence> <Action>change_color_to_green</Action> </Selector> <Sequence> <Condition>is_agent_in_nest</Condition> <Action>agent_movement_freeze</Action> <Action>task_completed</Action> </Sequence> </Sequence> </BehaviorTree>  
###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_blue': "Action: Change agent's color to blue. Always returns True.", 'change_color_to_red': "Action: Change agent's color to red. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'fly': 'Action: Fly to a specific location. Always returns True.', 'is_agent_available': 'Condition: Check if the agent is available for a task. Returns True if the agent is available, False otherwise.', 'is_agent_flying': 'Condition: Check if the agent is currently flying. Returns True if the agent is flying, False otherwise.', 'is_enemy_detected': 'Condition: Check for enemy presence. Returns True if an enemy is detected, False otherwise.', 'is_destination_reached': 'Condition: Check if the agent has reached the designated destination. Returns True if the destination is reached, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'land': 'Action: Land at the current location. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Fly to a location, change color to blue, and return to base.'Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>is_destination_reached</Condition><Action>change_color_to_blue</Action><Action>fly</Action></Sequence><Sequence><Condition>is_agent_flying</Condition><Action>land</Action></Sequence><Action>continue_movement_agent</Action></Selector><Sequence><Condition>is_agent_available</Condition><Action>task_completed</Action></Sequence></Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_blue': "Action: Change agent's color to blue. Always returns True.", 'change_color_to_red': "Action: Change agent's color to red. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'fire_laser': 'Action: Fire a laser beam in front of the agent. Returns True if the laser was successfully fired, False otherwise.', 'is_agent_near_enemy': 'Condition: Check if the agent is within a certain distance of an enemy. Returns True if an enemy is detected within 10 units of distance, False otherwise.', 'is_enemy_detected': 'Condition: Check for enemy presence. Returns True if an enemy is detected, False otherwise.', 'is_enemy_disabled': 'Condition: Check if the enemy has been disabled or destroyed. Returns True if the enemy is disabled, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'move_forward': 'Action: Move the robot one step forward in the current direction. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Search for an enemy, fire laser, and disable it if encountered. Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>is_enemy_detected</Condition> <Sequence> <Condition>is_agent_near_enemy</Condition> <Action>fire_laser</Action> <Action>is_enemy_disabled</Action> </Sequence> <Action>move_forward</Action> </Sequence> <Action>avoid_obstacle</Action> </Selector> <Sequence> <Condition>is_enemy_disabled</Condition> <Action>change_color_to_blue</Action> </Sequence> </Sequence> </BehaviorTree>
  
###
6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_red': "Action: Change agent's color to red. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'execute_task': 'Action: Execute a specified task, involving multiple sub-tasks. Always returns True.', 'is_navigation_ready': 'Condition: Check if the agent's navigation system is ready. Returns True if it is ready, False otherwise.', 'is_target_acquired': 'Condition: Check if the agent has acquired the target. Returns True if the target has been acquired, False otherwise.', 'is_task_executable': 'Condition: Check if the necessary conditions for executing the task are met. Returns True if the conditions are met, False otherwise.', 'navigate_to_target': 'Action: Navigate to the designated target location. Returns True if the agent successfully reaches the target location, False otherwise.', 'search_for_target': 'Action: Search the environment for the designated target. Returns True if the target is found, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Navigate to the target location, search for the target if necessary, and execute the task once the target is acquired.' Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_target_acquired</Condition><Action>navigate_to_target</Action><Action>task_completed</Action></Sequence><Sequence><Condition>is_task_executable</Condition><Action>execute_task</Action></Sequence><Sequence><Condition>is_navigation_ready</Condition><Action>search_for_target</Action></Sequence></Selector></BehaviorTree> 
###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'random_movement': 'Action: Move the agent in a random direction. Always returns True.', 'avoid_obstacle_and_move_forward': 'Action: If obstacle detected, avoid it and continue moving forward. Otherwise, move forward. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Move randomly, but avoid obstacles and form a vertical line.' Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Action>form_line</Action> <Action>task_completed</Action> </Sequence> <Sequence> <Condition>is_target_reached</Condition> <Action>change_color_to_green</Action> <Action>agent_movement_freeze</Action></Sequence> <Action>avoid_obstacle_and_move_forward</Action> </Selector> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Form a line and move towards target location, but avoid obstacles.' Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Action>form_line</Action> <Action>target_location_task</Action> <Action>move_towards_target</Action> <Action>task_completed</Action> </Sequence> <Sequence> <Condition>is_obstacle_detected</Condition> <Action>avoid_obstacle</Action> <Action>update_map</Action> </Sequence> </Selector> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'form_circle': 'Action: Form a circle formation with other robots. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Move towards target location while maintaining a circular formation with other robots.' Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Action>target_location_task</Action> <Action>move_towards_target</Action> <Action>form_circle</Action> <Action>task_completed</Action> </Sequence> <Sequence> <Condition>is_obstacle_detected</Condition> <Action4.// INSTRUCTIONS: Use only the following behaviors {'move_forward': 'Action: Move the robot forward at a constant speed. Always returns True.', 'turn_left': 'Action: Turn the robot 90 degrees to the left. Always returns True.', 'turn_right': 'Action: Turn the robot 90 degrees to the right. Always returns True.', 'jump': 'Action: Jump over small obstacles. Always returns True.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Navigate an obstacle course by moving forward, turning left or right, and jumping over obstacles when needed'. Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_obstacle_detected</Condition><Sequence><Condition>is_obstacle_detected</Condition><Sequence><Condition>is_obstacle_detected</Condition><Sequence><Action>jump</Action><Action>move_forward</Action></Sequence><Action>move_forward</Action></Sequence><Action>turn_left</Action></Sequence><Action>turn_right</Action></Sequence><Action>move_forward</Action></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_red': "Action: Change agent's color to red. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.', 'wait_for_command': "Condition: Check for user's command. Returns True when command is received, False otherwise."}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Follow a specific color path, change color to red when an obstacle is detected, stop and wait for command from user when reached destination'. Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_agent_in_nest</Condition><Sequence><Condition>is_target_detected</Condition><Sequence><Condition>is_obstacle_detected</Condition><Action>change_color_to_red</Action></Sequence><Action>change_color_to_green</Action></Sequence><Action>form_line</Action></Sequence><Sequence><Condition>is_path_clear</Condition><Action>change_color_to_green</Action><Action>move_forward</Action><Condition>wait_for_command</Condition></Sequence></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'move_forward': 'Action: Move the robot forward at a constant speed. Always returns True.', 'turn_left': 'Action: Turn the robot 90 degrees to the left. Always returns True.', 'turn_right': 'Action: Turn the robot 90 degrees to the right. Always returns True.', 'is_object_detected': 'Condition: Check if object is detected in front of the robot. Returns True if an object is detected, False otherwise.', 'pick_up_object': 'Action: Pick up the object in front of the robot. Always returns True.', 'drop_object': 'Action: Drop the object at the designated drop-off location. Always returns True.', 'is_object_picked': 'Condition: Check if object has been picked up. Returns True if object is picked, False otherwise.', 'is_at_dropoff': 'Condition: Check if the robot is at the designated drop-off location. Returns True if at the drop-off location, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: 'Collect objects and drop them off at the designated location, avoiding obstacles along the way'. Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_object_detected</Condition><Sequence><Action>pick_up_object</Action><Condition>is_at_dropoff</Condition><Action>drop_object</Action></Sequence></Sequence><Sequence><Condition>is_at_dropoff</Condition><Sequence><Condition>is_at_dropoff</Condition><Action>move_forward</Action></Sequence><Selector><Sequence><Action>turn_left</Action><Condition>is_at_dropoff</Condition></Sequence><Sequence><Action>turn_right</Action><Condition>is_at_dropoff</Condition></Sequence></Selector></Sequence></Selector></BehaviorTree> 
###
4.// INSTRUCTIONS: Use only the following behaviors {'start_game': 'Action: Start the game and initialize the game environment.', 'move_forward': 'Action: Move the player one step forward in the current direction.', 'turn_left': 'Action: Turn the player 90 degrees to the left.', 'turn_right': 'Action: Turn the player 90 degrees to the right.', 'attack_enemy': 'Action: Use a weapon to attack the nearest enemy.', 'collect_treasure': 'Action: Collect any treasure or items within reach.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.','is_enemy_detected': 'Condition: Check for enemies nearby. Returns True if an enemy is detected, False otherwise.', 'is_treasure_found': 'Condition: Check if treasure or valuable item is in range. Returns True if an item is detected, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Generate a behavior tree to explore a fantasy game world, avoiding obstacles, attacking enemies, and collecting treasure.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>start_game</Action><Action>move_forward</Action><Selector><Sequence><Condition>is_obstacle_detected</Condition><Action>turn_left</Action></Sequence><Action>turn_right</Action></Selector></Sequence><Sequence><Condition>is_enemy_detected</Condition><Selector><Sequence><Condition>is_obstacle_detected</Condition><Action>attack_enemy</Action></Sequence><Action>turn_towards_enemy</Action></Selector></Sequence><Sequence><Condition>is_treasure_found</Condition><Action>collect_treasure</Action></Sequence></Selector></BehaviorTree>
 
###
5.// INSTRUCTIONS: Use only the following behaviors {'move_forward': 'Action: Move the player one step forward in the current direction.', 'turn_left': 'Action: Turn the player 90 degrees to the left.', 'turn_right': 'Action: Turn the player 90 degrees to the right.', 'jump': 'Action: Make the player jump over obstacles or gaps.', 'slide': 'Action: Make the player slide under low obstacles.', 'use_powerup': 'Action: Activate a power-up or special ability.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.','is_enemy_detected': 'Condition: Check for enemies nearby. Returns True if an enemy is detected, False otherwise.', 'is_powerup_found': 'Condition: Check if a power-up is nearby and within reach. Returns True if a power-up is detected, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Generate a behavior tree for a player character in a platformer game, navigating obstacles, avoiding enemies, and using power-ups strategically.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>move_forward</Action><Selector><Sequence><Condition>is_enemy_detected</Condition><Action>turn_right</Action></Sequence><Action>turn_left</Action></Selector></Sequence><Sequence><Condition>is_obstacle_detected</Condition><Selector><Sequence><Condition>is_powerup_found</Condition><Action>use_powerup</Action></Sequence><Action>jump</Action></Selector></Sequence><Sequence><Condition>is_enemy_detected</Condition><Action>slide</Action></Sequence></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'roaming': 'Action: Roam around the designated area, maintaining a certain distance from the player.', 'chase_player': 'Action: Chase the player, closing the distance and attacking if within range.', 'use_ability': 'Action: Use a special attack or ability against the player.', 'patrol': 'Action: Patrol between designated points, moving back and forth in a set pattern.', 'is_player_detected': 'Condition: Check if the player is within range and in sight. Returns True if the player is detected, False otherwise.','is_player_attacked': 'Condition: Check if the player is within attack range. Returns True if the player is within the creature's attack range, False otherwise.', 'is_ability_ready': 'Condition: Check if a special ability is available to be used. Returns True if the ability is ready to use, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Generate a behavior tree for a hostile creature in a video game, patrolling areas, attacking players, and using powerful abilities when available.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>roaming</Action><Selector><Sequence><Condition>is_player_detected</Condition><Action>chase_player</Action><Selector><Sequence><Condition>is_ability_ready</Condition><Action>use_ability</Action></Sequence><Action>move_towards_player</Action></Selector></Sequence><Action>patrol</Action></Selector></Sequence><Sequence><Condition>is_player_attacked</Condition><Action>attack_player</Action></Sequence></Selector></BehaviorTree> 
###
4.// INSTRUCTIONS: Use only the following behaviors {'move_forward': 'Action: Move one step forward while maintaining formation.', 'move_backward': 'Action: Move one step backward while maintaining formation.', 'interact_with_object': 'Action: Interact with a specific object in the environment.', 'scan_surroundings': 'Action: Use sensors to scan the surroundings for potential obstacles or objects.', 'is_obstacle_detected': 'Condition: Check if any obstacles are detected within a certain radius.', 'is_object_interactible': 'Condition: Check if the object in question can be interacted with.', 'is_object_grasped': 'Condition: Check if the object has been successfully grasped and is being carried.', 'is_target_reached': 'Condition: Check if the target coordinates have been reached.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task).
4.// USER COMMAND: generate behavior tree to 'transport object to specified location, while avoiding obstacles and maintaining formation'.
4.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>is_object_interactible</Condition> <Sequence> <Condition>is_object_grasped</Condition> <Action>release_object</Action> </Sequence> <Action>interact_with_object</Action> </Selector> <Sequence> <Condition>is_obstacle_detected</Condition> <Action>move_backward</Action> </Sequence> <Sequence> <Condition>is_target_reached</Condition> <Action>move_forward</Action> <Action>task_completed</Action> </Sequence> </Sequence> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'scan_environment': 'Action: Use sensors to scan the surroundings for potential obstacles, targets, or other agents.', 'move_to_coordinates': 'Action: Move to specified coordinates using pathfinding algorithm.', 'attack_target': 'Action: Attack designated target using specified weapon.', 'heal_agent': 'Action: Use necessary healing techniques to heal a wounded agent.', 'is_enemy_nearby': 'Condition: Check if an enemy agent is within a certain radius.', 'is_path_clear': 'Condition: Check if the path to the designated coordinates is clear of obstacles.', 'is_target_destroyed': 'Condition: Check if the designated target has been destroyed.', 'is_agent_injured': 'Condition: Check if the agent is injured and requires healing.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task).
5.// USER COMMAND: generate behavior tree to 'perform a rescue mission by moving to designated coordinates, healing injured agent, and attacking enemies blocking the way'.
5.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>is_enemy_nearby</Condition> <Action>attack_target</Action> </Sequence> <Sequence> <Condition>is_agent_injured<Condition> <Action>heal_agent</Action> </Sequence> <Sequence> <Condition>is_path_clear</Condition> <Action>move_to_coordinates</Action> </Sequence> </Selector> </Sequence> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'move_forward': 'Action: Move one step forward while maintaining formation.', 'shift_left': 'Action: Shift the entire formation one step to the left.', 'shift_right': 'Action: Shift the entire formation one step to the right.', 'gather_resource': 'Action: Collect a specified amount of resources from the environment.', 'deposit_resource': 'Action: Deposit collected resources at designated location.', 'is_resource_nearby': 'Condition: Check if a resource deposit is within a certain radius.', 'is_resource_depleted': 'Condition: Check if the designated resource deposit has been depleted.', 'is_deposit_reached': 'Condition: Check if the deposit location has been reached.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task).
6.// USER COMMAND: generate behavior tree to 'form a resource-gathering team, gather resources until the deposit is depleted, and then return to base for deposit'.
6.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>is_resource_nearby</Condition> <Sequence> <Condition>is_deposit_reached</Condition> <Action>deposit_resource</Action> </Sequence> <Action>gather_resource</Action> </Sequence> <Selector> <Sequence> <Condition>is_deposit_reached</Condition> <Action>task_completed</Action> </Sequence> <Sequence> <Condition>is_resource_depleted</Condition> <Selector> <Sequence> <Condition>is_resource_nearby</Condition> <Action>shift_right</Action> </Sequence> <Action>move_forward</Action> </Selector> </Sequence> </Selector> </Sequence> </BehaviorTree>
###
4.// INSTRUCTIONS: Use only the following behaviors {'gather_resources': 'Action: Collect resources from the environment and bring them back to the nest. Always returns True.', 'return_to_nest': 'Action: Return to the nest with the collected resources. Always returns True.', 'build_structure': 'Action: Use collected resources to build a new structure in the environment. Always returns True.', 'is_resource_available': 'Condition: Check if there are resources available in the environment. Returns True if there are resources available, False otherwise.', 'is_nest_full': 'Condition: Check if the nest has reached its maximum capacity. Returns True if the nest is full, False otherwise.', 'are_enemies_present': 'Condition: Check if enemies are present in the environment. Returns True if enemies are detected, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Generate a behavior tree for a swarm of robot ants to gather resources, build a new nest, and defend against enemies.
4.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>is_resource_available</Condition><Selector><Sequence><Condition>are_enemies_present</Condition><Action>defend_nest</Action></Sequence><Sequence><Condition>is_nest_full</Condition><Action>move_to_new_location</Action></Sequence><Action>gather_resources</Action></Selector></Sequence><Sequence><Condition>is_nest_full</Condition><Action>move_to_new_location</Action></Sequence><Action>build_structure</Action></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'navigate_to_waypoint': 'Action: Move towards a designated waypoint in the environment. Always returns True.', 'scan_surroundings': 'Action: Use sensors to scan the surroundings and gather information. Always returns True.', 'update_map': 'Action: Update the map with information collected from scanning. Always returns True.', 'decision_making': 'Action: Use collected information to make decisions on next actions. Always returns True.', 'is_destination_reached': 'Condition: Check if the destination or waypoint has been reached. Returns True if reached, False otherwise.', 'is_map_updated': 'Condition: Check if the map has been updated with new information. Returns True if updated, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Generate a behavior tree for a swarm of exploration robots to navigate through a complex environment, scan and gather information, and make decisions based on the collected data.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_map_updated</Condition><Action>decision_making</Action></Sequence><Sequence><Condition>is_destination_reached</Condition><Action>update_map</Action></Sequence><Action>scan_surroundings</Action></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'move_towards_target': 'Action: Move towards a designated target in the environment. Always returns True.', 'gather_information': 'Action: Use sensors to gather information about the target. Always returns True.', 'process_data': 'Action: Process and analyze collected data to make informed decisions. Always returns True.', 'coordinate_with_team': 'Action: Communicate and coordinate with other robots to achieve the task. Always returns True.', 'is_target_reached': 'Condition: Check if the target has been reached. Returns True if reached, False otherwise.', 'is_data_available': 'Condition: Check if data has been gathered and processed. Returns True if available, False otherwise.', 'are_team_members_available': 'Condition: Check if all team members are present and ready to coordinate. Returns True if all team members are available, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Generate a behavior tree for a swarm of search and rescue robots to locate and assist a trapped individual in a disaster area.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_target_reached</Condition><Action>coordinate_with_team</Action></Sequence><Sequence><Condition>are_team_members_available</Condition><Action>process_data</Action></Sequence><Action>gather_information</Action></Selector></BehaviorTree>###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'check for obstacles, avoid obstacles, and continue movement' Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree><Sequence> <Condition>is_path_clear</Condition> <Selector> <Sequence> <Condition>is_obstacle_detected</Condition> <Action>avoid_obstacle</Action> </Sequence> <Action>wander</Action> </Selector> <Action>continue_movement_agent</Action> </Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'move towards target, stop if obstacle is detected, and continue movement' Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree><Sequence> <Selector> <Sequence> <Condition>is_path_clear</Condition> <Action>continue_movement_agent</Action> </Sequence> <Action>agent_movement_freeze</Action> </Selector> <Sequence> <Condition>is_obstacle_detected</Condition> <Action>avoid_obstacle</Action> </Sequence> </Sequence></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'find target and change color to green, then form line and change color to white' Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree><Sequence> <Selector> <Sequence> <Condition>is_target_detected</Condition> <Action>change_color_to_green</Action> </Sequence> <Action>wander</Action> </Selector> <Selector> <Sequence> <Condition>is_line_formed</Condition> <Action>change_color_to_white</Action> </Sequence> <Action>form_line</Action> </Selector> </Sequence></BehaviorTree> 
###
4.// INSTRUCTIONS: Use only the following behaviors {'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'fetch_object': 'Action: Move towards and pick up the specified object. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'pick_up_object': 'Action: Pick up the specified object if it is within reach. Always returns True.', 'place_object': 'Action: Place the specified object at the designated location. Always returns True.', 'release_object': 'Action: Release the object currently being held. Always returns True.', 'return_to_nest': 'Action: Move towards the nest. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Find object, fetch it to location A, then release it at location B'Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>is_target_detected</Condition> <Action>pick_up_object</Action> <Action>continue_movement_agent</Action> </Sequence> <Sequence> <Condition>is_target_reached</Condition> <Action>place_object</Action> </Sequence> <Sequence> <Action>release_object</Action> </Sequence> <Sequence> <Condition>is_agent_in_nest</Condition> <Action>return_to_nest</Action> </Sequence> <Action>wander</Action> </Selector> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_blue': "Action: Change agent's color to blue. Always returns True.", 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a horizontal line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'random_movement': 'Action: Move randomly within the environment. Always returns True.', 'rotate_left': 'Action: Rotate the robot 90 degrees to the left. Always returns True.', 'rotate_right': 'Action: Rotate the robot 90 degrees to the right. Always returns True.', 'signal_intruder': 'Action: Change color to blue to signal the presence of an intruder. Always returns True.', 'form_line': 'Action: Form a horizontal line at the center. Always returns True.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'When an intruder is detected, move randomly while changing color to blue, form a horizontal line, then freeze movement to signal completion'. Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>is_obstacle_detected</Condition> <RNGSelector> <Sequence> <Action>random_movement</Action> <Action>change_color_to_blue</Action> </Sequence> <Sequence> <Condition>is_line_formed</Condition> <Action>signal_intruder</Action> <Action>form_line</Action> <Action>task_completed</Action> </Sequence> </RNGSelector> </Sequence> <Action>avoid_obstacle</Action> </Selector> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'build_structure': 'Action: Gather materials and construct a specified structure. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a horizontal line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'move_to_nest': 'Action: Move towards the nest. Always returns True.', 'scout': 'Action: Scout the environment for potential resources. Always returns True.', 'search_closest_resource': 'Action: Search for the closest resource within a specified radius. Always returns True.', 'store_resource': 'Action: Store gathered resource at the designated storage location. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Gather resources, build a structure, and return to the nest for storage'. Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>is_path_clear</Condition> <Action>scout</Action> <Action>search_closest_resource</Action> </Sequence> <Sequence> <Condition>is_path_clear</Condition> <Action>build_structure</Action> <Action>move_to_nest</Action> <Action>store_resource</Action> </Sequence> <Action>avoid_obstacle</Action> </Selector> </BehaviorTree> 
###
4.// INSTRUCTIONS: Use only the following behaviors {'detect_target': 'Action: Detect the designated target. Always returns True.', 'follow_path': 'Action: Follow the designated path with a designated speed. Always returns True.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'move_towards_target': 'Action: Move towards the designated target with a designated speed. Always returns True.', 'rotate_left': 'Action: Rotate the robot 90 degrees to the left. Always returns True.', 'rotate_right': 'Action: Rotate the robot 90 degrees to the right. Always returns True.', 'scan_area': 'Action: Scan the environment for any potential obstacles or targets. Always returns True.', 'stop_movement': 'Action: Stop the robot's movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Search for a designated target while avoiding obstacles. If target is found, move towards it and stop when within 15 units.' Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_target_detected</Condition><Action>move_towards_target</Action><Condition>is_target_reached</Condition><Action>stop_movement</Action></Sequence><Sequence><Condition>is_path_clear</Condition><Action>follow_path</Action></Sequence><Sequence><Condition>is_path_clear</Condition><Action>scan_area</Action></Sequence><Sequence><Action>rotate_left</Action></Sequence><Action>rotate_right</Action></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'detect_wall': 'Action: Detect if the robot has reached a wall or boundary. Returns True if a wall is detected, False otherwise.', 'avoid_wall': 'Action: Move away from the detected wall or boundary and return to previous task. Always returns True.', 'follow_path': 'Action: Follow the designated path with a designated speed. Always returns True.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'move_forward': 'Action: Move the robot one step forward in the current direction. Always returns True.', 'rotate_left': 'Action: Rotate the robot 90 degrees to the left. Always returns True.', 'rotate_right': 'Action: Rotate the robot 90 degrees to the right. Always returns True.', 'scan_area': 'Action: Scan the environment for any potential obstacles or targets. Always returns True.', 'stop_movement': 'Action: Stop the robot's movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Navigate an obstacle course while avoiding walls or boundaries.' Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_path_clear</Condition><Action>move_forward</Action></Sequence><Sequence><Condition>detect_wall</Condition><Action>avoid_wall</Action></Sequence><Sequence><Condition>detect_wall</Condition><Sequence><Action>rotate_left</Action><Action>scan_area</Action></Sequence></Sequence><Action>stop_movement</Action></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'detect_object': 'Action: Detect objects in the environment using sensors. Returns True if an object is detected, False otherwise.', 'follow_path': 'Action: Follow the designated path with a designated speed. Always returns True.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'pick_up_object': 'Action: Pick up the detected object and move towards designated goal. Returns True when object is picked up and task is completed.', 'place_object': 'Action: Place the object at the designated goal. Returns True when the object is placed and task is completed.', 'rotate_left': 'Action: Rotate the robot 90 degrees to the left. Always returns True.', 'rotate_right': 'Action: Rotate the robot 90 degrees to the right. Always returns True.', 'scan_area': 'Action: Scan the environment for any potential obstacles or objects. Always returns True.', 'stop_movement': 'Action: Stop the robot's movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Pick up objects scattered throughout the environment and place them at a designated goal.' Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_path_clear</Condition><Action>follow_path</Action></Sequence><Action>scan_area</Action><Sequence><Condition>detect_object</Condition><Action>pick_up_object</Action></Sequence><Sequence><Condition>picked_up</Condition><Action>rotate_left</Action></Sequence><Action>rotate_right</Action><Sequence><Condition>is_path_clear</Condition><Action>follow_path</Action></Sequence><Sequence><Condition>has_goal_reached</Condition><Action>place_object</Action></Sequence><Action>stop_movement</Action></Selector></BehaviorTree>
###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Avoid obstacles and continue moving, while checking for target and changing color to green when found.'Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>is_obstacle_detected</Condition><Action>avoid_obstacle</Action><Condition>is_target_detected</Condition><Action>change_color_to_green</Action><Action>task_completed</Action></Sequence><Action>continue_movement_agent</Action></Selector></Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Form a line with two other agents, while checking for obstacles and avoiding them.'Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>is_obstacle_detected</Condition><Action>avoid_obstacle</Action></Sequence><Action>wander</Action></Selector><Sequence><Condition>is_agent_in_nest</Condition><Action>form_line</Action></Sequence></Sequence></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Check if target is within range and form a line with another agent, while also avoiding obstacles and changing color to green when target is detected.'Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_obstacle_detected</Condition><Action>avoid_obstacle</Action></Sequence><Sequence><Condition>is_target_detected</Condition><Action>change_color_to_green</Action><Action>task_completed</Action></Sequence></Selector><Sequence><Condition>is_agent_in_nest</Condition><Action>form_line</Action></Sequence></BehaviorTree> 
###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'move_in_square': 'Action: Move in a square shape. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Move in a square shape, avoiding obstacles, until a target is reached.'Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree> <Selector> <Sequence><Action>move_in_square</Action> <Sequence> <Condition>is_obstacle_detected</Condition> <Action>avoid_obstacle</Action></Sequence></Sequence> <Sequence> <Condition>is_target_detected</Condition> <Action>task_completed</Action></Sequence> </Selector> </BehaviorTree>
 
###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Explore the environment and form a line with other agents, change color to white when line is formed, and return to the nest.'Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Action>continue_movement_agent</Action> <Selector> <Sequence> <Condition>is_line_formed</Condition> <Action>change_color_to_white</Action> </Sequence> <Action>form_line</Action> </Selector> </Sequence> <Selector> <Sequence> <Condition>is_agent_in_nest</Condition> <Action>task_completed</Action> </Sequence> <Action>wander</Action> </Selector> </BehaviorTree>

#6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a horizontal line at the bottom. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a horizontal line is formed. Returns True if the line is formed at the bottom, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Change color to green, form a horizontal line, and change color to white while avoiding obstacles.'Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Action>change_color_to_green</Action> <Selector> <Sequence> <Condition>is_line_formed</Condition> <Action>change_color_to_white</Action> </Sequence> <Action>form_line</Action> </Selector> </Sequence> <Sequence> <Condition>is_obstacle_detected</Condition> <Action>avoid_obstacle</Action> </Sequence> </Selector> </BehaviorTree> 
###
4.// INSTRUCTIONS: Use only the following behaviors {'move_forward': 'Action: Move one step forward while avoiding potential collisions with other robots.', 'avoid_collision': 'Action: Use sensors to detect nearby robots and adjust course to avoid collisions.', 'coordinate_position': 'Action: Use communication with other robots to coordinate positions and movements.', 'join_formation': 'Action: Join an existing formation with other robots.', 'analyse_environment': 'Action: Use sensors to analyze the environment and identify potential obstacles or targets.', 'is_robot_detected': 'Condition: Check if a nearby robot is detected using sensors.', 'is_obstacle_detected': 'Condition: Check if an obstacle is detected using sensors.', 'is_formation_full': 'Condition: Check if the maximum number of robots have joined the formation.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Generate a behavior tree for a swarm of robots to collaborate and navigate through a complex maze.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_formation_full</Condition><Action>form_new_formation</Action></Sequence><Sequence><Condition>is_robot_detected</Condition><Action>join_formation</Action></Sequence><Sequence><Condition>is_obstacle_detected</Condition><Action>avoid_collision</Action></Sequence><Selector><Sequence><Condition>is_obstacle_detected</Condition><Action>analyse_environment</Action></Sequence><Action>move_forward</Action></Selector></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'move_to_center': 'Action: Move towards the center point of a given area.', 'detect_obstacles': 'Action: Use sensors to detect and record the locations of any obstacles in the surrounding area.', 'update_internal_map': 'Action: Update the robot's internal map of the environment based on sensor readings and obstacle locations.', 'find_largest_open_area': 'Action: Use the internal map to find the largest open area that is not occupied by an obstacle.', 'adapt_path': 'Action: Change the robot's path to move around an obstacle if necessary.', 'is_area_explored': 'Condition: Check if the current area has been explored and mapped by the robot.', 'is_obstacle_nearby': 'Condition: Check if an obstacle is in close proximity to the robot.', 'is_target_reached': 'Condition: Check if the target location has been reached by the robot.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Generate a behavior tree for a single robot to autonomously explore and navigate a large environment with unknown obstacles.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_target_reached</Condition><Action>stop_movement</Action></Sequence><Sequence><Condition>is_obstacle_nearby</Condition><Action>adapt_path</Action></Sequence><Sequence><Condition>is_area_explored</Condition><Action>move_to_center</Action></Sequence><Selector><Sequence><Condition>is_obstacle_nearby</Condition><Action>detect_obstacles</Action></Sequence><Selector><Sequence><Condition>is_target_detected</Condition><Action>move_towards_target</Action></Sequence><Sequence><Condition>is_largest_open_area_found</Condition><Action>move_to_largest_open_area</Action></Sequence></Selector></Selector></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'reach_source': 'Action: Move towards the designated source location.', 'detect_artifacts': 'Action: Use sensors to detect and identify any artifacts in the surrounding area.', 'collect_artifacts': 'Action: Collect any detected artifacts and store them for transport.', 'navigate_to_destination': 'Action: Use the collected artifacts to guide the robot towards the destination location.', 'is_source_reached': 'Condition: Check if the designated source location has been reached by the robot.', 'is_destination_reached': 'Condition: Check if the destination location has been reached by the robot.', 'is_artifact_detected': 'Condition: Check if an artifact is detected in the surroundings.', 'is_all_artifacts_collected': 'Condition: Check if all artifacts have been collected.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Generate a behavior tree for a swarm of robots to collect and transport artifacts from one location to another.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_source_reached</Condition><Action>detect_artifacts</Action></Sequence><Selector><Sequence><Condition>is_artifact_detected</Condition><Action>collect_artifacts</Action></Sequence><Selector><Sequence><Condition>is_all_artifacts_collected</Condition><Action>navigate_to_destination</Action></Sequence><Sequence><Condition>is_destination_reached</Condition><Action>stop_movement</Action></Sequence></Selector></Selector> </BehaviorTree> 
###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Wander and perform tasks until target is reached.'Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_obstacle_detected</Condition><Action>avoid_obstacle</Action></Sequence><Sequence><Condition>is_target_detected</Condition><Selector><Sequence><Condition>is_line_formed</Condition><Action>change_color_to_white</Action><Action>task_completed</Action></Sequence><Action>change_color_to_green</Action></Selector></Sequence><Action>wander</Action></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Form a line and move forward until obstacle is detected then avoid obstacle.'Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree><Sequence><Action>form_line</Action><Selector><Sequence><Condition>is_obstacle_detected</Condition><Action>avoid_obstacle</Action></Sequence><Action>continue_movement_agent</Action></Selector></Sequence></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Check if target is reached, if not continue to wander.'Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_target_reached</Condition><Action>task_completed</Action></Sequence><Action>wander</Action></Selector></BehaviorTree>###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.', 'gather_resource': "Action: Move to the nearest resource and gather it. Returns True when resource is gathered.", 'deposit_resource': 'Action: Move to the designated deposit area and deposit the gathered resource. Returns True when resource is deposited.', 'is_resource_nearby': 'Condition: Check if there is a resource within 10 units. Returns True if a resource is nearby, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Collect resources from multiple areas and deposit them' Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>is_resource_nearby</Condition> <Action>gather_resource</Action> </Sequence> <Sequence> <Condition>is_agent_in_nest</Condition> <Action>change_color_to_green</Action> <Action>move_to_resource_deposit</Action> <Action>deposit_resource</Action> <Action>change_color_to_white</Action> <Action>continue_movement_agent</Action> </Sequence> <Action>wander</Action> </Selector> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.', 'build_structure': 'Action: Gather necessary resources and build a designated structure. Returns True when structure is completed.', 'is_resource_available': 'Condition: Check if there are enough resources available to start building. Returns True if enough resources are available, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Build a permanent settlement for the swarm' Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>is_resource_available</Condition> <Action>build_structure</Action> </Sequence> <Sequence> <Condition>is_agent_in_nest</Condition> <Action>change_color_to_green</Action> <Action>continue_movement_agent</Action> </Sequence> <Action>wander</Action> </Selector> </Sequence> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.', 'patrol_area': 'Action: Patrol designated area and report any abnormalities or threats. Always returns True.', 'signal_threat': 'Action: Signal other swarm robots of detected threat. Returns True when signal is 
###
4.// INSTRUCTIONS: Use only the following behaviors {'detect_enemy': 'Condition: Check if an enemy is detected. Returns True if an enemy is present, False otherwise.', 'attack_enemy': 'Action: Attack the detected enemy. Always returns True.', 'move_to_random_location': 'Action: Move to a random location within the environment. Always returns True.', 'prevent_collision': "Action: Avoid collision with other agents. Always returns True.", 'is_reloading': 'Condition: Check if the weapon is being reloaded. Returns True if reloading, False otherwise.', 'is_weapon_ready': 'Condition: Check if the weapon is ready to fire. Returns True if ready, False otherwise.', 'is_ammunition_low': 'Condition: Check if ammunition is low. Returns True if ammunition is low, False otherwise.', 'reload_weapon': 'Action: Reload the weapon. Always returns True.', 'return_to_base': 'Action: Return to base for refueling and repairs. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Defend the base against enemies while maintaining ammunition levels and returning to base for fuel and repairs as needed'.
Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>detect_enemy</Condition> <Action>attack_enemy</Action> </Sequence> <Sequence> <Condition>is_reloading</Condition> <Action>reload_weapon</Action> </Sequence> <Selector> <Sequence> <Condition>is_ammunition_low</Condition> <Action>return_to_base</Action> <Action>reload_weapon</Action> </Sequence> <Action>prevent_collision</Action> </Selector> </Sequence> <Selector> <Condition>is_weapon_ready</Condition> <Action>move_to_random_location</Action> </Selector> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'move_to_target': 'Action: Move towards the designated target. Always returns True.', 'is_target_in_sight': 'Condition: Check if the target is within the robot's field of view. Returns True if target is in sight, False otherwise.', 'pick_up_item': 'Action: Pick up the designated item if it is within reach. Always returns True.', 'drop_item': 'Action: Drop the designated item at the designated drop-off location. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Navigate the environment, avoid obstacles, pick up an item and drop it off at the designated location.'
Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>is_target_in_sight</Condition> <Action>pick_up_item</Action> </Sequence> <Sequence> <Condition>is_target_in_sight</Condition> <Action>move_to_target</Action> </Sequence> </Selector> <Selector> <Condition>is_at_dropoff</Condition> <Action>drop_item</Action> </Selector> <Sequence> <Condition>is_obstacle_detected</Condition> <Action>avoid_obstacle</Action> </Sequence> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'find_food': 'Action: Move towards the designated food source. Always returns True.', 'eat_food': 'Action: Consume the available food. Always returns True.', 'is_hungry': 'Condition: Check if the robot is hungry. Returns True if hungry, False otherwise.', 'is_at_food_source': 'Condition: Check if the robot has reached the designated food source. Returns True if at the food source, False otherwise.', 'find_water': 'Action: Move towards the designated water source. Always returns True.', 'drink_water': 'Action: Consume the available water. Always returns True.', 'is_thirsty': 'Condition: Check if the robot is thirsty. Returns True if thirsty, False otherwise.', 'is_at_water_source': 'Condition: Check if the robot has reached the designated water source. Returns True if at the water source, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Survive in the environment by finding and consuming food and water, while avoiding predators and maintaining health'.
Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>is_hungry</Condition> <Action>find_food</Action> </Sequence> <Sequence> <Condition>is_thirsty</Condition> <Action>find_water</Action> </Sequence> </Selector> <Selector> <Sequence> <Condition>is_at_food_source</Condition> <Action>eat_food</Action> </Sequence> <Sequence> <Condition>is_at_water_source</Condition> <Action>drink_water</Action> </Sequence> </Selector> </BehaviorTree></br></br>

###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'change_color_to_cyan': "Action: Change agent's color to cyan. Always returns True.", 'collect_object': "Action: Pick up object in the environment. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_circle': 'Action: Form a circle with other robots at a specified location. Always returns True.', 'is_object_nearby': 'Condition: Check if an object is within 10 units. Returns True if an object is detected within 10 units of distance, False otherwise.', 'is_object_collected': 'Condition: Check if object is successfully collected. Returns True if object is successfully collected, False otherwise.', 'is_agent_at_location': 'Condition: Check if the agent is at a specified location. Returns True if agent is at the specified location, False otherwise.', 'is_circle_formed': 'Condition: Check if a circle with other robots is formed at a specified location. Returns True if the circle is formed at the specified location, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Collect the object at location (5,5) and then form a circle with other robots at location (10,10)'. Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_object_nearby</Condition><Action>collect_object</Action><Condition>is_object_collected</Condition><Action>continue_movement_agent</Action></Sequence><Sequential><Condition>is_agent_at_location</Condition><Action>form_circle</Action><Condition>is_circle_formed</Condition></Sequential></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_magenta': "Action: Change agent's color to magenta. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_square': 'Action: Form a square with other robots at a specified location. Always returns True.', 'is_agent_near_nest': 'Condition: Check if the agent is near the nest. Returns True if the agent is within a radius of 5 units from the nest, False otherwise.', 'is_square_formed': 'Condition: Check if a square with other robots is formed at a specified location. Returns True if the square is formed at the specified location within a margin of error of 2 units, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'move_to_location': 'Action: Move to a specified location within the environment. Always returns True.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Move towards the nest, form a square with other robots at location (7,7), and change color to magenta to indicate presence at the nest'. Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_agent_near_nest</Condition><Sequence><Action>move_to_location</Action><Condition>is_square_formed</Condition><Action>change_color_to_magenta</Action></Sequence></Sequence></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_yellow': "Action: Change agent's color to yellow. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'explore': 'Action: Move and explore unknown areas of the environment. Always returns True.', 'is_agent_near_target': 'Condition: Check if the agent is within a certain distance of the target. Returns True if the agent is within a specified distance, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is visible. Returns True if the target is within 5 units and in direct line of sight, False otherwise.', 'move_to_target': 'Action: Move towards the target within the environment. Always returns True.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Explore and find the target, then change color to yellow and freeze movement'. Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>explore</Action><Sequence><Condition>is_target_detected</Condition><Action>move_to_target</Action><Action>change_color_to_yellow</Action><Action>agent_movement_freeze</Action></Sequence></Selector></BehaviorTree> 
###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'absorb_energy': 'Action: Absorb energy from the environment. Returns True if energy is absorbed, False otherwise.', 'is_energy_depleted': 'Condition: Check if agent's energy level is zero. Returns True if energy level is zero, False otherwise.', 'is_agent_full': 'Condition: Check if agent's energy level is full. Returns True if energy level is full, False otherwise.', 'is_agent_moving': 'Condition: Check if agent is currently moving. Returns True if agent is moving, False otherwise.', 'move_to_target': 'Action: Move towards the target location. Returns True if the target is reached, False otherwise.', 'search_for_energy': 'Action: Search for nearby energy sources. Returns True if an energy source is found, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Search for energy, move to target location, absorb energy, and return to the nest.'Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree><Sequence><Action>search_for_energy</Action><Action>move_to_target</Action><Action>absorb_energy</Action></Sequence><Sequence><Condition>is_agent_full</Condition><Action>agent_movement_freeze</Action></Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'follow_target': 'Action: Follow the target while avoiding obstacles. Returns True if the target is reached, False otherwise.', 'navigate_to_nest': 'Action: Navigate back to the nest. Returns True if the nest is reached, False otherwise.', 'return_home': 'Action: Move towards the nest. Returns True if the nest is reached, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Follow the target, navigate to nest, and freeze movement at the nest.'Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>is_target_detected</Condition><Action>follow_target</Action></Sequence><Sequence><Condition>is_agent_in_nest</Condition><Action>agent_movement_freeze</Action></Sequence></Selector><Sequence><Action>navigate_to_nest</Action><Action>task_completed</Action></Sequence></Sequence></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'move_in_circle': 'Action: Move in a circular path around the nest. Returns True if the circle is completed, False otherwise.', 'repeat': 'Selector: Repeats the following sequence infinitely until a condition is met or all actions are completed.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wait': 'Action: Wait for 10 seconds. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Form a circle around the nest by moving in circles and then freeze movement at the nest.'Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>move_in_circle</Action><Action>repeat</Action></Sequence><Sequence><Condition>is_agent_in_nest</Condition><Action>agent_movement_freeze</Action></Sequence></Selector></BehaviorTree>
###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'change_color_to_blue': "Action: Change agent's color to blue. Always returns True.", 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_yellow': "Action: Change agent's color to yellow. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'move_to_target': 'Action: Move towards the target location. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'has_color_changed': 'Condition: Check if the agent's color has changed. Returns True if the color has changed, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4. // USER COMMAND: generate behavior tree to 'Move to target location while avoiding obstacles, change color to blue, and return to nest once color has changed.' Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>is_target_reached</Condition> <Action>change_color_to_blue</Action> <Action>task_completed</Action> </Sequence> <Selector> <Condition>is_agent_in_nest</Condition> <Sequence> <Action>move_to_target</Action> <Condition>has_color_changed</Condition> </Selector> <Sequence> <Condition>is_path_clear</Condition> <Action>wander</Action> </Sequence> </Selector> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'calculate_distance_target': 'Action: Calculate the distance to the target location. Always returns True.', 'calculate_distance_nest': 'Action: Calculate the distance to the nest location. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_distance_to_nest_greater': 'Condition: Check if the calculated distance to nest is greater than 50 units. Returns True if distance is greater than 50, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5. // USER COMMAND: generate behavior tree to 'Find target, avoid obstacles, calculate distance to nest, and return to nest if distance is greater than 50 units.' Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_target_reached</Condition><Action>task_completed</Action></Sequence><Selector><Sequence><Action>avoid_obstacle</Action><Action>calculate_distance_target</Action></Sequence><Action>task_completed</Action></Selector><Selector><Sequence><Condition>is_agent_in_nest</Condition><Action>calculate_distance_nest</Action><Condition>is_distance_to_nest_greater</Condition><Action>wander</Action></Sequence><Action>agent_movement_freeze</Action></Sequence></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'choose_random_target': 'Action: Choose a random target location to move towards. Always returns True.', 'move_to_target': 'Action: Move towards the target location. Always returns True.', 'move_to_nest': 'Action: Move towards the nest location. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'is_nest_reached': 'Condition: Check if nest is within 10 units. Returns True if nest is within 10 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6. // USER COMMAND: generate behavior tree to 'Explore the environment, choose a random target location, move towards it, and then return to the nest once target is reached.' Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_agent_in_nest</Condition><Action>choose_random_target</Action><Action>move_to_target</Action><Selector><Sequence><Condition>is_target_reached</Condition><Action>task_completed</Action></Sequence><Selector><Sequence><Action>avoid_obstacle</Action><Action>move_to_nest</Action><Condition>is_nest_reached</Condition><Action>task_completed</Action></Sequence><Action>wander</Action></Selector></Selector></ 
###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_red': "Action: Change agent's color to red. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'reach_target_area': 'Action: Move towards the designated target area. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_agent_on_path': 'Condition: Check if the agent is on the designated path. Returns True if the agent is on the path, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'send_signal': 'Action: Send a signal to other robots in the area. Always returns True.', 'receive_signal': 'Condition: Check for signals from other nearby robots. Returns True if a signal is received, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'move to designated path, change color to red, then scan for and receive signals from other robots'. Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Action>reach_target_area</Action></Sequence><Action>change_color_to_red</Action><Action>send_signal</Action></Selector><Condition>is_agent_on_path</Condition></Sequence><Sequence><Condition>is_agent_in_nest</Condition><Condition>receive_signal</Condition></Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_red': "Action: Change agent's color to red. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_triangle': 'Action: Form an equilateral triangle with the center and other two robots within 15 units. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_target_in_area': 'Condition: Check if the target is within the designated area. Returns True if the target is within the area, False otherwise.', 'move_towards_target': 'Action: Move towards the target at a specified speed. Returns True if target is reached, False if an obstacle is detected along the way.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'form a triangle with the center and other two robots within 15 units, then move towards the target at a faster speed and change color to green when target is in designated area. Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_agent_in_nest</Condition><Action>form_triangle</Action></Sequence><Sequence><Condition>is_agent_in_nest</Condition><Sequence><Condition>move_towards_target</Condition><Action>change_color_to_green</Action><Action>task_completed</Action></Sequence></Sequence><Sequence><Condition>is_obstacle_detected</Condition><Action>avoid_obstacle</Action></Sequence><Action>wander</Action></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'create_triangle': 'Action: Create an equilateral triangle centered at the agent with side length of 20 units. Always returns True.', 'move_to_origin': 'Action: Move the robot to the center of the environment. Always returns True.', 'is_agent_in_origin': 'Condition: Check if the agent is at the origin. Returns True if the agent is at the origin, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_triangle_formed': 'Condition: Check if a triangle with the agent at the center is formed. Returns True if the triangle is formed, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'create an equilateral triangle at the origin with side length of 20 units, then move to the center of the environment and change color to green'. Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_agent_in_origin</Condition><Action>create_triangle</Action><Action>wander</Action></Sequence><Sequence><Action>move_to_origin</Action><Action>change_color_to_green</Action><Action>task_completed</Action></Sequence><Sequence><Condition>is_obstacle_detected</Condition><Action>avoid_obstacle</Action></Sequence><Action>wander</Action></Selector></BehaviorTree>
// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'rotate_90_degrees': 'Action: Rotate the agent 90 degrees clockwise. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
// USER COMMAND: generate behavior tree to 'find Mohammed and rotate 90 degrees' Output only the XML behavior tree without extra text.
// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>is_target_detected</Condition><Action>rotate_90_degrees</Action><Action>task_completed</Action></Sequence><Action>wander</Action></Selector></Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'form a vertical line, then avoid any obstacles and return to nest'Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Action>form_line</Action><Condition>is_line_formed</Condition></Sequence><Action>avoid_obstacle</Action></Selector><Sequence><Condition>is_agent_in_nest</Condition><Action>continue_movement_agent</Action></Sequence></Sequence></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'find a clear path, avoid obstacles, then form a vertical line and change color to green'Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_path_clear</Condition><Selector><Sequence><Selector><Action>avoid_obstacle</Action><Sequence><Condition>is_line_formed</Condition><Action>change_color_to_green</Action></Sequence></Selector><Action>form_line</Action></Sequence><Action>wander</Action></Selector></Sequence></BehaviorTree>
###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_blue': "Action: Change agent's color to blue. Always returns True.", 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'form_line': 'Action: Form a horizontal line at the top. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a horizontal line is formed. Returns True if the line is formed at the top, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Visit 3 different targets in order, change color to green when near target, then form a horizontal line at the top and change color to blue'. Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_target_detected</Condition><Sequence><Action>change_color_to_green</Action><Sequence><Condition>is_path_clear</Condition><Action>agent_movement_freeze</Action></Sequence></Sequence></Sequence><Sequence><Condition>is_agent_in_nest</Condition><Action>change_color_to_blue</Action><Action>agent_movement_freeze</Action></Sequence></Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_direction_right': 'Action: Change the robot's direction to the right by 45 degrees. Always returns True.', 'change_direction_left': 'Action: Change the robot's direction to the left by 45 degrees. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a horizontal line is formed. Returns True if the line is formed at the top, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Wander around the environment while avoiding obstacles, change direction every 10 seconds and change color to green when near target'. Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_target_detected</Condition><Action>change_color_to_green</Action></Sequence><Sequence><Condition>is_obstacle_detected</Condition><Action>avoid_obstacle</Action></Sequence><Sequence><Condition>is_agent_in_nest</Condition><Action>change_direction_right</Action></Sequence><Sequence><Condition>is_agent_in_nest</Condition><Action>change_direction_left</Action></Sequence></Selector><Action>wander</Action></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'move_forward': 'Action: Move the agent forward. Always returns True.', 'move_backward': 'Action: Move the agent backward. Always returns True.', 'move_left': 'Action: Move the agent to the left. Always returns True.', 'move_right': 'Action: Move the agent to the right. Always returns True.', 'is_at_target': 'Condition: Check if the agent is at the designated target location. Returns True if at the target, False otherwise.', 'is_on_edge': 'Condition: Check if the agent is at the edge of the environment. Returns True if at the edge, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Move in a square, starting at the center, changing direction every 5 moves, and freezing movement after completing 25 moves. Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_on_edge</Condition><Action>move_backwards</Action></Sequence><Sequence><Selector><Sequence><Condition>is_at_target</Condition><Action>move_forward</Action></Sequence><Sequence><Condition>is_at_target</Condition><Action>task_completed</Action></Sequence></Selector><Sequence><Selector><Sequence><Condition>is_on_edge</Condition><Action>move_left</Action></Sequence><Sequence><Condition>is_on_edge</Condition><Action>task_completed</Action></Sequence></Selector><Sequence><Selector><Sequence><Condition>is_on_edge</Condition><Action>move_right</Action></Sequence><Sequence><Condition>is_on_edge</Condition><Action>task_completed</Action></Sequence></Selector></Sequence></Selector></BehaviorTree>  
###
4.// INSTRUCTIONS: Use only the following behaviors {'move_forward': 'Action: Move the agent forward by 1 unit. Always returns True.', 'move_backward': 'Action: Move the agent backward by 1 unit. Always returns True.', 'turn_left': 'Action: Turn the robot 90 degrees to the left. Always returns True.', 'turn_right': 'Action: Turn the robot 90 degrees to the right. Always returns True.', 'scale_up': "Action: Increase agent's size by 10%. Always returns True.", 'scale_down': "Action: Decrease agent's size by 10%. Always returns True.", 'is_target_reached': 'Condition: Check if the target is within 5 units. Returns True if the target is within 5 units of distance, False otherwise.', 'is_collision_detected': 'Condition: Check if a collision with another robot or obstacle is detected. Returns True if a collision is detected, False otherwise.', 'is_agent_stuck': 'Condition: Check if the agent is stuck and unable to move. Returns True if the agent is stuck, False otherwise.', 'is_terrain_flat': 'Condition: Check if the terrain is flat. Returns True if the terrain is flat, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Move forward by 3 units, turn left, then move backward by 2 units'. Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree><Sequence><Action>move_forward</Action><Action>move_forward</Action><Action>move_forward</Action><Action>turn_left</Action><Action>move_backward</Action><Action>move_backward</Action></Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'move_forward': 'Action: Move the agent forward by 1 unit. Always returns True.', 'move_backward': 'Action: Move the agent backward by 1 unit. Always returns True.', 'turn_left': 'Action: Turn the robot 90 degrees to the left. Always returns True.', 'turn_right': 'Action: Turn the robot 90 degrees to the right. Always returns True.', 'scale_up': "Action: Increase agent's size by 10%. Always returns True.", 'scale_down': "Action: Decrease agent's size by 10%. Always returns True.", 'is_target_reached': 'Condition: Check if the target is within 5 units. Returns True if the target is within 5 units of distance, False otherwise.', 'is_collision_detected': 'Condition: Check if a collision with another robot or obstacle is detected. Returns True if a collision is detected, False otherwise.', 'is_agent_stuck': 'Condition: Check if the agent is stuck and unable to move. Returns True if the agent is stuck, False otherwise.', 'is_terrain_flat': 'Condition: Check if the terrain is flat. Returns True if the terrain is flat, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'task_failed': 'Action: Signal task failure by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Move forward by 2 units, check for collisions, if collision detected then scale down, otherwise turn right'. Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree><Sequence><Action>move_forward</Action><Action>move_forward</Action><Selector><Sequence><Condition>is_collision_detected</Condition><Action>scale_down</Action><Action>task_failed</Action></Sequence><Action>task_completed</Action></Selector><Action>turn_right</Action></Sequence></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'move_forward': 'Action: Move the agent forward by 1 unit. Always returns True.', 'move_backward': 'Action: Move the agent backward by 1 unit. Always returns True.', 'turn_left': 'Action: Turn the robot 90 degrees to the left. Always returns True.', 'turn_right': 'Action: Turn the robot 90 degrees to the right. Always returns True.', 'scale_up': "Action: Increase agent's size by 10%. Always returns True.", 'scale_down': "Action: Decrease agent's size by 10%. Always returns True.", 'is_target_reached': 'Condition: Check if the target is within 5 units. Returns True if the target is within 5 units of distance, False otherwise.', 'is_collision_detected': 'Condition: Check if a collision with another robot or obstacle is detected. Returns True if a collision is detected, False otherwise.', 'is_agent_stuck': 'Condition: Check if the agent is stuck and unable to move. Returns True if the agent is stuck, False otherwise.', 'is_terrain_flat': 'Condition: Check if the terrain is flat. Returns True if the terrain is flat, False otherwise.', 'has_resource': 'Condition: Check if the agent has picked up any resources. Returns True if the agent is carrying resources, False if the agent is empty.', 'deposit_resource': 'Action: Deposit the resource at a designated location. Returns True once the resource is deposited.', 'gather_resource': 'Action: Gather resources within a specific radius. Always returns True.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Gather resources, deposit them at designated location, repeat until agent is full'. Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree><Sequence><Condition>has_resource</Condition><Selector><Sequence><Condition>is_terrain_flat</Condition><Sequence><Condition>is_target_reached</Condition><Action>gather_resource</Action><Condition>is_agent_stuck</Condition></Sequence></Sequence><Sequence><Condition>is_collision_detected</Condition><Sequence><Action>turn_left</Action><Action>move_backwards</Action><Action>move_forward</Action></Sequence></Sequence></Selector><Action>deposit_resource</Action></Sequence></BehaviorTree> 
###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_circular_path': 'Action: Form a circular path by moving around a designated point. Always returns True.', 'move_to_start': 'Action: Move to the designated start point. Always returns True.', 'move_to_target': 'Action: Move towards the designated target. Always returns True.', 'reached_start': 'Condition: Check if the agent has reached the start point. Returns True if the start point has been reached, False otherwise', 'target_within_reach': 'Condition: Check if the designated target is within reach. Returns True if the target is within 10 units of distance, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Move to the start point, form a circular path, and reach the target.'Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Action>move_to_start</Action> <Condition>reached_start</Condition> </Sequence> <Action>form_circular_path</Action> <Condition>target_within_reach</Condition> </Selector> <Action>move_to_target</Action> </Sequence> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'follow_path': 'Action: Follow a pre-defined path. Returns True when the path is completed.', 'is_color_changed': 'Condition: Check if agent's color has been changed. Returns True if the color is changed to green, False if the color is changed to white.', 'is_goal_reached': 'Condition: Check if agent has reached the goal. Returns True if the agent is within 5 units of the goal, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Change color to green, follow a path, and reach the goal.'Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Action>change_color_to_green</Action> <Condition>is_color_changed</Condition> </Sequence> <Action>follow_path</Action> <Condition>is_goal_reached</Condition> </Selector> <Action>task_completed</Action> </Sequence> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'detect_goal': 'Action: Detect the designated goal. Returns True when the goal is found.', 'gather_objects': 'Action: Gather objects and bring them to the specified location. Returns True when all objects are gathered and delivered.', 'is_goal_found': 'Condition: Check if the goal is found. Returns True if the goal is detected, False otherwise.', 'is_object_gathered': 'Condition: Check if all objects are gathered. Returns True if all objects are collected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'stop_move_to_goal': 'Action: Stop moving towards the goal when signaled. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Detect the goal, gather objects, and stop moving towards the goal.'Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Action>detect_goal</Action> <Condition>is_goal_found</Condition> </Selector> <Action>gather_objects</Action> <Condition>is_object_gathered</Condition> </Sequence> <Action>stop_move_to_goal</Action> </BehaviorTree>
###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'check_distance_from_target': 'Condition: Check if the agent is within 30 units of the target. Returns True if the agent is within 30 units of distance, False otherwise.', 'check_target_direction': 'Action: Check the direction of the target. Always returns True.', 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'follow_path': 'Action: Follow a predefined path to the target. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'navigate_home': 'Action: Navigate back to the nest. Always returns True.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Navigate to target while avoiding obstacles, check if target is within range, then navigate back home' Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>is_path_clear</Condition> <Action>follow_path</Action> </Sequence> <Selector> <Condition>check_distance_from_target</Condition> <Action>check_target_direction</Action> </Selector> </Selector> <Selector> <Sequence> <Condition>is_target_detected</Condition> <Action>navigate_home</Action> <Action>task_completed</Action> </Sequence> <Action>avoid_obstacle</Action> </Selector> </Sequence> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'adjust_speed': "Action: Adjust agent's speed based on environment conditions. Always returns True.", 'check_temperature': 'Condition: Check the temperature of the environment. Returns True if temperature is within optimal range, False otherwise.', 'collect_resource': 'Action: Collect a resource from the environment. Always returns True.', 'deposit_resource': 'Action: Deposit collected resource into designated location. Always returns True.', 'is_resource_available': 'Condition: Check if there is a resource within the environment. Returns True if a resource is available, False otherwise.', 'move_to_target': 'Action: Move towards a designated target. Always returns True.', 'is_agent_full': 'Condition: Check if agent has reached maximum capacity for resources. Returns True if agent is full, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Collect resources from the environment, adjust speed based on temperature, and deposit resources once full' Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>is_resource_available</Condition> <Action>adjust_speed</Action> </Sequence> <Action>collect_resource</Action> </Selector> <Selector> <Sequence> <Condition>is_agent_full</Condition> <Action>deposit_resource</Action> <Action>task_completed</Action> </Sequence> <Action>move_to_target</Action> </Selector> </Sequence> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'change_color_to_red': "Action: Change agent's color to red. Always returns True.", 'is_agent_in_position': 'Condition: Check if the agent is in the correct position for the task. Returns True if the agent is in the correct position, False otherwise.', 'move_to_position': 'Action: Move towards the designated position. Always returns True.', 'read_barcode': 'Action: Use barcode reader to scan for relevant information. Always returns True.', 'rotate_to_target': 'Action: Rotate towards the designated target. Always returns True.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'transfer_object': 'Action: Transfer object to another agent or designated location. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Move to position, scan barcode, rotate to target, and transfer object' Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>is_agent_in_position</Condition> <Action>read_barcode</Action> </Sequence> <Action>move_to_position</Action> </Selector> <Selector> <Sequence> <Condition>is_target_reached</Condition> <Action>rotate_to_target</Action> <Action>transfer_object</Action> </Sequence> <Action>task_completed</Action> </Selector> </Sequence> </BehaviorTree> 
###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'avoid obstacles until target is reached' Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Condition>is_obstacle_detected</Condition> <Action>avoid_obstacle</Action> </Selector> <Condition>is_target_reached</Condition> </Sequence> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'continue movement, avoid obstacles, and change color to green' Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree> <Sequence> <Action>continue_movement_agent</Action> <Selector> <Condition>is_obstacle_detected</Condition> <Action>avoid_obstacle</Action> </Selector> <Selector> <Condition>is_path_clear</Condition> <Action>change_color_to_green</Action> </Selector> </Sequence> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'continue movement until target is within 10 units then freeze' Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree> <Sequence> <Condition>is_agent_in_nest</Condition> <Selector> <Action>continue_movement_agent</Action> <Action>freeze</Action> </Selector> <Condition>is_target_detected</Condition> </Sequence> </BehaviorTree> 
###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_blue': "Action: Change agent's color to blue. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'drop_pheromones': 'Action: Drop pheromones to mark a path. Always returns True.', 'is_at_location': 'Condition: Check if the robot has reached a designated location. Returns True if at the location, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'neighbor_count': 'Condition: Check the number of neighbors within 5 units. Returns True if there are more than 3 neighbors, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Survey the environment and drop pheromones every 5 units'. Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree><Sequence><Action>wander</Action><Sequence><Condition>is_obstacle_detected</Condition><Action>avoid_obstacle</Action></Sequence><Sequence><Condition>neighbor_count</Condition><Action>drop_pheromones</Action></Sequence><Action>continue_movement_agent</Action></Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_yellow': "Action: Change agent's color to yellow. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'wait_time': 'Condition: Check if a designated amount of time has passed. Returns True if the time has passed, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.', 'go_to_target': 'Action: Move toward the target object. Always returns True.', 'grab_target': 'Action: Grab the target object if it is within reach. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Find the target and wait for 5 seconds before grabbing it'. Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree><Sequence><Action>wander</Action><Selector><Sequence><Condition>is_obstacle_detected</Condition><Action>avoid_obstacle</Action></Sequence><Sequence><Condition>is_agent_in_nest</Condition><Action>change_color_to_yellow</Action></Sequence></Selector></Sequence><Sequence><Condition>go_to_target</Condition><Sequence><Condition>wait_time</Condition><Action>grab_target</Action></Sequence></Sequence></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_yellow': "Action: Change agent's color to yellow. Always returns True.", 'follow_pheromones': 'Action: Follow the trail of pheromones. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 10 units. Returns True if the target is within 10 units of distance, False otherwise.', 'search_for_target': 'Action: Move around and search for the target. Always returns True.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'turn_to_pheromones': 'Action: Turn toward the direction of the pheromones. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Find the target by following the trail of pheromones and turn towards the pheromones when it is detected'. Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_target_detected</Condition><Action>change_color_to_green</Action><Action>task_completed</Action></Sequence><Sequence><Selector><Condition>is_agent_in_nest</Condition><Action>change_color_to_yellow</Action></Selector><Sequence><Condition>is_obstacle_detected</Condition><Action>search_for_target</Action></Sequence></Sequence></Selector><Selector><Condition>is_target_reached</Condition><Action>follow_pheromones</Action><Action>turn_to_pheromones</Action></Selector></BehaviorTree> 
###
4.// INSTRUCTIONS: Use only the following behaviors {'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_movement_speed': 'Action: Change the speed of the robot. Input should be a float between 0 and 1. Defaults to 0.5', 'follow_path': 'Action: Follow the designated path using predefined waypoints. Input should be a list of coordinates.', 'is_path_completed': 'Condition: Check if the designated path has been completed. Returns True if the path is completed, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'pick_up_package': 'Action: Pick up the package at the designated location. Always returns True.', 'drop_package': 'Action: Drop the package at the designated location. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Follow a designated path, avoiding obstacles and pick up the package at the end.' Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_path_completed</Condition><Sequence><Condition>is_target_reached</Condition><Sequence><Sequence><Condition>is_obstacle_detected</Condition><Action>avoid_obstacle</Action><Action>change_movement_speed(0.5)</Action><Action>follow_path[(1,2), (5,6), (9,8)]</Action></Sequence><Action>pick_up_package</Action><Action>drop_package</Action></Sequence></Sequence></Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_movement_speed': 'Action: Change the speed of the robot. Input should be a float between 0 and 1. Defaults to 0.5', 'follow_path': 'Action: Follow the designated path using predefined waypoints. Input should be a list of coordinates.', 'is_path_completed': 'Condition: Check if the designated path has been completed. Returns True if the path is completed, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'pick_up_package': 'Action: Pick up the package at the designated location. Always returns True.', 'drop_package': 'Action: Drop the package at the designated location. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Follow a designated path and avoid obstacles, adjusting speed as necessary.' Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_path_completed</Condition><Sequence><Condition>is_target_reached</Condition><Sequence><Action>change_movement_speed(0.5)</Action><Action>follow_path[(1,2), (5,6), (9,8)]</Action></Sequence><Sequence><Condition>is_obstacle_detected</Condition><Action>avoid_obstacle</Action><Action>change_movement_speed(0.7)</Action><Action>follow_path[(1,2), (5,6), (9,8)]</Action></Sequence></Sequence></Sequence></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'change_movement_speed': 'Action: Change the speed of the robot. Input should be a float between 0 and 1. Defaults to 0.5', 'follow_object': 'Action: Follow the designated object, maintaining a safe distance.', 'is_object_detected': 'Condition: Check if the target object is detected. Returns True if the object is detected, False otherwise.', 'is_object_close': 'Condition: Check if the target object is within 10 units. Returns True if the object is within 10 units of distance, False otherwise.', 'pick_up_object': 'Action: Pick up the object at the designated location. Always returns True.', 'drop_object': 'Action: Drop the object at the designated location. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Follow and pick up the target object, adjusting speed and maintaining a safe distance.' Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_object_detected</Condition><Sequence><Condition>is_object_close</Condition><Sequence><Action>change_movement_speed(0.5)</Action><Action>follow_object</Action></Sequence><Sequence><Condition>is_object_detected</Condition><Action>change_movement_speed(0.3)</Action><Action>follow_object</Action></Sequence></Sequence><Sequence><Condition>is_object_close</Condition><Action>pick_up_object</Action></Sequence><Sequence><Sequence><Condition>is_object_detected</Condition><Action>change_movement_speed(0.7)</Action><Action>follow_object</Action></Sequence><Action>drop_object</Action></Sequence></Sequence></BehaviorTree> 
###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.', 'move_forward': 'Action: Move the robot one step forward in the current direction. Always returns True.', 'turn_left': 'Action: Turn the robot 90 degrees to the left. Always returns True.', 'turn_right': 'Action: Turn the robot 90 degrees to the right. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Move around and avoid obstacles while searching for a target' Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_path_clear</Condition><Action>move_forward</Action></Sequence><Sequence><Condition>is_obstacle_detected</Condition><Action>avoid_obstacle</Action></Sequence><Sequence><Condition>is_target_detected</Condition><Action>task_completed</Action></Sequence><Action>wander</Action></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'detect_obstacle': 'Condition: Check if an obstacle is present within 10 units ahead. True if there is an obstacle, False otherwise.', 'move_backwards': 'Action: Move the robot one step backwards in the current direction. Always returns True.', 'move_left': 'Action: Move the robot one step to the left. Always returns True.', 'move_right': 'Action: Move the robot one step to the right. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Navigate through a field of obstacles to reach a target' Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_obstacle_detected</Condition><Sequence><Condition>detect_obstacle</Condition><Action>avoid_obstacle</Action><Sequence><Condition>is_obstacle_detected</Condition><Action>move_backwards</Action></Sequence></Sequence><Sequence><Condition>is_path_clear</Condition><Selector><Action>move_left</Action><Action>move_right</Action></Selector></Sequence><Sequence><Condition>is_target_detected</Condition><Action>task_completed</Action></Sequence></Sequence><Action>wander</Action></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'detect_green_area': 'Condition: Check if

###
4.// INSTRUCTIONS: Use only the following behaviors {'scan_surroundings': 'Action: Scan the surroundings for objects and obstacles. Always returns True.', 'navigate_to_object': 'Action: Navigate towards the identified object. Returns True if successfully navigated to the object, False otherwise.', 'pick_up_object': 'Action: Pick up the identified object. Returns True if object is successfully picked up, False otherwise.', 'place_object': 'Action: Place the object at a designated location. Returns True if object is successfully placed, False otherwise.', 'is_object_identified': 'Condition: Check if there is an object identified by the robot. Returns True if an object is identified, False otherwise.', 'is_object_picked_up': 'Condition: Check if the identified object has been picked up by the robot. Returns True if object is picked up, False otherwise.', 'is_object_placed': 'Condition: Check if the object has been successfully placed at the designated location. Returns True if object is placed, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Find the nearest book, pick it up and place it on the bookshelf.' Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree><Sequence><Selector><Condition>is_object_identified</Condition><Sequence><Action>navigate_to_object</Action><Selector><Condition>is_object_picked_up</Condition><Sequence><Action>place_object</Action><Condition>is_object_placed</Condition></Sequence></Selector><Action>pick_up_object</Action></Sequence></Selector><Action>scan_surroundings</Action></Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'navigate_home': 'Action: Navigate back to the home base. Returns True if successfully navigated home, False otherwise.', 'detect_intruders': 'Action: Use sensors to detect any intruders in the vicinity. Returns True if an intruder is detected, False otherwise.', 'send_warning_signal': 'Action: Send a warning signal to other robots to alert them of possible danger. Always returns True.', 'is_home_reached': 'Condition: Check if the agent has successfully navigated back to the home base. Returns True if home is reached, False otherwise.', 'is_intruder_detected': 'Condition: Check if sensors have detected any intruders. Returns True if an intruder is detected, False otherwise.', 'is_warning_sent': 'Condition: Check if the warning signal has been sent. Returns True if the signal has been sent, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Safely navigate back to the home base and send a warning signal if any intruders are detected along the way.' Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree><Sequence><Selector><Condition>is_intruder_detected</Condition><Sequence><Action>detect_intruders</Action><Selector><Condition>is_warning_sent</Condition><Sequence><Action>navigate_home</Action><Condition>is_home_reached</Condition></Sequence></Selector><Action>send_warning_signal</Action></Sequence></Selector><Action>agent_movement_freeze</Action></Sequence></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'move_forward': 'Action: Move one unit forward.', 'move_backward': 'Action: Move one unit backward.', 'turn_left': 'Action: Turn left by 90 degrees.', 'turn_right': 'Action: Turn right by 90 degrees.', 'is_object_ahead': 'Condition: Check if there is an object ahead of the robot. Returns True if an object is detected, False otherwise.', 'is_object_behind': 'Condition: Check if there is an object behind the robot. Returns True if an object is detected, False otherwise.', 'should_pick_up_object': 'Condition: Check if the robot should pick up the object in its current location. Returns True if object should be picked up, False otherwise.', 'should_place_object': 'Condition: Check if the robot should place the object it is carrying at its current location. Returns True if object should be placed, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Navigate through an obstacle course, picking up any objects along the way and placing them at designated locations.' Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree><Sequence><Selector><Condition>is_object_ahead</Condition><Sequence><Action>move_forward</Action><Selector><Condition>should_pick_up_object</Condition><Sequence><Action>pick_up_object</Action><Condition>should_place_object</Condition><Selector><Condition>is_object_behind</Condition><Action>turn_right</Action><Action>turn_left</Action></Selector><Action>move_backward</Action></Sequence></Selector></Sequence><Action>move_forward</Action></Selector></Sequence></BehaviorTree>

### 
###
4. // INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_food_detected': 'Condition: Check if food is within 10 units. Returns True if food is detected within 10 units of distance, False otherwise.', 'is_food_reached': 'Condition: Check if food is within 5 units. Returns True if food is detected within 5 units of distance, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Find and harvest food, return to nest, and freeze movement.'Output only the XML behavior tree without extra text.
4.// OUTPUT
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>is_food_detected</Condition> <Action>change_color_to_green</Action> </Sequence> <Action>wander</Action> </Selector> <Sequence> <Condition>is_food_reached</Condition> <Action>change_color_to_white</Action> <Action>agent_movement_freeze</Action> </Sequence> </Sequence> </BehaviorTree>
 
###
5. // INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'follow_object': 'Action: Follow a specified object. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 10 units. Returns True if the target is within 10 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'unload_object': 'Action: Unload an object carried by the agent. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Pick up an object, follow a specified object, return to the nest, and unload the object.'Output only the XML behavior tree without extra text.
5.// OUTPUT
<BehaviorTree> <Selector> <Sequence> <Condition>is_target_detected</Condition> <Action>change_color_to_green</Action> </Sequence> <Sequence> <Condition>is_agent_in_nest</Condition> <Action>change_color_to_white</Action> <Action>unload_object</Action> <Action>agent_movement_freeze</Action> </Sequence> </Selector> <Selector> <Condition>is_line_formed</Condition> <Action>continue_movement_agent</Action> <Action>follow_object</Action> <Action>is_path_clear</Action> </Selector> <Action>wander</Action> </BehaviorTree>
 
###
6. // INSTRUCTIONS: Use only the following behaviors {'is_area_visited': "Condition: Check if the current area has been visited before. Returns True if the area has been visited, False otherwise.", 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'move_backward': 'Action: Move the robot one step backward in the current direction. Always returns True.', 'move_forward': 'Action: Move the robot one step forward in the current direction. Always returns True.', 'set_target': 'Action: Set the target location for the robot. Always returns True.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Explore and map the entire environment, then return to the starting location.'Output only the XML behavior tree without extra text.
6.// OUTPUT
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>is_area_visited</Condition> <Add new behavior here> </Sequence> <Sequence> <Add new behavior 
###
4.// INSTRUCTIONS: Use only the following behaviors {'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Travel to target location, avoid obstacles along the way, and signal task completion'Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_target_reached</Condition><Action>task_completed</Action></Sequence><Sequence><Action>avoid_obstacle</Action><Condition>is_path_clear</Condition></Sequence><Action>wander</Action></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_red': "Action: Change agent's color to red. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'form_square': 'Action: Form a square shape by aligning with nearby agents. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_within_10_units': 'Condition: Check if target is within 10 units. Returns True if the target is within 10 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Form a square around the target, change color to red when within 10 units of target, and return to nest, change color to white'Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>is_target_within_10_units</Condition><Action>change_color_to_red</Action></Sequence><Condition>is_agent_in_nest</Condition><Sequence><Action>change_color_to_white</Action><Action>travel_to_target</Action></Sequence></Selector></Sequence><Sequence><Condition>is_target_detected</Condition><Sequence><Action>form_square</Action><Condition>is_line_formed</Condition></Sequence></Sequence><Action>continue_movement_agent</Action></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_forward': "Action: Move the agent forward. Always returns True.", 'agent_movement_backward': "Action: Move the agent backward. Always returns True.", 'change_speed': "Action: Change the agent's speed. Always returns True.", 'form_triangle': 'Action: Form a triangle shape by positioning with nearby agents. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_out_of_reach': 'Condition: Check if target is out of reachable distance. Returns True if the target is out of reach, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Move towards target, change speed if target is out of reach, form a triangle with nearby agents, and return to nest'Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>is_target_out_of_reach</Condition><Action>change_speed</Action></Sequence><Condition>is_agent_in_nest</Condition><Sequence><Action>move_to_target</Action><Action>change_speed</Action></Sequence></Selector></Sequence><Sequence><Condition>is_target_detected</Condition><Sequence><Action>form_triangle</Action><Condition>is_line_formed</Condition></Sequence></Sequence><Action>continue_movement_agent</Action></BehaviorTree> 
###
4.// INSTRUCTIONS: Use only the following behaviors {'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Monitor the environment and avoid obstacles while moving towards the target'. Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_obstacle_detected</Condition><Action>avoid_obstacle</Action></Sequence><Sequence><Condition>is_target_detected</Condition><Action>wander</Action></Sequence></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'On the way to target, if obstacle is detected, avoid it and continue movement' Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_obstacle_detected</Condition><Action>avoid_obstacle</Action></Sequence><Sequence><Condition>is_target_detected</Condition><Action>continue_movement_agent</Action></Sequence></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_stop': "Action: Stop agent's movement. Always returns True.", 'agent_movement_straight': "Action: Move the agent in a straight line. Always returns True.", 'agent_movement_turn_left': "Action: Turn the agent to the left. Always returns True.", 'agent_movement_turn_right': "Action: Turn the agent to the right. Always returns True.", 'change_color_to_blue': "Action: Change agent's color to blue. Always returns True.", 'change_color_to_yellow': "Action: Change agent's color to yellow. Always returns True.", 'patrol': 'Action: Move around and patrol the assigned area. Always returns True.', 'detect_intruder': 'Condition: Check if an intruder has been detected in the assigned area. Returns True if an intruder is present, False otherwise.', 'is_leader': 'Condition: Check if the agent is currently assigned as the leader. Returns True if the agent is the leader, False otherwise.', 'is_follower': 'Condition: Check if the agent is currently assigned as a follower. Returns True if the agent is a follower, False otherwise.', 'is_intruder_detected': 'Condition: Check if an intruder has been detected. Returns True if an intruder is detected, False otherwise.', 'task_completed': 'Action: Signal task completion by stopping movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Patrol the assigned area and if an intruder is detected, take action accordingly' Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>detect_intruder</Condition><Selector><Sequence><Condition>is_leader</Condition><Selector><Sequence><Condition>is_intruder_detected</Condition><Action>change_color_to_yellow</Action></Sequence><Selector><Sequence><Condition>is_follower</Condition><Selector><Sequence><Condition>is_intruder_detected</Condition><Action>change_color_to_blue</Action></Sequence></Selector></Sequence></Selector></Sequence><Action>patrol</Action></Sequence></Selector></BehaviorTree>   
###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'find the shortest path to the specified location, while avoiding obstacles and staying within the designated boundaries.' Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_path_clear</Condition><Action>change_color_to_green</Action><Sequence><Condition>is_agent_in_nest</Condition><Action>change_color_to_white</Action></Sequence></Sequence><Sequence><Condition>is_obstacle_detected</Condition><Action>avoid_obstacle</Action></Sequence></BehaviorTree>
   
###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'turn_left': 'Action: Turn the robot 90 degrees to the left. Always returns True.', 'turn_right': 'Action: Turn the robot 90 degrees to the right. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'explore and map the environment using a systematic coverage path planning strategy.' Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_path_clear</Condition><Selector><Sequence><Action>turn_left</Action><Action>continue_movement_agent</Action></Sequence><Sequence><Action>turn_right</Action><Action>continue_movement_agent</Action></Sequence></Selector></Sequence><Sequence><Condition>is_obstacle_detected</Condition><Action>avoid_obstacle</Action></Sequence></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'collect data from designated locations and return to the base for data transfer.' Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_target_detected</Condition><Action>task_completed</Action><Condition>is_agent_in_nest</Condition></Sequence><Sequence><Condition>is_target_reached</Condition><Action>change_color_to_green</Action></Sequence></Selector><Sequence><Condition>is_agent_in_nest</Condition><Action>change_color_to_white</Action></ 
###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'collect_item': 'Action: Collect an item located within 10 units. Returns True if an item is collected successfully, False otherwise.', 'deposit_item': 'Action: Deposit collected items in the nest. Returns True if items are deposited successfully, False otherwise.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_item_nearby': 'Condition: Check for items within 10 units. Returns True if an item is within range, False otherwise.', 'is_nest_full': 'Condition: Check if the nest has reached its maximum capacity. Returns True if the nest is full, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Collect 5 items and deposit them in the nest, then move towards the target location and change color to green.' Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>is_item_nearby</Condition><Action>collect_item</Action><Condition>is_nest_full</Condition><Action>task_completed</Action></Sequence><Action>wander</Action></Selector><Sequence><Action>move_to_target</Action><Action>change_color_to_green</Action></Sequence></Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_speed_to_fast': "Action: Change agent's speed to fast. Always returns True.", 'check_battery_level': 'Condition: Check current battery level. Returns True if battery level is above 20%, False otherwise.', 'collect_item': 'Action: Collect an item located within 10 units. Returns True if an item is collected successfully, False otherwise.', 'deliver_item': 'Action: Deliver collected item to a designated location. Returns True if item is delivered, False otherwise.', 'is_charging_station_reached': 'Condition: Check if the charging station is within 15 units. Returns True if the charging station is within range, False otherwise.', 'is_item_nearby': 'Condition: Check for items within 10 units. Returns True if an item is within range, False otherwise', 'is_target_reached': 'Condition: Check if the target location is within 15 units. Returns True if the target location is within range, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Collect items, deliver them to designated location, and reach the charging station.' Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_item_nearby</Condition><Action>collect_item</Action><Sequence><Condition>check_battery_level</Condition><Condition>is_charging_station_reached</Condition><Action>deliver_item</Action></Sequence></Sequence><Selector><Sequence><Condition>check_battery_level</Condition><Condition>is_item_nearby</Condition><Action>change_speed_to_fast</Action></Sequence><Sequence><Condition>check_battery_level</Condition><Condition>is_target_reached</Condition><Action>task_completed</Action></Sequence></Selector></BehaviorTree>
 
###
6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'divide_workers': 'Action: Divide workers into two groups based on their color. Returns True if division is successful, False otherwise.', 'join_workers': 'Action: Join the previously divided groups of workers. Returns True if joining is successful, False otherwise.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_nest_full': 'Condition: Check if the nest has reached its maximum capacity. Returns True if the nest is full, False otherwise.', 'is_specified_workers_divided': 'Condition: Check if workers with the specified color have been divided. Returns True if the specified workers are divided, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Divide blue workers and join them again when the nest is full.' Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_agent_in_nest</Condition><Action>task_completed</Action></Sequence><Selector><Sequence><Condition>is_nest_full</Condition><Sequence><Condition>is_specified_workers_divided</Condition><Action>divide_workers</Action></Sequence></Sequence><Sequence><Condition>is_nest_full</Condition><Sequence><Condition>is_specified_workers_divided</Condition><Action>join_workers</Action></Sequence></Sequence></Selector></BehaviorTree>
###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Move towards the target, avoid obstacles, and return home'Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>is_target_detected</Condition> <Action>continue_movement_agent</Action> <Action>avoid_obstacle</Action> <Action>task_completed</Action> </Sequence> <Sequence> <Condition>is_agent_in_nest</Condition> <Action>change_color_to_white</Action> </Sequence> </Selector> </Sequence> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Move towards the target, avoiding obstacles and forming a line along the way'Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>is_target_detected</Condition> <Action>continue_movement_agent</Action> <Action>avoid_obstacle</Action> <Action>form_line</Action> <Action>task_completed</Action> </Sequence> <Action>wander</Action> </Selector> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'If target is unreachable, move towards a new target'Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>is_target_detected</Condition> <Action>continue_movement_agent</Action> <Action>task_completed</Action> </Sequence> <Sequence> <Action>change_color_to_white</Action> <Action>is_path_clear</Action> <Action>wander</Action> </Sequence> </Selector> </BehaviorTree>##
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'find_path': 'Action: Use pathfinding algorithm to find the shortest path to a given target. Always returns True', 'move_along_path': 'Action: Move along the path generated by the pathfinding algorithm. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Find the shortest path to the designated target, then follow the path and change color to green upon reaching the target.'Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree> <Sequence> <Action>find_path</Action> <Action>move_along_path</Action> <Sequence> <Condition>is_target_reached</Condition> <Action>change_color_to_green</Action> </Sequence> </Sequence> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.",'change_color_to_green': "Action: Change agent's color to green. Always returns True.",'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'detect_object': 'Action: Use sensors to detect objects in the environment. Always returns True.', 'find_closest_target': 'Action: Use pathfinding algorithm to find and move towards the closest target. Always returns True.', 'avoid_collision': 'Action: Use avoidance algorithm to prevent collisions. Always returns True.', 'fully_explore_environment': 'Behavior: Fully explore the environment using a coverage algorithm. Returns True when the environment is fully explored, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Explore the environment and change color to green when a new target is discovered, avoid obstacles and collisions, and return to start when the environment is fully explored.'Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Action>detect_object</Action> <Action>fully_explore_environment</Action> <Sequence> <Condition>fully_explore_environment</Condition> <Action>agent_movement_freeze</Action> </Sequence> </Sequence> <Sequence> <Condition>detect_object</Condition> <Action>change_color_to_green</Action> <Action>find_closest_target</Action> </Sequence> <Action>avoid_collision</Action> <Sequence> <Condition>fully_explore_environment</Condition> <Action>change_color_to_white</Action> </Sequence> </Selector> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'detect_update_position': 'Action: Use sensors to detect other robots and update relative positions. Always returns True.', 'move_towards_closest_robot': 'Action: Use relative positions to move towards the closest robot. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Move towards the closest robot, avoid obstacles, form a line with other robots, and return to the nest once all robots are in line.'Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree> <Sequence> <Action>detect_update_position</Action> <Action>form_line</Action> <Sequence> <Condition>is_agent_in_nest</Condition> <Action>agent_movement_freeze</Action> </Sequence> </Sequence> <Sequence> <Condition>is_line_formed</Condition> <Action>change_color_to_white</Action> <Action>move_towards_closest_robot</Action> </Sequence> <Action>avoid_obstacle</Action> <Sequence> <Condition>is_target_detected</Condition> <Action>change_color_to_green</Action> </Sequence> </BehaviorTree> 
###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Move forward for 30 seconds and then turn left'Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree><Sequence><Action>continue_movement_agent</Action><Condition time="30">is_path_clear</Condition></Sequence><Action>turn_left</Action></BehaviorTree>
 
###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Find the target and avoid obstacles, then return to starting position'Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>is_target_detected</Condition><Action>avoid_obstacle</Action><Action>task_completed</Action></Sequence><Action>wander</Action></Selector><Sequence><Condition>is_agent_in_nest</Condition><Action>continue_movement_agent</Action><Condition>is_path_clear</Condition></Sequence></Sequence></BehaviorTree> 
 
###
6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Do not move if obstacles are present, otherwise move towards the target' Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree><Selector><Condition>is_obstacle_detected</Condition><Action>wander</Action><Sequence><Condition>is_target_detected</Condition><Action>continue_movement_agent</Action><Condition>is_path_clear</Condition></Sequence></Selector></BehaviorTree>###
4.// INSTRUCTIONS: Use only the following behaviors {'change_direction': "Action: Change robot's direction randomly. Always returns True.", 'move_forward': 'Action: Move robot forward in a straight line. Always returns True.', 'move_backward': 'Action: Move robot backward in a straight line. Always returns True.', 'turn_left': 'Action: Turn the robot 90 degrees to the left. Always returns True.', 'turn_right': 'Action: Turn the robot 90 degrees to the right. Always returns True.', 'is_at_destination': 'Condition: Check if the robot has reached the designated destination. Returns True if at destination, False otherwise.', 'is_path_blocked': 'Condition: Check if the path ahead is blocked by obstacles. Returns True if path is blocked, False otherwise.', 'pick_up_object': 'Action: Pick up the nearest object if present. Always returns True.', 'drop_object': 'Action: Drop the object at a specified location. Always returns True.', 'is_object_held': 'Condition: Check if the robot is holding an object. Returns True if holding an object, False otherwise.'}, to construct behavior tree in XML format to the following command.If the available behaviors do not fit with the user command say (Sorry, I can''t do the task)
4.// USAGE COMMAND: Generate behavior tree to 'Pick up object, move forward, change direction, move forward, drop object, repeat until at destination'. Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_at_destination</Condition><Action>move_forward</Action><Action>change_direction</Action></Sequence><Sequence><Condition>is_path_blocked</Condition><Action>change_direction</Action></Sequence><Sequence><Condition>is_object_held</Condition><Sequence><Action>drop_object</Action><Sequence><Condition>is_at_destination</Condition><Action>move_forward</Action></Sequence></Sequence></Sequence><Sequence><Condition>is_at_destination</Condition><Action>move_forward</Action></Sequence><Action>wander</Action></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'goto_location': 'Action: Move agent to specified location. Always returns True.', 'wait_for_target': "Condition: Check if the agent's target has been reached. Returns True if the target has been reached, False otherwise.", 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'move_to_target': 'Sequence: Move forward, change direction to target, and move forward again to reach target. Returns True if target is reached, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USAGE COMMAND: Generate behavior tree to 'Move from current location to a target location using the shortest path'. Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree><Sequence> <Selector> <Sequence> <Condition>is_path_clear</Condition> <Action>continue_movement_agent</Action> </Sequence> <Sequence> <Condition>wait_for_target</Condition> <Action>goto_location</Action> </Sequence> <Action>wait_for_target</Action> </Selector> <Sequence> <Condition>is_path_clear</Condition> <Action>move_to_target</Action> <Action>change_direction</Action> <Action>move_to_target</Action> </Sequence> </Sequence></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'scout_area': 'Action: Scout the surrounding area for resources. Returns True if resources are found, False otherwise.', 'harvest_resource': 'Action: Harvest the available resource if resources are present. Returns True if resources are successfully harvested, False otherwise.', 'drop_resource': 'Action: Drop the collected resource at a designated location. Returns True if resource is successfully dropped, False otherwise.', 'is_harvesting': 'Condition: Check if the robot is in the process of harvesting. Returns True if currently harvesting, False otherwise.', 'is_resource_full': 'Condition: Check if the robot's resource storage is full. Returns True if resource storage is full, False otherwise.', 'is_destination_reached': 'Condition: Check if the robot has reached the designated destination. Returns True if destination is reached, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USAGE COMMAND: Generate behavior tree to 'Scout for resources, harvest, and deliver to destination, repeat until resource storage is full'. Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>scout_area</Action><Sequence><Condition>is_harvesting</Condition><Action>harvest_resource</Action><Sequence><Condition>is_destination_reached</Condition><Action>drop_resource</Action></Sequence></Sequence></Sequence><Sequence><Condition>is_resource_full</Condition><Action>drop_resource</Action></Sequence><Action>wander</Action></Selector></BehaviorTree> 
###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_triangle': 'Action: Form a triangle shape with two other agents. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_fence_cleared': 'Condition: Check if the area is clear of obstacles. Returns True if no obstacles are detected, False otherwise.', 'is_triangle_formed': 'Condition: Check if a triangle is formed with two other agents. Returns True if the triangle is formed, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'is_target_completed': 'Condition: Check if previous target has been completed. Returns True if the previous target is complete, False otherwise.', 'move_to_next_target': 'Action: Move towards the next designated target. Always returns True.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Complete a series of targets by forming a triangle with other agents and moving to the next target when the previous one is completed'. Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>is_fence_cleared</Condition><Sequence><Condition>is_triangle_formed</Condition><Action>form_triangle</Action></Sequence></Sequence><Action>move_to_next_target</Action></Selector><Action>task_completed</Action></Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'drop_garbage': 'Action: Drop the garbage at the designated location. Returns True when garbage is successfully dropped, False otherwise.', 'follow_path': 'Action: Follow the designated path towards the target. Returns True when the agent reaches the target, False otherwise.', 'is_agent_near_target': 'Condition: Check if the agent is within 10 units of the target. Returns True if the agent is within 10 units of distance, False otherwise.', 'is_garbage_collected': 'Condition: Check if garbage is collected. Returns True if garbage is collected, False otherwise.', 'is_garbage_nearby': 'Condition: Check if garbage is detected within 5 units. Returns True if garbage is detected within 5 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'load_garbage': 'Action: Load the detected garbage onto the agent. Returns True when the garbage is successfully loaded, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Collect garbage from designated areas, load it onto the agent, and drop it off at the designated location'. Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_garbage_nearby</Condition><Sequence><Action>avoid_obstacle</Action><Condition>is_garbage_collected</Condition><Action>load_garbage</Action></Sequence></Sequence><Sequence><Condition>is_agent_near_target</Condition><Action>follow_path</Action></Sequence></Selector><Action>drop_garbage</Action><Action>task_completed</Action></BehaviorTree>
 
###
6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Returns True if the agent's color is successfully changed to green, False otherwise.", 'change_color_to_white': "Action: Change agent's color to white. Returns True if the agent's color is successfully changed to white, False otherwise.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'evade_enemy': 'Action: Evade the enemy agent by moving in a circular pattern. Always returns True.', 'hunt_target': 'Action: Hunt down the designated target. Returns True when the agent reaches the target, False otherwise.', 'is_enemy_detected': 'Condition: Check if an enemy agent is detected within 15 units. Returns True if an enemy agent is detected within 15 units of distance, False otherwise.', 'is_nest_nearby': 'Condition: Check if the nest is detected within 10 units. Returns True if the nest is detected within 10 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'load_target': 'Action: Load the target onto the agent. Returns True when the target is successfully loaded, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Evade enemy agents while hunting down a target and returning it to the nest'. Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_enemy_detected</Condition><Action>avoid_obstacle</Action></Sequence><Sequence><Condition>is_target_reached</Condition><Action>hunt_target</Action><Action>load_target</Action></Sequence></Selector><Action>evade_enemy</Action><Condition>is_nest_nearby</Condition><Action>continue_movement_agent</Action></BehaviorTree>  
###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command.If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Find a path to the target, avoid obstacles, continue movement, then change color to green only when target is within 10 units.'Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Action>agent_movement_freeze</Action> <Action>avoid_obstacle</Action> </Selector> <Selector> <Sequence> <Condition>is_target_detected</Condition> <Action>continue_movement_agent</Action> <Action>change_color_to_green</Action> <Action>task_completed</Action> </Sequence> <Action>wander</Action> </Selector> </Sequence> </BehaviorTree>
  
###
5.// INSTRUCTIONS: Use only the following behaviors{'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'count_colors': 'Action: Count number of robots with the same color within 5 units. Returns True if the count meets the specified condition, False otherwise.', 'follow_path': 'Action: Follow path to target location. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_color_next_to': 'Condition: Check if there is a robot with the same color next to the current agent. Returns True if a same-colored robot is found within 1 unit, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'pick_up_object': 'Action: Pick up object at current location. Always returns True.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Pick up an object if another robot with the same color is next to it and bring it to the nest.' Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>is_color_next_to</Condition> <Action>pick_up_object</Action> </Sequence> <Action>follow_path</Action> <Action>count_colors</Action> <Selector> <Sequence> <Condition>is_agent_in_nest</Condition><Action>continue_movement_agent</Action> <Action>change_color_to_white</Action> <Action>task_completed</Action> </Sequence> <Action>wander</Action> </Selector> </Sequence> </BehaviorTree>
  
###
6.// INSTRUCTIONS: Use only the following behaviors{'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'huddle': 'Action: Move towards the center to join the group. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.','is_nest_full': 'Condition: Check if the nest is currently at maximum capacity. Returns True if the nest is full, False otherwise.','is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.','is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.','is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'move_to_nest': 'Action: Move towards the nest. Always returns True.','protect_nest': 'Action: Stay close to the nest to protect it. Always returns True.','task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command.If the available behaviors do not fit with the user command say (Sorry, I can't do the task).
6.// USER COMMAND: generate behavior tree to 'Join the group in the center, then move towards the nest and stay close to protect it.'Output only the XML behavior tree without extra text.
6.// OUTPUT:
<Behavior
###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Check for obstacles and avoid them, then continue movement until target is reached, change color to green, and return to nest, change color to white.'Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>is_obstacle_detected</Condition> <Action>avoid_obstacle</Action> </Sequence> <Sequence> <Condition>is_target_reached</Condition> <Selector> <Sequence> <Action>change_color_to_green</Action> <Action>continue_movement_agent</Action> </Sequence> <Sequence> <Condition>is_agent_in_nest</Condition> <Action>change_color_to_white</Action> <Action>agent_movement_freeze</Action> </Sequence> </Selector> </Sequence> </Selector> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Form a vertical line, check for obstacles and avoid them, then return to the nest and freeze movement.'Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Action>form_line</Action> </Sequence> <Sequence> <Condition>is_obstacle_detected</Condition> <Action>avoid_obstacle</Action> <Condition>is_agent_in_nest</Condition> <Action>agent_movement_freeze</Action> </Sequence> </Selector> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Detect target, move towards it, change color to green, and form a vertical line at the center.'Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree> <Selector> <Condition>is_target_detected</Condition> <Sequence> <Action
###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Avoid obstacles, find and reach target without freezing movement.'Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_obstacle_detected</Condition><Action>avoid_obstacle</Action><Action>continue_movement_agent</Action></Sequence><Sequence><Condition>is_target_reached</Condition><Action>task_completed</Action></Sequence><Selector><Sequence><Condition>is_target_detected</Condition><Action>wander</Action></Sequence><Sequence><Condition>is_path_clear</Condition><Action>continue_movement_agent</Action></Sequence></Selector></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Change color to white and continue movement if target not detected, otherwise change color to green and freeze.'Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_target_detected</Condition><Action>change_color_to_green</Action><Action>task_completed</Action></Sequence><Selector><Sequence><Condition>is_agent_in_nest</Condition><Action>continue_movement_agent</Action><Action>change_color_to_white</Action></Sequence><Selector><Sequence><Condition>is_target_detected</Condition><Action>change_color_to_white</Action><Action>continue_movement_agent</Action></Sequence><Action>wander</Action></Selector></Selector></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Form a vertical line, avoid obstacles while moving, and change color to green when the target is detected.'Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_target_detected</Condition><Action>change_color_to_green</ 
###
4.// INSTRUCTIONS: Use only the following behaviors {'jump': "Action: Jump to a higher platform. Return True if jump is successful, False otherwise.", 'slide': 'Action: Slide to a lower platform. Return True if slide is successful, False otherwise.', 'duck': "Action: Duck to avoid obstacles. Return True if duck is successful, False otherwise.", 'run': "Action: Run forward at a constant speed. Return True if run is successful, False otherwise.", 'crawl': "Action: Crawl low to the ground to avoid detection. Return True if crawl is successful, False otherwise.", 'climb': "Action: Climb up a vertical wall. Return True if climb is successful, False otherwise.", 'look_left': 'Action: Turn head 90 degrees to look left. Always returns True.', 'look_right': 'Action: Turn head 90 degrees to look right. Always returns True.', 'open_door': "Action: Use tools to open a door. Always returns True.", 'close_door': "Action: Use tools to close a door. Always returns True."}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Navigate through a maze, avoiding obstacles, and using tools to open doors'.Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>is_target_reached</Condition> <Action>task_completed</Action> </Sequence> <Sequence> <Condition>is_obstacle_detected</Condition> <Selector> <Sequence> <Action>duck</Action> <Selector> <Sequence> <Condition>is_path_clear</Condition> <Action>run</Action> </Sequence> <Action>wander</Action> </Selector> </Selector> </Sequence> <Sequence> <Condition>is_door_detected</Condition> <Selector> <Action>close_door</Action> <Selector> <Sequence> <Condition>is_tool_nearby</Condition> <Sequence> <Action>pick_up_tool</Action> <Action>open_door</Action> <Action>drop_tool</Action> <Action>wander</Action> </Sequence> <Sequence> <Condition>is_tool_needed</Condition> <Sequence> <Action>pick_up_tool</Action> <Action>use_tool</Action> <Action>wander</Action> </Sequence> </Selector> </Sequence> </Selector> </Selector> </BehaviorTree>
 
###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_red': "Action: Change agent's color to red. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'is_intruder_detected': 'Condition: Check if an intruder is detected in the monitored area. Returns True if an intruder is detected, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Protect the nest from intruders by forming a line and changing color to red, then return to the nest and change color to green'.Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_intruder_detected</Condition><Action>form_line</Action><Action>change_color_to_red</Action><Action>wander</Action></Sequence><Sequence><Condition>is_agent_in_nest</Condition><Action>change_color_to_green</Action><Action>task_completed</Action></Sequence></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_red': "Action: Change agent's color to red. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.', 'find_food': "Action: Search for food within a certain radius. Return True if food is found, False otherwise.", 'eat': "Action: Consume food and store energy. Return True if food is successfully eaten, False otherwise.", 'find_nest': "Action:###
4.// INSTRUCTIONS: Use only the following behaviors {'go_left': 'Action: Move one step to the left. Always returns True.', 'go_right': 'Action: Move one step to the right. Always returns True.', 'go_forward': 'Action: Move one step forward. Always returns True.', 'rotate_left': 'Action: Rotate 45 degrees to the left. Always returns True.', 'rotate_right': 'Action: Rotate 45 degrees to the right. Always returns True.', 'is_wall_ahead': 'Condition: Check if there is a wall directly in front. Returns True if there is a wall, False otherwise.', 'is_end_reached': 'Condition: Check if the end point has been reached. Returns True if the robot has reached the designated endpoint, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_road_clear': 'Condition: Check if the road ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'reset_position': 'Action: Return to starting position. Always returns True.', 'stop_movement': 'Action: Stop all movement and freeze. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Navigate through a maze, avoiding obstacles, and reach the end point.'Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>is_wall_ahead</Condition><Selector><Sequence><Action>rotate_left</Action></Sequence><Action>go_forward</Action><Sequence><Condition>is_obstacle_detected</Condition><Action>rotate_right</Action></Sequence></Selector></Sequence><Selector><Sequence><Condition>is_road_clear</Condition><Action>go_forward</Action></Sequence><Selector><Condition>is_end_reached</Condition><Action>stop_movement</Action></Selector></Selector></Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'move_forward': 'Action: Move forward one step. Always returns True.', 'move_backward': 'Action: Move backward one step. Always returns True.', 'pivot_left': 'Action: Pivot 90 degrees to the left. Always returns True.', 'pivot_right': 'Action: Pivot 90 degrees to the right. Always returns True.', 'is_obstacle_detected': 'Condition: Check if there is an obstacle directly ahead. Returns True if an obstacle is detected, False otherwise.', 'is_goal_reached': 'Condition: Check if the goal has been reached. Returns True if the robot has reached the designated goal, False otherwise.', 'is_object_detected': 'Condition: Check if an object is within range. Returns True if an object is within the robot's designated range, False otherwise.', 'lift_object': 'Action: Lift and grab onto the object in front. Always returns True.', 'release_object': 'Action: Release and put down the object currently being carried. Always returns True.', 'reset_position': 'Action: Return to starting position. Always returns True.', 'check_battery_level': 'Condition: Check battery level. Returns True if battery level is above a specified threshold, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Pick up a nearby object and move it to the designated goal while avoiding obstacles and ensuring a sufficient battery level.'Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_object_detected</Condition><Action>lift_object</Action><Action>move_forward</Action><Sequence><Condition>is_obstacle_detected</Condition><Selector><Action>pivot_left</Action><Action>move_forward</Action><Action>move_backward</Action><Selector><Condition>check_battery_level</Condition><Action>check_battery_level</Action></Selector></Selector></Sequence><Action>release_object</Action></Sequence><Selector><Condition>is_goal_reached</Condition><Action>reset_position</Action></Selector></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'move_forward': 'Action: Move forward one step. Always returns True.', 'move_backward': 'Action: Move backward one step. Always returns True.', 'turn_left': 'Action: Turn 90 degrees to the left. Always returns True.', 'turn_right': 'Action: Turn 90 degrees to the right. Always returns True.', 'is_wall_ahead': 'Condition: Check if there is a wall directly ahead. Returns True if there is a wall, False otherwise.', 'is_end_reached': 'Condition: Check if the end point has been reached. Returns True if the robot has reached the designated endpoint, False otherwise.', 'is_target_visible': 'Condition: Check if the target is within view. Returns True if the target is visible within the robot's designated field of view, False otherwise.', 'is_object_accessible': 'Condition: Check if an object is within reach. Returns True if an object is within the robot's designated reach, False otherwise.', 'pick_up_object': 'Action: Pick up the object in front. Always returns True.', 'drop_object': 'Action: Drop the object currently being carried. Always returns True.', 'reset_position': 'Action: Return to starting position. Always returns True.', 'scan_area': 'Action: Scan the surrounding area for potential targets or obstacles. Returns True if a target or obstacle is detected, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Explore the environment, pick up any accessible objects, and bring them to the end point while avoiding obstacles and constantly scanning for potential targets.'Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>is_object_accessible</Condition><Action>pick_up_object</Action><Sequence><Condition>is_wall_ahead</Condition><Selector><Action>scan_area</Action><Action>turn_right</Action><Action>turn_left</Action><Selector><Condition>is_target_visible</Condition><Action>bring_to_target</Action></Selector></Selector></Sequence><Action>move_forward</Action></Sequence><Selector><Condition>is_end_reached</Condition><Action>reset_position</Action></Selector></Selector></BehaviorTree> 
###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'detect_red_ball': 'Condition: Check for a red ball in the environment. Returns True if a red ball is detected, False otherwise.', 'drop_object': 'Action: Drop the object currently held by the agent. Returns True after dropping the object.', 'find_red_ball': 'Action: Move towards and pick up a red ball within 10 units. Returns True after picking up the ball.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'navigate_to_nest': 'Action: Navigate to the nest using predefined landmarks. Returns True once the nest is reached.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Find and pick up a red ball, navigate back to the nest, and drop the ball.' Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>is_agent_in_nest</Condition> <Action>agent_movement_freeze</Action> <Action>task_completed</Action> </Sequence> <Selector> <Sequence> <Condition>detect_red_ball</Condition> <Action>find_red_ball</Action> <Selector> <Sequence> <Condition>is_obstacle_detected</Condition> <Action>avoid_obstacle</Action> <Action>continue_movement_agent</Action> </Sequence> <Action>navigate_to_nest</Action> </Selector> </Selector> <Action>drop_object</Action> </Sequence> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'detect_red_ball': 'Condition: Check for a red ball in the environment. Returns True if a red ball is detected, False otherwise.', 'drop_object': 'Action: Drop the object currently held by the agent. Returns True after dropping the object.', 'find_purple_ball': 'Action: Move towards and pick up a purple ball within 15 units. Returns True after picking up the ball.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'navigate_to_nest': 'Action: Navigate to the nest using predefined landmarks. Returns True once the nest is reached.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Find and pick up a purple ball and take it to the nest.' Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>is_agent_in_nest</Condition> <Action>agent_movement_freeze</Action> <Action>task_completed</Action> </Sequence> <Selector> <Sequence> <Condition>detect_purple_ball</Condition> <Action>find_purple_ball</Action> <Selector> <Sequence> <Condition>is_obstacle_detected</Condition> <Action>avoid_obstacle</Action> <Action>continue_movement_agent</Action> </Sequence> <Action>navigate_to_nest</Action> </Selector> </Selector> </Sequence> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'detect_yellow_ball': 'Condition: Check for a yellow ball in the environment. Returns True if a yellow ball is detected, False otherwise.', 'grab_object': 'Action: Grab the object currently held by the agent. Returns True after grabbing the object.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'random_movement': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Find and grab a yellow ball, navigate back to the nest, and drop the ball.' Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>is_agent_in_nest</Condition> <Action>agent_movement_freeze</Action> <Action>task_completed</Action> </Sequence> <Sequence> <Condition>detect_yellow_ball</Condition> <Action>grab_object</Action> <Selector> <Sequence> <Condition>is_obstacle_detected</Condition> <Action>avoid_obstacle</Action> <Action>random_movement</Action> </Sequence> <Action>navigate_to_nest</Action> </Selector> </Sequence> </Selector> </BehaviorTree> 
###
4.// INSTRUCTIONS: Use only the following behaviors {'move_forward': 'Action: Move one step forward while maintaining formation.', 'stop_movement': 'Action: Stop all movement and remain in current position.', 'maintain_distance': 'Action: Continuously adjust distance and angle to maintain position in formation.', 'engage_enemy': 'Action: Initiate attack on enemy detected within range.', 'is_enemy_detected': 'Condition: Check if enemy is within range of attack.', 'is_formation_broken': 'Condition: Check if formation has become misaligned or broken.', 'is_ordered_move': 'Condition: Check if there is a specific movement order given by the team leader.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Generate a behavior tree for a swarm of robots to defend their territory by maintaining formation and attacking any enemy detected within range.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_enemy_detected</Condition><Action>engage_enemy</Action><Condition>is_formation_broken</Condition><Action>maintain_distance</Action></Sequence><Sequence><Condition>is_ordered_move</Condition><Action>move_forward</Action><Condition>is_formation_broken</Condition><Action>stop_movement</Action></Sequence></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'move_up': 'Action: Move one step up while avoiding obstacles.', 'move_down': 'Action: Move one step down while avoiding obstacles.', 'move_left': 'Action: Move one step to the left while avoiding obstacles.', 'move_right': 'Action: Move one step to the right while avoiding obstacles.', 'detect_obstacle_above': 'Condition: Check for obstacles directly above the robot.', 'detect_obstacle_below': 'Condition: Check for obstacles directly below the robot.', 'detect_obstacle_left': 'Condition: Check for obstacles directly to the left of the robot.', 'detect_obstacle_right': 'Condition: Check for obstacles directly to the right of the robot.', 'is_in_narrow_passage': 'Condition: Check if the robot is in a narrow passage, requiring more precise movements.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Generate a behavior tree for a swarm of robots to effectively navigate through narrow passages while avoiding obstacles in tight spaces.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>detect_obstacle_left</Condition><Action>move_right</Action><Condition>detect_obstacle_right</Condition><Action>move_up</Action></Sequence><Sequence><Condition>detect_obstacle_below</Condition><Action>move_up</Action><Condition>detect_obstacle_above</Condition><Action>move_down</Action></Sequence><Sequence><Condition>is_in_narrow_passage</Condition><Selector><Sequence><Condition>detect_obstacle_left</Condition><Action>move_right</Action></Sequence><Sequence><Condition>detect_obstacle_right</Condition><Action>move_left</Action></Sequence></Selector></Sequence></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'sense_environment': 'Action: Use sensors to gather information about the environment and store it in memory.', 'calculate_path': 'Action: Use stored information to calculate the most efficient path to reach the designated location.', 'navigate_path': 'Action: Use previous calculations to navigate through the path while avoiding obstacles.', 'detect_intruder': 'Action: Continuously scan the environment for any unauthorized intruders.', 'find_target': 'Action: Use stored information to locate and identify the designated target.', 'is_target_found': 'Condition: Check if the target has been found based on previous calculations.', 'is_intruder_detected': 'Condition: Check if an unauthorized intruder has been detected while scanning the environment.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Generate a behavior tree for a swarm of robots to scan their surroundings, locate a designated target, and alert the team if an unauthorized intruder is detected.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>detect_intruder</Condition><Sequence><Condition>is_intruder_detected</Condition><Action>alert_team</Action></Sequence></Sequence><Sequence><Action>sense_environment</Action><Action>calculate_path</Action><Action>navigate_path</Action></Sequence><Sequence><Condition>is_target_found</Condition><Action>find_target</Action></Sequence></Selector></BehaviorTree> 
###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_red': "Action: Change agent's color to red. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_circle': 'Action: Form a circle with other robots. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_circle_formed': 'Condition: Check if a circle is formed with other robots. Returns True if a circle is formed, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Form a circle with other robots, and then change color to red to indicate a completed task.'Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>is_circle_formed</Condition><Action>change_color_to_red</Action><Action>agent_movement_freeze</Action></Sequence><Action>form_circle</Action></Selector></Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_red': "Action: Change agent's color to red. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_triangle': 'Action: Form an equilateral triangle with other robots. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_triangle_formed': 'Condition: Check if an equilateral triangle is formed with other robots. Returns True if a triangle is formed, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Form an equilateral triangle with other robots'Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree> <Sequence> <Action>form_triangle</Action> </Sequence> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_red': "Action: Change agent's color to red. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_greeting': 'Action: Form a word or symbol to greet others. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_greeting_formed': 'Condition: Check if a greeting word or symbol is formed. Returns True if the greeting is formed, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Form a word or symbol to greet other robots'Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree> <Sequence> <Action>form_greeting</Action> </Sequence> </BehaviorTree>		
###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_red': "Action: Change agent's color to red. Always returns True.", 'collect_resource': 'Action: Pick up a resource at the current location. Returns True if successful, False otherwise.', 'drop_resource': 'Action: Drop the carried resource at the current location. Returns True if successful, False otherwise.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_resource_pickable': 'Condition: Check if a resource is available at the current location. Returns True if a resource is available, False otherwise.', 'is_resource_full': 'Condition: Check if the agent is carrying a full load of resources. Returns True if full, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Collect resource, change color to red, drop resource, and change color to green.'Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Selector> <Condition>is_resource_pickable</Condition> <Action>collect_resource</Action> </Selector> <Condition>is_resource_full</Condition> <Action>drop_resource</Action> <Action>change_color_to_green</Action> </Sequence> <Action>change_color_to_red</Action> <Action>agent_movement_freeze</Action> <Action>task_completed</Action> </Selector> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'detect_other_agents': 'Condition: Check if any other agents are within 10 units. Returns True if other agents are detected, False otherwise.', 'form_circle': 'Action: Form a circle with other agents at the center. Always returns True.', 'move_to_target': 'Action: Move towards the designated target. Returns True if the agent reaches the target, False otherwise.', 'scatter_agents': 'Action: Move away from the center and scatter with other agents. Returns True if agent successfully scatters, False otherwise.', 'send_signal_to_agents': 'Action: Send a signal to other agents in the vicinity. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Form a circle with 4 other agents, send a signal, and then move towards the target.'Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree> <Sequence> <Action>form_circle</Action> <Sequence> <Condition>detect_other_agents</Condition> <Action>send_signal_to_agents</Action> </Sequence> <Action>move_to_target</Action> </Sequence> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'communicate_with_other_agents': 'Action: Send a message to other agents. Returns True if message is successfully sent, False otherwise.', 'gather_in_formation': 'Action: Move towards a specific coordinate and form a formation with other agents. Returns True if formation is successfully formed, False otherwise.', 'hold_formation': 'Action: Move towards the designated target and hold the current formation with other agents. Returns True if formation is maintained, False otherwise.', 'receive_message_from_agent': 'Action: Receive a message from another agent. Returns True if message is successfully received, False otherwise.', 'is_in_formation': 'Condition: Check if currently in formation with other agents. Returns True if maintaining formation, False otherwise.', 'is_message_received': 'Condition: Check if a new message has been received from another agent. Returns True if message is received, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Communicate with other agents, move to formation location, form a formation, and hold the formation while moving towards the target.'Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>is_in_formation</Condition> <Action>hold_formation</Action> </Sequence> <Action>gather_in_formation</Action> </Selector> <Action>communicate_with_other_agents</Action> <Action>receive_message_from_agent</Action> <Sequence> <Condition>is_target_reached</Condition> <Action>agent_movement_freeze</Action> <Action>task_completed</Action> </Sequence> </Sequence> </BehaviorTree>  
###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'head towards the target while avoiding obstacles and constantly checking if the target is reached' Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree> <Sequence> <Condition>is_target_reached</Condition> <Selector> <Sequence> <Action>continue_movement_agent</Action> <Condition>is_obstacle_detected</Condition> <Action>avoid_obstacle</Action> </Sequence> <Sequence> <Condition>is_target_detected</Condition> <Action>change_color_to_green</Action> </Sequence> </Selector> </Sequence> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Form a vertical line and move towards the target, avoiding obstacles and changing color to white whenever an obstacle is detected' Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Action>form_line</Action> <Action>change_color_to_white</Action> </Sequence> <Sequence> <Action>continue_movement_agent</Action> <Condition>is_obstacle_detected</Condition> <Action>avoid_obstacle</Action> </Sequence> <Sequence> <Condition>is_target_detected</Condition> <Action>change_color_to_white</Action> </Sequence> </Selector> </BehaviorTree> 

###
6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Patrol the environment by moving randomly, checking for obstacles, and returning to the nest when the patrol is completed' Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Action>change_color_to_green</Action> <Sequence> <Action>continue_movement_agent</Action> <Condition>is_obstacle_detected</Condition
###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_square': 'Action: Form a square with other robots in the swarm. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_square_formed': 'Condition: Check if a square is formed. Returns True if a square is formed with other robots, False otherwise.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Collaboratively enclose a designated area by forming a square'. Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>is_target_detected</Condition><Action>change_color_to_green</Action><Action>task_completed</Action></Sequence><Action>wander</Action></Selector><Sequence><Condition>is_agent_in_nest</Condition><Action>change_color_to_white</Action></Sequence></Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'change_direction': "Action: Change the agent's direction to face the target. Always returns True.", 'follow_line': 'Action: Follow a line to reach the target. Always returns True.', 'is_at_target': 'Condition: Check if the agent has reached the target. Returns True if the agent is at the target, False otherwise.', 'is_line_followed': 'Condition: Check if the line is followed correctly. Returns True if the line is correctly followed, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'move_forward': "Action: Move the agent forward one unit. Always returns True.", 'move_left': "Action: Move the agent left one unit. Always returns True.", 'move_right': "Action: Move the agent right one unit. Always returns True.", 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Follow a line to reach the target, while avoiding obstacles and adjusting direction if needed'. Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>is_target_detected</Condition><Sequence><Action>follow_line</Action><Condition>is_at_target</Condition></Sequence><Action>task_completed</Action></Sequence><Action>wander</Action></Selector><Sequence><Condition>is_obstacle_detected</Condition><Sequence><Action>change_direction</Action><Sequence><Condition>is_line_followed</Condition><Action>move_forward</Action></Sequence><Action>wander</Action></Sequence></Sequence></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'divide_group': 'Action: Divide the swarm group into two smaller groups. Always returns True.', 'is_agent_in_group': 'Condition: Check if the agent is in a specified group. Returns True if the agent is in the specified group, False otherwise.', 'is_group_divided': 'Condition: Check if the swarm group is divided into two. Returns True if the group is divided, False otherwise.', 'is_target_detected': 'Condition: Check if target is within 10 units. Returns True if the target is within 10 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 5 units. Returns True if the target is within 5 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Divide the swarm into two groups, with one group following a target while the other remains in a specific location'. Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>is_target_detected</Condition><Action>change_color_to_green</Action><Sequence><Action>divide_group</Action><Condition>is_group_divided</Condition><Action>change_color_to_white</Action></Sequence><Action>task_completed</Action></Sequence><Action>wander</Action></Selector><Sequence><Condition>is_agent_in_group</Condition><Sequence><Condition>is_target_reached</Condition><Action>wander</Action><Action>change_color_to_green</Action><Condition>is_target_detected</Condition><Action>continue_movement_agent</Action></Sequence></Sequence></BehaviorTree>
###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Check for potential obstacles, avoid them, and continue movement'Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>is_obstacle_detected</Condition> <Action>avoid_obstacle</Action> </Sequence> <Action>continue_movement_agent</Action> </Selector> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Move to target location, check if target is reached, and change color to green'Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree> <Sequence> <Action>change_color_to_green</Action> <Sequence> <Condition>is_target_reached</Condition> <Action>continue_movement_agent</Action> </Sequence> </Sequence> <Sequence> <Condition>is_target_detected</Condition> <Action>form_line</Action> </Sequence> </BehaviorTree>

# Task 6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Check if path is clear, if not avoid obstacles and continue movement'Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree> <Sequence> <Condition>is_path_clear</Condition> <Action>continue_movement_agent</Action> </Sequence> <Selector> <Condition>is_obstacle_detected</Condition> <Action>avoid_obstacle</Action> </Selector> </BehaviorTree> 
###
4.// INSTRUCTIONS: Use only the following behaviors {'approach_target': "Action: Move towards the target. Always returns True.", 'detect_target': 'Condition: Check for a target within range. Returns True if a target is detected, False otherwise.', 'move_to_nearest_obstacle': 'Action: Move to the nearest detected obstacle. Returns True when at the obstacle, False otherwise.', 'realign_formation': 'Action: Realign the formation. Returns True when the formation is realigned, False otherwise.', 'report_obstacle': 'Action: Report the detected obstacle. Returns True when the obstacle is reported, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Search for and approach a target while avoiding obstacles, then report the first obstacle encountered.'Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>detect_target</Condition> <Action>approach_target</Action> <Action>realign_formation</Action> </Sequence> <Action>move_to_nearest_obstacle</Action> <Action>report_obstacle</Action> </Selector> </Sequence> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'detect_target': 'Condition: Check for a target within range. Returns True if a target is detected, False otherwise.', 'grab_target': 'Action: Grab and hold onto the target. Returns True when the target is successfully grabbed, False otherwise.', 'ignore_obstacles': 'Action: Ignore any detected obstacles and continue towards the target. Returns True when the target is reached, False otherwise.', 'move_backwards': 'Action: Move backwards for one step. Always returns True.', 'move_forwards': 'Action: Move forwards for one step. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Move forwards towards the target while ignoring obstacles, and if the target is not reached, move backwards.'Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>ignore_obstacles</Condition> <Action>move_forwards</Action> </Sequence> <Sequence> <Condition>detect_target</Condition> <Action>grab_target</Action> <Action>move_forwards</Action> </Sequence> <Sequence> <Condition>detect_target</Condition> <Action>grab_target</Action> <Action>move_backwards</Action> </Sequence> </Selector> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_direction': 'Action: Change robot's direction by 180 degrees. Always returns True.', 'detect_line': 'Condition: Check for a line within range. Returns True if a line is detected, False otherwise.', 'follow_line': 'Action: Follow the detected line. Returns True when the end of the line is reached, False otherwise.', 'move_forwards': 'Action: Move forwards for one step. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Follow a detected line while avoiding obstacles, and if the line is lost, change direction and continue following the line.'Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>detect_line</Condition> <Action>avoid_obstacle</Action> <Action>follow_line</Action> </Sequence> <Sequence> <Condition>detect_line</Condition> <Action>change_direction</Action> <Action>follow_line</Action> </Sequence> </Selector> </BehaviorTree> 
###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'follow_target': 'Action: Move towards the target. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Follow target, if obstacles are present, avoid them and continue moving towards the target.' Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_target_detected</Condition><Selector><Sequence><Condition>is_path_clear</Condition><Action>follow_target</Action></Sequence><Sequence><Condition>is_obstacle_detected</Condition><Action>avoid_obstacle</Action><Action>continue_movement_agent</Action></Sequence></Selector></Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'formation_leader': 'Action: Move to the center of the formation. Always returns True.', 'follow_formation_leader': 'Action: Follow the formation leader. Always returns True.', 'formation_line': 'Action: Form a horizontal line with other agents. Always returns True.', 'is_formation_line_formed': 'Condition: Check if a horizontal line is formed. Returns True if the line is formed, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Move to the center of the formation, then form a horizontal line with other agents and follow the formation leader.' Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree><Sequence><Action>formation_leader</Action><Action>formation_line</Action></Sequence><Selector><Sequence><Condition>is_formation_line_formed</Condition><Action>follow_formation_leader</Action></Sequence><Action>formation_leader</Action></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_blue': "Action: Change agent's color to blue. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Avoid obstacles while moving, if target is detected, move towards it and change color to blue, then return to the starting position and change color to white.' Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_target_detected</Condition><Selector><Sequence><Condition>is_path_clear</Condition><Action>follow_target</Action></Sequence><Sequence><Condition>is_obstacle_detected</Condition><Action>avoid_obstacle</Action><Action>continue_movement_agent</Action></Sequence></Selector><Action>change_color_to_blue</Action></Sequence><Sequence><Condition>is_agent_in_nest</Condition><Action>change_color_to_white</Action></Sequence></Selector></BehaviorTree> 
###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'move_forward': 'Action: Move one step forward while maintaining formation.', 'move_backward': 'Action: Move one step backward while maintaining formation.', 'rotate_left': 'Action: Rotate the agent 90 degrees to the left.', 'rotate_right': 'Action: Rotate the agent 90 degrees to the right.', 'move_to_target': 'Action: Move towards the designated target location while avoiding obstacles.', 'check_distance_to_target': 'Condition: Check the distance to the designated target location. Returns True if within 20 units, False otherwise.', 'is_formation_broken': 'Condition: Check if the formation has become misaligned or broken.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Generate a behavior tree for a swarm of robots to scout a large area and report back to a central location while maintaining formation and avoiding obstacles.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_formation_broken</Condition><Action>reform_formation</Action><Sequence><Condition>is_obstacle_detected</Condition><Action>avoid_obstacle</Action><Action>move_forward</Action></Sequence></Selector><Sequence><Condition>check_distance_to_target</Condition><Action>move_to_target</Action></Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'move_forward': 'Action: Move one step forward while maintaining formation.', 'shift_left': 'Action: Shift the entire formation one step to the left.', 'shift_right': 'Action: Shift the entire formation one step to the right.', 'shift_up': 'Action: Shift the entire formation one step upwards.', 'shift_down': 'Action: Shift the entire formation one step downwards.', 'move_to_target': 'Action: Move towards the designated target location while avoiding obstacles.', 'check_distance_to_target': 'Condition: Check the distance to the designated target location. Returns True if within 20 units, False otherwise.', 'check_proximity_to_obstacle': 'Condition: Check for proximity to obstacles. Returns True if within 5 units, False otherwise.', 'is_formation_broken': 'Condition: Check if the formation has become misaligned or broken.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Generate a behavior tree for a swarm of robots to cooperate in building a structure while maintaining formation and avoiding obstacles.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_formation_broken</Condition><Action>reform_formation</Action><Sequence><Condition>check_proximity_to_obstacle</Condition><Action>shift_up</Action><Action>move_forward</Action></Sequence></Selector><Sequence><Condition>check_distance_to_target</Condition><Action>move_to_target</Action></Sequence></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'align_with_target': 'Action: Align with the designated target location.', 'check_orientation': 'Condition: Check the current orientation to the target direction. Returns True if aligned, False otherwise.', 'move_to_target': 'Action: Move towards the designated target location while avoiding obstacles.', 'check_distance_to_target': 'Condition: Check the distance to the designated target location. Returns True if within 20 units, False otherwise.', 'idle': 'Action: Remain idle and conserve energy.', 'check_power_level': 'Condition: Check the current power level. Returns True if above 50%, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Generate a behavior tree for a swarm of robots to conserve energy by idling when power is low and efficiently moving towards a designated target.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>check_power_level</Condition><Action>idle</Action></Sequence><Sequence><Condition>check_distance_to_target</Condition><Sequence><Sequence><Condition>is_obstacle_detected</Condition><Action>avoid_obstacle</Action></Sequence><Action>align_with_target</Action></Sequence><Sequence><Condition>check_orientation</Condition><Action>move_to_target</Action></Sequence></Sequence></Selector></BehaviorTree> 
###
4.// INSTRUCTIONS: Use only the following behaviors {'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.', 'scatter': 'Action: Scatter and move in different directions. Always returns True.', 'is_scattered': 'Condition: Check if the robots are scattered. Returns True if the robots are scattered, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Form a line and change color to green, move towards the target while avoiding obstacles, when target is reached, scatter and change color to white.'Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>is_scattered</Condition><Sequence><Condition>is_line_formed</Condition><Action>change_color_to_green</Action></Sequence><Selector><Sequence><Condition>is_target_reached</Condition><Action>scatter</Action><Action>task_completed</Action></Sequence><Action>wander</Action></Selector></Sequence><Action>wander</Action></Selector></Sequence><Sequence><Condition>is_obstacle_detected</Condition><Action>avoid_obstacle</Action></Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_direction': 'Action: Change the robot\'s movement direction based on input. Returns True once direction is changed.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Avoid obstacles while moving towards the target, if an obstacle is detected, change movement direction, when target is reached, change color to green.' Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>is_target_detected</Condition> <Action>change_color_to_green</Action> <Action>task_completed</Action> </Sequence> <Action>wander</Action> </Selector> <Selector><Condition>is_obstacle_detected</Condition> <Action>avoid_obstacle</Action> <Selector><Condition>is_path_clear</Condition> <Action>wander</Action> <Selector><Condition>is_agent_in_nest</Condition> <Action>change_direction</Action></Selector></Selector> </Sequence> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'change_color_to_red': "Action: Change agent's color to red. Always returns True.", 'change_direction': 'Action: Change the robot\'s movement direction based on input. Returns True once direction is changed.', 'follow_target': 'Action: Follow the target object if it is within range. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Form a line and change color to red, follow the target, if an obstacle is detected, change movement direction, when target is reached, change color to green.' Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree> <Sequence> <Sequence> <Condition>is_line_formed</Condition> <Action>change_color_to_red</Action> </Sequence> <Action>wander</Action> </Selector> <Selector> <Condition>is_path_clear</Condition> <Action>wander</Action> <Selector> <Condition>is_target_detected</Condition> <Action>follow_target</Action> <Sequence> <Condition>is_obstacle_detected</Condition> <Action>change_direction</Action> </Sequence> </Selector> <Sequence> <Condition>is_target_reached</Condition> <Action>change_color_to_green</Action> <Action>task_completed</<BehaviorTree><Selector><Sequence><Action>release_object</Action><Action>continue_movement</Action></Sequence></Selector></BehaviorTree>

###
4.// INSTRUCTIONS: Use only the following behaviors {'detect_target': 'Condition: Check if the target object is within range of detection.', 'chase_target': 'Action: Move towards and chase the target object until it is within range.', 'attack_target': 'Action: Engage in an attack against the target object within range.', 'avoid_attack': 'Action: Avoid incoming attacks from the target object.', 'is_agent_alive': 'Condition: Check if the agent is still alive.', 'is_enemy_present': 'Condition: Check for any presence of enemy agents within a certain range.', 'retreat': 'Action: Move away and retreat from the enemy agents if detected.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Generate a behavior tree for a swarm of robots to effectively hunt and attack a target while avoiding enemy attacks.
4.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Selector><Condition>is_agent_alive</Condition><Condition>is_enemy_present</Condition></Selector><Selector><Sequence><Condition>detect_target</Condition><Selector><Action>chase_target</Action><Action>retreat</Action></Selector></Sequence><Action>attack_target</Action></Sequence><Action>avoid_attack</Action></Selector></Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'detect_friendly_fire': 'Condition: Check if there are any other agents within the swarm's line of fire.', 'move_to_position': 'Action: Move into a specific position within the formation determined by the swarm hierarchy.', 'aim_and_fire': 'Action: Aim and fire at the locked target within range.', 'defensive_stance': 'Action: Switch to a defensive formation to protect against enemy attacks.', 'surround_and_trap': 'Action: Surround and trap the target within a confined formation.', 'follow_target': 'Action: Follow and mimic the movement of the target agent.', 'is_leader_injured': 'Condition: Check if the leader agent is injured and needs to be replaced.', 'replace_leader': 'Action: Replace the injured leader with a healthy agent.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Generate a behavior tree for a swarm of robots to effectively protect and defend a designated leader while attacking a locked target.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>detect_friendly_fire</Condition><Action>defensive_stance</Action></Sequence><Sequence><Selector><Condition>is_leader_injured</Condition><Action>replace_leader</Action></Selector><Selector><Sequence><Condition>detect_target</Condition><Selector><Sequence><Condition>is_leader_present</Condition><Action>move_to_position</Action></Sequence><Selector><Condition>detect_target</Condition><Action>surround_and_trap</Action></Selector></Selector></Sequence><Sequence><Condition>detect_target</Condition><Selector><Action>follow_target</Action><Action>aim_and_fire</Action></Selector></Sequence><Action>defensive_stance</Action></Selector></Sequence></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'gather_resources': 'Action: Gather resources from the environment when detected within range.', 'deposit_resources': 'Action: Deposit gathered resources into the designated storage location.', 'collect_data': 'Action: Collect and analyze data from the surrounding environment and share with other agents.', 'search_for_target': 'Action: Search for a designated target within the environment.', 'form_cluster': 'Action: Form a tight cluster with other agents to reduce risk of damage.', 'move_to_safe_zone': 'Action: Move to a designated safe zone within the environment.', 'is_resource_full': 'Condition: Check if the agent's resource storage is full and needs to be deposited.', 'is_threat_detected': 'Condition: Check for any potential threat or danger within the environment.', 'is_data_useful': 'Condition: Check if the collected data can be used to inform decision-making processes.', 'is_target_found': 'Condition: Check if the designated target has been found.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Generate a behavior tree for a swarm of robots to effectively gather resources, collect data, and search for a designated target while avoiding potential threats.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_threat_detected</Condition><Sequence><Condition>detect_friendly_fire</Condition><Action>form_cluster</Action></Sequence></Sequence><Sequence><Condition>is_resource_full</Condition><Action>deposit_resources</Action></Sequence><Sequence><Selector><Condition>is_data_useful</Condition><Action>gather_data</Action></Selector><Selector><Condition>is_target_found</Condition><Action>move_to_position</Action></Selector><Action>move_to_safe_zone</Action></Sequence><Selector><Sequence><Condition>detect_resources</Condition><Action>gather_resources</Action></Sequence><Action>search_for_target</Action></Selector></Sequence></Selector></BehaviorTree>
###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_red': "Action: Change agent's color to red. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_square': 'Action: Form an equilateral square shape. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_square_formed': 'Condition: Check if a square shape is formed. Returns True if a square is formed, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Form a square and change color to red when the target is reached'. Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_target_reached</Condition><Sequence><Action>form_square</Action><Action>change_color_to_red</Action></Sequence></Sequence><Action>wander</Action></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_red': "Action: Change agent's color to red. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'follow_leader': 'Action: Follow a designated leader robot. Returns True if successfully following, False otherwise.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_leader_detected': 'Condition: Check if the designated leader robot is within range. Returns True if the leader is detected, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Follow a designated leader robot, but avoid obstacles along the way'. Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_leader_detected</Condition><Sequence><Action>follow_leader</Action><Action>avoid_obstacle</Action></Sequence></Sequence><Action>wander</Action></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_red': "Action: Change agent's color to red. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'disperse': 'Action: Move in a random direction away from the group. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_group_too_close': 'Condition: Check if there are too many robots in a designated area. Returns True if there are too many robots, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Disperse from group if too many robots in one designated area'. Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_group_too_close</Condition><Action>disperse</Action></Sequence><Action>wander</Action></Selector></BehaviorTree>
###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Navigate to a specific location while avoiding obstacles, and change color to green when reaching the destination.'Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>is_obstacle_detected</Condition> <Action>avoid_obstacle</Action> <Action>wander</Action> </Sequence> <Sequence> <Condition>is_target_reached</Condition> <Action>change_color_to_green</Action> <Action>task_completed</Action> </Sequence> <Sequence> <Condition>is_path_clear</Condition> <Action>continue_movement_agent</Action> </Sequence> </Selector> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Defend the nest from intruders by forming a line and freezing movement'Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>is_obstacle_detected</Condition> <Action>avoid_obstacle</Action> <Action>wander</Action> </Sequence> <Sequence> <Condition>is_target_detected</Condition> <Action>form_line</Action> <Action>task_completed</Action> </Sequence> <Sequence> <Condition>is_line_formed</Condition> <Action>agent_movement_freeze</Action> </Sequence> </Selector> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Collect items and return to the nest, changing color to white and freezing movement once items are retrieved.'Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>is_obstacle_detected</Condition> <Action>avoid_obstacle</Action4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'group_up': 'Action: Move towards the closest agent and join in a group. Always returns True.', 'is_at_group_leader': 'Condition: Check if the agent is currently the leader of the group. Returns True if the agent is the leader, False otherwise.', 'is_leader_reached': 'Condition: Check if the leader of the group has been reached. Returns True if the leader is reached, False otherwise.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Find the target and form a group with the closest agent, then move towards the target.'Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>is_target_detected</Condition> <Selector> <Sequence> <Condition>is_group_leader</Condition> <Action>change_color_to_green</Action> <Action>task_completed</Action> </Sequence> <Action>group_up</Action> </Selector> </Sequence> <Selector> <Sequence> <Condition>is_at_group_leader</Condition> <Action>continue_movement_agent</Action> <Action>wander</Action> </Sequence> <Action>group_up</Action> </Selector> </Sequence> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'attack_enemy': 'Action: Attack enemy within range. Returns True if enemy is attacked successfully, False otherwise.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_red': "Action: Change agent's color to red. Always returns True.", 'defend_self': "Action: Take defensive actions. Returns True if actions are taken successfully, False otherwise.", 'is_enemy_near': 'Condition: Check if an enemy is within range. Returns True if an enemy is detected, False otherwise.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Defend the target by attacking any nearby enemies and changing color to red.'Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>is_target_detected</Condition> <Action>change_color_to_red</Action> <Selector> <Sequence> <Condition>is_enemy_near</Condition> <Action>attack_enemy</Action> <Action>defend_self</Action> </Sequence> <Action>wander</Action> </Selector> </Sequence> <Action>change_color_to_green</Action> </Selector> </Sequence> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'change_color_to_blue': "Action: Change agent's color to blue. Always returns True.", 'change_color_to_red': "Action: Change agent's color to red. Always returns True.", 'is_neighbor_blue': 'Condition: Check if a neighbor is blue. Returns True if a blue neighbor is detected, False otherwise.', 'is_neighbor_red': 'Condition: Check if a neighbor is red. Returns True if a red neighbor is detected, False otherwise.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'move_towards_target': 'Action: Move towards the target. Returns True if target is reached successfully, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Move towards the target and change color to blue if a blue neighbor is detected or to red if a red neighbor is detected.'Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>is_target_detected</Condition> <Action>move_towards_target</Action> <Selector> <Condition>is_neighbor_blue</Condition> <Action>change_color_to_blue</Action> <Condition>is_neighbor_red</Condition> <Action>change_color_to_red</Action> </Selector> </Sequence> <Action>task_completed</Action> </Selector> </Sequence> </BehaviorTree>
###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'form_circle': 'Action: Form a circle at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_circle_formed': 'Condition: Check if a circle is formed. Returns True if the circle is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 10 units. Returns True if the target is within 10 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Form a circle at target location and change color to green once circle is formed, then return to the nest and change color to white.'Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>is_target_detected</Condition> <Action>change_color_to_green</Action> <Sequence> <RepeatUntilSuccess> <Action>form_circle</Action> <Action>continue_movement_agent</Action> </RepeatUntilSuccess> <Action>task_completed</Action> </Sequence> </Sequence> <Action>wander</Action> </Selector> <Sequence><Condition>is_agent_in_nest</Condition> <Action>change_color_to_white</Action> <Action>agent_movement_freeze</Action> </Sequence> </Sequence> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_blue': "Action: Change agent's color to blue. Always returns True.", 'change_color_to_red': "Action: Change agent's color to red. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_square': 'Action: Form a square at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_square_formed': 'Condition: Check if a square is formed. Returns True if the square is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 10 units. Returns True if the target is within 10 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'explore': 'Action: Move towards unexplored areas. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task).
5.// USER COMMAND: generate behavior tree to 'Explore the environment and form a square, then change color to blue if target is detected within 10 units, or change color to red if target is detected within 20 units.'Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>is_target_detected</Condition> <Condition>is_target_within_10_units</Condition> <Action>change_color_to_blue</Action> <Action>task_completed</Action> </Sequence> <Sequence> <Condition>is_target_detected</Condition> <Condition>is_target_within_20_units</Condition> <Action>change_color_to_red</Action> <Action>task_completed</Action> </Sequence> <Sequence> <Action>explore</Action> <RepeatUntilSuccess> <Action>form_square</Action> <Action>continue_movement_agent</Action> </RepeatUntilSuccess> <Action>task_completed</Action> </Sequence> </Selector> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'gather_resources': 'Action: Gather resources from surrounding environment. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_resources_available': 'Condition: Check if resources are available. Returns True if resources are present in the environment, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 10 units. Returns True if the target is within 10 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Gather resources and return to the nest, changing color to green if obstacles are detected while
###
4.// INSTRUCTIONS: Use only the following behaviors {'forward': 'Action: Move one step forward.', 'turn_left': 'Action: Turn the agent 90 degrees to the left.', 'turn_right': 'Action: Turn the agent 90 degrees to the right.', 'is_obstacle_ahead': 'Condition: Check if there is an obstacle blocking the path ahead.', 'is_at_target': 'Condition: Check if the agent has reached the designated target position.', 'is_stuck': 'Condition: Check if the agent has not moved for more than 5 steps.', 'task_completed': 'Action: Signal task completion by freezing movement.', 'change_color_to_green': "Action: Change agent's color to green."}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Navigate through obstacles, reach target position, and change color to green upon completion.'
4.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_obstacle_ahead</Condition><Selector><Action>turn_right</Action><Action>turn_left</Action></Selector></Sequence><Selector><Sequence><Condition>is_at_target</Condition><Action>change_color_to_green</Action><Action>task_completed</Action></Sequence><Sequence><Condition>is_stuck</Condition><Action>forward</Action></Sequence></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'explore_area': 'Action: Explore the environment by moving randomly.', 'detect_target': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'grab_target': 'Action: Grab the target object if it is within reach.', 'drop_target': 'Action: Drop the target object at the designated drop-off location.', 'is_target_reached': 'Condition: Check if target is within 10 units. Returns True if the target is within 10 units of distance, False otherwise.', 'is_object_detected': 'Condition: Check if an object is detected in the agent�s vicinity.', 'is_movement_stopped': 'Condition: Check if agent is not moving for more than 5 steps. Returns True if agent is not moving, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Explore the environment, detect and grab the target object, and deliver it to the designated drop-off location.'
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_movement_stopped</Condition><Action>explore_area</Action></Sequence><Selector><Sequence><Condition>detect_target</Condition><Action>grab_target</Action></Sequence><Selector><Sequence><Condition>is_target_reached</Condition><Action>drop_target</Action><Action>task_completed</Action></Sequence><Sequence><Condition>is_object_detected</Condition><Action>grab_target</Action></Sequence></Selector></Selector></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'head_to_target': 'Action: Head towards the designated target position.', 'is_target_reached': 'Condition: Check if the target is within 10 units. Returns True if the target is within 10 units of distance, False otherwise.', 'detect_obstacles': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_at_nest': 'Condition: Check if the agent is at the designated nest location.', 'release_target': 'Action: Release the target object at the designated nest location.', 'is_movement_stopped': 'Condition: Check if agent is not moving for more than 5 steps.', 'task_completed': 'Action: Signal task completion by freezing movement.', 'change_color_to_green': "Action: Change agent's color to green."}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Retrieve target from a distant location, navigate obstacles, and return to the designated nest location to release target and change color to green upon completion.'
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_movement_stopped</Condition><Action>head_to_target</Action></Sequence><Selector><Sequence><Condition>detect_obstacles</Condition><Action>change_direction</Action></Sequence><Selector><Sequence><Condition>is_target_reached</Condition><Action>change_color_to_green</Action><Action>task_completed</Action></Sequence><Sequence><Condition>is_at_nest</Condition><Action>release_target</Action><Action>task_completed</Action></Sequence></Selector></Selector></Selector></BehaviorTree> 
###
4.// INSTRUCTIONS: Use only the following behaviors {'follow_path': 'Action: Follow a designated path. Always returns True.', 'is_end_reached': 'Condition: Check if the end point of the path is reached. Returns True if the end point is reached, False otherwise.', 'turn_left': 'Action: Turn left by 45 degrees. Always returns True.', 'turn_right': 'Action: Turn right by 45 degrees. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Follow the designated path, turn left, and then turn right.'Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Action>follow_path</Action> <Condition>is_end_reached</Condition> </Sequence> <Sequence> <Action>turn_left</Action> <Action>turn_right</Action> </Sequence> </Selector> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'fly_around': 'Action: Fly around in a designated area. Always returns True.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_red_light_detected': 'Condition: Check for a red light signal. Returns True if a red light is detected, False otherwise.', 'stop_movement': 'Action: Stop all movement immediately. Always returns True.', 'get_closer': 'Action: Move closer to the detected red light. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Fly around in a designated area, avoid obstacles, stop if a red light is detected, and get closer to the red light.'Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Action>fly_around</Action> <Selector> <Condition>is_obstacle_detected</Condition> <Action>fly_around</Action> </Selector> <Selector> <Condition>is_red_light_detected</Condition> <Action>stop_movement</Action> <Action>get_closer</Action> </Selector> </Sequence> </Selector> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'pick_up_object': 'Action: Pick up an object at the current location. Returns True if an object is successfully picked up, False otherwise.', 'is_object_in_reach': 'Condition: Check if an object is within reach. Returns True if an object is within reach, False otherwise.', 'is_object_held': 'Condition: Check if an object is currently held. Returns True if an object is held, False otherwise.', 'release_object': 'Action: Release the object currently held. Returns True if an object is successfully released, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Pick up an object, release it, and pick it up again.'Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Action>pick_up_object</Action> <Action>release_object</Action> <Action>pick_up_object</Action> </Sequence> <Sequence> <Condition>is_object_in_reach</Condition> <Condition>is_object_held</Condition> <Action>pick_up_object</Action> </Sequence> </Selector> </BehaviorTree> 
###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'random_search': 'Action: Move randomly within the environment, searching for the target. Always returns True.', 'find_target': 'Action: Move towards the target until within 5 units, then stop movement. Returns True once the agent has reached the target.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Find and reach the target, then change color to white.'Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Action>find_target</Action> <Action>change_color_to_white</Action> </Sequence> <Selector> <Action>random_search</Action> </Selector> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'avoid_nest': 'Action: Move away from the nest. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Avoid the nest and obstacles, and then form a vertical line.'Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Action>avoid_nest</Action> <Action>avoid_obstacle</Action> </Sequence> <Action>form_line</Action> </Selector> </Sequence> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'random_movement': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Move randomly while avoiding obstacles and the nest.'Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree> <Selector> <Action>avoid_nest</Action> <Action>avoid_obstacle</Action> <Action>random_movement</Action> </Selector> </BehaviorTree> 
###
4.// INSTRUCTIONS: Use only the following behaviors {'recharge': 'Action: Find and connect to a charging station. Returns True when connected to a charging station.', 'return_to_base': 'Action: Return to the home base. Returns True when back at the base.', 'is_battery_low': 'Condition: Check if the robot's battery level is below 20%. Returns True if battery level is low, False otherwise.', 'is_robot_connected': 'Condition: Check if the robot is connected to the charging station. Returns True if connected, False otherwise.', 'is_at_home_base': 'Condition: Check if the robot is back at the home base. Returns True if at the base, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Return home and recharge if battery level is low'.Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Selector> <Condition>is_battery_low</Condition> <Action>recharge</Action> </Selector> <Condition>is_robot_connected</Condition> <Action>return_to_base</Action> </Sequence> <Action>wander</Action> </Selector> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'move_forward_3s': 'Action: Move robot forward for 3 seconds. Always returns True.', 'turn_left': 'Action: Turn the robot 90 degrees to the left. Always returns True.', 'turn_right': 'Action: Turn the robot 90 degrees to the right. Always returns True.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Move forward for 3 seconds, then turn left, and finally turn right if no obstacles are detected'. Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Action>move_forward_3s</Action> <Action>turn_left</Action> <Action>turn_right</Action> </Sequence> <Sequence> <Condition>is_obstacle_detected</Condition> <Action>wander</Action> </Sequence> </Selector> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'go_to_nearest_location': 'Action: Choose and go to the nearest location specified. Returns True when at the nearest location.', 'collect_item': 'Action: Collect the specified item in the environment. Returns True when item is collected.', 'is_item_available': 'Condition: Check if the specified item is available in the environment. Returns True if item is available, False otherwise.', 'is_at_nearest_location': 'Condition: Check if the robot is at the nearest location. Returns True if at the location, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Go to nearest item and collect it'. Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Selector><Condition>is_item_available</Condition><Action>collect_item</Action></Selector><Condition>is_at_nearest_location</Condition></Sequence><Action>go_to_nearest_location</Action></Selector></BehaviorTree>
###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_red': "Action: Change agent's color to red. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'perform_task': 'Action: Perform a specific task. Returns True if the task is completed, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'If path is not clear, avoid obstacles. Otherwise, form a line and change color to red to signal other robots.' Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_path_clear</Condition><Action>avoid_obstacle</Action></Sequence><Sequence><Action>form_line</Action><Action>change_color_to_red</Action></Sequence></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'If agent is not in nest, continue movement. Otherwise, change color to white and form a line.' Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_agent_in_nest</Condition><Action>change_color_to_white</Action><Action>form_line</Action></Sequence><Sequence><Action>continue_movement_agent</Action><Action>task_completed</Action></Sequence></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'hunt_target': 'Action: Move towards and attempt to capture the target. Returns True if the target is captured, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Hunt the target by avoiding obstacles, changing color to green, and capturing the target.' Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree><Sequence><Selector><Condition>is_target_detected</Condition><Sequence><Action>avoid_obstacle</Action><Action>change_color_to_green</Action></Sequence><Action>hunt_target</Action></Selector><Action>task_completed</Action></Sequence></BehaviorTree>
###
4.// INSTRUCTIONS: Use only the following behaviors {'move_to_location_1': 'Action: Move to predefined location 1.', 'perform_task_a': 'Action: Perform task A.', 'perform_task_b': 'Action: Perform task B.', 'perform_task_c': 'Action: Perform task C.', 'perform_task_d': 'Action: Perform task D.', 'check_distance_greater_than_10': 'Condition: Check if distance to target location is greater than 10 units.', 'check_distance_less_than_5': 'Condition: Check if distance to target location is less than 5 units.', 'is_task_a_completed': 'Condition: Check if task A is completed.', 'is_task_b_completed': 'Condition: Check if task B is completed.', 'is_task_c_completed': 'Condition: Check if task C is completed.', 'is_task_d_completed': 'Condition: Check if task D is completed.', 'set_target_location_2': 'Action: Set target location 2 as the new target.', 'set_target_location_3': 'Action: Set target location 3 as the new target.', 'set_target_location_4': 'Action: Set target location 4 as the new target.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Move to location 1, perform task A, if distance to location > 10 continue to perform task B and set target location 2 as the new target, if distance to location < 5 perform task C, and if task A or B is not completed set target location 3 as the new target and perform task D.'
4.// OUTPUT:
<BehaviorTree> <Sequence> <Action>move_to_location_1</Action> <Sequence> <Condition>check_distance_greater_than_10</Condition> <Action>perform_task_b</Action> <Action>set_target_location_2</Action> </Sequence> <Condition>check_distance_less_than_5</Condition> <Action>perform_task_c</Action> </Sequence> <Selector> <Condition>is_task_a_completed</Condition> <Sequence> <Condition>is_task_b_completed</Condition> <Selector> <Condition>is_task_c_completed</Condition> <Action>perform_task_d</Action> <Action>set_target_location_4</Action> </Selector> <Action>set_target_location_3</Action> </Sequence> </Selector> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'move_to_location_a': 'Action: Move to predefined location A.', 'move_to_location_b': 'Action: Move to predefined location B.', 'move_to_location_c': 'Action: Move to predefined location C.', 'check_distance_from_location_a': 'Condition: Check if distance from current location to location A is less than 15 units.', 'check_distance_from_location_b': 'Condition: Check if distance from current location to location B is less than 10 units.', 'check_distance_from_location_c': 'Condition: Check if distance from current location to location C is less than 5 units.', 'move_to_closest_location': 'Action: Move to the closest predefined location from the current location.', 'perform_task_a': 'Action: Perform task A.', 'perform_task_b': 'Action: Perform task B.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Move to closest predefined location and perform task A, if distance from location A > 15 move to location B and perform task B, if distance from location B > 10 move to location C and perform task A.'
5.// OUTPUT:
<BehaviorTree> <Sequence> <Action>move_to_closest_location</Action> <Selector> <Condition>check_distance_from_location_a</Condition> <Sequence> <Action>perform_task_a</Action> </Sequence> <Condition>check_distance_from_location_b</Condition> <Sequence> <Action>move_to_location_b</Action> <Action>perform_task_b</Action> </Sequence> </Selector> <Condition>check_distance_from_location_c</Condition> <Sequence> <Action>move_to_location_c</Action> <Action>perform_task_a</Action> </Sequence> </Sequence> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'move_to_location_1': 'Action: Move to predefined location 1.', 'move_to_location_2': 'Action: Move to predefined location 2.', 'move_to_location_3': 'Action: Move to predefined location 3.', 'move_to_location_4': 'Action: Move to predefined location 4.', 'is_location_1_reached': 'Condition: Check if location 1 is reached.', 'is_location_2_reached': 'Condition: Check if location 2 is reached.', 'is_location_3_reached': 'Condition: Check if location 3 is reached.', 'is_location_4_reached': 'Condition: Check if location 4 is reached.', 'is_obstacle_ahead': 'Condition: Check if there is an obstacle blocking the path ahead.', 'change_direction_left': 'Action: Change direction to the left.', 'change_direction_right': 'Action: Change direction to the right.', 'stop_movement': 'Action: Stop all movement.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Move to the next available location, if obstacle ahead change direction to the right, if current location is reached stop all movement.'
6.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Condition>is_obstacle_ahead</Condition> <Sequence> <Action>change_direction_right</Action> <Action>move_to_location_2</Action> </Sequence> </Selector> <Selector> <Condition>is_location_1_reached</Condition> <Action>stop_movement</Action> </Selector> </Sequence> </BehaviorTree>
###
4.// INSTRUCTIONS: Use only the following behaviors {'forward': 'Action: Move forward one step. Always returns True.', 'turn_left': 'Action: Turn left 90 degrees. Always returns True.', 'turn_right': 'Action: Turn right 90 degrees. Always returns True.', 'check_front': 'Condition: Check if there is an obstacle directly in front. Returns True if an obstacle is detected, False otherwise.', 'check_left': 'Condition: Check if there is an obstacle to the left. Returns True if an obstacle is detected, False otherwise.', 'check_right': 'Condition: Check if there is an obstacle to the right. Returns True if an obstacle is detected, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'navigate through a maze and reach the end, following the right wall'.
4.// OUTPUT:
<BehaviorTree><Sequence><Condition>check_right</Condition><Action>turn_right</Action></Sequence><Selector><Sequence><Condition>check_front</Condition><Action>forward</Action></Sequence><Sequence><Condition>check_right</Condition><Action>forward</Action></Sequence><Sequence><Condition>check_left</Condition><Action>turn_right</Action><Action>forward</Action></Sequence><Sequence><Condition>check_front</Condition><Action>forward</Action></Sequence><Sequence><Condition>check_right</Condition><Action>forward</Action></Sequence><Sequence><Condition>check_left</Condition><Action>turn_right</Action><Action>forward</Action></Sequence><Sequence><Condition>check_front</Condition><Action>forward</Action></Sequence><Sequence><Condition>check_right</Condition><Action>turn_right</Action><Action>forward</Action></Sequence><Sequence><Condition>check_left</Condition><Action>turn_left</Action><Action>forward</Action></Sequence><Sequence><Condition>check_front</Condition><Action>forward</Action></Sequence><Sequence><Condition>check_right</Condition><Action>turn_left</Action><Action>forward</Action></Sequence><Sequence><Condition>check_left</Condition><Action>forward</Action></Sequence><Sequence><Condition>check_front</Condition><Action>forward</Action></Sequence></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'traverse_right': 'Action: Move along the right edge of the environment. Always returns True.', 'traverse_left': 'Action: Move along the left edge of the environment. Always returns True.', 'traverse_forward': 'Action: Move forward along the edge of the environment. Always returns True.', 'check_barrier': 'Condition: Check if there is a barrier at the edge of the environment. Returns True if a barrier is detected, False otherwise.', 'check_obstacle': 'Condition: Check if there is an obstacle directly in front. Returns True if an obstacle is detected, False otherwise.', 'is_end_reached': 'Condition: Check if the end of the environment has been reached. Returns True if the end is reached, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'traverse along the right edge of the environment, avoiding obstacles and reaching the end.'
5.// OUTPUT:
<BehaviorTree><Sequence><Condition>check_obstacle</Condition><Selector><Action>traverse_right</Action><Action>traverse_forward</Action></Selector></Sequence><Sequence><Condition>is_end_reached</Condition><Action>task_completed</Action></Sequence></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'move_to_target': 'Action: Move towards the target location. Returns True when target is reached.', 'avoid_obstacle': 'Action: Avoid detected obstacles. Returns True when obstacle is avoided.', 'check_target_in_sight': 'Condition: Check if the target is within line of sight. Returns True when target is in sight.', 'check_path_clear': 'Condition: Check if the path ahead is clear. Returns True if no obstacles are detected, False if obstacles are present.', 'pick_up_object': 'Action: Pick up and carry the object. Returns True when object is lifted.', 'drop_object': 'Action: Drop the carried object. Returns True when object is released.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'collect all the objects scattered in the environment and bring them to the target location'
6.// OUTPUT:
<BehaviorTree><Sequence><Condition>check_target_in_sight</Condition><Action>task_completed</Action></Sequence><Selector><Sequence><Condition>check_path_clear</Condition><Action>move_to_target</Action></Sequence><Sequence><Condition>check_path_clear</Condition><Action>pick_up_object</Action></Sequence></Selector><Condition>is_target_reached</Condition><Action>drop_object</Action></BehaviorTree>
###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Follow a path while avoiding obstacles, change color to green when target is close, then return home and change color to white.' Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>is_target_detected</Condition><Action>change_color_to_green</Action><Action>task_completed</Action></Sequence><Action>continue_movement_agent</Action></Selector><Sequence><Condition>is_obstacle_detected</Condition><Action>avoid_obstacle</Action></Sequence></Sequence><Sequence><Condition>is_agent_in_nest</Condition><Action>change_color_to_white</Action></Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Navigate through a maze and change color to green when reaching the end.' Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_path_clear</Condition><Action>continue_movement_agent</Action><Selector><Sequence><Condition>is_target_reached</Condition><Action>change_color_to_green</Action><Action>task_completed</Action></Sequence><Action>wander</Action></Selector></Sequence><Sequence><Selector><Sequence><Condition>is_obstacle_detected</Condition><Action>avoid_obstacle</Action></Sequence></Selector></Sequence></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Avoid obstacles while following a path, check for intruders, form a line and change color to green to direct other robots.' Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_path_clear</Condition><Action>agent_movement_freeze</Action><Action>continue_movement_agent</Action><Selector><Sequence><Condition>is_intruder_detected</Condition><Action>form_line</Action><Action>change_color_to_green</Action></Sequence><Action>wander 
###
4.// INSTRUCTIONS: Use only the following behaviors {'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'move_forward': 'Action: Move the robot forward. Always returns True.', 'move_backward': 'Action: Move the robot backward. Always returns True.', 'rotate_right': 'Action: Rotate the robot 90 degrees to the right. Always returns True.', 'rotate_left': 'Action: Rotate the robot 90 degrees to the left. Always returns True.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'reach_target': 'Condition: Check if the target has been reached. Returns True if the target has been reached, False otherwise.', 'detect_obstacle': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Rotate left, move forward, form a line, then rotate right.' Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Action>rotate_left</Action> <Action>move_forward</Action> </Sequence> <Action>form_line</Action> </Selector> <Action>rotate_right</Action> </Sequence> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'move_forward': 'Action: Move the robot forward. Always returns True.', 'move_backward': 'Action: Move the robot backward. Always returns True.', 'rotate_right': 'Action: Rotate the robot 90 degrees to the right. Always returns True.', 'rotate_left': 'Action: Rotate the robot 90 degrees to the left. Always returns True.', 'detect_obstacle': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Move forward, detect obstacle, then move backwards.' Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree> <Sequence> <Action>move_forward</Action> <Selector> <Sequence> <Condition>detect_obstacle</Condition> <Action>move_backward</Action> </Sequence> <Action>rotate_right</Action> </Selector> </Sequence> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'follow_path': 'Action: Follow the predefined path. Always returns True.', 'return_home': 'Action: Return to the home base. Always returns True.', 'explore': 'Action: Explore the environment. Always returns True.', 'recharge': 'Action: Recharge the robot energy. Always returns True.', 'check_battery_level': 'Condition: Check the battery level. Returns True if battery level is above 50%, False otherwise.', 'is_home_reachable': 'Condition: Check if the home base is reachable. Returns True if the home base is within 100 units, False otherwise.', 'is_target_reached': 'Action: Check if the target has been reached. Returns True if the target has been reached, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Explore the environment and return home, but only when battery level is above 50% and home base is reachable.' Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Action>check_battery_level</Action> <Action>is_home_reachable</Action> </Sequence> <Action>return_home</Action> </Selector> <Selector> <Sequence> <Action>explore</Action> <Action>recharge</Action> </Sequence> <Action>follow_path</Action> </Selector> </Sequence> </BehaviorTree> 
###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Avoid obstacles and move towards target if not detected within 20 units.'Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>is_obstacle_detected</Condition> <Action>avoid_obstacle</Action> </Sequence> <Action>wander</Action> <Sequence> <Condition>is_target_detected</Condition> <Condition>!is_target_reached</Condition> <Action>continue_movement_agent</Action> </Sequence> </Selector> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Move towards target if path is clear, form a line and change color to green if target is reached.'Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>!is_obstacle_detected</Condition> <Sequence> <Condition>is_target_detected</Condition> <Action>continue_movement_agent</Action> <Sequence> <Condition>is_target_reached</Condition> <Selector> <Action>form_line</Action> <Action>change_color_to_green</Action> </Selector> </Sequence> </Sequence> </Sequence> </Selector> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Check if the agent is in the nest, form a line if not, avoid obstacles and move towards target if within 20 units.'Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>is_agent_in_nest</Condition> <Action>task_completed</Action> <Action>agent_movement_freeze</Action> </Sequence> <Sequence> <Condition>!is_line_form 
###
4.// INSTRUCTIONS: Use only the following behaviors {'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.', 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'detect_boundary': 'Condition: Check if robot is approaching boundary. Returns True if robot is approaching boundary, False otherwise', 'get_target_position': 'Action: Get the target's current position. Always returns True.', 'move_to_position': 'Action: Move towards the specified position. Returns True when robot reaches the target position.', 'is_target_reached': 'Condition: Check if the target is within 10 units. Returns True if the target is within 10 units of distance, False otherwise.', 'is_target_lost': 'Condition: Check if the target is lost. Returns True if the target cannot be detected, False otherwise.', 'search_for_target': 'Action: Move randomly and scan for target. Returns True when the target is found.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Search for target, when target is lost, move towards the target position, change color to white if target is reached.'Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree> <Sequence> <Sequence><Condition>is_target_lost</Condition><Selector><Action>wander</Action><Sequence><Action>get_target_position</Action><Action>move_to_position</Action></Sequence></Selector></Sequence> <Selector> <Condition>is_target_reached</Condition> <Action>change_color_to_white</Action> <Action>agent_movement_freeze</Action> <Action>task_completed</Action> </Selector> </Sequence> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_red': "Action: Change agent's color to red to signal danger. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'move_in_square': 'Action: Move in a square pattern. Always returns True.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_in_danger': 'Condition: Check if agent is in a dangerous situation. Returns True if agent is in danger, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.', 'speak_warning': 'Action: Speak a warning message to alert other robots. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'If danger is detected, move in a square and speak a warning message, then change color to red.'Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree> <Sequence> <Condition>is_in_danger</Condition> <Selector> <Action>speak_warning</Action> <Action>move_in_square</Action> <Action>change_color_to_red</Action> </Selector> <Selector> <Condition>is_line_formed</Condition> <Action>change_color_to_white</Action> <Action>agent_movement_freeze</Action> <Action>task_completed</Action> </Selector> </Sequence> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'move_to_position': 'Action: Move towards the specified position. Returns True when robot reaches the target position.', 'is_in_nest': 'Condition: Check if agent is inside the nest. Returns True if agent is in the nest, False otherwise.', 'is_target_reached': 'Condition: Check if the target is within 10 units. Returns True if the target is within 10 units of distance, False otherwise.', 'search_for_target': 'Action: Move randomly and scan for target. Returns True when the target is found.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Search for target and stop search if target is found or agent reaches the specified position or agent is in the nest.'Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence><Condition>is_target_reached</Condition><Selector><Action>search_for_target</Action><Sequence><Condition>is_in_nest</Condition><Action>agent_movement_freeze</Action></Sequence></Selector></Sequence> <Sequence><Selector><Condition>is_target_reached</Condition><Action>agent_movement_freeze</Action></Selector><Condition>is_target_reached</Condition></Sequence> </Selector> </Sequence> </BehaviorTree> 
###
4.// INSTRUCTIONS: Use only the following behaviors {'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_red': "Action: Change agent's color to red. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Find and approach target, change color to green, if obstacle is detected, change color to red to indicate blocking'.Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>is_target_detected</Condition> <Action>change_color_to_green</Action> </Sequence> <Sequence> <Condition>is_obstacle_detected</Condition> <Action>change_color_to_red</Action> <Action>avoid_obstacle</Action> </Sequence> </Selector> <Selector> <Sequence> <Condition>is_target_reached</Condition> <Action>task_completed</Action> </Sequence> <Action>wander</Action> </Selector> </Sequence> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'detect_target': 'Condition: Check if target is within range. Returns True if the target is within range, False otherwise.', 'find_target': 'Action: Search for and locate the target. Always returns True.', 'identify_target_color': 'Action: Identify the color of the target. Always returns True.', 'move_towards_target': 'Action: Move towards the target. Always returns True.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'If target is within range, identify its color. If target is not present, search for it. Move towards target to complete task.'Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>detect_target</Condition> <Action>identify_target_color</Action> </Sequence> <Sequence> <Condition>find_target</Condition> <Action>move_towards_target</Action> </Sequence> <Selector> <Sequence> <Condition>move_towards_target</Condition> <Action>task_completed</Action> </Sequence> <Action>wander</Action> </Selector> </Selector> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'detect_obstacle': 'Condition: Check if obstacle is within range. Returns True if an obstacle is within range, False otherwise.', 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'identify_obstacle_type': 'Action: Identify and classify the type of obstacle. Always returns True.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Identify type of obstacle, form a line, and avoid obstacles while completing task'.Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>detect_obstacle</Condition> <Action>identify_obstacle_type</Action> </Sequence> <Action>form_line</Action> </Selector> <Sequence> <Condition>is_line_formed</Condition> <Selector> <Action>form_line</Action> <Action>avoid_obstacle</Action> </Selector> <Action>task_completed</Action> </Sequence> </BehaviorTree>	
###
4.// INSTRUCTIONS: Use only the following behaviors {'move_forward': 'Action: Move one step forward. Always returns True.', 'move_backward': 'Action: Move one step backward. Always returns True.', 'calculate_distance': 'Action: Calculate the distance between current position and target location. Returns True if distance < 10, False otherwise.', 'is_target_reached': 'Condition: Check if target is reached. Returns True if distance < 3, False otherwise.', 'detect_object': 'Action: Detect an object within 5 units. Returns True if object is detected, False otherwise.', 'pick_up_object': 'Action: Pick up the detected object. Returns True if object is successfully picked up, False otherwise.', 'drop_object': 'Action: Drop the currently held object. Returns True if object is successfully dropped, False otherwise.', 'is_obstacle_ahead': 'Condition: Check if there is an obstacle blocking the path ahead. Returns True if an obstacle is detected, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'move forward, detect object, pick up object, move backward, and drop object.'Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Action>move_forward</Action> <Condition>is_obstacle_ahead</Condition> <Selector> <Sequence> <Condition>detect_object</Condition> <Action>pick_up_object</Action> <Action>move_backward</Action> </Sequence> <Action>drop_object</Action> </Selector> </Sequence> </Selector> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'scan_surroundings': 'Action: Scan the surroundings for any obstacles. Always returns True.', 'avoid_obstacle': 'Action: Move around the detected obstacle. Returns True if the obstacle is successfully avoided, False otherwise.', 'go_to_target': 'Action: Move towards the designated target location. Always returns True.', 'identify_target_object': 'Action: Identify the target object and its location. Returns True if the object is identified, False otherwise.', 'check_battery_level': 'Action: Check the current battery level. Returns True if the battery level is above 30%, False otherwise.', 'return_to_base': 'Action: Return to base and recharge. Always returns True.', 'is_obstacle_detected': 'Condition: Check if an obstacle is detected in the current location. Returns True if an obstacle is detected, False otherwise.', 'is_target_reached': 'Condition: Check if the target location is reached. Returns True if the current location is within 5 units of distance to the target location, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'scan surroundings, avoid obstacle, identify and go to target, check battery level, and return to base if battery level is low.'Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Action>scan_surroundings</Action> <Condition>is_obstacle_detected</Condition> <Sequence> <Condition>check_battery_level</Condition> <Action>return_to_base</Action> </Sequence> </Sequence> <Selector> <Sequence> <Condition>identify_target_object</Condition> <Selector> <Action>go_to_target</Action> <Selector> <Condition>is_obstacle_detected</Condition> <Action>avoid_obstacle</Action> </Selector> </Selector> </Sequence> </Selector> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'random_movement': 'Action: Move randomly. Always returns True.', 'detect_obstacle': 'Action: Detect obstacles within 10 units. Returns True if an obstacle is detected, False otherwise.', 'avoid_obstacle': 'Action: Move around the detected obstacle. Returns True if the obstacle is successfully avoided, False otherwise.', 'return_home': 'Action: Return to home base. Always returns True.', 'is_target_detected': 'Condition: Check if the target is within 5 units. Returns True if the target is detected, False otherwise.', 'reach_target': 'Action: Move towards the target location. Returns True if the target is reached, False otherwise.', 'pick_up_object': 'Action: Pick up the detected object. Returns True if the object is successfully picked up, False otherwise.', 'drop_object': 'Action: Drop the currently held object. Returns True if the object is successfully dropped, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'detect obstacle, pick up object, avoid obstacle, move randomly, drop object, and return home.'Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>detect_obstacle</Condition> <Selector> <Sequence> <Action>pick_up_object</Action> <Condition>is_target_detected</Condition> <Action>drop_object</Action> </Sequence> <Action>avoid_obstacle</Action> </Selector> </Sequence> <Sequence> <Condition>is_target_detected</Condition> <Action>reach_target</Action> </Sequence> <Action>random_movement</Action> <Action>return_home</Action> </Selector> </BehaviorTree> 
###
4.// INSTRUCTIONS: Use only the following behaviors {'detect_intruder': 'Action: Scan the environment for any potential intruders and report back to the group.', 'surround_intruder': 'Action: Surround and block the intruder from moving.', 'signal_warning': 'Action: Emit a warning signal to alert other robots of the intruder's presence.', 'move_to_nest': 'Action: Navigate towards the nest.', 'check_distance_to_nest': 'Condition: Check the distance to the nest. Returns True if within a certain range, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Generate a behavior tree for a swarm of robots to collectively defend their nest from an intruder.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>detect_intruder</Condition><Selector><Sequence><Condition>is_intruder_detected</Condition><Action>surround_intruder</Action></Sequence><Action>signal_warning</Action></Selector></Sequence><Sequence><Condition>check_distance_to_nest</Condition><Action>move_to_nest</Action></Sequence></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'collect_food': 'Action: Collect food resources from the environment.', 'drop_food': 'Action: Drop collected food resources at the designated storage area.', 'find_feeding_area': 'Action: Search for and navigate towards the nearest feeding area.', 'check_food_level': 'Condition: Check the current food level. Returns True if it falls below a certain threshold, False otherwise.', 'is_at_storage_area': 'Condition: Check if the robot has arrived at the designated storage area.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Generate a behavior tree for a swarm of robots to cooperatively gather and store food resources.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>check_food_level</Condition><Selector><Sequence><Condition>is_at_storage_area</Condition><Action>drop_food</Action></Sequence><Action>find_feeding_area</Action></Selector></Sequence><Sequence><Condition>is_food_available</Condition><Action>collect_food</Action></Sequence></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'explore': 'Action: Explore different areas of the environment to gather information.', 'map_area': 'Action: Map and record the surroundings for future reference.', 'scan_target': 'Action: Scan and identify potential targets within the vicinity.', 'report_target': 'Action: Report back to the group about the identified target.', 'move_to_target': 'Action: Move towards the designated target.', 'check_target_reached': 'Condition: Check if the robot has reached the designated target.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Generate a behavior tree for a swarm of robots to cooperatively explore and locate a desired target.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>scan_target</Condition><Sequence><Condition>check_distance_to_target</Condition><Selector><Sequence><Action>report_target</Action><Action>explore</Action></Sequence><Action>move_to_target</Action></Selector></Sequence></Sequence><Sequence><Condition>check_target_reached</Condition><Action>map_area</Action></Sequence></Selector></BehaviorTree> 
###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_circle': 'Action: Form a circle with a radius of 5 units at the current location. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_circle_formed': 'Condition: Check if a circle with radius 5 units is formed. Returns True if the circle is formed within 1 unit of error, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Form a circle and change color to green.'Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Action>agent_movement_freeze</Action> <Action>change_color_to_green</Action> <Action>task_completed</Action> </Sequence> <Action>form_circle</Action> </Selector> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'drop_object': "Action: Drop the object being carried. Always returns True.", 'move_to_target': "Action: Move towards the given target coordinates. Returns True once the agent is within 1 unit distance of the target.", 'pick_up_object': 'Action: Pick up the object at current location. Returns True once the object is picked up.', 'is_carried_object_equal_to_target': 'Condition: Check if the carried object is equal to the specified target. Returns True if the carried object matches the target object, False otherwise.', 'is_object_in_agent_view': 'Condition: Check if the specified object is within the agent's field of view. Returns True if the object is within view, False otherwise.', 'is_object_picked_up': 'Condition: Checks if the specified object has been picked up. Returns True if the object has been picked up, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Pick up the red object, move to target coordinates (10,5), drop object and change color to green.'Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree> <Sequence> <Action>agent_movement_freeze</Action> <Action>change_color_to_green</Action> <Action>task_completed</Action> </Sequence> <Selector> <Action>drop_object</Action> <Sequence> <Condition>is_object_in_agent_view (object: red)</Condition> <Action>pick_up_object (object: red)</Action> </Sequence> </Selector> <Sequence> <Condition>is_carried_object_equal_to_target (object: red)</Condition> <Sequence> <Condition>move_to_target (coordinates: (10,5))</Condition> <Action>move_to_target (coordinates: (10,5))</Action> <Action>task_completed</Action> </Sequence> </Sequence> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_agent_detected': 'Condition: Check if another agent is detected within 10 units. Returns True if an agent is detected, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'join_line': 'Action: Join an existing vertical line within 5 units. Returns True once the agent is aligned in the line.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Join a vertical line within 5 units and change color to green.'Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Condition>is_line_formed</Condition> <Action>change_color_to_green</Action> <Action>agent_movement_freeze</Action> <Action>task_completed</Action> </Selector> <Action>join_line</Action> </Sequence> </BehaviorTree> 
###
4.// INSTRUCTIONS: Use only the following behaviors {'detect_food_source': 'Action: Use sensors to detect nearby food sources.', 'move_towards_food': 'Action: Move towards the detected food source.', 'pick_up_food': 'Action: Use robotic arm to pick up the food item.', 'drop_food': 'Action: Use robotic arm to drop the food item at a specified location.', 'check_nest_location': 'Action: Check the location of the nest relative to the robot.', 'move_to_nest': 'Action: Move towards the nest.', 'is_food_detected': 'Condition: Check if there is food within detection range.', 'is_food_picked_up': 'Condition: Check if the food item has been picked up by the robotic arm.', 'is_nest_reached': 'Condition: Check if the robot has reached the designated nest location.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Generate a behavior tree for a swarm of robots to forage for food and bring it back to the nest, while avoiding obstacles and other robots.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_nest_reached</Condition><Sequence><Condition>is_food_picked_up</Condition><Action>drop_food</Action></Sequence><Action>check_nest_location</Action><Action>move_to_nest</Action></Sequence><Sequence><Condition>is_food_detected</Condition><Sequence><Condition>is_obstacle_detected</Condition><Action>move_around_obstacle</Action></Sequence><Action>move_towards_food</Action><Action>pick_up_food</Action></Sequence></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'scan_area': 'Action: Use sensors to scan the surrounding area and collect information about the environment.', 'move_to_next_position': 'Action: Move to the next specified position to perform the task.', 'disinfect_surface': 'Action: Use cleaning mechanism to disinfect the surface at the current location.', 'collect_sample': 'Action: Use robotic arm to collect a sample from the surface.', 'analyze_sample': 'Action: Use onboard analyzer to analyze the collected sample.', 'is_surface_contaminated': 'Condition: Check if the surface at the current location is contaminated and in need of cleaning.', 'is_area_scanned': 'Condition: Check if the entire area has been scanned and all information has been collected.', 'is_sample_collected': 'Condition: Check if a sample has been collected for analysis.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Generate a behavior tree for a swarm of robots to scan and disinfect a contaminated area, while collecting and analyzing samples.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_area_scanned</Condition><Action>move_to_next_position</Action><Action>scan_area</Action></Sequence><Sequence><Condition>is_surface_contaminated</Condition><Action>disinfect_surface</Action></Sequence><Sequence><Condition>is_sample_collected</Condition><Action>move_to_next_position</Action><Action>collect_sample</Action><Action>analyze_sample</Action></Sequence></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'identify_target': 'Action: Use onboard camera and sensors to identify the target object.', 'position_robot': 'Action: Move the robot to a specific position or location as instructed.', 'grab_target': 'Action: Use robotic arm to grab onto the target object.', 'release_target': 'Action: Release the target object at a specified location.', 'navigate_to_target': 'Action: Use path-planning algorithms to navigate to the target object.', 'is_target_in_view': 'Condition: Check if the target object is currently within the robot's field of view.', 'is_target_grabbed': 'Condition: Check if the target object has been successfully grabbed by the robotic arm.', 'is_target_reached': 'Condition: Check if the robot has reached the designated target location.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Generate a behavior tree for a swarm of robots to locate and grab a target object, while navigating through a complex environment.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_target_reached</Condition><Sequence><Condition>is_target_grabbed</Condition><Action>release_target</Action></Sequence><Action>position_robot</Action><Action>grab_target</Action></Sequence><Sequence><Condition>is_target_in_view</Condition><Action>navigate_to_target</Action><Action>identify_target</Action></Sequence></Selector></BehaviorTree>The behaviors do not include any actions related to finding or turning towards a specific target or direction. Please provide a different command. 

###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_direction': 'Action: Change agent's facing direction to the opposite. Always returns True.', 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'form_square': 'Action: Form a square using other agents. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_square_formed': 'Condition: Check if a square is formed. Returns True if a square is formed with other agents, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'form a line with 3 agents, then form a square with other 3 agents, and change direction.' Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Action>form_line</Action> <Sequence> <Condition>is_line_formed</Condition> <Action>form_square</Action> </Sequence> </Sequence> <Action>change_direction</Action> </Selector> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'move_to_target': 'Action: Move towards the target location. Always returns True.', 'no_target_found': 'Condition: Check if no target is found. Returns True if no target is detected, False otherwise.', 'no_path_available': 'Condition: Check if no path is available. Returns True if no path is available to reach the specified target, False otherwise.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'move to target location, change color to green, and return to nest.' Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Action>move_to_target</Action> <Sequence> <Condition>no_path_available</Condition> <Action>wander</Action> </Sequence> </Sequence> <Action>change_color_to_green</Action> </Selector> <Sequence> <Condition>is_agent_in_nest</Condition> <Action>change_color_to_white</Action> <Action>agent_movement_freeze</Action> </Sequence> </Sequence> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_circle': 'Action: Form a circle with other agents. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_circle_formed': 'Condition: Check if a circle is formed. Returns True if a circle is formed with other agents, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'form a circle with 5 agents and freeze movement once completed' Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree> <Sequence> <Action>form_circle</Action> <Sequence> <Condition>is_circle_formed</Condition> <Action>agent_movement_freeze</Action> </Sequence> </Sequence> </BehaviorTree> 
###
4.// INSTRUCTIONS: Use only the following behaviors {'change_speed_to_fast': 'Action: Change the speed of the robot to fast. Always returns True.', 'change_speed_to_slow': 'Action: Change the speed of the robot to slow. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_red': "Action: Change agent's color to red. Always returns True.", 'change_color_to_blue': "Action: Change agent's color to blue. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'is_agent_at_location': 'Condition: Check if the agent has reached a specific location. Returns True if the agent is at the given location, False otherwise.', 'is_color_changed': 'Condition: Check if the agent's color has been changed. Returns True if the color is changed, False otherwise.', 'wait_for_10_seconds': 'Action: Wait for 10 seconds before continuing. Always returns True.', 'wait_for_30_seconds': 'Action: Wait for 30 seconds before continuing. Always returns True.', 'wait_for_60_seconds': 'Action: Wait for 60 seconds before continuing. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Change the speed to fast, wait for 30 seconds, change the color to blue, and move to a specific location'. Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree><Selector><Condition>is_agent_at_location</Condition><Sequence><Action>change_speed_to_fast</Action><Sequence><Condition>is_color_changed</Condition><Action>change_color_to_blue</Action></Sequence><Action>wait_for_10_seconds</Action></Sequence></Selector><Action>change_speed_to_fast</Action><Action>wait_for_30_seconds</Action><Action>change_color_to_blue</Action><Sequence><Condition>is_color_changed</Condition><Action>change_speed_to_slow</Action></Sequence><Action>move_to_specific_location</Action></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_agent_on_conveyor_belt': 'Condition: Check if the agent is on the conveyor belt. Returns True if the agent is on the conveyor belt, False otherwise.', 'move_forward': 'Action: Move the agent forward. Always returns True.', 'move_backward': 'Action: Move the agent backward. Always returns True.', 'turn_left': 'Action: Turn the agent 90 degrees to the left. Always returns True.', 'turn_right': 'Action: Turn the agent 90 degrees to the right. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_red': "Action: Change agent's color to red. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.".}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Move forward until the agent reaches the end of the conveyor belt and change color to red'. Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree><Selector><Condition>is_agent_on_conveyor_belt</Condition><Sequence><Condition>is_agent_in_nest</Condition><Action>move_forward</Action><Action>change_color_to_red</Action></Selector><Action>turn_left</Action><Action>move_forward</Action></Sequence></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'is_agent_facing_obstacle': 'Condition: Check if the agent is facing an obstacle. Returns True if the agent is facing an obstacle, False otherwise.', 'is_agent_near_point': 'Condition: Check if the agent is within 5 units of a given point. Returns True if the agent is within 5 units of the point, False otherwise.', 'turn_left': 'Action: Turn the agent 90 degrees to the left. Always returns True.', 'turn_right': 'Action: Turn the agent 90 degrees to the right. Always returns True.', 'move_forward': 'Action: Move the agent forward. Always returns True.', 'stop_movement': 'Action: Stop the agent's movement. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_red': "Action: Change agent's color to red. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True."}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Navigate through a maze, avoiding obstacles and change color to green once reaching the end'. Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree><Sequence><Sequence><Condition>is_agent_near_point</Condition><Action>stop_movement</Action><Action>turn_left</Action><Action>stop_movement</Action><Action>turn_right</Action></Sequence><Action>change_color_to_red</Action><Selector><Sequence><Condition>is_agent_facing_obstacle</Condition><Action>stop_movement</Action><Action>turn_right</Action><Action>move_forward</Action></Sequence><Sequence><Condition>is_agent_in_nest</Condition><Action>change_color_to_green</Action><Action>stop_movement</Action></Sequence></Selector></Sequence></BehaviorTree>###
4.// INSTRUCTIONS: Use only the following behaviors {'move_up': 'Action: Move the robot up by one unit. Always returns True.', 'move_down': 'Action: Move the robot down by one unit. Always returns True.', 'move_left': 'Action: Move the robot left by one unit. Always returns True.', 'move_right': 'Action: Move the robot right by one unit. Always returns True.', 'continue_movement': 'Action: Continue the robot movement. Always returns True.', 'is_at_destination': 'Condition: Check if the robot has reached the designated destination. Returns True if at destination, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Move the robot in a clockwise square pattern taking 4 steps, starting from the bottom left corner. Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Action>move_down</Action> <Action>continue_movement</Action> <Sequence> <Condition>is_at_destination</Condition> <Sequence> <Action>move_right</Action> <Sequence> <Condition>is_at_destination</Condition> <Sequence> <Action>move_up</Action> <Sequence> <Condition>is_at_destination</Condition> <Action>move_left</Action> </Sequence> </Sequence> </Sequence> </Sequence> </Sequence> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'turn_left': 'Action: Turn the robot 90 degrees to the left. Always returns True.', 'turn_right': 'Action: Turn the robot 90 degrees to the right. Always returns True.', 'follow_wall': 'Action: Follow the wall on the right side. Always returns True.', 'is_wall_detected': 'Condition: Check if a wall is detected on the right side. Returns True if a wall is detected, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Avoid obstacles while following the right wall'. Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>is_wall_detected</Condition> <Action>turn_right</Action> <Action>follow_wall</Action> </Sequence> <Sequence> <Condition>is_wall_detected</Condition> <Action>turn_left</Action> <Action>follow_wall</Action> </Sequence> <Sequence> <Condition>is_wall_detected</Condition> <Action>turn_left</Action> <Action>avoid_obstacle</Action> </Sequence> <Action>wander</Action> </Selector> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'move_to_target': 'Action: Move towards the designated target. Always returns True.', 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'find target, form a line, and move to the target'. Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>is_target_detected</Condition> <Action>move_to_target</Action> <Sequence> <Condition>is_at_destination</Condition> <Action>form_line</Action> <Action>move_to_target</Action> </Sequence> </Sequence> <Action>wander</Action> </Selector> </BehaviorTree> 
###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Find the target and continue moving towards it until it is reached, then form a vertical line at the center.'Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_target_detected</Condition><Action>continue_movement_agent</Action></Sequence><Action>wander</Action></Selector><Sequence><Condition>is_target_reached</Condition><Sequence><Action>agent_movement_freeze</Action><Action>task_completed</Action></Sequence></Sequence><Action>form_line</Action></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'wait_for_target': 'Condition: Check if target is within 10 units. Returns True if the target is within 10 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Find the target and change color to green, then wait until the target is within 10 units and then change color to white.'Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>is_target_detected</Condition><Action>change_color_to_green</Action><Action>task_completed</Action></Sequence><Action>wander</Action></Selector><Sequence><Condition>wait_for_target</Condition><Sequence><Action>agent_movement_freeze</Action><Action>change_color_to_white</Action><Action>task_completed</Action></Sequence></Sequence></Sequence></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.','is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.','return_to_nest':'Sequence: Continuously check for obstacles and move towards nest until agent is in the nest.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Find the target and change color to green, then return to nest while avoiding obstacles and change color to white upon reaching the nest.'Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Selector><Sequence><Condition>is_target_detected</Condition><Action>change_color_to_green</Action><Action>task_completed</Action></Sequence><Action>wander</Action></Selector4.// INSTRUCTIONS: Use only the following behaviors {'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Follow the designated leader and rotate 45 degrees to the right when approaching a corner, then continue following the leader.'Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>is_target_detected</Condition> <Action>grab_target</Action> <Action>task_completed</Action> </Sequence> <Sequence> <Condition>is_agent_in_nest</Condition> <Action>change_color_to_green</Action> </Sequence> <Sequence> <Condition>is_obstacle_detected</Condition> <Action>avoid_obstacle</Action> </Sequence> <Sequence> <Condition>is_line_formed</Condition> <Action>form_line</Action> <Action>task_completed</Action> </Sequence> </Selector> <Selector> <Sequence> <Condition>is_path_clear</Condition> <Sequence> <Condition>is_target_detected</Condition> <Action>change_color_to_green</Action> <Action>agent_movement_freeze</Action> </Sequence> <Sequence> <Condition>is_line_formed</Condition> <Action>change_color_to_white</Action> </Sequence> </Sequence> </Selector> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'move_forward': 'Action: Move forward by one meter. Always returns True.', 'move_backwards': 'Action: Move backwards by one meter. Always returns True.', 'turn_left': 'Action: Turn the robot 90 degrees to the left. Always returns True.', 'turn_right': 'Action: Turn the robot 90 degrees to the right. Always returns True.', 'is_at_corner': 'Condition: Check if the robot is at a corner. Returns True if at a corner, False otherwise.', 'is_at_deadend': 'Condition: Check if the robot is at a dead end. Returns True if at a dead end, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Navigate through a maze and reach the designated target location, avoiding obstacles along the way.'Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree> <Sequence> <Condition>is_target_reached</Condition> <Action>task_completed</Action> </Sequence> <Sequence> <Condition>is_at_deadend</Condition> <Sequence> <Selector> <Sequence> <Condition>is_obstacle_detected</Condition> <Action>avoid_obstacle</Action> </Sequence> <Action>move_backwards</Action> </Selector> <Action>turn_left</Action> <Action>move_forward</Action> </Sequence> <Selector> <Selector> <Sequence> <Condition>is_obstacle_detected</Condition> <Action>avoid_obstacle</Action> </Sequence> <Action>move_forward</Action> </Selector> <Selector> <Condition>is_at_corner</Condition> <Sequence> <Condition>is_obstacle_detected</Condition> <Action>avoid_obstacle</Action> </Sequence> <Action>turn_right</Action> </Selector> </Selector> </Sequence> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'follow_target': 'Action: Follow the designated target. Always returns True.', 'move_backward': 'Action: Move backward by one meter. Always returns True.', 'turn_left': 'Action: Turn the robot 90 degrees to the left. Always returns True.', 'turn_right': 'Action: Turn the robot 90 degrees to the right. Always returns True.', 'is_at_corner': 'Condition: Check if the robot is at a corner. Returns True if at a corner, False otherwise.', 'is_at_deadend': 'Condition: Check if the robot is at a dead end. Returns True if at a dead end, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Follow the designated leader and avoid obstacles, while moving towards the target location.'Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree> <Sequence> <Condition>is_target_reached</Condition> <Action>task_completed</Action> </Sequence> <Selector> <Sequence> <Condition>is_obstacle_detected</Condition> <Selector> <Sequence> <Condition>is_at_deadend</Condition> <Selector> <Sequence> <Condition>is_obstacle_detected</Condition> <Action>avoid_ob 
###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'follow_path': 'Action: Follow the given path. Always returns True.', 'go_to_destination': 'Action: Go to the specified destination. Returns True if the destination is reached, False otherwise.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_destination_reached': 'Condition: Check if the specified destination is reached. Returns True if the destination is reached, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_reached': 'Condition: Check if target is within 10 units. Returns True if the target is within 10 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Go to the red gate, follow the path and stop 5 units before reaching the target'. Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>go_to_destination</Action><Action>follow_path</Action><Sequence><Action>wander</Action><Condition>is_destination_reached</Condition></Sequence><Action>task_completed</Action></Sequence><Action>wander</Action></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_blue': "Action: Change agent's color to blue. Always returns True.", 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_red': "Action: Change agent's color to red. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_circle': 'Action: Form a circle with a radius of 10 units. Returns True when the circle is formed, False otherwise.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_circle_formed': 'Condition: Check if a circle with a 10 unit radius is formed. Returns True if the circle is formed, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Form a blue circle around the target and change color to red when the circle is formed'. Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>form_circle</Action><Sequence><Condition>is_circle_formed</Condition><Action>change_color_to_red</Action></Sequence></Sequence><Action>wander</Action></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_red': "Action: Change agent's color to red. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'move_to_center': 'Action: Move to the center of the environment. Returns True when the agent reaches the center, False otherwise.', 'move_to_edge': 'Action: Move to the edge of the environment. Returns True when the agent reaches the edge, False otherwise.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_at_center': 'Condition: Check if the agent is at the center of the environment. Returns True if the agent is at the center, False otherwise.', 'is_at_edge': 'Condition: Check if the agent is at the edge of the environment. Returns True if the agent is at the edge, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Move to the center, change color to red, move to the edge, and change color to green when reaching the edge'. Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>move_to_center</Action><Action>change_color_to_red</Action>< 
###
4.// INSTRUCTIONS: Use only the following behaviors {'rotate_left': 'Action: Rotate the robot 90 degrees to the left.', 'rotate_right': 'Action: Rotate the robot 90 degrees to the right.', 'move_forward': 'Action: Move one step forward in the direction the robot is facing.', 'move_backward': 'Action: Move one step backward in the opposite direction the robot is facing.', 'is_obstacle_ahead': 'Condition: Check if there is an obstacle blocking the path ahead for the robot.', 'is_goal_reached': 'Condition: Check if the goal location has been reached.', 'is_robot_moving': 'Condition: Check if the robot is currently moving.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'navigate through the maze to reach the goal' Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_goal_reached</Condition><Action>task_completed</Action></Sequence><Selector><Sequence><Condition>is_obstacle_ahead</Condition><Selector><Sequence><Condition>is_robot_moving</Condition><Action>move_backward</Action></Sequence><Action>rotate_left</Action></Selector></Sequence><Selector><Sequence><Action>move_forward</Action><Action>rotate_right</Action></Sequence><Action>rotate_right</Action></Selector></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'move_forward': 'Action: Move one step forward while maintaining formation.', 'shift_left': 'Action: Shift the entire formation one step to the left.', 'shift_right': 'Action: Shift the entire formation one step to the right.', 'avoid_obstacle': 'Action: Avoid detected obstacles and shift formation to avoid collision.', 'form_line': 'Action: Form a horizontal line at the center of the formation.', 'stop_moving': 'Action: Stop all movement and stay in place.', 'is_formation_intact': 'Condition: Check if the formation is intact and all robots are in their proper positions.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_target_detected': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 10 units. Returns True if the target is within 10 units of distance, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Navigate through the maze while maintaining formation and avoiding obstacles, and reach the target' Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_target_reached</Condition><Action>stop_moving</Action><Action>task_completed</Action></Sequence><Selector><Sequence><Condition>is_obstacle_detected</Condition><Selector><Sequence><Condition>is_formation_intact</Condition><Action>shift_right</Action></Sequence><Action>stop_moving</Action></Selector></Sequence><Selector><Sequence><Action>move_forward</Action><Action>shift_left</Action></Sequence><Action>form_line</Action></Selector></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_circle': 'Action: Form a circular shape with the agents.', 'is_agent_in_circle': 'Condition: Check if all agents are in a circular shape. Returns True if all agents are positioned to form a circle, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Form a circle with the swarm robots while avoiding obstacles and changing color to green' Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_agent_in_circle</Condition><Action>change_color_to_green</Action><Action>agent_movement_freeze</Action><Action>task_completed</Action></Sequence><Selector><Sequence><Condition>is_obstacle_detected</Condition><Selector><Sequence><Action>change_color_to_white</Action><Action>continue_movement_agent</Action></Sequence><Action>avoid_obstacle</Action></Selector></Sequence><Action>form_circle</Action></Selector></BehaviorTree>
###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'explore': 'Action: Randomly explore the environment. Always returns True.', 'move_to_target': 'Action: Move towards the designated target. Returns True if target is reached, False otherwise.', 'search_target': 'Action: Use sensors to search for designated target. Returns True if target is detected, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wait': 'Action: Wait for a designated amount of time. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.'}to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Explore the environment for 5 minutes, then move to target and change color to green.'Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Action>wait</Action> <Condition>is_agent_in_nest</Condition> <Action>explore</Action> <Action>agent_movement_freeze</Action> </Sequence> <Sequence> <Condition>is_target_detected</Condition> <Action>move_to_target</Action> <Action>change_color_to_green</Action> <Action>task_completed</Action> </Sequence> </Selector> </Sequence> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_blue': "Action: Change agent's color to blue. Always returns True.", 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'enter_straight_line': 'Action: Move in a straight line for 10 meters. Returns True if distance is reached, False otherwise.', 'is_agent_at_edge': 'Condition: Check if the agent has reached the edge of the environment. Returns True if the agent is at the edge, False otherwise.', 'is_target_detected': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Move in a straight line for 10 meters and change color to blue, then avoid obstacles and return to the starting point, changing color to white.'Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Action>enter_straight_line</Action> <Action>change_color_to_blue</Action> <Condition>is_agent_at_edge</Condition> <Action>agent_movement_freeze</Action> </Sequence> <Sequence> <Condition>is_target_detected</Condition> <Action>avoid_obstacle</Action> <Action>continue_movement_agent</Action> <Action>change_color_to_white</Action> <Action>agent_movement_freeze</Action> </Sequence> </Selector> </Sequence> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'recharge': 'Action: Recharge energy levels. Returns True when energy levels are full, False otherwise.', 'follow_path': 'Action: Follow a designated path. Returns True if path is completed, False otherwise.', 'form_v_shape': 'Action: Form a V-shape with other swarm robots. Always returns True.', 'is_agent_at_target': 'Condition: Check if the agent has reached the designated target. Returns True if the target is reached, False otherwise.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Follow designated path, form V-shape when encountering other robots, recharge energy levels, and return to the starting point.'Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Action>follow_path</Action> <Action>form_v_shape</Action> <Condition>is_path_clear</Condition> <Action>recharge</Action> <Condition>is_agent_at_target</Condition> <Action>agent_movement_freeze</Action> </Sequence> <Sequence> <Condition>is_agent_in_nest</Condition> <Action>agent_movement_freeze</Action> </Sequence> </Selector> </Sequence> </BehaviorTree>
###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'move_towards_target': 'Action: Move towards the target object. Returns True once within 10 units of distance from the target.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Send a message to the other robots when obstacle is detected, move towards the target, and freeze movement.' Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>is_obstacle_detected</Condition> <Action>send_message_to_robots</Action> </Sequence> <Action>wander</Action> </Selector> <Sequence> <Condition>is_target_detected</Condition> <Action>move_towards_target</Action> <Condition>is_target_reached</Condition> <Action>task_completed</Action> </Sequence> </Sequence> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_blue': "Action: Change agent's color to blue. Returns True once color is changed.", 'change_color_to_green': "Action: Change agent's color to green. Returns True once color is changed.", 'change_color_to_red': "Action: Change agent's color to red. Returns True once color is changed.", 'get_current_location': 'Condition: Retrieve current location of the agent. Returns True once location is retrieved.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'scan_area_for_intruders': 'Action: Scan the area for any potential intruders. Returns True once the scan is completed.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Scan the area for any potential intruders and change color to red if an intruder is detected, then return to the nest, change color to blue, and freeze movement.' Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>scan_area_for_intruders</Condition> <Action>change_color_to_red</Action> </Sequence> <Action>wander</Action> </Selector> <Sequence> <Condition>is_agent_in_nest</Condition> <Action>change_color_to_blue</Action> <Action>agent_movement_freeze</Action> </Sequence> </Sequence> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'collect_resource': 'Action: Collect a resource if within reach. Returns True once resource is collected.', 'deposit_resource': 'Action: Deposit collected resource at designated location. Returns True once resource is deposited.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_resource_detected': 'Condition: Check if a resource is within a certain distance. Returns True if a resource is detected within 10 units of distance, False otherwise.', 'is_resource_collected': 'Condition: Check if a resource has been collected. Returns True if a resource has been collected, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Search for resources, collect them if within reach, and deposit them at the designated location.' Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>is_resource_detected</Condition> <Sequence> <Condition>is_resource_collected</Condition> <Action>deposit_resource</Action> <Action>agent_movement_freeze</Action> </Sequence> <Action>collect_resource</Action> </Sequence> <Action>wander</Action> </Selector> </BehaviorTree>
###
4.// INSTRUCTIONS: Use only the following behaviors {'search_area': 'Action: Search a designated area for a specific target.', 'approach_target': 'Action: Approach and get within close proximity of the target.', 'capture_target': 'Action: Capture or secure the target.', 'return_to_base': 'Action: Return to the base location while maintaining possession of the target.', 'is_target_detected': 'Condition: Check if the target is within the designated search area.', 'is_target_captured': 'Condition: Check if the target has been successfully captured or secured.', 'is_target_retrieved': 'Condition: Check if the target has been safely transported back to the base location.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Generate a behavior tree for a swarm of robots to search and retrieve a missing object in a large area.
4.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_target_detected</Condition><Action>approach_target</Action><Action>capture_target</Action></Sequence><Sequence><Condition>is_target_captured</Condition><Action>return_to_base</Action></Sequence><Sequence><Condition>is_target_retrieved</Condition><Action>task_completed</Action></Sequence><Action>search_area</Action></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'move_toward_energy_source': 'Action: Move towards the nearest energy source.', 'collect_energy': 'Action: Collect energy from the energy source.', 'deliver_energy': 'Action: Deliver the collected energy to the designated location.', 'is_energy_source_found': 'Condition: Check if an energy source has been discovered and is within close proximity.', 'is_energy_collected': 'Condition: Check if the required amount of energy has been collected.', 'is_energy_delivered': 'Condition: Check if the energy has been successfully delivered to the designated location.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Generate a behavior tree for a swarm of energy-harvesting robots to efficiently locate and collect energy from multiple sources.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_energy_source_found</Condition><Action>move_toward_energy_source</Action><Action>collect_energy</Action></Sequence><Sequence><Condition>is_energy_collected</Condition><Action>deliver_energy</Action></Sequence><Sequence><Condition>is_energy_delivered</Condition><Action>task_completed</Action></Sequence></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'explore_environment': 'Action: Explore and map the environment using sensors and movement.', 'mark_interesting_locations': 'Action: Mark and store interesting or important locations in the environment.', 'is_obstacle_detected': 'Condition: Check if an obstacle is detected in the current location.', 'is_ruin_detected': 'Condition: Check if a historical or cultural ruin has been discovered in the environment.', 'is_path_clear': 'Condition: Check if the current path is clear and safe to follow.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Generate a behavior tree for a swarm of exploration robots to map and document historical ruins in a dangerous environment.
6.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_obstacle_detected</Condition><Action>explore_environment</Action></Sequence><Selector><Sequence><Condition>is_ruin_detected</Condition><Action>mark_interesting_locations</Action></Sequence><Sequence><Condition>is_path_clear</Condition><Action>continue_exploring</Action></Sequence><Action>wander</Action></Selector></BehaviorTree>
###
4.// INSTRUCTIONS: Use only the following behaviors {'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'notify_team': "Action: Notify other agents of current status. Always returns True.", 'random_walk': 'Action: Move randomly within the environment. Always returns True.', 'recharge_battery': "Action: Stop all actions and return to nest to recharge battery. Always returns True."}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Notify team if path ahead is clear, if not, return to nest to recharge battery.'Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_path_clear</Condition><Action>notify_team</Action></Sequence><Sequence><Condition>is_path_clear</Condition><Action>recharge_battery</Action></Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.', 'circle_target': 'Action: Move in a circular pattern around the target. Returns True until the target is reached, then returns False.', 'form_line': 'Action: Form a vertical line at the center. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Move in a circular pattern around the target, then form a line.' Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree><Sequence><Action>circle_target</Action><Selector><Sequence><Condition>is_target_detected</Condition><Action>form_line</Action></Sequence><Sequence><Condition>task_completed</Condition></Sequence></Selector></Sequence></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'redirect_target': 'Action: Redirect the target towards a specific direction. Always returns True.', 'move_forward': 'Action: Move forward in the direction of the target. Returns True until the target is reached, then returns False.', 'move_backward': 'Action: Move backward in the opposite direction of the target. Returns True until the nest is reached, then returns False.', 'pick_up_target': 'Action: Pick up the target object if it is within reach. Returns True until the target is picked up, then returns False.', 'drop_target': 'Action: Drop the target object at the designated drop-off location. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Redirect target towards the nest, pick it up and drop it at the designated location.'Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree><Sequence><Action>redirect_target</Action><IfSUCCESS><Sequence><Action>move_forward</Action><Selector><Sequence><Condition>is_target_detected</Condition><Sequence><Condition>is_agent_in_nest</Condition><Action>pick_up_target</Action></Sequence></Sequence></Selector></Sequence></IfSUCCESS><Selector><Sequence><Condition>is_agent_in_nest</Condition><Action>drop_target</Action></Sequence><Action>move_backward</Action></Selector></Sequence></BehaviorTree>    
###
4.// INSTRUCTIONS: Use only the following behaviors {'move_forward': 'Action: Move one step forward while avoiding collisions with other agents.', 'rotate_left': 'Action: Rotate the agent's position 90 degrees to the left.', 'rotate_right': 'Action: Rotate the agent's position 90 degrees to the right.', 'store_item': 'Action: Store the item in the designated storage area.', 'is_item_present': 'Condition: Check if an item is present within the agent's designated area to store items.', 'is_obstacle_ahead': 'Condition: Check if there is an obstacle blocking the path ahead.', 'is_item_stored': 'Condition: Check if the item has been successfully stored in the designated area.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Generate a behavior tree for a robot to collect and store items in a designated area while avoiding obstacles and collisions with other agents.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_item_present</Condition><Select><Sequence><Condition>is_obstacle_ahead</Condition><Select><Sequence><Condition>is_colliding_with_other_agents</Condition><Selector><Sequence><Condition>is_obstacle_ahead</Condition><Action>rotate_right</Action></Sequence><Action>rotate_left</Action></Selector></Sequence><Action>move_forward</Action></Select></Sequence><Action>store_item</Action></Select></Sequence><Selector><Condition>is_item_stored</Condition><Action>task_completed</Action></Selector></BehaviorTree>
    
###
5.// INSTRUCTIONS: Use only the following behaviors {'move_forward': 'Action: Move one step forward while maintaining distance from other agents.', 'rotate_left': 'Action: Rotate the agent's position 90 degrees to the left.', 'rotate_right': 'Action: Rotate the agent's position 90 degrees to the right.', 'release_object': 'Action: Release the item the agent is carrying.', 'is_item_picked_up': 'Condition: Check if the agent has successfully picked up the designated item.', 'is_item_released': 'Condition: Check if the agent has released the item successfully.', 'is_agent_nearby': 'Condition: Check if another agent is within a certain distance to maintain formation.', 'is_capture_point_reached': 'Condition: Check if the agent has reached the designated capture point.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Generate a behavior tree for a swarm of agents to collect a designated item, maintain formation, and reach a capture point while avoiding obstacles and collisions with other agents.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_item_picked_up</Condition><Selector><Sequence><Condition>is_agent_nearby</Condition><Sequence><Action>rotate_right</Action><Action>rotate_left</Action></Sequence></Sequence><Action>move_forward</Action></Selector></Sequence><Sequence><Condition>is_capture_point_reached</Condition><Action>release_object</Action></Sequence></Selector></BehaviorTree>
    
###
6.// INSTRUCTIONS: Use only the following behaviors {'move_forward': 'Action: Move one step forward while avoiding collisions with other agents.', 'rotate_left': 'Action: Rotate the agent's position 90 degrees to the left.', 'rotate_right': 'Action: Rotate the agent's position 90 degrees to the right.', 'is_agent_nearby': 'Condition: Check if another agent is within a certain distance to maintain formation.', 'is_area_clear': 'Condition: Check if the designated area is clear of obstacles.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'random_walk': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Generate a behavior tree for a swarm of agents to explore and navigate through an unknown environment while maintaining formation and avoiding obstacles and collisions with other agents.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_area_clear</Condition><Sequence><Condition>is_agent_nearby</Condition><Sequence><Action>rotate_right</Action><Action>rotate_left</Action></Sequence></Sequence><Action>move_forward</Action></Selector></Sequence><Sequence><Condition>is_obstacle_ahead</Condition><Action>move_randomly</Action></Sequence></Selector></BehaviorTree> 
###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Generate behavior tree for a swarm of robots to avoid obstacles and reach a target while maintaining formation.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_obstacle_detected</Condition><Action>avoid_obstacle</Action></Sequence><Sequence><Condition>is_target_detected</Condition><Selector><Sequence><Action>form_line</Action><Selector><Sequence><Condition>is_line_formed</Condition><Sequence><Condition>is_path_clear</Condition><Action>continue_movement_agent</Action></Sequence></Selector></Sequence><Sequence><Condition>is_target_reached</Condition><Action>change_color_to_green</Action></Sequence></Selector></Sequence></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Generate behavior tree for a swarm of robots to search for and rescue a lost agent while avoiding obstacles.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_obstacle_detected</Condition><Action>avoid_obstacle</Action></Sequence><Sequence><Condition>is_agent_in_nest</Condition><Selector><Sequence><Condition>is_target_detected</Condition><Sequence><Action>form_line</Action><Selector><Sequence><Condition>is_line_formed</Condition><Sequence><Condition>is_path_clear</Condition><Action>continue_movement_agent</Action></Sequence></Selector></Sequence><Sequence><Condition>is_target_reached</Condition><Action>change_color_to_green</Action></Sequence></Selector></Sequence><Selector><Sequence><Condition>is_target_detected</Condition><Sequence><Action>form_line</Action><Selector><Sequence><Condition>is_line_formed</Condition><Sequence><Condition>is_path_clear</Condition><Action>continue_movement_agent</Action></Sequence></Selector></Sequence><Sequence><Condition>is_target_reached</Condition><Action>change_color_to_green</Action></Sequence></Selector></Sequence></Selector></Sequence></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to
###
4.// INSTRUCTIONS: Use only the following behaviors {'start_engine': 'Action: Turn on the engine and start moving forward.', 'stop_engine': 'Action: Turn off the engine and come to a stop.', 'change_direction': 'Action: Change direction to the right while maintaining the same speed.', 'increase_speed': 'Action: Increase the speed by one unit while maintaining the same direction.', 'decrease_speed': 'Action: Decrease the speed by one unit while maintaining the same direction.', 'check_fuel_level': 'Condition: Check the current level of fuel. Returns True if the level is above 20%, False otherwise.', 'check_engine_status': 'Condition: Check the status of the engine. Returns True if the engine is running, False otherwise.', 'check_speed_limit': 'Condition: Check if the speed is at or below the specified limit. Returns True if the speed is within the limit, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Follow a set speed limit, but increase speed if fuel level is above 20%' Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>check_fuel_level</Condition> <Selector> <Sequence> <Condition>check_speed_limit</Condition> <Action>increase_speed</Action> </Sequence> <Action>change_direction</Action> </Selector> <Sequence> <Condition>check_engine_status</Condition> <Action>start_engine</Action> </Sequence> </Selector> <Sequence> <Condition>check_speed_limit</Condition> <Action>increase_speed</Action> </Sequence> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'detect_enemy': 'Condition: Check for any nearby enemy units. Returns True if an enemy is detected, False otherwise.', 'detect_allies': 'Condition: Check for any nearby ally units. Returns True if an ally is detected, False otherwise.', 'engage_enemy': 'Action: Move towards the nearest enemy unit to engage in combat.', 'heal_ally': 'Action: Move towards the nearest injured ally unit and provide healing support.', 'take_cover': 'Action: Move to the nearest available cover to avoid enemy fire.', 'retreat': 'Action: Move away from the enemy towards the nearest escape route.', 'attack': 'Action: Use equipped weapons to attack the nearest enemy unit with the highest priority target.', 'change_weapon': 'Action: Switch to a different weapon if the current one is out of ammunition.', 'reload_weapon': 'Action: Reload the currently equipped weapon if it has run out of ammunition.', 'check_health': 'Condition: Check current health level. Returns True if the health level is above 50%, False otherwise.', 'check_ammo': 'Condition: Check current ammunition level. Returns True if the ammunition level is above 50%, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Execute a tactical battle strategy by engaging enemies, providing support to allies, and utilizing cover and weapons effectively.' Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>check_ammo</Condition><Action>reload_weapon</Action></Sequence><Sequence><Condition>detect_enemy</Condition><Selector><Sequence><Condition>check_health</Condition><Action>take_cover</Action></Sequence><Action>change_weapon</Action><Action>attack</Action></Selector></Sequence><Sequence><Condition>detect_allies</Condition><Action>heal_ally</Action></Sequence><Selector><Sequence><Condition>detect_enemy</Condition><Action>take_cover</Action><Action>change_weapon</Action><Action>attack</Action></Sequence><Sequence><Condition>detect_enemy</Condition><Action>engage_enemy</Action></Sequence></Selector><Sequence><Condition>detect_enemy</Condition><Action>retreat</Action></Sequence></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'is_target_reachable': 'Condition: Check if the target location is reachable. Returns True if the target is within the navigation range, False otherwise.', 'navigate_to_target': 'Action: Move towards the target location using the optimal path.', 'teleport_to_target': 'Action: Teleport to the target location if it is within range of a teleporter.', 'scan_surroundings': 'Action: Scan the surroundings for any potential hazards or obstacles.', 'avoid_hazards': 'Action: Avoid any detected hazards or obstacles by changing direction.', 'detect_teleporters': 'Condition: Check for nearby teleporters. Returns True if a teleporter is detected, False otherwise.', 'is_path_safe': 'Condition: Check if the current path is safe to traverse. Returns True if no hazards or obstacles are detected along the path, False otherwise.', 'check_energy': 'Condition: Check current energy level. Returns True if the energy level is above 50%, False otherwise.', 'recharge': 'Action: Recharge at the nearest available charging station until energy level is full.', 'use_ability': 'Action: Use a special ability to aid in reaching the target location.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Reach a specific target location while avoiding hazards and obstacles, and using special abilities and resources as needed.' Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>check_energy</Condition><Action>recharge</Action></Sequence><Sequence><Condition>detect_teleporters</Condition><Selector><Sequence><Condition>is_target_reachable</Condition><Action>teleport_to_target</Action></Sequence><Action>scan_surroundings</Action><Action>avoid_hazards</Action></Selector></Sequence><Sequence><Condition>is_path_safe</Condition><Action>use_ability</Action></Sequence><Action>navigate_to_target</Action></Selector></BehaviorTree>
###
4.// INSTRUCTIONS: Use only the following behaviors {'shift_left': 'Action: Shift the entire formation one step to the left.', 'shift_right': 'Action: Shift the entire formation one step to the right.', 'lift_object': 'Action: Lift and grab onto the transportable object.', 'release_object': 'Action: Release and put down the transportable object.', 'is_obstacle_ahead': 'Condition: Check if there is an obstacle blocking the path ahead for the formation.', 'is_object_lifted': 'Condition: Check if the transportable object is currently being lifted and carried.', 'is_formation_broken': 'Condition: Check if the formation has become misaligned or broken.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Generate a behavior tree to efficiently navigate a maze with multiple paths and obstacles, using the swarm robots' ability to lift and transport objects.
4.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>is_object_lifted</Condition><Selector><Sequence><Condition>is_obstacle_ahead</Condition><Action>shift_right</Action></Sequence><Action>shift_left</Action></Selector></Sequence><Sequence><Condition>is_formation_broken</Condition><Action>reform_formation</Action></Sequence></Selector><Selector><Sequence><Condition>is_obstacle_detected</Condition><Action>lift_object</Action></Sequence><Sequence><Condition>is_path_clear</Condition><Action>continue_movement_agent</Action></Sequence></Selector></Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'fly_to_target': 'Action: Fly towards the designated target while avoiding obstacles.', 'hover': 'Action: Hover in place while keeping a safe distance from any obstacles.', 'scan_surroundings': 'Condition: Check surroundings for any obstacles within range. Returns True if any obstacles are detected, False otherwise.', 'is_target_reached': 'Condition: Check if the target has been reached. Returns True if the target has been reached, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Generate a behavior tree for a swarm of drones to navigate through a series of obstacles and reach a designated target.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_target_reached</Condition><Action>hover</Action></Sequence><Sequence><Condition>scan_surroundings</Condition><Action>fly_to_target</Action></Sequence></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'collect_resources': 'Action: Collect resources from designated location.', 'drop_resources': 'Action: Drop off collected resources at a specified location.', 'return_to_base': 'Action: Return to base while carrying resources.', 'is_resource_available': 'Condition: Check if resources are available at the designated location. Returns True if resources are available, False otherwise.', 'is_base_reached': 'Condition: Check if the base has been reached. Returns True if the base has been reached, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Generate a behavior tree for a swarm of robots to efficiently collect and transport resources from a designated location to the base.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_resource_available</Condition><Action>collect_resources</Action><Action>drop_resources</Action></Sequence><Sequence><Condition>is_base_reached</Condition><Action>return_to_base</Action></Sequence></Selector></BehaviorTree> 
###
4.// INSTRUCTIONS: Use only the following behaviors {'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_red': "Action: Change agent's color to red. Always returns True.", 'change_speed_to_2': 'Action: Change speed to 2 units. Always returns True.', 'change_speed_to_5': 'Action: Change speed to 5 units. Always returns True.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'movement_stopped': 'Condition: Check if movement has been stopped. Returns True if movement is stopped, False otherwise.', 'proceed_forward': 'Action: Move forward. Always returns True.', 'proceed_backward': 'Action: Move backward. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Avoid obstacles while moving forward, if obstacle is detected stop and move backwards, then change speed to 2 units and continue moving forward'. Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>is_obstacle_detected</Condition> <Action>movement_stopped</Action> <Action>proceed_backward</Action> </Sequence> <Sequence> <Action>proceed_forward</Action> <Selector> <Sequence> <Condition>is_target_detected</Condition> <Selector> <Action>change_speed_to_2</Action> <Action>proceed_forward</Action> </Selector> <Action>change_speed_to_5</Action> </Selector> </Sequence> </Selector> </Sequence> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'circle_target': 'Action: Circle around the target. Returns True if the target is within 5 units of distance, False otherwise.', 'detect_target': 'Action: Detect the target in the environment. Returns True if the target is found, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'is_target_lost': 'Condition: Check if the target has been lost. Returns True if the target is no longer detected, False otherwise.', 'move_to_target': 'Action: Move towards the target. Always returns True.', 'search_target': 'Action: Search for target in the environment. Always returns True.', 'stop_movement': 'Action: Stop agent's movement. Always returns True.', 'wait': 'Action: Do nothing for 30 seconds. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Search for target, if target is detected stop movement, circle around the target until it is reached'. Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Action>search_target</Action> <Selector> <Sequence> <Condition>is_target_detected</Condition> <Selector> <Action>stop_movement</Action> <Action>circle_target</Action> </Selector> <Action>move_to_target</Action> </Selector> </Sequence> <Action>wander</Action> </Selector> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_direction_to_left': 'Action: Change direction to left. Always returns True.', 'change_direction_to_right': 'Action: Change direction to right. Always returns True.', 'detect_obstacles': 'Action: Detect obstacles in the environment. Returns True if obstacles are detected, False otherwise.', 'move_forward': 'Action: Move forward. Always returns True.', 'move_backward': 'Action: Move backward. Always returns True.', 'stop_movement': 'Action: Stop agent's movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Avoid obstacles in front, change color to green and move forward, if obstacle is detected change direction to the right and continue moving'. Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree> <Selector> <Selector> <Sequence> <Condition>detect_obstacles</Condition> <Selector> <Action>avoid_obstacle</Action> <Action>change_color_to_green</Action> </Selector> <Selector> <Condition>detect_obstacles</Condition> <Action>change_direction_to_right</Action> <Action>wander</Action> </Selector> </Sequence> <Sequence> <Action>move_forward</Action> <Action>wander</Action> </Sequence> </Selector> </BehaviorTree> 
###
4.// INSTRUCTIONS: Use only the following behaviors {'navigate_to_waypoint': 'Action: Move towards the designated waypoint location.', 'detect_enemy': 'Condition: Scan the environment for nearby enemy robots, returns True if an enemy is detected, False otherwise.', 'shoot': 'Action: Fire at a detected enemy robot.', 'change_color_to_blue': 'Action: Change the agent's color to blue. Always returns True.', 'is_at_waypoint': 'Condition: Check if the agent has reached the designated waypoint location, returns True if at the waypoint, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby, returns True if an obstacle is detected, False otherwise.', 'is_weapon_ready': 'Condition: Check if the agent's weapon is ready to fire, returns True if ready, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Generate a behavior tree for a swarm of robots to navigate to a waypoint, detect and engage any enemy robots, and change color to blue upon successfully reaching the waypoint.
4.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_obstacle_detected</Condition><Action>avoid_obstacle</Action><Sequence><Action>navigate_to_waypoint</Action><Condition>is_weapon_ready</Condition><Action>shoot</Action></Sequence><Selector><Condition>is_enemy_detected</Condition><Action>shoot</Action></Selector><Action>change_color_to_blue</Action></Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'explore_new_area': 'Action: Move in a random direction to explore new areas.', 'return_to_base': 'Action: Safely return to the main base.', 'is_in_danger': 'Condition: Check if the agent is in danger, returns True if in danger, False otherwise.', 'is_area_unexplored': 'Condition: Check if the current area has not been explored yet, returns True if unexplored, False otherwise.', 'is_at_base': 'Condition: Check if the agent is currently at the main base, returns True if at the base, False otherwise.', 'is_resource_detected': 'Condition: Scan the environment for nearby resources, returns True if a resource is detected, False otherwise.', 'collect_resource': 'Action: Collect and store the resource.', 'use_resource': 'Action: Use the stored resource for a specific task.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Generate a behavior tree for a swarm of robots to explore a new area, collect resources, and use them to complete a task, while ensuring safety and returning to base when necessary.
5.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_in_danger</Condition><Action>return_to_base</Action><Selector><Sequence><Condition>is_resource_detected</Condition><Action>collect_resource</Action><Selector><Condition>is_in_danger</Condition><Action>use_resource</Action></Selector></Sequence><Action>explore_new_area</Action></Selector></Sequence></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'move_to_idol_one': 'Action: Move towards and interact with the first designated idol.', 'move_to_idol_two': 'Action: Move towards and interact with the second designated idol.', 'is_idol_one_reached': 'Condition: Check if the first designated idol has been reached, returns True if reached, False otherwise.', 'is_idol_two_reached': 'Condition: Check if the second designated idol has been reached, returns True if reached, False otherwise.', 'pick_up_object': 'Action: Pick up and carry a nearby object.', 'drop_object': 'Action: Drop the carried object at a specified location, always returns True.', 'is_object_detected': 'Condition: Scan the environment for a nearby object, returns True if an object is detected, False otherwise.', 'is_at_dropoff': 'Condition: Check if the agent is at the designated drop-off location, returns True if at the location, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Generate a behavior tree for a swarm of robots to navigate to and interact with two designated idols, pick up and drop off objects, and return to a specific location.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_object_detected</Condition><Sequence><Action>pick_up_object</Action><Condition>is_at_dropoff</Condition><Action>drop_object</Action></Sequence></Sequence><Sequence><Condition>is_idol_one_reached</Condition><Sequence><Action>move_to_idol_one</Action><Sequence><Condition>is_object_detected</Condition><Sequence><Action>pick_up_object</Action><Condition>is_at_dropoff</Condition><Action>drop_object</Action></Sequence></Sequence></Sequence><Sequence><Condition>is_idol_two_reached</Condition><Sequence><Action>move_to_idol_two</Action><Sequence><Condition>is_object_detected</Condition><Sequence><Action>pick_up_object</Action><Condition>is_at_dropoff</Condition><Action>drop_object</Action></Sequence></Sequence></Sequence><Selector><Condition>is_object_detected</Condition><Action>explore_new_area</Action></Selector></Sequence></BehaviorTree>
###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_red': "Action: Change agent's color to red. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_square': 'Action: Form a square shape. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_color_changed': 'Condition: Check if the agent's color has been changed. Returns True if the color has been changed, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_square_formed': 'Condition: Check if a square shape is formed. Returns True if the shape is formed, False otherwise.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'find the target, change color to red, form a square shape, and freeze movement' Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>is_target_detected</Condition> <Action>change_color_to_red</Action> </Sequence> <Action>continue_movement_agent</Action> </Selector> <Selector> <Sequence> <Condition>is_square_formed</Condition> <Action>task_completed</Action> </Sequence> <Action>wander</Action> </Selector> </Sequence> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_blue': "Action: Change agent's color to blue. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_circle': 'Action: Form a circle shape. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_color_changed': 'Condition: Check if the agent's color has been changed. Returns True if the color has been changed, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_circle_formed': 'Condition: Check if a circle shape is formed. Returns True if the shape is formed, False otherwise.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'find a clear path, change color to blue, form a circle shape, and continue movement towards the target' Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>is_path_clear</Condition> <Action>change_color_to_blue</Action> </Sequence> <Action>continue_movement_agent</Action> </Selector> <Selector> <Sequence> <Condition>is_circle_formed</Condition> <Action>task_completed</Action> </Sequence> <Action>wander</Action> </Selector> </Sequence> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_yellow': "Action: Change agent's color to yellow. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'detect obstacles, change color to yellow, form a line, continue movement towards the target, and freeze movement' Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>is_obstacle_detected</Condition> <Action>change_color_to_yellow</Action> </Sequence> <Action>avoid_obstacle</Action> </Selector> <Selector> <Sequence> <Condition>is_line_formed</Condition> <Action>continue_movement_agent</Action> <Action>task_completed</Action> </Sequence> <Action>wander</Action> </Selector> </Sequence> </BehaviorTree> 
###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, using the given behaviors, create a behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'find a path to the target, move forward and change color to green if the target is reached, otherwise avoid obstacles.' Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Action>agent_movement_freeze</Action> <Sequence> <Boolean>wander</Boolean> <Condition>is_target_reached</Condition> <Action>change_color_to_green</Action> </Sequence> </Sequence> <Sequence> <Boolean>avoid_obstacle</Boolean> </Sequence> </Selector> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, using the given behaviors, create a behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'move forward, check for obstacles, and change color to green when target is reached.'Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Action>agent_movement_freeze</Action> <Sequence> <Boolean>continue_movement_agent</Boolean> <Condition>is_target_reached</Condition> <Action>change_color_to_green</Action> </Sequence> </Sequence> <Sequence> <Boolean>avoid_obstacle</Boolean> </Sequence> </Selector> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, using the given behaviors, create a behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'wander and check for obstacles'Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree> <Sequence> <Boolean>avoid_obstacle</Boolean> <Boolean>wander</Boolean> </Sequence> </BehaviorTree> 
###
4.// INSTRUCTIONS: Use only the following behaviors {'move_backward': 'Action: Move one step backward while maintaining formation.', 'turn_left': 'Action: Turn 90 degrees to the left.', 'turn_right': 'Action: Turn 90 degrees to the right.', 'pick_up_object': 'Action: Pick up the specified object from the ground.', 'drop_object': 'Action: Drop the currently held object onto the designated spot.', 'is_object_nearby': 'Condition: Check if there is an object within 2 feet of the robot.', 'is_object_picked_up': 'Condition: Check if the robot is currently holding an object.', 'is_formation_disrupted': 'Condition: Check if the formation has become misaligned or disrupted.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Move forward, turn left, pick up object, move forward, turn right, drop object, repeat.'
4.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Action>move_forward</Action> <Sequence> <Action>turn_left</Action> <Selector> <Condition>is_object_nearby</Condition> <Action>pick_up_object</Action> <Action>move_forward</Action> </Selector> </Sequence> <Action>turn_right</Action> <Selector> <Condition>is_object_picked_up</Condition> <Action>drop_object</Action> </Selector> <Action>is_formation_disrupted</Action> </Sequence> </Selector> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'get_direction_to_object': "Action: Get direction to the specified object. Always returns True.", 'get_distance_to_object': "Action: Get distance from agent to the specified object. Always returns True.", 'follow_direction': 'Action: Follow the specified direction. Always returns True.', 'avoid_target': "Action: Avoid the specified target using path planning. Always returns True.", 'is_target_reached': "Condition: Check if the agent has reached the specified target. Returns True if target is reached, False otherwise.", 'is_target_visible': "Condition: Check if the target is within the agent's field of view. Returns True if the target is visible, False otherwise.", 'is_object_nearby': "Condition: Check if there is an object within 10 units of the agent. Returns True if an object is nearby, False otherwise."}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to "Detect an object, get direction to object, follow direction, avoid obstacles, approach object until within 10 units, then stop moving."
5.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>is_object_nearby</Condition> <Action>get_direction_to_object</Action> <Action>follow_direction</Action> <Selector> <Condition>is_target_visible</Condition> <Action>avoid_target</Action> </Selector> <Sequence> <Condition>is_target_reached</Condition> <Action>stop_moving</Action> </Sequence> </Sequence> </Selector> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'detect_enemy': 'Action: Detect any nearby enemy agents and signal their presence. Always returns True.', 'attack_enemy': 'Action: Attack the nearest enemy agent. Returns True if successful, False if attack fails.', 'flock': 'Action: Move towards and maintain a set distance from other agents. Always returns True.', 'patrol': "Action: Move along a set path through the environment. Returns True if patrol is complete, False otherwise.", 'is_enemy_nearby': "Condition: Check if there are any enemy agents within a set distance. Returns True if enemy is nearby, False otherwise.", 'is_target_reached': "Condition: Check if the agent has reached its current target location. Returns True if target is reached, False otherwise.", 'is_enemy_attacked': "Condition: Check if the enemy has been successfully attacked. Returns True if enemy is successfully attacked, False otherwise."}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to "Flock with nearby agents, detect and attack enemies, switch to patrol mode if no enemies are present."
6.// OUTPUT:
<BehaviorTree> <Sequence> <Action>flock</Action> <Selector> <Sequence> <Condition>is_enemy_nearby</Condition> <Sequence> <Action>detect_enemy</Action> <Selector> <Condition>is_enemy_attacked</Condition> <Action>attack_enemy</Action> </Selector> <Selector> <Condition>is_target_reached</Condition> <Action>patrol</Action> </Selector> </Sequence> </Sequence> <Action>switch_to_patrol_mode</Action> </Selector> </Sequence> </BehaviorTree> 
###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Move towards the target, avoiding any obstacles, and signal task completion upon reaching the target.'Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Action>continue_movement_agent</Action> <Sequence> <Condition>is_obstacle_detected</Condition> <Action>agent_movement_freeze</Action> </Sequence> </Selector> <Condition>is_agent_in_nest</Condition> <Action>task_completed</Action> </Sequence> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'move_left': 'Action: Move the agent left one unit. Returns True if successfully moved, False otherwise.', 'move_right': 'Action: Move the agent right one unit. Returns True if successfully moved, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Move towards the target, avoiding any obstacles, and always keep the target to the right.'Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Action>continue_movement_agent</Action> <Condition>is_target_detected</Condition> </Sequence> <Sequence> <Condition>is_path_clear</Condition> <Action>move_right</Action> </Sequence> <Sequence> <Condition>is_path_clear</Condition> <Action>move_left</Action> </Sequence> </Selector> <Condition>is_agent_in_nest</Condition> <Action>agent_movement_freeze</Action> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'grab_target': 'Action: Grab the target object if it is within reach. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'move_left': 'Action: Move the agent left one unit. Returns True if successfully moved, False otherwise.', 'move_right': 'Action: Move the agent right one unit. Returns True if successfully moved, False otherwise.', 'drop_target': 'Action: Drop the target object at the designated drop-off location. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Move towards the target, avoiding any obstacles, and drop the target at the designated drop-off location.'Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Action>continue_movement_agent</Action> <Condition>is_target_detected</Condition> </Sequence> <Sequence> <Condition>is_path_clear</Condition> <Action>grab_target</Action> <Sequence> <Condition>is_agent_in_nest</Condition> <Action>drop_target</Action> </Sequence> </Sequence> <Sequence> <Condition>is_path_clear</Condition> <Action>move_right</Action> </Sequence> <Sequence> <Condition>is_path_clear</Condition> <Action>move_left</Action> </Sequence> </Selector> </BehaviorTree> 
###
4.// INSTRUCTIONS: Use only the following behaviors {'start_engine': 'Action: Turn on the robot engine. Returns False if engine is already on, True otherwise.', 'stop_engine': 'Action: Turn off the robot engine. Returns False if engine is already off, True otherwise.', 'forward_movement': 'Action: Move the robot forward in a straight line at a specific speed.', 'backward_movement': 'Action: Move the robot backward in a straight line at a specific speed.', 'left_movement': 'Action: Move the robot to the left in a curved path at a specific speed.', 'right_movement': 'Action: Move the robot to the right in a curved path at a specific speed.', 'is_engine_on': 'Condition: Check if the robot engine is currently on. Returns True if engine is on, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Generate a behavior tree for a single robot to complete a set of precise movements.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_engine_on</Condition><Action>stop_engine</Action></Sequence><Selector><Sequence><Condition>is_engine_on</Condition><Selector><Sequence><Condition>is_path_clear</Condition><Action>forward_movement</Action></Sequence><Action>backward_movement</Action></Selector></Sequence><Sequence><Condition>is_engine_on</Condition><Selector><Sequence><Condition>is_obstacle_detected</Condition><Action>left_movement</Action></Sequence><Action>right_movement</Action></Selector></Sequence></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'detect_target': 'Action: Use sensors to detect the target's location. Returns False if target is not found, True otherwise.', 'navigate_to_target': 'Action: Move towards the detected target location.', 'analyze_target': 'Action: Use additional sensors to gather more information about the target.', 'collect_data': 'Action: Collect data and store it in the robot's memory.', 'is_data_collected': 'Condition: Check if the robot has successfully collected data on the target. Returns True if data is collected, False otherwise.', 'is_target_analyzed': 'Condition: Check if the target has been fully analyzed. Returns True if target is analyzed, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Generate a behavior tree for a robot to locate, analyze, and collect data on a specific target.
5.// OUTPUT:
<BehaviorTree><Sequence><Action>detect_target</Action><Action>analyze_target</Action><Sequence><Condition>is_target_analyzed</Condition><Action>collect_data</Action></Sequence></Sequence></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'move_to_position': 'Action: Move the robot to a specific coordinate in the environment.', 'rotate': 'Action: Rotate the robot to a specific angle in the environment.', 'scan_environment': 'Action: Use sensors to scan and create a map of the surrounding environment.', 'analyze_map': 'Action: Analyze the map data to determine the best path for the robot.', 'follow_path': 'Action: Follow the determined path to reach the destination.', 'is_position_reached': 'Condition: Check if the robot has reached the specified position. Returns True if robot is within a small margin of error, False otherwise.', 'is_angle_reached': 'Condition: Check if the robot has rotated to the specified angle. Returns True if robot is within a small margin of error, False otherwise.', 'is_map_analyzed': 'Condition: Check if the map has been successfully analyzed. Returns True if map is analyzed, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Generate a behavior tree for a robot to navigate to a specific location in a complex environment.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_map_analyzed</Condition><Action>follow_path</Action></Sequence><Sequence><Condition>is_position_reached</Sequence><Action>scan_environment</Action><Sequence><Condition>is_angle_reached</Condition><Action>move_to_position</Action><Action>rotate</Action></Sequence></Sequence></Selector></BehaviorTree> 
###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'is_in_leader_position': 'Condition: Check if the agent is in the leader position. Returns True if the agent's position in the swarm is in the leader position, False otherwise.', 'is_near_leader': 'Condition: Check if the agent is within a certain distance to the leader. Returns True if the agent is within the specified distance, False otherwise.', 'join_formation': 'Action: Join the formation with the rest of the swarm. Always returns True.', 'leader_moves': 'Action: Move the leader robot within the swarm. Always returns True.', 'lead_swarm': 'Action: Take charge and lead the swarm in a specific direction. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Lead the swarm in a specific direction by moving and forming a line with the rest of the robots'. Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_in_leader_position</Condition><Selector><Sequence><Condition>is_near_leader</Condition><Action>join_formation</Action></Sequence><Action>leader_moves</Action></Selector><Action>lead_swarm</Action></Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'change_color_to_blue': "Action: Change agent's color to blue. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_agent_in_swarm': 'Condition: Check if the agent is currently part of the swarm. Returns True if the agent is part of the swarm, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'instruct_agent': 'Action: Give specific instructions to the agent. Takes in a string as input and always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'If the agent is part of the swarm and in the nest, change color to blue, if not, instruct the agent to return to the swarm'. Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_agent_in_swarm</Condition><Condition>is_agent_in_nest</Condition><Action>change_color_to_blue</Action></Sequence><Sequence><Condition>is_agent_in_swarm</Condition><Action>instruct_agent: "Please return to the swarm."</Action></Sequence></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_red': "Action: Change agent's color to red. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'hide_in_shadow': 'Action: Move into a shadowed area to hide from predators. Always returns True.', 'is_agent_healthy': 'Condition: Check if the agent's health is above a certain threshold. Returns True if agent is considered healthy, False otherwise.', 'run_away': 'Action: Run away from predators. Always returns True.', 'send_help_signal': 'Action: Send a signal to the rest of the swarm for help. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'If the agent is in danger, hide in a shadowed area, if not healthy, run away from predators and send a help signal'. Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_agent_healthy</Condition><Selector><Sequence><Condition>is_agent_in_nest</Condition><Action>hide_in_shadow</Action></Sequence><Sequence><Action>run_away</Action><Action>send_help_signal</Action></Sequence></Selector></Sequence></BehaviorTree> 
###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'follow': 'Action: Follow the leader robot. Always returns True.', 'move_backward': 'Action: Move one step backward while maintaining formation.', 'move_forward': 'Action: Move one step forward while maintaining formation.', 'is_obstacle_ahead': 'Condition: Check if there is an obstacle blocking the path ahead for the formation.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Generate a behavior tree for the swarm robots to follow the leader, avoid obstacles, and maintain formation while moving towards the goal.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_obstacle_ahead</Condition><Action>move_backward</Action></Sequence><Sequence><Condition>at_goal</Condition><Action>change_color_to_green</Action></Sequence><Sequence><Condition>is_leader_visible</Condition><Action>follow</Action></Sequence></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'check_battery_level': 'Condition: Check the current battery level of the robot and return True if above 50%, False if below 50%.', 'navigate_to_charging_station': 'Action: Move towards the nearest charging station based on current location.', 'is_charging_complete': 'Condition: Check if the battery has been fully charged and return True if yes, False if not yet charged.', 'recharge_battery': 'Action: Connect the robot to the charging station and recharge the battery.', 'wait_for_charging': 'Action: Wait for the battery to fully charge and resume normal operation once charged.', 'move_to_destination': 'Action: Move towards the designated destination in the environment.', 'check_if_destination_reached': 'Condition: Check if the robot has reached the designated destination and return True if yes, False if not yet reached.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Generate a behavior tree for the swarm robots to navigate to a designated destination while monitoring and managing battery levels.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>check_battery_level</Condition><Action>navigate_to_charging_station</Action></Sequence><Sequence><Condition>is_charging_complete</Condition><Action>recharge_battery</Action><Action>wait_for_charging</Action></Sequence></Selector><Sequence><Condition>check_if_destination_reached</Condition><Action>move_to_destination</Action></Sequence></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'move_forward': 'Action: Move one step forward while maintaining formation.', 'shift_left': 'Action: Shift the entire formation one step to the left.', 'shift_right': 'Action: Shift the entire formation one step to the right.', 'form_grid': 'Action: Form a grid formation with equal spacing between robots.', 'is_obstacle_ahead': 'Condition: Check if there is an obstacle blocking the path ahead for the formation.', 'is_grid_formed': 'Condition: Check if a grid formation is currently maintained by the robots.', 'is_formation_broken': 'Condition: Check if the formation has become misaligned or broken.', 'gather_resources': 'Action: Collect resources from the environment.', 'return_to_base': 'Action: Return to the base with gathered resources.', 'drop_resources': 'Action: Drop off gathered resources at the designated location.', 'is_base_reached': 'Condition: Check if the robot has reached the base with the gathered resources.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Generate a behavior tree for the swarm robots to gather resources from the environment and return to the base while maintaining a grid formation and avoiding obstacles.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_formation_broken</Condition><Action>form_grid</Action></Sequence><Sequence><Condition>is_obstacle_ahead</Condition><Selector><Sequence><Condition>is_grid_formed</Condition><Action>shift_left</Action></Sequence><Action>move_forward</Action></Selector></Sequence></Selector><Sequence><Condition>gather_resources</Condition><Action>return_to_base</Action><Action>drop_resources</Action></Sequence></BehaviorTree> 
###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color': 'Action: Change agent's color to a specified color. Always returns True.', 'delay': 'Action: Wait for a specified number of seconds. Always returns True.', 'face_direction': 'Action: Rotate the agent to face a specified direction. Always returns True.', 'follow_path': 'Action: Follow a specified path. Always returns True.', 'move_forward': 'Action: Move the agent forward. Always returns True.', 'restart_behavior_tree': 'Action: Restart the behavior tree. Always returns True.', 'rotate_agent': 'Action: Rotate the agent a specified amount. Always returns True.', 'toggle_behavior': 'Action: Toggle a specified behavior. Always returns True.', 'wait_for_target': 'Condition: Check if the agent is waiting for a target. Returns True if the agent is waiting for a target, False otherwise.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_at_target': 'Condition: Check if the agent is at the target. Returns True if the agent is at the target, False otherwise.', 'is_target_lost': 'Condition: Check if the target is lost. Returns True if the target is lost, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement and restarting the behavior tree. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Wait for target, follow path and rotate agent 90 degrees'.Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Condition>wait_for_target</Condition> <Sequence> <Action>follow_path</Action> <Action>rotate_agent</Action> <Delay> </Delay> </Sequence><Action>rotate_agent</Action> <Action>wager</Action> </Selector> <Action>restart_behavior_tree</Action> <Selector> <Sequence> <Condition>is_target_detected</Condition> <Action>move_forward</Action> <Condition>is_at_target</Condition> <Action>move_forward</Action> </Sequence> <Condition>is_target_lost</Condition> <Action>agent_movement_freeze</Action> </Selector> </Sequence> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'move_to_target': 'Action: Move towards the target. Returns True when target is reached.', 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'halt_movement': 'Action: Stop all movement. Always returns True.', 'change_movement_speed': 'Action: Change the speed of movement. Returns True when speed is changed successfully.', 'circle_target': 'Action: Circle around the target. Returns True when target is circled.', 'form_square': 'Action: Form a square shape. Always returns True.', 'complete_task': 'Condition: Check if all required tasks are completed. Returns True if all tasks are completed, False otherwise.', 'is_agent_in_range': 'Condition: Check if the agent is within a specified range. Returns True if the agent is within range, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Complete a task by circling the target, while avoiding obstacles in a square formation and then halting movement'.Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree> <Selector> <Action>avoid_obstacle</Action> <Sequence> <Action>form_square</Action> <Sequence> <Condition>is_agent_in_range</Condition> <Action>circle_target</Action> </Sequence> <Action>halt_movement</Action> <Action>complete_task</Action> </Sequence> </Selector> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'move_to_target': 'Action: Move towards the target. Returns True when target is reached.', 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'halt_movement': 'Action: Stop all movement. Always returns True.', 'change_movement_speed': 'Action: Change the speed of movement. Returns True when speed is changed successfully.', 'circle_target': 'Action: Circle around the target. Returns True when target is circled.', 'form_square': 'Action: Form a square shape. Always returns True.', 'complete_task': 'Condition: Check if all required tasks are completed. Returns True if all tasks are completed, False otherwise.', 'is_agent_in_range': 'Condition: Check if the agent is within a specified range. Returns True if the agent is within range, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Move towards the target, while avoiding obstacles and changing movement speed'. Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree> <Selector> <Condition>is_agent_in_range</Condition> <Sequence> <Action>move_to_target</Action> <Action>avoid_obstacle</Action> <Action>change_movement_speed</Action> </Sequence> <Selector> <Condition>is_agent_in_range</Condition> <Action>move_to_target</Action> <Action>avoid_obstacle</Action> <Action>halt_movement</Action> </Selector> </Selector> </BehaviorTree> 
###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'explore': 'Action: Explore new areas by moving in a random direction. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_area_explored': "Condition: Check if the area has been explored. Returns True if the area has been explored, False otherwise.", 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Explore the environment until the area is fully explored.'Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>is_area_explored</Condition> <Action>agent_movement_freeze</Action> <Action>task_completed</Action> </Sequence> <Action>explore</Action> </Selector> </Sequence> </BehaviorTree>
 
###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'change_color_to_blue': "Action: Change agent's color to blue. Always returns True.", 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_red': "Action: Change agent's color to red. Always returns True.", 'fly': 'Action: Fly to a new location within 10 units. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Fly to a new location within 10 units, change color to red, and then return to the nest.'Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>is_target_detected</Condition> <Action>fly</Action> <Action>change_color_to_red</Action> <Action>task_completed</Action> </Sequence> <Action>fly</Action> </Selector> <Sequence><Condition>is_agent_in_nest</Condition> <Action>agent_movement_freeze</Action> </Sequence> </Sequence> </BehaviorTree>
 
###
6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'follow_path': 'Action: Follow a specified path. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'navigate_to_target': 'Action: Navigate to a specified target location within 20 units. Always returns True.', 'wait': 'Action: Wait for a specified amount of time. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Navigate to a specific target within 20 units, wait for 5 seconds, and then return to the nest.'Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>is_path_clear</Condition> <Action>navigate_to_target</Action> <Action>wait</Action> <Action>agent_movement_freeze</Action> <Action>task_completed</Action> </Sequence> <Action>follow_path</Action> </Selector> <Sequence> <Condition>is_agent_in_nest</Condition> <Action>agent_movement_freeze</Action> </Sequence> </Sequence> </BehaviorTree>
###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.', 'charge_battery': 'Action: Charge the agent's battery until full. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Move towards the target while avoiding obstacles, and charge battery if it drops below 50%'. Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>is_path_clear</Condition> <Action>continue_movement_agent</Action> </Sequence> <Sequence> <Condition>is_obstacle_detected</Condition> <Action>avoid_obstacle</Action> </Sequence> <Sequence> <Condition>is_target_detected</Condition> <Action>continue_movement_agent</Action> </Sequence> <Sequence> <Condition>is_agent_in_nest</Condition> <Action>charge_battery</Action> </Sequence> </Selector> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'change_color_to_blue': "Action: Change agent's color to blue. Always returns True.", 'move_forward': 'Action: Move one step forward. Always returns True.', 'move_backward': 'Action: Move one step backward. Always returns True.', 'turn_right': 'Action: Turn 90 degrees to the right. Always returns True.', 'turn_left': 'Action: Turn 90 degrees to the left. Always returns True.', 'wait_5_seconds': 'Action: Wait for 5 seconds. Always returns True.', 'pick_up_object': 'Action: Pick up nearby object. Returns True if successful, False otherwise.', 'drop_object': 'Action: Drop object held by agent. Returns True if successful, False otherwise.', 'is_object_held': 'Condition: Check if the agent is currently holding an object. Returns True if object is held, False otherwise.', 'is_object_detected': 'Condition: Check if there is any object within 10 units. Returns True if an object is detected, False otherwise.', 'is_destination_reached': 'Condition: Check if the destination point has been reached. Returns True if the destination point is reached, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'random_movement': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Pick up and hold an object, move to a specific location and drop the object'. Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>is_object_detected</Condition> <Action>pick_up_object</Action> </Sequence> <Sequence> <Condition>is_object_held</Condition> <Action>move_forward</Action> <Condition>is_object_held</Condition> <Action>move_forward</Action> <Condition>is_object_held</Condition> <Action>move_backward</Action> <Condition>is_object_held</Condition> <Action>turn_right</Action> <Condition>is_object_held</Condition> <Action>turn_right</Action> <Condition>is_object_held</Condition> <Action>move_forward</Action> </Sequence> <Sequence> <Condition>is_destination_reached</Condition> <Action>drop_object</Action> </Sequence> </Selector> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'swarm_location': 'Action: Communicate location with other robots in the swarm. Returns True if location is successfully communicated, False otherwise.', 'gather_swarm': 'Action: Gather with other robots in the swarm within 10 units. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry 
###
4.// INSTRUCTIONS: Use only the following behaviors {'identify_target': 'Action: Use sensors to identify and track the target within the environment.', 'move_towards_target': 'Action: Move towards the tracked target using pathfinding algorithms.', 'avoid_obstacles': 'Action: Utilize obstacle avoidance techniques while moving towards the target.', 'reposition_target': 'Action: Reposition the target within the environment to optimize the best route for the swarm of robots.', 'arrive_at_target': 'Condition: Check if the swarm of robots has arrived at the target successfully.', 'detect_obstacle': 'Condition: Check for any obstacles blocking the path to the target.', 'detect_target_change': 'Condition: Check for any changes in the position of the target within the environment.', 'detect_arrival_failure': 'Condition: Check if the swarm of robots failed to reach the target due to obstacles or other factors.', 'replan_path': 'Action: Replan the path to the target using updated information and algorithms.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Follow and track a moving target, utilizing obstacle avoidance and path planning techniques to successfully reach the target, and repurpose the target if necessary'.
4.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>detect_target_change</Condition><Action>identify_target</Action></Sequence><Sequence><Condition>detect_obstacle</Condition><Action>avoid_obstacle</Action></Sequence><Sequence><Condition>arrive_at_target</Condition><Action>reposition_target</Action></Sequence><Action>move_towards_target</Action></Selector><Sequence><Condition>detect_arrival_failure</Condition><Action>replan_path</Action></Sequence></Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'find_each_other': 'Action: Use sensors and communication to help the swarm robots find and locate each other within the environment.', 'form_circle': 'Action: Form a circle formation around a central point.', 'spread_out': 'Action: Spread out in a larger area, maintaining the circle formation.', 'reform_circle': 'Action: Adjust the circle formation according to the locations of the swarm robots.', 'is_circle_formed': 'Condition: Check if the swarm robots have successfully formed a circle formation.', 'detect_intruder': 'Condition: Check for any intruders entering the area being monitored by the swarm robots.', 'report_intruder': 'Action: Report the presence of an intruder to the rest of the swarm robots.', 'scan_area': 'Action: Use sensors to scan the area and gather information about the environment and all potential targets.', 'navigate_to_object': 'Action: Use pathfinding algorithms to navigate towards the nearest detected object.', 'is_object_in_range': 'Condition: Check if the swarm robots have successfully reached the target object.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Systematically scan the environment, locate each other, form a circle formation while avoiding obstacles, and navigate towards the nearest detected target object, while being alert to any intruders'.
5.// OUTPUT:
<BehaviorTree><Sequence><Action>scan_area</Action><Sequence><Condition>detect_intruder</Condition><Action>report_intruder</Action></Sequence></Sequence><Selector><Sequence><Condition>is_circle_formed</Condition><Action>spread_out</Action></Sequence><Sequence><Condition>is_circle_formed</Condition><Action>reform_circle</Action></Sequence><Sequence><Condition>is_circle_formed</Condition><Action>form_circle</Action></Sequence></Selector><Selector><Sequence><Condition>find_each_other</Condition><Selector><Sequence><Condition>is_object_in_range</Condition><Action>navigate_to_object</Action></Sequence><Action>spread_out</Action></Selector></Sequence><Action>spread_out</Action></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'move_forward': 'Action: Move one step forward while maintaining a safe distance from other robots.', 'rotate_left': 'Action: Rotate to the left by 90 degrees.', 'rotate_right': 'Action: Rotate to the right by 90 degrees.', 'randomly_move': 'Action: Randomly move in any direction.', 'change_speed': 'Action: Change speed to a specified value.', 'detect_nearest_robot': 'Condition: Check for the distance to the nearest robot within the swarm and return the distance value.', 'detect_obstacle': 'Condition: Check for the presence of an obstacle ahead and return True if an obstacle is detected, False otherwise.', 'detect_target_point': 'Condition: Check for the presence of a target point and return True if a target point is detected, False otherwise.', 'detect_proximity_to_target': 'Condition: Check the distance to the target point and return True if the distance is within a specified range, False otherwise.', 'stop_movement': 'Action: Stop all movement and remain stationary. Always returns True.', 'return_to_start': 'Action: Return to starting position and reset all parameters. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Move towards a target point while avoiding obstacles and maintaining a safe distance from other robots, then return to the starting position once the target is reached'
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>detect_obstacle</Condition><Selector><Sequence><Condition>detect_nearest_robot</Condition><Action>rotate_left</Action></Sequence><Action>rotate_right</Action></Selector></Sequence><Sequence><Condition>detect_proximity_to_target</Condition><Action>change_speed</Action></Sequence><Sequence><Condition>detect_target_point</Condition><Action>return_to_start</Action></Sequence></Selector><Sequence><Condition>detect_proximity_to_target</Condition><Action>move_forward</Action></Sequence></BehaviorTree> 
###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'form_line': 'Action: Form a horizontal line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a horizontal line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'is_area_monitored': 'Condition: Check if the agent is within the designated monitoring area. Returns True if the agent is in the monitoring area, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Monitor an area and form a horizontal line when within the designated monitoring area.'. Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_area_monitored</Condition><Action>form_line</Action></Sequence><Action>wander</Action></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'follow_path': 'Action: Follow predefined path. Returns True when the path is successfully followed, False otherwise.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_at_destination': 'Condition: Check if the agent has reached the designated destination. Returns True if the agent is at the destination, False otherwise.', 'is_path_blocked': 'Condition: Check if the current path is blocked by obstacles. Returns True if the path is blocked, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Follow a path and change color to green upon reaching the destination.'. Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_path_blocked</Condition><Action>wander</Action></Sequence><Selector><Sequence><Condition>is_agent_in_nest</Condition><Action>follow_path</Action><Sequence><Condition>is_path_blocked</Condition><Action>wander</Action></Sequence></Selector><Action>change_color_to_green</Action></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_circle': 'Action: Form a circle at the target location. Always returns True.', 'is_close_to_target': 'Condition: Check if the agent is within 5 units of the target. Returns True if the agent is close to the target, False otherwise.', 'is_circle_formed': 'Condition: Check if a circle is formed at the target location. Returns True if the circle is formed, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task5.// USER COMMAND: generate behavior tree to 'Form a circle at the target location and change color to green when close to the target.'. Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_close_to_target</Condition><Action>form_circle</Action><Action>change_color_to_green</Action></Sequence><Selector><Sequence><Condition>is_target_detected</Condition><Action>agent_movement_freeze</Action><Condition>is_circle_formed</Condition><Action>task_completed</Action></Sequence><Sequence><Condition>is_obstacle_detected</Condition><Action>avoid_obstacle</Action></Sequence><Action>continue_movement_agent</Action></Selector></BehaviorTree> 
###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.', 'wait_5_seconds': 'Action: Wait for 5 seconds before proceeding. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'move forward, turn left, avoid obstacles, wait for 5 seconds, and continue moving'Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_path_clear</Condition><Action>move_forward</Action></Sequence><Sequence><Condition>is_obstacle_detected</Condition><Action>turn_left</Action><Action>avoid_obstacle</Action><Action>wait_5_seconds</Action></Sequence><Action>continue_movement_agent</Action></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.', 'is_battery_low': 'Condition: Check if agent's battery level is below 20%. Returns True if battery level is lower than 20%, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Check battery level, move forward, avoid obstacles, form a line, and signal task completion'Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_battery_low</Condition><Action>move_forward</Action><Action>avoid_obstacle</Action><Action>form_line</Action></Sequence><Sequence><Condition>is_task_completed</Condition></Sequence></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.', 'grab_item': 'Action: Pick up the nearest item and hold it. Returns True if successful, False if no item is present.', 'release_item': 'Action: Release the currently held item. Returns True if successful.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Conduct a scavenger hunt by picking up items, avoiding obstacles, and releasing items when the target is reached'Output only the XML behavior tree without extra text.
6.
###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'avoid_contact': 'Action: Avoid contact with other agents. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'follow_leader': 'Action: Follow the designated leader agent. Always returns True.', 'is_leader_detected': 'Condition: Check if the designated leader is within range. Returns True if the leader is within range, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_leader_moving': 'Condition: Check if the designated leader is moving. Returns True if the leader is moving, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Follow the designated leader, avoid obstacles, and change color to white once the leader is reached.'Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>is_leader_detected</Condition> <Action>follow_leader</Action> </Sequence> <Action>avoid_obstacle</Action> </Selector> <Sequence> <Condition>is_leader_moving</Condition> <Action>change_color_to_white</Action> <Action>agent_movement_freeze</Action> <Action>task_completed</Action> </Sequence> </Sequence> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'form_circle': 'Action: Form a circle with other agents. Always returns True.', 'is_circle_formed': 'Condition: Check if a circle with at least 5 agents is formed. Returns True if a circle is formed, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Form a circle with at least 5 other agents, then change color to green.'Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>is_circle_formed</Condition> <Action>change_color_to_green</Action> <Action>task_completed</Action> </Sequence> <Action>form_circle</Action> </Selector> </Sequence> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_yellow': "Action: Change agent's color to yellow. Always returns True.", 'follow_leader': 'Action: Follow the designated leader agent. Always returns True.', 'is_leader_detected': 'Condition: Check if the designated leader is within range. Returns True if the leader is within range, False otherwise.', 'is_leader_moving': 'Condition: Check if the designated leader is moving. Returns True if the leader is moving, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Follow the designated leader, avoid obstacles, and change color to yellow if the leader is moving.'Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>is_leader_detected</Condition> <Action>follow_leader</Action> </Sequence> <Action>avoid_obstacle</Action> <Sequence> <Condition>is_leader_moving</Condition> <Action>change_color_to_yellow</Action> <Action>task_completed</Action> </Sequence> </Selector> </BehaviorTree> 
###
4.// INSTRUCTIONS: Use only the following behaviors {'detect_obstacle': 'Action: Use sensors to detect any obstacles in the environment.', 'move_backward': 'Action: Move one step backward while maintaining formation.', 'stop_movement': 'Action: Stop movement and maintain current position.', 'scatter': 'Action: Scatter formation and disperse in all directions.', 'reform_formation': 'Action: Reform the formation into a cohesive and aligned group.', 'is_target_detected': 'Condition: Check if the target is detected within 10 units. Returns True if the target is within 10 units of distance, False otherwise.', 'is_object_picked_up': 'Condition: Check if the object has been successfully picked up. Returns True if the object has been picked up, False otherwise.', 'is_target_reached': 'Condition: Check if the target location has been reached. Returns True if the target location has been reached, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Generate a behavior tree for swarm robots to explore and collect objects scattered throughout the environment while avoiding obstacles and reforming the formation.
4.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_target_detected</Condition><Action>detect_obstacle</Action><Action>move_backward</Action><Sequence><Condition>is_target_reached</Condition><Action>reform_formation</Action></Sequence></Sequence><Sequence><Condition>is_object_picked_up</Condition><Action>stop_movement</Action><Action>scatter</Action></Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'find_path': 'Action: Use algorithms to calculate the shortest path to a target location.', 'move_through_path': 'Action: Move through the calculated path.', 'is_obstacle_encountered': 'Condition: Check if an obstacle is encountered while moving through the path. Returns True if an obstacle is encountered, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Generate a behavior tree for swarm robots to efficiently reach a target location while avoiding obstacles.
5.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_obstacle_encountered</Condition><Action>find_path</Action><Action>move_through_path</Action></Sequence></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'detect_object': 'Action: Use sensors to detect any objects in the environment.', 'pick_up_object': 'Action: Move towards the object and pick it up. Always returns True.', 'drop_off_object': 'Action: Move towards the designated drop-off location and drop off the object. Always returns True.', 'move_to_position': 'Action: Move to a specific position within the environment.', 'is_object_detected': 'Condition: Check if an object is detected within 5 units. Returns True if an object is detected, False otherwise.', 'is_at_dropoff': 'Condition: Check if the robot is at the designated drop-off location. Returns True if at the drop-off location, False otherwise.', 'is_holding_object': 'Condition: Check if the robot is currently holding an object. Returns True if an object is being held, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Generate a behavior tree for a swarm of robots to efficiently collect and transport objects to a designated drop-off location, while avoiding obstacles and coordinating movements.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_object_detected</Condition><Action>pick_up_object</Action></Sequence><Sequence><Condition>is_at_dropoff</Condition><Action>drop_off_object</Action></Sequence><Sequence><Condition>is_holding_object</Condition><Action>drop_off_object</Action></Sequence><Sequence><Condition>is_obstacle_detected</Condition><Action>avoid_obstacle</Action></Sequence><Action>move_to_position</Action></Selector></BehaviorTree> ###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Avoid any obstacles and change color to green when detecting a target.' Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>is_obstacle_detected</Condition> <Action>avoid_obstacle</Action> </Sequence> <Sequence> <Condition>is_target_detected</Condition> <Action>change_color_to_green</Action> </Sequence> </Selector> </Sequence> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'circle_around': 'Action: Move in a circular path to explore the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Explore the environment by moving in a circular path then form a vertical line and change color to white.' Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Action>circle_around</Action> <Condition>is_line_formed</Condition> <Action>change_color_to_white</Action> <Action>agent_movement_freeze</Action> <Action>task_completed</Action> </Sequence> <Action>form_line</Action> </Selector> </Sequence> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'approach_target': 'Action: Move towards the target. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Move towards the target, avoiding obstacles, and change color to white when reaching within 10 units distance.'Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Selector> <Condition>is_obstacle_detected</Condition> <Action>avoid_obstacle</Action> </Selector> <Sequence> <Condition>is_target_detected</Condition> <Action>change_color_to_white</Action> <Action>agent_movement_freeze</Action> <Action>task_completed</Action> </Sequence> </Sequence> <Action>continue_movement_agent</Action> </Selector> </BehaviorTree> 
###
4.// INSTRUCTIONS: Use only the following behaviors {'move_forward': 'Action: Move one step forward while maintaining formation.', 'shift_left': 'Action: Shift the entire formation one step to the left.', 'shift_right': 'Action: Shift the entire formation one step to the right.', 'stop_movement': 'Action: Stop movement completely.', 'reform_formation': 'Action: Reform the formation. Always returns True.', 'is_target_in_range': 'Action: Check if the target is within range. Returns True if target is within 10 units, False otherwise.', 'is_formation_close': 'Condition: Check if the formation is close to target. Returns True if formation is within 5 units of target, False otherwise.', 'is_formation_straight': 'Condition: Check if the formation is aligned and straight. Returns True if formation is in a straight line, False otherwise.', 'is_moving_towards_target': 'Condition: Check if the formation is moving towards the target. Returns True if the formation is moving towards the target, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Move towards the target while maintaining formation and stop when the target is within 10 units.' Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>is_moving_towards_target</Condition><Selector><Sequence><Condition>is_formation_close</Condition><Action>stop_movement</Action><Action>is_target_in_range</Action></Selector><Action>is_formation_straight</Action></Sequence><Action>move_forward</Action></Selector><Sequence><Condition>is_formation_straight</Condition><Action>reform_formation</Action></Sequence></Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'turn_right': 'Action: Make a turn to the right by 90 degrees. Always returns True.', 'turn_left': 'Action: Make a turn to the left by 90 degrees. Always returns True.', 'move_forward': 'Action: Move one step forward.', 'stop_movement': 'Action: Stop all movement.', 'is_color_red': 'Condition: Check if the agent's color is red. Returns True if the agent's color is red, False otherwise.', 'is_color_green': 'Condition: Check if the agent's color is green. Returns True if the agent's color is green, False otherwise.', 'is_color_yellow': 'Condition: Check if the agent's color is yellow. Returns True if the agent's color is yellow, False otherwise.', 'has_target': 'Condition: Check if the agent has a target assigned. Returns True if a target is assigned, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Find the assigned target and turn right, then move forward until the target is reached.' Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>has_target</Condition><Selector><Sequence><Condition>is_color_red</Condition><Action>turn_right</Action><Action>move_forward</Action></Sequence><Sequence><Condition>is_color_green</Condition><Action>move_forward</Action></Sequence><Sequence><Condition>is_color_yellow</Condition><Action>turn_left</Action><Action>move_forward</Action></Sequence></Selector></Sequence><Sequence><Condition>is_color_green</Condition><Action>stop_movement</Action></Sequence></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'move_forward': 'Action: Move one step forward. Always returns True.', 'go_to_target': 'Action: Move towards the assigned target. Returns True if the target is within 10 units, False otherwise.', 'wait': 'Action: Wait for 5 seconds before continuing. Always returns True.', 'is_target_reached': 'Condition: Check if the agent has reached the assigned target. Returns True if the agent is within 1 unit from the target, False otherwise.', 'is_obstacle_detected': 'Condition: Check for nearby obstacles. Returns True if an obstacle is detected, False otherwise.', 'is_out_of_bounds': 'Condition: Check if the agent is outside of the specified boundary. Returns True if the agent is outside the boundary, False otherwise.', 'has_target': 'Condition: Check if the agent has a target assigned. Returns True if a target is assigned, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Move towards the assigned target and stop if an obstacle is detected. If out of bounds, wait for 5 seconds before continuing.' Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>has_target</Condition><Action>go_to_target</Action><Action>wait</Action></Sequence><Sequence><Condition>is_obstacle_detected</Condition><Action>move_forward</Action></Sequence></Selector><Sequence><Condition>is_target_reached</Condition><Action>stop_movement</Action></Sequence><Sequence><Condition>is_out_of_bounds</Condition><Action>wait</Action></Sequence></BehaviorTree>//Note: "reform_formation" can be defined as an action that uses a series of "shift_left" and "shift_right" behaviors to realign the swarm robots into a proper formation.

###
4.// INSTRUCTIONS: Use only the following behaviors {'move_forward': 'Action: Move one step forward while maintaining formation.', 'maintain_formation': 'Action: Continuously adjust positions to maintain formation.', 'is_obstacle_ahead': 'Condition: Check if there is an obstacle blocking the path ahead for the formation.', 'is_formation_intact': 'Condition: Check if the formation is currently in a proper and intact state.', 'is_swarm_together': 'Condition: Check if all robots in the swarm are within a certain distance to each other.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Generate a behavior tree for a swarm of robots to explore an unknown environment while maintaining formation and avoiding obstacles.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_obstacle_ahead</Condition><Action>avoid_obstacle</Action></Sequence><Sequence><Condition>is_formation_intact</Condition><Action>move_forward</Action></Sequence><Sequence><Condition>is_swarm_together</Condition><Action>maintain_formation</Action></Sequence></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'move_random': 'Action: Move randomly within the environment.', 'detect_food': 'Condition: Search for nearby food sources and return True if found, False otherwise.', 'gather_food': 'Action: Move towards the nearest food source and pick up the food.', 'return_to_nest': 'Action: Return to the nest while carrying food.', 'deposit_food': 'Action: Deposit the food collected into the nest.', 'maybe_drop_food': 'Action: Randomly decide whether or not to drop the food while returning to the nest.', 'is_food_carried': 'Condition: Check if the robot is currently carrying food.', 'is_at_nest': 'Condition: Check if the robot is at the nest location.', 'is_food_deposited': 'Condition: Check if the food has been successfully deposited into the nest.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Generate a behavior tree for a foraging swarm of robots to locate and collect food, and return to the nest for deposit.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>detect_food</Condition><Action>gather_food</Action><Sequence><Condition>is_food_carried</Condition><Action>maybe_drop_food</Action></Sequence><Sequence><Condition>is_at_nest</Condition><Action>deposit_food</Action></Sequence></Selector><Sequence><Condition>is_food_deposited</Condition><Action>return_to_nest</Action></Sequence></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'move_forward': 'Action: Move one step forward while maintaining formation.', 'form_circle': 'Action: Form a circle with the swarm robots at designated points.', 'scatter': 'Action: Scatter and move towards individual target locations.', 'gather': 'Action: Collectively gather and move towards one designated location.', 'is_target_reached': 'Condition: Check if the target location has been reached by the swarm robots.', 'is_formation_intact': 'Condition: Check if the formation is currently in a proper and intact state.', 'is_swarm_together': 'Condition: Check if all robots in the swarm are within a certain distance to each other.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Generate a behavior tree for a swarm of robots to collectively explore an unknown environment while maintaining formation and reaching specific designated locations.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_target_reached</Condition><Action>form_circle</Action><Action>scatter</Action></Sequence><Sequence><Condition>is_formation_intact</Condition><Action>move_forward</Action></Sequence><Sequence><Condition>is_swarm_together</Condition><Action>gather</Action></Sequence></Selector><Sequence><Condition>is_swarm_together</Condition><Action>move_random</Action></Sequence></BehaviorTree>
###
4.// INSTRUCTIONS: Use only the following behaviors {'detect_target': 'Action: Use sensors to detect a target within the environment.', 'move_towards_target': 'Action: Move towards the detected target within a certain range.', 'interact_with_target': 'Action: Perform a specific interaction with the target, such as picking up an object.', 'drop_object': 'Action: Safely drop the carried object to the ground.', 'is_object_held': 'Condition: Check if the robot is currently holding an object.', 'is_target_nearby': 'Condition: Check if the target is within a certain range of distance.', 'is_interaction_successful': 'Condition: Check if the interaction with the target was successful.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Go towards the target, pick it up, and drop it at a specific location.'Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree><Sequence><Action>detect_target</Action><Sequence><Condition>is_target_nearby</Condition><Selector><Sequence><Condition>is_object_held</Condition><Action>drop_object</Action></Sequence><Selector><Sequence><Condition>is_target_nearby</Condition><Selector><Sequence><Action>interact_with_target</Action><Action>move_towards_target</Action></Sequence><Sequence><Action>wander</Action></Sequence></Selector></Sequence></Selector></Sequence></Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'find_target': 'Action: Use visual and auditory sensors to search for a specific target within the environment.', 'move_towards_target': 'Action: Move towards the target while avoiding obstacles and adjusting speed according to distance.', 'attack_target': 'Action: Attack and engage with the target upon reaching it.', 'avoid_obstacle': 'Action: Steer away from any detected obstacles to avoid collisions.', 'detect_converging_threats': 'Condition: Check for any potential threats approaching from multiple directions.', 'is_target_reached': 'Condition: Check if the target has been successfully reached and engaged with.', 'is_obstacle_detected': 'Condition: Check if there are any obstacles nearby.', 'is_threat_detected': 'Condition: Check for any threats detected within a certain range.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Defend a specific location by searching for and engaging any potential threats.'Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree><Sequence><Action>find_target</Action><Selector><Sequence><Condition>is_threat_detected</Condition><Selector><Sequence><Condition>is_target_reached</Condition><Action>attack_target</Action></Sequence><Action>move_towards_target</Action></Selector><Sequence><Condition>is_obstacle_detected</Condition><Action>avoid_obstacle</Action></Sequence><Sequence><Condition>is_threat_detected</Condition><Action>move_away_from_threat</Action></Sequence></Selector></Sequence></BehaviorTree>

###
6. // INSTRUCTIONS: Use only the following behaviors {'navigate_to_destination': 'Action: Use sensors and mapping algorithms to navigate towards a given destination.', 'collect_data': 'Action: Collect and record data using various sensors and instruments.', 'perform_analysis': 'Action: Analyze the collected data using predefined algorithms and criteria.', 'upload_data': 'Action: Upload the analyzed data to a specified server or storage location.', 'is_at_destination': 'Condition: Check if the robot has reached the designated destination.', 'is_data_collected': 'Condition: Check if enough data has been collected for analysis.', 'is_analysis_successful': 'Condition: Check if the analysis was successful.', 'is_data_uploaded': 'Condition: Check if the data has been successfully uploaded.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6. // USER COMMAND: generate behavior tree to 'Collect and analyze data at a specific location, then upload it to a server.'Output only the XML behavior tree without extra text.
6. // OUTPUT:
<BehaviorTree><Sequence><Action>navigate_to_destination</Action><Selector><Sequence><Condition>is_at_destination</Condition><Selector><Sequence><Condition>is_data_collected</Condition><Selector><Sequence><Condition>is_analysis_successful</Condition><Action>upload_data</Action></Sequence><Sequence><Action>perform_analysis</Action></Sequence></Selector></Sequence><Sequence><Action>collect_data</Action></Sequence></Selector></Sequence></BehaviorTree> 
###
4.// INSTRUCTIONS: Use only the following behaviors {'move_towards_light': "Action: Move towards the light source. Always returns True.", 'follow_target': 'Action: Follow the identified target. Always returns True.', 'flash_light_on': "Action: Turn the flashlight on. Always returns True.", 'flash_light_off': "Action: Turn the flashlight off. Always returns True.", 'is_target_found': 'Condition: Check if target is detected. Returns True if the target is detected, False otherwise.', 'is_flashlight_on': 'Condition: Check if the flashlight is on. Returns True if the flashlight is on, False if it is off.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Find the target, follow it while keeping the flashlight on.'. Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_flashlight_on</Condition><Action>flash_light_off</Action></Sequence><Selector><Sequence><Condition>is_target_found</Condition><Action>follow_target</Action></Sequence><Action>move_towards_light</Action></Selector><Action>flash_light_on</Action></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_red': "Action: Change agent's color to red. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'move_away_from_target': 'Action: Move away from the identified target. Always returns True.', 'move_towards_target': 'Action: Move towards the identified target. Always returns True.', 'stop_movement_agent': 'Action: Stop agent's movement. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Move towards the target, avoid obstacles, and stop once the target is reached.'. Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>is_target_detected</Condition> <Action>move_away_from_target</Action> </Sequence> <Sequence> <Condition>is_agent_in_nest</Condition> <Action>change_color_to_red</Action> <Action>task_completed</Action> </Sequence> <Sequence> <Condition>is_obstacle_detected</Condition> <Action>avoid_obstacle</Action> </Sequence> </Selector> <Sequence> <Condition>is_target_detected</Condition> <Action>move_towards_target</Action> <Action>stop_movement_agent</Action> </Sequence> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_blue': "Action: Change agent's color to blue. Always returns True.", 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'move_randomly': 'Action: Move randomly within the environment. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_color_changed': 'Condition: Check if agent's color is changed. Returns True if the color is changed, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Randomly move around until the agent's color is changed and then return to the nest.'. Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree> <Selector> <Action>move_randomly</Action> <Sequence> <Condition>is_agent_in_nest</Condition> <Action>change_color_to_blue</Action> <Action>agent_movement_freeze</Action> </Sequence> </Selector> <Sequence> <Condition>is_obstacle_detected</Condition> <Action>avoid_obstacle</Action> <Action>continue_movement_agent</Action> </Sequence> <Condition>is_color_changed</Condition> </BehaviorTree> 
###
4.// INSTRUCTIONS: Use only the following behaviors {'follow_leader': 'Action: Follow the swarm leader at a reasonable distance.', 'attack_enemy': 'Action: Attack the enemy robot when in range.', 'back_off': 'Action: Back off and maintain a safe distance from the enemy robot.', 'retreat_to_nest': 'Action: Retreat to the swarm nest when low on health.', 'is_near_leader': 'Condition: Check if the agent is near the swarm leader.', 'is_near_enemy': 'Condition: Check if the agent is within attack range of an enemy.', 'is_low_health': 'Condition: Check if the agent's health is below a certain threshold.', 'is_in_nest': 'Condition: Check if the agent is currently in the swarm nest.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Generate a behavior tree for a swarm of robots to protect the leader while attacking any nearby enemies, and retreat to the nest if low on health.
4.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>is_near_enemy</Condition><Action>attack_enemy</Action><Action>back_off</Action></Sequence><Action>follow_leader</Action></Selector><Sequence><Condition>is_low_health</Condition><Action>retreat_to_nest</Action></Sequence></Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'find_target': 'Action: Move towards and locate the desired target.', 'approach_target': 'Action: Move closer to the target while avoiding obstacles.', 'pick_up_object': 'Action: Pick up and grab onto the target object.', 'release_object': 'Action: Release and put down the target object.', 'is_obstacle_in_path': 'Condition: Check if there is an obstacle blocking the path ahead.', 'is_target_reached': 'Condition: Check if the target has been reached.', 'is_object_picked_up': 'Condition: Check if the target object has been successfully picked up.', 'is_object_dropped': 'Condition: Check if the target object has been successfully dropped.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Generate a behavior tree for a swarm of robots to work together to find, pick up, and transport a specific object to a desired location while avoiding obstacles.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_target_reached</Condition><Action>pick_up_object</Action><Action>approach_target</Action></Sequence><Sequence><Condition>is_obstacle_in_path</Condition><Action>find_target</Action></Sequence><Sequence><Condition>is_object_picked_up</Condition><Action>release_object</Action></Sequence></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'follow_leader': 'Action: Follow the swarm leader at a safe distance.', 'gather_resources': 'Action: Gather and collect resources from the environment.', 'build_structure': 'Action: Construct a structure using the gathered resources.', 'check_resource_level': 'Condition: Check if the agent's resources are below a certain threshold.', 'is_at_resource_site': 'Condition: Check if the agent is currently at a resource gathering site.', 'is_structure_built': 'Condition: Check if the structure has been successfully built.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Generate a behavior tree for a swarm of robots to gather resources, construct a designated structure, and follow the leader's commands.
6.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>is_at_resource_site</Condition><Action>gather_resources</Action><Sequence><Condition>check_resource_level</Condition><Action>build_structure</Action></Sequence></Sequence><Action>follow_leader</Action></Selector><Sequence><Condition>is_structure_built</Condition><Action>task_completed</Action></Sequence></Sequence></BehaviorTree> 
###
4.// INSTRUCTIONS: Use only the following behaviors {'move_to_target': "Action: Move towards the target location. Always returns True.", 'search_for_target': "Action: Move randomly within the environment to search for the target. Always returns True.", 'turn_left': 'Action: Turn the robot left by 90 degrees. Always returns True.', 'turn_right': 'Action: Turn the robot right by 90 degrees. Always returns True.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 5 units. Returns True if the target is within 5 units of distance, False otherwise.', 'rotate_counterclockwise': 'Action: Rotate the robot in a counterclockwise direction. Always returns True.', 'rotate_clockwise': 'Action: Rotate the robot in a clockwise direction. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Move towards the target location, but if an obstacle is detected, rotate clockwise and try again.'Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>is_obstacle_detected</Condition> <Selector> <Action>rotate_clockwise</Action> <Action>search_for_target</Action> </Selector> </Sequence> <Action>move_to_target</Action> </Selector> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'move_to_target': "Action: Move towards the target location. Always returns True.", 'search_for_target': "Action: Move randomly within the environment to search for the target. Always returns True.", 'face_target': "Action: Rotate the robot to face the target. Returns True when successfully facing the target, False otherwise.", 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 5 units. Returns True if the target is within 5 units of distance, False otherwise.', 'rotate_counterclockwise': 'Action: Rotate the robot in a counterclockwise direction. Always returns True.', 'rotate_clockwise': 'Action: Rotate the robot in a clockwise direction. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'If target is not detected initially, search for it and then move towards the target.'Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>is_target_detected</Condition> <Action>face_target</Action> <Action>move_to_target</Action> </Sequence> <Action>search_for_target</Action> </Selector> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'move_forward': 'Action: Move one step forward while maintaining formation.', 'shift_left': 'Action: Shift the entire formation one step to the left.', 'shift_right': 'Action: Shift the entire formation one step to the right.', 'lift_object': 'Action: Lift and grab onto the transportable object.', 'release_object': 'Action: Release and put down the transportable object.', 'is_obstacle_ahead': 'Condition: Check if there is an obstacle blocking the path ahead for the formation.', 'is_object_lifted': 'Condition: Check if the transportable object is currently being lifted and carried.', 'is_formation_broken': 'Condition: Check if the formation has become misaligned or broken.', 'wait': 'Action: Do nothing and wait for a specified amount of time. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Safely transport an object while avoiding obstacles, maintaining formation, and taking breaks periodically.'Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>is_object_lifted</Condition> <Selector> <Sequence> <Condition>is_obstacle_ahead</Condition> <Action>shift_right</Action> </Sequence> <Action>move_forward</Action> </Selector> </Sequence> <Sequence> <Condition>is_formation_broken</Condition> <Action>reform_formation</Action> </Sequence> <Sequence> <Condition>is_object_detected</Condition> <Action>lift_object</Action> </Sequence> <Selector> <Sequence> <Action>wait</Action> </Sequence> <Sequence> <Action>release_object</Action> </Sequence> </Selector> </Selector> </BehaviorTree>//! Not sure how to handle tasks with two different conditions for the same action (i.e. forming a line and then changing color). This solution assumes the line is already formed before the color change.

###
4.// INSTRUCTIONS: Use only the following behaviors {'forward': 'Action: Move one step forward.', 'turn_left': 'Action: Turn left 90 degrees.', 'turn_right': 'Action: Turn right 90 degrees.', 'follow_line': 'Action: Follow the black line on the ground.', 'is_obstacle_detected': 'Condition: Check if an obstacle is detected in front of the robot.', 'is_at_intersection': 'Condition: Check if the robot is at an intersection of two lines.', 'is_on_line': 'Condition: Check if the robot is currently on a black line on the ground.', 'is_moving': 'Condition: Check if the robot is currently moving.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Generate a behavior tree for a robot to follow a black line on the ground while avoiding obstacles and making turns at intersections.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_on_line</Condition><Action>forward</Action></Sequence><Sequence><Condition>is_moving</Condition><Selector><Sequence><Condition>is_obstacle_detected</Condition><Action>turn_left</Action></Sequence><Action>follow_line</Action></Selector></Sequence><Action>form_line</Action></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'move_forward': 'Action: Move one step forward while maintaining formation.', 'shift_left': 'Action: Shift the entire formation one step to the left.', 'shift_right': 'Action: Shift the entire formation one step to the right.', 'detect_enemy': 'Condition: Check for enemy robots in the vicinity.', 'attack_enemy': 'Action: Launch an attack on the enemy robots in range.', 'is_defensive_formation': 'Condition: Check if the swarm is in a defensive formation.', 'form_defensive_formation': 'Action: Reorganize the swarm into a defensive formation.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Generate a behavior tree for a swarm of robots to defend against enemy attacks while maintaining their defensive formation and launching attacks when necessary.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_defensive_formation</Condition><Selector><Sequence><Condition>detect_enemy</Condition><Action>attack_enemy</Action></Sequence><Action>move_forward</Action></Selector></Sequence><Selector><Sequence><Condition>detect_enemy</Condition><Action>form_defensive_formation</Action></Sequence><Action>follow_line</Action></Selector></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'search_target': 'Action: Scan the environment to detect the location of the target.', 'move_towards_target': 'Action: Move towards the target.', 'take_picture': 'Action: Take a picture of the target when in sight.', 'analyze_picture': 'Action: Analyze the picture to gather information about the target.', 'find_hiding_spot': 'Action: Search for a hiding spot that provides coverage from the enemy.', 'hide': 'Action: Hide in the detected hiding spot.', 'is_target_in_range': 'Condition: Check if the target is within sight and range.', 'is_enemy_detected': 'Condition: Check for enemy robots in the vicinity.', 'is_hiding_spot_available': 'Condition: Check if a suitable hiding spot has been found.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Generate a behavior tree for a robot to locate and gather information about a target while avoiding enemy detection and finding a suitable hiding spot.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_enemy_detected</Condition><Selector><Sequence><Condition>is_hiding_spot_available</Condition><Selector><Sequence><Condition>is_target_in_range</Condition><Action>take_picture</Action><Action>analyze_picture</Action></Sequence><Action>hide</Action></Selector></Sequence><Action>search_target</Action></Selector><Action>move_towards_target</Action></Sequence><Action>find_hiding_spot</Action></Selector></BehaviorTree> 
 ###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'follow_target': 'Action: Follow the specified target. Returns True once target is reached.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_red': "Action: Change agent's color to red. Always returns True.", 'change_color_to_purple': "Action: Change agent's color to purple. Always returns True.", 'is_agent_at_target': 'Condition: Check if the agent has reached the target. Returns True if the agent is at the target, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Navigate through obstacles, follow target, change color to purple, and freeze movement when reaching target'.Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>is_path_clear</Condition> <Action>avoid_obstacle</Action> <Action>follow_target</Action> <Sequence> <Condition>is_agent_at_target</Condition> <Action>change_color_to_purple</Action> <Action>agent_movement_freeze</Action> </Sequence> </Sequence> <Sequence> <Condition>is_obstacle_detected</Condition> <Action>avoid_obstacle</Action> <Action>follow_target</Action> </Sequence> </Selector> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'dance': 'Action: Perform a sequence of dance moves. Always returns True.', 'send_message': "Action: Send a message to other robots. Returns True once message is sent.", 'is_agent_at_target': 'Condition: Check if the agent has reached the target. Returns True if the agent is at the target, False otherwise.', 'is_message_sent': 'Condition: Check if the message has been sent successfully. Returns True if the message is sent, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Navigate through obstacles, send message to other robots, dance, and freeze movement when reaching target'. Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>is_path_clear</Condition> <Action>avoid_obstacle</Action> <Action>send_message</Action> <Action>dance</Action> <Sequence> <Condition>is_agent_at_target</Condition> <Action>agent_movement_freeze</Action> </Sequence> </Sequence> <Sequence> <Condition>is_obstacle_detected</Condition> <Action>avoid_obstacle</Action> <Action>send_message</Action> <Sequence> <Condition>is_message_sent</Condition> <Action>dance</Action> </Sequence> </Sequence> </Selector> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'find_path_to_target': 'Action: Find the path to the specified target. Returns True once path is found.', 'follow_path': 'Action: Follow the path previously found. Returns True once path is completed.', 'switch_camera': "Action: Switch to a different camera for a better view. Always returns True.", 'turn_camera_left': "Action: Turn the camera to the left. Always returns True.", 'turn_camera_right': "Action: Turn the camera to the right. Always returns True.", 'is_path_found': 'Condition: Check if the path to the target has been found. Returns True if the path is found, False otherwise.', 'is_camera_switched': 'Condition: Check if the camera has been successfully switched. Returns True if the camera is switched, False otherwise.', 'is_camera_turned': 'Condition: Check if the camera has been successfully turned. Returns True if the camera is turned, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Find the optimal path to the target, switch to camera 2, turn the camera to the right, follow the path, and return to original camera'. Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Action>find_path_to_target</Action> <Sequence> <Condition>is_path_found</Condition> <Action>switch_camera</Action> <Sequence> <Condition>is_camera_switched</Condition> <Action>turn_camera_right</Action> <Action>follow_path</Action> <Sequence> <Condition>is_path_completed</Condition> <Action>switch_camera</Action> </Sequence> </Sequence> </Sequence> <Action>switch_camera</Action> </Sequence> </BehaviorTree></BehaviorTree>

###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Avoid obstacles and continue moving until target is reached, then freeze movement and change color to green.'
Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>is_target_detected</Condition> <Action>agent_movement_freeze</Action> <Action>change_color_to_green</Action> <Action>task_completed</Action> </Sequence> <Sequence> <Condition>is_obstacle_detected</Condition> <Action>continue_movement_agent</Action> <Action>avoid_obstacle</Action> </Sequence> </Selector> </Sequence> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'form_triangle': 'Action: Form a triangle with other agents. Always returns True.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_triangle_formed': 'Condition: Check if a triangle is formed with other agents. Returns True if the triangle is formed, False otherwise.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Form a triangle with other agents, then change color to green and return to the nest, change color to white.'
Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>is_triangle_formed</Condition> <Action>change_color_to_green</Action> <Action>task_completed</Action> </Sequence> <Sequence> <Action>form_triangle</Action> <Condition>is_agent_in_nest</Condition> <Action>change_color_to_white</Action> <Action>task_completed</Action> </Sequence> </Selector> </Sequence> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'drop_resource': 'Action: Drop resource at the specified location. Returns True if the resource is successfully dropped, False otherwise.', 'find_resource': 'Action: Find resource within 10 units. Returns True if resource is found, False otherwise.', 'get_resource': 'Action: Get resource from the specified location. Returns True if the resource is successfully retrieved, False otherwise.', 'is_resource_full': 'Condition: Check if agent's resource capacity is full. Returns True if the capacity is full, False otherwise.', 'is_resource_nearby': 'Condition: Check if there is a resource within 10 units. Returns True if a resource is within range, False otherwise.', 'pick_up_resource': 'Action: Pick up resource at the specified location. Returns True if the resource is successfully picked up, False otherwise.', 'return_to_nest': 'Action: Return to the nest. Always returns True.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Go to the resource, pick it up, return to the nest, drop the resource, and then change color to green.'
Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>is_resource_nearby</Condition> <Action>pick_up_resource</Action> <Condition>is_resource_full</Condition> <Action>return_to_nest</Action> <Action>drop_resource</Action> <Action>change_color_to_green</Action> <Action>agent_movement_freeze</Action> <Action>task_completed</Action> </Sequence> <Action>find_resource</Action> </Selector> </Sequence> </BehaviorTree>
###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_circle': 'Action: Form a circle with other robot agents. Always returns True.', 'is_robot_in_circle': 'Condition: Check if the agent is within the formed circle. Returns True if the agent is in the circle, False otherwise.', 'is_circle_formed': 'Condition: Check if a circle is formed with other agents. Returns True if the circle is formed, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.', 'turn_left': 'Action: Turn the robot 90 degrees to the left. Always returns True.', 'turn_right': 'Action: Turn the robot 90 degrees to the right. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Circle formation: when a circle is formed, continue movement, if obstacle detected, turn left and continue, if no path clear, turn right and continue'. Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_circle_formed</Condition><Action>form_circle</Action><Condition>is_robot_in_circle</Condition><Action>continue_movement_agent</Action></Sequence><Sequence><Condition>is_obstacle_detected</Condition><Action>turn_left</Action><Action>continue_movement_agent</Action></Sequence><Sequence><Condition>is_path_clear</Condition><Action>turn_right</Action><Action>continue_movement_agent</Action></Sequence><Action>wander</Action></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'follow_target': 'Action: Follow the designated target agent. Always returns True.', 'is_target_in_range': 'Condition: Check if the target agent is within a certain radius. Returns True if the target is within range, False otherwise.', 'is_target_visible': 'Condition: Check if the target agent is within the field of view. Returns True if the target is visible, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Follow designated target: if target is within range and visible, continue movement, if an obstacle is detected, turn left and continue, if no path clear, turn right and continue.' Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_target_in_range</Condition><Action>follow_target</Action><Condition>is_target_visible</Condition><Action>continue_movement_agent</Action></Sequence><Sequence><Condition>is_obstacle_detected</Condition><Action>turn_left</Action><Action>continue_movement_agent</Action></Sequence><Sequence><Condition>is_path_clear</Condition><Action>turn_right</Action><Action>continue_movement_agent</Action></Sequence><Action>wander</Action></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'switch_positions': 'Action: Switch positions with another agent within 5 units. Always return True.', 'is_agent_in_range': 'Condition: Check if another agent is within 5 units. Returns True if another agent is in range, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Form a line with another agent and switch positions, if an obstacle is detected, turn left and continue, if no path clear, turn right and continue.'Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_line_formed</Condition><Action>form_line</Action><Condition>is_agent_in_range</Condition><Action>switch_positions</Action></Sequence><Sequence><Condition>is_obstacle_detected</Condition><Action>turn_left</Action><Action>continue_movement_agent</Action></Sequence><Sequence><Condition>is_path_clear</Condition><Action>turn_right</Action><Action>continue_movement_agent</Action></Sequence><Action>wander</Action></Selector></BehaviorTree> 
###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'navigate through a maze, avoid obstacles, and reach the end goal' Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree> <Sequence> <Condition>is_obstacle_detected</Condition> <Action>avoid_obstacle</Action> <Action>continue_movement_agent</Action> <Condition>is_target_reached</Condition> <Action>change_color_to_white</Action> <Action>task_completed</Action> </Sequence> <Sequence> <Selector> <Condition>is_line_formed</Condition> <Action>form_line</Action> </Selector> <Action>wander</Action> </Sequence> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'move_forward': 'Action: Move one step forward while maintaining formation.', 'shift_left': 'Action: Shift the entire formation one step to the left.', 'shift_right': 'Action: Shift the entire formation one step to the right.', 'lift_object': 'Action: Lift and grab onto the transportable object.', 'release_object': 'Action: Release and put down the transportable object.', 'is_obstacle_ahead': 'Condition: Check if there is an obstacle blocking the path ahead for the formation.', 'is_object_lifted': 'Condition: Check if the transportable object is currently being lifted and carried.', 'is_formation_broken': 'Condition: Check if the formation has become misaligned or broken.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Collect all the scattered objects in the field, navigating around obstacles and returning each object to the starting point in a systematic manner.'
5.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>is_object_lifted</Condition> <Selector> <Sequence> <Condition>is_obstacle_ahead</Condition> <Action>shift_right</Action> </Sequence> <Action>move_forward</Action> </Selector> </Sequence> <Sequence> <Condition>is_formation_broken</Condition> <Action>reform_formation</Action> </Sequence> <Sequence> <Condition>is_object_detected</Condition> <Action>lift_object</Action> <Action>navigate_to_start_point</Action> <Action>release_object</Action> <Action>task_completed</Action> </Sequence> </Selector> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Find and collect scattered resources, avoiding enemies and returning to the base.'
6.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>is_obstacle_detected</Condition> <Action>avoid_obstacle</Action> <Action>continue_movement_agent</Action> <Condition>is_target_reached</Condition> <Action>attack_enemy</Action> </Sequence> <Sequence> <Selector> <Condition>is_line_formed</Condition> <Action>form_line</Action> </Selector> <Action>wander</Action> </Sequence> </Selector> <Action>form_line</Action> <Condition>is_target_detected</Condition> <Action>collect_resource</Action> <Action>navigate_to_base</Action> <Action>return_resource</Action> <Action>task_completed</Action> </BehaviorTree> 
###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'follow_path_to_nest': 'Action: Follow the pre-defined path to return to the nest. Returns True when the nest is reached.', 'form_circle': 'Action: Form a circle with the other agents. Returns True when the circle is formed.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_circle_formed': 'Condition: Check if a circle is formed. Returns True if the circle is formed, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Form a circle and follow path to the nest.'Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Action>form_circle</Action> <Condition>is_circle_formed</Condition> </Sequence> <Sequence> <Action>follow_path_to_nest</Action> <Condition>is_agent_in_nest</Condition> </Sequence> </Selector> </Sequence> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'dismantle_bridge': 'Action: Dismantle a bridge by removing planks one by one. Returns True when the bridge is fully dismantled.', 'is_bridge_full': 'Condition: Check if the bridge is fully built. Returns True if the bridge has all its planks, False if any planks are missing.', 'is_bridge_empty': 'Condition: Check if the bridge is fully dismantled. Returns True if the bridge has no planks, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Remove all planks from the bridge and change color to green.'Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Repeat> <Sequence> <Action>remove_plank_from_bridge</Action> <Condition>is_bridge_empty</Condition> </Sequence> </Repeat> </Selector> <Action>change_color_to_green</Action> </BehaviorTree>
 
###
6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'dismantle_bridge': 'Action: Dismantle a bridge by removing planks one by one. Returns True when the bridge is fully dismantled.', 'form_circle': 'Action: Form a circle with the other agents. Returns True when the circle is formed.', 'is_bridge_empty': 'Condition: Check if the bridge is fully dismantled. Returns True if the bridge has no planks, False otherwise.', 'is_circle_formed': 'Condition: Check if a circle is formed. Returns True if the circle is formed, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'set_target_location': 'Action: Set a new target location for the agent. Always returns True.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Form a circle, set a new target location, and continue movement.'Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Action>form_circle</Action> <Condition>is_circle_formed</Condition> </Sequence> <Sequence> <Action>set_target_location</Action> <Action>continue_movement_agent</Action> </Sequence> </Selector> </Sequence> </BehaviorTree>  
###
4.// INSTRUCTIONS: Use only the following behaviors {'avoid_obstacle': 'Action: Attempt to avoid any detected obstacles and maintain current behavior.', 'charge': �Action: Move towards and engage in charging with the nearest charging station.', 'collect_resource': 'Action: Move towards and collect the nearest available resource.', 'deposit_resource': 'Action: Move towards and deposit loaded resources at the nearest storage unit.', 'is_charging_enabled': 'Condition: Check if charging stations are enabled in the environment. Returns True if enabled, False otherwise.', 'is_resource_available': 'Condition: Check if there are resources available nearby. Returns True if resources are available, False otherwise.', 'is_enough_resource_loaded': 'Condition: Check if the robot is carrying enough resources. Returns True if the robot is carrying enough resources, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Generate a behavior tree for a swarm of robots to collect and deposit resources while also ensuring they have enough charge to continue working.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_resource_available</Condition><Selector><Sequence><Condition>is_enough_resource_loaded</Condition><Selector><Sequence><Condition>is_charging_enabled</Condition><Action>charge</Action></Sequence><Action>return_to_task</Action></Selector></Sequence><Sequence><Condition>is_enough_resource_loaded</Condition><Action>deposit_resource</Action></Sequence><Action>collect_resource</Action></Selector></Sequence><Sequence><Condition>is_task_completed</Condition><Action>return_to_charging_station</Action></Sequence><Action>avoid_obstacle</Action></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'form_circle': 'Action: Form a circle with neighboring robots.', 'form_square': 'Action: Form a square with neighboring robots.', 'move_forward': 'Action: Move forward while maintaining formation with neighboring robots.', 'rotate_left': 'Action: Rotate the formation to the left while maintaining formation.', 'rotate_right': 'Action: Rotate the formation to the right while maintaining formation.', 'is_formation_circle': 'Condition: Check if robots are currently in a circular formation. Returns True if in a circle, False otherwise.', 'is_formation_square': 'Condition: Check if robots are currently in a square formation. Returns True if in a square, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Generate a behavior tree for a swarm of robots to collectively form either a circle or square formation based on user input.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_formation_circle</Condition><Sequence><Condition>is_formation_square</Condition><Action>rotate_left</Action></Sequence><Action>form_square</Action></Sequence><Sequence><Condition>is_formation_square</Condition><Action>form_circle</Action></Sequence><Action>move_forward</Action></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'move_to_nest': 'Action: Move towards the designated nest area.', 'collect_food': 'Action: Move towards and collect the nearest available food source.', 'return_to_nest': 'Action: Return to the designated nest area while carrying collected food.', 'release_food': 'Action: Release and deposit collected food at the designated nest area.', 'is_nest_available': 'Condition: Check if the designated nest area is available for use. Returns True if available, False otherwise.', 'is_food_available': 'Condition: Check if there is food available for collection. Returns True if food is available, False otherwise.', 'is_food_collected': 'Condition: Check if the robot is currently carrying any collected food. Returns True if food is carried, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Generate a behavior tree for a swarm of robots to forage and collect food while also ensuring they return to a designated nest area with their collected food.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_food_available</Condition><Selector><Sequence><Condition>is_food_collected</Condition><Selector><Sequence><Condition>is_nest_available</Condition><Action>release_food</Action></Sequence><Action>return_to_nest</Action></Selector></Sequence><Action>collect_food</Action></Selector></Sequence><Sequence><Condition>is_task_completed</Condition><Action>return_to_nest</Action></Sequence><Action>move_to_nest</Action></Selector></BehaviorTree> 
###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_power_low': 'Condition: Check if power is low. Returns True if power is below 20%, False otherwise.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'return_to_base': 'Action: Return to base by following the same path taken to target. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Find the target, change color to green, and then return to base if power is low.'Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>is_target_detected</Condition> <Action>change_color_to_green</Action> <Action>is_power_low</Action> <Action>return_to_base</Action> </Sequence> <Selector> <Action>wander</Action> <Action>agent_movement_freeze</Action> </Selector> </Selector> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'move_towards_target': 'Action: Move towards the target. Always returns True.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wait_for_instructions': 'Action: Wait for further instructions by freezing movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Move towards the target, avoid obstacles, and wait for further instructions.'Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>is_target_detected</Condition> <Action>move_towards_target</Action> <Action>avoid_obstacle</Action> </Sequence> <Action>wait_for_instructions</Action> </Selector> </Sequence> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_grid': 'Action: Form a grid pattern with other agents. Always returns True.', 'is_agent_in_grid': 'Condition: Check if the agent is in a grid with other agents. Returns True if the agent is in a grid, False otherwise.', 'is_grid_formed': 'Condition: Check if a grid pattern is formed. Returns True if the grid is formed with other agents, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'join_grid': 'Action: Join an existing grid with other agents. Always returns True.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Join an existing grid, form a grid, and then find the target.'Output only the XML behavior tree without extra text.
6.// OUTPUT:
 <BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>is_agent_in_grid</Condition> <Action>change_color_to_green</Action> <Action>is_target_detected</Action> <Action>task_completed</Action> </Sequence> <Action>join_grid</Action 
###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'follow_wall': 'Action: Follow along the wall until reaching the target location. Always returns True.', 'change_color_to_yellow': "Action: Change agent's color to yellow. Always returns True.", 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_reached': 'Condition: Check if target is within 5 units. Returns True if the target is within 5 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.', 'turn_left': 'Action: Turn the robot 90 degrees to the left. Always returns True.', 'turn_right': 'Action: Turn the robot 90 degrees to the right. Always returns True.', 'is_at_target': 'Condition: Check if the robot has reached the designated target location. Returns True if at the target, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Follow the wall until reaching the target location, then turn left and change color to yellow'. Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>follow_wall</Action><Action>continue_movement_agent</Action><Sequence><Condition>is_target_reached</Condition><Action>turn_left</Action></Sequence></Sequence><Action>change_color_to_yellow</Action></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'move_to_target': 'Action: Move towards the designated target location. Always returns True.', 'stop_movement': 'Action: Stop the agent's movement. Always returns True.', 'change_color_to_blue': "Action: Change agent's color to blue. Always returns True.", 'change_color_to_red': "Action: Change agent's color to red. Always returns True.", 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_target_detected': 'Condition: Check if target is within 10 units. Returns True if the target is within 10 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 5 units. Returns True if the target is within 5 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.', 'is_at_target': 'Condition: Check if the robot has reached the designated target location. Returns True if at the target, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Move to the target location, if target is reached -> change color to blue, if target is not reached -> change color to red'. Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>move_to_target</Action><Sequence><Condition>is_target_reached</Condition><Action>change_color_to_blue</Action></Sequence></Sequence><Sequence><Condition>!is_target_reached</Condition><Action>change_color_to_red</Action></Sequence></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_red': "Action: Change agent's color to red. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'face_opposite_direction': 'Action: Turn the robot 180 degrees to face the opposite direction. Always returns True.', 'face_target': 'Action: Turn the robot towards the designated target location. Always returns True.', 'align_with_nest': 'Action: Align the robot with the nest. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Align the robot with the nest, then turn towards the target and change color to red if the target is not reached, or change color to green if the target is reached'. Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree> <Sequence> <Action>face_opposite_direction</Action> <Sequence> <Action>align_with_nest</Action> <Action>face_target</Action> </Sequence> <Selector> <Sequence> <Condition>is_target_reached</Condition> <Action>change_color_to_green</Action> </Sequence> <Sequence> <Condition>!is_target_reached</Condition> <Action>change_color_to_red</Action> </Sequence> </Selector> </Sequence> </BehaviorTree>
###
4.// INSTRUCTIONS: Use only the following behaviors {'move_to_target': 'Action: Move towards the designated target location.', 'avoid_collision': 'Action: Avoid any potential collisions with other robots or obstacles in the environment.', 'send_signal': 'Action: Send a signal to notify other robots of a potential threat or danger.', 'follow_leader': 'Action: Follow the designated leader robot in the formation.', 'is_target_reached': 'Condition: Check if the target location has been reached.', 'is_collision_detected': 'Condition: Check if a potential collision is detected in the environment.', 'is_leader_in_range': 'Condition: Check if the designated leader robot is within range to be followed by other robots.', 'is_threat_detected': 'Condition: Check if a potential threat or danger is detected in the environment.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Generate a behavior tree for a swarm of robots to collectively search and rescue a missing person, while avoiding potential collisions and following a designated leader.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_threat_detected</Condition><Action>send_signal</Action></Sequence><Sequence><Condition>is_collision_detected</Condition><Action>avoid_collision</Action></Sequence><Action>move_to_target</Action></Selector><Selector><Sequence><Condition>is_leader_in_range</Condition><Action>follow_leader</Action></Sequence><Action>wander</Action></Selector><Sequence><Condition>is_target_reached</Condition><Action>signal_rescue_completed</Action></Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'detect_obstacles': 'Action: Continuously scan and detect nearby obstacles in the environment.', 'navigate_through': 'Action: Strategically navigate through the obstacles to reach the designated target location.', 'gather_data': 'Action: Collect and gather data from the surrounding environment.', 'analyze_data': 'Action: Analyze and process the gathered data to make informed decisions.', 'is_target_reached': 'Condition: Check if the target location has been reached.', 'is_target_detected': 'Condition: Check if the target is within range of detection.', 'is_data_processed': 'Condition: Check if the gathered data has been analyzed and processed.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Generate a behavior tree for a swarm of exploration robots to navigate through obstacles, gather and analyze data, and reach a designated target location.
5.// OUTPUT:
<BehaviorTree><Sequence><Action>detect_obstacles</Action><Selector><Sequence><Condition>is_data_processed</Condition><Sequence><Action>navigate_through</Action><Action>gather_data</Action></Sequence></Sequence><Action>analyze_data</Action></Selector><Sequence><Condition>is_target_detected</Condition><Selector><Sequence><Condition>is_target_reached</Condition><Action>signal_target_found</Action></Sequence><Action>move_towards_target</Action></Selector></Sequence></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'observe_surroundings': 'Action: Continuously observe and scan the environment for any changes or disruptions.', 'maintain_distance': 'Action: Maintain a safe distance from other robots in the environment to avoid collisions.', 'coordinate_actions': 'Action: Communicate and coordinate actions with other robots in the swarm.', 'perform_task': 'Action: Perform a specific task assigned by the collective swarm algorithm.', 'is_obstacle_detected': 'Condition: Check if an obstacle is detected in the environment.', 'is_team_in_sync': 'Condition: Check if all robots in the swarm are synchronized in their actions and behaviors.', 'is_task_complete': 'Condition: Check if the assigned task has been completed.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Generate a behavior tree for a swarm of robots to collectively monitor and maintain the environment, while also performing assigned tasks and coordinating with other robots.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_obstacle_detected</Condition><Action>maintain_distance</Action></Sequence><Sequence><Condition>is_team_in_sync</Condition><Selector><Sequence><Condition>is_task_complete</Condition><Action>send_signal</Action></Sequence><Action>coordinate_actions</Action></Selector></Sequence><Action>observe_surroundings</Action></Selector><Sequence><Condition>is_task_assigned</Condition><Action>perform_task</Action></Sequence></BehaviorTree> 
###
4.// INSTRUCTIONS: Use only the following behaviors {'approach_target': 'Action: Move towards the designated goal/target position within a specified distance.', 'capture_target': 'Action: Interact with the target and capture it for retrieval or completion of a task.', 'release_target': 'Action: Release the captured target, allowing it to move freely again.', 'evade_enemy': 'Action: Move quickly and unpredictably to evade any identified enemy or threat.', 'is_target_reached': 'Condition: Check the distance between the agent and the target, and return True if within the specified range and False otherwise.', 'is_target_captured': 'Condition: Check if the target has been successfully captured and return True if so, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Generate a behavior tree for a swarm of robots to capture a designated target while avoiding any identified threats.
4.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_target_captured</Condition><Action>release_target</Action></Sequence><Sequence><Condition>is_target_reached</Condition><Action>capture_target</Action></Sequence><Selector><Sequence><Condition>is_target_detected</Condition><Action>approach_target</Action></Sequence><Action>evade_enemy</Action></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'report_location': 'Action: Communicate the current location and status to other members of the swarm.', 'update_map': "Action: Update the robot's internal map of the environment based on its current location and sensor readings. Always returns True.", 'navigate_to_exit': 'Action: Use the internal map to find the most efficient route to the designated exit point and navigate towards it.', 'explore_unknown_area': 'Action: Explore and map unknown areas of the environment.', 'detect_obstacle': 'Condition: Use sensors to detect any obstacles in the environment and return True if any are detected, False otherwise.', 'is_exit_reached': 'Condition: Check if the robot has reached the designated exit point and return True if so, False otherwise.', 'is_area_explored': 'Condition: Check the internal map to see if the current area has been explored and return True if so, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Generate a behavior tree for a swarm of robots to navigate and explore an unknown environment, communicate their location and progress, and reach a designated exit point.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_exit_reached</Condition><Action>update_map</Action></Sequence><Selector><Sequence><Condition>is_area_explored</Condition><Action>report_location</Action></Sequence><Sequence><Condition>detect_obstacle</Condition><Action>explore_unknown_area</Action></Sequence></Selector></Selector><Sequence><Action>update_map</Action><Action>navigate_to_exit</Action></Sequence></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'find_task': 'Action: Search for available tasks within the environment and return True if a task is found, False otherwise.', 'complete_task': 'Action: Perform the designated task, signaling completion when done.', 'return_to_nest': 'Action: Use internal map to find the most efficient route back to the designated nest area and navigate towards it.', 'is_nest_reached': 'Condition: Check if the robot has reached the designated nest area and return True if so, False otherwise.', 'is_task_completed': 'Condition: Check if the task has been completed and return True if so, False otherwise.', 'is_task_available': 'Condition: Check if there are any available tasks within the environment and return True if so, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Generate a behavior tree for a swarm of robots to search for and complete tasks within the environment while returning to a designated nest area.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_task_completed</Condition><Action>return_to_nest</Action></Sequence><Analyzer><Sequence><Condition>is_nest_reached</Condition><Action>return_to_nest</Action></Sequence><Action>find_task</Action></Analyzer></Selector><Sequence><Condition>is_task_available</Condition><Action>complete_task</Action></Sequence></BehaviorTree>
 
###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'change_color_to_red': "Action: Change agent's color to red. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'reach_destination': 'Action: Move to destination point. Returns True when the agent reaches the destination.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'walk_in_square': 'Action: Walk in a square pattern. Returns True when the agent has walked in a complete square.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Find a path, go to destination, walk in a square pattern, and change color to white when done.'Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Selector> <Sequence> <Condition>is_path_clear</Condition> <Action>reach_destination</Action> <Sequence> <Condition>reach_destination</Condition> <Action>walk_in_square</Action> </Sequence> <Action>task_completed</Action> </Sequence> </Sequence> <Selector> <Sequence> <Condition>is_agent_in_nest</Condition> <Action>change_color_to_white</Action> <Action>agent_movement_freeze</Action> </Sequence> <Action>walk_in_square</Action> </Selector> </Selector> </BehaviorTree>
 
###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Returns True when the agent has reached the target.", 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_red': "Action: Change agent's color to red. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'move_to_nest': 'Action: Move to the nest. Returns True when the agent has reached the nest.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Detect target, form a line, and move to nest when done.'Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>is_target_detected</Condition> <Condition>is_target_reached</Condition> <Action>change_color_to_red</Action> </Sequence> <Sequence> <Sequence> <Condition>is_line_formed</Condition> <Condition>is_path_clear</Condition> <Action>form_line</Action> </Sequence> <Condition>is_agent_in_nest</Condition> <Action>move_to_nest</Action> </Sequence> </Selector> </BehaviorTree>
 
###
6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_red': "Action: Change agent's color to red. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Navigate through obstacles, change color to red if an obstacle is detected, form a line and change color to green when target is reached, then return to the nest.'Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>is_obstacle_detected</Condition> <Action>change_color_to_red</Action> <Action>avoid_obstacle</Action> </Sequence> <Sequence> <Condition>is_target_detected</Condition> <Action>form_line</Action> <Action>change_color_to_green<Task> completed</Task> </Sequence> </Selector> <Selector> <Sequence> <Condition>is_path_clear</Condition> <Action>wander</Action> </Sequence> <Sequence> <Condition>is_agent_in_nest</Condition> <Action>agent_movement_freeze</Action> <Action>change_color_to_red</Action> <Action>agent_movement_freeze</Action> </Sequence> </Selector> </BehaviorTree>
###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'return_to_base': 'Action: Return to designated base location. Always returns True.', 'stop_and_watch': 'Action: Stop and scan the surroundings. Always returns True.', 'follow_path': 'Action: Follow the designated path. Always returns True.', 'is_agent_in_base_position': 'Condition: Check if agent has reached designated base position. Returns True if agent is in base position, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Return to base, stop and watch for any obstacles, and continue following designated path'. Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree> <Sequence> <Action>return_to_base</Action> <Selector> <Sequence> <Action>stop_and_watch</Action> <Condition>is_obstacle_detected</Condition> </Sequence> <Sequence> <Action>follow_path</Action> <Condition>is_path_clear</Condition> </Sequence> </Selector> </Sequence> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_blue': "Action: Change agent's color to blue. Always returns True.", 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_circle': 'Action: Form a circle with other robots. Always returns True.', 'is_robot_in_circle': 'Condition: Check if the agent is part of a circle formation. Returns True if agent is in a circle, False otherwise.', 'is_robot_in_group': 'Condition: Check if the agent is part of a group formation. Returns True if agent is in a group, False otherwise.', 'is_robot_in_line': 'Condition: Check if the agent is part of a line formation. Returns True if agent is in a line, False otherwise.', 'is_robot_nearby': 'Condition: Check for nearby robots. Returns True if there are robots within 10 units, False otherwise.', 'robot_move_to_position': 'Action: Move to designated position. Always returns True.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Form a circle with other robots, change color to blue, and move to designated position'. Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>is_robot_in_circle</Condition> <Action>change_color_to_blue</Action> <Action>agent_movement_freeze</Action> <Action>task_completed</Action> </Sequence> <Action>form_circle</Action></Selector> <Selector> <Sequence> <Condition>is_robot_nearby</Condition> <Action>robot_move_to_position</Action> </Sequence> <Action>wander</Action> </Selector> </Sequence> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'follow_wall': 'Action: Follow closest wall. Always returns True.', 'move_to_point': 'Action: Move to designated point. Always returns True.', 'rotate_left': 'Action: Rotate agent 90 degrees left. Always returns True.', 'rotate_right': 'Action: Rotate agent 90 degrees right. Always returns True.', 'is_wall_detected': 'Condition: Check for walls nearby. Returns True if a wall is detected, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_point_reached': 'Condition: Check if designated point is reached. Returns True if point is reached, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task).
6.// USER COMMAND: generate behavior tree to 'Follow the closest wall, avoid obstacles, and rotate 180 degrees'. Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>is_wall_detected</Condition> <Selector> <Sequence> <Action>avoid_obstacle</Action> <Condition>is_obstacle_detected</Condition> </Selector> <Action>follow_wall</Action> <Action>rotate_left</Action> <Action>rotate_left</Action> <Action>rotate_right</Action> <Action>task_completed</Action> </Sequence> </Selector> </BehaviorTree> 
###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Follow target, avoid obstacles, and change color to green when target is reached.'Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree><Sequence><Selector><Condition>is_target_detected</Condition><Sequence><Condition>is_path_clear</Condition><Action>continue_movement_agent</Action></Sequence><Action>avoid_obstacle</Action></Selector><Sequence><Condition>is_target_reached</Condition><Action>change_color_to_green</Action></Sequence></Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_intruder_detected': 'Condition: Check if an intruder is detected in the monitored area. Returns True if an intruder is detected, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Avoid obstacles, form a line, check for intruders, and change color to green.' Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Sequence> <Condition>is_obstacle_detected</Condition> <Action>avoid_obstacle</Action> </Sequence> <Action>wander</Sequence> <Sequence> <Sequence> <Condition>is_agent_in_nest</Condition> <Action>form_line</Action> <Action>task_completed</Action> </Sequence> <Sequence> <Condition>is_intruder_detected</Condition> <Action>change_color_to_green</Action> <Action>task_completed</Action> </Sequence> </Sequence> </Selector>

###
6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Move towards a target, change color to green when target is reached, and form a line.' Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>is_target_detected</Condition> <Action>continue_movement_agent</Action> </Sequence> <Sequence> <Condition>is_target_reached</Condition> <Action>change_color_to_green</Action> </Sequence> <Sequence> <Condition>is_line_formed</Condition> <Action>form_line</Action> </Sequence> </Selector> </BehaviorTree>
###
4.// INSTRUCTIONS: Use only the following behaviors {'move_forward': 'Action: Move the robot forward. Always returns True.', 'turn_left': 'Action: Turn the robot 90 degrees to the left. Always returns True.', 'turn_right': 'Action: Turn the robot 90 degrees to the right. Always returns True.', 'stop_movement': 'Action: Stop the robot's movement. Always returns True.', 'is_at_designated_position': 'Condition: Check if the robot is at the designated position. Returns True if at the position, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Navigate the robot through a maze and reach the designated position'. Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>is_obstacle_detected</Condition> <Action>stop_movement</Action> </Sequence> <Sequence> <Condition>is_at_designated_position</Condition> <Action>stop_movement</Action> </Sequence> <Selector> <Sequence> <Action>turn_left</Action> <Selector> <Sequence> <Condition>is_obstacle_detected</Condition> <Action>turn_right</Action> <Action>move_forward</Action> </Sequence> <Action>move_forward</Action> </Selector> </Selector> </Selector> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'move_forward': 'Action: Move the robot forward. Always returns True.', 'turn_left': 'Action: Turn the robot 90 degrees to the left. Always returns True.', 'turn_right': 'Action: Turn the robot 90 degrees to the right. Always returns True.', 'stop_movement': 'Action: Stop the robot's movement. Always returns True.', 'is_at_point_A': 'Condition: Check if the robot is at point A. Returns True if at point A, False otherwise.', 'is_at_point_B': 'Condition: Check if the robot is at point B. Returns True if at point B, False otherwise.', 'is_at_point_C': 'Condition: Check if the robot is at point C. Returns True if at point C, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Move the robot from point A to point B and then to point C'. Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>is_at_point_B</Condition> <Action>stop_movement</Action> <Action>turn_right</Action> </Sequence> <Selector> <Sequence> <Condition>is_at_point_A</Condition> <Action>stop_movement</Action> <Action>move_forward</Action> </Sequence> <Selector> <Sequence> <Condition>is_at_point_A</Condition> <Action>stop_movement</Action> <Action>turn_left</Action> </Sequence> </Selector> </Selector> <Selector> <Sequence> <Condition>is_at_point_C</Condition> <Action>stop_movement</Action> <Action>turn_left</Action> </Sequence> <Selector> <Sequence> <Condition>is_at_point_B</Condition> <Action>stop_movement</Action> <Action>move_forward</Action> </Sequence> </Selector> </Selector> </Sequence> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'detect_light': 'Condition: Check for light source. Returns True if a light source is detected, False otherwise.', 'move_towards_light': 'Action: Move towards the detected light source. Always returns True.', 'stop_movement': 'Action: Stop the robot's movement. Always returns True.', 'detect_obstacle': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'turn_around': 'Action: Turn the robot 180 degrees. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'When a light source is detected, move towards the light; when obstacle is detected, stop, turn around, and continue wandering'. Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>detect_light</Condition> <Action>stop_movement</Action> <Action>move_towards_light</Action> </Sequence> <Selector> <Sequence> <Condition>detect_obstacle</Condition> <Action>stop_movement</Action> <Action>turn_around</Action> </Sequence> <Action>wander</Action> </Selector> </BehaviorTree> 
###
4.// INSTRUCTIONS: Use only the following behaviors {'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'is_environment_safe': 'Condition: Check if the environment is safe for navigation. Returns True if no obstacles are present, False if obstacles are detected.', 'is_object_detected': 'Condition: Check if an object is detected. Returns True if an object is detected, False otherwise.', 'move_backwards': 'Action: Move one step backwards to avoid obstacle. Returns True if successful, False otherwise.', 'move_forward': 'Action: Move one step forward. Returns True if successful, False otherwise.', 'scan_area': 'Action: Rotate to scan the surrounding area for objects. Returns True if successful, False otherwise.', 'sleep': 'Action: Pause all movements and actions for 5 seconds. Returns True when completed.', 'take_picture': 'Action: Take a picture of the object detected. Returns True if successful, False otherwise.', 'task_completed': 'Action: Signal task completion by stopping all actions. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Navigate through a cluttered environment, take a picture of any detected object, and return to starting position.'Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>is_environment_safe</Condition> <Selector> <Sequence> <Condition>is_object_detected</Condition> <Action>take_picture</Action> <Action>task_completed</Action> </Sequence> <Sequence> <Condition>is_obstacle_detected</Condition> <Action>move_backwards</Action> </Sequence> <Action>move_forward</Action> </Selector> <Action>scan_area</Action> </Sequence> <Action>sleep</Action> </Selector> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'activate_disguise': 'Action: Activate the robot's disguise mode to blend in with the environment. Returns True if successful, False otherwise.', 'is_disguise_active': 'Condition: Check if the robot's disguise is active. Returns True if active, False otherwise.', 'locate_target': 'Action: Move towards the target location. Returns True if target is reached, False otherwise.', 'move_to_location': 'Action: Move to a specific location. Returns True if successful, False otherwise.', 'observe_surroundings': 'Action: Observe the surrounding environment for potential threats. Returns True after completing observation.', 'report_status': 'Action: Send a status report back to the base. Returns True after report is sent.', 'task_completed': 'Action: Signal task completion by stopping all actions. Always returns True.', 'use_weapon': 'Action: Use a weapon to defend against possible threats. Returns True if successful, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Infiltrate enemy base by using disguise mode, locate the target location, observe surroundings, and send a status report.'Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree> <Sequence> <Condition>is_disguise_active</Condition> <Action>activate_disguise</Action> <Sequence> <Condition>is_target_reached</Condition> <Action>task_completed</Action> </Sequence> <Sequence> <Action>locate_target</Action> <Selector> <Action>observe_surroundings</Action> <Action>use_weapon</Action> </Selector> </Sequence> <Action>report_status</Action> </Sequence> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'attack_enemy': 'Action: Initiate attack on the detected enemy. Returns True if successful, False otherwise.', 'detect_enemy': 'Condition: Check for any enemies within the vicinity. Returns True if an enemy is detected, False otherwise.', 'move_to_strategic_location': 'Action: Move to a strategic location for better positioning. Returns True if destination is reached, False otherwise.', 'protect_teammate': 'Action: Provide protective cover for teammate. Returns True if successful, False otherwise.', 'replenish_supplies': 'Action: Gather necessary resources or supplies. Returns True if successful, False otherwise.', 'scan_area': 'Action: Scan the surrounding area for potential threats or enemies. Returns True upon completion of scan.', 'task_completed': 'Action: Signal task completion by stopping all actions. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Defend team against enemy attack, scan surroundings for potential threats, and replenish supplies if needed.'Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>detect_enemy</Condition> <Action>attack_enemy</Action> </Sequence> <Action>scan_area</Action> <Sequence> <Condition>is_resource_needed</Condition> <Action>replenish_supplies</Action> <Action>task_completed</Action> </Sequence> <Sequence> <Condition>is_teammate_in_danger</Condition> <Action>protect_teammate</Action> </Sequence> <Action>move_to_strategic_location</Action> </Selector> </BehaviorTree>
###
4.// INSTRUCTIONS: Use only the following behaviors {'move_forward': 'Action: Move one step forward while maintaining formation.', 'shift_left': 'Action: Shift the entire formation one step to the left.', 'shift_right': 'Action: Shift the entire formation one step to the right.', 'lift_object': 'Action: Lift and grab onto the transportable object.', 'release_object': 'Action: Release and put down the transportable object.', 'is_obstacle_ahead': 'Condition: Check if there is an obstacle blocking the path ahead for the formation.', 'is_object_lifted': 'Condition: Check if the transportable object is currently being lifted and carried.', 'is_formation_broken': 'Condition: Check if the formation has become misaligned or broken.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree for a swarm of robots to navigate through a maze and reach the end point while maintaining formation
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_object_lifted</Condition><Selector><Sequence><Condition>is_obstacle_ahead</Condition><Action>shift_right</Action></Sequence><Action>move_forward</Action></Selector></Sequence><Sequence><Condition>is_formation_broken</Condition><Action>reform_formation</Action></Sequence><Sequence><Condition>is_goal_reached</Condition><Action>release_object</Action></Sequence></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'detect_object': 'Action: Use sensors to detect and locate an object in the environment.' 'move_towards_object': 'Action: Move towards the detected object.', 'is_object_reached': 'Condition: Check if the robot has reached the object.', 'grasp_object': 'Action: Use tools to grasp and hold onto the object.', 'carry_object': 'Action: Move while holding the object.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'avoid_obstacle': 'Action: Change direction to avoid detected obstacles.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree for a robot to locate, grasp, and carry an object while avoiding obstacles
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>detect_object</Action><Condition>is_obstacle_detected</Condition><Action>avoid_obstacle</Action><Action>move_towards_object</Action><Condition>is_object_reached</Condition><Action>grasp_object</Action></Sequence><Sequence><Condition>is_object_grasped</Condition><Action>carry_object</Action></Sequence></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'detect_location': 'Action: Use sensors to detect and locate surrounding objects and obstacles.', 'move_to_sides': 'Action: Move to the sides to avoid obstacles.', 'is_front_clear': 'Condition: Check if there are any obstacles in front of the robot.', 'is_left_empty': 'Condition: Check if the left side is clear for the robot to move towards.', 'is_right_empty': 'Condition: Check if the right side is clear for the robot to move towards.', 'move_forward': 'Action: Move the robot one step forward in the current direction.', 'turn_left': 'Action: Turn the robot 90 degrees to the left.', 'turn_right': 'Action: Turn the robot 90 degrees to the right.', 'send_signal': 'Action: Send a signal to other robots to coordinate movements.', 'wait_for_signal': 'Condition: Check if a signal has been received from another robot.', 'join_formation': 'Action: Move towards the formation and join with other robots.', 'is_formation_full': 'Condition: Check if the formation is complete with all robots.', 'task_completed': 'Action: Signal task completion by freezing movement.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree for a swarm of robots to navigate through a complex maze and join an existing formation while avoiding obstacles
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>detect_location</Action><Condition>is_obstacle_detected</Condition><Action>turn_right</Action><Action>move_to_sides</Action></Sequence><Sequence><Condition>is_front_clear</Condition><Action>move_forward</Action></Sequence><Sequence><Condition>is_left_empty</Condition><Action>turn_left</Action><Action>move_forward</Action></Sequence><Sequence><Condition>is_right_empty</Condition><Action>turn_right</Action><Action>move_forward</Action></Sequence><Sequence><Condition>is_formation_full</Condition><Action>task_completed</Action></Sequence><Action>send_signal</Action></Selector></BehaviorTree>
###
4.// INSTRUCTIONS: Use only the following behaviors {'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.', 'task_failed': 'Action: Handle task failure by returning to the nest and changing color to red. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Search for target while avoiding obstacles, if target is detected then grab it and return home. If no target is found, perform a random wander and change color to red.'Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_target_detected</Condition><Action>grab_target</Action><Action>task_completed</Action></Sequence><Sequence><Condition>is_target_detected</Condition><Action>wander</Action></Sequence><Sequence><Condition>is_agent_in_nest</Condition><Action>change_color_to_red</Action></Sequence></Selector><Selector><Sequence><Condition>is_agent_in_nest</Condition><Action>change_color_to_green</Action></Sequence><Action>avoid_obstacle</Action></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.', 'go_to_target': 'Action: Move towards the target. Always return True.', 'look_for_target': 'Action: Scan the environment for the target. Always return True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Search for the target by scanning the environment, if target is not found within 3 attempts then form a line and continue movement towards the target' Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>is_target_reached</Condition><Action>task_completed</Action></Sequence><Action>go_to_target</Action></Selector><Sequence><Condition>is_line_formed</Condition><Sequence><Condition>is_agent_in_nest</Condition><Action>form_line</Action></Sequence></Sequence><Selector><Sequence><Condition>is_target_reached</Condition><Action>task_failed</Action></Sequence><Action>wander</Action></Selector></Sequence></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'is_home': 'Condition: Check if the robot is at the designated home location. Returns True if at the home location, False otherwise.', 'is_food_detected': 'Condition: Check if food source is within range. Returns True if food source is detected, False otherwise.', 'eat_food': 'Action: Eat food from nearby food source. Always returns True.', 'arrive_at_food': 'Action: Move towards and stop at the nearby food source. Always returns True.', 'go_home': 'Action: Return to the designated home location. Always returns True.', 'follow_home_path': 'Action: Follow a predetermined path towards the designated home location. Always returns True.', 'is_scared': 'Condition: Check if the robot senses danger. Returns True if danger is sensed, False otherwise.', 'hide': 'Action: Find a safe place to hide. Always returns True.', 'run_away': 'Action: Run away from the source of danger. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Forage for food, if danger is detected while foraging, run away and then return to the designated home location' Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_food_detected</Condition><Sequence><Condition>is_scared</Condition><Action>run_away</Action></Sequence><Action>arrive_at_food</Action></Sequence><Sequence><Condition>is_scared</Condition><Action>hide</Action></Sequence><Selector><Sequence><Condition>is_food_detected</Condition><Action>eat_food</Action></Sequence><Sequence><Condition>is_home</Condition><Action>go_home</Action></Sequence></Selector><Action>follow_home_path</Action></Sequence></BehaviorTree> 
###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_heading_to_90': "Action: Rotate the agent's heading to 90 degrees. Always returns True.", 'change_heading_to_270': "Action: Rotate the agent's heading to 270 degrees. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'move_to_object': 'Action: Move towards a specified object until reaching it. Always returns True.', 'is_agent_facing_obstacle': 'Condition: Check if the agent is currently facing an obstacle. Returns True if facing an obstacle, False otherwise.', 'is_object_in_sight': 'Condition: Check if a specified object is within the agent's line of sight. Returns True if the object is visible, False otherwise.', 'is_rotated_to_90': 'Condition: Check if the agent's heading is currently at 90 degrees. Returns True if the heading is 90 degrees, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task.)
4.// USER COMMAND: Generate a behavior tree for a swarm of robots to navigate through a maze and reach a hidden object, rotating to alternate directions if the object is not found.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition> is_agent_facing_obstacle</Condition><Action>avoid_obstacle</Action></Sequence><Selector><Sequence><Condition>is_object_in_sight</Condition><Action>move_to_object</Action></Sequence><Selector><Sequence><Condition>is_rotated_to_90</Condition><Action>change_heading_to_270</Action></Sequence><Action>change_heading_to_90</Action></Selector></Selector></Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'assign_direction': 'Action: Assign a specific direction to the agent based on its current location in relation to a specified object. Always returns True.', 'increase_brightness': "Action: Increase the agent's brightness by 10%. Always returns True.", 'decrease_brightness': "Action: Decrease the agent's brightness by 10%. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'move_to_random_location': 'Action: Move to a random location within a specified area. Always returns True.', 'is_agent_near_object': 'Condition: Check if the agent is within a specified distance from the specified object. Returns True if agent is near the object, False otherwise.', 'is_brightness_at_max': 'Condition: Check if the agent's brightness is at maximum (100%). Returns True if brightness is at 100%, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task.)
5.// USER COMMAND: generate behavior tree to 'Move towards the light source, increase brightness, and then move to a random location within the room.' Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_agent_near_object</Condition><Action>assign_direction</Action><Selector><Sequence><Action>increase_brightness</Action><Selector><Sequence><Condition>is_brightness_at_max</Condition><Action>move_to_random_location</Action></Sequence></Selector><Action>continue_movement_agent</Action></Selector></Sequence></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'pick_up_object': 'Action: Pick up a specified object if it is within reach. Returns True if object is picked up, False otherwise.', 'put_down_object': 'Action: Put down a currently carried object. Always returns True.', 'step_back': 'Action: Take a step back to make space for other robots to pass through.', 'is_robot_carrier': 'Condition: Check if the agent is currently carrying an object. Returns True if carrying an object, False otherwise.', 'is_object_in_reach': 'Condition: Check if the specified object is within the agent's reach. Returns True if the object is within reach, False otherwise.','is_obstacle_fully_avoided': 'Condition: Check if the agent has successfully avoided the obstacle blocking its path. Returns True if obstacle has been fully avoided, False otherwise.', 'is_free_space_available': 'Condition: Check if there is enough free space for the agent to perform an action without obstruction. Returns True if space is available, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do this task.)
6.// USER COMMAND: Generate a behavior tree for a swarm of robots to cooperatively navigate through a cluttered area, avoiding obstacles and picking up and storing objects along the way.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition> is_obstacle_fully_avoided</Condition><Selector><Sequence><Condition>is_free_space_available</Condition><Action>step_back</Action></Sequence><Action>avoid_obstacle</Action></Selector></Sequence><Sequence><Condition>is_object_in_reach</Condition><Selector><Sequence><Condition>is_robot_carrier</Condition><Action>step_back</Action></Sequence><Action>pick_up_object</Action></Selector></Sequence><Sequence><Condition>is_robot_carrier</Condition><Action>put_down_object</Action></Selector></Sequence></Selector></BehaviorTree> 
###
4.// INSTRUCTIONS: Use only the following behaviors {'move_forward': "Action: Move one step forward. Always returns True.", 'turn_left': "Action: Turn 90 degrees left. Always returns True.", 'turn_right': "Action: Turn 90 degrees right. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'check_battery_level': 'Condition: Check if battery level is above or equal to 50%. Returns True if battery level is above or equal to 50%, False otherwise.', 'check_sensor_data': 'Condition: Check if sensor data is available. Returns True if sensor data is available, False otherwise.', 'sleep_mode': 'Action: Turn off all actions and wait. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'perform a routine check of battery level and sensor data'
4.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>check_battery_level</Condition> <Action>move_forward</Action> <Action>turn_left</Action> <Action>continue_movement_agent</Action> </Sequence> <Sequence> <Condition>check_sensor_data</Condition> <Action>turn_right</Action> <Action>sleep_mode</Action> </Sequence> </Selector> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'find_landmark': 'Action: Move towards and reach the specified landmark. Always returns True.', 'is_landmark_detected': 'Condition: Check if landmark is within sight. Returns True if the landmark is within sight, False otherwise.', 'is_object_detected': 'Condition: Check if object is within a radius of 5 units from the agent. Returns True if an object is detected, False otherwise.', 'move_to_object': 'Action: Move towards and reach the detected object. Always returns True.', 'pick_up_object': 'Action: Pick up the detected object. Always returns True.', 'check_object_distance': 'Condition: Check the distance between the agent and the object. Returns True if the distance is within a radius of 2 units, False otherwise.', 'release_object': 'Action: Release the currently held object. Always returns True.', 'switch_movement_mode': 'Action: Switch movement mode to a zigzag pattern. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'perform a scavenger hunt by finding and picking up objects within the environment'
5.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>is_landmark_detected</Condition> <Action>find_landmark</Action> </Sequence> <Selector> <Sequence> <Condition>is_object_detected</Condition> <Action>move_to_object</Action> <Condition>check_object_distance</Condition> <Action>pick_up_object</Action> <Selector> <Action>switch_movement_mode</Action> <Action>release_object</Action> </Selector> </Selector> </Selector> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'is_flag_detected': 'Condition: Check if a flag is detected within 10 units of distance. Returns True if a flag is detected, False otherwise.', 'get_flag_location': 'Action: Move towards and reach the detected flag. Always returns True.', 'check_battery_level': 'Condition: Check if battery level is above 20%. Returns True if battery level is above 20%, False otherwise.', 'execute_mission': 'Action: Execute mission and complete all necessary tasks. Always returns True.', 'find_treasure': 'Action: Move towards and reach the specified treasure. Always returns True.', 'is_treasure_detected': 'Condition: Check if treasure is within sight. Returns True if the treasure is within sight, False otherwise.', 'collect_treasure': 'Action: Pick up the detected treasure. Always returns True.', 'return_to_base': 'Action: Return to base and end the mission. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'search for a hidden treasure and bring it back to base while avoiding obstacles and managing battery life'
6.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Sequence> <Condition>check_battery_level</Condition> <Selector> <<Sequence> <Condition>is_flag_detected</Condition> <Action>get_flag_location</Action> </Sequence> <Action>execute_mission</Action> </Selector> <Sequence> <Condition>is_treasure_detected</Condition> <Action>find_treasure</Action> <Action>collect_treasure</Action> </Sequence> <Sequence> <Condition>is_obstacle_detected</Condition> <Action>avoid_obstacle</Action> </Sequence> </Sequence> <Action>return_to_base</Action> </Selector> </BehaviorTree>###
4.// INSTRUCTIONS: Use only the following behaviors {'clean_table': 'Action: Clear and clean the table surface. Always returns True.', 'pour_water': 'Action: Pour water onto the surface to be cleaned. Always returns True.', 'scrub_surface': 'Action: Use a brush to scrub the surface and remove dirt. Always returns True.', 'empty_water': 'Action: Empty the used water and refill the bucket. Always returns True.', 'is_empty_bucket': 'Condition: Check if the bucket is empty. Returns True if the bucket is empty, False otherwise.', 'is_surface_clean': 'Condition: Check if the surface is clean. Returns True if the surface is clean, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task).
4.// USER COMMAND: Generate a behavior tree to clean a dirty table surface by pouring water, scrubbing surface, emptying dirty water, and repeating until the surface is clean.
4.// OUTPUT:
<BehaviorTree><Sequence><Sequence><Condition>is_empty_bucket</Condition><Action>empty_water</Action></Sequence><Selector><Sequence><Condition>is_empty_bucket</Condition><Action>pour_water</Action></Sequence><Action>scrub_surface</Action></Selector></Sequence><Sequence><Condition>is_surface_clean</Condition><Action>task_completed</Action></Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'identify_target': 'Action: Scan the environment and identify a target to track. Always returns True.', 'follow_target': 'Action: Move towards the identified target. Always returns True.', 'stop_movement': 'Action: Stop all movement and freeze in place. Always returns True.', 'check_target_distance': 'Condition: Check the distance between the agent and target. Returns True if the distance is within 10 units, False otherwise.', 'has_target_moved': 'Condition: Check if the target has moved since last check. Returns True if the target has moved, False otherwise.', 'is_target_lost': 'Condition: Check if the target is no longer visible. Returns True if the target is out of sight, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Generate a behavior tree for a swarm of drones to track and follow a moving target, stopping only when the target is within 10 units of distance and staying stopped if the target moves out of sight.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Selector><Condition>has_target_moved</Condition><Action>follow_target</Action></Selector><Sequence><Condition>is_target_lost</Condition><Action>stop_movement</Action></Sequence></Sequence><Sequence><Condition>check_target_distance</Condition><Action>stop_movement</Action></Sequence><Action>identify_target</Action></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'stomp_foot': 'Action: Stomp the foot on the ground to attract attention. Always returns True.', 'greet_team_member': 'Action: Greet and interact with a team member. Always returns True.', 'form_circle': 'Action: Form a circle with other team members. Always returns True.', 'perform_chant': 'Action: Perform a team chant to boost morale. Always returns True.', 'is_team_member_nearby': 'Condition: Check if a team member is within 10 units of distance. Returns True if a team member is nearby, False otherwise.', 'is_team_in_circle': 'Condition: Check if the team is currently forming a circle. Returns True if the team is in a circle formation, False otherwise.', 'is_team_member_interacting': 'Condition: Check if a team member is currently being greeted and interacted with. Returns True if a team member is interacting, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task).
6.// USER COMMAND: Generate a behavior tree for a team of performers to attract attention by stomping foot, greeting team member, forming a circle, and performing a chant to boost morale.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_team_member_nearby</Condition><Selector><Sequence><Condition>is_team_in_circle</Condition><Action>perform_chant</Action></Sequence><Action>form_circle</Action></Selector></Sequence><Sequence><Condition>is_team_member_interacting</Condition><Action>greet_team_member</Action></Sequence><Action>stomp_foot</Action></Selector></BehaviorTree>
###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Avoid obstacles and then form a vertical line at the center.'Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>is_obstacle_detected</Condition> <Action>avoid_obstacle</Action> </Sequence> <Action>form_line</Action></Selector> </Sequence> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Move towards the target and avoid obstacles, then change color to green when target is reached.'Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>is_path_clear</Condition> <Action>move_forward</Action> <Condition>is_obstacle_detected</Condition> <Action>avoid_obstacle</Action></Sequence> <Sequence> <Condition>is_target_detected</Condition> <Action>change_color_to_green</Action> <Action>continue_movement_agent</Action> </Sequence> </Selector> </Sequence> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Form a vertical line, change color to green, then move towards the target and avoid obstacles.'Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>is_line_formed</Condition> <Action>change_color_to_green</Action> <Action>continue_movement_agent</Action> </Sequence> <Action>form_line</Action></Selector> <Sequence> <Condition>is_path_clear</Condition> <Action>move_forward</Action> <Condition>is_obstacle_detected</Condition> <Action>avoid_obstacle</Action> </Sequence> </Sequence> </BehaviorTree> 
###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Move to the target's location without hitting any obstacles, then change color to white'. Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>is_obstacle_detected</Condition> <Action>avoid_obstacle</Action> </Sequence> <Sequence> <Condition>is_path_clear</Condition> <Action>change_color_to_white</Action> <Action>continue_movement_agent</Action> <Condition>is_target_reached</Condition> </Sequence> </Selector> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Avoid obstacles while moving towards the target, then form a line and freeze movement'. Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>is_obstacle_detected</Condition> <Action>avoid_obstacle</Action> </Sequence> <Sequence> <Condition>is_path_clear</Condition> <Action>wander</Action> <Continue_movement_agent>true</Continue_movement_agent> </Sequence> </Selector> <Sequence> <Action>form_line</Action> <Action>agent_movement_freeze</Action> </Sequence> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'is_intruder_detected': 'Condition: Check if any intruders are detected in the surrounding area. Returns True if intruders are present, False if no intruders are detected.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Move towards target, check for obstacles, form a line, and change color to green when the target is reached'. Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree> <Sequence> <Sequence> <Action>avoid_obstacle</Action> <Condition>is_path_clear</Condition> <Action>form_line</Action> <Action>continue_movement_agent</Action> <Condition>is_target_reached</Condition> </Sequence> <Condition>is_obstacle_detected</Condition> <Action>change_color_to_green</Action> </Sequence> </BehaviorTree>
###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.' 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Return to the nest and change color to green to signal completion.'Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree><Selector><Condition>is_agent_in_nest</Condition><Action>change_color_to_green</Action></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Move forward and change color to white every 3 steps'Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_path_clear</Condition><Action>move_forward</Action><Selector><Sequence><Condition>is_path_clear</Condition><Action>move_forward</Action></Sequence><Sequence><Condition>is_path_clear</Condition><Action>move_forward</Action><Selector><Sequence><Condition>is_path_clear</Condition><Action>move_forward</Action></Sequence><Sequence><Condition>is_path_clear</Condition><Action>move_forward</Action><Action>change_color_to_white</Action></Sequence></Selector></Sequence></Selector></Sequence></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Avoid obstacles, form a line, and then change color to green when target is detected.'Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_obstacle_detected</Condition><Action>avoid_obstacle</Action></Sequence><Sequence><Condition>is_target_detected</Condition><Action>form_line</Action><Action>change_color_to_green</Action></Sequence></Selector></BehaviorTree>    
###
4.// INSTRUCTIONS: Use only the following behaviors {'engage_target': 'Action: Engage target within range. Always returns True.', 'move_forward': 'Action: Move one step forward. Always returns True.', 'move_backward': 'Action: Move one step backward. Always returns True.', 'is_obstacle_ahead': 'Condition: Check if there is an obstacle ahead. Returns True if an obstacle is detected, False otherwise.', 'is_target_within_range': 'Condition: Check if target is within range. Returns True if the target is within 5 units of distance, False otherwise.', 'is_target_active': 'Condition: Check if the target is actively moving. Returns True if the target is moving, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Follow the moving target while avoiding obstacles.'
4.// OUTPUT: 
<BehaviorTree> <Selector> <Sequence> <Condition>is_target_active</Condition> <Selector> <Sequence> <Condition>is_obstacle_ahead</Condition> <Action>move_backward</Action> </Sequence> <Action>engage_target</Action> </Selector> </Sequence> <Sequence> <Condition>is_target_within_range</Condition> <Action>move_forward</Action> </Sequence> </Selector> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'detect_prey': 'Condition: Check for prey within 10 units. Returns True if prey is detected, False otherwise.', 'detect_obstacle': 'Condition: Check for obstacles within 5 units. Returns True if obstacles are detected, False otherwise.', 'chase_prey': 'Action: Chase and follow detected prey. Always returns True.', 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'attack_prey': 'Action: Attack and immobilize prey. Always returns True.', 'return_to_nest': 'Action: Return to nest location. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Hunt and immobilize prey while avoiding obstacles and returning to nest.'
5.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>detect_obstacle</Condition> <Action>avoid_obstacle</Action> </Sequence> <Sequence> <Condition>detect_prey</Condition> <Action>chase_prey</Action> </Sequence> <Sequence> <Action>attack_prey</Action> <Action>return_to_nest</Action> </Sequence> </Selector> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'detect_enemy': 'Condition: Check for enemy within 20 units. Returns True if enemy is detected, False otherwise.', 'move_to_enemy': 'Action: Move towards the detected enemy. Always returns True.', 'is_in_cover': 'Condition: Check if in cover or hiding spot. Returns True if the agent is in cover, False otherwise.', 'hide_from_enemy': 'Action: Hide and stay in cover. Always returns True.', 'shoot': 'Action: Shoot at the enemy. Always returns True.', 'reload_weapon': 'Action: Reload weapon. Always returns True.', 'move_to_designated_point': 'Action: Move towards the designated point. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Engage and eliminate enemy while taking cover and reloading weapon.'
6.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>detect_enemy</Condition> <Action>move_to_enemy</Action> </Sequence> <Sequence> <Condition>is_in_cover</Condition> <Action>hide_from_enemy</Action> <Action>reload_weapon</Action> </Sequence> <Sequence> <Condition>detect_enemy</Condition> <Action>shoot</Action> </Sequence> </Selector> </BehaviorTree>
###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.', 'move_back': 'Action: Move the robot one step backwards in the current direction. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Avoid obstacles, form a vertical line, move back, and change color to green.'Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>is_obstacle_detected</Condition> <Action>avoid_obstacle</Action> <Action>form_line</Action> <Action>move_back</Action> <Action>change_color_to_green</Action> </Sequence> <Action>task_completed</Action> </Selector> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.', 'dance': 'Action: Perform a short dance routine. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Perform a dance routine.'Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree> <Selector> <Action>dance</Action> <Action>wander</Action> </Selector> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.', 'go_home': 'Action: Return to the nest. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Explore the environment, avoid obstacles, and then return to the nest.'Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Action>wander</Action> <Sequence> <Condition>is_obstacle_detected</Condition> <Action>avoid_obstacle</Action> </Sequence> <Action>go_home</Action> </Sequence> <Action>task_completed</Action> </Selector> </BehaviorTree>
4. // INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.', 'pick_up_object': 'Action: Pick up the specified object on the ground. Returns True if the object is successfully picked up, False otherwise.', 'carry_object': 'Action: Carry the currently held object and move towards the specified location. Returns True if the object is successfully carried and moved to the specified location, False otherwise.', 'drop_object': 'Action: Drop the currently held object on the ground at the current location. Returns True if the object is successfully dropped, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4. // USER COMMAND: generate behavior tree to 'Pick up the key, carry it to the door, and drop it there' Output only the XML behavior tree without extra text.
4. // OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>is_obstacle_detected</Condition><Action>avoid_obstacle</Action></Sequence><Action>wander</Action></Selector><Selector><Sequence><Condition>is_target_detected</Condition><Action>pick_up_object</Action><Action>carry_object</Action></Sequence><Action>drop_object</Action></Selector></Sequence></BehaviorTree>

5. // INSTRUCTIONS: Use only the following behaviors {'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.', 'transport_object': 'Action: Pick up and transport the specified object to a target area. Returns True if the object is successfully transported, False otherwise.', 'release_object': 'Action: Release the currently held object at a specified location. Returns True if the object is successfully released, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5. // USER COMMAND: generate behavior tree to 'Pick up the package, transport it to the delivery area, and release it' Output only the XML behavior tree without extra text.
5. // OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>is_obstacle_detected</Condition><Action>avoid_obstacle</Action></Sequence><Action>wander</Action></Selector><Selector><Sequence><Condition>is_target_detected</Condition><Action>transport_object</Action></Sequence><Action>release_object</Action></Selector></Sequence></BehaviorTree>

6. // INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.', 'go_to_location': 'Action: Navigate the robot to a specified location. Returns True if the robot successfully reaches the destination, False otherwise.', 
###
4.// INSTRUCTIONS: Use only the following behaviors {'change_color_to_red': "Action: Change agent's color to red. Always returns True.", 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'move_forward': 'Action: Move the agent forward. Always returns True.', 'rotate_right': 'Action: Rotate the agent 90 degrees to the right. Always returns True.', 'rotate_left': 'Action: Rotate the agent 90 degrees to the left. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.', 'hold_position': 'Action: Hold current position and orientation. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Search for targets, move towards them and grab them, if obstacle is detected, rotate 90 degrees and continue search until all targets are grabbed and then return to the nest to change color to red'Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>is_target_detected</Condition> <Action>move_forward</Action> <Sequence> <Condition>is_obstacle_detected</Condition> <Sequence> <Action>rotate_right</Action> <Action>rotate_left</Action> </Sequence> </Sequence> <Action>grab_target</Action> <Selector> <Sequence> <Condition>is_path_clear</Condition> <Sequence> <Condition>is_target_detected</Condition> <Action>move_forward</Action> <Action>grab_target</Action> </Sequence> </Selector> </Sequence> <Sequence> <Condition>is_target_reached</Condition> <Action>hold_position</Action> </Sequence> <Sequence> <Condition>is_target_detected</Condition> <Action>change_color_to_green</Action> </Sequence> <Action>change_color_to_red</Action> </Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'collect_resource': 'Action: Collect resource at current location. Always returns True.', 'drop_resource': 'Action: Drop resource at designated location. Always returns True.', 'navigate_to_nest': 'Action: Navigate to the nest location. Always returns True.', 'navigate_to_resource': 'Action: Navigate to the closest resource location. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_resource_detected': 'Condition: Check if there is a resource within 10 units. Returns True if a resource is within 10 units of distance, False otherwise.', 'is_nest_reached': 'Condition: Check if the nest is within 5 units. Returns True if the nest is within 5 units of distance, False otherwise.', 'is_resource_collected': 'Condition: Check if the resource has been collected. Returns True if the resource has been collected, False otherwise.', 'is_resource_dropped': 'Condition: Check if the resource has been dropped. Returns True if the resource has been dropped, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Collect resources, navigate to nest and drop off resources, then return to continue collecting resources until the desired number is reached'Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>is_resource_detected</Condition> <Selector> <Sequence> <Condition>is_nest_reached</Condition> <Action>navigate_to_resource</Action> <Action>collect_resource</Action> </Sequence> <Sequence> <Condition>is_resource_collected</Condition> <Action>drop_resource</Action> </Sequence> </Selector> </Sequence> <Sequence> <Condition>is_agent_in_nest</Condition> <Action>navigate_to_resource</Action> <Action>agent_movement_freeze</Action> </Sequence> </Selector> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'follow_line': 'Action: Follow a horizontal line at the bottom. Always returns True.', 'move_forward': 'Action: Move the agent forward. Always returns True.', 'rotate_right': 'Action: Rotate the agent 90 degrees to the right. Always returns True.', 'rotate_left': 'Action: Rotate the agent 90 degrees to the left. Always returns True.', 'is_line_formed': 'Condition: Check if a horizontal line is formed at the bottom. Returns True if the line is formed at the bottom, False otherwise.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_at_dropoff': 'Condition: Check if the robot is at the designated drop-off location. Returns True if at the drop-off location, False otherwise.', 'is_target_grabbed': 'Condition: Check if the target object has been grabbed. Returns True if the target is grabbed, False otherwise.', 'is_target_released': 'Condition: Check if the target object has been released. Returns True if the target is released, False otherwise.', 'is_robot_turned': 'Condition: Check if the robot has completed a full rotation. Returns True if the robot has completed a full rotation, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND:
###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_red': "Action: Change agent's color to red. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'exit_nest': 'Action: Exit the nest. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_color_green': 'Condition: Check if the agent's color is green. Returns True if the color is green, False otherwise.', 'is_color_red': 'Condition: Check if the agent's color is red. Returns True if the color is red, False otherwise.', 'is_exit_reached': 'Condition: Check if the agent has reached the exit. Returns True if the exit is reached, False otherwise.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Exit the nest, find a green object, change color to red when the object is detected, and return to the nest' Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Action>exit_nest</Action> <Action>wander</Action> </Selector> <Sequence> <Condition>is_target_detected</Condition> <Condition>is_color_green</Condition> <Action>change_color_to_red</Action> </Sequence> <Sequence> <Condition>is_agent_in_nest</Condition> <Action>agent_movement_freeze</Action> <Action>task_completed</Action> </Sequence> </Sequence> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_blue': "Action: Change agent's color to blue. Always returns True.", 'form_circle': 'Action: Form a circle with other agents. Always returns True.', 'is_blue_circle_formed': 'Condition: Check if a blue circle is formed. Returns True if the circle is formed with other blue agents, False otherwise.', 'is_circle_formed': 'Condition: Check if a circle is formed. Returns True if the circle is formed with other agents, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Form a blue circle with other agents, avoid obstacles, and stay in the circle until target is detected then freeze movement' Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>is_blue_circle_formed</Condition> <Action>form_circle</Action> </Sequence> <Action>wander</Action> </Selector> <Sequence> <Condition>is_target_detected</Condition> <Action>agent_movement_freeze</Action> <Action>task_completed</Action> </Sequence> </Sequence> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_red': "Action: Change agent's color to red. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'gather': 'Action: Gather resources from the environment. Returns True if resources are successfully gathered, False otherwise.', 'is_resources_full': 'Condition: Check if agent's resource capacity is full. Returns True if the capacity is full, False otherwise.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Gather resources, change color to red when target is detected, and return to the nest' Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Action>gather</Action> <Sequence> <Condition>is_resources_full</Condition> <Action>change_color_to_red</Action> </Sequence> </Sequence> <Action>wander</Action> </Selector> <Sequence> <Condition>is_target_detected</Condition> <Action>agent_movement_freeze</Action> <Action>task_completed</Action> </Sequence> </Sequence> </BehaviorTree> 
###
4.// INSTRUCTIONS: Use only the following behaviors {'count_steps': 'Action: Count the number of steps taken. Always returns True.', 'move_forward': 'Action: Move the robot one step forward. Always returns True.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_at_edge': 'Condition: Check if the robot is at the edge of the environment. Returns True if at the edge, False otherwise.', 'turn_left': 'Action: Turn the robot 90 degrees to the left. Always returns True.', 'turn_right': 'Action: Turn the robot 90 degrees to the right. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Navigate through a maze, count the steps taken, and turn around to return to starting point'.Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>is_obstacle_detected</Condition><Action>turn_left</Action><Sequence><Condition>is_obstacle_detected</Condition><Action>turn_right</Action></Sequence></Sequence><Action>move_forward</Action></Selector><Sequence><Condition>is_at_edge</Condition><Action>turn_left</Action><Action>turn_left</Action></Sequence></Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'move_forward': 'Action: Move the robot one step forward. Always returns True.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_at_edge': 'Condition: Check if the robot is at the edge of the environment. Returns True if at the edge, False otherwise.', 'find_object': 'Action: Search for a designated object in the environment. Always returns True.', 'pick_up_object': 'Action: Pick up the designated object if it is within reach. Always returns True.', 'drop_object': 'Action: Drop the designated object at a specific location. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Search for a lost item, if found, pick it up and return to the starting position'.Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>find_object</Condition><Action>pick_up_object</Action><Selector><Sequence><Action>drop_object</Action><Action>move_forward</Action><Sequence><Condition>is_obstacle_detected</Condition><Action>avoid_obstacle</Action></Sequence></Selector></Sequence><Sequence><Condition>is_obstacle_detected</Condition><Action>move_forward</Action></Sequence></Selector><Sequence><Condition>is_obstacle_detected</Condition><Action>turn_left</Action><Action>turn_left</Action></Sequence></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'change_robot_speed': "Action: Change the speed of the robot. Always returns True.", 'move_forward': 'Action: Move the robot one step forward. Always returns True.', 'move_backward': 'Action: Move the robot one step backward. Always returns True.', 'turn_left': 'Action: Turn the robot 90 degrees to the left. Always returns True.', 'turn_right': 'Action: Turn the robot 90 degrees to the right. Always returns True.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_object_detected': 'Condition: Check for a specific object in the environment. Returns True if the object is detected, False otherwise.', 'is_at_dropoff': 'Condition: Check if the robot is at the designated drop-off location. Returns True if at the drop-off location, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Collect objects and navigate through a maze, change speed to avoid obstacles'.Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_object_detected</Condition><Action>turn_left</Action><Action>turn_right</Action></Sequence><Sequence><Condition>is_obstacle_detected</Condition><Action>change_robot_speed</Action></Sequence></Selector><Sequence><Condition>is_object_detected</Condition><Selector><Sequence><Action>move_backward</Action><Action>change_robot_speed</Action></Sequence></Selector></Sequence></BehaviorTree> 
###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'follow_path': 'Action: Follow a predefined path. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'recharge': 'Action: Go to a recharge station to recharge. Returns True when recharged.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Navigate through a maze, recharge at designated stations, and return to the starting point'. Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>is_path_clear</Condition><Action>follow_path</Action></Sequence><Action>wander</Action></Selector><Sequence><Condition>is_target_detected</Condition><Sequence><Action>recharge</Action><Action>task_completed</Action></Sequence></Sequence></Sequence></BehaviorTree>
 
###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_red': "Action: Change agent's color to red. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Find the target, form a line at the target location, and change color to red to signal completion'. Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>is_target_detected</Condition><Sequence><Action>form_line</Action><Action>change_color_to_red</Action></Sequence></Sequence><Action>wander</Action></Selector><Action>task_completed</Action></Sequence></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_blue': "Action: Change agent's color to blue. Always returns True.", 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_agent_nearby': 'Condition: Check if any other agent is within 5 units. Returns True if an agent is within 5 units, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'update_location': 'Action: Update the current location of the agent. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Move towards the target, update location, and form a line with other agents if nearby'. Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>is_target_detected</Condition><Action>change_color_to_blue</Action><Action>update_location</Action></Sequence><Action>wander</Action></Selector><Sequence><Condition>is_agent_nearby</Condition><Sequence><Condition>is_line_formed</Condition><Action>form_line</Action></Sequence></Sequence></Sequence></BehaviorTree> 
###
4.// INSTRUCTIONS: Use only the following behaviors {'move_to_target': 'Action: Move the robot towards the designated target with obstacle avoidance.', 'move_to_coordinate': 'Action: Move to the specified coordinates with obstacle avoidance.', 'avoid_target': 'Action: Move away from the designated target while maintaining safe distance.', 'avoid_collision': 'Action: Move in a random direction to avoid potential collisions.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_target_reached': 'Condition: Check if the robot has reached the designated target. Returns True if the robot is within 10 units of distance from the target, False otherwise.', 'is_target_visible': 'Condition: Check if the target is within the robot's field of view. Returns True if the target is within a 90 degree angle and 20 units of distance, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Generate a behavior tree for a swarm of robots to explore and map a complex terrain with multiple targets, while avoiding collisions and staying in designated areas.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_obstacle_detected</Condition><Action>avoid_collision</Action></Sequence><Sequence><Condition>is_target_visible</Condition><Selector><Sequence><Condition>is_target_reached</Condition><Action>move_away_from_target</Action></Sequence><Action>move_to_target</Action></Selector></Sequence></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'learn_by_example': 'Action: Learn new behaviors by example from other robots in the swarm.', 'teach_others': 'Action: Share learned behaviors with other robots in the swarm.', 'perform_task': 'Action: Perform a specific task that requires the use of learned behaviors.', 'analyze_data': 'Action: Analyze collected data and make decisions based on learned behaviors.', 'is_teaching_mode': 'Condition: Check if the robot is in teaching mode, ready to learn new behaviors and share them with others.', 'is_learning_mode': 'Condition: Check if the robot is in learning mode and actively observing and learning from other robots.', 'is_task_completed': 'Condition: Check if the current task is completed. Returns True if the task is completed, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Generate a behavior tree for a swarm of robots to collectively learn and perform different tasks by observing and teaching each other.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_learning_mode</Condition><Selector><Sequence><Condition>is_teaching_mode</Condition><Action>teach_others</Action><Action>perform_task</Action></Sequence><Action>learn_by_example</Action></Selector></Sequence><Action>analyze_data</Action></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'explore_unexplored': 'Action: Move the robot towards unexplored areas of the environment.', 'avoid_boundaries': 'Action: Move away from the boundaries of the environment.', 'confirm_location': 'Action: Confirm the robot's current location with GPS or other sensors.', 'recharge_battery': 'Action: Move the robot to a designated charging station to recharge its battery.', 'is_target_in_sight': 'Condition: Check if the target is within the robot's field of view. Returns True if the target is within a 120 degree angle and 20 units of distance, False otherwise.', 'is_battery_low': 'Condition: Check if the robot's battery is below 20% capacity. Returns True if the battery is below 20%, False otherwise.', 'is_exploration_complete': 'Condition: Check if the entire environment has been explored. Returns True if all areas have been visited and mapped, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Generate a behavior tree for a swarm of robots to systematically explore and map a large and complex environment while efficiently managing battery usage and charging.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_battery_low</Condition><Action>recharge_battery</Action></Sequence><Sequence><Condition>is_target_in_sight</Condition><Selector><Sequence><Condition>is_exploration_complete</Condition><Action>confirm_location</Action></Sequence><Action>explore_unexplored</Action></Selector></Sequence></Selector></BehaviorTree> 
###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_blue': "Action: Change agent's color to blue. Always returns True.", 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'make_sound': 'Action: Emit a loud sound signal to attract the attention of nearby agents. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'is_sound_emitted': 'Condition: Check if a sound signal was emitted. Returns True if a sound signal was emitted, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Emit a loud sound signal to attract other robots, then form a line and change color to green.'Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Action>make_sound</Action><Condition>is_sound_emitted</Condition></Sequence><Action>wander</Action></Selector><Sequence><Condition>is_agent_in_nest</Condition><Sequence><Action>form_line</Action><Action>change_color_to_green</Action></Sequence></Sequence></Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_blue': "Action: Change agent's color to blue. Always returns True.", 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'count_targets': 'Action: Count the number of targets within a designated area. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'is_counted': 'Condition: Check if the count of targets is equal to or greater than the expected number. Returns True if the count is equal to or greater than the expected number, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Count the number of targets within a designated area and change color to blue after reaching the expected number.' Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree><Sequence><Selector><Action>count_targets</Action><Condition>is_counted</Condition></Selector><Sequence><Condition>is_agent_in_nest</Condition><Action>change_color_to_blue</Action></Sequence></Sequence></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_orange': "Action: Change agent's color to orange. Always returns True.", 'change_color_to_purple': "Action: Change agent's color to purple. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'divide_group': 'Action: Divide the swarm group into smaller groups for individual tasks. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'is_divided': 'Condition: Check if the swarm group is divided into smaller groups. Returns True if the swarm group is divided, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Divide the swarm group into smaller groups and change color to orange, then reunite and change color to purple.'Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree><Sequence><Selector><Action>divide_group</Action 
###
4.// INSTRUCTIONS: Use only the following behaviors {'detect_enemy': 'Condition: Check if enemy is detected within 10 units. Returns True if enemy is detected, False otherwise.', 'engage_enemy': 'Action: Engage with detected enemy. Always returns True.', 'navigate_to_target': 'Action: Navigate towards specified target. Always returns True.', 'patrol': 'Action: Patrol the designated area. Always returns True.', 'is_target_reached': 'Condition: Check if target is within 5 units. Returns True if target is within 5 units of distance, False otherwise.', 'reload': 'Action: Reload weapon. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Patrol the perimeter, engage any detected enemies, and reload if necessary.'Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Action>patrol</Action> <Sequence> <Condition>detect_enemy</Condition> <Action>engage_enemy</Action> <Sequence> <Condition>is_target_reached</Condition> <Action>reload</Action> </Sequence> </Sequence> </Selector> </Sequence> </BehaviorTree>
 
###
5.// INSTRUCTIONS: Use only the following behaviors {'detect_food': 'Condition: Check if food is detected within 5 units. Returns True if food is detected, False otherwise.', 'eat_food': 'Action: Move towards detected food and consume it. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'is_color_green': 'Condition: Check if agent is green. Returns True if agent is green, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Wander and change color to green if food is detected.'Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>detect_food</Condition> <Selector> <Action>change_color_to_green</Action> <Action>eat_food</Action> </Selector> </Sequence> <Action>wander</Action> </Selector> </BehaviorTree>
 
###
6.// INSTRUCTIONS: Use only the following behaviors {'detect_water': 'Condition: Check if water is detected within 5 units. Returns True if water is detected, False otherwise.', 'fetch_water': 'Action: Move towards detected water and collect it. Always returns True.', 'is_water_full': 'Condition: Check if the water container is full. Returns True if container is full, False otherwise.', 'travel_to_destination': 'Action: Travel to designated destination. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Fetch water and travel to designated location once full.'Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>detect_water</Condition> <Selector> <Sequence> <Condition>is_water_full</Condition> <SetVariable>travel_destination = "designated location"</SetVariable> <Action>fetch_water</Action> </Sequence> <Action>travel_to_destination</Action> </Selector> </Sequence> </BehaviorTree>
###
4.// INSTRUCTIONS: Use only the following behaviors {'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Complete obstacle course by avoiding obstacles, forming a line, and reaching the target'Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>is_obstacle_detected</Condition> <Action>avoid_obstacle</Action> </Sequence> <Action>continue_movement_agent</Action> </Selector> <Action>form_line</Action> <Selector> <Sequence> <Condition>is_target_detected</Condition> <Action>change_color_to_green</Action> <Action>change_color_to_white</Action> <Action>task_completed</Action> </Sequence> <Selector> <Action>wander</Action> </Selector> </Selector> </Sequence> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'dash': "Action: Move at a higher speed for 1 second. Always returns True.",'optimal_speed': "Action: Move at a calculated optimal speed. Always returns True.", 'is_agent_in_range': "Condition: Check if agent is within specified range. Returns True if agent is within range, False otherwise.", 'out_of_battery': "Condition: Check if battery is below 20%. Returns True if battery is below 20%, False otherwise.", 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Complete obstacle course by avoiding obstacles, moving at optimal speed, and dashing when necessary'Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>is_obstacle_detected</Condition> <Action>optimal_speed</Action> </Sequence> <Action>dash</Action> </Selector> <Selector> <Sequence> <Condition>is_agent_in_range</Condition> <Action>optimal_speed</Action> <Action>task_completed</Action> </Sequence> <Selector> <Action>dash</Action> </Selector> </Selector> <Selector> <Condition>out_of_battery</Condition> <Action>optimal_speed</Action> <Action>task_completed</Action> </Selector> </Sequence> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'move_left': 'Action: Move the agent left. Always returns True.', 'move_right': 'Action: Move the agent right. Always returns True.', 'health_check': 'Condition: Check the agent's health. Returns True if health is above 50%, False otherwise.', 'get_closer_to_target': 'Action: Move closer to the target. Always returns True.', 'is_target_reached': 'Condition: Check if target is within 10 units. Returns True if the target is within 10 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Complete a rescue mission by moving closer to the target, checking health, and avoiding obstacles'Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>is_target_reached</Condition> <Action>task_completed</Action> </Sequence> <Selector> <Sequence> <Condition>health_check</Condition> <Action>get_closer_to_target</Action> </Sequence> <Action>move_right</Action> </Selector> <Selector> <Sequence> <Condition>is_obstacle_detected</Condition> <Action>move_left</Action> <Action>task_completed</Action> </Sequence> <Selector> <Action>move_right</Action> </Selector> </Selector> </Sequence> </BehaviorTree> 
###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_current_color_green': 'Condition: Check if the current color of the agent is green. Returns True if the color is green, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'If the current color is green and there is no obstacle, continue moving forward, if an obstacle is detected, avoid it, and if not in the nest, return to the nest and change color to white'. Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree> <Sequence> <Sequence> <Condition>is_current_color_green</Condition> <Condition>is_path_clear</Condition> <Action>continue_movement_agent</Action> </Sequence> <Sequence> <Condition>is_obstacle_detected</Condition> <Action>avoid_obstacle</Action> </Sequence> </Sequence> <Condition>is_agent_in_nest</Condition> <Action>change_color_to_white</Action> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_current_color_green': 'Condition: Check if the current color of the agent is green. Returns True if the color is green, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Search for obstacles, avoid them while moving forward, and change color to red when an obstacle is detected'. Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree> <Sequence> <Condition>is_obstacle_detected</Condition> <Action>change_color_to_red</Action> </Sequence> <Sequence> <Condition>is_path_clear</Condition> <Action>wander</Action> <Action>continue_movement_agent</Action> </Sequence> <Sequence> <Condition>is_obstacle_detected</Condition> <Action>avoid_obstacle</Action> </Sequence> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_blue': "Action: Change agent's color to blue. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_current_color_blue': 'Condition: Check if the current color of the agent is blue. Returns True if the color is blue, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following
###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'form_square': 'Action: Form a square shape with the agents. Always returns True.', 'form_triangle': 'Action: Form a triangle shape with the agents. Always returns True.', 'get_closer_to_target': 'Action: Move towards the target object. Always returns True.', 'monitor_area': 'Action: Monitor the surrounding area for any changes. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a square or triangle shape is formed. Returns True if the desired shape is formed with the agents, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.', 'rotate': 'Action: Rotate the agent 90 degrees to the right. Always returns True.'}, to construct behavior tree in XML format for the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Form a square shape with the agents, then rotate 90 degrees and monitor the area for changes'. Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>form_square</Action><Sequence><Condition>is_line_formed</Condition><Action>rotate</Action></Sequence><Action>monitor_area</Action></Sequence><Sequence><Condition>is_obstacle_detected</Condition><Action>avoid_obstacle</Action></Sequence><Action>wander</Action></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'form_circle': 'Action: Form a circle with the agents. Always returns True.', 'move_to_center': 'Action: Move towards the center of the circle. Always returns True.', 'random_jump': 'Action: Make a random jump to a new location. Always returns True.', 'gather_objects': 'Action: Gather nearby objects and bring them to the designated location. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_circle_formed': 'Condition: Check if a circle shape is formed. Returns True if a circle is formed with the agents, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format for the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Form a circle shape with the agents, then move towards the center and gather objects'. Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>form_circle</Action><Sequence><Condition>is_circle_formed</Condition><Action>move_to_center</Action><Action>gather_objects</Action></Sequence></Sequence><Sequence><Condition>is_obstacle_detected</Condition><Action>avoid_obstacle</Action></Sequence><Sequence><Condition>is_obstacle_detected</Condition><Action>random_jump</Action></Sequence><Action>wander</Action></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'follow_target': 'Action: Follow the target object. Always returns True.', 'stop_following': 'Action: Stop following the target object. Always returns True.', 'drop_target': 'Action: Drop the target object at the designated drop-off location. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format for the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Form a vertical line with the agents, then follow the target object and drop it at the designated location'. Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>form_line</Action><Sequence><Condition>is_line_formed</Condition><Action>follow_target</Action></Sequence><Action>drop_target</Action></Sequence><Sequence><Condition>is_target_detected</Condition><Action>stop_following</Action></Sequence 
###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format for the following task. Output only the XML behavior tree without extra text.
4.// TASK: Have the swarm robots collaborate to gather all the scattered objects in the environment and return them to the nest.
4.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>is_target_detected</Condition><Sequence><Condition>is_line_formed</Condition><Action>change_color_to_white</Action></Sequence><Action>form_line</Action></Sequence><Condition>is_path_clear</Condition><Action>avoid_obstacle</Action><Action>continue_movement_agent</Action></Selector><Sequence><Condition>is_agent_in_nest</Condition><Action>change_color_to_white</Action><Sequence><Condition>is_target_detected</Condition><Action>change_color_to_green</Action></Sequence><Action>task_completed</Action></Sequence></Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format for the following task. Output only the XML behavior tree without extra text.
5.// TASK: Have the swarm robots collaborate to build a bridge over a gap in the environment.
5.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>is_agent_in_nest</Condition><Action>change_color_to_green</Action><Action>form_line</Action><Action>change_color_to_white</Action><Sequence><Condition>is_target_detected</Condition><Action>continue_movement_agent</Action><Action>task_completed</Action></Sequence></Sequence><Sequence><Condition>is_path_clear</Condition><Action>wander</Action></Sequence></Selector><Condition>is_obstacle_detected</Condition><Action>avoid_obstacle</Action></Sequence></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format for the following task. Output only the XML behavior tree without extra text.
6.// TASK: Have the swarm robots gather and sort objects based on color and shape.
6.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>is_target_detected</Condition><Action>change_color_to_green</Action><Action>continue_movement_agent</Action><Action>task_completed</Action></Sequence><Condition>is_path_clear</Condition><Action>wander</Action><Sequence><Condition>is_obstacle_detected</Condition><Action>avoid_obstacle</Action></Sequence></Selector><Sequence><Condition>is_agent_in_nest</Condition><Action>form_line</Action><Sequence><Condition>is_line_formed</Condition><Action>change_color_to_white</Action></Sequence></Sequence></Sequence></BehaviorTree><BehaviorTree><Sequence><Action>move_forward</Action><Action>shift_left</Action><Action>shift_right</Action></Sequence></BehaviorTree>

###
4.// INSTRUCTIONS: Use only the following behaviors {'move_to_target': 'Action: Move towards the specified target using shortest path algorithm.', 'avoid_collision': 'Action: Avoid any potential collisions with other robots or obstacles.', 'maintain_distance': 'Action: Maintain a certain distance from other robots while moving.', 'is_target_reached': 'Condition: Check if the target has been reached or not.', 'is_collision_detected': 'Condition: Check if a collision with other robots or obstacles has been detected.', 'is_distance_maintained': 'Condition: Check if the distance from other robots is maintained or not.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Generate a behavior tree to guide a swarm of robots to explore and map a large area while avoiding collisions and maintaining a safe distance from each other.
4.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>is_target_reached</Condition> <Action>move_to_target</Action> <Action>avoid_collision</Action> <Action>maintain_distance</Action> </Sequence> <Sequence> <Condition>is_collision_detected</Condition> <Action>move_away</Action> </Sequence> </Selector> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'take_photo': 'Action: Use the robot's camera to take a photo of the specified object or area.', 'scan_area': 'Action: Use sensors to scan the surrounding area and detect any potential threats or anomalies.', 'navigate_to_target': 'Action: Use path planning algorithm to navigate to the specified target location.', 'is_object_detected': 'Condition: Check if the specified object or area is detected using the robot's camera.', 'is_area_safe': 'Condition: Check if the scanned area is deemed safe, with no potential threats or anomalies.', 'is_target_reached': 'Condition: Check if the target location has been reached or not.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Generate a behavior tree for a swarm of drones to perform surveillance and reconnaissance of a specific area, including taking photos and scanning for potential threats.
5.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>is_target_reached</Condition> <Action>open_camera</Action> <Action>take_photo</Action> </Sequence> <Sequence> <Condition>is_object_detected</Condition> <Action>upload_photo_to_base</Action> </Sequence> <Sequence> <Condition>is_area_safe</Condition> <Action>navigate_to_target</Action> <Action>scan_area</Action> </Sequence> </Selector> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'sleep': 'Action: Put the robot in sleep mode to conserve energy.', 'scan_area': 'Action: Use sensors to scan the surrounding area and analyze the environment.', 'move_to_target': 'Action: Move towards the specified target using shortest path algorithm.', 'is_target_reached': 'Condition: Check if the target has been reached or not.', 'is_area_safe': 'Condition: Check if the scanned area is deemed safe and suitable for rest.', 'is_energy_low': 'Condition: Check if the robot's energy level is below a certain threshold.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Generate a behavior tree for a swarm of robots to autonomously rest and recharge their batteries when their energy levels are low.
6.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>is_area_safe</Condition> <Action>scan_area</Action> <Action>move_to_target</Action> </Sequence> <Sequence> <Condition>is_energy_low</Condition> <Action>sleep</Action> </Sequence> </Selector> </BehaviorTree> 
###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'change_color_to_red': "Action: Change agent's color to red. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'If target is at a distance of 20 units, change color to red and freeze, if not, continue movement.' Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree> <Sequence> <Condition>is_target_reached</Condition> <Sequence> <Action>change_color_to_red</Action> <Action>agent_movement_freeze</Action> </Sequence> </Sequence> <Action>continue_movement_agent</Action> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_red': "Action: Change agent's color to red. Always returns True.", 'move_forward': 'Action: Move forward to target. Always returns True.', 'rotate_left': 'Action: Rotate left by 90 degrees. Always returns True.', 'rotate_right': 'Action: Rotate right by 90 degrees. Always returns True.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'is_intruder_detected': 'Condition: Check if an intruder is detected in the monitored area. Returns True if an intruder is detected, False otherwise.', 'is_goal_reached': 'Condition: Check if the goal is reached. Returns True if the agent reaches the goal, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Find a path to the goal while avoiding obstacles and if an intruder is detected, rotate left and change color to red to alert others.' Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>is_goal_reached</Condition> <Action>task_completed</Action> </Sequence> <Selector> <Sequence> <Condition>is_intruder_detected</Condition> <Action>rotate_left</Action> <Action>change_color_to_red</Action> </Sequence> <Sequence> <Action>is_obstacle_detected</Action> <Action>avoid_obstacle</Action> <Action>move_forward</Action> </Sequence> </Selector> <Action>wander</Action> </Selector> </BehaviorTree>
 
###
6.// INSTRUCTIONS: Use only the following behaviors {'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'is_intruder_detected': 'Condition: Check if an intruder is detected in the monitored area. Returns True if an intruder is detected, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Move towards the goal, avoid obstacles, and change color to green if the goal is reached.' Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>is_target_reached</Condition> <Action>change_color_to_green</Action> <Selector> <Sequence> <Condition>is_obstacle_detected</Condition> <Action>avoid_obstacle</Action> <Action>continue_movement_agent</Action> </Sequence> </Selector> </Sequence> <Action>move_forward</Action> </Selector> </BehaviorTree> 
###
4. // INSTRUCTIONS: Use only the following behaviors {'follow_path': 'Action: Follow pre-determined path based on earlier mapping and obstacles avoidance.', 'obstacle_avoidance': 'Action: Avoid obstacles while following the path. Returns False if obstacle is detected, True otherwise.', 'sensor_check': 'Condition: Check sensor data for any abnormalities or malfunctions. Returns False if any deviations are found, True otherwise.', 'is_path_complete': 'Condition: Check if the path has been completed successfully. Returns True if the path is complete, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Build a behavior tree for a swarm of robots to map and navigate through a complex maze-like environment while avoiding obstacles and checking for sensor malfunctions.
4.// OUTPUT:
<BehaviorTree> <Sequence> <Action>follow_path</Action> <Selector> <Sequence> <Condition>obstacle_avoidance</Condition> <Action>shift_right</Action> </Sequence> <Sequence> <Condition>sensor_check</Condition> <Action>re-calibrate_sensors</Action> </Sequence> </Selector> </Sequence> </BehaviorTree>
 
###
5.// INSTRUCTIONS: Use only the following behaviors {'start_engine': 'Action: Start the engine of the swarm robots. Always returns True.', 'deploy_sensors': 'Action: Deploy sensors for data collection. Always returns True.', 'take_off': 'Action: Take off and lift off from current position. Always returns True.', 'orbit_target': 'Action: Orbit and rotate around the target to collect data. Always returns True.', 'return_to_base': 'Action: Return to base and land safely. Always returns True.', 'is_engines_running': 'Condition: Check if the engines are running. Returns True if engines are running, False otherwise.', 'is_sensors_deployed': 'Condition: Check if sensors are successfully deployed. Returns True if sensors are deployed, False otherwise.', 'is_target_detected': 'Condition: Check if target is within range for data collection. Returns True if target is within range, False otherwise.', 'is_data_collection_complete': 'Condition: Check if enough data has been collected. Returns True if enough data is collected, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Design a behavior tree for a swarm of aerial robots to collect data from a specific target location, return to base and download data, and verify successful data collection.
5.// OUTPUT:
<BehaviorTree> <Sequence> <Action>start_engine</Action> <Action>deploy_sensors</Action> <Selector> <Sequence> <Condition>is_engines_running</Condition> <Action>take_off</Action> </Sequence> <Sequence> <Condition>is_sensors_deployed</Condition> <Action>orbit_target</Action> </Sequence> </Selector> <Selector> <Sequence> <Condition>is_target_detected</Condition> <Action>return_to_base</Action> </Sequence> <Sequence> <Condition>is_data_collection_complete</Condition> <Action>verify_data_collection</Action> </Sequence> </Selector> </Sequence> </BehaviorTree>
 
###
6.// INSTRUCTIONS: Use only the following behaviors {'detect_target': 'Action: Detect the target location using built-in sensors. Always returns True.', 'navigate_to_target': 'Action: Navigate towards the target using path planning algorithm. Always returns True.', 'examine_target': 'Action: Examine the target closely and collect data. Always returns True.', 'analyze_data': 'Action: Analyze the collected data and identify anomalies. Always returns True.', 'repair_target': 'Action: Use repair tools to fix any malfunctions or damages on the target. Always returns True.', 'is_target_detected': 'Condition: Check if the target has been detected. Returns True if the target is detected, False otherwise.', 'is_target_reached': 'Condition: Check if the target has been reached. Returns True if the target is reached, False otherwise.', 'are_anomalies_found': 'Condition: Check if any anomalies or damages were identified during data analysis. Returns True if anomalies are found, False otherwise.', 'is_target_repaired': 'Condition: Check if the target has been successfully repaired. Returns True if the target is repaired, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Create a behavior tree for a swarm of robots to detect, navigate, examine, and repair a damaged target in a hazardous environment.
6.// OUTPUT:
<BehaviorTree> <Sequence> <Action>detect_target</Action> <Selector> <Sequence> <Condition>is_target_detected</Condition> <Action>navigate_to_target</Action> </Sequence> <Sequence> <Condition>is_target_reached</Condition> <Action>examine_target</Action> </Sequence> </Selector> <Selector> <Sequence> <Condition>are_anomalies_found</Condition> <Action>analyze_data</Action> </Sequence> <Sequence> <Condition>is_target_repaired</Condition> <Action>repair_target</Action> </Sequence> </Selector> </Sequence> </BehaviorTree>
###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'face_target': "Action: Rotate agent to face the target. Always returns True.", 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Face the target, move forward, and avoid obstacles until target is reached.'Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree> <Sequence> <Action>face_target</Action> <Sequence> <Selector> <Sequence> <Condition>is_path_clear</Condition> <Action>continue_movement_agent</Action> </Sequence> <Action>avoid_obstacle</Action> <Action>continue_movement_agent</Action> </Selector> </Sequence> <Condition>is_target_reached</Condition> <Action>task_completed</Action> </Sequence> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'change_color_to_red': "Action: Change agent's color to red. Always returns True.", 'change_direction_left': "Action: Change agent's direction to left. Always returns True.", 'change_direction_right': "Action: Change agent's direction to right. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'detect_friends_nearby': "Condition: Check if there are friends nearby. Returns True if friends are detected, False otherwise.", 'detect_enemy_nearby': "Condition: Check if there are enemies nearby. Returns True if enemies are detected, False otherwise.", 'detect_food_nearby': "Condition: Check if there is food nearby. Returns True if food is detected, False otherwise.", 'move_to_friend_position': "Action: Move towards friend's position. Returns True if successfully moved to friend's position, False otherwise.", 'move_to_enemy_position': "Action: Move towards enemy's position. Returns True if successfully moved to enemy's position, False otherwise.", 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Find nearest food source and move towards it, while avoiding enemies and staying close to friends.'Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Condition>detect_enemy_nearby</Condition> <Action>continue_movement_agent</Action> <Condition>detect_friends_nearby</Condition> <Action>continue_movement_agent</Action> </Selector> <Sequence> <Condition>detect_food_nearby</Condition> <Action>move_to_food_position</Action> </Sequence> <Action>wander</Action> </Sequence> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'form_circle': 'Action: Form a circle with radius of 10 around current position. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_circle_formed': 'Condition: Check if a circle is formed with radius of 10. Returns True if the circle is formed, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Form a circle with radius of 10 around the nest, then change color to green and freeze movement.'Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>is_circle_formed</Condition> <Action>change_color_to_green</Action> <Action>agent_movement_freeze</Action> <Action>task_completed</Action> </Sequence> <Action>form_circle</Action></Selector> <Sequence> <Condition>is_agent_in_nest</Condition> <Action>change_color_to_white</Action> </Sequence> </Sequence> </BehaviorTree>
###
4.// INSTRUCTIONS: Use only the following behaviors {'scan_environment': 'Action: Scan the environment for any objects or obstacles and store the information for decision-making.', 'move_towards_light': 'Action: Move towards the source of light.', 'move_away_from_light': 'Action: Move away from the light source.', 'is_light_detected': 'Condition: Check if the light source is detected within a certain range.', 'is_object_reached': 'Condition: Check if the object of interest has been reached.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_at_neutral_position': 'Condition: Check if the robot is at its neutral position.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Generate a behavior tree to explore and collect objects in a dark or dimly lit environment, while avoiding obstacles and navigating towards light sources.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>scan_environment</Action><Selector><Sequence><Condition>is_light_detected</Condition><Action>move_towards_light</Action></Sequence><Sequence><Condition>is_object_reached</Condition><Action>pick_up_object</Action></Sequence></Selector></Sequence><Sequence><Condition>is_obstacle_detected</Condition><Selector><Sequence><Condition>is_at_neutral_position</Condition><Action>move_away_from_light</Action></Sequence><Action>turn_left</Action></Selector></Sequence></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'move_forward': 'Action: Move one step forward while maintaining formation.', 'shift_left': 'Action: Shift the entire formation one step to the left.', 'shift_right': 'Action: Shift the entire formation one step to the right.', 'gather_resource': 'Action: Gather resources from the environment and store them in the swarm's storage.', 'deposit_resource': 'Action: Deposit resources from the swarm's storage onto the designated area.', 'is_resource_nearby': 'Condition: Check if there are resources within a certain range of the swarm.', 'is_storage_full': 'Condition: Check if the swarm's storage is full.', 'is_deposit_point_reached': 'Condition: Check if the designated deposit point has been reached.', 'is_formation_broken': 'Condition: Check if the formation has become misaligned or broken.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Generate a behavior tree to collect resources from the environment and deposit them at a designated location, while maintaining formation and avoiding obstacles.
5.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Action>gather_resource</Action><Condition>is_resource_nearby</Condition><Action>move_forward</Action></Sequence><Sequence><Condition>is_formation_broken</Condition><Action>reform_formation</Action></Sequence></Selector><Selector><Sequence><Condition>is_storage_full</Condition><Action>deposit_resource</Action></Sequence><Sequence><Condition>is_deposit_point_reached</Condition><Action>move_forward</Action></Sequence></Selector></Sequence></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'navigate_to_target': 'Action: Use GPS to navigate to a specified target location.', 'determine_path_obstacle': 'Action: Use sensors to determine the obstacles along the way and adjust the navigation path accordingly.', 'charge_battery': 'Action: Return to charging station to recharge the battery.', 'is_target_reached': 'Condition: Check if the target location has been reached.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_battery_low': 'Condition: Check if the battery level is below a certain threshold, indicating the need for recharging.', 'is_at_charging_station': 'Condition: Check if the robot has reached the designated charging station.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Generate a behavior tree for a swarm of robots to navigate to a specific target location, while avoiding obstacles and managing battery life by returning to a charging station when necessary.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>charge_battery</Action><Condition>is_at_charging_station</Condition></Sequence><Selector><Sequence><Action>navigate_to_target</Action><Condition>is_battery_low</Condition><Action>return_to_charging_station</Action></Sequence><Sequence><Action>determine_path_obstacle</Action><Selector><Sequence><Condition>is_obstacle_detected</Condition><Action>adjust_navigation_path</Action></Sequence><Action>move_forward</Action></Selector></Sequence></Selector></BehaviorTree>
###
4.// INSTRUCTIONS: Use only the following behaviors {'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_at_destination': 'Condition: Check if the robot has reached the destination. Returns True if at the destination, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.', 'rotate_cw': 'Action: Rotate the robot clockwise by 45 degrees. Always returns True.', 'rotate_ccw': 'Action: Rotate the robot counterclockwise by 45 degrees. Always returns True.', 'move_forward': 'Action: Move the robot forward by one unit. Always returns True.', 'move_backward': 'Action: Move the robot backward by one unit. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Navigate through a maze to reach the destination'. Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_at_destination</Condition><Action>task_completed</Action></Sequence><Selector><Sequence><Condition>is_obstacle_detected</Condition><Sequence><Action>move_forward</Action><Action>move_backward</Action></Sequence></Sequence><Sequence><Selector><Condition>is_line_formed</Condition><Sequence><Action>rotate_cw</Action><Action>rotate_ccw</Action></Sequence></Selector><Action>wander</Action></Sequence></Selector></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.', 'move_to_target': 'Action: Move towards the target. Returns True if target is reached, False otherwise.', 'face_target': 'Action: Rotate and face the target. Returns True if facing the target, False otherwise.', 'detect_target': 'Action: Use sensors to detect target. Returns True if target is detected, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Find and retrieve the target object'. Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_target_detected</Condition><Action>detect_target</Action><Sequence><Condition>is_target_reached</Condition><Action>move_to_target</Action></Sequence><Action>task_completed</Action></Sequence><Sequence><Condition>is_agent_in_nest</Condition><Action>change_color_to_green</Action></Sequence><Sequence><Condition>is_obstacle_detected</Condition><Action>avoid_obstacle</Action></Sequence><Action>wander</Action></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.', 'follow_line': 'Action: Use sensors to follow the line. Returns True if line is followed successfully, False otherwise.', 'detect_obstacle': 'Action: Use sensors to detect obstacles. Returns True if obstacle is detected, False otherwise.', 'move_forward': 'Action: Move the robot forward by one unit. Always returns True.', 'move_backward': 'Action: Move the robot backward by one unit. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Follow the line while avoiding obstacles and reach the end point'. Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_line_formed</Condition><Action>follow_line</Action><Sequence><Condition>is_agent_in_nest</Condition><Action>change_color_to_green</Action></Sequence><Action>task_completed</Action></Sequence><Selector><Sequence><Condition>is_obstacle_detected</Condition><Action>detect_obstacle</Action><Selector><Condition>is_target_reached</Condition><Sequence><Action>move_forward</Action><Action>move_backward</Action></Sequence></Selector></Sequence><Action>wander</Action></Selector></Selector></BehaviorTree> 
###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_blue': "Action: Change agent's color to blue. Always returns True.", 'change_color_to_red': "Action: Change agent's color to red. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'spread_out': 'Action: Move away from a central point. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_blue_detected': 'Condition: Check if another blue agent is present. Returns True if another blue agent is detected, False otherwise.', 'is_red_detected': 'Condition: Check if another red agent is present. Returns True if another red agent is detected, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 10 units. Returns True if the target is within 10 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Avoid obstacles and other robots while moving towards the target, and communicate with other blue agents.'Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_obstacle_detected</Condition><Action>avoid_obstacle</Action><Sequence><Condition>is_blue_detected</Condition><Action>spread_out</Action></Sequence><Action>continue_movement_agent</Action><Action>task_completed</Action></Sequence><Selector><Sequence><Condition>is_target_reached</Condition><Action>change_color_to_blue</Action><Action>continue_movement_agent</Action></Sequence><Sequence><Condition>is_red_detected</Condition><Action>change_color_to_red</Action><Action>continue_movement_agent</Action></Sequence></Selector></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'pick_up_object': 'Action: Pick up an object within reach. Returns True if an object is picked up, False otherwise.', 'put_down_object': 'Action: Put down currently held object. Returns True if object is successfully put down, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Form a line and pick up an object, then continue movement while avoiding obstacles.'Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>form_line</Action><Sequence><Condition>is_line_formed</Condition><Action>pick_up_object</Action></Sequence></Sequence><Selector><Sequence><Condition>is_obstacle_detected</Condition><Action>avoid_obstacle</Action><Action>continue_movement_agent</Action></Sequence><Selector><Sequence><Condition>is_path_clear</Condition><Action>put_down_object</Action></Sequence><Action>task_completed</Action></Selector></Selector></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'follow': 'Action: Follow another agent. Returns True if successfully following, False otherwise.', 'wait_for_sync': 'Action: Wait for synchronization signal from other agents. Returns True when synchronization is achieved, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Follow the leader agent while maintaining formation.'Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_agent_in_nest</Condition><Action>form_line</Action></Sequence><Selector><Sequence><Condition>is_target_reached</Condition><Action>change_color_to_green</Action><Action>continue_movement_agent</Action><Action>task_completed</Action></Sequence><Sequence><Condition>is_path_clear</Condition><Action>follow</Action><Action>wait_for_sync</Action></Sequence></Selector></Selector></BehaviorTree>
###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Avoid obstacles, continue movement, and change color to white'Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>is_obstacle_detected</Condition><Action>avoid_obstacle</Action><Action>continue_movement_agent</Action></Sequence><Action>change_color_to_white</Action></Selector></Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Move towards target, avoid obstacles, and change color to green'Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>is_target_detected</Condition><Action>change_color_to_green</Action><Action>task_completed</Action></Sequence><Sequence><Condition>is_obstacle_detected</Condition><Action>avoid_obstacle</Action><Action>continue_movement_agent</Action></Sequence></Selector><Action>wander</Action></Sequence></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Follow predefined path, check for obstacles, and form a line'Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>is_path_clear</Condition> <Action>continue_movement_agent</Action> </Sequence> <Action>form_line</Action> </Selector> <Action>avoid_obstacle</Action> </Sequence> </BehaviorTree> 
###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Return to a safe distance from the closest obstacle. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 30 units. Returns True if the target is within 30 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'orient_to_target': "Action: Orient towards the detected target. Always returns True.", 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Locate the closest obstacle, return to a safe distance, and orient towards the target.'Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>is_target_detected</Condition> <Action>orient_to_target</Action> </Sequence> <Action>wander</Action> </Selector> <Sequence> <Condition>is_obstacle_detected</Condition> <Action>avoid_obstacle</Action> </Sequence> </Sequence> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Return to a safe distance from the closest obstacle. Always returns True.', 'change_color_to_blue': "Action: Change agent's color to blue. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_circle': 'Action: Move in a circular formation with other agents. Always returns True.', 'is_agent_in_formation': 'Condition: Check if agent is in a formation with other agents. Returns True if agent is in formation, False otherwise.', 'is_agent_nearby': 'Condition: Check if agent is within 15 units of others. Returns True if agent is within 15 units, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_target_detected': 'Condition: Check if target is within 25 units. Returns True if the target is within 25 units of distance, False otherwise.', 'move_in_formation': "Action: Move in a specific formation with other agents. Always returns True.", 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Form a circular formation with other agents, change color to blue, and move in formation towards the target.'Output only the XML behavior tree without extra text.
5.// OUTPUT:
 <BehaviorTree> <Selector> <Sequence> <Action>form_circle</Action> <Sequence> <Condition>is_agent_in_formation</Condition> <Action>move_in_formation</Action> </Sequence> </Sequence> <Sequence> <Condition>is_target_detected</Condition> <Action>change_color_to_blue</Action> </Sequence> <Action>continue_movement_agent</Action> </Selector> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Return to a safe distance from the closest obstacle. Always returns True.', 'change_color_to_blue': "Action: Change agent's color to blue. Always returns True.", 'change_color_to_red': "Action: Change agent's color to red. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_target_detected': 'Condition: Check if target is within 25 units. Returns True if the target is within 25 units of distance, False otherwise.', 'orient_away_from_obstacle': "Action: Orient away from the detected obstacle. Always returns True.", 'orient_to_target': "Action: Orient towards the detected target. Always returns True.", 'return_to_nest': 'Action: Return to the nest. Always returns True.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Avoid obstacles, return to the nest, and change color to red.'Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>is_obstacle_detected</Condition> <Action>avoid_obstacle</Action> </Sequence> <Sequence> <Condition>is_agent_in_nest</Condition> <Action>change_color_to_red</Action> </Sequence> <Action>return_to_nest</Action> </Selector> </BehaviorTree> 
###
4.// INSTRUCTIONS: Use only the following behaviors {'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_blue': "Action: Change agent's color to blue. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'move_forward_3_units': "Action: Move forward 3 units in current direction. Always returns True.", 'move_backward_2_units': "Action: Move backward 2 units in current direction. Always returns True.", 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_reached': 'Condition: Check if target is within 10 units. Returns True if the target is within 10 units of distance, False otherwise.', 'object_picked_up': 'Action: Pick up an object. Returns True if an object is successfully picked up, False otherwise.', 'object_dropped': 'Action: Drop the currently held object. Returns True if an object is dropped, False if no object is currently held.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Pick up an object, avoid obstacles, move forward 3 units, drop object, then move backward 2 units.'Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Action>object_picked_up</Action> <Selector> <Action>avoid_obstacle</Action> <Sequence> <Condition>is_obstacle_detected</Condition> <Action>move_forward_3_units</Action> </Sequence> </Selector> <Action>object_dropped</Action> <Action>move_backward_2_units</Action> </Sequence> <Action>continue_movement_agent</Action> </Selector> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_green': 'Condition: Check if agent is currently green. Returns True if the agent is green, False otherwise.', 'is_red': 'Condition: Check if agent is currently red. Returns True if the agent is red, False otherwise.', 'is_yellow': 'Condition: Check if agent is currently yellow. Returns True if the agent is yellow, False otherwise.', 'is_blue': 'Condition: Check if agent is currently blue. Returns True if the agent is blue, False otherwise.', 'is_painting_in_progress': 'Condition: Check if agent is currently painting. Returns True if the agent is painting, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Avoid obstacles, change color to red if currently green, and continue moving.'Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree> <Sequence> <Action>avoid_obstacle</Action> <Selector> <Sequence> <Condition>is_green</Condition> <Action>change_color_to_red</Action> <Action>task_completed</Action> </Sequence> <Sequence> <Condition>is_painting_in_progress</Condition> <Action>continue_movement_agent</Action> <Action>task_completed</Action> </Sequence> <Sequence> <Condition>is_red</Condition> <Action>change_color_to_green</Action> </Sequence> <Sequence> <Condition>is_yellow</Condition> <Action>change_color_to_green</Action> </Sequence> <Sequence> <Condition>is_blue</Condition> <Action>change_color_to_green</Action> </Sequence> </Selector> </Sequence> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'move_forward_2_units': "Action: Move forward 2 units in current direction. Always returns True.", 'rotate_left_90_degrees': 'Action: Rotate left 90 degrees. Always returns True.', 'rotate_right_90_degrees': 'Action: Rotate right 90 degrees. Always returns True.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_reached': 'Condition: Check if target is within 10 units. Returns True if the target is within 10 units of distance, False otherwise.', 'abort_task': 'Action: Abort the current task. Always returns True.', 'complete_task': 'Action: Complete the current task. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Move forward 2 units, check for obstacles, rotate left 90 degrees, check for obstacles again, then abort the current task.'Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree> <Sequence> <Action>move_forward_2_units</Action> <Selector> <Sequence> <Condition>is_obstacle_detected</Condition> <Action>abort_task</Action> <Action>task_completed</Action> </Sequence> <Sequence> <Condition>is_path_clear</Condition> <Action>rotate_left_90_degrees</Action> </Sequence> </Selector> </Sequence> </BehaviorTree> 
###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_red': "Action: Change agent's color to red. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'is_intruder_detected': 'Condition: Check if an intruder is detected in the monitored area. Returns True if an intruder is detected, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Move randomly until target is detected, then change color to red and freeze movement'. Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>is_target_detected</Condition> <Action>change_color_to_red</Action> <Action>agent_movement_freeze</Action> <Action>task_completed</Action> </Sequence> <Action>wander</Action> </Selector> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_red': "Action: Change agent's color to red. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'is_intruder_detected': 'Condition: Check if an intruder is detected in the monitored area. Returns True if an intruder is detected, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Avoid obstacles while moving towards target'. Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>is_target_reached</Condition> <Action>continue_movement_agent</Action> </Sequence> <Condition>is_obstacle_detected</Condition> <Action>avoid_obstacle</Action> <Action>wander</Action> </Selector> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_red': "Action: Change agent's color to red. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'is_intruder_detected': 'Condition: Check if an intruder is detected in the monitored area. Returns True if an intruder is detected, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER 
###
4.// INSTRUCTIONS: Use only the following behaviors {'change_color_to_blue': "Action: Change agent's color to blue. Always return True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'detect_target': 'Condition: Check if target is detected. Returns True if target is detected, False otherwise.', 'move_to_target': 'Action: Move towards the target. Always returns True.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Detect the target, move towards it, change color to blue and signal task completion.'Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>detect_target</Condition> <Action>change_color_to_blue</Action> <Action>task_completed</Action> </Sequence> <Action>move_to_target</Action> </Selector> </Sequence> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'change_direction': "Action: Change agent's current direction. Always returns True.", 'change_rotation_speed': "Action: Change agent's rotation speed. Always returns True.", 'detect_landmark': 'Condition: Check if a landmark is detected. Returns True if a landmark is detected, False otherwise.', 'follow_path': 'Action: Follow path towards the target. Always returns True.', 'get_current_location': 'Action: Get current location of the agent. Always returns True.', 'is_at_target': 'Condition: Check if agent has reached the target. Returns True if the agent has reached the target, False otherwise.', 'is_goal_reached': 'Condition: Check if the goal is reached. Returns True if the goal is reached, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Follow the path to the target, while checking for landmarks and changing direction if necessary. Upon reaching the goal, signal task completion.'Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>detect_landmark</Condition> <Action>get_current_location</Action> <Action>follow_path</Action> </Sequence> <Action>change_direction</Action> </Selector> <Sequence> <Condition>is_goal_reached</Condition> <Action>task_completed</Action> </Sequence> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'change_color_to_yellow': "Action: Change agent's color to yellow. Always returns True.", 'is_at_target': 'Condition: Check if agent has reached the target. Returns True if the agent has reached the target, False otherwise.', 'move_forward': 'Action: Move forward in the direction of the target. Always returns True.', 'rotate_by_angle': "Action: Rotate agent by a specified angle. Always returns True.", 'rotate_random_left': 'Action: Rotate randomly to the left. Always returns True.', 'rotate_random_right': 'Action: Rotate randomly to the right. Always returns True.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'target_detected': 'Condition: Check if target is within range. Returns True if the target is within 15 units, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Move forward until the target is detected, then rotate randomly until the target is within range, and finally change color to yellow and signal task completion.'Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>target_detected</Condition> <Action>task_completed</Action> </Sequence> <Action>move_forward</Action> </Selector> <Selector> <Sequence> <Condition>target_detected</Condition> <Action>rotate_random_left</Action> </Sequence> <Action>rotate_by_angle</Action> </Selector> <Selector> <Sequence> <Condition>target_detected</Condition> <Action>rotate_random_right</Action> </Sequence> <Action>rotate_by_angle</Action> </Selector> <Action>change_color_to_yellow</Action> </Sequence> </BehaviorTree>#
4.// INSTRUCTIONS: Use only the following behaviors {'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'check_battery_level': 'Condition: Check the battery level. Returns True if battery level is above 70%, False if below 50%, and False otherwise.', 'go_to_charging_station': 'Action: Go to the nearest charging station. Returns True if successfully reached the station, False otherwise.', 'is_charging_complete': 'Condition: Check if charging is complete. Returns True if charging is complete, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 20 units. Returns True if the target is reached within 20 units of distance, False otherwise.', 'move_towards_target': 'Action: Move towards the target. Always returns True.', 'report_battery_level': 'Action: Report battery level to other robots. Always returns True.', 'search_for_target': 'Action: Search the environment for the target. Returns True if target is found, False otherwise.', 'task_completed': 'Action: Signal task completion by returning to base station. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Search for target, report battery level, and move towards target if battery level is above 70%. If battery level is below 50%, go to charging station and wait for charging to be complete before moving towards target. Once target is reached, return to base station and signal task completion.'Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>is_target_reached</Condition> <Action>report_battery_level</Action> <Action>move_towards_target</Action> </Sequence> <Sequence> <Condition>is_charging_complete</Condition> <Action>task_completed</Action> </Sequence> <Sequence> <Condition>check_battery_level</Condition> <Action>go_to_charging_station</Action> </Sequence> <Action>search_for_target</Action> </Selector> </BehaviorTree>

#
5.// INSTRUCTIONS:Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'assign_task': 'Action: Assign a task to another robot. Returns True if successfully assigned, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_task_assigned': 'Condition: Check if task is successfully assigned. Returns True if task is assigned, False otherwise.', 'join_group': 'Action: Join a formation with other robots. Returns True if successfully joined, False otherwise.', 'leave_group': 'Action: Leave the formation with other robots. Returns True if successfully left, False otherwise.', 'perform_task': 'Action: Perform the assigned task. Returns True if task is successfully completed, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Join a group formation, avoid obstacles, and assign a task to another robot. If task is successfully assigned, leave the group and perform the task. Signal task completion once task is completed.'Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>is_task_assigned</Condition> <Action>leave_group</Action> <Action>perform_task</Action> <Action>task_completed</Action> </Sequence> <Action>assign_task</Action> </Selector> <Selector> <Sequence> <Condition>is_obstacle_detected</Condition> <Action>avoid_obstacle</Action> </Sequence> <Action>join_group</Action> </Selector> </Sequence> </BehaviorTree>

#
6.// INSTRUCTIONS:Use only the following behaviors {'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'form_circle': 'Action: Form a circle with other robots. Returns True if successfully formed, False otherwise.', 'is_agent_in_range': 'Condition: Check if other robot is within range of communication. Returns True if within range, False otherwise.', 'is_circle_formed': 'Condition: Check if a circle is formed with other robots. Returns True if the circle is formed, False otherwise.', 'move_towards_agent': 'Action: Move towards the other robot. Returns True if successfully reached, False otherwise.', 'report_status': 'Action: Report status to other robots. Returns True if successfully reported, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Form a circle with other robots, report status, and move towards another robot if within communication range. Signal task completion once the circle is formed.'Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Selector> <Sequence> <Condition>is_circle_formed</Condition> <Action>task_completed</Action> </Sequence> <Action>form_circle</Action> </Selector> <Sequence> <Condition>is_agent_in_range</Condition> <Action>report_status</Action> <Action>move_towards_agent</Action> </Sequence> </Sequence> </BehaviorTree>Note: "reform_formation" is a hypothetical behavior that can be added to the predefined behaviors list to cater to the task at hand.

###
4.// INSTRUCTIONS: Use only the following behaviors {'explore': 'Action: Explore and observe the environment for potential threats.', 'approach_herd': 'Action: Move towards the herd of animals and get within 10 feet.', 'herd_behavior': 'Action: Mimic the behavior of the herd to blend in and avoid drawing attention.', 'part_ways': 'Action: Move away from the herd and form a new group.', 'is_threat_detected': 'Condition: Check if there is a potential threat in the surroundings.', 'is_within_herd': 'Condition: Check if the agent is currently within 10 feet of the herd.', 'is_in_herd_behaviour': 'Condition: Check if the agent is mimicking the herd behaviour.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'observe environment, form a new group, and mimic the behavior of the herd'
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_within_herd</Condition><Selector><Sequence><Condition>is_threat_detected</Condition><Action>part_ways</Action></Sequence><Action>approach_herd</Action></Selector></Sequence><Sequence><Condition>is_in_herd_behaviour</Condition><Selector><Sequence><Condition>is_threat_detected</Condition><Action>part_ways</Action></Sequence><Action>herd_behavior</Action></Selector></Sequence><Action>explore</Action></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'gather_resource': 'Action: Gather resources in the environment for the swarm.', 'deposit_resource': 'Action: Deposit gathered resources at a designated location.', 'return_to_nest': 'Action: Return to the nest to offload gathered resources.', 'protect_nest': 'Condition: Check if there is a threat to the nest.', 'check_resource_level': 'Condition: Check if the agent has enough resources to deposit.', 'is_nest_reached': 'Condition: Check if the agent has successfully reached the nest.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'gather resources, return to nest, deposit resources, and protect the nest'
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>protect_nest</Condition><Action>gather_resource</Action></Sequence><Sequence><Condition>check_resource_level</Condition><Selector><Sequence><Condition>protect_nest</Condition><Action>return_to_nest</Action></Sequence><Action>deposit_resource</Action></Selector></Sequence></Selector></BehaviorTree>
Note: The behavior tree can be expanded to include more complex behaviors for gathering resources in different environments or for different types of resources.

###
6.// INSTRUCTIONS: Use only the following behaviors {'detect_enemy': 'Condition: Check if there is an enemy within 10 meters of the agent.', 'attack': 'Action: Attack the identified enemy.', 'spot_scout': 'Action: Send out a scout to explore and gather information about the surroundings.', 'return_to_base': 'Action: Return to the base after completing a successful attack.', 'search_and_destroy': 'Action: Continuously search and destroy enemies in the vicinity.', 'is_enemy_found': 'Condition: Check if an enemy has been located and identified.', 'is_scout_returned': 'Condition: Check if the scout has completed its task and returned to base.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'send scout, attack enemy, and continue to search and destroy'
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_scout_returned</Condition><Selector><Sequence><Condition>is_enemy_found</Condition><Action>attack</Action><Sequence><Condition>is_enemy_found</Condition><Selector><Action>search_and_destroy</Action><Action>spot_scout</Action></Selector></Sequence><Action>return_to_base</Action></Selector></Sequence></BehaviorTree>
Note: The behavior tree can be further expanded to include behaviors for handling multiple scouts and coordinating attacks with other agents in the swarm. 
###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'follow_target': "Action: Move towards the target. Always returns True.", 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'move_away_obstacle': 'Action: Move away from detected obstacle. Always returns True.', 'move_away_target': 'Action: Move away from the target. Always returns True.', 'move_backward_agent': 'Action: Move backwards. Always returns True.', 'move_forward_agent': 'Action: Move forwards. Always returns True.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Avoid the obstacle, follow the target, and form a line.'Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>is_obstacle_detected</Condition> <Action>avoid_obstacle</Action> </Sequence> <Selector> <Sequence> <Condition>is_target_detected</Condition> <Action>follow_target</Action> </Sequence> <Action>form_line</Action> </Selector> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'form_circle': 'Action: Form a circle at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_circle_formed': 'Condition: Check if a circle is formed. Returns True if a circle is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'move_closer_target': 'Action: Move closer to the target. Always returns True.', 'move_away_obstacle': 'Action: Move away from detected obstacle. Always returns True.', 'move_left_agent': 'Action: Move left. Always returns True.', 'move_right_agent': 'Action: Move right. Always returns True.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Detect an obstacle, avoid it, and move in a circle until the target is reached.'Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree> <Sequence> <Condition>is_obstacle_detected</Condition> <Action>avoid_obstacle</Action> <Action>form_circle</Action> <Selector> <Sequence> <Condition>is_circle_formed</Condition> <Action>move_closer_target</Action> <Action>task_completed</Action> </Sequence> <Selector> <Action>wander</Action> </Selector> </Sequence> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'is_agent_near_formation': 'Condition: Check if agent is within 5 units of distance from formation. Returns True if agent is within 5 units, False otherwise.', 'line_up_behind_agent': 'Action: Line up behind the agent. Always returns True.', 'move_away_target': 'Action: Move away from the target. Always returns True.', 'move_backward_agent': 'Action: Move backwards. Always returns True.', 'move_forward_agent': 'Action: Move forwards. Always returns True.', 'move_towards_formation': 'Action: Move towards the formation. Always returns True.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Detect an obstacle, move away from it, and form a line at the formation.'Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree> <Sequence> <Condition>is_obstacle_detected</Condition> <Action>avoid_obstacle</Action> <Action>move_away_target</Action> <Selector> <Sequence> <Condition>is_agent_near_formation</Condition> <Action>move_towards_formation</Action> <Action>line_up_behind_agent</Action> <Action>task_completed</Action> </Sequence> <Selector> <Action>wander</Action> </Selector> </Sequence> </BehaviorTree> 
###
4.// INSTRUCTIONS: Use only the following behaviors {'move_to_location': 'Action: Move to specified location as directed by external communication.', 'check_battery_level': 'Condition: Check the battery level of the robot and determine if charging is necessary.', 'alert_team_about_location': 'Action: Communicate the current location to other robots on the team.', 'charge_battery': 'Action: Connect to a charging station and recharge the battery.', 'engage_shield': 'Action: Activate the robot's shield for protection.', 'fire_weapon': 'Action: Fire the robot's weapon at a designated target.', 'check_enemy_health': 'Condition: Check the health of the designated enemy target and decide whether to continue attacking or retreat.', 'is_under_fire': 'Condition: Check if the robot is under fire from enemy attacks.', 'is_mission_completed': 'Condition: Check if the mission objective has been completed.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: compile behavior tree for a swarm of robots to navigate a battlefield, engage in combat, and complete the assigned mission objective.
4.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_mission_completed</Condition><Action>task_completed</Action></Sequence><Selector><Sequence><Condition>is_under_fire</Condition><Action>engage_shield</Action></Sequence><Sequence><Condition>is_enemy_detected</Condition><Action>fire_weapon</Action></Sequence></Selector><Sequence><Condition>check_battery_level</Condition><Selector><Sequence><Condition>low_battery</Condition><Action>charge_battery</Action></Sequence><Action>move_to_location</Action></Selector></Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'change_movement_pattern': 'Action: Change the current movement pattern of the robot.', 'follow_leader': 'Action: Follow the designated leader robot within the swarm.', 'communicate_location_with_swarm': 'Action: Share location information with the rest of the swarm robots.', 'is_leader_detected': 'Condition: Check if a leader robot is detected within the swarm.', 'is_decision_time': 'Condition: Check if it is time for the robots to make a coordinated decision.', 'is_motion_blocked': 'Condition: Check if the designated robot's motion is blocked by an obstacle.', 'swarm_surround_enemy': 'Action: Coordinate with the rest of the swarm to surround and immobilize the designated enemy target.', 'intercept_enemy': "Action: Intercept and block the designated enemy target's movement.", 'identify_enemy_weak_spot': 'Action: Analyze and identify the vulnerable spot of the designated enemy target.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree for a swarm of robots to locate and disable a specific enemy target, using a strategy of enclosing and intercepting.
5.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_decided_on_target</Condition><Action>task_completed</Action></Sequence><Sequence><Condition>is_leader_detected</Condition><Action>follow_leader</Action></Sequence><Selector><Sequence><Condition>is_decision_time</Condition><Selector><Sequence><Condition>is_motion_blocked</Condition><Action>change_movement_pattern</Action></Sequence><Action>communicate_location_with_swarm</Action></Selector></Sequence><Sequence><Condition>is_enemy_detected</Condition><Selector><Sequence><Condition>is_enemy_nearby</Condition><Action>detect_enemy_weak_spot</Action><Action>send_location_to_swarm</Action></Sequence><Action>swarm_surround_enemy</Action></Selector></Sequence></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'move_to_location': 'Action: Move to specified location as directed by external communication.', 'check_battery_level': 'Condition: Check the battery level of the robot and determine if charging is necessary.', 'transfer_energy': 'Action: Transfer energy to a nearby robot in need.', 'search_for_resources': "Action: Search for and collect resources in the environment for future use.", 'deposit_resources': 'Action: Deposit collected resources into a designated storage location.', 'is_resource_nearby': 'Condition: Check if resources are within a certain distance from the robot.', 'is_storage_full': 'Condition: Check if the designated storage location is full.', 'is_receiving_energy': 'Condition: Check if the robot is currently receiving energy from another robot.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: compile behavior tree for a swarm of robots to efficiently gather and store resources for the entire swarm's energy needs.
6.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_storage_full</Condition><Action>task_completed</Action><Action>deposit_resources</Action></Sequence><Selector><Sequence><Condition>low_battery</Condition><Action>transfer_energy</Action></Sequence><Sequence><Condition>need_resources</Condition><Action>search_for_resources</Action></Sequence><Sequence><Condition>is_resource_nearby</Condition><Action>move_to_resource</Action></Sequence></Selector></BehaviorTree> 
###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_red': "Action: Change agent's color to red. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'explore_area': 'Action: Move to a random location and explore the surrounding area by avoiding obstacles. Always returns True.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'is_item_detected': 'Condition: Check if a valuable item is detected in the environment. Returns True if an item is detected, False otherwise.', 'grab_item': 'Action: Move towards and pick up the nearest valuable item. Always returns True.', 'deposit_item': 'Action: Move towards and deposit the collected items. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Scout the environment and collect valuable items, then return to deposit the items in the designated location'. Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_item_detected</Condition><Selector><Sequence><Condition>is_target_detected</Condition><Sequence><Action>grab_item</Action><Condition>is_target_reached</Condition><Action>continue_movement_agent</Action></Sequence><Action>deposit_item</Action></Selector></Sequence><Sequence><Condition>is_agent_in_nest</Condition><Action>change_color_to_white</Action><Action>agent_movement_freeze</Action></Sequence></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_red': "Action: Change agent's color to red. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'move_through_door': 'Action: Move through a door by detecting and avoiding obstacles. Always returns True.', 'is_at_door': 'Condition: Check if the agent is at a door. Returns True if the agent is at a door, False otherwise.', 'is_door_blocked': 'Condition: Check if the door is blocked by an obstacle. Returns True if the door is blocked, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Navigate through a maze with multiple doors to reach the target destination.'. Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_obstacle_detected</Condition><Action>avoid_obstacle</Action></Sequence><Selector><Sequence><Condition>is_at_door</Condition><Selector><Sequence><Condition>is_door_blocked</Condition><Action>continue_movement_agent</Action></Sequence><Action>move_through_door</Action></Selector></Sequence><Action>wander</Action></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_red': "Action: Change agent's color to red. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'follow_path': 'Action: Follow a designated path while avoiding obstacles. Always returns True.', 'is_item_detected': 'Condition: Check if a valuable item is detected in the environment. Returns True if an item is detected, False otherwise.', 'pick_up_item': 'Action: Move towards and pick up the nearest valuable item. Always returns True.', 'deposit_item': 'Action: Move towards and deposit the collected items. Always returns True.', 'return_to_path': 'Action: Return to the designated path after completing a task. Always returns True.', 'stop_and_scan': 'Action: Stop and scan the surrounding environment for any changes. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Navigate through a designated path while collecting items and updating the path if any obstacles are encountered along the way.'. Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_obstacle_detected</Condition><Action>avoid_obstacle</Action></Sequence><Selector><Sequence><Condition>is_item_detected</Condition><Selector><Sequence><Condition>is_target_detected</Condition><Sequence><Action>pick_up_item</Action><Condition>is_target_reached</Condition><Action>continue_movement_agent</Action></Sequence><Action>deposit_item</Action></Selector></Sequence><Selector><Condition>is_path_clear</Condition><Action>follow_path</Action></Selector><Action>return_to_path</Action></Selector></BehaviorTree>  
###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'change_color_to_blue': "Action: Change agent's color to blue. Always returns True.", 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_red': "Action: Change agent's color to red. Always returns True.", 'change_color_to_yellow': "Action: Change agent's color to yellow. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'evade_obstacle': 'Action: Evade detected obstacles. Always returns True.', 'form_triangle': 'Action: Form a triangle with agent at the base. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_triangle_formed': 'Condition: Check if a triangle is formed. Returns True if the triangle is formed with the agent at the base, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'target_reached': 'Condition: Check if the target has been reached. Returns True if the target is within 10 units of distance, False otherwise.',}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Follow target, evade obstacles, and form a triangle with the agent at the base when the target is reached'. Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Conditional>is_path_clear</Conditional><Action>continue_movement_agent</Action></Sequence><Sequence><Conditional>is_obstacle_detected</Conditional><Action>evade_obstacle</Action></Sequence><Sequence><Conditional>is_target_reached</Conditional><Sequence><Conditional>is_agent_in_nest</Conditional><Action>change_color_to_blue</Action><Sequence><Conditional>is_triangle_formed</Conditional><Action>change_color_to_yellow</Action></Sequence></Sequence></Sequence></Selector></BehaviorTree>
###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'collect_resource': 'Action: Collect available resources. Returns True if resources are collected, False otherwise.', 'drop_resource': 'Action: Drop collected resources at the destination. Returns True if resources are dropped at the destination, False otherwise.', 'find_resource': "Condition: Check if resources are nearby. Returns True if resources are within 20 units of distance, False otherwise.", 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_resource_collected': 'Condition: Check if resources have been collected. Returns True if resources have been collected, False otherwise.', 'is_resource_dropped': 'Condition: Check if resources have been dropped. Returns True if resources have been dropped at the destination, False otherwise.', 'move_to_destination': 'Action: Move towards the specified destination. Always returns True.', 'scan_environment': 'Action: Scan the environment for available resources. Always returns True.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Collect resources, move to specified destination, and drop resources at the destination when all resources have been collected'. Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Conditional>is_agent_in_nest</Conditional><Sequence><Conditional>find_resource</Conditional><Sequence><Conditional>collect_resource</Conditional><Action>task_completed</Action></Sequence><Conditional>is_resource_collected</Conditional><Sequence><Conditional>is_resource_dropped</Conditional><Action>move_to_destination</Action></Sequence></Sequence></Sequence><Sequence><Conditional>is_agent_in_nest</Conditional><Action>scan_environment</Action></Sequence></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'collect_resource': 'Action: Collect available resources. Returns True if resources are collected, False otherwise.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_resource_collected': 'Condition: Check if resources have been collected. Returns True if resources have been collected, False otherwise.', 'move_to_destination': 'Action: Move towards the specified destination. Always returns True.', 'move_to_North': "Action: Move towards North direction. Always returns True.", 'move_to_East': 'Action: Move towards East direction. Always returns True.', 'move_to_South': 'Action: Move towards South direction. Always returns True.', 'move_to_West': 'Action: Move towards West direction. Always returns True.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree for an agent to 'Move to a specified destination by moving North, then East, then South, and finally West'. Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree><Sequence><Conditional>is_agent_in_nest</Conditional><Action>move_to_destination</Action><Selector><Sequence><Conditional>move_to_North</Conditional><Sequence><Conditional>move_to_East</Conditional><Sequence><Conditional>move_to_South</Conditional><Action>move_to_West</Action></Sequence></Sequence></Sequence></Selector><Action>task_completed</Action></Sequence></BehaviorTree> 
###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_red': "Action: Change agent's color to red. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_nearby_robot_green': 'Condition: Check if a nearby robot has a green color. Returns True if a nearby robot has a green color, False otherwise.', 'is_nearby_robot_red': 'Condition: Check if a nearby robot has a red color. Returns True if a nearby robot has a red color, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.', 'move_forward': 'Action: Move the robot one step forward in the current direction. Always returns True.', 'turn_left': 'Action: Turn the robot 90 degrees to the left. Always returns True.', 'turn_right': 'Action: Turn the robot 90 degrees to the right. Always returns True.', 'update_map': "Action: Update the robot's internal map of the environment based on its current location and sensor readings. Always returns True.", 'is_path_blocked': 'Condition: Check if the path in the current direction is blocked or impassable. True if the path is blocked, False otherwise.', 'is_area_mapped': 'Condition: Check if the current area has already been mapped and explored. Returns: True if the area is mapped, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Form a line with a nearby green robot and freeze movement'. Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Action>move_forward</Action> <Condition>is_nearby_robot_green</Condition> <Action>form_line</Action> <Action>agent_movement_freeze</Action> </Sequence> <Action>wander</Action> </Selector> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'move_forward': 'Action: Move the robot one step forward in the current direction if path is clear. Returns True if successful, False otherwise.', 'turn_left': 'Action: Turn the robot 30 degrees to the left. Always returns True.', 'turn_right': 'Action: Turn the robot 30 degrees to the right. Always returns True.', 'update_map': "Action: Update the robot's internal map of the environment based on its current location and sensor readings. Always returns True.", 'initialize_map': "Action: Create a new internal map for the robot with the current location as the starting point. Always returns True."}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Explore and map surrounding area from current location'. Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>is_agent_in_nest</Condition> <Action>initialize_map</Action> <Action>move_forward</Action> <Action>update_map</Action> </Sequence> <Sequence> <Condition>is_target_detected</Condition> <Action>update_map</Action> </Sequence> <Sequence> <Condition>is_obstacle_detected</Condition> <Action>avoid_obstacle</Action> <Action>update_map</Action> </Sequence> <Sequence> <Condition>is_path_clear</Condition> <Action>move_forward</Action> <Action>update_map</Action> </Sequence> <Selector> <Action>turn_left</Action> <Action>turn_right</Action> </Selector> <Action>wander</Action> </Selector> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_red': "Action: Change agent's color to red. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_nearby_robot_green': 'Condition: Check if a nearby robot has a green color. Returns True if a nearby robot has a green color, False otherwise.', 'is_nearby_robot_red': 'Condition: Check if a nearby robot has a red color. Returns True if a nearby robot has a red color, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected 
###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Find the target, form a line, and change color to green, then return home and change color to white.'Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>form_line</Action><Sequence><Condition>is_line_formed</Condition><Action>change_color_to_white</Action></Sequence></Sequence><Sequence><Selector><Sequence><Condition>is_target_detected</Condition><Action>change_color_to_green</Action><Action>task_completed</Action></Sequence><Sequence><Condition>is_agent_in_nest</Condition><Action>change_color_to_white</Action></Sequence></Selector></Sequence></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Find the target and avoid obstacles, then change color to green and continue moving until the target is reached or collides with an obstacle.'Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Sequence><Condition>is_target_detected</Condition><Action>avoid_obstacle</Action><Action>change_color_to_green</Action><ACTION>continue_movement_agent</Action></Sequence><Sequence><Condition>is_target_reached</Condition><Action>task_completed</Action></Sequence></Selector><Sequence><Condition>is_obstacle_detected</Condition><Action>avoid_obstacle</Action></Sequence></Sequence></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Find the target and avoid obstacles, then form a line, and change color to white when the target is reached.'Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Selector><Sequence><Condition>is_target_detected</Condition><Action>avoid_obstacle</Action><Selector><Sequence><Action>form_line</Action><Action>change_color_to_white</Action></Sequence><Condition>is_target_reached</Condition></Selector></Sequence><Sequence><Condition>is_obstacle_detected</Condition><Action>avoid_obstacle</Action></Sequence></Selector><Sequence></BehaviorTree> 
###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_line': 'Condition: Check if agent is in a vertical line with the center. Returns True if the agent is in the line, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'move_backward': 'Action: Move the robot one step backward in the current direction. Always returns True.', 'move_forward': 'Action: Move the robot one step forward in the current direction. Always returns True.', 'turn_left': 'Action: Turn the robot 90 degrees to the left. Always returns True.', 'turn_right': 'Action: Turn the robot 90 degrees to the right. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Avoid obstacles and stay in a vertical line with the center, moving backward and turning right when needed.'Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>is_obstacle_detected</Condition><Action>avoid_obstacle</Action></Sequence><Sequence><Condition>is_agent_in_line</Condition><Action>form_line</Action><Action>move_backward</Action></Sequence></Selector><Sequence><Condition>is_line_formed</Condition><Action>move_forward</Action><Selector><Condition>is_obstacle_detected</Condition><Action>turn_right</Action></Selector></Sequence></Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_red': "Action: Change agent's color to red. Always returns True.", 'form_circle': 'Action: Form a circle with a radius of 5 units around the target. Always returns True.', 'is_agent_in_circle': 'Condition: Check if agent is inside the circle. Returns True if the agent is in the circle, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'move_towards_target': 'Action: Move the robot towards the target. Always returns True.', 'turn_left': 'Action: Turn the robot 90 degrees to the left. Always returns True.', 'turn_right': 'Action: Turn the robot 90 degrees to the right. Always returns True.', 'update_map': "Action: Update the robot's internal map of the environment based on its current location and sensor readings. Always returns True."}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Circle the target while avoiding obstacles and mapping the environment.'Output only the XML behavior tree without extra text.
5.// OUTPUT:
 <BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>is_target_detected</Condition> <Action>move_towards_target</Action> <Action>update_map</Action> </Sequence> <Action>form_circle</Action> <Sequence> <Condition>is_agent_in_circle</Condition> <Action>change_color_to_red</Action> <Action>update_map</Action> </Sequence> </Selector> <Selector> <Sequence> <Condition>is_obstacle_detected</Condition> <Action>turn_left</Action> <Action>update_map</Action> </Sequence> <Sequence> <Condition>is_obstacle_detected</Condition> <Action>turn_right</Action> <Action>update_map</Action> </Sequence> </Selector> </Sequence> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_red': "Action: Change agent's color to red. Always returns True.", 'form_triangle': 'Action: Form an equilateral triangle around the target with a side length of 5 units. Always returns True.', 'is_agent_in_triangle': 'Condition: Check if agent is inside the triangle. Returns True if the agent is in the triangle, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'move_towards_target': 'Action: Move the robot towards the target. Always returns True.', 'turn_left': 'Action: Turn the robot 90 degrees to the left. Always returns True.', 'turn_right': 'Action: Turn the robot 90 degrees to the right. Always returns True.', 'update_map': "Action: Update the robot's internal map of the environment based on its current location and sensor readings. Always returns True."}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Form a triangle around the target while avoiding obstacles and mapping the environment.'Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>is_target_detected</Condition> <Action>move_towards_target</Action> <Action>update_map</Action> </Sequence> <Action>form_triangle</Action> <Sequence> <Condition>is_agent_in_triangle</Condition> <Action>change_color_to_red</Action> <Action>update_map</Action> </Sequence> </Selector> <Selector> <Sequence> <Condition>is_obstacle_detected</Condition> <Action>turn_left</Action> <Action>update_map</Action> </Sequence> <Sequence> <Condition>is_obstacle_detected</Condition> <Action>turn_right</Action> <Action>update_map</Action> </Sequence> </Selector> </Sequence> </BehaviorTree> 
###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'do_nothing': 'Action: Do nothing. Always returns True.', 'go_to_target': "Action: Move towards the target. Always returns True.", 'grapple_target': "Action: Grapple and hold onto the target. Returns True if grapple is successful, False otherwise.", 'is_agent_at_target': 'Condition: Check if the agent has reached the target. Returns True if the agent is at the target, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_target_grappled': 'Condition: Check if the target is grappled. Returns True if the target is held onto by the agent, False otherwise.', 'is_target_in_sight': 'Condition: Check if the target is within the agent\'s field of view. Returns True if the target is within sight, False otherwise.', 'release_target': "Action: Release the grappled target. Returns True if the target is successfully released, False otherwise.", 'travel_to_nest': 'Action: Move towards the nest. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Search for target, grapple it, and return to nest.'Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>is_target_in_sight</Condition> <Action>grapple_target</Action> </Sequence> <Action>travel_to_nest</Action> </Selector> </Sequence> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'do_nothing': 'Action: Do nothing. Always returns True.', 'go_to_target': "Action: Move towards the target. Always returns True.", 'grapple_target': "Action: Grapple and hold onto the target. Returns True if grapple is successful, False otherwise.", 'is_agent_at_target': 'Condition: Check if the agent has reached the target. Returns True if the agent is at the target, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_target_grappled': 'Condition: Check if the target is grappled. Returns True if the target is held onto by the agent, False otherwise.', 'is_target_in_sight': 'Condition: Check if the target is within the agent\'s field of view. Returns True if the target is within sight, False otherwise.', 'release_target': "Action: Release the grappled target. Returns True if the target is successfully released, False otherwise.", 'travel_to_nest': 'Action: Move towards the nest. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Scan environment, avoid obstacles, and return to the nest if target not found.'Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>is_target_in_sight</Condition> <Action>do_nothing</Action> </Sequence> <Action>scan_environment</Action> </Selector> <Sequence> <Condition>is_obstacle_detected</Condition> <Action>avoid_obstacle</Action> </Sequence> <Action>travel_to_nest</Action> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Gather resources, form a line, and return to the nest if line formed.'Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>is_target_detected</Condition> <Action>change_color_to_green</Action> <Action>task_completed</Action> </Sequence> <Sequence> <Condition>is_line_formed</Condition> <Sequence> <Action>form_line</Action> <Action>agent_movement_freeze</Action> <Action>task_completed</Action> </Sequence> </Sequence> <Action>gather_resources</Action> </Selector> <Sequence> <Condition>is_agent_in_nest</Condition> <Action>change_color_to_white</Action> </Sequence> </BehaviorTree> 
###
4.// INSTRUCTIONS: Use only the following behaviors {'move_up': 'Action: Move upwards one step.', 'move_down': 'Action: Move downwards one step.', 'detect_stopping_point': 'Condition: Check if the robot has reached the designated stopping point along the path.', 'detect_error': 'Condition: Check if there was an error in the previous action.', 'detect_obstacle': 'Condition: Check for obstacles in the immediate environment.', 'identify_target': 'Action: Search and identify the designated target.', 'pick_up_object': 'Action: Use gripper to pick up and carry object with robot.', 'drop_off_object': 'Action: Use gripper to release and drop off object at designated location.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Generate a behavior tree for a robot to autonomously navigate a maze, pick up an object, and drop it off at a specific location.
4.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>detect_obstacle</Condition> <Sequence> <Action>move_up</Action> <Condition>detect_error</Condition> </Sequence> <Sequence> <Condition>detect_stopping_point</Condition> <Action>pick_up_object</Action> </Sequence> </Selector> <Action>identify_target</Action> <Sequence> <Condition>detect_stopping_point</Condition> <Action>drop_off_object</Action> </Sequence> </Sequence> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'forward': 'Action: Move one step forward in the desired direction.', 'turn_left': 'Action: Turn left while maintaining formation.', 'turn_right': 'Action: Turn right while maintaining formation.', 'go_to_object': 'Action: Navigate and move towards the designated object.', 'pick_up_object': 'Action: Use gripper to pick up object from designated location.', 'drop_off_object': 'Action: Use gripper to release and drop off object at designated location.', 'is_obstacle_ahead': 'Condition: Check if there is an obstacle in the path ahead.', 'is_object_detected': 'Condition: Check if the designated object has been detected in the environment.', 'is_object_picked_up': 'Condition: Check if the object has been successfully picked up by the gripper.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Generate a behavior tree for a swarm of robots to collaboratively navigate to and pick up objects while avoiding obstacles.
5.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Action>go_to_object</Action> <Condition>is_obstacle_ahead</Condition> </Sequence> <Sequence> <Condition>is_object_detected</Condition> <Sequence> <Condition>is_object_picked_up</Condition> <Action>drop_off_object</Action> </Sequence> <Action>pick_up_object</Action> </Sequence> </Selector> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'follow_path': 'Action: Follow the designated path.', 'detect_boundary': 'Condition: Check if the robot has reached the boundary of the environment.', 'navigate_to_point': 'Action: Move towards the designated point.', 'avoid_obstacle': 'Action: Adjust route to avoid obstacles in the path.', 'detect_target': 'Condition: Check if the designated target has been detected in the environment.', 'collect_target': 'Action: Use suction mechanism to collect the designated target.', 'release_target': 'Action: Release and drop off the collected target at a specified location.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Generate a behavior tree for a solo robot to autonomously navigate, collect and deliver a specified target to a designated location within a defined boundary.
6.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>detect_target</Condition> <Action>collect_target</Action> <Action>release_target</Action> <Condition>detect_boundary</Condition> </Sequence> <Action>follow_path</Action> <Sequence> <Condition>detect_boundary</Condition> <Action>navigate_to_point</Action> <Action>avoid_obstacle</Action> </Sequence> </Selector> </BehaviorTree>
###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_speed_to_5': "Action: Change agent's speed to 5 units per second. Always returns True.", 'change_speed_to_10': "Action: Change agent's speed to 10 units per second. Always returns True.", 'change_speed_to_15': "Action: Change agent's speed to 15 units per second. Always returns True.", 'change_color_to_blue': "Action: Change agent's color to blue. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_circle': 'Action: Form a circle with a radius of 5 units. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_circle_formed': 'Condition: Check if a circle is formed. Returns True if the circle is formed with the specified radius, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Move at a speed of 10 units per second, form a circle with a radius of 5 units, and change color to blue'. Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree> <Sequence> <Action>change_speed_to_10</Action> <Selector> <Sequence> <Action>form_circle</Action> <Action>change_color_to_blue</Action> </Sequence> <Action>wander</Action> </Selector> </Sequence> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'change_direction_to_left': "Action: Change agent's direction to left at 45 degrees. Always returns True.", 'change_direction_to_right': "Action: Change agent's direction to right at 45 degrees. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_triangle': 'Action: Form an equilateral triangle with a side length of 5 units. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_triangle_formed': 'Condition: Check if an equilateral triangle is formed. Returns True if the triangle is formed with the specified side length, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Form an equilateral triangle with a side length of 5 units, then change direction to left, continue movement and change color to white'. Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Action>form_triangle</Action> <Action>change_direction_to_left</Action> <Action>continue_movement_agent</Action> <Action>change_color_to_white</Action> </Sequence> <Action>wander</Action> </Selector> </Sequence> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'follow_target': 'Action: Follow the target at a distance of 10 units. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_following_target': 'Condition: Check if agent is following the target. Returns True if the agent is following the target at the specified distance, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Follow the target, avoid obstacles and change color to green when target
###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_blue': "Action: Change agent's color to blue. Always returns True.", 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'detect_target': 'Condition: Check if the target is detected. Returns True if the target is detected, False otherwise.', 'follow_target': 'Action: Follow the target. Returns True if the target is within range, False otherwise.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_target_reached': 'Condition: Check if the target is reached. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Follow and change color to blue when near target, then return to nest' Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree><Sequence><Condition>detect_target</Condition><Sequence><Action>change_color_to_blue</Action><Action>follow_target</Action></Sequence></Sequence><Condition>is_agent_in_nest</Condition><Action>change_color_to_green</Action><Action>task_completed</Action></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'avoid_obstacle_destructive': 'Action: Avoid detected obstacles and destroy them. Returns True if the obstacle is successfully destroyed, False otherwise.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'delegate_task': 'Action: Delegate the current task to another robot. Returns True if the task is successfully delegated, False otherwise.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_task_completed': 'Condition: Check if the delegated task is completed. Returns True if the task is completed, False otherwise.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Clear path for target and delegate task to other robots if obstacle is too large' Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_obstacle_detected</Condition><Sequence><Action>avoid_obstacle_destructive</Action><Condition>is_path_clear</Condition></Sequence></Sequence><Sequence><Condition>is_task_completed</Condition><Sequence><Action>delegate_task</Action><Action>task_completed</Action></Sequence></Sequence><Action>wander</Action></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_red': "Action: Change agent's color to red. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'disperse': 'Action: Disperse from the current position. Returns True if the agent successfully disperses, False otherwise.', 'form_circle': 'Action: Form a circle with other agents. Always returns True.', 'is_agent_in_circle': 'Condition: Check if the agent is in a circle. Returns True if the agent is in a circle formation, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_red_agent_detected': 'Condition: Check if a red agent is detected. Returns True if a red agent is within range, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Disperse from a red agent and form a circle if the path ahead is clear' Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_red_agent_detected</Condition><Sequence><Action>disperse</Action><Condition>is_path_clear</Condition></Sequence></Sequence><Sequence><Condition>is_agent_in_circle</Condition><Action>form_circle</Action><Action>task_completed</Action></Sequence></BehaviorTree>
###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 10 units. Returns True if the target is within 10 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Move to nest area and change color to green'Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree> <Sequence> <Condition>is_agent_in_nest</Condition> <Action>change_color_to_green</Action> <Action>continue_movement_agent</Action> </Sequence> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'change_color_to_blue': "Action: Change agent's color to blue. Returns True.", 'change_direction_left': 'Action: Turn the agent 30 degrees to the left. Always returns True.', 'change_direction_right': 'Action: Turn the agent 30 degrees to the right. Always returns True.', 'is_target_reached': 'Condition: Check if target is within 5 units. Returns True if the target is within 5 units of distance, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Move in a zig zag path and change color to blue'. Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree> <Sequence> <Choice> <Sequence> <Action>change_direction_left</Action> <Action>agent_movement_freeze</Action> </Sequence> <Sequence> <Action>change_direction_right</Action> <Action>agent_movement_freeze</Action> </Sequence> </Choice> <Action>continue_movement_agent</Action> <Action>change_color_to_blue</Action> </Sequence> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_square': 'Action: Form a square shape with other robots. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 10 units. Returns True if the target is within 10 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Form a square shape with other robots and move to target location'. Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree> <Sequence> <Action>form_square</Action> <Selector> <Sequence> <Condition>is_target_reached</Condition> <Action>agent_movement_freeze</Action> </Sequence> <Action>continue_movement_agent</Action> </Selector> </Sequence> </BehaviorTree>
###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.', 'detect_pheromones': 'Condition: Check for pheromones in the environment. Returns True if pheromones are detected, False otherwise.', 'follow_pheromones': 'Action: Move towards the location of detected pheromones. Returns True after successful movement.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Search for food by following pheromones.'Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>detect_pheromones</Condition> <Action>follow_pheromones</Action> </Sequence> <Action>wander</Action> </Selector> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.', 'sense_environment': 'Action: Use sensors to gather information about the environment. Returns True after successful sensing.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Explore the environment by sensing and avoiding obstacles.'Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree> <Sequence> <Action>sense_environment</Action> <Selector> <Sequence> <Condition>is_obstacle_detected</Condition> <Action>avoid_obstacle</Action> <Action>continue_movement_agent</Action> </Sequence> <Action>wander</Action> </Selector> </Sequence> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.', 'send_signal': 'Action: Send a signal to other robots in the swarm. Returns True after successful signaling.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Coordinate with other robots in the swarm by sending signals and avoiding obstacles.'Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>is_obstacle_detected</Condition> <Action>avoid_obstacle</Action> <Action>continue_movement
###
4.// INSTRUCTIONS: Use only the following behaviors {'explore': 'Action: Randomly explore the environment.', 'follow_path': 'Action: Follow a predefined path to reach the target.', 'wait_for_start_signal': 'Condition: Wait for the start signal to begin the task. Returns True once the signal is received, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles blocking the path. Returns True if an obstacle is detected, False otherwise.', 'is_target_reached': 'Condition: Check if the target has been reached. Returns True if the target has been reached, False otherwise.', 'start_sweep': 'Action: Start the sweep task to scan the environment for the target.', 'stop_sweep': 'Action: Stop the current sweep task.', 'signal_target_found': 'Action: Send a signal to other robots when the target is found.', 'signal_target_lost': 'Action: Send a signal to other robots when the target is lost.', 'move_to_center': 'Action: Move to the center of the environment.', 'rotate': 'Action: Rotate 90 degrees in a random direction.', 'turn_around': 'Action: Turn 180 degrees and continue moving in the opposite direction.', 'follow_closest_robot': 'Action: Follow the closest robot in the swarm.', 'is_closest_robot_found': 'Condition: Check if a closer robot in the swarm is in sight. Returns True if a closer robot is found, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree for a swarm of robots to explore the environment and find a target while avoiding obstacles.Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>is_target_reached</Condition> <Action>stop_sweep</Action> </Sequence> <Sequence> <Condition>is_obstacle_detected</Condition> <Action>rotate</Action> <Action>explore</Action> </Sequence> <Sequence> <Condition>is_target_found</Condition> <Action>rotate</Action> <Action>follow_closest_robot</Action> </Sequence> <Sequence> <Condition>is_closest_robot_found</Condition> <Selector> <Sequence> <Condition>is_target_lost</Condition> <Action>explore</Action> <Action>signal_target_lost</Action> </Sequence> <Action>signal_target_found</Action> <Action>wait_for_start_signal</Action> <Action>start_sweep</Action> </Selector> </Sequence> </Selector> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'follow_path': 'Action: Follow a predefined path to reach a target.', 'is_obstacle_detected': 'Condition: Check for obstacles in the environment. Returns True if an obstacle is detected, False otherwise.', 'is_target_reached': 'Condition: Check if the target has been reached. Returns True if the target has been reached, False otherwise.', 'detect_target': 'Condition: Detect the target in the environment. Returns True if the target is detected, False otherwise.', 'path_blocked': 'Condition: Check if the path ahead is blocked by an obstacle. Returns True if the path is blocked, False otherwise.', 'return_to_start': 'Action: Return to the starting point.', 'move_to_target': 'Action: Move towards the target.', 'move_to_obstacle': 'Action: Move towards the nearest obstacle in the environment.', 'circle_target': 'Action: Circle around the target.', 'turn_around': 'Action: Turn 180 degrees and continue moving in the opposite direction.', 'reset_sensors': 'Action: Reset all sensors and data collected during the task.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree for a swarm of robots to navigate through a maze-like environment and reach the target.Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>path_blocked</Condition> <Action>turn_around</Action> <Action>move_to_obstacle</Action> </Sequence> <Sequence> <Condition>is_target_reached</Condition> <Action>circle_target</Action> <Action>return_to_start</Action> <Action>reset_sensors</Action> </Sequence> <Sequence> <Condition>is_obstacle_detected</Condition> <Action>turn_around</Action> <Action>follow_path</Action> </Sequence> <Sequence> <Condition>detect_target</Condition> <Action>move_to_target</Action> </Sequence> </Selector> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'follow_path': 'Action: Follow a predefined path to reach the target.', 'continue_movement': 'Action: Continue moving in the current direction.', 'detect_target': 'Condition: Detect the target in the environment. Returns True if the target is detected, False otherwise.', 'path_blocked': 'Condition: Check if the path ahead is blocked by an obstacle. Returns True if the path is blocked, False otherwise.', 'pick_up_object': 'Action: Pick up the object found in the environment.', 'drop_object': 'Action: Drop the object currently being carried.', 'is_object_loaded': 'Condition: Check if the robot is currently carrying an object. Returns True if an object is being carried, False otherwise.', 'enter_room': 'Action: Move into the next room in the environment.', 'leave_room': 'Action: Leave the current room and enter the hallway.', 'is_in_room': 'Condition: Check if the robot is currently inside a room. Returns True when inside a room, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree for a single robot to navigate through a building and pick up and deliver objects in different rooms.Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>detect_target</Condition> <Action>pick_up_object</Action> </Sequence> <Sequence> <Condition>path_blocked</Condition> <Action>continue_movement</Action> </Sequence> <Selector> <Sequence> <Condition>is_in_room</Condition> <Action>leave_room</Action> <Action>follow_path</Action> </Sequence> <Sequence> <Condition>is_object_loaded</Condition> <Action>enter_room</Action> <Action>drop_object</Action> </Sequence> </Selector> </Selector> </BehaviorTree> 
###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'start_collecting_objects': 'Action: Begin collecting nearby objects.', 'pick_up_object': 'Action: Pick up and hold the object currently being collected.', 'drop_object': 'Action: Drop and release the object currently being held.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_object_detected': 'Condition: Check if there is an object within reach. Returns True if an object is detected and reachable, False otherwise.', 'has_object': 'Condition: Check if the agent is currently holding an object. Returns True if the agent is holding an object, False otherwise.', 'is_all_objects_collected': 'Condition: Check if all nearby objects have been collected. Returns True if all objects have been collected, False otherwise.', 'is_target_reached': 'Condition: Check if the target destination has been reached. Returns True if the target is reached, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Generate a behavior tree for a robot to navigate an obstacle course while collecting objects and delivering them to a target destination.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_obstacle_detected</Condition><Action>avoid_obstacle</Action></Sequence><Sequence><Condition>is_object_detected</Condition><Action>pick_up_object</Action></Sequence><Action>continue_movement_agent</Action></Selector></BehaviorTree>
###
4.// INSTRUCTIONS: Use only the following behaviors {'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'move_to_target': 'Action: Move towards the target. Always returns True.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Move to the target and change color to green once reached'Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>is_target_detected</Condition> <Action>change_color_to_green</Action> <Sequence> <Condition>is_target_reached</Condition> <Action>task_completed</Action> </Sequence> </Sequence> <Action>move_to_target</Action> </Selector> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_red': "Action: Change agent's color to red. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Move to the target, change color to green once reached, then change color to red and form a line to signal to other robots'Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>is_target_detected</Condition> <Action>change_color_to_green</Action> <Sequence> <Condition>is_target_reached</Condition> <Action>form_line</Action> <Action>change_color_to_red</Action> </Sequence> </Sequence> <Action>continue_movement_agent</Action> </Selector> <Selector> <Condition>is_line_formed</Condition> <Action>change_color_to_red</Action> <Action>task_completed</Action> </Selector> </Sequence> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'task_failed': 'Action: Signal task failure by performing a random action. Always returns False.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Move to the target, avoid obstacles and change color to green once reached. If unable to reach, perform a random action'Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>is_target_detected</Condition> <Action>avoid_obstacle</Action> <Sequence> <Condition>is_target_reached</Condition> <Sequence> <Action>change_color
###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Move forward, avoid any obstacles, and turn right.'Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>is_path_clear</Condition> <Action>move_forward</Action> </Sequence> <Sequence> <Condition>is_obstacle_detected</Condition> <Action>avoid_obstacle</Action> <Action>turn_right</Action> </Sequence> </Selector> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Move towards the target if it is within 20 units, otherwise change color to green.'Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>is_target_detected</Condition> <Action>move_forward</Action> </Sequence> <Sequence> <Action>change_color_to_green</Action> </Sequence> </Selector> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.', 'find_path': "Action: Use a pathfinding algorithm to find the shortest path to the target. Returns True if path is found, False otherwise."}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Use pathfinding algorithm to find path to target and move towards it until within 15 units or task is completed.' Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Action>find_path</Action> <Condition>is_target_reached</Condition> </Sequence> <Sequence> <Action>move_forward</Action> <Condition>task_completed</Condition> </Sequence> </Selector> </BehaviorTree>   
###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_triange': 'Action: Form an equilateral triangle with two other agents. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'is_formed_shape_correct': 'Condition: Check if the formed shape is an equilateral triangle. Returns True if the shape formed is equilateral, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Form an equilateral triangle with two other agents and move towards target' Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>is_agent_in_nest</Condition> <Sequence> <Condition>is_formed_shape_correct</Condition> <Action>continue_movement_agent</Action> </Sequence> </Sequence> <Sequence> <Condition>is_target_reached</Condition> <Sequence> <Action>form_triange</Action> <Action>change_color_to_green</Action> <Action>continue_movement_agent</Action> </Sequence> </Sequence> <Action>wander</Action> </Selector> </BehaviorTree>
  
###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_star': 'Action: Form a star shape with 5 agents and move towards target. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Form a star shape with 5 agents and move towards target' Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>is_agent_in_nest</Condition> <Sequence> <Condition>is_target_detected</Condition> <Action>form_star</Action> <Action>change_color_to_green</Action> <Action>continue_movement_agent</Action> </Sequence> </Sequence> <Sequence> <Condition>is_obstacle_detected</Condition> <Sequence> <Action>avoid_obstacle</Action> <Action>change_color_to_white</Action> <Action>continue_movement_agent</Action> </Sequence> </Sequence> <Action>wander</Action> </Selector> </BehaviorTree>
  
###
6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_square': 'Action: Form a square with 4 agents and move towards target. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Move towards target and form a square with 4 agents, if an obstacle is detected, avoid it and change color to white' Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree> <Sequence> <Condition>is_target_detected</Condition> <Sequence> <Action>form_square</Action> <Action>change_color_to_green</Action> <###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Avoid obstacles and return home'Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>is_obstacle_detected</Condition><Action>avoid_obstacle</Action><Action>continue_movement_agent</Action></Sequence><Action>wander</Action></Selector><Sequence><Condition>is_agent_in_nest</Condition><Action>change_color_to_green</Action><Action>change_color_to_white</Action></Sequence></Sequence></BehaviorTree>
###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Follow predefined path and check for obstacles along the way'Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree><Sequence><Action>form_line</Action></Sequence><Selector><Sequence><Condition>is_obstacle_detected</Condition><Sequence><Condition>is_path_clear</Condition><Action>move_forward</Action></Sequence><Action>turn_left</Action></Sequence></Selector></BehaviorTree>
###
6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Gather resources while avoiding obstacles and return to home base'Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_target_detected</Condition><Action>continue_movement_agent</Action></Sequence><Sequence><Condition>is_agent_in_nest</Condition><Action>change_color_to_white</Action><Action>continue_movement_agent</Action></Sequence><Sequence><Condition>is_obstacle_detected</Condition><Sequence><Condition>is_path_clear</Condition><Action>move_forward</Action></Sequence><Action>turn_left</Action></Sequence></Selector><Sequence><Action>wander</Action></Sequence></BehaviorTree>
###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'form_circle': 'Action: Form a circle at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_circle_formed': 'Condition: Check if a circle is formed. Returns True if the circle is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Form a circle at the center and change color to white.'Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>is_circle_formed</Condition> <Action>change_color_to_white</Action> <Action>agent_movement_freeze</Action> <Action>task_completed</Action> </Sequence> <Action>form_circle</Action> </Selector> </Sequence> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_move_to_target': 'Action: Move towards the target. Always returns True.', 'agent_stop_movement': 'Action: Stop agent's movement. Always returns True.', 'change_color_to_blue': "Action: Change agent's color to blue. Always returns True.", 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by stopping movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Move towards the target and change color to blue if target is reached, then return to nest and stop.'Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>is_target_detected</Condition> <Action>agent_move_to_target</Action> <Action>change_color_to_blue</Action> <Condition>is_agent_in_nest</Condition> <Action>agent_stop_movement</Action> </Sequence> <Action>task_completed</Action> </Selector> </Sequence> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'scatter_away': 'Action: Move away from the target in a random direction. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Move towards the target, form a line, avoid obstacles, and if target is reached, scatter away.'Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>is_target_detected</Condition> <Action>agent_move_to_target</Action> <Action>form_line</Action> <Action>avoid_obstacle</Action> <Condition>is_target_reached</Condition> <Action>scatter_away</Action> <Action>task_completed</Action> </Sequence> <Action>agent_movement_freeze</Action> </Selector> </Sequence> </BehaviorTree> 
###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_circle': 'Action: Form a circle at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_circle_formed': 'Condition: Check if a circle is formed. Returns True if the circle is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'is_stop_sign_visible': 'Condition: Check if a stop sign is visible. Returns True if a stop sign is detected in front of the agent, False otherwise.', 'stop_movement_agent': 'Action: Stop agent's movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Circle around the object until stop sign is visible, then stop movement.'Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree> <Selector> <Sequence><Condition>is_target_reached</Condition> <Action>circle formation</Action> </Sequence> <Sequence> <Condition>is_stop_sign_visible</Condition> <Action>stop_movement_agent</Action> </Sequence> </Selector> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_red': "Action: Change agent's color to red. Always returns True.", 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'move_towards_target': "Action: Move towards the target. Always returns True.", 'wait': 'Action: Wait for 5 seconds. Stops agent's movement. Returns True after 5 seconds.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Move towards the target, but wait for 5 seconds if obstacle is detected.'Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_obstacle_detected</Condition> <Action>avoid_obstacle</Action> <Action>wait</Action> </Sequence> <Sequence> <Condition>is_target_detected</Condition> <Action>change_color_to_red</Action> </Sequence> <Sequence> <Condition>is_path_clear</Condition> <Action>move_towards_target</Action> </Sequence></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'form_square': 'Action: Form a square at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_square_formed': 'Condition: Check if a square is formed. Returns True if the square is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'return_to_nest': 'Action: Return to the nest. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Form a square and change color to green, then return to the nest.'Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree> <Selector> <Sequence><Condition>is_target_reached</Condition> <Action>form_square</Action> <Action>change_color_to_green</Action> </Sequence> <Sequence> <Condition>is_agent_in_nest</Condition> <Action>change_color_to_white</Action> <Action>agent_movement_freeze</Action> </Sequence> </Selector> </BehaviorTree> 
###
4.// INSTRUCTIONS: Use only the following behaviors {'close_grip': 'Action: Close the robot's grip. Returns True if grip is successfully closed, False otherwise.', 'count_items': 'Action: Count the number of items currently held by the robot. Returns the number of items.', 'drop_items': 'Action: Drop all items currently held by the robot. Returns True if items are successfully dropped, False otherwise.', 'move_towards_item': 'Action: Move towards the nearest item within the designated area. Returns True if an item is found and the robot moves towards it, False otherwise.', 'pickup_item': 'Action: Pick up the nearest item within the designated area. Returns True if an item is successfully picked up, False otherwise.', 'is_area_full': 'Condition: Check if the designated area is full. Returns True if the area is full, False otherwise.', 'is_item_in_area': 'Condition: Check if an item is within the designated area. Returns True if an item is present, False otherwise.', 'is_item_picked_up': 'Condition: Check if an item has been picked up. Returns True if an item is currently held by the robot, False otherwise.', 'is_item_dropped': 'Condition: Check if all items have been dropped. Returns True if no items are currently held by the robot, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Collect all items within the area, count and drop them off at designated location.'. Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_item_in_area</Condition><Action>pickup_item</Action></Sequence><Sequence><Condition>is_item_picked_up</Condition><Action>move_towards_item</Action><Sequence><Condition>is_area_full</Condition><Action>drop_items</Action><Action>count_items</Action></Sequence></Sequence></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'move_along_line': 'Action: Move along a predefined line. Returns True if the line is successfully followed, False otherwise.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Returns True if task is completed, False otherwise.', 'wander': 'Action: Move randomly within the environment. Always returns True.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_line_followed': 'Condition: Check if the predefined line is successfully followed. Returns True if the line is followed, False otherwise.', 'form_grid': 'Action: Form a grid with the other robots in the swarm. Returns True if the grid is successfully formed, False otherwise.', 'is_grid_formed': 'Condition: Check if the grid is successfully formed. Returns True if the grid is formed, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Form a grid with other robots in the swarm, then move towards target and change color to green'. Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_grid_formed</Condition><Action>move_along_line</Action><Action>wander</Action></Sequence><Sequence><Condition>is_target_detected</Condition><Action>change_color_to_green</Action></Sequence></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'move_randomly': 'Action: Move randomly within the environment. Returns True if successfully performed, False otherwise.', 'follow_object': 'Action: Follow a specific object within the designated area. Returns True if object is successfully followed, False otherwise.', 'grab_object': 'Action: Grab the nearest object. Returns True if an object is successfully grabbed, False otherwise.', 'drop_off': 'Action: Drop off all currently held objects at the designated drop-off location. Returns True if objects are successfully dropped off, False otherwise.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_object_in_area': 'Condition: Check if any object is within the designated area. Returns True if an object is present, False otherwise.', 'is_object_followed': 'Condition: Check if an object is successfully followed. Returns True if object is being followed, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Follow a specific object within the area, grab it and drop it off at designated location'. Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_object_in_area</Condition><Sequence><Condition>is_object_followed</Condition><Sequence><Condition>is_target_detected</Condition><Action>grab_object</Action></Sequence></Sequence></Sequence><Sequence><Condition>is_object_followed</Condition><Sequence><Condition>is_target_detected</Condition><Action>drop_off</Action></Sequence></Sequence></BehaviorTree>
###
4.// INSTRUCTIONS: Use only the following behaviors {'move_forward': 'Action: Move one step forward while avoiding obstacles.', 'move_backward': 'Action: Move one step backward while avoiding obstacles.', 'rotate_left': 'Action: Rotate 90 degrees to the left while avoiding obstacles.', 'rotate_right': 'Action: Rotate 90 degrees to the right while avoiding obstacles.', 'detect_obstacle': 'Condition: Check for nearby obstacles. Returns True if an obstacle is detected, False otherwise.', 'detect_square_object': 'Condition: Check for a square object within 10 units. Returns True if a square object is detected within 10 units, False otherwise.', 'detect_circle_object': 'Condition: Check for a circular object within 10 units. Returns True if a circular object is detected within 10 units, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Generate a behavior tree for the robot to locate and interact with either a square or circular object, while avoiding obstacles.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>detect_square_object</Condition><Selector><Sequence><Condition>detect_obstacle</Condition><Action>rotate_left</Action></Sequence><Action>move_forward</Action></Selector></Sequence><Sequence><Condition>detect_circle_object</Condition><Selector><Sequence><Condition>detect_obstacle</Condition><Action>rotate_right</Action></Sequence><Action>move_backward</Action></Selector></Sequence></Selector><Selector><Sequence><Condition>detect_obstacle</Condition><Action>move_backward</Action></Sequence><Action>move_forward</Action></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'move_toward_North': 'Action: Move one step toward the North direction while avoiding obstacles.', 'move_toward_East': 'Action: Move one step toward the East direction while avoiding obstacles.', 'move_toward_South': 'Action: Move one step toward the South direction while avoiding obstacles.', 'move_toward_West': 'Action: Move one step toward the West direction while avoiding obstacles.', 'move_to_center': 'Action: Move to the center of the environment while avoiding obstacles.', 'is_obstacle_present': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_center_reached': 'Condition: Check if the robot is in the center of the environment. Returns True if the robot is in the center, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Generate a behavior tree for the robot to navigate to the center of the environment while avoiding obstacles.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_center_reached</Condition><Action>task_completed</Action></Sequence><Sequence><Condition>is_obstacle_present</Condition><Selector><Sequence><Condition>move_toward_North</Condition><Sequence><Condition>is_obstacle_present</Condition><Action>move_toward_East</Action></Sequence><Sequence><Condition>is_obstacle_present</Condition><Action>move_toward_West</Action></Sequence></Sequence><Selector><Sequence><Condition>move_toward_East</Condition><Sequence><Condition>is_obstacle_present</Condition><Action>move_toward_South</Action></Sequence><Sequence><Condition>is_obstacle_present</Condition><Action>move_toward_West</Action></Sequence></Selector></Selector><Action>move_toward_North</Action></Sequence></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'detect_collision': 'Condition: Check if a collision has occurred with another robot. Returns True if a collision has occurred, False otherwise.', 'detect_enemy': 'Condition: Check for enemies within 15 units. Returns True if an enemy is detected, False otherwise.', 'backtrack': 'Action: Move back to last position and retry previous action.', 'attack': 'Action: Attack enemies detected within range.', 'recruit_allies': 'Action: Send out signal for other robots to join the alliance.', 'retreat': 'Action: Retreat from enemy attacks.', 'search_surroundings': 'Action: Search for enemies and obstacles in the surroundings.', 'move_to_target': 'Action: Move towards the target location.', 'is_target_reached': 'Condition: Check if the target location has been reached. Returns True if the target has been reached, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Generate a behavior tree for a swarm of robots to form an alliance, move to a target location, attack enemies, and retreat if necessary.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_target_reached</Condition><Action>attack</Action><Action>task_completed</Action></Sequence><Sequence><Condition>detect_collision</Condition><Action>backtrack</Action></Sequence><Sequence><Condition>detect_enemy</Condition><Selector><Sequence><Condition>is_target_reached</Condition><Action>attack</Action><Selector><Sequence><Condition>detect_enemy</Condition><Action>attack</Action></Sequence><Action>recruit_allies</Action></Selector></Sequence></Selector></Sequence><Selector><Sequence><Condition>detect_enemy</Condition><Action>retreat</Action></Sequence><Sequence><Condition>detect_collision</Condition><Action>backtrack</Action></Sequence><Action>search_surroundings</Action></Selector><Action>move_to_target</Action></Selector></BehaviorTree> 
###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'get_closest_obstacle_distance': 'Action: Use sensors to determine and store the distance to the nearest obstacle. Always returns True.', 'move_to_closest_obstacle': 'Action: Move towards the nearest obstacle. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Find the nearest obstacle, move towards it, and avoid it' Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_path_clear</Condition><Action>get_closest_obstacle_distance</Action><Action>move_to_closest_obstacle</Action></Sequence><Action>avoid_obstacle</Action><Action>continue_movement_agent</Action></BehaviorTree>
 
###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'scan_environment': 'Action: Use sensors to scan the environment and update internal map. Always returns True.', 'move_to_random_location': 'Action: Move to a random location within the map. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Explore the environment and scan for resources' Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree><Sequence><Action>scan_environment</Action><Selector><Sequence><Condition>is_target_detected</Condition><Action>move_to_random_location</Action><Action>task_completed</Action></Sequence><Action>wander</Action></Selector></Sequence></BehaviorTree>
 
###
6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'identify_target': 'Condition: Check if target matches a specific description or keywords. Returns True if the target matches, False otherwise.', 'perform_task': 'Action: Perform a specific task related to the identified target. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Identify and interact with a specific target' Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_target_detected</Condition><Condition>identify_target</Condition><Action>perform_task</Action><Action>task_completed</Action></Sequence><Action>wander</Action></Selector></BehaviorTree>
###
4.// INSTRUCTIONS: Use only the following behaviors {'hover': 'Action: Maintain a steady altitude and hover in place.', 'move_forward': 'Action: Move the drone one step forward in the current direction.', 'move_backward': 'Action: Move the drone one step backward from the current position.', 'move_up': 'Action: Move the drone one step up in altitude.', 'move_down': 'Action: Move the drone one step down in altitude.', 'rotate_left': 'Action: Rotate the drone 90 degrees counterclockwise.', 'rotate_right': 'Action: Rotate the drone 90 degrees clockwise.', 'target_detected': 'Condition: Check if the target is within view and within 30 meters. Returns True if target is detected, False otherwise.', 'obstacle_detected': 'Condition: Check if there is an obstacle in front of the drone. Returns: True if an obstacle is detected, False otherwise.', 'obstacle_below': 'Condition: Check if there is an obstacle directly below the drone. Returns: True if an obstacle is detected, False otherwise.', 'move_to_target': 'Action: Move towards the target using GPS coordinates and maintain altitude.', 'record_video': 'Action: Record video footage and save to designated location.', 'take_photo': 'Action: Capture a photo and save to designated location.', 'check_battery_level': 'Condition: Check the current battery level of the drone. Returns: True if battery level is above 50%, False otherwise.', 'return_home': 'Action: Return the drone to its designated home location.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Survey an area and take photos of any targets detected, record video footage, and return home.'
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>check_battery_level</Condition><Selector><Sequence><Condition>target_detected</Condition><Action>move_to_target</Action><Selector><Sequence><Condition>obstacle_detected</Condition><Action>move_backward</Action><Action>rotate_left</Action></Sequence><Selector><Sequence><Condition>obstacle_below</Condition><Action>hover</Action></Sequence><Action>rotate_right</Action></Selector></Selector><Action>take_photo</Action></Sequence><Sequence><Condition>target_detected</Condition><Action>move_to_target</Action><Action>record_video</Action></Sequence></Selector><Condition>check_battery_level</Condition><Action>return_home</Action></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'scan_environment': 'Action: Use sensors to scan the surrounding environment for any obstacles or targets.', 'plan_route': 'Action: Plan an optimal route to reach the target location using collected environmental data.', 'follow_path': 'Action: Follow the pre-planned route to reach the target.', 'avoid_obstacle': 'Action: Change direction to avoid detected obstacles.', 'move_to_target': 'Action: Move towards the target using GPS coordinates.', 'is_target_reached': 'Condition: Check if the target has been reached. Returns: True if target is reached, False otherwise.', 'is_obstacle_detected': 'Condition: Check if an obstacle is detected. Returns: True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if the path ahead is clear. Returns: True if no obstacles are detected ahead, False if obstacles are present.', 'take_reading': 'Action: Take a reading of the environment using sensors and update internal map.', 'generate_map': 'Action: Create a detailed map of the environment using collected data.', 'update_map': 'Action: Update the internal map with new data.', 'return_home': 'Action: Return to the designated home location.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Explore an unknown environment, collect data, and return home, avoiding obstacles along the way.'
5.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Action>scan_environment</Action><Action>plan_route</Action><Action>follow_path</Action><Selector><Sequence><Condition>is_obstacle_detected</Condition><Action>avoid_obstacle</Action><Action>take_reading</Action><Action>update_map</Action></Sequence><Action>move_to_target</Action><Condition>is_path_clear</Condition></Selector></Sequence><Action>return_home</Action><Action>generate_map</Action></Selector></Sequence></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'sense_environment': 'Action: Use sensors to detect the surrounding environment and update the internal map.', 'explore_area': 'Action: Explore the area and map it by moving in a circular pattern.', 'go_to_location': 'Action: Move to a specific GPS location within the mapped area.', 'collect_samples': 'Action: Collect samples of the environment for analysis.', 'analyze_samples': 'Action: Analyze collected samples and update the internal map with new data.', 'return_home': 'Action: Return to the designated home location.', 'is_location_reachable': 'Condition: Check if the specified location is reachable in the mapped area. Returns: True if location is reachable, False otherwise.', 'is_area_explored': 'Condition: Check if the entire designated area has been explored. Returns:True if area is fully explored, False otherwise.', 'is_sample_collected': 'Condition: Check if a sample has been collected. Returns: True if a sample has been collected, False otherwise.', 'is_sample_analyzed': 'Condition: Check if a sample has been analyzed. Returns: True if a sample has been analyzed, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Explore and map a specific designated area, collect samples, analyze them, and return home.'
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_area_explored</Condition><Action>return_home</Action></Sequence><Sequence><Condition>is_sample_collected</Condition><Action>analyze_samples</Action><Condition>is_sample_analyzed</Condition><Action>sense_environment</Action></Sequence><Sequence><Condition>is_location_reachable</Condition><Action>go_to_location</Action><Condition>is_area_explored</Condition></Sequence></Selector><Action>explore_area</Action></BehaviorTree>Note: The 'reform_formation' action can be defined as a separate behavior or condition node to ensure the swarm is constantly realigning and maintaining its formation.

###
4.// INSTRUCTIONS: Use only the following behaviors {'avoid_collision': 'Action: Avoid collisions with other robots by changing direction. Returns True if successful, False otherwise.', 'request_assistance': 'Action: Send a signal to nearby robots requesting assistance. Always returns True.', 'is_colliding': 'Condition: Check if the robot is currently colliding with another robot. Returns True if a collision is detected, False otherwise.', 'is_receiving_signal': 'Condition: Check if the robot is currently receiving a request for assistance signal from another robot. Returns True if a signal is received, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task).
4.// USER COMMAND: Generate a behavior tree for a swarm of robots to avoid collisions and assist each other when needed.
4.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>is_colliding</Condition><Action>avoid_collision</Action></Sequence><Action>move_forward</Action></Selector><Sequence><Condition>is_receiving_signal</Condition><Action>request_assistance</Action></Sequence></Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'search_and_collect': 'Action: Search for resources within the area and collect them. Returns True if resources are found and collected, False otherwise.', 'deposit_resources': 'Action: Travel to the designated location to deposit the collected resources. Returns True once successfully deposited.', 'is_resource_available': 'Condition: Check if there are resources available within reach. Returns True if resources are detected nearby, False otherwise.', 'is_at_resource_deposit': 'Condition: Check if the robot has reached the designated resource deposit location. Returns True if at the location, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Generate a behavior tree for a swarm of robots to search for and collect resources, and then deposit them at a designated location.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_resource_available</Condition><Action>search_and_collect</Action></Sequence><Sequence><Condition>is_at_resource_deposit</Condition><Action>deposit_resources</Action></Sequence></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'explore_area': 'Action: Move around and explore the designated area. Always returns True.', 'detect_object': 'Action: Use sensors to detect objects within the environment. Returns True if an object is detected, False otherwise.', 'return_to_start': 'Action: Use the shortest path to return to the starting location. Returns True once successfully returned.', 'is_target_found': 'Condition: Check if the target object has been found within the area. Returns True if the target is detected, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Generate a behavior tree for a swarm of robots to explore an area and find a specific target object.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_target_found</Condition><Action>return_to_start</Action></Sequence><Sequence><Condition>detect_object</Condition><Action>explore_area</Action></Sequence></Selector></BehaviorTree> 
###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'follow_path': 'Action: Follow the designated path to reach the desired location.', 'move_to_destination': 'Action: Move to a specific location within the environment.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_path_blocked': 'Condition: Check if the current path is blocked by an obstacle or impassable terrain.', 'is_target_reached': 'Condition: Check if the agent has reached the designated target location.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Navigate through a complex maze and reach the designated target location.' Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_path_blocked</Condition><Action>avoid_obstacle</Action></Sequence><Selector><Sequence><Condition>is_target_reached</Condition><Action>task_completed</Action></Sequence><Sequence><Condition>is_agent_in_nest</Condition><Action>move_to_destination</Action></Sequence></Selector></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'reset_position': 'Action: Reset the agent's position to a predetermined starting location.', 'scan_area': 'Action: Use sensor readings to scan and map the surrounding area.', 'is_area_mapped': 'Condition: Check if the current area has already been mapped and explored. Returns: True if the area is mapped, False otherwise.', 'move_to_unmapped_area': 'Action: Move to an unmapped area within the environment to continue exploration.', 'follow_path': 'Action: Follow the designated path to reach the desired location.', 'is_obstacle_ahead': 'Condition: Check if there is an obstacle blocking the path ahead.', 'is_exit_reached': 'Condition: Check if the designated exit location has been reached.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Explore a building and map all available areas, then locate and reach the designated exit.' Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_exit_reached</Condition><Action>task_completed</Action></Sequence><Sequence><Condition>is_area_mapped</Condition><Selector><Sequence><Condition>is_obstacle_ahead</Condition><Action>move_to_unmapped_area</Action></Sequence><Action>follow_path</Action></Selector></Sequence><Sequence><Condition>is_agent_in_nest</Condition><Action>reset_position</Action><Action>scan_area</Action></Sequence></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'move_forward': 'Action: Move one step forward while maintaining formation.', 'shift_right': 'Action: Shift the entire formation one step to the right.', 'is_obstacle_ahead': 'Condition: Check if there is an obstacle blocking the path ahead for the formation.', 'is_target_reached': 'Condition: Check if the designated target location has been reached.', 'form_circle': 'Action: Form a circle with all robots in the formation.', 'break_circle': 'Action: Break the circle formation and resume regular movements.', 'move_to_destination': 'Action: Move to a specific location within the environment.', 'is_target_lost': 'Condition: Check if the designated target location has been lost or can no longer be reached.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Form a circle formation around the designated target and maintain it until the target is reached, breaking formation if necessary to reach the target.' Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_obstacle_ahead</Condition><Action>avoid_obstacle</Action></Sequence><Sequence><Condition>is_target_reached</Condition><Action>task_completed</Action></Sequence><Sequence><Condition>is_target_lost</Condition><Action>break_circle</Action></Sequence></Selector><Sequence><Condition>is_circle_formed</Condition><Action>follow_circle</Action></Sequence><Action>move_to_destination</Action></BehaviorTree>###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_yellow': "Action: Change agent's color to yellow. Always returns True.", 'change_color_to_red': "Action: Change agent's color to red. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'randomly_choose_color': 'Action: Randomly choose one of the three available colors (green, yellow, red) and change the agent's color. Always returns True.', 'is_color_changed': 'Condition: Check if the agent's color has changed. Returns True if the agent's color has changed, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Change the agent's color to either green, yellow, or red randomly and ensure the color change is successful.'Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>randomly_choose_color</Action><Condition>is_color_changed</Condition></Sequence><Action>wander</Action></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'avoid_agent': 'Action: Avoid colliding with other agents. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a horizontal line at the center. Always returns True.', 'is_line_formed_vertical': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_line_formed_horizontal': 'Condition: Check if a horizontal line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Avoid collisions with other agents, form a horizontal line, then change color to green, find and reach the target, and then change color to white.'Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_agent_in_nest</Condition><Action>change_color_to_white</Action></Sequence><Sequence><Condition>is_line_formed_horizontal</Condition><Action>avoid_agent</Action><Action>form_line</Action><Action>change_color_to_green</Action></Sequence><Selector><Sequence><Condition>is_target_detected</Condition><Action>change_color_to_white</Action></Sequence><Sequence><Condition>is_target_reached</Condition><Action>change_color_to_white</Action></Sequence><Sequence><Condition>is_obstacle_detected</Condition></Sequence><Action>wander</Action></Selector></Sequence></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_blue': "Action: Change agent's color to blue. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'explore': "Action: Explore the environment by moving randomly. Always returns True.", 'is_area_mapped': "Condition: Check if the current area has already been mapped and explored. Returns True if the area is mapped, False otherwise.", 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'move_forward': 'Action: Move the agent one step forward in its current direction. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Explore the environment, avoid obstacles, and reach a target within 15 units.' Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_target_reached</Condition><Action>change_color_to_blue</Action></Sequence><Sequence><Condition>is_area_mapped</Condition><Action>explore</Action></Sequence><Sequence><Condition>is_obstacle_detected</Condition><Action>avoid_obstacle</Action></Sequence><Action>move_forward</Action></Selector></BehaviorTree> 
###
4.// INSTRUCTIONS: Use only the following behaviors {'detect_target': 'Action: Search and detect a specific target within the environment. Always returns True.', 'get_coordinates': 'Action: Get the coordinates of the target. Always returns True.', 'navigate_to_target': 'Action: Move towards the target using the received coordinates. Always returns True.', 'do_something': 'Action: Perform a specific task once the target is reached. Always returns True.', 'check_battery_level': 'Condition: Check if the battery level is above 20%. Returns True if the battery level is above 20%, False otherwise.', 'is_target_detected': 'Condition: Check if the target is within the agent\'s line of sight. Returns True if the target is detected, False otherwise.', 'is_target_reached': 'Condition: Check if the agent has reached the target. Returns True if the agent has reached the target, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree for the robot to search for a specific target, move towards it, and perform a task once reached.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Selector><Sequence><Condition>is_battery_level_low</Condition><Action>return_to_base</Action></Sequence><Sequence><Condition>is_target_detected</Condition><Action>get_coordinates</Action><Action>navigate_to_target</Action><Action>task_completed</Action></Sequence></Selector><Sequence><Condition>is_target_reached</Condition><Action>do_something</Action><Action>navigate_to_base</Action><Action>report_task_successful</Action></Sequence></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'move_forward': 'Action: Move one step forward.', 'move_backward': 'Action: Move one step backward.', 'rotate_left': 'Action: Rotate 90 degrees to the left.', 'rotate_right': 'Action: Rotate 90 degrees to the right.', 'avoid_obstacle': 'Action: Detect and avoid obstacles.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_corner_detected': 'Condition: Check for corners in the path. Returns True if a corner is detected, False otherwise.', 'is_in_safe_zone': 'Condition: Check if the robot is in a designated safe zone. Returns True if in safe zone, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree for the robot to navigate through a complex maze and reach the designated safe zone.
5.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>is_obstacle_detected</Condition><Selector><Sequence><Condition>is_corner_detected</Condition><Action>rotate_left</Action><Action>move_forward</Action></Sequence><Action>rotate_right</Action></Selector></Sequence><Sequence><Condition>is_in_safe_zone</Condition><Action>task_completed</Action></Sequence></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'detect_enemy': 'Action: Detect the enemy within the vicinity. Always returns True.', 'fire_at_enemy': 'Action: Fire at the detected enemy. Always returns True.', 'take_cover': 'Action: Move randomly to take cover from enemy fire. Always returns True.', 'move_forward': 'Action: Move one step forward. Always returns True.', 'is_enemy_detected': 'Condition: Check for enemies nearby. Returns True if an enemy is detected, False otherwise.', 'is_ammunition_low': 'Condition: Check if ammunition level is below 10%. Returns True if ammunition is low, False otherwise.', 'is_health_low': 'Condition: Check if health level is below 30%. Returns True if health is low, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree for the robot to strategically engage and defeat enemies while managing ammunition and health levels.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Selector><Sequence><Condition>is_ammunition_low</Condition><Action>return_to_base</Action></Sequence><Selector><Sequence><Condition>is_enemy_detected</Condition><Action>fire_at_enemy</Action><Action>move_forward</Action></Sequence><Action>take_cover</Action></Selector></Selector><Sequence><Condition>is_health_low</Condition><Action>use_medkit</Action><Action>continue_engaging_enemies</Action></Sequence></Selector></BehaviorTree> 
###
4.// INSTRUCTIONS: Use only the following behaviors {'move_left': 'Action: Move one step to the left.', 'move_right': 'Action: Move one step to the right.', 'move_up': 'Action: Move one step up.', 'move_down': 'Action: Move one step down.', 'rotate_right': 'Action: Rotate 90 degrees to the right.', 'rotate_left': 'Action: Rotate 90 degrees to the left.', 'reach_target': 'Action: Move towards and reach the designated target.', 'check_surroundings': 'Condition: Check if surroundings are clear. Returns True if no obstacles are detected, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Generate a behavior tree for a robot to navigate to a specific location while avoiding obstacles and checking surroundings.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>check_surroundings</Condition><Selector><Sequence><Condition>is_obstacle_ahead</Condition><Selector><Sequence><Condition>is_obstacle_on_left</Condition><Action>move_right</Action></Sequence><Selector><Sequence><Condition>is_obstacle_on_right</Condition><Action>move_left</Action></Sequence><Action>move_up</Action></Selector></Selector></Sequence></Selector><Sequence><Condition>is_obstacle_ahead</Condition><Action>rotate_right</Action></Sequence><Sequence><Condition>is_obstacle_on_left</Condition><Action>rotate_left</Action></Sequence></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'reach_object': 'Action: Move towards and reach the designated object.', 'pick_up_object': 'Action: Pick up and carry the designated object while maintaining balance.', 'carry_object_to_destination': 'Action: Carefully carry the object to the specified destination.', 'place_object_down': 'Action: Place the object down at the designated location.', 'is_object_reached': 'Condition: Check if the designated object has been reached. Returns True if the object is within reach, False otherwise.', 'is_object_pickedup': 'Condition: Check if the object has been successfully picked up. Returns True if the object is lifted, False otherwise.', 'is_destination_reached': 'Condition: Check if the specified destination has been reached. Returns True if the destination is within reach, False otherwise.', 'is_object_lost': 'Condition: Check if the object has been lost or dropped. Returns True if the object is not in grasp, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Generate a behavior tree for a robot to pick up and carry a designated object to a specific destination while avoiding obstacles and maintaining balance.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_destination_reached</Condition><Selector><Sequence><Condition>is_object_reached</Condition><Action>place_object_down</Action></Sequence><Selector><Sequence><Condition>is_object_lost</Condition><Action>retrace_steps</Action></Sequence><Action>carry_object_to_destination</Action></Selector></Selector></Sequence><Sequence><Condition>is_object_pickedup</Condition><Action>carry_object_to_destination</Action></Sequence><Sequence><Condition>is_object_nearby</Condition><Action>reach_object</Action></Sequence><Sequence><Condition>is_object_within_range</Condition><Action>pick_up_object</Action></Sequence></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'return_to_origin': 'Action: Navigate back to the starting point.', 'avoid_obstacle': 'Action: Avoid detected obstacles and maintain formation.', 'form_square': 'Action: Form a square shape with the robot swarm.', 'check_battery_level': 'Condition: Check the remaining battery level. Returns True if battery level is above 20%, False if below.', 'is_target_reached': 'Condition: Check if the target destination as been reached. Returns True if destination is reached, False otherwise.', 'is_formation_stable': 'Condition: Check if the formation is stable and aligned. Returns True if formation is stable, False otherwise.', 'is_hazard_detected': 'Condition: Check for any potential hazards in the surrounding area. Returns True if a hazard is detected, False otherwise.', 'move_forward': 'Action: Move one step forward. Always returns True.', 'move_left': 'Action: Move one step to the left. Always returns True.', 'move_right': 'Action: Move one step to the right. Always returns True.', 'move_backward': 'Action: Move one step backward. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Generate a behavior tree for a swarm of robots to navigate back to the starting point while avoiding hazards and maintaining formation.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_target_reached</Condition><Sequence><Selector><Sequence><Condition>is_formation_stable</Condition><Action>form_square</Action></Sequence><Action>return_to_origin</Action></Selector></Sequence></Selector><Sequence><Condition>is_hazard_detected</Condition><Selector><Sequence><Condition>is_battery_low</Condition><Action>return_to_origin</Action></Sequence><Selector><Sequence><Condition>is_hazard_nearby</Condition><Action>avoid_obstacle</Action></Sequence><Selector><Sequence><Condition>is_obstacle_ahead</Condition><Selector><Sequence><Condition>is_obstacle_on_left</Condition><Action>move_forward</Action></Sequence><Selector><Sequence><Condition>is_obstacle_on_right</Condition><Action>move_backward</Action></Sequence><Action>move_right</Action></Selector></Selector></Sequence></Selector></Sequence></Selector></BehaviorTree>
###
4.// INSTRUCTIONS: Use only the following behaviors {'detect_obstacle_color': 'Action: Detect the color of the obstacle in front of the robot. Returns True if the color matches the specified color, False otherwise.', 'change_robot_color': 'Action: Change the robot's color to match the color detected by the sensor. Returns True if the color is successfully changed, False otherwise.', 'move_forward': 'Action: Move one step forward while maintaining formation. Always returns True.', 'spin_left': 'Action: Spin the robot 90 degrees to the left. Always returns True.', 'is_leaf_color_green': 'Condition: Check if the color of the leaf on the ground is green. Returns True if the color is green, False otherwise.', 'is_tree_detected': 'Condition: Check for the presence of a tree nearby. Returns True if a tree is detected, False otherwise.', 'is_on_path': 'Condition: Check if the robot is still on the designated path. Returns True if on the path, False otherwise.', 'is_within_distance': 'Condition: Check if the robot is within a specified distance from the target location. Returns True if within the distance, False otherwise.', 'water_plant': 'Action: Water the plant in front of the robot. Returns True if the plant was successfully watered, False otherwise.', 'is_water_level_low': 'Condition: Check if the water level in the robot's tank is low. Returns True if the water level is low, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Collect data and water plants while navigating through a maze and avoiding obstacles'.Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_on_path</Condition><Action>move_forward</Action><Sequence><Condition>is_water_level_low</Condition><Action>water_plant</Action></Sequence></Sequence><Sequence><Condition>is_obstacle_detected</Condition><Action>detect_obstacle_color</Action><Sequence><Condition>is_tree_detected</Condition><Action>change_robot_color</Action></Sequence></Sequence><Sequence><Condition>is_leaf_color_green</Condition><Action>spin_left</Action></Sequence></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'collect_resource': 'Action: Collect the resource located in front of the robot. Returns True if the resource is successfully collected, False otherwise.', 'deposit_resource': 'Action: Deposit the collected resource at the designated location. Returns True if the resource was successfully deposited, False otherwise.', 'move_forward': 'Action: Move one step forward while maintaining formation. Always returns True.', 'turn_right': 'Action: Turn the robot 90 degrees to the right. Always returns True.', 'rotate_left': 'Action: Rotate the robot 180 degrees to the left. Always returns True.', 'is_on_path': 'Condition: Check if the robot is still on the designated path. Returns True if on the path, False otherwise.', 'is_resource_available': 'Condition: Check if there is a resource available in front of the robot. Returns True if a resource is available, False otherwise.', 'is_at_deposit_location': 'Condition: Check if the robot is at the designated deposit location. Returns True if at the deposit location, False otherwise.', 'is_resource_collected': 'Condition: Check if the resource has been successfully collected. Returns True if the resource is collected, False otherwise.', 'check_battery_level': 'Action: Check the robot's battery level. Returns True if battery level is above a specified threshold, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Collect resources and deposit them at the designated location while ensuring the robot stays on the designated path and has enough battery'. Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_on_path</Condition><Action>move_forward</Action><Sequence><Condition>is_resource_available</Condition><Action>collect_resource</Action></Sequence></Sequence><Sequence><Condition>is_at_deposit_location</Condition><Action>turn_right</Action><Sequence><Condition>check_battery_level</Condition><Sequence><Condition>is_resource_collected</Condition><Action>deposit_resource</Action></Sequence></Sequence></Sequence></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'detect_enemy': 'Action: Detect the presence of an enemy within a specified range. Returns True if an enemy is detected, False otherwise.', 'attack_enemy': 'Action: Attack the enemy if within range. Returns True if enemy is successfully attacked, False otherwise.', 'move_forward': 'Action: Move one step forward while maintaining formation. Always returns True.', 'move_backward': 'Action: Move one step backward while maintaining formation. Always returns True.', 'is_on_path': 'Condition: Check if the robot is still on the designated path. Returns True if on the path, False otherwise.', 'has_enemy': 'Condition: Check if there is an enemy within the robot's range. Returns True if there is an enemy, False otherwise.', 'is_at_target': 'Condition: Check if the robot is at the designated target location. Returns True if at the target location, False otherwise.', 'is_enemy_attacked': 'Condition: Check if the enemy has been successfully attacked. Returns True if the enemy is attacked, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Defend the designated target location by attacking any enemies that come within range'. Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_on_path</Condition><Action>move_forward</Action><Condition>is_enemy_attacked</Condition></Sequence><Sequence><Condition>has_enemy</Condition><Action>detect_enemy</Action><Sequence><Condition>is_at_target</Condition><Action>attack_enemy</Action></Sequence><Action>move_backward</Action></Sequence></Sequence></Selector></BehaviorTree> 
###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Move forward until an obstacle is detected, then try to avoid it, and finally reach the target.'Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>is_path_clear</Condition> <Action>continue_movement_agent</Action> </Sequence> <Action>task_completed</Action> </Selector> <Selector> <Condition>is_obstacle_detected</Condition> <Action>avoid_obstacle</Action> </Selector> <Selector> <Sequence> <Condition>is_target_reached</Condition> <Action>task_completed</Action> </Sequence> <Selector> <Action>wander</Action> </Selector> </Sequence> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Search for the target by moving randomly, if obstacle detected avoid it, once target is detected, move towards target until it is reached.'Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>is_target_detected</Condition> <Sequence> <Action>change_color_to_green</Action> <Sequence> <Condition>is_line_formed</Condition> <Condition>is_agent_in_nest</Condition> </Sequence> </Sequence> <Action>task_completed</Action> </Sequence> <Selector> <Condition>is_obstacle_detected</Condition> <Action>avoid_obstacle</Action> </Selector> <Selector> <Action>wander</Action> </Selector> </Sequence> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Check for obstacles, if obstacle detected avoid it, then continue movement, and finally check if target is
###
4.// INSTRUCTIONS: Use only the following behaviors {'move_towards_goal': 'Action: Move towards the specified goal location.', 'rotate_clockwise': 'Action: Rotate the agent clockwise by 90 degrees.', 'rotate_counterclockwise': 'Action: Rotate the agent counterclockwise by 90 degrees.', 'find_closest_obstacle': 'Action: Move towards the closest obstacle and stop.', 'is_obstacle_reached': 'Condition: Check if the agent has reached the closest obstacle or not.', 'is_goal_reached': 'Condition: Check if the agent has reached the goal location.', 'is_obstacle_detected': 'Condition: Check if any obstacles are detected ahead.', 'is_goal_detected': 'Condition: Check if the goal location is within the agent\'s field of view.', 'is_movement_complete': 'Condition: Check if the agent has completed its current movement.', 'reach_goal': 'Action: Signal task completion by reaching the goal location.', 'avoid_collision': 'Action: Avoid colliding with other agents by changing formation.', 'is_formation_changed': 'Condition: Check if the formation has been changed to avoid collisions.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Navigate through a maze to reach the goal location without colliding with other agents.'
4.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>is_goal_detected</Condition> <Action>move_towards_goal</Action> </Sequence> <Selector> <Sequence> <Condition>is_obstacle_detected</Condition> <Action>find_closest_obstacle</Action> <Selector> <Sequence> <Condition>is_obstacle_reached</Condition> <Action>rotate_clockwise</Action> </Sequence> <Selector> <Sequence> <Condition>is_goal_detected</Condition> <Action>rotate_counterclockwise</Action> </Sequence> </Selector> </Sequence> </Selector> </Selector> <Sequence> <Condition>is_movement_complete</Condition> <Action>reach_goal</Action> </Sequence> <Sequence> <Condition>is_formation_changed</Condition> <Action>avoid_collision</Action> </Sequence> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'move_forward': 'Action: Move forward by one step while maintaining formation.', 'rotate_left': 'Action: Rotate the agent 45 degrees to the left.', 'rotate_right': 'Action: Rotate the agent 45 degrees to the right.', 'stop_movement': 'Action: Stop all movement and hold current position.', 'is_obstacle_detected': 'Condition: Check if any obstacles are detected ahead.', 'is_slope_detected': 'Condition: Check if a steep slope is detected ahead.', 'is_formation_broken': 'Condition: Check if the formation has become misaligned or broken due to external factors.', 'is_movement_complete': 'Condition: Check if the agent has completed its current movement.', 'restore_formation': 'Action: Regroup and restore the original formation.', 'jump': 'Action: Jump over any obstacles or steep slopes.', 'message_sent': 'Action: Signal successful task completion by sending a message.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Navigate through an area with potential obstacles and slopes, while maintaining formation and regrouping if necessary.'
5.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>is_obstacle_detected</Condition> <Action>stop_movement</Action> </Sequence> <Selector> <Sequence> <Condition>is_slope_detected</Condition> <Action>jump</Action> </Sequence> <Selector> <Sequence> <Condition>is_formation_broken</Condition> <Selector> <Sequence> <Condition>is_obstacle_detected</Condition> <Action>rotate_right</Action> </Sequence> <Selector> <Sequence> <Condition>is_slope_detected</Condition> <Action>rotate_left</Action> </Sequence> </Selector> <Sequence> <Condition>is_movement_complete</Condition> <Action>restore_formation</Action> </Sequence> </Selector> </Selector> </Selector> <Selector> <Sequence> <Condition>is_movement_complete</Condition> <Action>rotate_left</Action> </Sequence> <Selector> <Sequence> <Condition>is_slope_detected</Condition> <Action>rotate_right</Action> </Sequence> <Selector> <Sequence> <Condition>is_formation_broken</Condition> <Selector> <Sequence> <Condition>is_slope_detected</Condition> <Action>message_sent</Action> </Sequence> <Selector> <Sequence> <Condition>is_obstacle_detected</Condition> <Action>message_sent</Action> </Sequence> </Selector> </Selector> </Selector> </Selector> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'move_forward': 'Action: Move forward while maintaining formation.', 'rotate_left': 'Action: Rotate the agent 90 degrees to the left.', 'rotate_right': 'Action: Rotate the agent 90 degrees to the right.', 'stop_movement': 'Action: Stop all movement and hold current position.', 'is_obstacle_detected': 'Condition: Check if any obstacles are detected ahead.', 'is_target_detected': 'Condition: Check if the target is within range.', 'is_target_reached': 'Condition: Check if the target has been reached.', 'set_destination': 'Action: Set the destination for the agent to move towards.', 'is_movement_complete': 'Condition: Check if the agent has completed its current movement.', 'navigate_through_maze': 'Action: Navigate through a maze by following a specific path.', 'complete_task': 'Action: Signal task completion by performing a specific action.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Navigate through a pre-defined course to reach a specific target, then signal task completion.'
6.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>is_target_detected</Condition> <Selector> <Sequence> <Condition>is_target_reached</Condition> <Selector> <Sequence> <Condition>is_obstacle_detected</Condition> <Action>rotate_right</Action> </Sequence> <Selector> <Sequence> <Condition>is_movement_complete</Condition> <Action>stop_movement</Action> </Sequence> </Selector> </Selector> </Selector> <Sequence> <Condition>is_movement_complete</Condition> <Action>rotate_left</Action> </Sequence> <Selector> <Sequence> <Condition>is_movement_complete</Condition> <Action>navigate_through_maze</Action> </Sequence> <Sequence> <Condition>is_target_detected</Condition> <Action>set_destination</Action> </Sequence> </Selector> <Selector
###
4.// INSTRUCTIONS: Use only the following behaviors {'detect_water_level': 'Action: Detect the water level in a given area.', 'compare_water_levels': 'Condition: Compare the water level in two different areas and return True if they are similar, False otherwise.', 'fetch_water': 'Action: Fetch a bucket of water from the water source.', 'pour_water': 'Action: Pour the bucket of water into a designated area.', 'check_humidity': 'Condition: Check the humidity level in the surrounding environment and return True if optimal levels are present, False otherwise.', 'is_bucket_full': 'Condition: Check if the water bucket is full and return True, False if it is not.', 'is_water_needed': 'Condition: Check if there is a need for water in the designated area and return True if water is needed, False otherwise.', 'move_to_water_source': 'Action: Move towards the nearest water source.', 'move_to_destination': 'Action: Move towards the designated area where water is needed.'}, to construct behavior tree in XML format for a group of agricultural robots tasked with watering plants in a field. Output the XML behavior tree only.
4.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>check_humidity</Condition><Condition>compare_water_levels</Condition><Action>fetch_water</Action></Sequence><Selector><Condition>is_bucket_full</Condition><Action>pour_water</Action></Selector></Selector><Sequence><Condition>is_water_needed</Condition><Selector><Sequence><Condition>detect_water_level</Condition><Action>move_to_water_source</Action></Sequence><Action>move_to_destination</Action></Selector></Sequence></Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'detect_enemy': 'Condition: Detect if an enemy is present within 15 units. Returns True if enemy is present, False otherwise.', 'attack_enemy': 'Action: Launch an attack on the enemy.', 'retreat': 'Action: Retreat to a safe distance from the enemy.', 'move_to_location': 'Action: Move towards a designated location.', 'traverse_obstacle': 'Action: Traverse over an obstacle in the environment.', 'is_path_clear': 'Condition: Check if the path ahead is clear to move without encountering any obstacles. Returns True if path is clear, False otherwise.', 'random_movement': 'Action: Move in a random direction within a designated area.', 'gather_resources': 'Action: Gather resources from the surrounding environment.', 'upgrade_base': 'Action: Upgrade the base using the gathered resources.', 'check_base_health': 'Condition: Check the health status of the base and return True if it needs to be upgraded, False otherwise.'}, to construct behavior tree in XML format for a group of combat robots tasked with defending a base from enemy attacks. Output the XML behavior tree only.
5.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>check_base_health</Condition><Action>gather_resources</Action><Action>upgrade_base</Action></Sequence><Sequence><Condition>detect_enemy</Condition><Selector><Sequence><Condition>is_path_clear</Condition><Action>attack_enemy</Action></Sequence><Action>retreat</Action></Selector></Sequence></Selector><Sequence><Condition>is_obstacle_detected</Condition><Action>traverse_obstacle</Action></Sequence><Action>move_to_location</Action></Sequence></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'detect_danger': 'Condition: Check for any potential danger or obstacle in the environment and return True if detected, False otherwise.', 'avoid_danger': 'Action: Take necessary actions to avoid the detected danger or obstacle.', 'follow_dashed_line': 'Action: Follow a dashed line on the ground to reach a designated location.', 'is_stuck': 'Condition: Check if the robot is stuck in a particular position and return True if it is, False otherwise.', 'reverse_direction': 'Action: Reverse the direction of movement to get unstuck and continue moving towards the goal.', 'check_battery_level': 'Condition: Check the remaining battery level and return True if it needs to be recharged, False otherwise.', 'return_to_charging_station': 'Action: Return to the designated charging station to recharge the battery.', 'navigate_obstacle': 'Action: Use different behaviors to properly navigate through an obstacle.', 'scan_surroundings': 'Action: Scan the surroundings for potential hazards or obstacles.'}, to construct behavior tree in XML format for a group of exploration robots tasked with traversing through an unknown and potentially hazardous environment. Output the XML behavior tree only.
6.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>check_battery_level</Condition><Sequence><Condition>scan_surroundings</Condition><Action>return_to_charging_station</Action></Sequence></Sequence><Sequence><Condition>is_stuck</Condition><Action>reverse_direction</Action></Sequence><Selector><Condition>detect_danger</Condition><Action>avoid_danger</Action></Selector></Sequence><Sequence><Condition>detect_dashed_line</Condition><Action>follow_dashed_line</Action></Sequence></Selector><Sequence><Condition>is_obstacle_detected</Condition><Selector><Sequence><Condition>navigate_obstacle</Condition><Action>navigate_obstacle</Action></Sequence><Action>move_forward</Action></Selector></Sequence></BehaviorTree> 
###
4.// INSTRUCTIONS: Use only the following behaviors {'move_forward': 'Action: Move one step forward while maintaining formation.', 'move_backwards': 'Action: Move one step backwards while maintaining formation.', 'shift_left': 'Action: Shift the entire formation one step to the left.', 'shift_right': 'Action: Shift the entire formation one step to the right.', 'is_obstacle_ahead': 'Condition: Check if there is an obstacle blocking the path ahead for the formation.', 'is_object_close': 'Condition: Check if the transportable object is within 10 units of distance from the formation.', 'is_object_released': 'Condition: Check if the transportable object has been released and put down.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Generate a behavior tree for a swarm of robots to transport an object from one location to another while avoiding obstacles and maintaining formation.
4.// OUTPUT:
<BehaviorTree><Selector><Selector><Sequence><Condition>is_obstacle_ahead</Condition><Action>shift_right</Action></Sequence><Action>move_forward</Action></Selector><Selector><Condition>is_object_close</Condition><Action>move_backwards</Action><Action>release_object</Action></Selector></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'collect_resource': 'Action: Approach and collect the desired resource.', 'deposit_resource': 'Action: Deposit the collected resource at the designated location.', 'is_resource_close': 'Condition: Check if the desired resource is within 15 units of distance.', 'is_resource_full': 'Condition: Check if the resource storage is full.', 'is_deposit_location_reached': 'Condition: Check if the robot has reached the designated deposit location.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Generate a behavior tree for a swarm of robots to collect and deposit resources at designated locations while avoiding obstacles.
5.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>is_resource_close</Condition><Action>collect_resource</Action></Sequence><Selector><Condition>is_obstacle_detected</Condition><Action>avoid_obstacle</Action><Action>wander</Action></Selector></Selector><Selector><Sequence><Condition>is_resource_full</Condition><Sequence><Condition>is_deposit_location_reached</Condition><Action>deposit_resource</Action></Sequence></Sequence><Selector><Condition>is_obstacle_detected</Condition><Action>avoid_obstacle</Action></Selector></Selector></Sequence></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'move_forward': 'Action: Move one step forward while maintaining formation.', 'shift_left': 'Action: Shift the entire formation one step to the left.', 'shift_right': 'Action: Shift the entire formation one step to the right.', 'is_line_formed': 'Condition: Check if a horizontal line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_ahead': 'Condition: Check if there is an obstacle blocking the path ahead for the formation.', 'is_object_close': 'Condition: Check if the transportable object is within 10 units of distance from the formation.', 'is_object_released': 'Condition: Check if the transportable object has been released and put down.', 'group_robots': 'Action: Group the robots together to increase stability.', 'fan_out': 'Action: Move the robots away from each other to form a wider line.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Generate a behavior tree for a swarm of robots to fan out and group together while navigating obstacles and maintaining formation.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_obstacle_ahead</Condition><Action>group_robots</Action><Action>shift_right</Action></Sequence><Selector><Condition>is_object_close</Condition><Action>shift_left</Action><Action>release_object</Action></Selector><Selector><Condition>is_line_formed</Condition><Sequence><Condition>is_obstacle_ahead</Condition><Action>fan_out</Action></Sequence><Sequence><Condition>is_obstacle_ahead</Condition><Action>shift_right</Action></Sequence></Selector></Selector></BehaviorTree> ###

4.// INSTRUCTIONS: Use only the following behaviors {'move_to_target': 'Action: Move towards a specified target point.', 'analyze_environment': 'Action: Analyze the environment for potential resources or threats.', 'search_for_food': 'Action: Search the area for sources of food.', 'return_to_nest': 'Action: Return to the nest for shelter and safety.', 'is_resource_available': 'Condition: Check if there is a nearby resource available for collection.', 'is_nest_in_sight': 'Condition: Check if the nest is visible from the current location.', 'is_threat_detected': 'Condition: Check if there is a potential threat in the environment.'} to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Generate a behavior tree for the swarm robots to efficiently gather resources while avoiding potential threats and returning to the nest for safety.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_resource_available</Condition><Action>move_to_target</Action></Sequence><Sequence><Condition>is_threat_detected</Condition><Action>analyze_environment</Action></Sequence><Sequence><Condition>is_nest_in_sight</Condition><Action>return_to_nest</Action></Sequence></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_blue': "Action: Change agent's color to blue. Always returns True.", 'change_color_to_red': "Action: Change agent's color to red. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_triangle': 'Action: Form a triangle with other agents. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_triangle_formed': 'Condition: Check if a triangle is formed. Returns True if the triangle is formed with other agents, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Form a triangle with other agents and change color to red'Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>is_target_detected</Condition> <Action>change_color_to_red</Action> <Action>task_completed</Action> </Sequence> <Action>wander</Action> </Selector> <Sequence><Condition>is_agent_in_nest</Condition> <Action>change_color_to_blue</Action> <Action>agent_movement_freeze</Action> </Sequence> <Sequence> <Selector> <Sequence> <Condition>is_agent_in_nest</Condition> <Action>wander</Action> </Sequence> <Action>form_triangle</Action> </Selector> </Sequence> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'move_forward': 'Action: Move one step forward while maintaining formation.', 'scatter': 'Action: Scatter formation and move in random directions.', 'form_square': 'Action: Form a square formation with other agents.', 'is_agent_in_formation': 'Condition: Check if the agent is currently within the formation.', 'is_formation_intact': 'Condition: Check if the formation is still intact and all agents are within a certain distance from each other.', 'is_obstacle_ahead': 'Condition: Check if there is an obstacle blocking the path ahead for the formation.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.'} to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Generate a behavior tree for swarm robots to work together to reach a target while navigating obstacles and maintaining a square formation.
6.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>is_target_detected</Condition><Action>move_forward</Action></Sequence><Sequence><Condition>is_agent_in_formation</Condition><Action>form_square</Action></Sequence></Selector><Selector><Sequence><Condition>is_formation_intact</Condition><Action>move_forward</Action></Sequence><Action>scatter</Action></Selector></Sequence></BehaviorTree>
###
4.// INSTRUCTIONS: Use only the following behaviors {'move_forward': 'Action: Move one step forward while maintaining formation.', 'shift_left': 'Action: Shift the entire formation one step to the left.', 'shift_right': 'Action: Shift the entire formation one step to the right.', 'lift_object': 'Action: Lift and grab onto the transportable object.', 'release_object': 'Action: Release and put down the transportable object.', 'is_obstacle_ahead': 'Condition: Check if there is an obstacle blocking the path ahead for the formation.', 'is_object_lifted': 'Condition: Check if the transportable object is currently being lifted and carried.', 'is_formation_broken': 'Condition: Check if the formation has become misaligned or broken.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Generate a behavior tree for a swarm of robots to construct a bridge by coordinating their movements and lifting objects into place.
4.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>is_object_lifted</Condition><Action>lift_object</Action></Sequence><Action>move_forward</Action></Selector><Selector><Sequence><Condition>is_formation_broken</Condition><Action>reform_formation</Action></Sequence><Selector><Sequence><Condition>is_obstacle_ahead</Condition><Action>shift_left</Action></Sequence><Action>shift_right</Action></Selector></Sequence><Sequence><Condition>is_object_lifted</Condition><Action>release_object</Action></Sequence></Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'hover': 'Action: Hover and maintain altitude at current location.', 'move_to_nearest_object': "Action: Move closer to the nearest object within the robot's reach.", 'pick_up_object': 'Action: Pick up the nearest object within the robot's reach.', 'drop_object': 'Action: Drop the currently held object.', 'is_object_reached': 'Condition: Check if the nearest object is within the robot's grasp.', 'is_obstacle_ahead': 'Condition: Check if there are any obstacles blocking the path ahead.', 'is_object_detected': 'Condition: Check if there are any objects within the robot's reach.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Generate a behavior tree for a single robot to collect as many objects as possible within a limited time frame while avoiding obstacles.
5.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>is_object_reached</Condition><Selector><Sequence><Condition>is_object_detected</Condition><Action>pick_up_object</Action></Sequence><Action>move_to_nearest_object</Action></Selector></Sequence><Sequence><Condition>is_obstacle_ahead</Condition><Action>hover</Action></Sequence></Selector><Sequence><Condition>is_object_reached</Condition><Action>drop_object</Action></Sequence></Sequence></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'move_forward': 'Action: Move one step forward while maintaining formation.', 'shift_left': 'Action: Shift the entire formation one step to the left.', 'shift_right': 'Action: Shift the entire formation one step to the right.', 'move_to_location': 'Action: Move towards a specified location within the environment.', 'circle_around': 'Action: Circle around a specified location within the environment.', 'change_color_to_red': "Action: Change agent's color to red. Always returns True.", 'change_color_to_blue': "Action: Change agent's color to blue. Always returns True.", 'is_location_reached': 'Condition: Check if the specified location has been reached by the formation.', 'is_formation_broken': 'Condition: Check if the formation has become misaligned or broken.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'circle around the target location while maintaining formation' Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_location_reached</Condition><Action>circle_around</Action></Sequence><Sequence><Condition>is_formation_broken</Condition><Action>reform_formation</Action></Sequence></Selector></BehaviorTree> 
###
4.// INSTRUCTIONS: Use only the following behaviors {'find_food': 'Condition: Scan the environment for nearby food sources. Returns True if a food source is detected, False otherwise.', 'collect_food': 'Action: Collect the food into designated storage area. Always returns True.', 'deposit_food': 'Action: Deposit the collected food into the designated food storage area. Always returns True.', 'is_storage_full': 'Condition: Check if the designated food storage area is full and cannot hold any more food. Returns True if full, False otherwise.', 'is_storage_empty': 'Condition: Check if the designated food storage area is empty and requires more food. Returns True if empty, False otherwise.', 'avoid_predator': 'Action: Evade any detected predators in the environment. Returns True when the predator is no longer present.', 'stop_movements': 'Action: Stop all movements and freeze in place. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Gather food from multiple sources and deposit into designated storage area while avoiding predators and managing storage capacity'.
4.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_storage_full</Condition><Action>deposit_food</Action></Sequence><Sequence><Condition>find_food</Condition> <Sequence><Condition>is_storage_empty</Condition><Action>collect_food</Action></Sequence></Sequence><Sequence><Condition>avoid_predator</Condition><Selector><Sequence><Condition>is_predator_detected</Condition><Action>stop_movements</Action></Sequence><Action>continue_movement_agent</Action></Selector></Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'detect_fire': 'Condition: Scan the environment for any signs of fire. Returns True if fire is detected, False otherwise.', 'navigate_to_fire': 'Action: Navigate towards the detected fire source. Returns True when at the fire source.', 'extinguish_fire': 'Action: Use designated tools to extinguish the fire. Returns True when fire is extinguished.', 'recharge_tools': 'Action: Return to designated recharge station to recharge tools. Returns True when tools are fully recharged.', 'is_recharge_needed': 'Condition: Check if the tool's battery levels are low and require recharging. Returns True if recharge is needed, False otherwise.', 'is_fire_extinguished': 'Condition: Check if the fire has been completely extinguished. Returns True if fire is extinguished, False otherwise.', 'is_recharge_station_present': 'Condition: Check if there is a designated recharge station within the vicinity. Returns True if a station is present, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Patrol designated area, detect and extinguish any fires, and recharge tools when needed'.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_fire_extinguished</Condition><Action>navigate_to_fire</Action><Action>extinguish_fire</Action></Sequence><Sequence><Condition>is_recharge_needed</Condition><Selector><Sequence><Condition>is_recharge_station_present</Condition><Action>navigate_to_recharge_station</Action></Sequence><Action>recharge_tools</Action></Selector></Sequence><Action>patrol_designated_area</Action></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'find_shelter': 'Condition: Scan the environment for nearby shelter options. Returns True if a suitable shelter is found, False otherwise.', 'navigate_to_shelter': 'Action: Navigate towards the designated shelter location. Returns True when arrived at shelter.', 'enter_shelter': 'Action: Enter the designated shelter for protection. Returns True when shelter is entered.', 'search_for_resources': 'Action: Search the surrounding area for any necessary resources. Always returns True.', 'gather_resources': 'Action: Gather necessary resources for survival. Returns True when all resources are collected.', 'use_resources': 'Action: Use collected resources for survival. Returns True when resources are used.', 'is_shelter_secure': 'Condition: Check if the designated shelter is secure and offers adequate protection. Returns True if shelter is secure, False otherwise.', 'is_resources_available': 'Condition: Check if all necessary resources have been collected. Returns True if resources are available, False otherwise.', 'is_environment_safe': 'Condition: Check for any immediate threats or dangers in the environment. Returns True if environment is safe, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Survive in a hostile environment by finding shelter, gathering and using necessary resources, and constantly assessing safety'.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_resources_available</Condition><Selector><Sequence><Condition>is_environment_safe</Condition><Action>use_resources</Action></Sequence><Sequence><Condition>search_for_resources</Condition><Action>gather_resources</Action></Sequence></Selector></Sequence><Sequence><Condition>is_shelter_secure</Condition><Action>enter_shelter</Action></Sequence><Sequence><Condition>find_shelter</Condition><Action>navigate_to_shelter</Action></Sequence></Selector></BehaviorTree>
###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Detect and avoid obstacles while moving towards a target'Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree> <Sequence> <Condition>is_target_detected</Condition> <Sequence> <Condition>is_path_clear</Condition> <Action>move_forward</Action> <Action>update_map</Action> </Sequence> <Sequence> <Condition>is_obstacle_detected</Condition> <Action>avoid_obstacle</Action> <Action>update_map</Action> </Sequence> </Sequence> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Change color to white when in nest, then change back to green when out of nest'Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>is_agent_in_nest</Condition> <Action>change_color_to_white</Action> <Action>agent_movement_freeze</Action> <Action>task_completed</Action> </Sequence> <Sequence> <Condition>is_line_formed</Condition> <Action>form_line</Action> <Action>change_color_to_green</Action> <Action>continue_movement_agent</Action> </Sequence> </Selector> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Move forward continuously until an obstacle is detected, then avoid obstacle and continue forward'Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>is_obstacle_detected</Condition> <Action>avoid_obstacle</Action> <Action>update_map</Action> </Sequence> <Sequence> <Condition>is_path_clear</Condition> <Action>move_forward</Action> <Action>update_map</Action> </Sequence> </Selector> <Action>continue_movement_agent</Action> </Sequence> </BehaviorTree> 
###
4.// INSTRUCTIONS: Use only the following behaviors {'move_forward': 'Action: Move one step forward while maintaining formation.', 'shift_left': 'Action: Shift the entire formation one step to the left.', 'shift_right': 'Action: Shift the entire formation one step to the right.', 'collect_resource': 'Action: Collect and gather the resource object.', 'deposit_resource': 'Action: Deposit the collected resource at the designated drop-off location.', 'is_resource_detected': 'Condition: Check if a resource object is detected within the proximity.', 'is_resource_collected': 'Condition: Check if a resource object has been collected and is being carried.', 'is_at_dropoff': 'Condition: Check if the robot is at the designated drop-off location.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Generate a behavior tree for a swarm of robots to cooperatively gather and deposit resources at a specific location.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_resource_detected</Condition><Action>collect_resource</Action></Sequence><Sequence><Condition>is_resource_collected</Condition><Selector><Sequence><Condition>is_at_dropoff</Condition><Action>deposit_resource</Action></Sequence><Selector><Sequence><Condition>is_at_dropoff</Condition><Action>move_forward</Action></Sequence><Selector><Sequence><Condition>is_resource_detected</Condition><Action>shift_right</Action></Sequence><Action>shift_left</Action></Selector></Selector></Sequence></Selector></Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'move_forward': 'Action: Move one step forward.', 'rotate_left': 'Action: Rotate the robot 90 degrees to the left.', 'rotate_right': 'Action: Rotate the robot 90 degrees to the right.', 'stop_movement': 'Action: Stop all movement.', 'take_cover': 'Action: Move to and take cover behind a nearby obstacle.', 'engage_enemy': 'Action: Engage the enemy by moving towards them and attacking.', 'is_obstacle_ahead': 'Condition: Check if there is an obstacle blocking the path ahead.', 'is_enemy_detected': 'Condition: Check if an enemy is detected within range.', 'is_hit_detected': 'Condition: Check if the robot has been hit by an enemy attack.', 'is_in_cover': 'Condition: Check if the robot is currently in cover.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Generate a behavior tree for a swarm of robots to carry out tactical maneuvers and engage enemies in a combat scenario.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_enemy_detected</Condition><Action>engage_enemy</Action><Action>stop_movement</Action></Sequence><Sequence><Condition>is_obstacle_ahead</Condition><Action>take_cover</Action><Action>stop_movement</Action></Sequence><Sequence><Condition>is_hit_detected</Condition><Sequence><Condition>is_in_cover</Condition><Selector><Sequence><Condition>is_obstacle_ahead</Condition><Action>rotate_right</Action></Sequence><Action>rotate_left</Action></Selector></Sequence><Action>stop_movement</Action></Sequence></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'sense_surroundings': 'Action: Use sensors to gather information about the surrounding environment.', 'form_circle': 'Action: Form a circular shape with the other robots in the swarm.', 'form_grid': 'Action: Form a grid-like formation with the other robots in the swarm.', 'is_obstacle_detected': 'Condition: Check if an obstacle is detected within the proximity.', 'is_at_center': 'Condition: Check if the robot is at the center of the formation.', 'is_in_good_condition': 'Condition: Check if the robot is in good working condition and able to continue with tasks.', 'is_ready_to_move': 'Condition: Check if the robot has finished gathering information and is ready to move.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Generate a behavior tree for a swarm of robots to gather information about the environment and form a coordinated shape.
6.// OUTPUT:
<BehaviorTree><Sequence><Action>sense_surroundings</Action><Selector><Sequence><Condition>is_obstacle_detected</Condition><Selector><Sequence><Condition>is_at_center</Condition><Action>form_grid</Action></Sequence><Action>form_circle</Action></Selector></Sequence><Selector><Sequence><Condition>is_in_good_condition</Condition><Selector><Sequence><Condition>is_ready_to_move</Condition><Action>move_forward</Action></Sequence><Action>stop_movement</Action></Selector></Sequence><Action>wait</Action></Selector></Sequence></BehaviorTree>
###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_red': "Action: Change agent's color to red. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_intruder_detected': 'Condition: Check if an intruder is detected in the monitored area. Returns True if an intruder is detected, False otherwise.', 'release_target': 'Action: Release the target object if it is being carried. Always returns True.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Collect the nearest target, if path is clear, form a line and change color to red to indicate carrying, then return home and release target.'Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_target_detected</Condition><Action>continue_movement_agent</Action><Sequence><Condition>is_path_clear</Condition><Action>form_line</Action><Sequence><Action>change_color_to_red</Action><Action>release_target</Action></Sequence><Action>change_color_to_green</Action><Action>task_completed</Action></Sequence></Sequence><Sequence><Condition>is_agent_in_nest</Condition><Action>change_color_to_red</Action><Action>task_completed</Action></Sequence></Selector><Action>wander</Action></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_red': "Action: Change agent's color to red. Always returns True.", 'change_color_to_yellow': "Action: Change agent's color to yellow. Always returns True.", 'move_forward': 'Action: Move forward until obstacle is reached. Always returns True.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_agent_in_team': 'Condition: Check if agent is part of a team. Returns True if agent is in a team, False otherwise.', 'is_agent_alone': 'Condition: Check if agent is alone. Returns True if agent is alone, False otherwise.', 'is_opponent_detected': 'Condition: Check if an opponent is detected in the vicinity. Returns True if an opponent is detected, False otherwise.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'is_team_member_injured': 'Condition: Check if a team member is injured. Returns True if a team member is injured, False otherwise.', 'task_completed': 'Action: Signal task completion by stopping all movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Escort the injured team member back to base while avoiding opponents, change color to yellow while escorting, and change color to green once arrived'.Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_agent_alone</Condition><Action>change_color_to_green</Action></Sequence><Sequence><Condition>is_team_member_injured</Condition><Selector><Action>change_color_to_yellow</Action><Action>move_forward</Action></Selector></Sequence><Sequence><Condition>is_opponent_detected</Condition><Action>avoid_obstacle</Action></Sequence></Selector><Sequence><Condition>is_target_detected</Condition><Action>move_forward</Action><Action>change_color_to_green</Action><Action>task_completed</Action></Sequence></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'jump': 'Action: Jump over obstacles if possible. Always returns True.', 'move_forward': 'Action: Move forward until obstacle is reached. Always returns True.', 'move_backwards': 'Action: Move backwards until obstacle is reached. Always returns True.', 'turn_left': 'Action: Turn the robot 90 degrees to the left. Always returns True.', 'turn_right': 'Action: Turn the robot 90 degrees to the right. Always returns True.', 'wait': 'Action: Wait for a specified duration. Always returns True.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_at_intersection': 'Condition: Check if the robot is at an intersection. Returns True if at an intersection, False otherwise.', 'is_at_goal': 'Condition: Check if the robot is at the designated goal location. Returns True if at the goal location, False otherwise.', 'is_at_start': 'Condition: Check if the robot is at the starting location. Returns True if at the starting location, False otherwise.', 'is_team_member_injured': 'Condition: Check if a team member is injured. Returns True if a team member is injured, False otherwise.', 'task_completed': 'Action: Signal task completion by stopping all movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Navigate through an obstacle course, jump over obstacles and reach the designated goal location. Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_obstacle_detected</Condition><Selector><Action> 
###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.',  'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Complete a maze, avoid obstacles, form a line at the finish, and signal completion by changing color to green.'Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>is_path_clear</Condition> <Sequence> <Action>wander</Action> <Action>avoid_obstacle</Action> </Sequence> <Sequence> <Condition>is_target_reached</Condition> <Sequence> <Action>form_line</Action> <Action>change_color_to_green</Action> </Sequence> </Sequence> </Selector> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Collect resources, return to the nest, and signal task completion by changing color to green.'Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_target_detected</Condition><Sequence><Action>continue_movement_agent</Action><Action>change_color_to_green</Action></Sequence><Sequence><Condition>is_agent_in_nest</Condition><Action>task_completed</Action></Sequence><Action>wander</Action></Sequence></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Avoid obstacles, form a line at the edge of the environment, and change color to white.'Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>is_obstacle_detected</Condition> <Sequence> <Action>avoid_obstacle</Action> <Action>form_line</Action> </Sequence> </Sequence> <Sequence> <Condition>is_line_formed</Condition> <Action>change_color_to_white</Action> </Sequence> </Selector> </BehaviorTree>###

4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'navigate through a maze, avoid obstacles, and reach the end'. Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree><Sequence><Selector><Condition>is_obstacle_detected</Condition><Action>avoid_obstacle</Action></Selector><Selector><Condition>is_path_clear</Condition><Action>continue_movement_agent</Action></Selector><Action>task_completed</Action></Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'collect resources, avoid obstacles, and return to base'. Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_path_clear</Condition><Sequence><Selector><Condition>is_obstacle_detected</Condition><Action>avoid_obstacle</Action><Selector><Condition>is_target_detected</Condition><Action>collect_resource</Action><Condition>is_target_reached</Condition></Selector></Sequence><Selector><Condition>is_agent_in_nest</Condition><Action>task_completed</Action></Selector></Sequence><Selector><Condition>is_target_detected</Condition><Action>continue_movement_agent</Action></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'monitor weather conditions, adjust movement speed and direction accordingly, and collect data'. Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_weather_condition_detected</Condition><Action>adjust_movement_speed</Action><Selector><Sequence><Condition>is_path_clear</Condition><Action>continue_movement_agent</Action><Action>collect_data</Action></Sequence><Selector><Action>wander</Action><Sequence><Condition>is_agent_in_nest</Condition><Action>task_completed</Action></Sequence></
###
4.// INSTRUCTIONS: Use only the following behaviors {'move_forward': 'Action: Move one step forward while avoiding obstacles.', 'rotate_right': 'Action: Rotate 90 degrees to the right.', 'rotate_left': 'Action: Rotate 90 degrees to the left.', 'is_obstacle_detected': 'Condition: Check for any obstacles ahead.', 'is_at_target': 'Condition: Check if the target destination has been reached.', 'dodge_obstacle': 'Action: Implement a dodging maneuver to avoid detected obstacle.', 'random_movement': 'Action: Move in a random direction.', 'return_to_start': 'Action: Return to the starting position.', 'is_at_center': 'Condition: Check if the robot has reached the center.', 'is_at_start': 'Condition: Check if the robot has returned to the starting position.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Navigate through narrow obstacles, reach the center, and return back to the starting position.'Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Selector><Sequence><Condition>is_obstacle_detected</Condition><Action>dodge_obstacle</Action></Sequence><Action>move_forward</Action></Selector><Action>rotate_left</Action></Selector><Sequence><Condition>is_at_center</Condition><Action>return_to_start</Action></Sequence><Sequence><Condition>is_at_start</Condition><Action>random_movement</Action></Sequence></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'move_forward': 'Action: Move one step forward while maintaining formation.', 'move_backward': 'Action: Move one step backward while maintaining formation.', 'turn_left': 'Action: Turn 90 degrees to the left while maintaining formation.', 'turn_right': 'Action: Turn 90 degrees to the right while maintaining formation.', 'is_at_destination': 'Condition: Check if the robot has reached the designated destination.', 'is_obstacle_ahead': 'Condition: Check if there is an obstacle blocking the path ahead for the formation.', 'is_at_start': 'Condition: Check if the robot has returned to the starting position.', 'is_formation_broken': 'Condition: Check if the formation has become misaligned or broken.', 'reform_formation': 'Action: Reform the formation to its original shape and spacing.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Navigate through a maze, maintaining formation and returning to the starting position if needed.'Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Selector><Sequence><Condition>is_obstacle_ahead</Condition><Action>reform_formation</Action></Sequence><Action>move_forward</Action></Selector><Action>turn_right</Action></Sequence><Sequence><Condition>is_formation_broken</Condition><Action>reform_formation</Action></Sequence><Action>move_backward</Action></Selector><Sequence><Condition>is_at_destination</Condition><Action>reform_formation</Action></Sequence><Sequence><Condition>is_at_start</Condition><Action>reform_formation</Action></Sequence></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'move_forward': 'Action: Move one step forward while avoiding obstacles.', 'change_color_to_blue': "Action: Change robot's color to blue.", 'change_color_to_red': "Action: Change robot's color to red.", 'is_puck_detected': 'Condition: Check if a puck is detected within 10 units of distance.', 'pick_up_puck': 'Action: Pick up a detected puck within 5 units of distance.', 'turn_to_goal': 'Action: Turn towards the goal location.', 'move_to_goal': 'Action: Move towards the goal location.', 'release_puck': 'Action: Release the currently held puck.', 'is_at_goal': 'Condition: Check if the robot has reached the goal location.', 'is_puck_held': 'Condition: Check if the robot is currently holding a puck.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Collect all pucks and deliver them to the goal location while avoiding obstacles.'Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Selector><Sequence><Condition>is_puck_held</Condition><Action>release_puck</Action></Sequence><Action>move_forward</Action></Selector><Selector><Sequence><Condition>is_puck_detected</Condition><Action>pick_up_puck</Action></Sequence><Action>turn_to_goal</Action></Selector></Sequence><Sequence><Condition>is_at_goal</Condition><Action>change_color_to_red</Action></Sequence><Sequence><Condition>is_puck_held</Condition><Action>release_puck</Action></Sequence><Action>change_color_to_blue</Action></Selector></BehaviorTree> 
###
4.// INSTRUCTIONS: Use only the following behaviors {'detect_teammates': 'Condition: Check for nearby teammates. Returns True if there are teammates within a certain distance, False otherwise.', 'communicate_with_teammates': 'Action: Send a message or signal to nearby teammates.', 'navigate_to_object': 'Action: Move towards a specified target object.', 'gather_resource': 'Action: Gather and collect the specified resource.', 'drop_resource': 'Action: Drop the collected resource at a designated location.', 'build_structure': 'Action: Build a desired structure with the gathered resources.', 'is_resource_nearby': 'Condition: Check for nearby resources. Returns True if resources are within a certain distance, False otherwise.', 'is_obstacle_present': 'Condition: Check for obstacles in the path ahead. Returns True if an obstacle is detected, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Collect resources and use them to build a structure while avoiding obstacles and communicating with teammates throughout the process.'. Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_obstacle_present</Condition><Action>navigate_around_obstacle</Action></Sequence><Sequence><Condition>is_resource_nearby</Condition><Action>gather_resource</Action></Sequence><Selector><Sequence><Condition>is_resource_collected</Condition><Action>drop_resource</Action></Sequence><Sequence><Condition>is_teammate_nearby</Condition><Action>communicate_with_teammates</Action></Sequence></Selector><Sequence><Condition>is_structure_built</Condition><Action>task_completed</Action></Sequence><Selector><Sequence><Condition>is_resource_available</Condition><Action>navigate_to_object</Action></Sequence><Sequence><Condition>is_resource_collected</Condition><Action>build_structure</Action></Sequence></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'detect_food_source': 'Condition: Check for nearby food sources. Returns True if a food source is within a certain distance, False otherwise.', 'collect_food': 'Action: Collect and transport the collected food source to a designated location.', 'share_food': 'Action: Share the collected food with nearby robots.', 'find_new_food_source': 'Action: Explore and find a new food source.', 'avoid_predators': 'Action: Avoid any potential predators in the environment.', 'move_to_nest': 'Action: Navigate back to the designated nest location.', 'is_food_available': 'Condition: Check if there is food available in the environment. Returns True if there is food present, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Forage for food, share with nearby robots, and avoid potential predators while returning to nest once food is depleted.'. Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_predator_nearby</Condition><Action>avoid_predators</Action></Sequence><Sequence><Condition>is_food_available</Condition><Action>collect_food</Action></Sequence><Selector><Sequence><Condition>is_food_source_depleted</Condition><Action>find_new_food_source</Action></Sequence><Sequence><Condition>is_robot_nearby</Condition><Action>share_food</Action></Sequence></Selector><Action>move_to_nest</Action></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'follow_line': 'Action: Follow a predefined line path.', 'detect_obstacles': 'Condition: Check for obstacles in the environment. Returns True if an obstacle is detected, False otherwise.', 'obstacle_avoidance': 'Action: Use obstacle avoidance algorithm to navigate around obstacles.', 'find_waypoint': 'Action: Continue searching for a waypoint if the current one is unreachable.', 'reorient_to_target': 'Action: Reorient the robot towards the target location.', 'reach_target': 'Action: Move towards the specified target location.', 'is_target_reached': 'Condition: Check if the target location has been reached. Returns True if the target has been reached, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Navigate through a maze while following a specific line path, avoiding obstacles, and reaching the target location at the end.'. Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_obstacle_present</Condition><Action>obstacle_avoidance</Action></Sequence><Sequence><Condition>is_waypoint_unreachable</Condition><Action>find_waypoint</Action></Sequence><Selector><Sequence><Condition>is_target_reached</Condition><Action>task_completed</Action></Sequence><Sequence><Condition>is_robot_aligned</Condition><Action>reorient_to_target</Action></Sequence></Selector><Sequence><Condition>is_line_present</Condition><Action>follow_line</Action></Sequence><Selector><Sequence><Condition>is_obstacle_detected</Condition><Action>detour_around_obstacle</Action></Sequence><Sequence><Condition>is_target_detected</Condition><Action>reach_target</Action></Sequence></Selector></BehaviorTree>###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'return_to_last_position': 'Action: Return to the previous position. Always returns True.', 'is_target_detected': 'Condition: Check if a target is detected within 10 units. Returns True if the target is detected within 10 units of distance, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Navigate the environment, form a line, return to the last position, and signal task completion if a target is detected within 10 units.' Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree><Sequence><Action>continue_movement_agent</Action><Selector><Sequence><Condition>is_target_detected</Condition><Sequence><Action>form_line</Action><Action>task_completed</Action></Sequence></Sequence><Sequence><Action>return_to_last_position</Action><Action>task_completed</Action></Sequence></Selector></Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'move_forward': "Action: Move the robot forward 1 unit. Always returns True.", 'move_backward': "Action: Move the robot backward 1 unit. Always returns True.", 'turn_left': "Action: Turn the robot left 90 degrees. Always returns True.", 'turn_right': "Action: Turn the robot right 90 degrees. Always returns True.", 'wait': "Action: Wait for 5 seconds. Always returns True.", 'drop_object': "Action: Drop the object the robot is currently holding. Always returns True.", 'pick_up_object': "Action: Pick up an object within 10 units of distance from the robot. Returns True if object is successfully picked up, False otherwise.", 'is_at_target': "Condition: Check if the robot is at the target destination. Returns True if the robot is at the target destination, False otherwise.", 'is_object_held': "Condition: Check if the robot is currently holding an object. Returns True if the robot is holding an object, False otherwise.", 'is_object_in_range': "Condition: Check if there is an object within 5 units of distance. Returns True if an object is within 5 units of distance, False otherwise."}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Pick up an object, move forward 2 units, turn right, wait for 5 seconds, drop the object, then return to the starting position.' Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_object_in_range</Condition><Action>pick_up_object</Action><Action>move_forward</Action><Action>move_forward</Action><Action>turn_right</Action><Action>wait</Action><Action>drop_object</Action><Action>turn_right</Action><Action>turn_right</Action></Sequence><Sequence><Condition>is_at_target</Condition><Action>task_completed</Action></Sequence></Selector></BehaviorTree>
 
###
4.// INSTRUCTIONS: Use only the following behaviors {'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_orange': "Action: Change agent's color to orange. Always returns True.", 'move_forward': 'Action: Move the robot one step forward in the current direction. Always returns True.', 'turn_left': 'Action: Turn the robot 90 degrees to the left. Always returns True.', 'turn_right': 'Action: Turn the robot 90 degrees to the right. Always returns True.', 'is_at_dropoff': 'Condition: Check if the robot is at the designated drop-off location. Returns True if at the drop-off location, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Collect resources from designated points, form a line at the center, then deposit resources at the drop-off location'. Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_path_clear</Condition><Action>move_forward</Action><Action>change_color_to_orange</Action></Sequence><Selector><Sequence><Condition>is_target_detected</Condition><Sequence><Condition>is_at_dropoff</Condition><Action>change_color_to_green</Action></Sequence></Selector><Sequence><Condition>is_line_formed</Condition><Sequence><Condition>is_target_reached</Condition><Action>task_completed</Action></Sequence></Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'move_forward': 'Action: Move the robot one step forward in the current direction. Always returns True.', 'turn_left': 'Action: Turn the robot 90 degrees to the left. Always returns True.', 'turn_right': 'Action: Turn the robot 90 degrees to the right. Always returns True.', 'is_at_dropoff': 'Condition: Check if the robot is at the designated drop-off location. Returns True if at the drop-off location, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_blocked': 'Condition: Check if the path in the current direction is blocked or impassable. True if the path is blocked, False otherwise.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Search for a target object in the environment while avoiding obstacles and blocked paths' Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_path_clear</Condition><Action>move_forward</Action></Sequence><Sequence><Condition>is_obstacle_detected</Condition><Action>avoid_obstacle</Action></Sequence><Sequence><Condition>is_path_blocked</Condition><Selector><Sequence><Condition>is_line_formed</Condition><Action>turn_right</Action></Sequence><Sequence><Condition>is_target_detected</Condition><Sequence><Action>move_forward</Action><Condition>is_path_blocked</Condition><Action>turn_left</Action></Sequence></Selector></Sequence><Action>task_completed</Action></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'change_color_to_red': "Action: Change agent's color to red. Always returns True.", 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'move_forward': 'Action: Move the robot one step forward in the current direction. Always returns True.', 'turn_left': 'Action: Turn the robot 90 degrees to the left. Always returns True.', 'turn_right': 'Action: Turn the robot 90 degrees to the right. Always returns True.', 'update_map': "Action: Update the robot's internal map of the environment based on its current location and sensor readings. Always returns True.", 'is_at_dropoff': 'Condition: Check if the robot is at the designated drop-off location. Returns True if at the drop-off location, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_blocked': 'Condition: Check if the path in the current direction is blocked or impassable. True if the path is blocked, False otherwise.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Search for a target object, return to base and update map with new information, then change color to red to signal success' Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_path_clear</Condition><Action>move_forward</Action></Sequence><Sequence><Condition>is_obstacle_detected
###
4.// INSTRUCTIONS: Use only the following behaviors {'move_to_target': 'Action: Move towards the designated target location. Returns True when the target is reached.', 'detect_nearby_target': 'Condition: Check for nearby targets within a specified distance. Returns True if a target is detected within the designated distance, False otherwise.', 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'wait': 'Action: Pause and wait for a specified period of time. Always returns True.', 'collect_resource': 'Action: Pick up and collect a nearby resource. Returns True when the resource is successfully collected.', 'deposit_resource': 'Action: Deposit the collected resource at the designated location. Returns True when the resource is successfully deposited.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Generate a behavior tree for a swarm of robots to collect and deposit resources while navigating obstacles and avoiding unnecessary wait times.
4.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>detect_nearby_target</Condition> <Action>move_to_target</Action> </Sequence> <Sequence> <Condition>collect_resource</Condition> <Action>move_to_base</Action> </Sequence> </Selector> <Sequence> <Condition>is_obstacle_detected</Condition> <Action>avoid_obstacle</Action> </Sequence> <Sequence> <Condition>wait_needed</Condition> <Action>wait</Action> </Sequence> <Action>deposit_resource</Action> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'go_to_base': 'Action: Move towards the designated base or home location. Returns True when the base is reached.', 'gather_resource': 'Action: Search for and gather a nearby resource. Returns True when the resource is successfully gathered.', 'is_base_reached': 'Condition: Check if the base or home location has been reached. Returns True when the base is reached, False otherwise.', 'is_resource_available': 'Condition: Check if there is a nearby resource available. Returns True if a resource is detected, False otherwise.', 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'deposit_resource': 'Action: Deposit the collected resource at the designated location. Returns True when the resource is successfully deposited.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Generate a behavior tree for a swarm of robots to gather resources and return them to a designated base location, while avoiding obstacles and optimizing resource collection.
5.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>is_resource_available</Condition> <Action>gather_resource</Action> </Sequence> <Action>go_to_base</Action> </Selector> <Sequence> <Condition>is_base_reached</Condition> <Action>deposit_resource</Action> </Sequence> <Sequence> <Condition>is_obstacle_detected</Condition> <Action>avoid_obstacle</Action> </Sequence> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'detect_enemy': 'Condition: Check for any nearby enemies. Returns True if an enemy is detected, False otherwise.', 'move_to_hiding_spot': 'Action: Move to a designated hiding spot or location. Returns True when the hiding spot is reached.', 'shoot_enemy': 'Action: Shoot at the detected enemy. Returns True when the enemy is successfully shot.', 'wait': 'Action: Pause and wait for a specified period of time. Always returns True.', 'notify_teammates': 'Action: Send a signal to notify teammates of the enemy's location. Always returns True.', 'move_to_safety': 'Action: Move to a designated safe location. Returns True when the safe location is reached.', 'is_enemy_shot': 'Condition: Check if the enemy has been shot. Returns True if the enemy has been successfully shot, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Generate a behavior tree for a swarm of robots to detect and eliminate enemies, while coordinating with teammates and seeking safety when necessary.
6.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>detect_enemy</Condition> <Action>shoot_enemy</Action> </Sequence> <Sequence> <Condition>is_enemy_shot</Condition> <Action>notify_teammates</Action> </Sequence> </Selector> <Sequence> <Condition>is_enemy_detected</Condition> <Action>move_to_hiding_spot</Action> </Sequence> <Sequence> <Condition>is_teammate_notified</Condition> <Action>wait</Action> <Action>move_to_safety</Action> </Sequence> </BehaviorTree>###
4.// INSTRUCTIONS: Use only the following behaviors {'move_through_door': 'Action: Move through the designated door. Always returns True.', 'open_door': 'Action: Open the designated door. Always returns True.', 'search_for_key': 'Action: Search for the designated key. Always returns True.', 'get_key': 'Action: Retrieve the designated key. Always returns True.', 'is_door_open': 'Condition: Check if the designated door is open. Returns True if door is open, False otherwise.', 'is_key_needed': 'Condition: Check if the designated key is needed. Returns True if key is needed, False otherwise.', 'is_key_found': 'Condition: Check if the designated key has been found. Returns True if key is found, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Navigate through a maze, searching for a key and using it to open a door' Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>is_key_needed</Condition><Selector><Sequence><Condition>is_key_found</Condition><Action>get_key</Action></Sequence><Sequence><Condition>is_target_detected</Condition><Action>wander</Action></Sequence></Selector><Sequence><Condition>is_door_open</Condition><Action>open_door</Action></Sequence></Sequence><Selector><Sequence><Condition>is_obstacle_detected</Condition><Action>move_through_door</Action></Sequence><Sequence><Condition>is_target_reached</Condition><Action>wander</Action></Sequence></Selector></Sequence><Sequence><Condition>is_target_detected</Condition><Selector><Sequence><Condition>is_obstacle_detected</Condition><Action>avoid_obstacle</Action></Sequence><Action>wander</Action></Selector></Sequence></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'attack_target': "Action: Attack the target. Always returns True.", 'detect_enemy': 'Condition: Check for enemies nearby. Returns True if an enemy is detected, False otherwise.', 'fire_weapon': 'Action: Fire the weapon at the designated target. Always returns True.', 'is_enemy_alive': 'Condition: Check if the designated enemy is still alive. Returns True if enemy is alive, False otherwise.', 'move_towards_enemy': 'Action: Move towards the designated enemy. Always returns True.', 'search_for_targets': 'Action: Search for nearby targets. Always returns True.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Attack nearby enemies and continue until all are eliminated' Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree><Sequence><Condition>detect_enemy</Condition><Sequence><Condition>is_target_detected</Condition><Selector><Sequence><Condition>is_enemy_alive</Condition><Action>attack_target</Action></Sequence><Sequence><Condition>detect_enemy</Condition><Sequence><Condition>is_target_detected</Condition><Action>move_towards_enemy</Action></Sequence></Sequence></Selector></Sequence><Action>fire_weapon</Action><Action>search_for_targets</Action></Sequence></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'navigate_to_waypoint': 'Action: Move towards the designated waypoint. Always returns True.', 'drop_resource': 'Action: Drop the designated resource at the target location. Always returns True.', 'pick_resource': 'Action: Pick up the designated resource from the current location. Always returns True.', 'is_resource_needed': 'Condition: Check if the designated resource is needed. Returns True if resource is needed, False otherwise.', 'is_resource_available': 'Condition: Check if the designated resource is available. Returns True if resource is available, False otherwise.', 'is_at_target': 'Condition: Check if the robot is at the target location. Returns True if at the target location, False otherwise.', 'is_at_resource': 'Condition: Check if the robot is at the location of the designated resource. Returns True if at the resource location, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Gather necessary resources and bring them to the target location' Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_resource_needed</Condition><Selector><Sequence><Condition>is_resource_available</Condition><Action>pick_resource</Action></Sequence><Sequence><Condition>is_target_detected</Condition><Action>wander</Action></Sequence></Selector><Sequence><Condition>is_at_resource</Condition><Action>drop_resource</Action></Sequence></Sequence><Sequence><Condition>is_obstacle_detected</Condition><Action>navigate_to_waypoint</Action></Sequence></Selector></BehaviorTree>

###