###

4.// INSTRUCTIONS: Use only the following behaviors {'scan_task_area': 'Action: Scan the designated search area for any anomalies. Always returns True.', 'move_to_next_task': 'Action: Move to the next designated task location. Always returns True.', 'preform_task': 'Action: Preform the designated task at the current location. Returns True if the task is successfully completed, False otherwise.', 'is_task_completed': 'Condition: Check if the designated task has been completed. Returns True if the task is completed, False otherwise.', 'is_abnormality_detected': 'Condition: Check for any abnormalities in the designated search area. Returns True if an abnormality is detected, False otherwise.', 'is_all_tasks_completed': 'Condition: Check if all designated tasks have been completed. Returns True if all tasks are completed, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Generate a behavior tree for a swarm of robots to carry out a series of tasks in a designated search area, while detecting and addressing any abnormalities.
4.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_all_tasks_completed</Condition><Action>return_to_base</Action></Sequence><Selector><Sequence><Condition>is_task_completed</Condition><Action>move_to_next_task</Action><Action>perform_task</Action></Sequence><Action>scan_task_area</Action><Sequence><Condition>is_abnormality_detected</Condition><Action>address_abnormality</Action></Sequence></Selector> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'analyze_surroundings': 'Action: Use sensors to analyze the robot surroundings. Returns True if the analysis is successful, False otherwise.', 'calculate_optimal_path': 'Action: Calculate the shortest and safest path to a given destination. Returns True if the calculation is successful, False otherwise.', 'follow_path': 'Action: Follow the calculated path to the destination. Returns True if the path is successfully followed, False otherwise.', 'is_obstacle_in_path': 'Condition: Check if there is an obstacle in the calculated path. Returns True if an obstacle is detected, False otherwise.', 'is_moving_toward_obstacle': 'Condition: Check if the robot is currently moving towards an obstacle. Returns True if moving towards an obstacle, False otherwise.', 'is_reached_destination': 'Condition: Check if the robot has reached the designated destination. Returns True if the destination is reached, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say ('Sorry, I can't do the task')
5.// USER COMMAND: Generate behavior tree for a robot to navigate through a maze to reach a designated destination.
5.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_reached_destination</Condition><Action>end_navigation</Action></Sequence><Selector><Sequence><Condition>is_obstacle_in_path</Condition><Action>avoid_obstacle</Action><Action>calculate_optimal_path</Action><Action>follow_path</Action></Sequence><Action>analyze_surroundings</Action></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'request_data': 'Action: Send a request for data from other robots in the swarm. Returns True if the request is successfully sent, False otherwise.', 'send_data': 'Action: Send collected data to the designated receiver. Returns True if the data is successfully sent, False otherwise.', 'is_data_available': 'Condition: Check if there is any new data available from other robots in the swarm. Returns True if data is available, False otherwise.', 'is_data_sent': 'Condition: Check if the collected data has been successfully sent to the designated receiver. Returns True if the data is successfully sent, False otherwise.', 'is_data_collected': 'Condition: Check if the robot has successfully collected the designated data. Returns True if the data is collected, False otherwise.', 'collect_data': 'Action: Collect designated data from the robot surroundings. Returns True if the data is successfully collected, False otherwise.', 'analyze_data': 'Action: Analyze the collected data to make informed decisions. Returns True if the analysis is successful, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say ('Sorry, I can't do the task')
6.// USER COMMAND: Generate behavior tree for a robot to collect, analyze, and share data within a swarm of robots.
6.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_data_sent</Condition><Action>end_data_transfer</Action></Sequence><Selector><Sequence><Condition>is_data_available</Condition><Action>collect_data</Action><Action>analyze_data</Action><Selector><Sequence><Condition>is_data_collected</Condition><Action>send_data</Action></Sequence><Action>request_data</Action></Selector></Sequence></Selector></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'detect_intruder': 'Action: Use sensors to detect any potential intruders. Returns True if an intruder is detected, False otherwise.', 'engage_intruder': 'Action: Confront and engage any detected intruder. Returns True if the intruder is successfully engaged, False otherwise.', 'is_target_immobilized': 'Condition: Check if the targeted intruder is immobilized. Returns True if the intruder is immobilized, False otherwise.', 'is_intruder_detected': 'Condition: Check if an intruder has been detected. Returns True if an intruder is detected, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say('Sorry, I can't do the task')
7.// USER COMMAND: Generate behavior tree for a swarm of robots to detect, engage, and immobilize any intruders within their designated area.
7.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_target_immobilized</Condition><Action>end_confrontation</Action></Sequence><Selector><Sequence><Condition>is_intruder_detected</Condition><Selector><Sequence><Condition>is_target_detected</Condition><Action>engage_intruder</Action></Sequence><Action>detect_intruder</Action></Selector></Sequence></Selector></BehaviorTree> 
###
4.// INSTRUCTIONS: Use only the following behaviors {'explore_area': 'Subtree node: Represents a behavior tree for exploring and mapping an unknown area.', 'detect_obstacles': 'Action: Use sensors to detect obstacles in the environment. Always returns True.', 'avoid_obstacles': 'Action: Move the robot away from the detected obstacle. Always returns True.', 'is_area_explored': 'Condition: Checks if the current area has already been explored and mapped. Returns True if area is explored, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Explore and map an unknown environment while avoiding obstacles.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_area_explored</Condition></Sequence><Sequence><Action>detect_obstacles</Action><Action>avoid_obstacles</Action></Sequence><Action>explore_area</Action></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'move_to_target': 'Subtree node: Represents a behavior tree for navigating to a specific target location.', 'detect_obstacles': 'Action: Use sensors to detect obstacles in the environment. Always returns True.', 'avoid_obstacles': 'Action: Move the robot away from the detected obstacle. Always returns True.', 'pickup_item': 'Action: Pick up an item at the current location. Always returns True.', 'is_item_here': 'Condition: Checks if there is an item at the current location. Returns True if item is present, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Navigate to and pick up an item while avoiding obstacles.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_item_here</Condition><Action>pickup_item</Action></Sequence><Sequence><Action>detect_obstacles</Action><Action>avoid_obstacles</Action></Sequence><Action>move_to_target</Action></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'follow_path': 'Subtree node: Represents a behavior tree for following a set path.', 'detect_obstacles': 'Action: Use sensors to detect obstacles in the environment. Always returns True.', 'avoid_obstacles': 'Action: Move the robot away from the detected obstacle. Always returns True.', 'calculate_distance': 'Action: Calculate the distance between the current location and a target location. Always returns True.', 'is_nearby_object': 'Condition: Checks if there is an object within a certain distance from the robot. Returns True if object is nearby, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Follow a designated path while avoiding obstacles and stopping near any nearby objects.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_nearby_object</Condition><Selector><Sequence><Action>detect_obstacles</Action><Action>avoid_obstacles</Action></Sequence><Action>calculate_distance</Action></Selector></Sequence><Subtree>follow_path</Subtree></Selector></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'navigate_to_coordinates': 'Subtree node: Represents a behavior tree for navigating to specific coordinates.', 'detect_obstacles': 'Action: Use sensors to detect obstacles in the environment. Always returns True.', 'avoid_obstacles': 'Action: Move the robot away from the detected obstacle. Always returns True.', 'pickup_item': 'Action: Pick up an item at the current location. Always returns True.', 'is_item_here': 'Condition: Checks if there is an item at the current location. Returns True if item is present, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: Navigate to designated coordinates while avoiding obstacles and picking up any items along the way.
7.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_item_here</Condition><Action>pickup_item</Action></Sequence><Sequence><Action>detect_obstacles</Action><Action>avoid_obstacles</Action></Sequence><Subtree>navigate_to_coordinates</Subtree></Selector></BehaviorTree> 
###
4.// INSTRUCTIONS: Use only the following behaviors {'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task4.// USER COMMAND: generate behavior tree to 'Complete an obstacle course'Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>is_agent_in_nest</Condition> <Action>continue_movement_agent</Action> </Sequence> <Sequence> <Condition>is_path_clear</Condition><Action>wander</Action></Sequence> <Sequence> <Condition>is_obstacle_detected</Condition> <Action>avoid_obstacle</Action> </Sequence> <Action>task_completed</Action> </Selector> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Complete a maze by following a specific color path'Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree> <Sequence> <Condition>is_agent_in_nest</Condition> <Action>continue_movement_agent</Action> </Sequence> <Selector> <Sequence> <Condition>is_target_detected</Condition> <Action>rotate_agent_to_target</Action> </Sequence> <Action>wander</Action> </Selector> <Sequence> <Condition>is_path_clear</Condition> <Selector> <Sequence> <Condition>detect_color</Condition> <Action>follow_color_path</Action> </Sequence> <Action>form_line</Action> </Selector> </Sequence> <Selector> <Sequence> <Condition>is_obstacle_detected</Condition> <Action>avoid_obstacle</Action> </Sequence> <Action>wander</Action> </Selector> <Action>task_completed</Action> </BehaviorTree> 

###
6.// INSTRUCTIONS: Use only the following behaviors {'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Gather resources by following a designated path and return to base'Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_agent_in_nest</Condition><Action>continue_movement_agent</Action></Sequence><Selector><Sequence><Condition>is_target_detected</Condition><Action>rotate_agent_to_target</Action></Sequence><Action>wander</Action></Selector><Sequence><Condition>is_path_clear</Condition><Selector><Sequence><Condition>detect_resource</Condition><Action>follow_path_to_resource</Action></Sequence><Sequence><Condition>is_agent_full</Condition><Action>form_line</Action></Sequence></Selector></Sequence><Selector><Sequence><Condition>is_obstacle_detected</Condition><Action>avoid_obstacle</Action></Sequence><Action>wander</Action></Selector><Action>task_completed</Action></Selector></BehaviorTree>

###
 
###
3.// INSTRUCTIONS: Use only the following behaviors {'explore_area': 'Action: Moves the robot around to survey the area. Always returns True.', 'identify_targets': 'Action: Uses sensors to detect any targets in the surrounding environment. Always returns True.', 'track_targets': 'Action: Uses sensors to track the movement of a target. Always returns True.', 'avoid_obstacles': 'Action: Uses sensors to detect and avoid any obstacles in the path. Always returns True.', 'recharge_battery': 'Action: Uses a charging station to recharge the robot's battery. Always returns True.', 'is_target_detected': 'Condition: Checks if a target has been detected in the vicinity. Returns True if a target is detected, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3.// USER COMMAND: Use a swarm of robots to explore an unknown area and track any detected targets while avoiding obstacles and periodically recharging batteries.
3.// OUTPUT:
<BehaviorTree><Sequence><Action>explore_area</Action><Selector><Sequence><Condition>is_target_detected</Condition><Selector><Sequence><Action>identify_targets</Action><Action>track_targets</Action><Action>recharge_battery</Action></Sequence></Selector></Sequence><Selector><Sequence><Action>avoid_obstacles</Action></Sequence></Selector></Sequence></BehaviorTree>

###
4.// INSTRUCTIONS: Use only the following behaviors {'random_movement': 'Action: Randomly moves the robot around. Always returns True.', 'detect_temperature': 'Action: Uses temperature sensors to detect the surrounding temperature. Always returns True.', 'move_to_hotspot': 'Action: Moves towards a hotspot with a higher temperature reading. Returns True if hotspot is reached, False otherwise.', 'detect_danger': 'Action: Uses sensors to detect potential sources of danger. Always returns True.', 'avoid_danger': 'Action: Uses evasive maneuvers to avoid potential danger. Always returns True.', 'is_hotspot_reached': 'Condition: Checks if the robot has successfully reached the hotspot. Returns True if the hotspot is reached, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Traverse through a hazardous environment to locate and reach a potential source of heat.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Selector><Sequence><Condition>is_hotspot_reached</Condition></Sequence><Action>move_to_hotspot</Action></Sequence><Action>detect_temperature</Action></Selector><Selector><Sequence><Action>random_movement</Action></Sequence><Selector><Sequence><Action>detect_danger</Action><Action>avoid_danger</Action></Sequence></Selector></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'follow_leader': 'Action: Follows the movement and instructions of the designated leader robot. Always returns True.', 'identify_object': 'Action: Uses sensors to detect and identify an object in the environment. Always returns True.', 'pick_up_object': 'Action: Once the object is identified, the robot moves towards it and picks it up. Returns True if the object is picked up, False otherwise.', 'deliver_to_base': 'Action: Once the object is picked up, the robot follows the leader to deliver it to the designated base. Returns True if the object is successfully delivered, False otherwise.', 'is_object_identified': 'Condition: Checks if an object has been identified in the environment. Returns True if an object is detected, False otherwise.', 'is_delivery_complete': 'Condition: Checks if the object has been successfully delivered to the base. Returns True if the object is delivered, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Work as a team to follow a leader robot, locate and pick up a designated object, and deliver it to a specific base location.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>follow_leader</Action><Selector><Sequence><Condition>is_object_identified</Condition><Selector><Sequence><Action>identify_object</Action><Action>pick_up_object</Action></Sequence></Selector></Sequence><Selector><Sequence><Condition>is_delivery_complete</Condition><Action>deliver_to_base</Action></Sequence></Selector></Sequence></Selector></BehaviorTree>
 
###
6.// INSTRUCTIONS: Use only the following behaviors {'explore_area': 'Action: Moves the robot around to survey the area. Always returns True.', 'gather_resources': 'Action: Uses sensors to identify and gather any available resources in the environment. Returns True if the resource is successfully gathered, False otherwise.', 'return_to_base': 'Action: Once the resources are gathered, the robot follows the designated path back to the base. Returns True if the robot successfully returns, False otherwise.', 'detect_obstacles': 'Action: Uses sensors to detect any obstacles in the environment. Always returns True.', 'avoid_obstacles': 'Action: Uses evasive maneuvers to avoid obstacles. Always returns True.', 'is_resource_available': 'Condition: Checks if any available resources are detected in the environment. Returns True if a resource is detected, False otherwise.', 'is_base_reached': 'Condition: Checks if the robot has successfully reached the base. Returns True if the base is reached, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Use a swarm of robots to explore, gather resources, and return them to a designated base while avoiding obstacles in the environment.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>explore_area</Action><Selector><Sequence><Condition>is_resource_available</Condition><Selector><Sequence><Action>gather_resources</Action><Action>return_to_base</Action></Sequence></Selector></Sequence><Selector><Sequence><Condition>is_base_reached</Condition><Action>gather_resources</Action><Action>return_to_base</Action></Sequence></Selector></Sequence></Sequence><Selector><Sequence><Action>detect_obstacles</Action><Action>avoid_obstacles</Action></Sequence></Selector></BehaviorTree>
 
###
7.// INSTRUCTIONS: Use only the following behaviors {'detect_sound': 'Action: Uses sound sensors to detect any unusual noises in the environment. Always returns True.', 'investigate_source': 'Action: Once a sound is detected, the robot will move towards the source to investigate it further. Returns True if the source is successfully located, False otherwise.', 'navigate_through_maze': 'Subtree node: Represents a behavior tree for navigating through a maze.', 'safety_check': 'Action: Periodically checks the environment for any potential safety hazards. Always returns True.', 'avoid_hazard': 'Action: Takes evasive action to avoid potential safety hazards. Always returns True.', 'is_source_found': 'Condition: Checks if the source of the 
###
3.// INSTRUCTIONS: Use only the following behaviors {'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'follow_target': "Action: Follow the target's movement. Always returns True.", 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'is_target_lost': 'Condition: Check if the target is lost. Returns True if the target is no longer in sight, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3.// USER COMMAND: generate behavior tree to 'Follow the target, avoid obstacles, and stop when target is reached or lost.'Output only the XML behavior tree without extra text.
3.// OUTPUT:
 <BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>is_target_detected</Condition> <Action>follow_target</Action> </Sequence> <Action>avoid_obstacle</Action> </Selector> <Selector> <Condition>is_target_reached</Condition> <Action>task_completed</Action> </Selector> <Selector> <Condition>is_target_lost</Condition> <Action>task_completed</Action> </Selector> </Sequence> </BehaviorTree>

###
4.// INSTRUCTIONS: Use only the following behaviors {'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_red': "Action: Change agent's color to red. Always returns True.", 'is_in_danger': 'Condition: Check if agent is in danger. Returns True if the agent is in a dangerous situation, False otherwise.', 'is_safely_crossed': 'Condition: Check if agent has safely crossed an area. Returns True if the agent has successfully crossed, False otherwise.', 'follow_path': "Action: Follow a specific path. Always returns True.", 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'obstacle_detected': 'Event: Triggered when an obstacle is detected. Returns True when an obstacle is detected, False otherwise.', 'task_completed': 'Action: Signal task completion by changing color to red. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Follow a path, avoid obstacles, and change color to red when safely crossed a dangerous area.' Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>is_in_danger</Condition> <Action>change_color_to_red</Action> </Sequence> <Sequence> <Action>follow_path</Action> <Condition>is_path_clear</Condition> </Sequence> <Sequence> <Event>obstacle_detected</Event> <Action>wander</Action> </Sequence> <Selector> <Condition>is_safely_crossed</Condition> <Action>change_color_to_red</Action> </Selector> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_yellow': "Action: Change agent's color to yellow. Always returns True.", 'start_recording': 'Action: Start recording the agent's actions. Always returns True.', 'stop_recording': 'Action: Stop recording the agent's actions. Always returns True.', 'is_recording_active': 'Condition: Check if agent is currently being recorded. Returns True if agent is being recorded, False otherwise.', 'is_danger_detected': 'Condition: Check for danger in the environment. Returns True if danger is detected, False otherwise.', 'is_target_detected': 'Condition: Check if target is within sight. Returns True if the target is within sight, False otherwise.', 'is_target_lost': 'Condition: Check if the target is lost. Returns True if the target is no longer in sight, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by changing color to yellow. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Start recording, follow target, stop recording when target is lost or reached, and change color to yellow when target is reached.'Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Action>start_recording</Action> <Condition>is_target_detected</Condition> <Action>follow_target</Action> <Selector> <Condition>is_target_reached</Condition> <Action>stop_recording</Action> </Selector> <Selector> <Condition>is_target_lost</Condition> <Action>stop_recording</Action> </Selector> <Action>stop_recording</Action> </Sequence> <Action>change_color_to_yellow</Action> <Selector> <Condition>is_target_detected</Condition> <Action>wander</Action> </Selector> </Sequence> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'calculate_distance_to_target': 'Action: Calculate the distance between agent and target. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_red': "Action: Change agent's color to red. Always returns True.", 'form_circle': 'Action: Form a circle with the agent at the center. Always returns True.', 'is_distance_less_than_5': 'Condition: Check if the distance to target is less than 5 units. Returns True if distance is less than 5 units, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'move_to_target': 'Action: Move towards the target. Always returns True.', 'is_target_reached':  
###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_circle': 'Action: Form a circle with nearby agents. Always returns True.', 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'form_triangle': 'Action: Form an equilateral triangle with nearby agents. Always returns True.', 'is_at_target': 'Condition: Check if the agent is at the designated target location. Returns True if the agent is at the target, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_triangle_formed': 'Condition: Check if an equilateral triangle is formed. Returns True if the triangle is formed, False otherwise.', 'move_to_target': 'Action: Move towards the designated target location. Always returns True.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Explore the environment and form a triangle with nearby robots, then move to the target location and form a circle with other robots.'Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>is_path_clear</Condition> <Action>form_triangle</Action> <Action>move_to_target</Action> <Action>form_circle</Action> </Sequence> <Action>explore</Action> </Selector> <Sequence> <Condition>is_at_target</Condition> <Action>form_circle</Action> <Action>task_completed</Action> </Sequence> </Sequence> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_blue': "Action: Change agent's color to blue. Always returns True.", 'change_color_to_red': "Action: Change agent's color to red. Always returns True.", 'follow_path_left': 'Action: Follow a predetermined path to the left. Always returns True.', 'follow_path_right': 'Action: Follow a predetermined path to the right. Always returns True.', 'is_agent_nearby': 'Condition: Check if another agent is within a 10 unit radius. Returns True if another agent is nearby, False otherwise.', 'is_left_path_clear': 'Condition: Check if the left path is clear. Returns True if no obstacles are detected, False if obstacles are present.', 'is_right_path_clear': 'Condition: Check if the right path is clear. Returns True if no obstacles are detected, False if obstacles are present.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Survey the area and follow the path to the left when another agent is nearby, otherwise follow the path to the right, then change color to red.' Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>is_agent_nearby</Condition> <Sequence> <Condition>is_left_path_clear</Condition> <Action>follow_path_left</Action> <Action>change_color_to_red</Action> <Action>task_completed</Action> </Sequence> <Sequence> <Condition>is_right_path_clear</Condition> <Action>follow_path_right</Action> <Action>change_color_to_red</Action> <Action>task_completed</Action> </Sequence> </Sequence> <Action>survey_area</Action> </Selector> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'check_if_object_detected': 'Condition: Check if an object is detected by the robot's sensors. Returns True if an object is detected, False otherwise.', 'grab_object': 'Action: Grab the object if it is within reach. Always returns True.', 'move_forward': 'Action: Move the robot forward. Always returns True.', 'turn_left': 'Action: Turn the robot 90 degrees to the left. Always returns True.', 'turn_right': 'Action: Turn the robot 90 degrees to the right. Always returns True.', 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'drop_object': 'Action: Drop the grabbed object. Always returns True.', 'is_object_grabbed': 'Condition: Check if the object has been grabbed. Returns True if the object is grabbed, False otherwise.', 'is_object_dropped': 'Condition: Check if the object has been dropped. Returns True if the object is dropped, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Find a lost object, grab it if found, then drop it at the designated lost and found location.' Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree> <Sequence> <Condition>check_if_object_detected</Condition> <Sequence> <Condition>is_object_grabbed</Condition> <Action>move_to_lost_object</Action> <Sequence> <Condition>is_object_dropped</Condition> <Action>move_to_lost_and_found</Action> <Action>drop_object</Action> </Sequence> <Action>grab_object</Action> </Sequence> <Sequence> <Condition>is_object_grabbed</Condition> <Action>avoid_obstacle</Action> <Sequence> <Condition>is_object_dropped</Condition> <Action>move_forward</Action> <Action>turn_right</Action> </Sequence> <Action>avoid_obstacle</Action> </Sequence> </Sequence> </BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_blue': "Action: Change agent's color to blue. Always returns True.", 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.",	
###
4.// INSTRUCTIONS: Use only the following behaviors {'take_photo': 'Action: Take a photo with the robot's camera. Always returns True.', 'print_total_photos': 'Action: Print the total number of photos taken by the robot. Always returns True.', 'is_photo_limit_reached': 'Condition: Check if the photo limit has been reached. Returns True if the photo limit has been reached, False otherwise.', 'is_camera_available': 'Condition: Check if the camera is available. Returns True if the camera is available, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Take photos until the limit is reached and then print the total number of photos.
4.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_photo_limit_reached</Condition><Sequence><Selector><Condition>is_camera_available</Condition><Action>take_photo</Action></Selector><Action>print_total_photos</Action></Sequence></Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'form_square': 'Action: Form a square shape with the robots. Always returns True.', 'dance': 'Action: Perform a coordinated dance with the other robots. Always returns True.', 'rush_towards_target': 'Action: Move quickly towards a target location. Always returns True.', 'is_square_formed': 'Condition: Check if a square shape is formed by the robots. Returns True if a square is formed, False otherwise.', 'is_dance_completed': 'Condition: Check if the dance routine is completed. Returns True if the dance is completed, False otherwise.', 'is_target_reached': 'Condition: Check if the target location is reached. Returns True if the target location is reached, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Form a square with the robots, then rush towards a target location and perform a dance routine.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Selector><Condition>is_square_formed</Condition><Action>rush_towards_target</Action></Selector><Action>form_square</Action></Sequence><Selector><Condition>is_target_reached</Condition><Action>dance</Action></Selector></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'plant_seed': 'Action: Plant a seed at the current location. Always returns True.', 'water_plant': 'Action: Water the plant at the current location. Always returns True.', 'is_plant_dead': 'Condition: Check if the plant is dead. Returns True if the plant is dead, False otherwise.', 'is_rain_forecasted': 'Condition: Check if rain is forecasted. Returns True if rain is forecasted, False otherwise.', 'is_soil_moist': 'Condition: Check if the soil is moist. Returns True if the soil is moist, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: If the plant is dead, check if rain is forecasted. If so, water the plant. Otherwise, try planting a new seed.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_plant_dead</Condition><Selector><Condition>is_rain_forecasted</Condition><Action>water_plant</Action><Action>plant_seed</Action></Selector></Sequence></Selector></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'gather_resources': 'Action: Gather resources from the environment. Always returns True.', 'build_structure': 'Action: Build a structure using gathered resources. Always returns True.', 'is_resource_depleted': 'Condition: Check if resources are depleted. Returns True if resources are depleted, False otherwise.', 'is_structure_complete': 'Condition: Check if the structure is complete. Returns True if the structure is complete, False otherwise.', 'is_shelter_needed': 'Condition: Check if a shelter is needed. Returns True if a shelter is needed, False otherwise.', 'is_lack_of_resources': 'Condition: Check if there is a lack of resources. Returns True if there is a lack of resources, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: Gather resources and check if a shelter is needed. If so, build a shelter. Otherwise, gather resources until a structure is complete.
7.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_resource_depleted</Condition><Selector><Condition>is_shelter_needed</Condition><Action>gather_resources</Action><Action>build_structure</Action></Selector></Sequence><Selector><Condition>is_lack_of_resources</Condition><Action>gather_resources</Action></Selector></Selector></BehaviorTree> 
###
3.// INSTRUCTIONS: Use only the following behaviors {'follow_leader': 'Action: Follow the leader agent. Always returns True.', 'get_distance_leader': 'Function: Calculates the distance to the leader agent. Returns the distance in units.', 'get_distance_target': 'Function: Calculates the distance to the target. Returns the distance in units.', 'is_leader_visible': 'Condition: Check if the leader agent is visible. Returns True if the leader agent is within line of sight, False otherwise.', 'move_to_target': 'Action: Move towards the target. Always returns True.', 'signal_leader_arrival': 'Action: Signal to the leader agent that the swarm has arrived at the target. Always returns True.', 'wait': 'Action: Wait for the leader agent to give further instructions. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3.// USER COMMAND: generate behavior tree to 'Follow the leader, signal arrival at target, and wait for further instructions.'
3.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_leader_visible</Condition><Action>wait</Action></Sequence><Selector><Sequence><Action>follow_leader</Action><Condition>is_at_target</Condition><Action>signal_leader_arrival</Action></Sequence><Sequence><Condition>is_at_target</Condition><Action>wait</Action></Sequence></Selector></BehaviorTree>

###
4.// INSTRUCTIONS: Use only the following behaviors {'check_fuel_level': 'Function: Calculates the remaining fuel level. Returns the percentage of remaining fuel.', 'find_closest_fuel_station': 'Function: Finds the closest fuel station. Returns the coordinates of the closest fuel station.', 'refuel': 'Action: Move to the closest fuel station and refuel. Always returns True.', 'resume_path': 'Action: Continue following the previous path. Always returns True.', 'set_destination': 'Action: Set a new destination for the robot. Always returns True.', 'startup_check': 'Action: Checks if all systems are functioning properly on startup. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Check fuel levels, find closest fuel station, and refuel if necessary. If all systems are functioning properly on startup, continue following the previous path. Otherwise, set a new destination.'
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>check_fuel_level</Action><Condition>less_than_threshold</Condition><Action>find_closest_fuel_station</Action><Action>refuel</Action></Sequence><Sequence><Condition>startup_check</Condition><Action>resume_path</Action></Sequence><Action>set_destination</Action></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'attack_closest_enemy': 'Action: Attack closest enemy in sight. Always returns True.', 'check_enemy_count': 'Function: Counts the number of enemies within visual range. Returns the number of enemies.', 'get_distance_to_enemy': 'Function: Calculates the distance to the closest enemy. Returns the distance in units.', 'get_health_percentage': 'Function: Calculates the percentage of remaining health. Returns the percentage.', 'is_enemy_detected': 'Condition: Checks for any enemies within visual range. Returns True if an enemy is detected, False otherwise.', 'regroup': 'Action: Move towards the group's center position. Always returns True.', 'retreat': 'Action: Move away from the closest enemy. Always returns True.', 'scan_environment': 'Action: Look around and scan the environment for enemies. Always returns True.', 'standby': 'Action: Remain idle and wait for further instructions. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Scan the environment, check for enemies, attack closest enemy, and regroup if enemy count is greater than 3. If health drops below 50%, retreat and wait for further instructions.'
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>scan_environment</Action><Condition>is_enemy_detected</Condition><Selector><Sequence><Condition>greater_than_enemy_count</Condition><Action>attack_closest_enemy</Action><Action>regroup</Action></Sequence><Sequence><Condition>less_than_health_percentage</Condition><Action>retreat</Action><Action>standby</Action></Sequence></Selector></Sequence><Action>standby</Action></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'chase_target': 'Action: Chase the designated target. Always returns True.', 'find_best_target': 'Function: Finds the best target to chase. Returns the coordinates of the target.', 'get_distance_to_target': 'Function: Calculates the distance to the target. Returns the distance in units.', 'is_collision_detected': 'Condition: Checks if a collision is detected. Returns True if a collision is detected, False otherwise.', 'is_target_chased': 'Condition: Checks if the target has been chased. Returns True if the target has been chased successfully, False otherwise.', 'move_randomly': 'Action: Move randomly within the environment. Always returns True.', 'stop_chase': 'Action: Stop chasing the current target and search for a new target. Always returns True.', 'wait': 'Action: Wait for further instructions. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Chase the best target, but stop if a collision is detected. If the target is successfully chased, wait for further instructions.'
6.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_collision_detected</Condition><Action>stop_chase</Action><Action>wait</Action></Sequence><Selector><Sequence><Condition>is_target_chased</Condition><Action>wait</Action></Sequence><Sequence><Function>find_best_target</Function><Action>chase_target</Action></Sequence></Selector></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'carry_object': 'Action: Carry the designated object to a specified location. Returns True when the object has reached the destination.', 'get_distance_to_object': 'Function: Calculates the distance to the designated object. Returns the distance in units.', 'is_carried_object_nearby': 'Condition: Checks if there is a carried object within range. Returns True if an object is nearby, False otherwise.', 'is_object_delivered': 'Condition: Checks if the carried object has reached its destination. Returns True if the object is delivered, False otherwise.', 'pick_up_object': 'Action: Pick up the designated object. Returns True when the object is picked up.', 'set_destination': 'Action: Set a new destination for the robot. Always returns True.', '
###
4.// INSTRUCTIONS: Use only the following behaviors {'sense_environment': 'Action: Use sensors to gather information about the environment. Always returns True.', 'react_to_environment': 'Action: Process the gathered information and make decisions based on it. Always returns True.', 'move_to_new_location': 'Action: Move to a new location based on the decision made. Always returns True.', 'gather_resources': 'Action: Collect resources from the environment. Always returns True.', 'deposit_resources': 'Action: Deposit collected resources at a designated location. Always returns True.', 'is_within_resource_range': 'Condition: Check if the robot is within range of a resource location. Returns True if the robot is within range, False otherwise.', 'enough_resources_collected': 'Condition: Check if the robot has collected enough resources. Returns True if enough resources have been collected, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Generate behavior tree for a mining robot to gather resources and deposit them at a designated location.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_within_resource_range</Condition><Selector><Sequence><Action>gather_resources</Action><Action>deposit_resources</Action><Selector><Action>enough_resources_collected</Action><Action>move_to_new_location</Action></Selector></Sequence></Selector></Sequence><Sequence><Action>sense_environment</Action><Action>react_to_environment</Action></Sequence></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'detect_objects': 'Action: Use sensors to detect objects in the environment. Always returns True.', 'navigate_to_object': 'Action: Plan a path and navigate to reach the detected object. Always returns True.', 'pick_up_object': 'Action: Pick up the object once the robot reaches it. Always returns True.', 'drop_object': 'Action: Drop the object at a designated location. Always returns True.', 'is_object_reachable': 'Condition: Check if the detected object is within reach of the robot. Returns True if within reach, False otherwise.', 'is_object_picked_up': 'Condition: Check if the robot has picked up the object. Returns True if the object is picked up, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Generate behavior tree for a robot to navigate to and pick up a specific object in the environment.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_object_reachable</Condition><Selector><Sequence><Action>navigate_to_object</Action><Action>pick_up_object</Action><Selector><Action>is_object_picked_up</Action><Action>drop_object</Action></Selector></Sequence></Selector></Sequence><Sequence><Action>detect_objects</Action><Action>sense_environment</Action></Sequence></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'detect_intruders': 'Action: Use sensors to detect any intruders in the environment. Always returns True.', 'notify_intruders': 'Action: Send a signal to notify other robots about the detected intruders. Always returns True.', 'surround_intruders': 'Action: Surround the detected intruders to prevent their escape. Always returns True.', 'attack_intruders': 'Action: Attack and disable the intruders. Always returns True.', 'is_intruder_detected': 'Condition: Check if an intruder has been detected by the sensors. Returns True if an intruder is detected, False otherwise.', 'any_intruders_left': 'Condition: Check if any intruders are left in the environment. Returns True if intruders are still present, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Generate behavior tree for a group of robots to detect and attack any intruders in the environment.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_intruder_detected</Condition><Selector><Sequence><Action>surround_intruders</Action><Action>attack_intruders</Action><Selector><Action>any_intruders_left</Action><Action>continue_patrol</Action></Selector></Sequence></Selector></Sequence><Sequence><Action>detect_intruders</Action><Action>notify_intruders</Action></Sequence></Selector></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'detect_victims': 'Action: Use sensors to detect any victims in need of rescue. Always returns True.', 'reach_victim': 'Action: Plan and navigate a path to reach the detected victim. Always returns True.', 'carry_victim': 'Action: Lift and carry the victim to safety. Always returns True.', 'is_victim_rescued': 'Condition: Check if the victim has been successfully rescued. Returns True if the victim is rescued, False otherwise.', 'is_victim_reachable': 'Condition: Check if the victim is within reach of the robot. Returns True if the victim is within reach, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: Generate behavior tree for a rescue robot to detect and rescue victims in the environment.
7.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_victim_reachable</Condition><Selector><Sequence><Action>reach_victim</Action><Action>carry_victim</Action><Selector><Action>is_victim_rescued</Action><Action>continue_search</Action></Selector></Sequence></Selector></Sequence><Sequence><Action>detect_victims</Action><Action>sense_environment</Action></Sequence></Selector></BehaviorTree>
###
4.// INSTRUCTIONS: Use only the following behaviors {'go_to_location': 'Subtree node: Represents a behavior tree for moving to a specific location.', 'check_battery_level': 'Condition: Checks the battery level. Returns True if battery is low, False otherwise.', 'low_battery_action': 'Action: Take necessary actions for low battery level. For example, return to charging station or reduce movements. Always returns True.', 'is_agent_moving': 'Condition: Check if the agent is currently moving. Returns True if agent is moving, False otherwise.', 'stop_agent': 'Action: Stop the agent from any movement. Always returns True.', 'active_search': 'Action: Perform an active search for a specific object. Always returns True.', 'found_object': 'Condition: Check if the agent has found the specified object. Returns True if object is found, False otherwise.', 'collect_object': 'Action: Collect the specified object. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Search for a specific object in the environment. If battery is low, stop and return to charging station. If the object is found, collect it. Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_agent_moving</Condition><Action>stop_agent</Action></Sequence><Sequence><Condition>check_battery_level</Condition><Action>low_battery_action</Action></Sequence><Sequence><Condition>found_object</Condition><Action>collect_object</Action></Sequence><Action>go_to_location</Action></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'move_to_target': 'Subtree node: Represents a behavior tree for moving towards a target.', 'is_target_reached': 'Condition: Check if target is within 10 units. Returns True if the target is within 10 units of distance, False otherwise.', 'follow_target': 'Action: Follow the target object. Always returns True.', 'is_object_in_range': 'Condition: Check if the target object is within range. Returns True if the object is within range, False otherwise.', 'wait_for_object': 'Action: Wait for the object to come within range before performing a specific action. Always returns True.', 'pick_up_object': 'Action: Pick up the target object once it is within range. Always returns True.', 'carry_object': 'Action: Carry the target object to a designated location. Always returns True.', 'is_target_carried': 'Condition: Check if the target object is being carried. Returns True if the object is being carried, False otherwise.', 'deliver_object': 'Action: Deliver the target object to the designated location. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Carry a target object to a designated location while avoiding obstacles along the way. If the target object is lost, wait for it to come back into range before picking it up again. Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_object_in_range</Condition><Action>wait_for_object</Action><Sequence><Condition>is_object_in_range</Condition><Action>pick_up_object</Action><Sequence><Condition>is_target_carried</Condition><Action>deliver_object</Action></Sequence></Sequence></Sequence><Sequence><Condition>is_target_reached</Condition><Action>follow_target</Action></Sequence><Subtree>move_to_target</Subtree></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'go_to_location': 'Subtree node: Represents a behavior tree for moving to a specific location.', 'check_battery_level': 'Condition: Checks the battery level. Returns True if battery is low, False otherwise.', 'low_battery_action': 'Action: Take necessary actions for low battery level. For example, return to charging station or reduce movements. Always returns True.', 'is_agent_moving': 'Condition: Check if the agent is currently moving. Returns True if agent is moving, False otherwise.', 'stop_agent': 'Action: Stop the agent from any movement. Always returns True.', 'search_for_sign': 'Action: Search for a specific sign or symbol in the environment. Always returns True.', 'found_sign': 'Condition: Check if the specified sign or symbol has been found. Returns True if the sign is found, False otherwise.', 'read_sign': 'Action: Read the identified sign and gather useful information. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Travel to a designated location, while searching for a specific sign along the way. If the sign is found, stop and read it for useful information. If battery is low, return to charging station. Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_agent_moving</Condition><Action>stop_agent</Action></Sequence><Sequence><Condition>check_battery_level</Condition><Action>low_battery_action</Action></Sequence><Sequence><Condition>found_sign</Condition><Action>read_sign</Action></Sequence><Action>move_to_location</Action></Selector><Sequence><Condition>is_agent_moving</Condition><Action>search_for_sign</Action></Sequence></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_heading': 'Action: Change the robot's heading by a specified angle. Always returns True.', 'is_at_target_location': 'Condition: Check if the robot is at the designated target location. Returns True if at the target location, False otherwise.', 'reach_target_location': 'Action: Move towards the designated target location. Always returns True.', 'is_heading_correct': 'Condition: Check if the robot is facing the correct heading. Returns True if facing the correct heading, False otherwise.', 'adjust_heading': 'Action: Adjust robot's heading to face the correct direction. Always returns True.', 'start_timer': 'Action: Start a timer for a specific duration. Always returns True.', 'is_time_up': 'Condition: Check if the timer has finished counting down. Returns True if time is up, False otherwise.', 'perform_action': 'Action: Execute a specific action. Always return True.', 'is_action_completed': 'Condition: Check if the specific action has been completed. Returns True if action is completed, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: Navigate to a specific location, adjusting heading if needed, and then perform a task for a specified duration. If the task is completed before the timer runs out, proceed to the next task. If the robot encounters 
###
4.// INSTRUCTIONS: Use only the following behaviors {'explore': 'Action: Explore and map the surrounding environment. Always returns True.', 'update_map': 'Action: Update the map with new information. Always returns True.', 'retrieve_data': 'Action: Retrieve data from a designated location. Always returns True.', 'go_to_base': 'Action: Return to the base location. Always returns True.', 'is_map_complete': 'Condition: Check if the map is fully explored and updated. Returns True if the map is complete, False otherwise.', 'is_data_retrieved': 'Condition: Check if the required data has been retrieved. Returns True if the data is retrieved, False otherwise.', 'is_at_base': 'Condition: Check if the robot is currently at the base location. Returns True if at the base location, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Generate a behavior tree for a swarm of robots to collectively explore and retrieve data from a designated location, then return to the base.
4.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_map_complete</Condition><Action>retrieve_data</Action><Sequence><Condition>is_at_base</Condition><Action>go_to_base</Action></Sequence></Sequence><Sequence><Condition>is_data_retrieved</Condition><Sequence><Condition>is_at_base</Condition><Action>go_to_base</Action></Sequence></Sequence><Sequence><Condition>is_data_missing</Condition><Action>retrieve_data</Action></Sequence><Sequence><Condition>is_map_incomplete</Condition><Action>explore</Action></Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'play_music': 'Action: Play a random song from a selected playlist. Always returns True.', 'dance': 'Action: Move and dance to the music. Always returns True.', 'light_show': 'Action: Coordinate with other robots to create a synchronized light show. Always returns True.', 'pause_music': 'Action: Pause the currently playing song. Always returns True.', 'resume_music': 'Action: Resume playing the paused song. Always returns True.', 'is_music_paused': 'Condition: Check if the music is currently paused. Returns True if music is paused, False otherwise.', 'is_music_playing': 'Condition: Check if music is currently playing. Returns True if music is playing, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Generate a behavior tree for a group of robots to play music, dance, and coordinate a synchronized light show.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_music_playing</Condition><Selector><Sequence><Condition>is_music_paused</Condition><Action>resume_music</Action></Sequence><Action>play_music</Action></Selector></Sequence><Sequence><Condition>music_has_ended</Condition><Action>play_music</Action></Sequence></Selector><Selector><Sequence><Condition>is_beat_detected</Condition><Action>dance</Action></Sequence><Sequence><Condition>is_beat_detected</Condition><Action>light_show</Action></Sequence></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'detect_fire': 'Action: Use sensors to detect any potential fire hazards. Always returns True.', 'spray_water': 'Action: Spray water to extinguish fires. Always returns True.', 'charge_water': 'Action: Retrieve and refill water supply. Always returns True.', 'move_to_next_room': 'Action: Move to the next room in the designated evacuation route. Always returns True.', 'is_fire_detected': 'Condition: Check if any fires are detected in the current room. Returns True if fire is detected, False otherwise.', 'is_water_low': 'Condition: Check if the water supply is running low. Returns True if water supply is low, False otherwise.', 'is_evac_route_complete': 'Condition: Check if the designated evacuation route has been completed. Returns True if the route is complete, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Generate a behavior tree for a team of robots to detect and extinguish fires while following a designated evacuation route.
6.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_fire_detected</Condition><Selector><Sequence><Condition>is_water_low</Condition><Action>charge_water</Action></Sequence><Selector><Action>spray_water</Action><Action>wait</Action></Selector></Selector></Sequence><Sequence><Condition>is_evac_route_complete</Condition><Action>move_to_next_room</Action></Sequence><Selector><Sequence><Condition>is_room_unsafe</Condition><Action>detect_fire</Action></Sequence><Action>wait</Action></Selector></BehaviorTree>
 
###
7.// INSTRUCTIONS: Use only the following behaviors {'detect_target': 'Action: Use sensors to detect the specified target object. Always returns True.', 'navigate_to_target': 'Action: Use path-planning algorithm to navigate to the detected target. Always returns True.', 'collect_target': 'Action: Collect the target object using gripper. Always returns True.', 'deposit_target': 'Action: Deposit the collected target at designated location. Always returns True.', 'is_target_detected': 'Condition: Check if the target object is currently detected. Returns True if the target is detected, False otherwise.', 'is_target_collected': 'Condition: Check if the target object has been successfully collected. Returns True if the target is collected, False otherwise.', 'is_at_deposit_location': 'Condition: Check if the robot is currently at the designated deposit location. Returns True if at the deposit location, False otherwise.', 'is_path_blocked': 'Condition: Check if the path to the target is currently blocked. Returns True if the path is blocked, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: Generate a behavior tree for a robot to detect, navigate to, collect, and deposit a target object in a specific location.
7.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_path_blocked</Condition><Action>replan_path</Action></Sequence><Sequence><Condition>is_target_detected</Condition><Action>collect_target</Action></Sequence><Sequence><Condition>is_target_collected</Condition><Action>deposit_target</Action></Sequence></Selector><Sequence><Condition>is_target_in_sight</Condition><Action>navigate_to_target</Action></Sequence><Sequence><Condition>is_at_deposit_location</Condition><Action>deposit_target</Action></Sequence></BehaviorTree> 
###
4.// INSTRUCTIONS: Use only the following behaviors {'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'detect_food_source': 'Action: Move towards the nearest food source. Returns True if food source is detected and agent successfully moves towards it, False otherwise.', 'is_food_collected': 'Condition: Check if food has been collected. Returns True if food has been collected, False otherwise.', 'is_food_detected': 'Condition: Check if food source is within 20 units. Returns True if food source is within 20 units of distance, False otherwise.', 'search_for_food': 'Action: Randomly move within the environment to search for food sources. Always returns True.', 'stop_food_collection': 'Action: Stop the current food collection task and return to the nest. Always returns True.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Collect food until success or failure; then return to the nest.' Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Action>detect_food_source</Action> <Condition>is_food_collected</Condition> <Action>task_completed</Action> </Sequence> <Sequence> <Action>search_for_food</Action> <Action>stop_food_collection</Action> </Sequence> </Selector> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'change_color_to_blue': "Action: Change agent's color to blue. Always returns True.", 'change_color_to_red': "Action: Change agent's color to red. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'follow_leader': 'Action: Follow the designated leader agent. Returns True if the designated leader is within 15 units and the agent successfully follows, False otherwise.', 'is_leader_active': 'Condition: Check if the designated leader is active. Returns True if the leader is active, False otherwise.', 'move_in_square': 'Action: Move in a square pattern around the environment. Returns True if the agent successfully completes the pattern, False otherwise.', 'is_square_finished': 'Condition: Check if the square movement pattern is finished. Returns True if the agent finishes one round of the pattern, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Move in a square while following a leader agent and change color to blue when square movement is completed.' Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>is_leader_active</Condition> <Sequence> <Action>follow_leader</Action> <Condition>is_square_finished</Condition> <Action>change_color_to_blue</Action> <Action>task_completed</Action> </Sequence> </Sequence> <Sequence> <Action>move_in_square</Action> <Action>change_color_to_white</Action> </Sequence> </Selector> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_red': "Action: Change agent's color to red. Always returns True.", 'circle_movement': 'Action: Move in a circular pattern around the environment. Returns True if the agent successfully completes the pattern, False otherwise.', 'is_circle_finished': 'Condition: Check if the circular movement pattern is finished. Returns True if the agent finishes one round of the pattern, False otherwise.', 'detect_target': 'Action: Move towards the designated target. Returns True if the target is within 20 units and the agent successfully moves towards it, False otherwise.', 'is_target_detected': 'Condition: Check if the target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Move in a circle while detecting and following a target, then change color to green when target is reached.' Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Selector> <Sequence> <Condition>is_target_detected</Condition> <Sequence> <Action>detect_target</Action> <Condition>is_target_reached</Condition> <Action>task_completed</Action> </Sequence> </Sequence> <Sequence> <Action>circle_movement</Action> <Action>is_circle_finished</Action> </Sequence> </Selector> <Action>change_color_to_green</Action> </Sequence> </Selector> </BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'reset_to_original_position': "Action: Return to the original position at the start of the simulation. Always returns True.", 'move_to_designated_point': 'Action: Navigate towards the designated point in the environment. Returns True if the agent successfully reaches the point, False otherwise.', 'is_point_reached': 'Condition: Check if the designated point is reached. Returns True if the point is reached, False otherwise.', 'navigate_in_triangle': 'Action: Navigate in a triangular pattern around the environment. Returns True if the agent successfully completes the pattern, False otherwise.', 'is_triangle_finished': 'Condition: Check if the triangular movement pattern is finished. Returns True if the agent finishes one round of the pattern, False otherwise.', 'randomize_starting_position': 'Action: Move to a random starting position at the beginning of each simulation. Returns True if the agent successfully moves to the new starting position, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: generate behavior tree to 'Reset to original position after reaching a designated point, then move in a triangle while randomizing starting position.' Output only the XML behavior tree without extra text.
7.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Action>move_to_designated_point</Action> <Condition>is_point_reached</Condition> <Action>reset_to_original_position</Action> <Action>task_completed</Action> </Sequence> <Sequence> <Action>navigate_in_triangle</Action> 
###
4.// INSTRUCTIONS: Use only the following behaviors {'collect_resource': "Action: Collect a resource from the environment. Always returns True.", 'deposit_resource': "Action: Deposit a collected resource into a designated storage area. Always returns True.", 'move_towards_resource': "Action: Move towards a nearby visible resource. Always returns True.", 'move_to_storage': "Action: Move towards the designated storage area. Always returns True.", 'is_resource_available': 'Condition: Check if there is at least one resource available in the environment. Returns True if a resource is available, False otherwise.', 'is_inventory_full': 'Condition: Check if the robot's inventory is full and needs to be emptied. Returns True if inventory is full, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Collect and deposit 3 resources from the environment, then return to the designated storage area to deposit them'
4.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_resource_available</Condition><Selector><Sequence><Action>collect_resource</Action><Selector><Condition>is_inventory_full</Condition><Action>move_to_storage</Action></Selector><Action>deposit_resource</Action></Sequence><Selector><Action>move_towards_resource</Action><Action>deposit_resource</Action></Selector></Selector></Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'search_for_target': 'Action: Search the environment for a designated target. Always returns True.', 'move_towards_target': "Action: Move towards the designated target. Always returns True.", 'is_target_visible': 'Condition: Check if the target is visible to the robot. Returns True if the target is visible, False otherwise.', 'has_target_been_reached': 'Condition: Check if the robot has reached the designated target. Returns True if target has been reached, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Search for and reach a designated target in the environment.'
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_target_visible</Condition><Condition>has_target_been_reached</Condition></Sequence><Selector><Action>search_for_target</Action><Action>move_towards_target</Action></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'detect_neighbor': 'Action: Detect and identify a nearby neighbor robot. Always returns True.', 'send_message': 'Action: Send a message to a designated neighbor. Always returns True.', 'receive_message': 'Condition: Check for incoming messages from neighbors. Returns True if a message is received, False otherwise.', 'has_message_been_received': 'Condition: Check if the robot has received and processed the designated message from a neighbor. Returns True if the designated message is received and processed, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Detect and communicate with a designated neighbor robot.'
6.// OUTPUT:
<BehaviorTree><Condition>has_message_been_received</Condition><Sequence><Action>detect_neighbor</Action><Selector><Condition>receive_message</Condition><Action>send_message</Action></Selector></Sequence></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'move_towards_opponent': "Action: Move towards the designated opponent. Always returns True.", 'attack_opponent': "Action: Attack the designated opponent. Returns True if the attack was successful, False otherwise.", 'is_opponent_visible': 'Condition: Check if the designated opponent is visible to the robot. Returns True if the opponent is visible, False otherwise.', 'has_opponent_been_defeated': 'Condition: Check if the robot has successfully defeated the designated opponent. Returns True if opponent is defeated, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: generate behavior tree to 'Attack and defeat a designated opponent in the environment.'
7.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_opponent_visible</Condition><Condition>has_opponent_been_defeated</Condition></Sequence><Selector><Action>move_towards_opponent</Action><Condition>attack_opponent</Condition></Selector></BehaviorTree> ###
3.// INSTRUCTIONS: Use only the following behaviors {'move_forward': 'Action: Move one step forward while maintaining formation. Always returns True.', 'move_backward': 'Action: Move one step backward while maintaining formation. Always returns True.', 'turn_right': 'Action: Turn right 90 degrees without breaking formation. Always returns True.', 'turn_left': 'Action: Turn left 90 degrees without breaking formation. Always returns True.', 'is_formation_broken': 'Condition: Check if the formation has become misaligned or broken. Returns True if the formation is broken, False otherwise.', 'is_formation_aligned': 'Condition: Check if the formation is properly aligned and ready for movement. Returns True if the formation is aligned, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3.// USER COMMAND: Generate a behavior tree for a swarm of robots to form and navigate a maze while staying aligned and avoiding obstacles.
3.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>is_formation_broken</Condition> <Action>reform_formation</Action> </Sequence> <Sequence> <Condition>is_obstacle_ahead</Condition> <Selector> <Sequence> <Condition>is_formation_aligned</Condition> <Action>move_forward</Action> </Sequence> <Sequence> <Action>move_backward</Action> <Action>turn_right</Action> </Sequence> </Selector> </Sequence> </Selector> </BehaviorTree>

###
4.// INSTRUCTIONS: Use only the following behaviors {'patrol_zone1': 'Action: Patrol zone 1 by moving forward, turning right, moving forward, and turning left. Always returns True.', 'patrol_zone2': 'Action: Patrol zone 2 by moving backward, turning left, moving forward, and turning right. Always returns True.', 'patrol_zone3': 'Action: Patrol zone 3 by moving forward, turning left, moving forward, and turning left. Always returns True.', 'patrol_zone4': 'Action: Patrol zone 4 by moving forward, turning right, moving backward, and turning left. Always returns True.', 'check_camera': 'Condition: Check if camera is functional and able to detect targets. Returns True if camera is working, False otherwise.', 'is_target_detected': 'Condition: Check if target is detected within given area. Returns True if target is detected, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Generate a behavior tree for a swarm of robots to patrol and secure an area, checking for any detected targets along the way.
4.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>check_camera</Condition> <Selector> <Sequence> <Condition>is_target_detected</Condition> <Action>patrol_zone1</Action> </Sequence> <Sequence> <Condition>is_target_detected</Condition> <Action>patrol_zone2</Action> </Sequence> <Sequence> <Condition>is_target_detected</Condition> <Action>patrol_zone3</Action> </Sequence> <Sequence> <Condition>is_target_detected</Condition> <Action>patrol_zone4</Action> </Sequence> </Selector> </Sequence> </Selector> </BehaviorTree>

5.// INSTRUCTIONS: Use only the following behaviors {'follow_leader': 'Action: Follow the designated leader by maintaining proper distance and velocity. Always returns True.', 'stop_following': 'Action: Stop following the designated leader. Always returns True.', 'wait': 'Action: Halt and wait for a specified amount of time. Always returns True.', 'is_leader_detected': 'Condition: Check if the leader robot is within range and visible. Returns True if the leader is detected, False otherwise.', 'is_at_destination': 'Condition: Check if the robot has reached the designated destination. Returns True if the destination is reached, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Generate a behavior tree for a swarm of robots to follow a designated leader to a specific destination, but stop following if the leader is no longer visible.
5.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>is_leader_detected</Condition> <Action>follow_leader</Action> </Sequence> <Sequence> <Condition>is_at_destination</Condition> <Action>stop_following</Action> </Sequence> <Action>wait</Action> </Selector> </BehaviorTree>

6.// INSTRUCTIONS: Use only the following behaviors {'detect_enemy': 'Action: Scan and detect any nearby enemy robots. Returns True if an enemy is detected, False otherwise.', 'attack': 'Action: Attack the detected enemy robot. Always returns True.', 'avoid_enemy': 'Action: Change direction and avoid the detected enemy robot. Always returns True.', 'wait': 'Action: Halt and wait for a specified amount of time. Always returns True.', 'is_enemy_detected': 'Condition: Check if any enemy robots are within range. Returns True if enemies are detected, False otherwise.', 'is_enemy_attacking': 'Condition: Check if the robot is currently being attacked by an enemy. Returns True if being attacked, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Generate a behavior tree for a swarm of robots to defend against and attack any detected enemy robots, while also evading attacks.
6.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>is_enemy_detected</Condition> <Action>detect_enemy</Action> <Sequence> <Condition>is_enemy_attacking</Condition> <Action>avoid_enemy</Action> </Sequence> <Action>attack</Action> </Sequence> <Action>wait</Action> </Selector> </BehaviorTree>

7.// INSTRUCTIONS: Use only the following behaviors {'use_senses': 'Action: Utilize robot's senses to gather information about the environment. Always returns True.', 'analyze_data': 'Action: Analyze the gathered data to make informed decisions. Always returns True.', 'perform_action': 'Action: Execute specific actions based on the analyzed data. Always returns True.', 'is_object_detected': 'Condition: Check if a specific object is detected using the robot's sensors. Returns True if object is detected, False otherwise.', 'is_obstacle_detected': 'Action: Check if there are any obstacles detected using the robot's sensors. Returns True if obstacles are detected, False otherwise.', 'is_data_analyzed': 'Condition: Check if the necessary data has been analyzed. Returns True if data has been analyzed, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't######
3.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'find_food': 'Action: Search for food within 20 units. Always returns True.', 'go_to_nest': 'Action: Move to the nest. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_food_found': 'Condition: Check if food is detected within 20 units. Returns True if food is detected, False otherwise.', 'is_nest_reached': 'Condition: Check if the agent has reached the nest. Returns True if the agent is within 5 units of the nest, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3.// USER COMMAND: generate behavior tree to 'find food and go to the nest'
3.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Action>find_food</Action> <Sequence> <Condition>is_food_found</Condition> <Action>go_to_nest</Action> </Sequence> </Selector> </BehaviorTree>

######
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'follow_path': 'Action: Follow predefined path. Always returns True.', 'is_agent_in_area': 'Condition: Check if the agent is within specified area. Returns True if agent is within specified area, False otherwise.', 'is_agent_rested': 'Condition: Check if the agent has rested for at least 30 seconds. Returns True if the agent has rested for 30 seconds, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'rest': 'Action: Rest for 30 seconds. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'follow path then rest'
4.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Action>follow_path</Action> <Sequence> <Condition>is_path_clear</Condition> <Action>rest</Action> </Sequence> </Selector> </BehaviorTree>

######
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_blue': "Action: Change agent's color to blue. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'move_to_object': 'Action: Move towards specified object. Always returns True.', 'turn_left': 'Action: Turn left. Always returns True.', 'turn_right': 'Action: Turn right. Always returns True.', 'object_detected': 'Condition: Check if specified object is within 10 units. Returns True if object is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_achieved': 'Condition: Check if target is within distance of 5 units. Returns True if target is within 5 units of distance, False otherwise.', 'find_object': 'Action: Search for specified object within 20 units. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'find object, turn left, and move to object'
5.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Action>find_object</Action> <Sequence> <Condition>object_detected</Condition> <Selector> <Action>turn_left</Action> <Action>turn_right</Action> </Selector> <Action>move_to_object</Action> </Sequence> </Selector> </BehaviorTree>

######
6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_blue': "Action: Change agent's color to blue. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'go_to_location': 'Action: Move to specified location. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if agent is in the nest, False otherwise.', 'is_color_blue': 'Condition: Check if the agent's color is blue. Returns True if the agent's color is blue, False otherwise.', 'is_color_white': 'Condition: Check if the agent's color is white. Returns True if the agent's color is white, False otherwise.', 'is_location_reached': 'Condition: Check if the agent is within 10 units of the specified location. Returns True if the agent is within 10 units, False otherwise.', 'move_to_object': 'Action: Move towards specified object. Always returns True.', 'wait_for_5_seconds': 'Action: Wait for 5 seconds before continuing. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'move to location, wait for 5 seconds, and change color to blue'
6.###
3.// INSTRUCTIONS: Use only the following behaviors {'calculate_distance': 'Action: Calculate the distance between two points. Returns the calculated distance.', 'is_facing_obstacle': 'Condition: Check if the robot is facing an obstacle. Returns True if the robot is facing an obstacle, False otherwise.', 'line_following': 'Action: Follow a line. Returns True if the robot is able to follow the line, False otherwise.', 'reverse_direction': 'Action: Reverse the robot�s current direction. Always returns True.', 'stop_move': 'Action: Stop the robot's movement. Always returns True.', 'target_reached': 'Condition: Check if the robot has reached the target position. Returns True if the robot has reached the target position, False otherwise.', 'turn_left': 'Action: Turn the robot left by 90 degrees. Always returns True.', 'turn_right': 'Action: Turn the robot right by 90 degrees. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3.// USER COMMAND: Create a behavior tree to follow a line, stop, turn around and then follow the same line back.Output only the XML behavior tree without extra text.
3.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>line_following</Condition> <Action>stop_move</Action> <Action>reverse_direction</Action> </Sequence> <Sequence> <Condition>target_reached</Condition> <Action>turn_left</Action> <Condition>line_following</Condition> <Action>stop_move</Action> <Action>turn_left</Action> </Sequence> </Selector> </Sequence> </BehaviorTree>
###
4.// INSTRUCTIONS: Use only the following behaviors {'crate_found': 'Condition: Check if a crate has been found. Returns True if a crate is detected, False otherwise.', 'deploy_claw': 'Action: Deploy the robotic arm to pick up a crate. Always returns True.', 'move_arm_up': 'Action: Move the robotic arm up. Always returns True.', 'move_forward': 'Action: Move the robot forward by 1 unit. Always returns True.', 'move_left': 'Action: Move the robot left by 1 unit. Always returns True.', 'move_right': 'Action: Move the robot right by 1 unit. Always returns True.', 'move_back': 'Action: Move the robot backwards by 1 unit. Always returns True.', 'pick_crate': 'Action: Pick up a crate with the robotic arm. Always returns True.', 'place_crate': 'Action: Place the crate in the designated location. Always returns True.', 'scan_area': 'Action: Scan the surrounding area for crates. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Guide the robot to scan the area, pick up a crate, and place it in the designated location.Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Sequence> <Action>scan_area</Action> <Condition>crate_found</Condition> <Action>pick_crate</Action> </Sequence> <Action>deploy_claw</Action> <Action>move_arm_up</Action> </Sequence> <Sequence> <Action>move_forward</Action> <Action>move_right</Action> <Action>move_back</Action> </Sequence> <Sequence> <Action>move_right</Action> <Action>move_forward</Action> <Action>place_crate</Action> </Sequence> </Selector> </BehaviorTree>
###
5.// INSTRUCTIONS: Use only the following behaviors {'detect_enemy': 'Condition: Check if an enemy is within range. Returns True if an enemy is detected, False otherwise.', 'attack_enemy': 'Action: Attack the nearest enemy. Always returns True.', 'move_to_safe_zone': 'Action: Move to a safe zone. Always returns True.', 'dodge_obstacle': 'Action: Dodge obstacles in the path. Always returns True.', 'collect_resource': 'Action: Collect resources. Always returns True.', 'drop_resource': 'Action: Drop off collected resources. Always returns True.', 'is_carrier_busy': 'Condition: Check if the carrier robot is currently carrying resources. Returns True if the carrier robot is busy, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Create a behavior tree to detect and attack enemies, collect resources, and deliver them to a safe zone.
5.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>detect_enemy</Condition> <Action>attack_enemy</Action> </Sequence> <Sequence> <Condition>is_carrier_busy</Condition> <Action>collect_resource</Action> <Action>drop_resource</Action> </Sequence> <Sequence> <Action>move_to_safe_zone</Action> </Sequence> </Selector> </BehaviorTree>
###
6.// INSTRUCTIONS: Use only the following behaviors {'check_battery_level': 'Function: Check the battery level of the robot. Returns the battery level as a percentage.', 'change_light_color': 'Action: Change the color of the robot's light. Always returns True.', 'stop_movement': 'Action: Stop the robot's movement. Always returns True.', 'move_forward': 'Action: Move the robot forward by 1 unit. Always returns True.', 'charge_battery': 'Action: Activate the charging station and charge the robot's battery. Always returns True.', 'is_charging': 'Condition: Check if the robot is currently charging. Returns True if the robot is charging, False otherwise.', 'battery_low': 'Condition: Check if the battery level is below 20%. Returns True if the battery level is below 20%, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Create a behavior tree to check the battery level, charge the robot's battery if it is low, and continue normal operation.
6.// OUTPUT:
<BehaviorTree> <Sequence> <Condition>battery_low</Condition> <Sequence> <Action>change_light_color</Action> <Action>stop_movement</Action> <Action>charge_battery</Action> </Sequence> <Sequence> <Condition>is_charging</Condition> <Action>stop_movement</Action> <Action>move_forward</Action> </Sequence> </Sequence> </BehaviorTree>
###
7.// INSTRUCTIONS: Use only the following behaviors {'detect_sigil': 'Condition: Check if a sigil is within range. Returns True if a sigil is detected, False otherwise.', 'goto_sigil': 'Action: Move towards the nearest sigil. Always returns True.', 'collect_sigil': 'Action: Collect the sig###
3.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3.// USER COMMAND: generate behavior tree to 'Check if target is within 20 units'Output only the XML behavior tree without extra text.
3.// OUTPUT:
<BehaviorTree> <Sequence> <Condition>is_target_detected</Condition> </Sequence> </BehaviorTree>
###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Change agent's color to green'Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree> <Action>change_color_to_green</Action> </BehaviorTree>
###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Wander around until target is reached'Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree> <Sequence> <Action>wander</Action> <Sequence> <Condition>is_target_reached</Condition> <Action>task_completed</Action> </Sequence> </Sequence> </BehaviorTree>
###
6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center 
###
3.//Task:Recall the drone.
3.//INSTRUCTIONS:Use only the following behaviors{'take_off': 'Action: Initiate takeoff and take off from current position. Always returns True.', 'land': 'Action: Initiate landing and land at current position. Always returns True.', 'return_home': 'Action: Return to the starting point. Always returns True.', 'navigate_to_target': 'Action: Navigate to a designated target. Always returns True.', 'set_target': 'Action: Set target coordinates. Returns True when coordinates are set.', 'is_at_home': 'Condition: Check if the drone has returned to the starting point. Returns True if the drone is at the starting point, False otherwise.', 'is_target_reached': 'Condition: Check if the drone has reached the designated target. Returns True if the drone is at the target coordinates, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3.//USER COMMAND: Return the drone to the starting point.
3.//OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_at_home</Condition><Action>set_target</Action><Action>navigate_to_target</Action></Sequence><Action>return_home</Action></Selector></BehaviorTree>
 
###
4.//INSTRUCTIONS: Use only the following behaviors{'gather_resources': 'Action: Gather resources from the environment. Returns True when resources are successfully gathered.', 'travel_to_resource_site': 'Action: Move to the designated resource site. Returns True when the robot reaches the resource site.', 'deposit_resources': 'Action: Deposit collected resources into storage. Returns True when resources are successfully deposited.', 'is_resource_available': 'Condition: Check if there are resources available at the designated resource site. Returns True if resources are available, False otherwise.', 'is_resource_depleted': 'Condition: Check if the designated resource site is depleted. Returns True if the resource site is depleted, False otherwise.', 'is_storage_full': 'Condition: Check if the storage is already full. Returns True if storage is full, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task).
4.//USER COMMAND: Gather resources from the nearest resource site and deposit them into storage, then return to gather more resources if needed.
4.//OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_resource_available</Condition><Action>travel_to_resource_site</Action><Action>gather_resources</Action><Action>deposit_resources</Action></Sequence><Selector><Condition>is_resource_depleted</Condition><Condition>is_storage_full</Condition><Action>travel_to_resource_site</Action><Action>gather_resources</Action></Selector></Selector></BehaviorTree>

###
5.//INSTRUCTIONS: Use only the following behaviors{'detect_fire': 'Condition: Check if fire is detected. Returns True if fire is detected, False otherwise.', 'extinguish_fire': 'Action: Extinguish fire at current location. Always returns True.', 'navigate_to_water_source': 'Action: Move to the nearest water source. Returns True when the robot reaches the water source.', 'refill_water': 'Action: Refill water supply from the water source. Returns True when water supply is successfully refilled.', 'is_water_low': 'Condition: Check if the water supply is low. Returns True if water supply is low, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task).
5.//USER COMMAND: Detect and extinguish any fires in the environment, making sure to refill water supply if it runs low.
5.//OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>detect_fire</Condition><Action>extinguish_fire</Action><Selector><Condition>is_water_low</Condition><Action>navigate_to_water_source</Action><Sequence><Condition>detect_fire</Condition><Action>refill_water</Action></Selector></Sequence></Selector></BehaviorTree>

###
6.//INSTRUCTIONS: Use only the following behaviors{'detect_anomaly': 'Condition: Check for anomalies and abnormalities in the environment. Returns True if an anomaly is detected, False otherwise.', 'avoid_collision': 'Action: Avoid collision with other robots or obstacles. Always returns True.', 'navigate_to_safe_area': 'Action: Move towards the designated safe area. Returns True when the robot reaches the safe area.', 'report_anomaly': 'Action: Send a report about the detected anomaly to designated authorities. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task).
6.//USER COMMAND: Detect and avoid any anomalies or abnormalities in the environment, then report them to the designated authorities.
6.//OUTPUT:
 <BehaviorTree><Selector><Condition>detect_anomaly</Condition><Action>avoid_collision</Action><Sequence><Condition>detect_anomaly</Condition><Action>navigate_to_safe_area</Action><Action>report_anomaly</Action></Sequence></Selector></BehaviorTree>

###
7.//INSTRUCTIONS: Use only the following behaviors{'patrol_area': 'Action: Patrol designated area by moving to random locations within the area. Returns True when the entire area has been patrolled.', 'scan_area': 'Action: Utilize sensors to scan the designated area for any abnormalities or objects of interest. Always returns True.', 'mark_interest': 'Action: Mark any interesting objects or anomalies found during the scan. Returns True when object is marked.', 'return_to_start': 'Action: Return to the starting point and end patrol. Returns True when robot has returned to starting point.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task).
7.//USER COMMAND: Patrol the designated area, scan for any abnormalities or objects, and mark them for further investigation before returning to the starting point.
7.//OUTPUT:
<BehaviorTree><Sequence><Action>patrol_area</Action><Selector><Sequence><Action>scan_area</Action><Action>mark_interest</Action></Sequence><Action>return_to_start</Action></Selector></Sequence></BehaviorTree>###
3.// INSTRUCTIONS: Use only the following behaviors {'follow_leader': 'Action: Follow the designated leader robot by maintaining a specified distance. Always returns True.', 'send_message_to_leader': 'Action: Send a message to the leader robot indicating the follower's status and position. Always returns True.', 'check_battery_level': 'Condition: Check the remaining battery level of the robot. Returns True if the battery level is above a specified threshold, False otherwise.', 'is_leader_moving': 'Condition: Check if the leader robot is currently moving. Returns True if the leader is moving, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3.// USER COMMAND: Generate behavior tree for a swarm of robots to follow a designated leader and maintain communication and battery levels.
3.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>send_message_to_leader</Action><Condition>check_battery_level</Condition><Selector><Action>follow_leader</Action><Action>wait</Action></Selector></Sequence><Sequence><Condition>is_leader_moving</Condition><Action>reposition_to_leader</Action></Sequence></Selector></BehaviorTree>
###
4.// INSTRUCTIONS: Use only the following behaviors {'count_objects': 'Action: Count the number of objects in a given area using sensors. Returns the total count as an integer.', 'pick_highest_value_object': 'Action: Pick and grab the object with the highest value among the detected objects. Always returns True.', 'fetch_object': 'Action: Move the robot to the location of the specified object and grab it. Returns True if successful, False otherwise.', 'is_object_available': 'Condition: Check if the specified object is currently within reach and available for picking. Returns True if the object is available, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Generate behavior tree for a robot to search and retrieve the most valuable object in a given area.
4.// OUTPUT:
<BehaviorTree><Sequence><Action>count_objects</Action><Selector><Sequence><Condition>is_object_available</Condition><Action>fetch_object</Action></Sequence><Action>pick_highest_value_object</Action></Selector></Sequence></BehaviorTree>
###
5.// INSTRUCTIONS: Use only the following behaviors {'reposition_to_center': 'Action: Move the robot to the center of the specified area. Always returns True.', 'identify_object': 'Action: Use sensors to identify the type and properties of the specified object. Returns the data as a dictionary.', 'perform_task': 'Action: Perform a specific task on the identified object based on its properties. Returns True if completed, False otherwise.', 'is_area_sealed': 'Condition: Check if the specified area is sealed off and inaccessible. Returns True if area is sealed, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Generate behavior tree for a robot to assess and perform a specific task on an object in a designated area.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_area_sealed</Condition><Action>wait</Action></Sequence><Sequence><Action>reposition_to_center</Action><Selector><Sequence><Action>identify_object</Action><Action>perform_task</Action></Sequence><Action>wait</Action></Selector></Sequence></Selector></BehaviorTree>
###
6.// INSTRUCTIONS: Use only the following behaviors {'navigate_to_location': 'Action: Use a predefined map to navigate to a specified location. Returns True if successfully reached, False otherwise.', 'check_light_level': 'Condition: Check the brightness level of the current location using light sensors. Returns the light level as a numeric value.', 'adjust_light_level': 'Action: Adjust the brightness level of the robot's light source to match the specified light level. Always returns True.', 'is_nighttime': 'Condition: Check if it is currently nighttime. Returns True if it is nighttime, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Generate behavior tree for a robot to navigate to a specific location and adjust its light level based on the brightness level of the current location.
6.// OUTPUT:
<BehaviorTree><Sequence><Action>navigate_to_location</Action><Selector><Sequence><Condition>is_nighttime</Condition><Selector><Action>check_light_level</Action><Action>adjust_light_level</Action></Selector></Sequence><Action>wait</Action></Selector></Sequence></BehaviorTree>
###
7.// INSTRUCTIONS: Use only the following behaviors {'search_for_resource': 'Action: Use sensors to search and detect a specified resource in the surrounding area. Always returns True.', 'collect_resource': 'Action: Move to the detected resource and collect it. Returns True if successfully collected, False otherwise.', 'return_to_base': 'Action: Navigate back to the designated base while carrying the collected resource. Returns True if successfully returned, False otherwise.', 'is_base_reachable': 'Condition: Check if the designated base is currently accessible. Returns True if base is reachable, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: Generate behavior tree for a robot to search, collect, and return a specified resource to a designated base.
7.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_base_reachable</Condition><Selector><Sequence><Action>search_for_resource</Action><Action>collect_resource</Action></Sequence><Action>wait</Action></Selector></Sequence><Action>return_to_base</Action></Selector></BehaviorTree> 
###
3.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_red': "Action: Change agent's color to red. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_color_red': 'Condition: Check if agent\'s color is red. Returns True if agent\'s color is red, False otherwise.', 'is_color_green': 'Condition: Check if agent\'s color is green. Returns True if agent\'s color is green, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3.// USER COMMAND: generate behavior tree to 'Avoid obstacles, change color to green if color is red, and move towards target.'Output only the XML behavior tree without extra text.
3.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_obstacle_detected</Condition><Action>avoid_obstacle</Action></Sequence><Sequence><Condition>is_color_red</Condition><Action>change_color_to_green</Action><Action>continue_movement_agent</Action></Sequence><Action>wander</Action></Selector><Sequence><Condition>is_target_detected</Condition><Action>continue_movement_agent</Action></Sequence></BehaviorTree>

###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'change_direction': 'Action: Change agent\'s direction randomly. Always returns True.', 'circle_pattern': 'Action: Move in a circular pattern. Always returns True.', 'change_color': "Action: Change agent's color randomly. Always returns True.", 'is_circle_pattern': 'Condition: Check if agent is moving in a circular pattern. Returns True if agent is moving in a circular pattern, False otherwise.', 'is_color_changed': 'Condition: Check if agent\'s color has changed. Returns True if agent\'s color has changed, False otherwise.', 'is_agent_at_center': 'Condition: Check if agent is at center of environment. Returns True if agent is at center, False otherwise.', 'is_agent_at_border': 'Condition: Check if agent is at border of environment. Returns True if agent is at border, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Perform a circular pattern while changing colors randomly, then stop movement when reaching the center.'Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_circle_pattern</Condition><Sequence><Condition>is_color_changed</Condition><Action>change_color</Action></Sequence><Action>circle_pattern</Action></Sequence><Sequence><Condition>is_agent_at_center</Condition><Action>agent_movement_freeze</Action></Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'change_speed': 'Action: Change agent\'s movement speed randomly. Always returns True.', 'is_low_speed': 'Condition: Check if agent\'s speed is low. Returns True if agent\'s speed is low, False otherwise.', 'is_high_speed': 'Condition: Check if agent\'s speed is high. Returns True if agent\'s speed is high, False otherwise.', 'random_walk': 'Action: Move in a random direction. Always returns True.', 'follow_path': 'Action: Follow a predetermined path. Always returns True.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_reached': 'Condition: Check if target is within 10 units. Returns True if the target is within 10 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Randomly change speed while following a predetermined path, then stop movement when target is reached.'Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_low_speed</Condition><Action>change_speed</Action></Sequence><Selector><Sequence><Condition>is_path_clear</Condition><Action>follow_path</Action></Sequence><Action>random_walk</Action></Selector><Sequence><Condition>is_high_speed</Condition><Action>wander</Action></Sequence><Sequence><Condition>is_target_reached</Condition><Action>agent_movement_freeze</Action></Sequence></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'change_direction': 'Action: Change agent\'s direction randomly. Always returns True.', 'travel_parallel_to_obstacle': 'Action: Move parallel to the nearest obstacle. Always returns True.', 'change_color_to_blue': 'Action: Change agent\'s color to blue. Always returns True.', 'is_blue_agent': 'Condition: Check if agent\'s color is blue. Returns True if agent\'s color is blue, False otherwise.',###
3.// INSTRUCTIONS: Use only the following behaviors {'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_target_in_nest': 'Condition: Check if the target is in the nest. Returns True if the target is in the nest, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3.// USER COMMAND: generate behavior tree to 'Check if both the agent and target are in the nest.'Output only the XML behavior tree without extra text.
3.// OUTPUT:
<BehaviorTree> <Sequence> <Condition>is_agent_in_nest</Condition> <Condition>is_target_in_nest</Condition> </Sequence> </BehaviorTree>
###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.'} to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'If the agent is in the nest, change its color to green and freeze its movement.'Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>is_agent_in_nest</Condition> <Action>change_color_to_green</Action> <Action>agent_movement_freeze</Action> </Sequence> </Selector> </BehaviorTree>
###
5.// INSTRUCTIONS: Use only the following behaviors {'follow_target': 'Action: Move towards the target. Always returns True.', 'ignore_target': 'Action: Ignore the target and continue with current action. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'If the agent detects the target, follow it. Otherwise, continue with current action.' Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>is_target_detected</Condition> <Action>follow_target</Action> </Sequence> <Action>ignore_target</Action> </Selector> </BehaviorTree>
###
6.// INSTRUCTIONS: Use only the following behaviors {'move_to_formation_point': 'Action: Move to a specified formation point (x, y, z). Always returns True.', 'rotate_towards_target': 'Action: Rotate towards the target. Always returns True.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Rotate towards the target and then move towards a specific formation point.' Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree> <Sequence> <Action>rotate_towards_target</Action> <Selector> <Sequence> <Condition>is_target_detected</Condition> <Action>move_to_formation_point(x, y, z)</Action> </Sequence> <Action>rotate_towards_target</Action> </Selector> </Sequence> </BehaviorTree>
###
7.// INSTRUCTIONS: Use only the following behaviors {'move_to_nest': 'Action: Move towards the nest. Always returns True.', 'move_randomly': 'Action: Move randomly within the environment. Always returns True.', 'is_nest_reached': 'Condition: Check if the nest is within 10 units. Returns True if the nest is within 10 units of distance, False otherwise.', 'is_scouting_done': 'Condition: Check if all scouting areas have been covered. Returns True if all areas have been covered, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: generate behavior tree to 'If the nest is reached, stop moving. Otherwise, continue moving randomly until all scouting areas are covered.' Output only the XML behavior tree without extra text.
7.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>is_nest_reached</Condition> <Action>move_to_nest</Action> </Sequence> <Action>move_randomly</Action> <Condition>is_scouting_done</Condition> </Selector> </BehaviorTree> 
###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'fly_forward': 'Action: Move forward while flying. Returns True if successful, False otherwise.', 'land': 'Action: Land on a nearby surface. Returns True if successful, False otherwise.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_flying': 'Condition: Check if the agent is currently flying. Returns True if the agent is flying, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'has_reached_destination': 'Condition: Check if the agent has reached its designated destination. Returns True if the destination has been reached, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'take_off': 'Action: Take off from the ground. Returns True if successful, False otherwise.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Take off, fly forward, land, change color to green, and then freeze movement.' Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Action>take_off</Action> <Action>fly_forward</Action> <Action>land</Action> <Sequence> <Condition>is_agent_in_nest</Condition> <Action>change_color_to_green</Action> </Sequence> </Sequence> <Action>agent_movement_freeze</Action> </Selector> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'change_color_to_blue': "Action: Change agent's color to blue. Always returns True.", 'change_color_to_red': "Action: Change agent's color to red. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'drop_off_target': 'Action: Drop off target at designated location. Returns True if successful, False otherwise.', 'grab_target': 'Action: Grab target object if within reach. Returns True if target is grabbed, False otherwise.', 'is_agent_in_irrigated_area': 'Condition: Check if agent is currently in an irrigated area. Returns True if in an irrigated area, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_grabbed': 'Condition: Check if target object has been grabbed. Returns True if target is grabbed, False otherwise.', 'is_at_drop_off': 'Condition: Check if the agent is at the designated drop-off location. Returns True if at the drop-off location, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Find target, grab target, change color to red, and drop off target at designated location if in an irrigated area.'Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Selector> <Sequence> <Condition>is_target_detected</Condition> <Action>grab_target</Action> <Action>change_color_to_red</Action> </Sequence> <Condition>is_agent_in_irrigated_area</Condition> <Sequence> <Condition>is_at_drop_off</Condition> <Action>drop_off_target</Action> <Action>task_completed</Action> </Sequence> </Selector> <Action>wander</Action> </Sequence> <Action>continue_movement_agent</Action> </Selector> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_red': "Action: Change agent's color to red. Always returns True.", 'check_darkness': 'Condition: Check the level of darkness in the environment. Returns True if environment is dark, False otherwise.', 'detect_smell': 'Condition: Check for the presence of a specific smell in the environment. Returns True if the smell is detected, False otherwise.', 'is_agent_near_water_source': 'Condition: Check if the agent is near a water source. Returns True if near water source, False otherwise.', 'is_food_detected': 'Condition: Check for the presence of food in the environment. Returns True if food is detected, False otherwise.', 'is_target_detected': 'Condition: Check if the target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'move_to_water_source': 'Action: Move towards nearest water source. Returns True if successful, False otherwise.', 'collect_food': 'Action: Collect food if present. Returns True if food is collected, False otherwise.', 'wander': 'Action: Move randomly within the environment. Always returns True.',}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'If in a dark environment, move to the nearest water source and collect food.'Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Action>move_to_water_source</Action> <Condition>collect_food</Condition> <Sequence> <Condition>is_agent_near_water_source</Condition> <Action>collect_food</Action> <Sequence><Condition>is###
3.// INSTRUCTIONS: Use only the following behaviors {'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_grid': 'Action: Form a grid pattern with other agents. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_grid_formed': 'Condition: Check if a grid pattern is formed. Returns True if the grid is formed, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3.// USER COMMAND: generate behavior tree to 'Move towards target, form a grid with other agents, avoid any obstacles, and change color to green if target reached.'Output only the XML behavior tree without extra text.
3.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Action>continue_movement_agent</Action> <Condition>is_target_detected</Condition> <Action>change_color_to_green</Action> </Sequence> <Action>avoid_obstacle</Action> <Sequence> <Condition>is_grid_formed</Condition> <Action>change_color_to_green</Action> </Sequence> </Selector> <Action>form_grid</Action> </BehaviorTree>

###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'change_color_to_blue': "Action: Change agent's color to blue. Always returns True.", 'follow_path': 'Action: Follow a specific path towards the target. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'reach_target': 'Action: Move to the target and freeze movement. Always returns True.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Move to the target, follow a specific path, avoid obstacles, then reach the target and change color to blue.'Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Action>follow_path</Action> <Condition>is_path_clear</Condition> <Action>change_color_to_blue</Action> </Sequence> <Action>avoid_obstacle</Action> <Sequence> <Condition>is_target_detected</Condition> <Action>reach_target</Action> </Sequence> </Selector> <Sequence> <Condition>is_agent_in_nest</Condition> <Action>change_color_to_blue</Action> <Action>task_completed</Action> </Sequence> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'take_picture': 'Action: Capture an image. Always returns True.', 'compare_image': 'Action: Compare captured image with a reference image. If they match, return True, else return False.', 'is_image_found': 'Condition: Check if captured image matches reference image. Returns True if captured image matches, False otherwise.', 'record_audio': 'Action: Record audio. Always returns True.', 'compare_audio': 'Action: Compare recorded audio with a reference audio file. If they match, return True, else return False.', 'is_audio_found': 'Condition: Check if recorded audio matches reference audio file. Returns True if recorded audio matches, False otherwise.', 'is_task_completed': 'Condition: Check if all required actions have been completed. Returns True if all actions were successful, False otherwise.', 'return_to_base': 'Action: Return to base and signal task completion. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Capture an image and compare it, then return to base and record audio for later comparison.'Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree> <Sequence> <Action>take_picture</Action> <Condition>is_image_found</Condition> </Sequence> <Action>compare_image</Action> <Sequence> <Condition>is_task_completed</Condition> <Action>return_to_base</Action> </Sequence> <Action>record_audio</Action> <Action>compare_audio</Action> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'detect_enemy': "Condition: Check if an enemy is within range. Returns True if enemy is detected, False otherwise.", 'attack_enemy': "Action: Attack the detected enemy. Always returns True.", 'heal_ally': 'Action: Heal an ally within range. Returns True if ally is healed, False otherwise.', 'move_to_target': 'Action: Move towards a specific target. Always returns True.', 'is_target_reached': 'Condition: Check if target is within 10 units. Returns True if target is within 10 units of distance, False otherwise.', 'avoid_obstacles': 'Action: Avoid detected obstacles. Always returns True.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_ally_in_range': 'Condition: Check if an ally is within range. Returns True if ally is detected, 
###
3.// INSTRUCTIONS: Use only the following behaviors {'request_help': "Action: Request assistance from other robots. Always returns True.", 'find_target': "Action: Navigate to the target location. Always returns True.", 'wait_for_help': "Action: Stop movement and wait for assistance. Always returns True.", 'is_target_found': "Condition: Check if the target has been found. Returns True if the target is located, False otherwise.", 'is_reached_help': 'Condition: Check if help has been reached. Returns True if assistance has arrived, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3.// USER COMMAND: generate behavior tree for a group of swarm robots to find a lost team member and request for assistance.
3.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_target_found</Condition><Selector><Sequence><Selector><Action>find_target</Action><Action>wait</Action></Selector><Action>request_help</Action></Sequence><Action>wait_for_help</Action></Selector><Action>waits_until_reached</Action></Sequence></BehaviorTree>

###
4.// INSTRUCTIONS: Use only the following behaviors {'attack_enemy': "Action: Move towards and attack the enemy target. Always returns True.", 'defend_base': "Action: Stay within a designated area and defend it from enemies. Always returns True.", 'check_target': "Condition: Check if the target is within attack range. Returns True if the target is in range, False otherwise.", 'check_threat': "Condition: Check if any enemies are within a designated threat range. Returns True if an enemy is detected within the range, False otherwise.", 'return_to_base': "Action: Move back to the designated base. Always returns True."}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree for a group of swarm robots to protect a base while also attacking nearby enemy targets.
4.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>check_target</Condition><Action>attack_enemy</Action></Sequence><Selector><Condition>check_threat</Condition><Action>return_to_base</Action></Selector><Action>defend_base</Action></Selector></Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'locate_food': 'Action: Use sensors to locate a nearby food source. Always returns True.', 'gather_food': 'Action: Move towards and collect the food source. Always returns True.', 'check_food_quantity': 'Condition: Check if the robot has gathered enough food. Returns True if the food quantity is sufficient, False otherwise.', 'store_food': 'Action: Store collected food in designated storage area. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree for a swarm robot to gather and store food.
5.// OUTPUT:
<BehaviorTree><Sequence><Condition>check_food_quantity</Condition><Selector><Sequence><Selector><Action>locate_food</Action><Action>wait</Action></Selector><Action>gather_food</Action></Sequence><Action>store_food</Action></Selector><Action>wander</Action></Sequence></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'follow_predefined_path': "Action: Follow a predefined path. Always returns True.", 'detect_obstacle': "Action: Use sensors to detect any obstacles. Always returns True.", 'avoid_obstacle': "Action: Avoid detected obstacles and continue movement. Always returns True.", 'move_away_from_obstacle': "Action: Move away from the detected obstacle. Always returns True.", 'wait': "Action: Stop movement and wait. Always returns True.", 'check_path_clear': "Condition: Check if the path ahead is clear. Returns True if no obstacles are present, False otherwise."}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree for a robot to navigate through a maze while avoiding obstacles.
6.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Selector><Condition>check_path_clear</Condition><Action>follow_predefined_path</Action></Selector><Action>wait</Action></Sequence><Selector><Action>detect_obstacle</Action><Sequence><Action>avoid_obstacle</Action><Action>wait</Action></Sequence><Action>move_away_from_obstacle</Action></Selector></Selector></Sequence></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'detect_fire': "Action: Use sensors to detect any signs of fire. Always returns True.", 'extinguish_fire': "Action: Move towards and extinguish the fire source. Always returns True.", 'check_fire_status': "Condition: Check if all fires have been extinguished. Returns True if all fires are extinguished, False otherwise.", 'find_water_source': "Action: Search for the nearest water source. Always returns True.", 'collect_water': "Action: Move towards and collect water from the designated source. Always returns True.", 'use_water': "Action: Use the collected water to put out fires. Always returns True."}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: generate behavior tree for a group of swarm robots to detect and extinguish fires.
7.// OUTPUT:
<BehaviorTree><Sequence><Condition>check_fire_status</Condition><Selector><Sequence><Selector><Action>detect_fire</Action><Action>wait</Action></Selector><Action>extinguish_fire</Action></Sequence><Selector><Sequence><Action>find_water_source</Action><Action>collect_water</Action><Action>wait</Action></Sequence><Action>use_water</Action></Selector></Selector></Sequence></BehaviorTree>
###
4.// INSTRUCTIONS: Use only the following behaviors {'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'follow_path': 'Action: Follow a predefined path. Always returns True.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Detect obstacles, form a vertical line, follow path to target, then change color to green.'Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>is_obstacle_detected</Condition> <Action>form_line</Action> </Sequence> <Action>avoid_obstacle</Action> </Selector> <Sequence> <Condition>is_target_detected</Condition> <Action>change_color_to_green</Action> </Sequence> <Action>follow_path</Action> </Sequence> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'idle': 'Action: Stop any current actions and remain idle. Always returns True.', 'move_towards_target': 'Action: Move towards the designated target. Always returns True.', 'is_facing_target': 'Condition: Check if the agent is facing the target. Returns True if the agent is facing the target, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 10 units. Returns True if the target is within 10 units of distance, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Move towards target, stop when facing target, then remain idle.'Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree> <Sequence> <Action>move_towards_target</Action> <Condition>is_facing_target</Condition> <Action>idle</Action> </Sequence> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'detect_enemy': 'Condition: Check for enemies within range. Returns True if enemies are detected, False otherwise.', 'is_load_full': 'Condition: Check if load is full. Returns True if load is full, False otherwise.', 'move_to_base': 'Action: Move towards home base. Always returns True.', 'collect_resources': 'Action: Collect resources from the environment. Always returns True.', 'unload_load': 'Action: Unload collected resources at home base. Always returns True.', 'is_resource_available': 'Condition: Check if resources are available in the environment. Returns True if resources are available, False otherwise.', 'avoid_enemy': 'Action: Avoid enemies and stay hidden. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Collect resources from environment, avoid enemies, unload at base when load is full.'Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>is_resource_available</Condition> <Action>collect_resources</Action> </Sequence> <Sequence> <Condition>detect_enemy</Condition> <Action>avoid_enemy</Action> <Sequence> <Condition>is_load_full</Condition> <Action>move_to_base</Action> </Sequence> <Action>unload_load</Action> </Sequence> </Selector> </BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'change_formation': 'Action: Change swarm formation to specified formation. Always returns True.', 'is_formation_changed': 'Condition: Check if the swarm formation has been changed. Returns True if the formation is changed, False otherwise.', 'move_with_formation': 'Action: Move in sync with swarm formation. Always returns True.', 'is_formation_valid': 'Condition: Check if the swarm is in a valid formation. Returns True if the formation is valid, False otherwise.', 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: generate behavior tree to 'Change swarm formation, move in sync, avoid obstacles, and check for valid formation.'Output only the XML behavior tree without extra text.
7.// OUTPUT:
<BehaviorTree> <Sequence> <Action>change_formation</Action> <Condition>is_formation_changed</Condition> <Action>move_with_formation</Action> <Condition>is_formation_valid</Condition> <Action>avoid_obstacle</Action> </Sequence> </BehaviorTree> 
###
3.// INSTRUCTIONS: Use only the following behaviors {'check_objective': 'Condition: Checks if the robot has completed the assigned objective. Returns True if the objective has been completed, False otherwise.', 'collect_resource': 'Action: Collect the specified resource at the current location. Returns True if collection is successful, False otherwise.', 'navigate_to_resource': 'Action: Move the robot to the location of the specified resource. Returns True once the robot reaches the location.', 'deliver_resource': 'Action: Deliver the collected resource to the designated destination. Returns True if delivery is successful, False otherwise.', 'is_resources_full': 'Condition: Checks if the robot has reached maximum capacity for resources. Returns True if capacity is reached, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3.// USER COMMAND: Create a behavior tree for a robot to collect resources, navigate to a specified destination, and deliver the resources.
3.// OUTPUT:
<BehaviorTree><Sequence><Condition>check_objective</Condition><Selector><Sequence><Selector><Condition>is_resources_full</Condition></Selector><Action>collect_resource</Action><Sequence><Action>move_to_resource</Action><Action>deliver_resource</Action></Sequence></Sequence></Selector></Sequence></BehaviorTree>

###
4.// INSTRUCTIONS: Use only the following behaviors {'read_sensors': 'Action: Read data from the robot's sensors. Always returns True.', 'process_data': 'Action: Process the sensor data to extract relevant information. Always returns True.', 'analyze_data': 'Action: Analyze the processed data to make informed decisions. Always returns True.', 'perform_action': 'Action: Perform a specific action based on the analyzed data. Always returns True.', 'is_obstacle_present': 'Condition: Checks if an obstacle is present at the current location. Returns True if an obstacle is present, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Read sensor data, process it, analyze it, and then take action based on the analyzed data, while checking for obstacles.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>read_sensors</Action><Action>process_data</Action><Action>analyze_data</Action><Selector><Sequence><Condition>is_obstacle_present</Condition><Action>wait</Action></Sequence><Action>perform_action</Action></Selector></Sequence></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'find_waypoint': 'Action: Find the optimal path to a specified waypoint using pathfinding algorithms. Returns True once the path has been calculated.', 'navigate_to_point': 'Action: Move the robot to the specified waypoint. Returns True once the robot reaches the waypoint.', 'is_obstacle_present': 'Condition: Checks if an obstacle is present at the current location. Returns True if an obstacle is present, False otherwise.', 'avoid_obstacle': 'Action: Utilize obstacle avoidance strategies to maneuver around obstacles. Returns True once the obstacle has been successfully avoided.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Create a behavior tree for a robot to navigate to a specified waypoint while avoiding obstacles.
5.// OUTPUT:
<BehaviorTree><Sequence><Selector><Condition>is_obstacle_present</Condition><Sequence><Action>avoid_obstacle</Action></Sequence></Selector><Sequence><Action>find_waypoint</Action><Action>move_to_point</Action></Sequence></Sequence></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'find_enemy': 'Action: Utilize sensors to locate the nearest enemy. Returns True once an enemy has been detected.', 'engage_enemy': 'Action: Engage the enemy using appropriate strategies. Returns True once the enemy has been neutralized.', 'navigate_to_point': 'Action: Move the robot to a specified point. Returns True once the robot reaches the point.', 'is_enemy_present': 'Condition: Checks if an enemy is present at the current location. Returns True if an enemy is present, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Create a behavior tree for a robot to locate, engage, and neutralize enemies while navigating to a specific point.
6.// OUTPUT:
<BehaviorTree><Sequence><Selector><Condition>is_enemy_present</Condition><Sequence><Action>find_enemy</Action><Action>engage_enemy</Action></Sequence></Selector><Action>move_to_point</Action></Sequence></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'scan_surface': 'Action: Use sensors to scan the surface for any potential hazards. Always returns True.', 'identify_hazard': 'Action: Analyze the scanned data to identify potential hazards. Returns True once a hazard has been identified.', 'avoid_hazard': 'Action: Utilize avoidance strategies to maneuver around the hazard. Returns True once the hazard has been successfully avoided.', 'is_hazard_present': 'Condition: Checks if a hazard is present at the current location. Returns True if a hazard is present, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: Scan the surface for hazards, identify them, and avoid them while checking for any new hazards.
7.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>scan_surface</Action><Action>identify_hazard</Action><Selector><Sequence><Condition>is_hazard_present</Condition><Action>avoid_hazard</Action></Sequence><Action>wait</Action></Selector></Sequence></Selector></BehaviorTree> 
###
3.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_height_to_2': "Action: Change agent's height to 2. Always returns True.", 'change_height_to_10': "Action: Change agent's height to 10. Always returns True.", 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_height_2': 'Condition: Check if the agent's height is 2. Returns True if the height is 2, False otherwise.', 'is_height_10': 'Condition: Check if the agent's height is 10. Returns True if the height is 10, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3.// USER COMMAND: generate behavior tree to 'Increase height to 10 when in the nest, continue movement and avoid obstacles'. Output only the XML behavior tree without extra text.
3.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_agent_in_nest</Condition><Action>change_height_to_10</Action></Sequence><Action>continue_movement_agent</Action><Action>avoid_obstacle</Action></BehaviorTree>

###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'decrease_speed': "Action: Decrease agent's speed by 2 units. Always returns True.", 'increase_speed': "Action: Increase agent's speed by 2 units. Always returns True.", 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_speed_expensive': 'Action: Check if the agent's speed is greater than 8 units. Returns True if speed is greater than 8, False otherwise.', 'is_speed_slow': 'Action: Check if the agent's speed is less than 4 units. Returns True if speed is less than 4, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'If speed is too expensive, decrease speed by 2, if speed is too slow, increase speed by 2'. Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree><Selector><Condition>is_speed_expensive</Condition><Action>decrease_speed</Action><Condition>is_speed_slow</Condition><Action>increase_speed</Action></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'move_to_nest': "Action: Move agent to the nest. Always returns True.", 'move_to_target': "Action: Move agent towards target. Always returns True.", 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_agent_near_nest': 'Condition: Check if the agent is within 10 units of the nest. Returns True if the agent is within 10 units, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Move to nest, but only if the agent is within 10 units of the nest; if not, move towards target'. Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_agent_near_nest</Condition><Action>move_to_nest</Action></Sequence><Selector><Sequence><Condition>is_agent_in_nest</Condition><Action>task_completed</Action></Sequence><Sequence><Condition>is_target_detected</Condition><Action>move_to 
###
4.// INSTRUCTIONS: Use only the following behaviors {'detect_food_source': 'Condition: Check for nearby food sources. Returns True if a food source is detected, False otherwise.', 'gather_food': 'Action: Move towards the nearest food source and collect food. Always returns True.', 'store_food': 'Action: Store the collected food in the robot's designated storage area. Always returns True.', 'feed_neighbor': 'Action: Share stored food with a neighboring robot. Always returns True.', 'is_storage_full': 'Condition: Check if the robot's storage area is full. Returns True if the storage area is full, False otherwise.', 'is_hungry': 'Condition: Check if the robot is low on food and needs to gather more. Returns True if the robot's food level is below a certain threshold, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Collect and store food, then feed a neighboring robot if the storage area is full'
4.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>is_hungry</Condition><Selector><Action>detect_food_source</Action><Action>gather_food</Action></Selector></Sequence><Action>wander</Action></Selector><Sequence><Condition>is_storage_full</Condition><Action>store_food</Action><Action>feed_neighbor</Action></Sequence></Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'avoid_wall': 'Action: Avoid collisions with walls. Always returns True.', 'follow_path': 'Action: Follow a given path towards the target. Always returns True.', 'update_location': 'Action: Update the robot's current location based on sensor readings and movement. Always returns True.', 'is_path_blocked': 'Condition: Check if the path in the current direction is blocked or impassable. Returns True if the path is blocked, False otherwise.', 'is_target_detected': 'Condition: Check if the target is within the robot's range. Returns True if the target is within range, False otherwise.', 'is_target_reached': 'Condition: Check if the robot has reached the target. Returns True if the robot's current location is the same as the target, False otherwise.', 'is_path_completed': 'Condition: Check if the robot has completed the given path. Returns True if the robot's current location is the same as the final point in the given path, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Follow a given path, avoiding walls and obstacles, and stop when the target is reached'
5.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_target_detected</Condition><Action>follow_path</Action></Sequence><Selector><Sequence><Condition>is_path_blocked</Condition><Action>avoid_wall</Action></Sequence><Sequence><Condition>is_path_completed</Condition><Action>update_location</Action></Sequence></Selector><Sequence><Condition>is_target_reached</Condition><Action>stop_movement</Action></Sequence></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'avoid_collision': 'Action: Avoid collisions with other robots. Always returns True.', 'follow_leader': 'Action: Follow the designated leader robot. Always returns True.', 'update_position': 'Action: Update the robot's current position based on the leader's movements. Always returns True.', 'is_leader_detected': 'Condition: Check if the designated leader robot is within range. Returns True if the leader is within range, False otherwise.', 'is_position_updated': 'Condition: Check if the robot's current position matches the leader's position. Returns True if the positions match, False otherwise.', 'is_leader_in_sight': 'Condition: Check if the leader is within the robot's line of sight. Returns True if the leader is within sight, False otherwise.', 'is_movement_allowed': 'Condition: Check if the robot is allowed to move. Returns True if the robot has clearance to move, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Follow the designated leader, avoiding collisions with other robots and maintaining line of sight'
6.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_movement_allowed</Condition><Selector><Sequence><Condition>is_leader_detected</Condition><Action>follow_leader</Action></Sequence><Sequence><Condition>is_leader_in_sight</Condition><Action>update_position</Action></Sequence></Selector></Sequence><Selector><Sequence><Condition>is_leader_detected</Condition><Action>avoid_collision</Action></Sequence><Sequence><Condition>is_position_updated</Condition><Action>continue_movement</Action></Sequence></Selector></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'find_path': 'Action: Find the shortest path to a specified location. Always returns True.', 'follow_path': 'Action: Follow the given path towards the target. Always returns True.', 'update_location': 'Action: Update the robot's current location based on sensor readings and movement. Always returns True.', 'is_path_blocked': 'Condition: Check if the path in the current direction is blocked or impassable. Returns True if the path is blocked, False otherwise.', 'is_target_reached': 'Condition: Check if the robot has reached the target. Returns True if the robot's current location is the same as the target, False otherwise.', 'is_path_completed': 'Condition: Check if the robot has completed the given path. Returns True if the robot's current location is the same as the final point in the given path, False otherwise.', 'is_area_mapped': 'Condition: Check if the current area has already been mapped and explored. Returns True if the area is mapped, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: generate behavior tree to 'Navigate an unknown environment to find the target location'
7.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_area_mapped</Condition><Selector><Sequence><Condition>is_path_blocked</Condition><Action>find_path</Action></Sequence><Sequence><Action>follow_path</Action><Action>update_location</Action></Sequence></Selector></Sequence><Sequence><Condition>is_target_reached</Condition><Action>stop_movement</Action></Sequence></Selector></BehaviorTree> 
3.// INSTRUCTIONS: Use only the following behaviors {'move_to_target_position': 'Action: Move the robot to the specified target position. Returns True when the robot has reached the target position.', 'scan_for_victims': 'Action: Scan the current area for any victims using sensors. Always returns True.', 'rescue_victim': 'Action: Perform necessary actions to rescue the victim. Returns True when the victim has been rescued.', 'is_victim_detected': 'Condition: Check for any victims within the vicinity. Returns True if a victim is detected, False otherwise.', 'is_all_victims_rescued': 'Condition: Check if all victims have been rescued. Returns True if all victims have been rescued, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3.// USER COMMAND: Generate behavior tree for a robot to rescue victims from a disaster zone
3.// OUTPUT:
<BehaviorTree><Selector><Condition>is_all_victims_rescued</Condition><Sequence><Action>scan_for_victims</Action><Sequence><Condition>is_victim_detected</Condition><Action>move_to_target_position</Action><Action>rescue_victim</Action></Sequence></Selector></BehaviorTree>

4.// INSTRUCTIONS: Use only the following behaviors {'move_to_target_position': 'Action: Move the robot to the specified target position. Returns True when the robot has reached the target position.', 'scan_for_dangers': 'Action: Scan the current area for any potential dangers. Always returns True.', 'ensure_safe_exit': 'Action: Create a safe path and guide the robot towards it for a safe exit. Returns True when the exit is reached and the robot is safe.', 'is_danger_detected': 'Condition: Check for any potential dangers nearby. Returns True if a danger is detected, False otherwise.', 'is_exit_reached': 'Condition: Check if the robot has reached the safe exit. Returns True if the robot has reached the safe exit, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Generate behavior tree for a robot to safely exit a hazardous area
4.// OUTPUT:
<BehaviorTree><Selector><Condition>is_exit_reached</Condition><Sequence><Action>scan_for_dangers</Action><Selector><Condition>is_danger_detected</Condition><Sequence><Action>move_to_target_position</Action><Action>ensure_safe_exit</Action></Sequence></Selector></Sequence></Selector></BehaviorTree>

5.// INSTRUCTIONS: Use only the following behaviors {'move_to_target_item': 'Action: Move the robot to the specified target item. Returns True when the robot has reached the target item.', 'gather_items': 'Action: Gather any items in the current area and bring them to a central location. Returns True when all items have been gathered.', 'deposit_items': 'Action: Deposit the gathered items at the central location. Returns True when the items have been deposited.', 'is_item_available': 'Condition: Check for any available items within the vicinity. Returns True if an item is available, False otherwise.', 'is_all_items_collected': 'Condition: Check if all items have been collected. Returns True if all items have been collected, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Generate behavior tree for a robot to gather and deposit items from an area
5.// OUTPUT:
<BehaviorTree><Selector><Condition>is_all_items_collected</Condition><Sequence><Action>gather_items</Action><Sequence><Condition>is_item_available</Condition><Action>move_to_target_item</Action></Sequence><Action>deposit_items</Action></Sequence></Selector></BehaviorTree>

6.// INSTRUCTIONS: Use only the following behaviors {'calculate_path': 'Action: Calculate the optimal path to the specified target location. Returns True when the path is calculated.', 'follow_path': 'Action: Follow the calculated path to the target location. Returns True when the target location is reached.', 'is_path_calculated': 'Condition: Check if the path to the target has been calculated. Returns True if the path has been calculated, False otherwise.', 'is_target_reached': 'Condition: Check if the robot has reached the target location. Returns True if the robot has reached the target location, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Generate behavior tree for a robot to navigate to a specific location
6.// OUTPUT:
<BehaviorTree><Selector><Condition>is_target_reached</Condition><Sequence><Condition>is_path_calculated</Condition><Action>follow_path</Action><Action>calculate_path</Action></Sequence></Selector></BehaviorTree>

7.// INSTRUCTIONS: Use only the following behaviors {'detect_criminal': 'Action: Use facial recognition to detect a known criminal in the area. Returns True when the criminal is identified.', 'apprehend_criminal': 'Action: Apprehend the identified criminal and lead them to the nearest patrol unit. Returns True when the criminal is apprehended.', 'call_for_backup': 'Action: Send a distress signal to nearby patrol units for backup. Always returns True.', 'is_criminal_detected': 'Condition: Check for any known criminals within the vicinity. Returns True if a criminal is detected, False otherwise.', 'is_criminal_apprehended': 'Condition: Check if the criminal has been apprehended by the robot. Returns True if the criminal has been apprehended, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: Generate behavior tree for a patrol robot to detect and apprehend a known criminal in the area
7.// OUTPUT:
<BehaviorTree><Selector><Condition>is_criminal_apprehended</Condition><Sequence><Action>detect_criminal</Action><Selector><Condition>is_criminal_detected</Condition><Action>apprehend_criminal</Action><Action>call_for_backup</Action></Selector></Sequence></Selector></BehaviorTree> 
###
4.// INSTRUCTIONS: Use only the following behaviors {'explore': 'Subtree node: Represents a behavior tree for exploring unknown areas.', 'detect_nearest_obstacle': 'Action: Uses sensors to detect the nearest obstacle and return its position relative to the agent. Returns the position of the obstacle as a tuple of (x, y) coordinates.', 'move_away_from_obstacle': "Action: Move away from the nearest obstacle's position. Returns True if obstacle is successfully avoided, False otherwise."}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Explore a maze while avoiding obstacles
4.// OUTPUT:
<BehaviorTree><Sequence><Action>detect_nearest_obstacle</Action><Action>move_away_from_obstacle</Action></Sequence><Action>explore</Action></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'move_to_enemy_base': 'Action: Move to the enemy base. Always returns True.', 'attack_base': 'Action: Attack the enemy base. Returns True if the base is successfully destroyed, False if the attack fails.', 'is_enemy_in_range': 'Condition: Check if an enemy is within a certain attack range. Returns True if an enemy is detected, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Attack and destroy the enemy base while avoiding any enemy attacks
5.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_enemy_in_range</Condition><Selector><Sequence><Action>move_to_enemy_base</Action><Action>attack_base</Action></Sequence></Selector><Action>wander</Action><Action>avoid_enemy_attacks</Action></Sequence></BehaviorTree>
 
###
6.// INSTRUCTIONS: Use only the following behaviors {'call_for_help': 'Action: Call for nearby teammates to assist in a task. Always returns True.', 'engage_defensive_mode': 'Action: Switch to a defensive mode to protect against potential threats. Always returns True.', 'is_enemy_detected': 'Condition: Check if an enemy is detected within a certain radius. Returns True if an enemy is detected, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Coordinate with other robots to defend against incoming enemies
6.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_enemy_detected</Condition><Selector><Sequence><Action>engage_defensive_mode</Action></Sequence><Action>call_for_help</Action></Selector></Sequence></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'flock_together': 'Subtree node: Represents a behavior tree for coordinating the movement of a swarm of robots to flock together.', 'explore': 'Subtree node: Represents a behavior tree for exploring unknown areas.', 'gather_resource': 'Action: Gather a resource object at the current position. Returns True if a resource is successfully collected, False otherwise.', 'deposit_resource': 'Action: Deposit a resource object at the designated drop-off location. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: Coordinate the swarm of robots to explore and gather resources, and deposit them at a drop-off location
7.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>gather_resource</Action><Action>flock_together</Action><Selector><Sequence><Condition>is_at_dropoff</Condition><Action>deposit_resource</Action></Sequence></Selector></Sequence><Action>explore</Action></Selector></BehaviorTree> 
###
3.// INSTRUCTIONS: Use only the following behaviors {'spin_clockwise': 'Action: Spin in a clockwise direction. Always returns True.', 'wait': 'Action: Wait for 5 seconds. Always returns True.', 'check_rotation': 'Condition: Check current rotation. Returns True if the agent's rotation is within a specific range of degrees, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3.// USER COMMAND: Rotate in a clockwise direction until the agent's rotation is between 90 and 270 degrees.
3.// OUTPUT:
<BehaviorTree><Sequence><Condition>check_rotation</Condition><Sequence><Action>spin_clockwise</Action><Action>wait</Action></Sequence></Sequence></BehaviorTree>

###
4.// INSTRUCTIONS: Use only the following behaviors {'move_forward': 'Action: Move forward one unit. Always returns True.', 'check_distance_target': 'Condition: Check distance to target. Returns True if the agent is within a specific distance, False otherwise.', 'check_position_in_field': 'Condition: Check position in field. Returns True if the agent is in a specific position, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Move forward until the agent is within 10 units of the target, then move to a specific position in the field.
4.// OUTPUT:
<BehaviorTree><Sequence><Condition>check_distance_target</Condition><Action>move_forward</Action></Sequence><Sequence><Condition>check_position_in_field</Condition><Action>move_to_specific_position</Action></Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'scan_area': 'Action: Scan the area for resources. Always returns True.', 'collect_resource': 'Action: Collect resource if it is within 5 units. Returns True if resource is collected, False otherwise.', 'is_resource_available': 'Condition: Check if a resource is within 20 units. Returns True if a resource is available, False otherwise.', 'exists_obstacle': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'navigate': 'Action: Move towards the target. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Scan the area for resources, if a resource is available, navigate towards it and collect it. If an obstacle is detected, scan for resources again.
5.// OUTPUT:
<BehaviorTree><Sequence><Action>scan_area</Action><Selector><Sequence><Condition>is_resource_available</Condition><Sequence><Action>navigate</Action><Action>collect_resource</Action></Sequence></Sequence><Action>scan_area</Action></Selector></Sequence><Sequence><Condition>exists_obstacle</Condition><Action>scan_area</Action></Sequence></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'find_food': 'Action: Search for food within a 10 by 10 unit area. Returns True if food is found, False otherwise.', 'pick_up_food': 'Action: Pick up food if it is within reach. Returns True if food is picked up, False otherwise.', 'move_to_nest': 'Action: Move towards the nest. Always returns True.', 'is_hungry': 'Condition: Check hunger levels. Returns True if the agent is hungry, False otherwise.', 'is_resource_nearby': 'Condition: Check if a resource is within reach. Returns True if a resource is nearby, False otherwise.', 'eat_food': 'Action: Consume food. Always returns True.', 'idle': 'Action: Do nothing. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: If the agent is hungry, search for food and consume it. If there is no food nearby, move towards the nest and idle.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_hungry</Condition><Action>find_food</Action><Action>move_to_nest</Action></Sequence><Action>idle</Action></Selector><Sequence><Condition>is_resource_nearby</Condition><Action>eat_food</Action></Sequence></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'shoot_projectile': 'Action: Shoot a projectile towards the target. Returns True if the projectile hits the target, False otherwise.', 'move_to_target': 'Action: Move towards the target. Always returns True.', 'check_distance_target': 'Condition: Check distance to target. Returns True if the agent is within a specific distance, False otherwise.', 'check_health_level': 'Condition: Check health level. Returns True if the agent's health is above a specific level, False otherwise.', 'recover_health': 'Action: Wait for 5 seconds to recover health. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: Move towards the target, shooting projectiles until the agent's health drops below 50%. Then recover health for 5 seconds before continuing to attack.
7.// OUTPUT:
<BehaviorTree><Sequence><Condition>check_distance_target</Condition><Action>move_to_target</Action></Sequence><Sequence><Condition>check_health_level</Condition><Action>shoot_projectile</Action><Sequence><Action>recover_health</Action><Action>shoot_projectile</Action></Sequence></Sequence></BehaviorTree> 
###
3.// INSTRUCTIONS: Use only the following behaviors {'scan_surroundings': 'Action: Rotate 360 degrees to scan the surroundings. Returns True if scan is complete, False if interrupted.', 'move_to_target': 'Action: Move towards the target location. Returns True when target is reached, False if movement is interrupted or goal is unreachable.', 'find_waypoint': 'Action: Find and move towards the nearest waypoint. Returns True if waypoint is reached, False if not found or movement is interrupted.', 'is_goal_reached': 'Condition: Check if the goal location has been reached. Returns True if the goal has been reached, False otherwise.', 'is_waypoint_found': 'Condition: Check if a waypoint is detected within the surroundings. Returns True if a waypoint is found, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles in the surroundings. Returns True if an obstacle is detected, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3.// USER COMMAND: Generate a behavior tree to navigate a maze and reach the goal based on detected waypoints.
3.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>is_waypoint_found</Condition> <Action>move_to_target</Action> </Sequence> <Action>scan_surroundings</Action> </Selector> <Selector> <Condition>is_goal_reached</Condition> <Action>task_completed</Action> <Selector> <Condition>is_obstacle_detected</Condition> <Action>find_waypoint</Action> </Selector> </Selector> </Sequence> </BehaviorTree>
 
###
4.// INSTRUCTIONS: Use only the following behaviors {'push_object': 'Action: Push the object in the specified direction. Returns True when object is successfully pushed, False if object cannot be pushed or movement is interrupted.', 'rotate_left': 'Action: Rotate left by 90 degrees. Always returns True.', 'rotate_right': 'Action: Rotate right by 90 degrees. Always returns True.', 'is_object_in_front': 'Condition: Check if an object is detected in front of the robot. Returns True if an object is detected, False otherwise.', 'is_object_movable': 'Condition: Check if the detected object is movable. Returns True if the object can be pushed, False otherwise.', 'is_object_pushed': 'Condition: Check if the object has been successfully pushed. Returns True if the object has been pushed, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles in the surroundings. Returns True if an obstacle is detected, False otherwise.', 'is_goal_reached': 'Condition: Check if the goal location has been reached. Returns True if the goal has been reached, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Generate a behavior tree for a single robot to push a large object towards a specified goal location while avoiding obstacles.
4.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>is_obstacle_detected</Condition> <Selector> <Condition>is_object_in_front</Condition> <Selector> <Condition>is_object_movable</Condition> <Action>push_object</Action> </Selector> <Action>rotate_right</Action> <Selector> <Condition>is_object_pushed</Condition> <Action>task_completed</Action> </Selector> </Selector> <Action>rotate_left</Action> </Sequence> <Selector> <Condition>is_goal_reached</Condition> <Action>task_completed</Action> </Selector> </Sequence> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'pick_up_item': 'Action: Pick up an item from the specified location. Returns True when item is successfully picked up, False if item is not found or movement is interrupted.', 'place_item': 'Action: Place an item at the specified location. Returns True when item is successfully placed, False if item cannot be placed or movement is interrupted.', 'rotate_left': 'Action: Rotate left by 90 degrees. Always returns True.', 'rotate_right': 'Action: Rotate right by 90 degrees. Always returns True.', 'is_item_in_inventory': 'Condition: Check if the specified item is present in the robot's inventory. Returns True if item is detected, False otherwise.', 'is_item_needed': 'Condition: Check if the specified item is needed for the task. Returns True if item is needed, False otherwise.', 'is_item_placed': 'Condition: Check if the item has been successfully placed at the specified location. Returns True if item is placed, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Generate a behavior tree for a single robot to collect and place items at designated locations for a specific task.
5.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>is_item_in_inventory</Condition> <Selector> <Condition>is_item_needed</Condition> <Action>place_item</Action> </Selector> <Action>rotate_left</Action> <Selector> <Condition>is_item_placed</Condition> <Action>task_completed</Action> </Selector> </Selector> <Action>rotate_right</Action> </Sequence> <Selector> <Condition>is_item_needed</Condition> <Action>pick_up_item</Action> </Selector> </Sequence> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'disperse': 'Action: Disperse into smaller groups, each with a defined number of robots. Returns True when disperse is complete, False if interrupted.', 'gather': 'Action: Gather all robots into one group. Returns True when all robots are gathered, False if interrupted.', 'move_to_target': 'Action: Move towards the specified target location. Returns True when target is reached, False if movement is interrupted or goal is unreachable.', 'is_at_target': 'Condition: Check if the robot has reached the target location. Returns True if target is reached, False if not.', 'is_formation_broken': 'Condition: Check if the assigned formation has been broken or misaligned. Returns True if formation is broken, False otherwise.', 'is_robot_detected': 'Condition: Check for nearby robots. Returns True if another robot is detected within a certain range, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Generate a behavior tree for a group of robots to disperse into smaller groups, gather back together, and then move towards a specific target.
6.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>is_formation_broken</Condition> <Action>disperse</Action> </Sequence> <Action>
###
3.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'change_direction_right': "Action: Change agent's direction to the right. Always returns True.", 'change_direction_left': "Action: Change agent's direction to the left. Always returns True.", 'detect_obstacle': 'Action: Detect obstacles and return their location. Returns True if an obstacle is detected, False otherwise.', 'move_to_target': "Action: Move agent towards target's location. Returns True when target is reached, False otherwise.", 'random_movement': "Action: Move agent randomly in the environment. Always returns True.", 'start_mission': "Action: Send signal to start mission. Always returns True.", 'stop_mission': "Action: Send signal to stop mission. Always returns True."}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3.// USER COMMAND: generate behavior tree to 'Start mission, detect obstacles, move to target, and stop mission.'Output only the XML behavior tree without extra text.
3.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Action>start_mission</Action> <Selector> <Action>detect_obstacle</Action> <Action>move_to_target</Action> </Selector> <Action>stop_mission</Action> </Sequence> </BehaviorTree>

###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'change_direction_right': "Action: Change agent's direction to the right. Always returns True.", 'change_direction_left': "Action: Change agent's direction to the left. Always returns True.", 'detect_obstacle': 'Action: Detect obstacles and return their location. Returns True if an obstacle is detected, False otherwise.', 'move_to_target': "Action: Move agent towards target's location. Returns True when target is reached, False otherwise.", 'random_movement': "Action: Move agent randomly in the environment. Always returns True.", 'start_mission': "Action: Send signal to start mission. Always returns True.", 'stop_mission': "Action: Send signal to stop mission. Always returns True."}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Start mission, detect obstacles, move to target, stop mission, and resume mission.'Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Action>start_mission</Action> <Selector> <Action>detect_obstacle</Action> <Selector> <Action>move_to_target</Action> <Action>stop_mission</Action> </Selector> <Action>start_mission</Action> </Selector> </Sequence> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'change_position_forward': "Action: Change agent's position forward by 1 unit. Returns True when position is changed, False otherwise.", 'change_position_backward': "Action: Change agent's position backward by 1 unit. Returns True when position is changed, False otherwise.", 'detect_obstacle': 'Action: Detect obstacles and return their location. Returns True if an obstacle is detected, False otherwise.', 'move_to_target': "Action: Move agent towards target's location. Returns True when target is reached, False otherwise.", 'random_movement': "Action: Move agent randomly in the environment. Always returns True.", 'start_mission': "Action: Send signal to start mission. Always returns True.", 'stop_mission': "Action: Send signal to stop mission. Always returns True."}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Start mission, detect obstacles, move to target, stop mission, and change position forward.'Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Action>start_mission</Action> <Selector> <Action>detect_obstacle</Action> <Selector> <Action>move_to_target</Action> <Action>stop_mission</Action> </Selector> <Action>change_position_forward</Action> </Selector> </Sequence> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'change_color_to_red': "Action: Change agent's color to red. Always returns True.", 'detect_target_location': 'Action: Detect target location and return it. Returns True if target is detected, False otherwise.', 'move_in_circle': "Action: Move agent in a circular pattern. Always returns True.", 'random_movement': "Action: Move agent randomly in the environment. Always returns True.", 'start_pattern': "Action: Send signal to start circular movement pattern. Always returns True.", 'stop_pattern': "Action: Send signal to stop circular movement pattern. Always returns True.", 'wait_5_seconds': "Action: Wait for 5 seconds. Always returns True."}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Start circular movement, detect target location, wait for 5 seconds, move in circle, change color to red, stop circular movement.'Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Action>start_pattern</Action> <Selector> <Action>detect_target_location</Action> <Sequence> <Action>wait_5_seconds</Action> <Action>move_in_circle</Action> <Action>change_color_to_red</Action> </Sequence> <Action>stop_pattern</Action> </Sequence> </BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'change_direction_right': "Action: Change agent's direction to the right. Always returns True.", 'change_direction_left': "Action: Change agent's direction to the left. Always returns True.", 'detect_obstacle': 'Action: Detect obstacles and return their location. Returns True if an obstacle is detected, False otherwise.', 'move_to_target': "Action: Move agent towards target's location. Returns True when target is reached, False otherwise.", 'random_movement': "Action: Move agent randomly in the environment. Always returns True.", 'start_mission': "Action: Send signal to start mission. Always returns True.", 'stop_mission': "Action: Send signal to stop mission. Always returns True.", 'collect_resource': "Action: 
3.// INSTRUCTIONS: Use only the following behaviors {'pick_up_object': 'Action: Pick up an object in the environment. Returns True if successful, False otherwise.', 'detect_obstacles': 'Condition: Check for obstacles nearby using sensors. Returns True if an obstacle is detected in the environment, False otherwise.', 'drop_object': 'Action: Drop the held object. Returns True if successful, False otherwise.', 'navigate_to_location': 'Action: Navigate to a specific location using GPS coordinates. Returns True if successful, False otherwise.', 'is_object_held': 'Condition: Check if the robot is currently holding an object. Returns True if an object is held, False otherwise.', 'is_location_reached': 'Condition: Check if the robot has reached the desired location. Returns True if the robot is at the specified location, False otherwise.', 'is_object_detected': 'Condition: Check if an object is detected in the environment. Returns True if an object is detected, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3.// USER COMMAND: generate behavior tree for a robot to collect and transport a package from point A to point B
3.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>is_location_reached</Condition><Action>drop_object</Action></Sequence><Sequence><Condition>is_object_held</Condition><Action>navigate_to_location</Action></Sequence><Selector><Sequence><Condition>detect_obstacles</Condition><Action>navigate_to_location</Action></Sequence><Sequence><Condition>is_object_detected</Condition><Action>pick_up_object</Action></Sequence></Selector></Selector></Sequence></BehaviorTree>

4.// INSTRUCTIONS: Use only the following behaviors {'move_forward': 'Action: Move the robot forward. Returns True if successful, False otherwise.', 'rotate_left': 'Action: Rotate the robot left. Returns True if successful, False otherwise.', 'rotate_right': 'Action: Rotate the robot right. Returns True if successful, False otherwise.', 'move_to_object': 'Action: Move towards a detected object. Returns True if successful, False otherwise.', 'detect_obstacles': 'Action: Detect obstacles using sensors. Returns True if successful, False otherwise.', 'is_object_detected': 'Condition: Check if an object is detected in the environment. Returns True if an object is detected, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree for a robot to navigate through a maze and reach the desired object
4.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>is_object_detected</Condition><Action>move_to_object</Action></Sequence><Sequence><Condition>is_object_detected</Condition><Action>detect_obstacles</Action></Sequence><Sequence><Condition>is_object_detected</Condition><Action>move_forward</Action></Sequence></Selector><Action>rotate_left</Action><Action>rotate_right</Action></Sequence></BehaviorTree>

5.// INSTRUCTIONS: Use only the following behaviors {'search_for_resources': 'Action: Search for resources in the environment using sensors. Returns True if resources are found, False otherwise.', 'collect_resources': 'Action: Collect the identified resources. Returns True if successful, False otherwise.', 'return_to_home': 'Action: Return to home base with the collected resources. Returns True if successful, False otherwise.', 'deposit_resources': 'Action: Deposit collected resources at home base. Returns True if successful, False otherwise.', 'is_resource_depleted': 'Condition: Check if the environment has run out of resources. Returns True if no resources are detected, False otherwise.', 'is_home_reached': 'Condition: Check if the robot has reached home base. Returns True if the robot is at home base, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree for a robot to gather resources from the environment and deposit them at home base
5.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>is_resource_depleted</Condition><Action>return_to_home</Action><Action>deposit_resources</Action></Sequence><Sequence><Condition>is_resource_depleted</Condition><Action>search_for_resources</Action><Action>collect_resources</Action></Sequence></Selector><Condition>is_home_reached</Condition></Sequence></BehaviorTree>

6.// INSTRUCTIONS: Use only the following behaviors {'detect_intruder': 'Action: Detect any intruders in the environment using sensors. Returns True if an intruder is detected, False otherwise.', 'initiate_countermeasure': 'Action: Initiate a countermeasure to remove the intruder. Returns True if successful, False otherwise.', 'alert_security': 'Action: Send an alert to the security team. Returns True if successful, False otherwise.', 'is_countermeasure_successful': 'Condition: Check if the countermeasure was successful in removing the intruder. Returns True if successful, False otherwise.', 'is_security_notified': 'Condition: Check if the security team has been alerted. Returns True if the alert was sent, False otherwise.', 'retreat_to_safe_zone': "Action: Retreat to a predetermined safe zone. Returns True if successful, False otherwise."}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree for a robot to detect and remove an intruder from the environment while alerting security and retreating to safety
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>alert_security</Action><Action>retreat_to_safe_zone</Action></Sequence><Condition>is_security_notified</Condition></Selector><Sequence><Action>detect_intruder</Action><Selector><Action>initiate_countermeasure</Action><Condition>is_countermeasure_successful</Condition></Selector></Sequence></BehaviorTree>

7.// INSTRUCTIONS: Use only the following behaviors {'pick_up_resources': 'Action: Pick up resources located in the environment. Returns True if successful, False otherwise.', 'detect_resource_pile': 'Condition: Check if a pile of resources is detected in the environment. Returns True if a pile is detected, False otherwise.', 'drop_resources': 'Action: Drop any held resources. Returns True if successful, False otherwise.', 'sort_resources': 'Action: Sort the collected resources by type. Returns True if successful, False otherwise.', 'navigate_to_resource_pile': 'Action: Move towards a detected resource pile. Returns True if successful, False otherwise.', ' is_resource_available': 'Condition: Check if any resources are available in the environment. Returns True if resources are available, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: generate behavior
###
3.// INSTRUCTIONS: Use only the following behaviors {'find_object': 'Action: Use sensors to search for and identify a specific object. Returns True if the object is found, False otherwise.', 'grab_object': 'Action: Use manipulator to pick up and secure the identified object. Returns True if successful, False otherwise.', 'move_to_storage': 'Action: Move the robot to a designated storage area. Always returns True.', 'release_object': 'Action: Release the object from the manipulator and place it in the storage area. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3.// USER COMMAND: Generate behavior tree for a robot to locate, grab, and store a specific object
3.// OUTPUT:
<BehaviorTree><Sequence><Action>find_object</Action><Selector><Sequence><Action>grab_object</Action><Action>move_to_storage</Action><Action>release_object</Action></Selector></Sequence></BehaviorTree>

###
4.// INSTRUCTIONS: Use only the following behaviors {'identify_victim': 'Action: Use sensors to detect and identify victims in a disaster scenario. Returns True if a victim is found, False otherwise.', 'navigate_to_victim': 'Action: Move the robot to the location of the identified victim. Returns True if successfully navigated, False otherwise.', 'assess_injuries': 'Action: Use cameras and sensors to assess the injuries of the victim. Returns True if assessment is complete, False otherwise.', 'treat_victim': 'Action: Administer first aid or necessary treatment to the victim. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Generate behavior tree for a robot to locate, assess, and treat victims in a disaster scenario
4.// OUTPUT:
<BehaviorTree><Sequence><Action>identify_victim</Action><Selector><Sequence><Action>navigate_to_victim</Action><Selector><Action>assess_injuries</Action><Action>treat_victim</Action></Selector></Sequence></Selector></Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'search_for_food': 'Action: Use sensors to search for potential food sources. Returns True if a source is found, False otherwise.', 'gather_food': 'Action: Use manipulator to collect and store the food found. Returns True if successful, False otherwise.', 'eat_food': 'Action: Consume food from the storage area. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Generate behavior tree for a robot to forage for and consume food
5.// OUTPUT:
<BehaviorTree><Sequence><Action>search_for_food</Action><Selector><Sequence><Action>gather_food</Action><Action>move_to_storage</Action><Action>eat_food</Action></Sequence></Selector></Sequence></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'search_for_water': 'Action: Use sensors to locate potential water sources. Returns True if a source is found, False otherwise.', 'filter_water': 'Action: Use built-in filtration system to purify collected water. Returns True if successful, False otherwise.', 'consume_water': 'Action: Consume purified water from storage area. Returns True if water is consumed, False otherwise.',
'check_environment': 'Condition: Check environmental conditions and assess the need for water. Returns True if water is needed, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Generate behavior tree for a robot to find, purify, and consume water based on environmental conditions
6.// OUTPUT:
<BehaviorTree><Sequence><Condition>check_environment</Condition><Selector><Sequence><Action>search_for_water</Action><Action>filter_water</Action><Action>move_to_storage</Action><Action>consume_water</Action></Selector></Sequence></Selector></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'detect_gas_leak': 'Action: Use sensors to detect and locate gas leaks. Returns True if a leak is detected, False otherwise.', 'seal_leak': 'Action: Use tools to seal the gas leak. Returns True if leak is successfully sealed, False otherwise.', 'evacuate_area': 'Action: Move the robot and any nearby humans to a safe location. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: Generate behavior tree for a robot to detect, seal, and evacuate a gas leak
7.// OUTPUT:
<BehaviorTree><Sequence><Action>detect_gas_leak</Action><Condition>is_leak_detected</Condition><Selector><Action>seal_leak</Action><Action>wait</Action></Selector><Action>evacuate_area</Action></Sequence></BehaviorTree>Note: 'wait' action can be replaced with any suitable action if available.

###
4.// INSTRUCTIONS: Use only the following behaviors {'find_food_source': 'Action: Search for food sources using robot's sensors. Always returns True.', 'collect_food': 'Action: Collect food from a found food source. Always returns True.', 'return_to_nest': 'Action: Return to the nest with collected food. Always returns True.', 'check_food_level': "Condition: Check the robot's current food level. Returns True if food level is below a certain threshold, False otherwise.", 'is_nest_detected': 'Condition: Check if the robot has detected the nest. Returns True if the nest is detected, False otherwise.', 'is_food_source_found': 'Condition: Check if the robot has found a food source. Returns True if a food source is detected, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Generate behavior tree for a robot to search for and collect food, and return to the nest when hungry
4.// OUTPUT:
<BehaviorTree><Sequence><Selector><Condition>check_food_level</Condition><Selector><Sequence><Condition>is_food_source_found</Condition><Action>collect_food</Action><Action>return_to_nest</Action></Sequence></Selector></Selector><Action>find_food_source</Action></Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'follow_leader': 'Action: Follow the designated leader robot. Always returns True.', 'gather_items': 'Action: Gather any items seen along the way using robot's sensors. Always returns True.', 'distribute_items': 'Action: Distribute gathered items evenly among all robots. Always returns True.', 'is_leader_out_of_range': 'Condition: Check if the designated leader robot is out of range. Returns True if the leader is out of range, False otherwise.', 'is_item_found': 'Condition: Check if an item has been detected by the robot. Returns True if an item is found, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Generate behavior tree to follow a designated leader robot, gather any items seen along the way, and distribute them evenly among all robots
5.// OUTPUT:
<BehaviorTree><Sequence><Selector><Condition>is_leader_out_of_range</Condition><Selector><Sequence><Condition>is_item_found</Condition><Action>gather_items</Action><Action>distribute_items</Action></Sequence></Selector></Selector><Action>follow_leader</Action></Sequence></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'self_organization': 'Action: Perform self-organizing behavior by forming and joining groups with other robots. Always returns True.', 'coordinate_movement': 'Action: Coordinate movement with other robots in the same group. Always returns True.', 'form_circle': 'Action: Form a circle formation with all robots in the same group. Always returns True.', 'is_grouped': 'Condition: Check if the robot is currently grouped with other robots. Returns True if grouped, False otherwise.', 'is_circle_formed': 'Condition: Check if a circle formation has been achieved with all robots in the group. Returns True if the circle formation is formed, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Generate behavior tree for a robot to self-organize and form a circle with other robots in its group
6.// OUTPUT:
<BehaviorTree><Sequence><Selector><Condition>is_grouped</Condition><Selector><Sequence><Condition>is_circle_formed</Condition><Action>coordinate_movement</Action><Action>form_circle</Action></Sequence></Selector></Selector><Action>self_organization</Action></Sequence></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'build_structure': 'Action: Use gathered resources to build a designated structure. Always returns True.', 'gather_resources': 'Action: Search for and gather resources using robot's sensors. Always returns True.', 'deliver_resources': 'Action: Deliver resources to designated location. Always returns True.', 'is_structure_complete': 'Condition: Check if the designated structure is complete. Returns True if structure is complete, False otherwise.', 'is_resource_found': 'Condition: Check if a resource has been detected by the robot. Returns True if a resource is found, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: Generate behavior tree for a robot to search for and gather resources, use them to build a designated structure, and deliver it to the designated location
7.// OUTPUT:
<BehaviorTree><Sequence><Selector><Condition>is_structure_complete</Condition><Selector><Sequence><Condition>is_resource_found</Condition><Action>gather_resources</Action><Action>deliver_resources</Action></Sequence></Selector></Selector><Action>build_structure</Action></Sequence></BehaviorTree> 
###
3.// INSTRUCTIONS: Use only the following behaviors {'identify_target': 'Subtree node: Represents a behavior tree for identifying potential targets.', 'move_to_target': 'Action: Move towards the designated target.', 'attack': 'Action: Performs an attack on the target. Always returns True.', 'is_target_visible': 'Condition: Checks if the target is visible to the agent. Returns True if visible, False otherwise.', 'is_target_alive': 'Condition: Checks if the target is still alive. Returns True if alive, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3.// USER COMMAND: Identify and attack the visible target, while ensuring the target is still alive.
3.// OUTPUT:
<BehaviorTree><Sequence><Action>identify_target</Action><Condition>is_target_visible</Condition><Sequence><Action>move_to_target</Action><Condition>is_target_alive</Condition><Action>attack</Action></Sequence></Sequence></BehaviorTree>

###
4.// INSTRUCTIONS: Use only the following behaviors {'explore': 'Subtree node: Represents a behavior tree for exploring the environment.', 'collect_resource': 'Subtree node: Represents a behavior tree for collecting resources.', 'deposit_resource': 'Action: Moves to a designated location to deposit collected resources. Always returns True.', 'is_resource_available': 'Condition: Checks if a resource is available in the current location. Returns True if available, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Explore the environment and collect resources. If no resources are available, continue exploring until resources are found and deposit them at a designated location.
4.// OUTPUT:
<BehaviorTree><Sequence><Action>explore</Action><Sequence><Action>collect_resource</Action><Condition>is_resource_available</Condition><Action>deposit_resource</Action></Sequence></Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'detect_obstacle': 'Subtree node: Represents a behavior tree for detecting obstacles in the robot's path.', 'avoid_obstacle': 'Action: Moves the robot around the obstacle. Always returns True.', 'move_to_destination': 'Action: Moves the robot to the specified destination. Always returns True.', 'is_destination_reached': 'Condition: Checks if the robot has reached the designated destination. Returns True if reached, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Detect and avoid obstacles while moving towards a specific destination. Stop moving once the destination is reached.
5.// OUTPUT:
<BehaviorTree><Sequence><Action>detect_obstacle</Action><Condition>is_destination_reached</Condition><Sequence><Action>avoid_obstacle</Action><Action>move_to_destination</Action></Sequence></Sequence></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'explore': 'Subtree node: Represents a behavior tree for exploring the environment.', 'collect_item': 'Subtree node: Represents a behavior tree for collecting specific items.', 'use_item': 'Action: Use the collected item. Always returns True.', 'is_item_needed': 'Condition: Checks if the collected item is needed for the current task. Returns True if needed, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Explore and collect items. If a needed item is found, use it immediately.
6.// OUTPUT:
<BehaviorTree><Sequence><Action>explore</Action><Sequence><Action>collect_item</Action><Condition>is_item_needed</Condition><Action>use_item</Action></Sequence></Sequence></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'search_target': 'Subtree node: Represents a behavior tree for searching for a designated target.', 'move_to_target': 'Action: Move towards the designated target. Always returns True.', 'scan_area': 'Action: Use sensors to scan the surrounding area. Always returns True.', 'is_target_found': 'Condition: Checks if the target has been located. Returns True if found, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: Use sensors to scan the area and search for a designated target. Move towards the target once it has been found.
7.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>scan_area</Action><Condition>is_target_found</Condition><Action>move_to_target</Action></Sequence><Action>search_target</Action></Selector></BehaviorTree> 
###
4.// INSTRUCTIONS: Use only the following behaviors {'scan_area': 'Action: Make the robot scan the surrounding area for potential threats. Always returns True.', 'avoid_enemy': 'Action: Avoid any detected enemies. Always returns True.', 'stroll': 'Action: Move around the environment in a random path. Always returns True.', 'is_enemy_detected': 'Condition: Checks if enemies are within 30 units. Returns True if enemies are detected within 30 units, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Scan the area for enemies and avoid them while strolling around the environment.
4.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>is_enemy_detected</Condition><Action>avoid_enemy</Action></Sequence><Action>stroll</Action></Selector><Action>scan_area</Action></Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'detect_landmarks': 'Action: Make the robot detect and identify landmarks in the environment. Always returns True.', 'navigate_to_landmark': 'Subtree node: Represents a behavior tree for navigating the robot to a specific landmark.', 'enter_building': 'Subtree node: Represents a behavior tree for entering a building once a landmark is reached.', 'is_landmark_detected': 'Condition: Checks if a landmark is detected within 50 units. Returns True if a landmark is detected within 50 units, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Detect and identify landmarks, then navigate to one and enter the building.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>detect_landmarks</Action><Selector><Sequence><Condition>is_landmark_detected</Condition><Action>navigate_to_landmark</Action><Action>enter_building</Action></Sequence></Selector></Sequence></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'detect_intruder': 'Action: Detect and track any intruders within the robot's range. Always returns True.', 'guard_intruder': 'Subtree node: Represents a behavior tree for guarding and monitoring the detected intruder.', 'alert_team': 'Action: Alert the rest of the team about the detected intruder. Always returns True.', 'is_intruder_nearby': 'Condition: Checks if an intruder is within 40 units. Returns True if an intruder is detected within 40 units, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: If an intruder is detected, track and guard them while alerting the team.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_intruder_nearby</Condition><Action>detect_intruder</Action><Selector><Sequence><Action>guard_intruder</Action><Action>alert_team</Action></Sequence></Selector></Sequence></Selector></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'detect_victims': 'Action: Detect and locate victims in the environment. Always returns True.', 'reach_victims': 'Subtree node: Represents a behavior tree for reaching victims and providing necessary aid.', 'gather_supplies': 'Subtree node: Represents a behavior tree for gathering necessary supplies to provide aid to the victims.', 'is_rescue_complete': 'Condition: Checks if all victims have been rescued. Returns True if all victims have been rescued, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: Detect and locate victims, then reach them and provide necessary aid. Once all victims are rescued, gather necessary supplies.
7.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>detect_victims</Action><Selector><Sequence><Action>reach_victims</Action><Condition>is_rescue_complete</Condition></Sequence></Selector></Sequence><Sequence><Selector><Action>gather_supplies</Action></Selector></Sequence></Selector></BehaviorTree>###
3.// INSTRUCTIONS: Use only the following behaviors {'move_to_point': 'Action: Move to the specified point. Always returns True.', 'is_point_reached': 'Condition: Check if the specified point is reached. Returns True if the point is reached, False otherwise.', 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_yellow': "Action: Change agent's color to yellow. Always returns True.", 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3.// USER COMMAND: generate behavior tree to 'Navigate to a specific location, avoiding obstacles, and change color to yellow when the target is reached'. Output only the XML behavior tree without extra text.
3.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_target_detected</Condition><Action>change_color_to_yellow</Action><Sequence><Condition>is_target_reached</Condition><Action>task_completed</Action></Sequence></Sequence><Sequence><Condition>is_obstacle_detected</Condition><Action>avoid_obstacle</Action><Sequence><Condition>is_point_reached</Condition><Action>task_completed</Action></Sequence></Sequence><Action>move_to_point</Action></Selector></BehaviorTree>

###
4.// INSTRUCTIONS: Use only the following behaviors {'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_blue': "Action: Change agent's color to blue. Always returns True.", 'is_at_waypoint': 'Condition: Check if the agent has reached the designated waypoint. Returns True if at the waypoint, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 10 units. Returns True if the target is within 10 units of distance, False otherwise.', 'move_forward': 'Action: Move forward in a straight line. Always returns True.', 'move_backward': 'Action: Move backward in a straight line. Always returns True.', 'turn_left': 'Action: Turn the robot 90 degrees to the left. Always returns True.', 'turn_right': 'Action: Turn the robot 90 degrees to the right. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Explore the environment, avoiding obstacles, and reach the target location with a blue color indicator'. Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_target_reached</Condition><Action>change_color_to_blue</Action></Sequence><Sequence><Condition>is_obstacle_detected</Condition><Action>avoid_obstacle</Action><Sequence><Condition>is_at_waypoint</Condition><Action>move_backward</Action></Sequence></Sequence><Action>move_forward</Action></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'change_color_to_orange': "Action: Change agent's color to orange. Always returns True.", 'follow_leader': 'Action: Follow the leader robot. Always returns True.', 'is_leader_visible': 'Condition: Check if the leader robot is visible. Returns True if the leader is within the field of view, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 10 units. Returns True if the target is within 10 units of distance, False otherwise.', 'move_forward': 'Action: Move forward in a straight line. Always returns True.', 'move_backward': 'Action: Move backward in a straight line. Always returns True.', 'turn_left': 'Action: Turn the robot 90 degrees to the left. Always returns True.', 'turn_right': 'Action: Turn the robot 90 degrees to the right. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Follow the leader robot, change color to orange when the target is reached'. Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_leader_visible</Condition><Action>follow_leader</Action><Sequence><Condition>is_target_reached</Condition><Action>change_color_to_orange</Action></Sequence></Sequence><Sequence><Condition>is_leader_visible</Condition><Sequence><Condition>is_target_reached</Condition><Action>change_color_to_orange</Action></Sequence></Sequence><Action>move_forward</Action></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_pink': "Action: Change agent's color to pink. Always returns True.", 'is_at_waypoint': 'Condition: Check if the agent has reached the designated waypoint. Returns True if at the waypoint, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'move_forward': 'Action: Move forward in a straight line. Always returns True.', 'turn_left': 'Action: Turn the robot 90 degrees to the left. Always returns True.', 'turn_right': 'Action: Turn the robot 90 degrees to the right. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Navigate to the designated waypoint, avoiding obstacles, and change color to pink when the waypoint is reached'. Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>is_obstacle_detected</Condition><Action>avoid_obstacle</Action></Sequence><Condition>is_path_clear</Condition><Action>move_forward</Action></Selector><Selector><Sequence><Condition>is_at_waypoint</Condition><Action>change_color_to_pink</Action></Sequence><Action>wander</Action></Selector></Sequence></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'drop_target': 'Action: Drop the target object at the designated drop-off location. Always returns True.', 'grab 
###
4.// INSTRUCTIONS: Use only the following behaviors {'move_forward': 'Action: Move one step forward. Always returns True.', 'turn_right': 'Action: Turn the robot 90 degrees to the right. Always returns True.', 'turn_left': 'Action: Turn the robot 90 degrees to the left. Always returns True.', 'navigate_to_target': 'Action: Navigate to a specified target location using GPS coordinates. Always returns True.', 'recharge': 'Action: Recharge the robot's battery. Returns True when battery is fully charged.', 'is_battery_low': 'Condition: Check if the robot's battery level is below 20%. Returns True if battery level is low, False otherwise.', 'has_reached_target': 'Condition: Check if the robot has reached the designated target location. Returns True if the target has been reached, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Navigate the robot to a specific location while ensuring the battery is sufficiently charged.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_battery_low</Condition><Action>recharge</Action></Sequence><Sequence><Condition>has_reached_target</Condition><Selector><Sequence><Action>turn_right</Action><Action>move_forward</Action></Sequence><Action>navigate_to_target</Action></Selector></Sequence></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'collect_resource': 'Action: Collect the resource located at the current position. Always returns True.', 'drop_resource': 'Action: Drop the currently held resource at the designated storage location. Always returns True.', 'is_resource_present': 'Condition: Check if a resource is present at the current position. Returns True if a resource is present, False otherwise.', 'has_reached_storage': 'Condition: Check if the robot has reached the designated storage location. Returns True if the storage location has been reached, False otherwise.', 'is_storage_full': 'Condition: Check if the designated storage location is full. Returns True if the storage is full, False otherwise.'}, to construct behavior tree in XML format to the following command.
If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Design a behavior tree for a robot to collect and store resources while managing storage capacity.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_storage_full</Condition><Action>relocate_storage_location</Action></Sequence><Sequence><Condition>has_reached_storage</Condition><Action>drop_resource</Action></Sequence><Sequence><Condition>is_resource_present</Condition><Selector><Sequence><Condition>has_reached_storage</Condition><Action>drop_resource</Action></Sequence><Action>collect_resource</Action></Selector></Sequence></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'detect_target': 'Action: Use sensors to detect and identify the target. Always returns True.', 'approach_target': 'Action: Move towards the designated target. Returns True when the target is within a certain distance.', 'attack_target': 'Action: Once within range, attack the designated target. Returns True when the target has been successfully attacked.', 'is_target_detected': 'Condition: Check if the target has been detected. Returns True if the target is detected, False otherwise.', 'is_target_in_range': 'Condition: Check if the target is within range of the robot's weapons. Returns True if the target is in range, False otherwise.', 'has_target_been_eliminated': 'Condition: Check if the designated target has been eliminated. Returns True if the target has been eliminated, False otherwise.'}, to construct behavior tree in XML format to the following command.
If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Create a behavior tree for a robot to detect and eliminate a designated target.
6.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_target_detected</Condition><Sequence><Condition>is_target_in_range</Condition><Selector><Sequence><Action>approach_target</Action><Condition>has_target_been_eliminated</Condition></Sequence><Action>detect_target</Action></Selector></Sequence></Sequence></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'collect_dropoff': 'Action: Collect the designated payload and transport it to the designated drop off location. Returns True when payload is successfully delivered.', 'detect_intruder': 'Condition: Use sensors to detect any intruders in the area. Returns True if an intruder is detected, False otherwise.', 'is_payload_loading': 'Condition: Check if the robot is currently in the process of loading the payload. Returns True if the payload is being loaded, False otherwise.', 'avoid_intruder': 'Action: Avoid the detected intruder safely. Returns True when the robot has moved away from the danger zone.'}, to construct behavior tree in XML format to the following command.
If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: Develop a behavior tree for a robot to collect and transport a payload while avoiding potential intruders in the area.
7.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_payload_loading</Condition><Selector><Sequence><Action>avoid_intruder</Action><Condition>has_moved_to_safe_distance</Condition></Sequence><Action>collect_dropoff</Action></Selector></Sequence><Sequence><Condition>detect_intruder</Condition><Action>avoid_intruder</Action></Sequence></Selector></BehaviorTree> 
###
4.// INSTRUCTIONS: Use only the following behaviors {'move_towards_food': 'Action: Move towards the food. Always returns True.', 'move_away_from_predator': 'Action: Move away from the predator. Always returns True.', 'identify_pheromone': 'Action: Identify and follow the strongest pheromone trail. Always returns True.', 'deposit_food': 'Action: Deposit food in the storage area. Always returns True.', 'is_food_detected': 'Condition: Check if food is within range. Returns True if food is detected, False otherwise.', 'is_predator_detected': 'Condition: Check if a predator is within range. Returns True if a predator is detected, False otherwise.', 'is_storage_full': 'Condition: Check if the storage area is full. Returns True if full, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Create a behavior tree that allows a swarm of robots to forage for food while avoiding predators, following pheromone trails, and depositing food in a storage area.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_food_detected</Condition><Action>move_towards_food</Action><Sequence><Condition>is_predator_detected</Condition><Action>move_away_from_predator</Action></Sequence><Action>identify_pheromone</Action></Sequence><Sequence><Condition>is_storage_full</Condition><Action>return_to_nest</Action></Sequence></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'explore_area': 'Action: Explore a new area. Always returns True.', 'is_home_found': 'Condition: Check whether the home base is within range. Returns True when home base is within range, False otherwise.', 'is_enemy_detected': 'Condition: Check if enemies are nearby. Returns True if enemies are detected, False otherwise.', 'shoot_enemy': 'Action: Shoot enemies. Always returns True.', 'tactile_rotation': 'Action: Rotate body according to tactile sensors. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Generate a behavior tree for a swarm of robots to explore a new area, while avoiding enemies and returning to home base when necessary.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_enemy_detected</Condition><Action>shoot_enemy</Action></Sequence><Sequence><Condition>is_home_found</Condition><Action>tactile_rotation</Action></Sequence><Sequence><Condition>is_explore_needed</Condition><Action>explore_area</Action></Sequence></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'retrieve_object': 'Action: Pick up and retrieve an object. Always returns True.', 'place_object_on_pile': 'Action: Place the retrieved object on top of a pile. Always returns True.', 'move_to_object': 'Action: Move towards the closest object. Always returns True.', 'is_object_found': 'Condition: Check if an object is within range. Returns True if an object is detected, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Create a behavior tree for a swarm of robots to retrieve and stack objects onto a pile while navigating obstacles.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_object_found</Condition><Action>move_to_object</Action><Action>retrieve_object</Action><Action>place_object_on_pile</Action></Sequence><Action>avoid_obstacle</Action></Selector></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'synchronize_time': 'Action: Synchronize the time between all swarm robots. Always returns True.', 'send_message': 'Action: Send a message to other robots. Always returns True.', 'receive_message': 'Condition: Check for incoming messages. Returns True if a message is received, False otherwise.', 'perform_task': 'Action: Perform a task based on received message. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: Create a behavior tree for a swarm of robots to coordinate and communicate with each other while completing tasks.
7.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>receive_message</Condition><Action>perform_task</Action></Sequence><Action>synchronize_time</Action></Selector><Selector><Sequence><Condition>receive_message</Condition><Action>perform_task</Action></Sequence><Action>send_message</Action></Selector></BehaviorTree>
 
###
4.// INSTRUCTIONS: Use only the following behaviors {'detect_landmark': 'Action: Use sensors to detect a specific landmark in the environment. Always returns True.', 'record_landmark_location': 'Action: Record the location of the detected landmark. Always returns True.', 'calculate_distance_to_landmark': 'Action: Calculate the distance from the robot to the landmark based on its current location. Always returns True.', 'identify_closest_landmark': 'Action: Identify the closest landmark to the robot based on its recorded locations. Always returns True.', 'is_within_safe_distance': 'Condition: Check if the robot is within a safe distance from the closest landmark. Returns True if the distance is within the safe range, False otherwise.', 'is_obstacle_ahead': 'Condition: Check if there is an obstacle directly ahead of the robot. Returns True if an obstacle is detected, False otherwise.', 'is_target_reached': 'Condition: Check if the robot has reached the designated target location. Returns True if the target is reached, False otherwise.', 'move_to_target': 'Action: Move the robot towards the designated target location. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Generate a behavior tree for a robot to navigate and reach a specific landmark while avoiding obstacles
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_obstacle_ahead</Condition><Action>avoid_obstacle</Action></Sequence><Sequence><Condition>is_target_reached</Condition><Selector><Sequence><Action>detect_landmark</Action><Action>record_landmark_location</Action><Action>calculate_distance_to_landmark</Action><Action>identify_closest_landmark</Action><Action>is_within_safe_distance</Action></Sequence><Action>move_to_target</Action></Selector></Sequence></Selector><Action>move_to_next_area</Action></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'find_path_to_goal': 'Action: Use algorithms to find the shortest path to reach the designated goal. Always returns True.', 'follow_path': 'Action: Follow the generated path to the goal. Always returns True.', 'detect_obstacles': 'Action: Use sensors to detect any obstacles nearby. Always returns True.', 'is_goal_reached': 'Condition: Check if the robot has reached the designated goal. Returns True if the goal is reached, False otherwise.', 'switch_to_alternate_path': 'Action: Switch to an alternate path if the original path is blocked by obstacles. Always returns True.', 'evaluate_alternate_path': 'Action: Evaluate the alternate path and determine if it is a better option. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Generate a behavior tree for a robot to navigate to a goal location while avoiding obstacles and be able to switch to an alternate path if necessary 
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_obstacle_detected</Condition><Action>detect_obstacles</Action><Selector><Sequence><Action>find_path_to_goal</Action><Action>follow_path</Action></Sequence><Action>switch_to_alternate_path</Action></Selector></Sequence><Condition>is_goal_reached</Condition><Selector><Sequence><Action>evaluate_alternate_path</Action><Action>follow_path</Action></Sequence><Action>continue_movement_agent</Action></Selector></Sequence></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'start_attack': 'Action: Begin attacking the designated target using weapons and strategies. Always returns True.', 'scan_for_enemies': 'Action: Use sensors to scan the environment for potential enemy targets. Always returns True.', 'evaluate_enemy_strength': 'Action: Evaluate the strength and resources of the detected enemy target. Always returns True.', 'is_enemy_outnumbered': 'Condition: Check if the enemy forces are outnumbered. Returns True if the enemy is outnumbered, False otherwise.', 'is_enemy_weak': 'Condition: Check if the enemy is weak and vulnerable. Returns True if the enemy is weak, False otherwise.', 'move_to_strategic_position': 'Action: Move to a strategic position to effectively attack the enemy. Always returns True.', 'retreat': 'Action: Retreat to a safe location if the battle is not going in our favor. Always returns True.', 'is_robot_damaged': 'Condition: Check if the robot has sustained significant damage. Returns True if the robot is damaged, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Generate a behavior tree for a robot to engage in battle and adapt strategies based on enemy strength 
6.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_robot_damaged</Condition><Selector><Sequence><Action>retreat</Action><Action>scan_for_enemies</Action><Selector><Sequence><Condition>is_enemy_weak</Condition><Action>start_attack</Action></Sequence><Action>move_to_strategic_position</Action></Selector></Sequence><Selector><Sequence><Condition>is_enemy_outnumbered</Condition><Action>start_attack</Action></Sequence><Action>evaluate_enemy_strength</Action></Selector></Selector></Sequence></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'move_to_target_location': 'Action: Move towards the designated target location. Always returns True.', 'patrol_area': 'Action: Patrol the designated area to ensure security and safety. Always returns True.', 'detect_fire': 'Action: Use sensors to detect any fires within the area. Always returns True.', 'extinguish_fire': 'Action: Use extinguishing equipment to put out the fire. Always returns True.', 'signal_for_help': 'Action: Send a distress signal for additional help if needed. Always returns True.', 'return_to_base': 'Action: Return to the base station for recharging and repairs. Always returns True.', 'is_emergency': 'Condition: Check if an emergency situation is detected. Returns True if an emergency is detected, False otherwise.', 'is_fire_present': 'Condition: Check if a fire is detected within the area. Returns True if a fire is detected, False otherwise.', 'is_battery_low': 'Condition: Check if the robot's battery level is low. Returns True if the battery is low, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: Generate a behavior tree for a robot to secure and monitor an area while being able to respond to emergencies and low battery 
7.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_battery_low</Condition><Selector><Sequence><Action>return_to_base</Action><Action>recharge_battery</Action></Sequence><Action>patrol_area</Action></Selector></Sequence
###
3.// INSTRUCTIONS: Use only the following behaviors {'attack_enemy': 'Action: Move towards and attack the nearest enemy. Always returns True.', 'evade_enemy': 'Action: Try to escape from the nearest enemy. Always returns True.', 'get_ammo': 'Action: Find and collect ammo. Always returns True.', 'friendly_fire': 'Condition: Check if there are any adjacent friendly units. Returns True if there are, False otherwise.','health_critical': 'Condition: Check if the agent's health is critical. Returns True if health is below 30, False otherwise.', 'has_ammo': 'Condition: Check if the agent has any ammo left. Returns True if there is any ammo, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3.// USER COMMAND: Attack the nearest enemy, but only if there are no friendly units nearby. If health is critical, try to find and collect ammo before attacking.
3.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>friendly_fire</Condition> <Action>evade_enemy</Action> </Sequence> <Action>attack_enemy</Action> <Condition>health_critical</Condition> <Sequence> <Condition>has_ammo</Condition> <Action>get_ammo</Action> </Sequence> </Selector> </Sequence> </BehaviorTree>

###
4.// INSTRUCTIONS: Use only the following behaviors {'gather_resources': 'Action: Collect resources from nearby sources. Always returns True.', 'construct_building': 'Action: Constructs a specified building. Always returns True.', 'is_building_completed': 'Condition: Checks if the specified building is completed. Returns True if completed, False otherwise.', 'is_resource_full': 'Condition: Checks if resource capacity has been reached. Returns True if full, False otherwise.', 'is_resource_nearby': 'Condition: Checks if there are any resources nearby. Return True if there are, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Gather resources if resource capacity has not been reached. Build a specified building if enough resources are collected.
4.// OUTPUT:
<BehaviorTree> <Sequence> <Condition>is_resource_nearby</Condition> <Condition>is_resource_full</Condition> <Sequence> <Action>gather_resources</Action> </Sequence> <Condition>is_building_completed</Condition> <Sequence> <Action>construct_building</Action> </Sequence> </Sequence> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'search_for_target': 'Subtree node: Searches for a moving target.', 'chase_target': 'Action: Move towards and chase the target. Always returns True.', 'shoot_target': 'Action: Shoot at the target if within range. Always returns True.', 'target_in_sight': 'Condition: Checks if the target is in the agent's line of sight. Returns True if target is in sight, False otherwise.', 'distance_to_target': 'Condition: Checks the distance to the target. Returns True if within shooting range, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Search for a moving target. Whenever target is in sight, chase and shoot at it.
5.// OUTPUT:
<BehaviorTree> <Action>search_for_target</Action> <Sequence> <Condition>target_in_sight</Condition> <Action>chase_target</Action> </Sequence> <Condition>distance_to_target</Condition> <Action>shoot_target</Action> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'pick_up_item': 'Action: Picks up the specified item. Always returns True.', 'use_item': 'Action: Use a specific item. Always returns True.', 'item_available': 'Condition: Checks if the specified item is available. Returns True if available, False otherwise.', 'is_inventory_full': 'Condition: Checks if the inventory is full. Returns True if full, False otherwise.', 'distance_to_item': 'Condition: Checks the distance to the specified item. Returns True if within range, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Pick up the specified item if available. Use the item if inventory is not full.
6.// OUTPUT:
<BehaviorTree> <Sequence> <Condition>item_available</Condition> <Condition>is_inventory_full</Condition> <Sequence> <Action>pick_up_item</Action> </Sequence> <Condition>distance_to_item</Condition> <Action>use_item</Action> </Sequence> </BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'detect_fire': 'Condition: Checks if there is a fire nearby. Returns True if there is a fire, False otherwise.', 'extinguish_fire': 'Action: Extinguishes the fire nearby. Always returns True.', 'get_water': 'Action: Collect water from a nearby source. Always returns True.', 'is_water_full': 'Condition: Checks if the water storage is full. Returns True if full, False otherwise.', 'is_water_available': 'Condition: Checks if there is any water nearby. Returns True if available, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: Detect and extinguish nearby fires. Collect water if the water storage is not full.
7.// OUTPUT:
<BehaviorTree> <Sequence> <Condition>detect_fire</Condition> <Condition>is_water_available</Condition> <Sequence> <Action>extinguish_fire</Action> </Sequence> <Condition>is_water_full</Condition> <Sequence> <Action>get_water</Action> </Sequence> </Sequence> </BehaviorTree>   
###
4.// INSTRUCTIONS: Use only the following behaviors {'attach_tool': 'Action: Attach a tool to the robot. Always returns True.', 'detect_target': 'Condition: Check if a target is detected within 20 units of distance. Returns True if a target is detected, False otherwise.', 'check_energy': 'Condition: Check the robot's energy level. Returns True if energy is above a specified threshold, False otherwise.', 'find_target': 'Action: Use sensors to find the target in the environment. Returns True if target is found, False otherwise.', 'gather_resource': 'Action: Gather a resource using the attached tool. Returns True if resource is successfully gathered, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Gather resources and bring them to the target location. Robot should continuously check energy levels and recharge if necessary.
4.// OUTPUT:
<BehaviorTree><Sequence><Condition>check_energy</Condition><Selector><Sequence><Condition>detect_target</Condition><Action>gather_resource</Action><Action>attach_tool</Action></Sequence><Sequence><Selector><Action>find_target</Action><Action>attach_tool</Action></Selector><Action>get_tool</Action></Sequence></Selector></Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'avoid_collision': 'Action: Use sensors to detect potential collisions and take evasive action. Always returns True.', 'repair_damage': 'Action: Repair any damage to the robot. Returns True if repair is successful, False otherwise.', 'search_for_targets': 'Action: Move around and scan the environment for any potential targets. Returns True if a target is found within a designated range, False otherwise.', 'return_to_base': 'Action: Move back to the base for repairs or refueling. Always returns True.', 'deploy_attack_unit': 'Action: Deploy an attack unit to a specified location. Returns True if deployment is successful, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Protect the base by scanning the environment for any potential threats. If a threat is detected, deploy an attack unit and repair any damage to the robot.
5.// OUTPUT:
<BehaviorTree><Sequence><Condition>search_for_targets</Condition><Action>repair_damage</Action><Condition>detect_target</Condition><Action>deploy_attack_unit</Action></Sequence><Sequence><Condition>detect_target</Condition><Action>uncover_hidden_targets</Action></Sequence><Selector><Action>avoid_collision</Action><Condition>detect_target</Condition><Selector><Action>deploy_attack_unit</Action><Action>repair_damage</Action></Selector></Selector></BehaviorTree>
   
###
6.// INSTRUCTIONS: Use only the following behaviors {'follow_path': 'Action: Move the robot in a straight line along a given path. Returns True if movement is successful, False otherwise.', 'check_object': 'Condition: Check if a specific object is within the robot's vision range. Returns True if object is detected, False otherwise.', 'locate_resource': 'Action: Use sensors to locate a resource in the environment. Returns True if resource is found, False otherwise.', 'collect_resource': 'Action: Collect the located resource. Returns True if collection is successful, False otherwise.', 'drop_resource': 'Action: Drop the resource at a specified location. Returns True if resource is successfully dropped, False otherwise.', 'wait_for_instructions': 'Condition: Checks for instructions from the user. Returns True if instructions are received, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Use the robot to locate and collect a specific resource and drop it at a designated location. If no instructions are received, wait for instructions from the user.
6.// OUTPUT:
<BehaviorTree><Sequence><Condition>locate_resource</Condition><Action>follow_path</Action><Condition>check_object</Condition><Action>collect_resource</Action><Action>follow_path</Action><Action>drop_resource</Action></Sequence><Sequence><Condition>wait_for_instructions</Condition><Action>follow_path</Action><Action>drop_resource</Action></Sequence></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'detect_obstacle': 'Condition: Check for any obstacles in the environment. Returns True if an obstacle is detected, False otherwise.', 'avoid_obstacle': 'Action: Move around an obstacle to avoid collision. Returns True if obstacle is successfully avoided, False otherwise.', 'find_target': 'Action: Use sensors to locate the target in the environment. Returns True if target is found, False otherwise.', 'move_to_target': 'Action: Move towards the target. Returns True if movement is successful, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: Navigate around any obstacles and move towards the target's location.
7.// OUTPUT:
<BehaviorTree><Sequence><Condition>detect_obstacle</Condition><Action>avoid_obstacle</Action><Condition>find_target</Condition><Action>move_to_target</Action></Sequence></BehaviorTree>Note: The logic and nesting in the output behavior tree may vary based on the specific details of the task.

###
4.// INSTRUCTIONS: Use only the following behaviors {'send_signal': 'Action: Send a signal to other robots within the swarm. Always returns True.', 'detect_signal': 'Condition: Check for a signal from another robot within the swarm. Returns True if a signal is detected, False otherwise.', 'communicate_position': 'Action: Communicate the robot's current position to other robots within the swarm. Always returns True.', 'gather_object': 'Action: Gather objects from the environment and bring them to a designated location. Always returns True.', 'build_structure': 'Action: Use gathered objects to construct a predefined structure. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Build a structure as a team by communicating positions, gathering objects, and using signals.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>send_signal</Action><Condition>detect_signal</Condition><Action>communicate_position</Action></Sequence><Sequence><Selector><Sequence><Condition>is_object_detected</Condition><Action>gather_object</Action><Condition>is_object_reached</Condition><Action>build_structure</Action></Sequence></Selector></Sequence></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'find_food_source': 'Action: Search and locate a nearby source of food. Always returns True.', 'move_towards_food': 'Action: Move towards the closest food source found. Always returns True.', 'collect_food': 'Action: Collect food from the identified source. Always returns True.', 'return_to_nest': 'Action: Navigate back to the nest while carrying collected food. Always returns True.', 'deposit_food': 'Action: Deposit collected food into the nest. Always returns True.', 'is_food_available': 'Condition: Check if food is available in the environment. Returns True if food is available, False otherwise.', 'is_food_collected': 'Condition: Check if food has been successfully collected from a source. Returns True if food is collected, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Create a behavior tree for a swarm of robots to forage and collect food sources, while ensuring that all tasks are completed efficiently.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>find_food_source</Action><Condition>is_food_available</Condition><Action>move_towards_food</Action></Sequence><Sequence><Condition>is_food_collected</Condition><Action>return_to_nest</Action></Sequence><Sequence><Condition>is_nest_reached</Condition><Action>deposit_food</Action></Sequence></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'explore': 'Action: Explore the environment, looking for new resources and opportunities. Always returns True.', 'communicate_locations': 'Action: Share location and mapping data with other robots in the swarm. Always returns True.', 'detect_resource': 'Condition: Check if a new resource has been discovered. Returns True if a resource is found, False otherwise.', 'collect_resource': 'Action: Collect the discovered resource and bring it back to the nest. Always returns True.', 'return_to_nest': 'Action: Navigate back to the nest. Always returns True.', 'is_nest_reached': 'Condition: Check if the nest has been reached. Returns True if the nest is reached, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Create a behavior tree for swarm robots to explore, map, and collect new resources in the environment, while maintaining communication and navigation to the nest.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>explore</Action><Condition>detect_resource</Condition><Action>collect_resource</Action></Sequence><Sequence><Condition>is_nest_reached</Condition><Selector><Sequence><Condition>has_location_data</Condition><Action>communicate_locations</Action></Sequence><Action>return_to_nest</Action></Selector></Sequence></Selector></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'detect_nest': 'Condition: Check if a nest is present in the environment. Returns True if a nest is detected, False otherwise.', 'go_to_nest': 'Action: Move towards the detected nest. Always returns True.', 'create_nest': 'Action: Construct a nest in the current position. Always returns True.', 'release_pheromones': 'Action: Release a trail of pheromones while moving towards the nest. Always returns True.', 'is_pheromone_detected': 'Condition: Check if a trail of pheromones is detected. Returns True if pheromones are detected, False otherwise.', 'follow_pheromones': 'Action: Follow the detected trail of pheromones to reach the nest. Always returns True.', 'return_to_nest': 'Action: Return to the nest. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: Generate a behavior tree for swarm robots to construct a new nest as a team, using pheromones to navigate and communicate.
7.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>detect_nest</Condition><Action>go_to_nest</Action></Sequence><Sequence><Selector><Sequence><Action>create_nest</Action><Action>release_pheromones</Action><Selector><Sequence><Condition>is_pheromone_detected</Condition><Action>follow_pheromones</Action></Sequence></Selector></Sequence></Selector></Sequence><Sequence><Condition>is_nest_reached</Condition><Action>return_to_nest</Action></Sequence></Selector></BehaviorTree> 
###
4.// INSTRUCTIONS: Use only the following behaviors {'analyze_surroundings': "Action: Analyze surroundings and make decisions. Always returns True.", 'follow_path': 'Action: Follow a predefined path. Always returns True.', 'detect_intruder': 'Condition: Check for any intruders within 10 units. Returns True if an intruder is detected, False otherwise.', 'is_path_blocked': 'Condition: Check if the current path is blocked. Returns True if the path is blocked, False otherwise.', 'is_destination_reached': 'Condition: Check if the last point in a path is reached. Returns True if the destination is reached, False otherwise.', 'path_finished': 'Action: Signal path completion by stopping movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Create a behavior tree for a robot to follow a path while also detecting and avoiding any potential intruders.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Trigger>detect_intruder</Trigger><Action>analyze_surroundings</Action></Sequence><Sequence><Condition>is_path_blocked</Condition><Action>path_finished</Action></Sequence><Selector><Condition>is_destination_reached</Condition><Action>follow_path</Action></Selector></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'navigate_to_destination': 'Subtree node: Helps the robot navigate to a specific destination.', 'recognize_objects': 'Condition: Check for any objects within 5 units. Returns True if an object is detected, False otherwise.', 'pick_up_object': 'Action: Pick up an object within 2 units. Always returns True.', 'move_to_position': "Action: Move to a specific position. Returns True if the position is reached, False otherwise."}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Navigate to a specific location and pick up any objects that are detected along the way.
5.// OUTPUT:
<BehaviorTree><Sequence><Action>move_to_position</Action><Sequence><Condition>recognize_objects</Condition><Sequence><Action>pick_up_object</Action><Action>navigate_to_destination</Action></Sequence></Sequence></Sequence></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'follow_leader': 'Action: Follow the designated leader. Always returns True.', 'create_line_formation': 'Action: Create a line formation with other robots. Always returns True.', 'avoid_collision': 'Condition: Check for any robots within 3 units. Returns True if a collision is imminent, False otherwise.', 'realign_formation': 'Action: Realign the formation if robots are out of position. Always returns True.', 'line_formation_complete': 'Condition: Check if the line formation is complete. Returns True if all robots are in position, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Lead a group of robots to form a line formation and avoid collisions.
6.// OUTPUT:
<BehaviorTree><Sequence><Action>follow_leader</Action><Selector><Sequence><Condition>avoid_collision</Condition><Action>realign_formation</Action></Sequence><Selector><Condition>line_formation_complete</Condition><Action>create_line_formation</Action></Selector></Selector></Sequence></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'gather_resources': 'Action: Gather resources from the environment. Always returns True.', 'build_structure': 'Action: Build a structure using gathered resources. Always returns True.', 'not_enough_resources': 'Condition: Checks if enough resources are available to build a structure. Returns True if not enough resources, False otherwise.', 'is_structure_complete': 'Condition: Checks if a structure is completed. Returns True if the structure is finished, False otherwise.', 'navigate_to_resource': 'Action: Navigate to the nearest resource. Always returns True.', 'claim_resource': 'Action: Claim a resource as occupied. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: Gather resources and use them to build a structure, while also prioritizing and claiming any available resources for the team.
7.// OUTPUT:
<BehaviorTree><Selector><Sequence><Selector><Condition>not_enough_resources</Condition><Sequence><Action>navigate_to_resource</Action><Action>gather_resources</Action></Sequence></Selector><Selector><Condition>is_structure_complete</Condition><Sequence><Action>navigate_to_resource</Action><Action>build_structure</Action></Sequence></Selector></Selector><Sequence><Condition>not_enough_resources</Condition><Sequence><Action>claim_resource</Action><Action>navigate_to_resource</Action></Sequence></Sequence></Selector></BehaviorTree>###
3.// INSTRUCTIONS: Use only the following behaviors {'detect_landmarks': 'Action: Detect landmarks in the environment using sensors. Returns a list of landmarks.', 'calculate_average_distance': 'Function: Calculate the average distance from the robot to a list of landmarks. Returns an average distance value.', 'navigate_to_landmark': 'Action: Move the robot towards a specific landmark. Always returns True.', 'is_landmark_reached': 'Condition: Check if the robot has reached the designated landmark. Returns True if the landmark is reached, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3.// USER COMMAND: Have a robot navigate to a specific landmark while avoiding obstacles and tracking its distance from the landmark.
3.// OUTPUT:
<BehaviorTree><Sequence><Selector><Condition>is_landmark_reached</Condition><Action>detect_landmarks</Action><Condition>is_obstacle_detected</Condition></Selector><Request><Action>calculate_average_distance</Action><Action>update_distance_to_landmark</Action></Request></Sequence><Sequence><Request><Action>calculate_average_distance</Action><Action>update_distance_to_landmark</Action></Request><Action>navigate_to_landmark</Action></Sequence></BehaviorTree>
###
4.// INSTRUCTIONS: Use only the following behaviors {'set_checkpoint': 'Action: Set a checkpoint in the current location for future reference. Always returns True.', 'increase_patrol_radius': 'Action: Increase the patrol radius for the robot by a certain value. Always returns True.', 'check_for_intruders': 'Condition: Check if any intruders are detected within a designated radius. Returns True if an intruder is detected, False otherwise.', 'take_defensive_position': 'Action: Move to a designated defensive position to protect the perimeter. Always returns True.', 'restore_checkpoint': 'Action: Return to a previously set checkpoint. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Design a behavior tree for a security robot to patrol and protect a designated perimeter.
4.// OUTPUT:
<BehaviorTree><Selector><Condition>check_for_intruders</Condition><Sequence><Request><Action>set_checkpoint</Action><Action>increase_patrol_radius</Action><Action>move_to_defensive_position</Action></Request><Condition>is_checkpoint_reached</Condition><Action>restore_checkpoint</Action></Sequence></Selector></BehaviorTree>
###
5.// INSTRUCTIONS: Use only the following behaviors {'identify_specific_object': 'Action: Use sensors to identify a specific object or target in the environment. Returns True if the object is identified, False otherwise.', 'gather_object': 'Action: Gather the identified object and return it to a designated location. Always returns True.', 'avoid_obstacles': 'Action: Use sensors to detect and avoid obstacles while navigating. Always returns True.', 'is_object_collected': 'Condition: Check if the identified object has been successfully collected and returned to the designated location. Returns True if the object is collected, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Create a behavior tree for a robot to identify and collect a specific object while avoiding obstacles.
5.// OUTPUT:
<BehaviorTree><Sequence><Selector><Condition>is_object_collected</Condition><Action>gather_object</Action><Condition>is_obstacle_detected</Condition></Selector><Action>identify_specific_object</Action><Action>gather_object</Action></Sequence><Action>avoid_obstacles</Action></BehaviorTree>
###
6.// INSTRUCTIONS: Use only the following behaviors {'explore_unmapped_areas': 'Action: Use sensors and mapping algorithms to explore unmapped areas in the environment. Always returns True.', 'get_current_location': 'Function: Retrieve the current location of the robot. Returns the coordinates of the current location.', 'update_map': 'Action: Update the internal map of the environment with the latest data from sensors. Always returns True.', 'detect_obstacles': 'Condition: Check if any obstacles are detected in the current location. Returns True if obstacles are detected, False otherwise.', 'recharge_batteries': 'Action: Locate and recharge the robot's batteries. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Construct a behavior tree for a robot to autonomously explore and map a large, unknown environment while managing its battery life.
6.// OUTPUT:
<BehaviorTree><Sequence><Action>get_current_location</Action><Action>update_map</Action><Condition>is_obstacle_detected</Condition><Condition>is_battery_low</Condition></Sequence><Action>detect_obstacles</Action><Action>explore_unmapped_areas</Action><Selector><Sequence><Request><Action>get_current_location</Action><Action>go_to_recharge_station</Action><Action>recharge_batteries</Action><Action>update_map</Action></Request><Action>recharge_batteries</Action></Sequence></Selector></BehaviorTree>
###
7.// INSTRUCTIONS: Use only the following behaviors {'detect_border': 'Action: Use sensors to detect the borders of the environment. Returns a list of border coordinates.', 'avoid_border': 'Action: Move away from the borders to avoid getting stuck. Always returns True.', 'follow_path': 'Action: Follow a designated path or route to navigate the environment. Always returns True.', 'calculate_distance_to_destination': 'Function: Calculate the distance from the robot's current location to the designated destination. Returns a distance value.', 'is_destination_reached': 'Condition: Check if the robot has reached the designated destination. Returns True if the destination is reached, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: Design a behavior tree for a delivery robot to navigate to a designated destination while avoiding borders and obstacles.
7.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_destination_reached</Condition><Action>detect_border</Action><Action>avoid_border</Action></Sequence><Selector><Request><Action>detect_border</Action><Action>navigate_to_destination</Action></Request><Action>calculate_distance_to_destination</Action></Selector><Action>follow_path</Action></BehaviorTree>
###
3.// INSTRUCTIONS: Use only the following behaviors {'wait': 'Action: Wait for a specified amount of time. Always returns True.', 'move_to_specific_location': 'Action: Moves agent to a designated location. Returns True when agent reaches the location.', 'perform_task': 'Subtree node: Represents a behavior tree for performing a specific task.', 'is_target_in_range': 'Condition: Checks if the target is within a designated range. Returns True if target is in range, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3.// USER COMMAND: Move to a specific location, perform a task, then wait for 5 seconds before repeating cycle.Output only the XML behavior tree without extra text.
3.// OUTPUT:
<BehaviorTree><Sequence><Action>move_to_specific_location</Action><Subtree>perform_task</Subtree><Action>wait</Action></Sequence></BehaviorTree>

###
4.// INSTRUCTIONS: Use only the following behaviors {'perform_task': 'Subtree node: Represents a behavior tree for performing a specific task.', 'move_towards_target': 'Subtree node: Represents a behavior tree for approaching a designated target.', 'stop_target_approach': 'Action: Stop approaching the target, if any. Always returns True.', 'is_target_reached': 'Condition: Checks if the target has been reached. Returns True if target is reached, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Move towards a target, perform a task, and then stop approaching the target once it has been reached.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Subtree>move_towards_target</Subtree><Subtree>perform_task</Subtree><Action>stop_target_approach</Action></Sequence><Action>"Sorry, I can't do the task."</Action></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'collect_resource': 'Action: Collect a designated resource. Returns True when resource is collected.', 'deposit_resource': 'Action: Deposit collected resource. Returns True when resource is deposited.', 'is_resource_nearby': 'Condition: Checks if a resource is nearby. Returns True if a resource is detected, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Collect resource, deposit resource, and repeat until the specified amount of resources has been reached.
5.// OUTPUT:
<BehaviorTree><Sequence><Action>collect_resource</Action><Action>deposit_resource</Action></Sequence><Loop><Condition>is_resource_nearby</Condition><Sequence><Action>collect_resource</Action><Action>deposit_resource</Action></Sequence></Loop></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'detect_and_avoid_obstacle': 'Subtree node: Represents a behavior tree for detecting and avoiding obstacles.', 'move_to_specific_location': 'Action: Moves the agent to a designated location. Returns True when agent reaches the location.', 'stop_movement': 'Action: Stop agent's movement. Always returns True.', 'is_obstacle_detected': 'Condition: Checks for obstacles nearby. Returns True if an obstacle is detected, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Move to a specific location, but avoid obstacles along the way.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>detect_and_avoid_obstacle</Action><Action>move_to_specific_location</Action></Sequence><Action>stop_movement</Action></Selector></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'detect_and_collect_resource': 'Subtree node: Represents a behavior tree for detecting and collecting resources.', 'return_to_nest': 'Subtree node: Represents a behavior tree for returning to the nest.', 'wait': 'Action: Wait for a specified amount of time. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: Detect and collect resources, return to the nest, and wait for other robots to gather before repeating.
7.// OUTPUT:
<BehaviorTree><Sequence><Action>detect_and_collect_resource</Action><Subtree>return_to_nest</Subtree><Action>wait</Action></Sequence><Loop><Condition>is_resource_in_nest</Condition><Sequence><Action>detect_and_collect_resource</Action><Subtree>return_to_nest</Subtree><Action>wait</Action></Sequence></Loop></BehaviorTree> 
###
4.// INSTRUCTIONS: Use only the following behaviors {'fly_up': 'Action: Fly the drone up one meter. Always returns True.', 'fly_down': 'Action: Fly the drone down one meter. Always returns True.', 'hover': 'Action: Hover the drone at its current altitude. Always returns True.', 'scan_area': 'Action: Scan the surrounding area with the drone's camera. Always returns True.', 'detect_person': 'Condition: Check if a person is detected in the scanned area. Returns True if a person is detected, False otherwise.', 'reach_destination': 'Condition: Check if the drone has reached its designated destination. Returns True if the destination is reached, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Generate behavior tree for a drone to scan and locate a missing person.
4.// OUTPUT:
<BehaviorTree><Sequence><Action>fly_up</Action><Action>scan_area</Action><Selector><Condition>detect_person</Condition><Action>hover</Action></Selector><Condition>reach_destination</Condition></Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'assemble_parts': 'Action: Assemble all loose parts together. Always returns True.', 'screw_parts': 'Action: Screw the assembled parts together. Always returns True.', 'test_functionality': 'Action: Test the functionality of the assembled parts. Always returns True.', 'power_off': 'Action: Power off the machine. Always returns True.', 'is_screwing_done': 'Condition: Check if all parts have been properly screwed together. Returns True if completed, False otherwise.', 'is_functional': 'Condition: Check if the assembled machine is functional after testing. Returns True if functional, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Generate behavior tree for a robot to assemble and test a complex machine with multiple parts.
5.// OUTPUT:
<BehaviorTree><Sequence><Action>assemble_parts</Action><Selector><Condition>is_screwing_done</Condition><Action>screw_parts</Action></Selector><Action>test_functionality</Action><Condition>is_functional</Condition><Action>power_off</Action></Sequence></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'detect_possible_targets': 'Action: Use sensors to scan and detect possible targets within the environment. Always returns True.', 'navigate_to_target': 'Action: Navigate to the designated target. Always returns True.', 'collect_sample': 'Action: Collect a sample from the target. Always returns True.', 'analyze_sample': 'Action: Analyze the collected sample. Always returns True.', 'is_target_reached': 'Condition: Check if the target has been reached. Returns True if target is reached, False otherwise.', 'is_sample_collected': 'Condition: Check if a sample has been successfully collected. Returns True if sample is collected, False otherwise.', 'is_sample_analyzed': 'Condition: Check if the sample has been analyzed. Returns True if sample is analyzed, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Generate behavior tree for a rover to collect and analyze a specific sample from a designated target.
6.// OUTPUT:
<BehaviorTree><Sequence><Selector><Action>detect_possible_targets</Action><Selector><Condition>is_target_reached</Condition><Action>navigate_to_target</Action></Selector></Selector><Selector><Condition>is_sample_collected</Condition><Action>collect_sample</Action></Selector><Selector><Condition>is_sample_analyzed</Condition><Action>analyze_sample</Action></Selector></Sequence></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'move_towards_conveyor': 'Action: Move towards the designated conveyor. Always returns True.', 'load_object_to_conveyor': 'Action: Load the designated object onto the conveyor. Always returns True.', 'detect_object_on_conveyor': 'Condition: Check if an object is detected on the conveyor. Returns True if an object is detected, False otherwise.', 'is_object_loaded': 'Condition: Check if the designated object has been successfully loaded. Returns True if object is loaded, False otherwise.', 'is_object_moved': 'Condition: Check if the object has been successfully moved from the conveyor. Returns True if object is moved, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: Generate behavior tree for a robotic arm to load and remove a specific object from a designated conveyor belt.
7.// OUTPUT:
<BehaviorTree><Sequence><Selector><Action>move_towards_conveyor</Action><Selector><Condition>is_object_loaded</Condition><Action>load_object_to_conveyor</Action></Selector></Selector><Selector><Condition>is_object_moved</Condition><Action>detect_object_on_conveyor</Action></Selector></Sequence></BehaviorTree>
###
3.// INSTRUCTIONS: Use only the following behaviors {'find_closest_rock': 'Action: Find and pick up the closest rock to the robot using sensors. Always returns True.', 'drop_rock': 'Action: Drop the rock that the robot is currently carrying. Always returns True.', 'check_battery': 'Condition: Check the current battery level of the robot. Returns True if the battery level is below a certain threshold, False otherwise.', 'recharge_battery': 'Action: Return to the charging station to recharge the robot\'s battery. Always returns True.', 'are_all_rocks_collected': 'Condition: Check if all the rocks in the area have been collected. Returns True if all rocks are collected, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3.// USER COMMAND: Generate behavior tree for a robot to collect all the rocks in an area while monitoring its battery level and recharging when necessary
3.// OUTPUT:
<BehaviorTree><Sequence><Condition>are_all_rocks_collected</Condition><Selector><Sequence><Action>find_closest_rock</Action><Action>drop_rock</Action></Sequence><Sequence><Condition>check_battery</Condition><Action>recharge_battery</Action></Sequence></Selector></Sequence></BehaviorTree>

###
4.// INSTRUCTIONS: Use only the following behaviors {'detect_fire': 'Action: Detect and record the location of any fires in the area using data from thermal sensors. Returns True if a fire is detected, False otherwise.', 'navigate_to_water_source': 'Action: Find and move towards the nearest water source in the area using GPS. Returns True once the water source is reached.', 'extinguish_fire': 'Action: Use the robot's built-in fire-extinguishing mechanism to put out the fire. Returns True once the fire is extinguished.', 'are_all_fires_extinguished': 'Condition: Check if all the fires in the area have been extinguished. Returns True if all fires are out, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Generate behavior tree for a robot to detect and extinguish all fires in an area while also monitoring its water supply and refilling when necessary
4.// OUTPUT:
<BehaviorTree><Sequence><Condition>are_all_fires_extinguished</Condition><Selector><Sequence><Action>detect_fire</Action><Selector><Action>navigate_to_water_source</Action><Action>extinguish_fire</Action></Selector></Sequence><Sequence><Condition>check_water_supply</Condition><Action>refill_water</Action></Sequence></Selector></Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'search_for_food': 'Action: Use sensors to search for sources of food in the area. Always returns True.', 'collect_food': 'Action: Pick up any food found and bring it back to the designated storage location. Returns True once the food is collected.', 'restock_food': 'Action: Return to a nearby source of food and restock the designated food storage area. Returns True once the food is restocked.', 'is_food_supply_low': 'Condition: Check if the current food supply is below a certain threshold. Returns True if supply is low, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Generate behavior tree for a robot to search for and collect food, while also monitoring the food supply and restocking when necessary
5.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_food_supply_low</Condition><Selector><Sequence><Action>search_for_food</Action><Action>collect_food</Action></Sequence><Sequence><Action>restock_food</Action></Sequence></Selector></Sequence></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'identify_anomaly': 'Action: Use sensors to identify any unusual activity or anomalies in the environment. Returns True if an anomaly is detected, False otherwise.', 'report_anomaly': 'Action: Send a report with details about the identified anomaly to the designated server. Always returns True.', 'navigate_to_next_point': 'Action: Move to the next designated point on the map, using data from GPS and internal mapping. Returns True once the designated point is reached.', 'continue_patrol': 'Action: Continue patrolling the area by navigating to the next designated point. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Generate behavior tree for a robot to patrol an area, while also constantly monitoring for any anomalies and reporting them when found
6.// OUTPUT:
<BehaviorTree><Sequence><Selector><Action>continue_patrol</Action><Sequence><Condition>identify_anomaly</Condition><Selector><Action>report_anomaly</Action><Action>navigate_to_next_point</Action></Selector></Sequence></Selector></Sequence></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'identify_person': 'Action: Use sensors to identify and track a person in the area. Returns True if a person is detected, False otherwise.', 'move_towards_person': 'Action: Move towards the person using GPS data and sensors. Returns True once the person is reached.', 'offer_assistance': 'Action: Offer assistance to the person in need, such as providing directions or carrying items. Returns True after assisting.', 'lost_person': 'Condition: Check if the person being assisted becomes lost or unreachable. Returns True if person is lost, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: Generate behavior tree for a robot to identify and assist a person in an unknown or crowded area
7.// OUTPUT:
<BehaviorTree><Sequence><Selector><Action>offer_assistance</Action><Sequence><Condition>lost_person</Condition><Selector><Action>identify_person</Action><Action>move_towards_person</Action></Selector></Sequence></Selector></Sequence></BehaviorTree> 
###
3.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3.// USER COMMAND: generate behavior tree to 'Swarm robots form a line while avoiding obstacles and changing color to green, then move towards the target while avoiding obstacles and changing color to white.'Output only the XML behavior tree without extra text.
3.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Action>form_line</Action><Action>avoid_obstacle</Action><Action>change_color_to_green</Action><Action>task_completed</Action></Sequence><Action>wander</Action></Selector><Selector><Sequence><Condition>is_target_detected</Condition><Action>continue_movement_agent</Action><Action>change_color_to_white</Action></Sequence><Action>avoid_obstacle</Action></Selector></Sequence><BehaviorTree>

###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Swarm robots navigate to target while avoiding obstacles and change color to green when in target range, then return to nest and change color to white.'Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>is_target_detected</Condition><Action>avoid_obstacle</Action><Action>change_color_to_green</Action></Sequence><Action>continue_movement_agent</Action></Selector><Sequence><Condition>is_agent_in_nest</Condition><Action>change_color_to_white</Action></Sequence></Sequence><BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Find and collect resources while avoiding obstacles, then return to nest and change color to green when full, and change color to white when in nest.'Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>is_obstacle_detected</Condition><Action>avoid_obstacle</Action><Action>continue_movement_agent</Action></Sequence><Action>wander</Action></Selector><Selector><Sequence><Condition>is_target_detected</Condition><Action>change_color
###
3.// INSTRUCTIONS: Use only the following behaviors {'search': 'Action: Search for missing group member. Always returns True.', 'coordinate': 'Action: Coordinate with other robots. Always returns True.', 'is_member_in_range': 'Condition: Check if missing group member is within range. Returns True if the missing member is within range, False otherwise.', 'is_map_complete': 'Condition: Check if the map has been fully explored. Returns True if the map is complete, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3.// USER COMMAND: Form a search party to find a missing group member if the map is fully explored.
3.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_map_complete</Condition><Selector><Sequence><Condition>is_member_in_range</Condition><Action>coordinate</Action></Sequence><Action>search</Action></Selector></Sequence></BehaviorTree>

###
4.// INSTRUCTIONS: Use only the following behaviors {'collect_resource': 'Action: Collect nearby resource. Always returns True.', 'deposit_resource': 'Action: Deposit collected resource in designated area. Always returns True.', 'is_resource_nearby': 'Condition: Check if resource is within range. Returns True if resource is within range, False otherwise.', 'is_deposit_area_reachable': 'Condition: Check if the designated deposit area is reachable. Returns True if the area is reachable, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Collect and deposit resource if nearby and reachable.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_resource_nearby</Condition><Action>collect_resource</Action><Condition>is_deposit_area_reachable</Condition><Action>deposit_resource</Action></Sequence><Action>wander</Action></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'follow_leader': 'Action: Follow the designated leader. Always returns True.', 'move_in_formation': 'Action: Move in a specific formation. Always returns True.', 'detect_leader_change': 'Condition: Check if the designated leader has changed. Returns True if the leader has changed, False otherwise.', 'is_leader_in_sight': 'Condition: Check if the designated leader is in sight. Returns True if the leader is in sight, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Automatically follow and keep formation with designated leader.
5.// OUTPUT:
<BehaviorTree><Sequence><Selector><Condition>is_leader_in_sight</Condition><Action>follow_leader</Action></Selector><Action>move_in_formation</Action><Condition>detect_leader_change</Condition></Sequence></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'scan_area': 'Action: Scan the designated area for potential threats. Always returns True.', 'coordinate_with_other_agents': 'Action: Coordinate with other swarm robots in the vicinity. Always returns True.', 'is_threat_detected': 'Condition: Check if any potential threats are detected in the scanned area. Returns True if threats are detected, False otherwise.', 'is_coordination_required': 'Condition: Check if coordination with other swarm robots is necessary. Returns True if coordination is required, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Scan designated area for potential threats and coordinate with other swarm robots if necessary.
6.// OUTPUT:
<BehaviorTree><Sequence><Action>scan_area</Action><Selector><Condition>is_threat_detected</Condition><Action>coordinate_with_other_agents</Action></Selector><Condition>is_coordination_required</Condition></Sequence></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'gather_information': 'Action: Gather information from designated sources. Always returns True.', 'analyze_information': 'Action: Analyze gathered information and plan next move. Always returns True.', 'is_new_information_available': 'Condition: Check if any new information is available from the designated sources. Returns True if new information is available, False otherwise.', 'has_analysis_completed': 'Condition: Check if the analysis of information has been completed. Returns True if analysis is completed, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: Continually gather and analyze information until a decision is made.
7.// OUTPUT:
<BehaviorTree><Sequence><Selector><Condition>is_new_information_available</Condition><Action>gather_information</Action></Selector><Action>analyze_information</Action><Condition>has_analysis_completed</Condition></Sequence></BehaviorTree>
###
4.// INSTRUCTIONS: Use only the following behaviors {'navigate_to_waypoint': 'Action: Navigate to the designated waypoint. Always returns True.', 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'randomly_choose_waypoint': 'Action: Randomly select a new waypoint to navigate to. Always returns True.', 'has_reached_waypoint': 'Condition: Check if the robot has reached the designated waypoint. Returns True if the waypoint is reached, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task).
4.// USER COMMAND: Navigate to the specified waypoint. If an obstacle is detected, navigate to a new waypoint before continuing towards the target.
4.// OUTPUT:
<BehaviorTree><Sequence><Condition>has_reached_waypoint</Condition><Selector><Sequence><Action>navigate_to_waypoint</Action><Condition>is_obstacle_detected</Condition><Action>avoid_obstacle</Action><Action>randomly_choose_waypoint</Action></Selector></Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'find_food': 'Action: Search the environment for food. Always returns True.', 'pick_up_food': 'Action: Pick up the nearest food item. Returns True if food is successfully picked up, False otherwise.', 'drop_food': 'Action: Drop the food item that is currently being carried. Always returns True.', 'is_hungry': 'Condition: Check the robot's hunger level. Returns True if the robot is hungry, False otherwise.', 'is_food_detected': 'Condition: Check if there is food nearby. Returns True if food is detected within a certain range, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task).
5.// USER COMMAND: Create a behavior tree for a robot to forage for food, pick up and carry one food item, drop it off at a designated location, and then continue to forage for more food.
5.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>is_food_detected</Condition><Action>find_food</Action><Condition>is_hungry</Condition><Action>pick_up_food</Action></Sequence><Sequence><Condition>has_food</Condition><Action>drop_food</Action></Sequence></Selector></Sequence></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'navigate_to_base': 'Action: Navigate to the base station for recharging. Always returns True.', 'recharge': 'Action: Recharge the robot at the base station. Always returns True.', 'has_low_battery': 'Condition: Check the robot's battery level. Returns True if the battery is low, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task).
6.// USER COMMAND: Design a behavior tree for a robot to autonomously return to the base station for recharging when the battery is low.
6.// OUTPUT:
<BehaviorTree><Sequence><Trigger>has_low_battery</Trigger><Sequence><Action>navigate_to_base</Action><Action>recharge</Action></Sequence></Sequence></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'follow_leader': 'Action: Follow designated leader robot. Returns True if the leader robot is within a certain range, False otherwise.', 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'move_to_designated_point': 'Action: Move to a specific point in the environment. Always returns True.', 'has_reached_point': 'Condition: Check if the robot has reached its designated point. Returns True if the point is reached, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task).
7.// USER COMMAND: Follow a designated leader robot to a specific point, avoiding obstacles along the way and making sure the designated point is reached.
7.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>is_obstacle_detected</Condition><Action>avoid_obstacle</Action><Condition>follow_leader</Condition></Sequence><Action>move_to_designated_point</Action><Condition>has_reached_point</Condition></Selector></Sequence></BehaviorTree> 
###
3.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3.// USER COMMAND: generate behavior tree to 'move 5 units forward, turn left, and move 8 units forward' Output only the XML behavior tree without extra text.
3.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Action>continue_movement_agent</Action> <Sequence> <Condition>is_path_clear</Condition> <Action>continue_movement_agent</Action> <Action>continue_movement_agent</Action> </Sequence> <Action>continue_movement_agent</Action> </Sequence> <Action>continue_movement_agent</Action> <Sequence> <Action>continue_movement_agent</Action> <Action>wander</Action> </Sequence> </Selector> </BehaviorTree>

###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'avoid obstacles, form a horizontal line, and move towards the target' Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Action>avoid_obstacle</Action> <Condition>is_obstacle_detected</Condition> <Condition>is_obstacle_detected</Condition> <Action>avoid_obstacle</Action> </Sequence> <Sequence> <Sequence> <Action>form_line</Action> <Action>wander</Action> </Sequence> <Action>wander</Action> <Action>form_line</Action> </Sequence> <Sequence> <Action>continue_movement_agent</Action> <Condition>is_target_detected</Condition> <Sequence> <Condition>is_target_reached</Condition> <Action>continue_movement_agent</Action> </Sequence> </Sequence> </Selector> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'form a circle' Output only the XML behavior tree without extra text.
5.// OUTPUT:
<Behavior 
###
4.// INSTRUCTIONS: Use only the following behaviors {'move_towards_sound': 'Action: Move towards the source of a detected sound. Always returns True.', 'search_sound': 'Action: Search the surrounding area for any detected sounds. Always returns True.', 'listen': 'Action: Listen for any potential sounds in the environment. Always returns True.', 'is_sound_detected': 'Condition: Check if any sounds have been detected. Returns True if sound is detected, False otherwise.', 'is_enemy_near': 'Condition: Check if any enemies are within a certain range. Returns True if an enemy is detected, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Patrol the area and listen for any enemy activity. If any enemies are detected, move towards the sound and search the surrounding area.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>patrol</Action><Sequence><Condition>is_enemy_near</Condition><Action>move_towards_sound</Action><Action>search_sound</Action></Sequence></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'capture_opponent': 'Action: Capture and immobilize the opponent. Always returns True.', 'avoid_collision': 'Action: Change direction to avoid potential collisions. Always returns True.', 'move_towards_goal': 'Action: Move towards the designated goal location. Always returns True.', 'is_opponent_in_range': 'Condition: Check if opponent is within a certain range. Returns True if opponent is detected, False otherwise.', 'is_goal_reached': 'Condition: Check if the designated goal location has been reached. Returns True if goal is reached, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: If an opponent is within range, capture them. If a collision is detected, avoid it. Otherwise, continue moving towards the designated goal.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_opponent_in_range</Condition><Action>capture_opponent</Action></Sequence><Sequence><Condition>is_collision_detected</Condition><Action>avoid_collision</Action></Sequence><Sequence><Condition>is_goal_reached</Condition><Action>move_towards_goal</Action></Sequence></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'sense_environment': 'Action: Use sensors to scan the environment for any potential threats. Always returns True.', 'form_defensive_barrier': 'Action: Form a defensive barrier to protect against incoming threats. Always returns True.', 'move_to_higher_ground': 'Action: Move to a higher ground to gain an advantage in a firefight. Always returns True.', 'fire_at_target': 'Action: Fire at the target with precision. Always returns True.', 'is_threat_detected': 'Condition: Check if any threats have been detected. Returns True if a threat is detected, False otherwise.', 'is_target_hit': 'Condition: Checks if the target has been hit. Returns True if the target is hit, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Use environmental sensors to scan for potential threats. If a threat is detected, form a defensive barrier and move to higher ground for a better position. Continuously fire at the target until it is hit.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>sense_environment</Action><Selector><Sequence><Condition>is_threat_detected</Condition><Action>form_defensive_barrier</Action></Sequence><Action>move_to_higher_ground</Action><Action>fire_at_target</Action></Selector></Sequence></Selector></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'move_to_target': 'Action: Move towards the designated target location. Always returns True.', 'follow_path': 'Action: Follow a predetermined path while avoiding obstacles. Always returns True.', 'drop_pheromone': 'Action: Drop pheromones to mark the path taken. Always returns True.', 'is_obstacle_present': 'Condition: Check if any obstacles are present in the path. Returns True if an obstacle is detected, False otherwise.', 'is_target_reached': 'Condition: Check if the designated target location has been reached. Returns True if the target is reached, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: Follow a designated path while dropping pheromones to mark the path taken. If any obstacles are encountered, navigate around them. If the target location is reached, stop dropping pheromones.
7.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>follow_path</Action><Sequence><Condition>is_obstacle_present</Condition><Action>avoid_obstacle</Action></Sequence></Sequence><Sequence><Condition>is_target_reached</Condition><Action>move_to_target</Action></Sequence><Action>drop_pheromone</Action></Selector></BehaviorTree>    
###
3.// INSTRUCTIONS: Use only the following behaviors {'move_forward': 'Action: Move forward one unit. Always returns True.', 'move_backward': 'Action: Move backward one unit. Always returns True.', 'turn_left': 'Action: Turn the robot 90 degrees to the left. Always returns True.', 'turn_right': 'Action: Turn the robot 90 degrees to the right. Always returns True.', 'detect_boundary': 'Condition: Check if robot is at the boundary of the environment. Returns True if at the boundary, False otherwise.', 'is_at_dropoff': 'Condition: Check if the robot is at the designated drop-off location. Returns True if at the drop-off location, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.', 'wait_for_signal': 'Action: Pause movement and wait for a signal from another robot. Returns True once the signal is received.', 'send_signal': 'Action: Send a signal to another robot within 10 units. Always returns True.', 'detect_signal': 'Condition: Check if a signal is received from another robot. Returns True if a signal is detected, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task).
3.// USER COMMAND: generate behavior tree to 'Navigate to the designated drop-off location while avoiding obstacles and waiting for signal from other robots'. Output only the XML behavior tree without extra text.
3.// OUTPUT:
<BehaviorTree><Sequence><Condition>detect_boundary</Condition><Selector><Sequence><Condition>detect_signal</Condition><Action>send_signal</Action></Sequence><Sequence><Condition>is_at_dropoff</Condition><Action>task_completed</Action></Sequence><Sequence><Condition>is_obstacle_detected</Condition><Action>move_backward</Action></Sequence><Action>move_forward</Action></Selector></Sequence></BehaviorTree>

###
4.// INSTRUCTIONS: Use only the following behaviors {'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'detect_boundary': 'Condition: Check if robot is at the boundary of the environment. Returns True if at the boundary, False otherwise.', 'move_forward': 'Action: Move forward one unit. Always returns True.', 'move_backward': 'Action: Move backward one unit. Always returns True.', 'move_left': 'Action: Move one unit to the left. Always returns True.', 'move_right': 'Action: Move one unit to the right. Always returns True.', 'return_to_origin': "Action: Return to the center of the environment. Always returns True.", 'wait_for_signal': 'Action: Pause movement and wait for a signal from another robot. Returns True once the signal is received.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task).
4.// USER COMMAND: generate behavior tree to 'Navigate back to center if at boundary and avoid obstacles while waiting for signals from other robots'. Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree><Sequence><Condition>detect_boundary</Condition><Selector><Sequence><Condition>detect_signal</Condition><Action>wait_for_signal</Action></Sequence><Sequence><Condition>avoid_obstacle</Condition><Selector><Sequence><Condition>detect_boundary</Condition><Action>return_to_origin</Action></Sequence><Sequence><Condition>move_backward</Condition></Sequence><Action>move_forward</Action></Selector></Sequence></Selector></Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'move_to_closest_target': 'Action: Move towards the closest target. Returns True if the target is reached, False otherwise.', 'detect_target': 'Condition: Check if a target is within range. Returns True if a target is detected, False otherwise.', 'grab_target': 'Action: Grab the target object if it is within reach. Always returns True.', 'return_to_nest': 'Action: Return to the nest. Always returns True.', 'drop_target': 'Action: Drop the target object at the designated drop-off location. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task).
5.// USER COMMAND: generate behavior tree to 'Collect and deliver target objects to the designated drop-off location'. Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>detect_target</Condition><Action>move_to_closest_target</Action></Sequence><Sequence><Condition>return_to_nest</Condition><Action>drop_target</Action></Sequence></Selector><Action>grab_target</Action></Sequence></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'move_to_target': 'Action: Move towards the target object. Returns True if the target is reached, False otherwise.', 'turn_left': 'Action: Turn the robot 90 degrees to the left. Always returns True.', 'turn_right': 'Action: Turn the robot 90 degrees to the right. Always returns True.', 'detect_target': 'Condition: Check if a target is within range. Returns True if a target is detected, False otherwise.', 'detect_obstacle': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'grab_target': 'Action: Grab the target object if it is within reach. Returns True if the target is grabbed, False otherwise.', 'reach_designated_location': 'Condition: Check if the robot has reached a designated location. Returns True if at the location, False otherwise.', 'find_brightest_target': 'Action: Move towards the brightest target object. Returns True if the target is reached, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task).
6.// USER COMMAND: generate behavior tree to 'Find and collect the brightest target object while avoiding obstacles'. Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>detect_obstacle</Condition><Action>avoid_obstacle</Action></Sequence><Sequence><Condition>detect_target</Condition><Action>find_brightest_target</Action></Sequence><Sequence><Condition>reach_designated_location</Condition><Action>grab_target</Action></Sequence></Selector><Action>move_to_target</Action></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'check_battery_level': 'Condition: Check the current battery level. Returns True if battery level is below 50%, False otherwise.', 'recharge_battery': 'Action: Find and go to the nearest charging station. Returns True once the battery is fully charged.', ' 
###
3.// INSTRUCTIONS: Use only the following behaviors {'follow_leader': 'Subtree node: Represents a behavior tree for following a designated leader.', 'open_door': 'Subtree node: Represents a behavior tree for opening doors.', 'is_door_locked': "Condition: Checks if the door is locked. Returns True if locked, False otherwise.", 'wait': 'Action: Makes the agent wait in place for a designated amount of time. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task).
3.// USER COMMAND: Follow the leader and open the door. If the door is locked, wait for 5 seconds before trying to open again.
3.// OUTPUT:
<BehaviorTree><Sequence><Action>follow_leader</Action><Action>open_door</Action><Condition>is_door_locked</Condition><Action>wait</Action></Sequence></BehaviorTree>

###
4.// INSTRUCTIONS: Use only the following behaviors {'gather_resources': 'Subtree node: Represents a behavior tree for gathering resources.', 'smelt_resources': 'Subtree node: Represents a behavior tree for smelting gathered resources.', 'is_inventory_full': "Condition: Checks if the agent's inventory is full. Returns True if full, False otherwise.", 'drop_inventory': 'Action: Makes the agent drop all resources currently in its inventory. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task).
4.// USER COMMAND: Gather resources, smelt them, and drop them if the inventory is full.
4.// OUTPUT:
<BehaviorTree><Sequence><Action>gather_resources</Action><Action>smelt_resources</Action><Condition>is_inventory_full</Condition><Action>drop_inventory</Action></Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'explore': 'Subtree node: Represents a behavior tree for exploring the surroundings.', 'find_exit': 'Subtree node: Represents a behavior tree for finding the nearest exit.', 'on_low_battery': "Event: Triggers when the agent's battery level is low. Returns True if battery is low, False otherwise.", 'recharge_battery': 'Action: Makes the agent find the nearest charging station and recharge. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task).
5.// USER COMMAND: Explore the area and recharge if the battery is low. Once recharged, continue exploring and look for the nearest exit.
5.// OUTPUT:
<BehaviorTree><Sequence><Action>explore</Action><Trigger>on_low_battery</Trigger><Sequence><Action>recharge_battery</Action><Action>explore</Action><Action>find_exit</Action></Sequence></Sequence></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'recruit_team': 'Subtree node: Represents a behavior tree for recruiting other robots to join the team.', 'perform_task': 'Subtree node: Represents a behavior tree for performing a specific task assigned by the team leader.', 'on_team_member_down': "Event: Triggers when a team member goes down. Returns True if a team member is down, False otherwise.", 'carry_team_member': 'Action: Makes the agent carry a fallen team member to safety. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task).
6.// USER COMMAND: Recruit new team members and carry any fallen team members to safety if necessary, while still performing regular tasks assigned by the leader.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>recruit_team</Action><Trigger>on_team_member_down</Trigger><Action>carry_team_member</Action></Sequence><Action>perform_task</Action></Selector></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'find_food': 'Subtree node: Represents a behavior tree for finding food in the environment.', 'eat_food': 'Action: Makes the agent eat the food it has found. Always returns True.', 'return_nest': 'Subtree node: Represents a behavior tree for returning to the nest.', 'is_hungry': "Condition: Checks if the agent's hunger level is low. Returns True if hungry, False otherwise."}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task).
7.// USER COMMAND: Find food and eat if the agent is hungry. Once satisfied, return to the nest.
7.// OUTPUT:
<BehaviorTree><Sequence><Action>find_food</Action><Condition>is_hungry</Condition><Action>eat_food</Action><Action>return_nest</Action></Sequence></BehaviorTree>	
###
3.// INSTRUCTIONS: Use only the following behaviors {'take_picture': 'Action: Capture an image using the robot's camera. Always returns True.', 'detect_color_red': "Condition: Check if color red is detected in the captured image. Returns True if red is detected, False otherwise.", 'detect_color_green': "Condition: Check if color green is detected in the captured image. Returns True if green is detected, False otherwise.", 'detect_color_blue': "Condition: Check if color blue is detected in the captured image. Returns True if blue is detected, False otherwise.", 'detect_color_yellow': "Condition: Check if color yellow is detected in the captured image. Returns True if yellow is detected, False otherwise.", 'detect_shape_square': "Condition: Check if a square shape is detected in the captured image. Returns True if a square shape is detected, False otherwise.", 'detect_shape_circle': "Condition: Check if a circle shape is detected in the captured image. Returns True if a circle shape is detected, False otherwise.", 'detect_shape_triangle': "Condition: Check if a triangle shape is detected in the captured image. Returns True if a triangle shape is detected, False otherwise.", 'detect_shape_rectangle': "Condition: Check if a rectangle shape is detected in the captured image. Returns True if a rectangle shape is detected, False otherwise.", 'move_left': 'Action: Move the robot one step to the left. Always returns True.', 'move_right': 'Action: Move the robot one step to the right. Always returns True.', 'move_up': 'Action: Move the robot one step upwards. Always returns True.', 'move_down': 'Action: Move the robot one step downwards. Always returns True.'}, to construct behavior tree in XML format to the following input. If the available behaviors do not fit with the user command say (Sorry, I cannot do the task)
3.// USER COMMAND: 'Capture an image and detect a red triangle. If red triangle is not detected, move left. If still not detected, move right.'
3.// OUTPUT:
<BehaviorTree><Sequence> <Action>take_picture</Action> <Condition>detect_color_red</Condition> <Condition>detect_shape_triangle</Condition> <Selector> <Sequence> <Action>move_left</Action> <Action>take_picture</Action> </Sequence> <Sequence> <Action>move_right</Action> <Action>take_picture</Action> </Sequence></Selector></Sequence></BehaviorTree>

###
4.// INSTRUCTIONS: Use only the following behaviors {'collect_resource': 'Action: Collect a resource from the environment. Always returns True.', 'deposit_resource': 'Action: Deposit a collected resource to a designated location. Always returns True.', 'check_inventory_full': 'Condition: Check total number of resources in the robot\'s inventory. Returns True if capacity is full, False otherwise.', 'check_resource_type': "Condition: Check the type of resource currently held by the robot. Returns 'gold' if a gold resource is held, 'silver' if a silver resource is held, and 'none' if no resources are held.", 'check_goal_reached': 'Condition: Check if the designated goal location has been reached. Returns True if the goal is reached, False otherwise.', 'move_to_goal': 'Action: Move towards the designated goal location. Always returns True.', 'wait': 'Action: Pause movement and wait for further instructions. Always returns True.', 'deal_with_threat': 'Action: Take appropriate action to deal with a potential threat in the vicinity. Always returns True.'}, to construct behavior tree in XML format to the following input. If the available behaviors do not fit with the user command say (Sorry, I cannot do the task)
4.// USER COMMAND: Collect 3 gold resources and deposit them to the designated location, while avoiding any potential threats along the way.
4.// OUTPUT:
<BehaviorTree><Sequence> <Condition>check_goal_reached</Condition> <Selector> <Sequence> <Condition>check_inventory_full</Condition> <Action>wait</Action> </Sequence> <Sequence> <Condition>check_resource_type</Condition> <Selector> <Sequence> <Condition>check_resource_type=='gold'</Condition> <Action>deposit_resource</Action> </Sequence> <Sequence> <True> <Action>deal_with_threat</Action> </True> </Sequence></Selector></Sequence> <Selector> <Sequence> <Action>collect_resource</Action> <Action>take_picture</Action> <Action>move_to_goal</Action> </Sequence></Selector></Sequence> </BehaviorTree>
 
###
5.// INSTRUCTIONS: Use only the following behaviors {'move_forward': 'Action: Move the robot one step forward in the current direction. Always returns True.', 'move_backward': 'Action: Move the robot one step backward from the current direction. Always returns True.', 'turn_left': 'Action: Turn the robot 90 degrees to the left. Always returns True.', 'turn_right': 'Action: Turn the robot 90 degrees to the right. Always returns True.', 'collect_sample': "Action: Collect a sample from the environment using the robot's built-in sampling tool. Always returns True.", 'analyze_sample': "Action: Analyze the collected sample for its composition and properties. Returns True if successful, False otherwise.", 'upload_data': 'Action: Upload the analyzed data to a designated server for further processing. Always returns True.', 'retrieve_sample': 'Action: Move back to a previously collected sample and retrieve it if needed. Returns True if sample is successfully retrieved, False otherwise.'}, to construct behavior tree in XML format to the following input. If the available behaviors do not fit with the user command say (Sorry, I cannot do the task)
5.// USER COMMAND: Collect and analyze a sample, then upload the data to the server. If the analysis is not successful, retrieve the sample and try again.
5.// OUTPUT:
<BehaviorTree><Sequence> <Action>collect_sample</Action> <Action>analyze_sample</Action> <Selector> <Action>upload_data</Action> <Sequence> <Action>retrieve_sample</Action> <Action>collect_sample</Action> <Action>analyze_sample</Action> <Action>upload_data</Action> </Sequence></Selector> </Sequence> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'move_forward': 'Action: Move the robot one step forward in the current direction. Always returns True.', 'move_backward': 'Action: Move the robot one step backward from the current direction. Always returns True.', 'turn_left': 'Action: Turn the robot 90 degrees to the left. Always returns True.', 'turn_right': 'Action: Turn the robot 90 degrees to the right. Always returns True.', 'flee': 'Action: Move away from a potential threat or danger. Always returns True.', 'detect_smell': "Condition: Check for the presence of any chemical or gas odor. Returns True if odor is detected, False otherwise.", 'detect_heat': "Condition: Check for temperatures above a certain threshold. Returns True if heat is detected, False otherwise.", 'detect_sound': "Condition: Check for any unusual or loud sounds. Returns True if sound
###
3.// INSTRUCTIONS: Use only the following behaviors {'collect_food': 'Action: Collect food resources found in the environment. Always returns True.', 'check_inventory': 'Action: Check the robot's current inventory and available space. Always returns True.', 'drop_resource': 'Action: Drop a resource from the robot's inventory. Always returns True.', 'is_inventory_full': 'Condition: Check if the robot's inventory is full. Returns True if full, False otherwise.', 'is_resource_nearby': 'Condition: Check if there is a resource nearby that can be collected. Returns True if a resource is nearby, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3.// USER COMMAND: Create a behavior tree for a swarm of robots to efficiently gather resources in a resource-rich environment
3.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_inventory_full</Condition><Selector><Sequence><Condition>is_resource_nearby</Condition><Action>collect_food</Action><Action>check_inventory</Action></Sequence><Action>drop_resource</Action></Selector></Sequence></BehaviorTree>

###
4.// INSTRUCTIONS: Use only the following behaviors {'go_forward': 'Action: Move the robot forward in a straight line. Always returns True.', 'rotate_left': 'Action: Rotate the robot left by a specific angle. Always returns True.', 'rotate_right': 'Action: Rotate the robot right by a specific angle. Always returns True.', 'is_obstacle_detected': 'Condition: Check if an obstacle is detected in front of the robot. Returns True if an obstacle is detected, False otherwise.', 'is_goal_reached': 'Condition: Check if the robot has reached its destination. Returns True if the goal is reached, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Create a behavior tree for a robot to navigate through a maze and reach the end goal
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_obstacle_detected</Condition><Sequence><Selector><Sequence><Condition>is_obstacle_detected</Condition><Action>rotate_left</Action><Selector><Sequence><Condition>is_obstacle_detected</Condition><Action>rotate_right</Action><Action>go_forward</Action></Sequence><Action>rotate_right</Action></Selector></Sequence><Action>rotate_right</Action><Action>go_forward</Action></Selector></Sequence><Condition>is_goal_reached</Condition></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'land': 'Action: Make the drone land on a safe landing spot. Always returns True.', 'takeoff': 'Action: Make the drone take off from its current position. Always returns True.', 'update_location': 'Action: Update the drone's current location. Always returns True.', 'is_battery_low': 'Condition: Check if the drone's battery level is below a specific threshold. Returns True if battery is low, False otherwise.', 'is_weather_safe': 'Condition: Check if the weather conditions are safe for the drone to fly. Returns True if weather is safe, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Develop a behavior tree for a drone to survey and map a large area
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_battery_low</Condition><Sequence><Condition>is_weather_safe</Condition><Selector><Sequence><Condition>is_weather_safe</Condition><Action>takeoff</Action><Action>update_location</Action></Sequence><Action>takeoff</Action></Selector></Sequence><Action>land</Action></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'activate_sensor': 'Action: Activate a specific sensor on the robot. Always returns True.', 'collect_data': 'Action: Collect data using the activated sensor. Always returns True.', 'process_data': 'Action: Process the collected data to extract necessary information. Always returns True.', 'is_data_valid': 'Condition: Check if the collected data is valid and useful. Returns True if data is valid, False otherwise.', 'is_sensor_activated': 'Condition: Check if a specific sensor is activated. Returns True if sensor is activated, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Generate a behavior tree for a swarm of robots to collect and process data in an unknown environment
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_data_valid</Condition><Selector><Sequence><Condition>is_sensor_activated</Condition><Sequence><Condition>is_sensor_activated</Condition><Action>activate_sensor</Action><Action>collect_data</Action></Sequence><Action>process_data</Action></Selector></Sequence><Action>collect_data</Action></Selector></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'scan_for_targets': 'Action: Scan the environment for potential targets. Always returns True.', 'select_target': 'Subtree node: Represents a behavior tree for selecting a target from the scanned targets.', 'is_target_in_range': 'Condition: Check if the selected target is in range. Returns True if the target is in range, False otherwise.', 'is_target_engaged': 'Condition: Check if the selected target is already engaged by another robot. Returns True if target is engaged, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: Create a behavior tree for a swarm of robots to effectively engage and eliminate enemy targets
7.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_target_in_range</Condition><Selector><Sequence><Condition>is_target_engaged</Condition><Action>scan_for_targets</Action><Action>select_target</Action></Sequence><Action>eliminate_enemy</Action></Selector></Sequence></Selector></BehaviorTree>
###
4.// INSTRUCTIONS: Use only the following behaviors {'follow_target': 'Action: Continuously follow the target object. Always returns True.', 'goto_location': 'Subtree node: Represents a behavior tree for navigating to a specific location.', 'search_area': 'Subtree node: Represents a behavior tree for searching a designated area.', 'move_to_next_location': 'Action: Move the agent to the next location in the designated path. Always returns True.', 'is_target_reached': 'Condition: Checks if the target object has been reached. Returns True if the target is within reach, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: build behavior tree to 'Navigate through a series of locations to find the target object and follow it.'
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>goto_location</Action><Action>move_to_next_location</Action></Sequence><Sequence><Condition>is_target_reached</Condition><Action>follow_target</Action></Sequence></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'detect_target': 'Subtree node: Represents a behavior tree for detecting the target object.', 'collect_resource': 'Action: Collect the resource at the current location. Always returns True.', 'deposit_resource': 'Action: Deposit the collected resource at the designated location. Always returns True.', 'search_area': 'Subtree node: Represents a behavior tree for searching a designated area.', 'move_to_next_location': 'Action: Move the agent to the next location in the designated path. Always returns True.', 'is_resource_full': 'Condition: Checks if the agent has reached its maximum resource carrying capacity. Returns True if full, False otherwise.', 'is_resource_deposited': 'Condition: Checks if the resource has been successfully deposited. Returns True if deposited, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to "Collect resources in the designated area and deposit them at the designated location until the resource carrying capacity is full."
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>search_area</Action><Action>collect_resource</Action><Action>move_to_next_location</Action></Sequence><Sequence><Condition>is_resource_full</Condition><Action>move_to_next_location</Action></Sequence><Sequence><Condition>is_resource_deposited</Condition><Action>deposit_resource</Action></Sequence></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'search_area': 'Subtree node: Represents a behavior tree for searching a designated area.', 'move_to_next_point': 'Action: Move the agent to the next point in the designated path. Always returns True.', 'avoid_moving_obstacle': 'Action: Avoid a moving obstacle. Always returns True.', 'avoid_static_obstacle': 'Action: Avoid a static obstacle. Always returns True.', 'is_target_detected': 'Condition: Check if the target object is detected within a certain distance. Returns True if the target is detected, False otherwise.', 'is_moving_obstacle_detected': 'Condition: Check for moving obstacles nearby. Returns True if a moving obstacle is detected, False otherwise.', 'is_static_obstacle_detected': 'Condition: Check for static obstacles nearby. Returns True if a static obstacle is detected, False otherwise.', 'is_at_final_point': 'Condition: Check if the agent has reached the final point in the path. Returns True if reached, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to "Navigate through a series of points while avoiding obstacles, and stop once the target object is detected or the final point is reached."
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>search_area</Action><Action>move_to_next_point</Action></Sequence><Sequence><Condition>is_target_detected</Condition><Action>move_to_next_point</Action></Sequence><Sequence><Condition>is_moving_obstacle_detected</Condition><Action>avoid_moving_obstacle</Action></Sequence><Sequence><Condition>is_static_obstacle_detected</Condition><Action>avoid_static_obstacle</Action></Sequence><Sequence><Condition>is_at_final_point</Condition><Action>move_to_next_point</Action></Sequence></Selector></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'follow_target': 'Action: Continuously follow the target object. Always returns True.', 'move_to_point': 'Action: Move the agent to a specific point. Always returns True.', 'gather_information': 'Action: Gather information about the target object. Always returns True.', 'analyze_information': 'Action: Analyze the gathered information to make decisions. Always returns True.', 'perform_action': 'Action: Perform an action based on the analyzed information. Always returns True.', 'is_target_detected': 'Condition: Check if the target object is detected within a certain distance. Returns True if the target is detected, False otherwise.', 'is_data_gathered': 'Condition: Check if the information about the target is gathered. Returns True if gathered, False otherwise.', 'is_information_analyzed': 'Condition: Check if the gathered information has been analyzed. Returns True if analyzed, False otherwise.', 'is_action_completed': 'Condition: Check if the action based on the analyzed information has been completed. Returns True if completed, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: generate behavior tree to "Follow the target object, gather information, analyze it, and perform an action based on the analyzed information."
7.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_target_detected</Condition><Action>move_to_point</Action><Action>gather_information</Action><Action>analyze_information</Action><Condition>is_data_gathered</Condition><Condition>is_information_analyzed</Condition><Action>perform_action</Action><Condition>is_action_completed</Condition></Sequence></BehaviorTree> 
###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_circle': 'Action: Form a circle around the specified target. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_circle_formed': 'Condition: Check if a circle is formed around the target. Returns True if the circle is formed, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'move_towards_target': 'Action: Move towards the specified target. Always returns True.', 'rotate_90_degrees': 'Action: Rotate 90 degrees clockwise or counterclockwise. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Move towards the target Mohammed, then rotate 90 degrees' Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition> is_target_detected </Condition> <Action> move_towards_target </Action> </Sequence> <Sequence> <Condition> is_circle_formed </Condition> <Action> rotate_90_degrees </Action> </Sequence> </Selector> </Sequence> </BehaviorTree>
 
###
5.// INSTRUCTIONS: Use only the following behaviors {'assign_task': "Action: Assign a specific task to each agent. Always returns True.", 'communicate_with_teammate': 'Action: Communicate with other agents to coordinate tasks. Always returns True.', 'cooperate_with_teammate': "Action: Cooperate with other agents to complete assigned tasks. Always returns True.", 'disperse': 'Action: Spread out and disperse in a specified formation. Always returns True.', 'is_agent_in_target_area': 'Condition: Check if the agent is currently within the designated target area. Returns True if in area, False otherwise.', 'is_agent_near_target': 'Condition: Check if the agent is within close proximity to the designated target. Returns True if near target, False otherwise.', 'is_target_found': 'Condition: Check if the designated target has been found. Returns True if found, False otherwise.', 'move_to_assigned_task': 'Action: Move towards and begin working on the assigned task. Always returns True.', 'move_to_target_area': 'Action: Move towards the designated target area. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'assign tasks to each agent, then disperse and move to target area' Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree> <Sequence> <Action> assign_task </Action> <Action> disperse </Action> <Selector> <Sequence> <Condition> is_agent_in_target_area </Condition> <Action> move_to_assigned_task </Action> </Sequence> <Sequence> <Condition> is_agent_near_target </Condition> <Action> cooperate_with_teammate </Action> <Action> move_to_target_area </Action> </Sequence> </Selector> </Sequence> </BehaviorTree>
 
###
6.// INSTRUCTIONS: Use only the following behaviors {'collect_resource': "Action: Collect a specific resource from the environment. Always returns True.", 'deposit_resource': 'Action: Deposit the collected resource at a designated location. Always returns True.', 'is_resource_detected': 'Condition: Check if a designated resource is detected in the environment. Returns True if detected, False otherwise.', 'is_resource_nearby': 'Condition: Check if the designated resource is within close proximity. Returns True if nearby, False otherwise.', 'move_to_destination': 'Action: Move towards a designated destination. Always returns True.', 'return_to_base': 'Action: Return to the designated base location. Always returns True.', 'scan_environment': 'Action: Scan the environment for resources. Always returns True.', 'search_for_resource': 'Action: Move around and search for the designated resource. Always returns True.', 'unload_resource': 'Action: Unload and drop off collected resources at the designated location. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'move to the designated destination, scan the environment for resources, collect and deposit a specific resource, then return to base' Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree> <Sequence> <Action> move_to_destination </Action> <Action> scan_environment </Action> <Action> collect_resource </Action> <Action> deposit_resource </Action> <Action> return_to_base </Action> </Sequence> </BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'change_speed': "Action: Change agent's movement speed. Always returns True.", 'communicate_with_team': 'Action: Communicate with other agents to coordinate tasks. Always returns True.', 'defend_area': 'Action: Protect and defend a designated area from intruders. Always returns True.', 'has_intruder': 'Condition: Check if an intruder has been detected in the designated area. Returns True if an intruder is present, False otherwise.', 'is_area_safe': 'Condition: Check if the designated area is safe and free from threats. Returns True if safe, False otherwise.', 'patrol_area': 'Action: Move around and patrol the designated area. Always returns True.', 'reinforce_area': 'Action: Call for reinforcement to the designated area. Always returns True.', 'scout_area': 'Action: Scout and gather information about the designated area. Always returns True.', 'return_to_base': 'Action: Return to the designated base location. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: generate behavior tree to 'scout the designated area, defend against intruders, call for reinforcement if needed, then return to base' Output only the XML behavior tree without extra text.
7.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition> has_intruder </Condition> <Action> defend_area </Action> <Selector> <Sequence> <Condition> is_area_safe </Condition> <Action> return_to_base 
###
3.// INSTRUCTIONS: Use only the following behaviors {'move_forward': 'Action: Move one step forward. Always returns True.', 'rotate_left': 'Action: Rotate left by 90 degrees. Always returns True.', 'rotate_right': 'Action: Rotate right by 90 degrees. Always returns True.', 'is_object_detected': 'Condition: Check if an object is detected within 10 units. Returns True if an object is detected within 10 units of distance, False otherwise.', 'pick_up_item': 'Action: Pick up the detected object. Always returns True.', 'place_item': 'Action: Place the picked up object at designated location. Always returns True.', 'is_item_picked_up': 'Condition: Check if an item is currently picked up by the robot. Returns True if an item is currently picked up, False otherwise.', 'is_item_placed': 'Condition: Check if the picked up item is placed at the designated location. Returns True if the item is placed at the designated location, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3.// USER COMMAND: Collect and place all objects in Room 1 to the designated location in Room 2.
3.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_item_picked_up</Condition><Selector><Sequence><Condition>is_object_detected</Condition><Action>pick_up_item</Action></Sequence><Action>move_forward</Action></Selector></Sequence><Sequence><Condition>is_item_placed</Condition><Selector><Sequence><Condition>is_object_detected</Condition><Selector><Sequence><Condition>is_object_in_room_1</Condition><Action>move_to_room_1</Action></Sequence><Selector><Sequence><Condition>is_object_in_room_2</Condition><Action>move_to_room_2</Action></Sequence></Selector></Selector><Action>rotate_right</Action></Sequence></Selector></Sequence><Sequence><Condition>is_object_detected</Condition><Action>place_item</Action></Sequence></Selector></BehaviorTree>

###
4.// INSTRUCTIONS: Use only the following behaviors {'move_forward': 'Action: Move one step forward. Always returns True.', 'turn_left': 'Action: Turn left by 90 degrees. Always returns True.', 'turn_right': 'Action: Turn right by 90 degrees. Always returns True.', 'is_obstacle_ahead': 'Condition: Check if an obstacle is detected ahead. Returns True if an obstacle is detected, False otherwise.', 'is_target_reached': 'Condition: Check if the target destination is reached. Returns True if the target is reached, False otherwise.', 'pick_up_item': 'Action: Pick up the item detected at the current location. Always returns True.', 'place_item': 'Action: Place the picked up item at the designated location. Always returns True.', 'is_item_picked_up': 'Condition: Check if an item is currently picked up by the robot. Returns True if an item is picked up, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, int I can't do the task)
4.// USER COMMAND: Navigate through obstacles and pick up the target item, then place it at the designated location.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_obstacle_ahead</Condition><Selector><Sequence><Condition>is_item_picked_up</Condition><Selector><Sequence><Condition>is_target_reached</Condition><Selector><Sequence><Condition>is_item_placed</Condition><Action>move_to_designated_location</Action></Sequence><Action>place_item</Action></Selector></Sequence></Selector><Action>move_forward</Action></Selector></Sequence><Sequence><Condition>is_item_picked_up</Condition><Selector><Sequence><Condition>is_target_reached</Condition><Selector><Sequence><Condition>is_item_placed</Condition><Action>move_to_designated_location</Action></Sequence><Action>pick_up_item</Action></Selector></Sequence></Selector></Sequence></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'move_forward': 'Action: Move one step forward. Always returns True.', 'turn_left': 'Action: Turn left by 90 degrees. Always returns True.', 'turn_right': 'Action: Turn right by 90 degrees. Always returns True.', 'detect_food': 'Condition: Check if food is detected at the current location. Returns True if food is detected, False otherwise.', 'pick_up_food': 'Action: Pick up the food at the current location. Always returns True.', 'is_food_collected': 'Condition: Check if food is currently collected by the robot. Returns True if food is collected, False otherwise.', 'consume_food': 'Action: Eat and consume the collected food. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Forage for food and consume it upon collection.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_food_collected</Condition><Selector><Sequence><Condition>is_food_detected</Condition><Action>pick_up_food</Action></Sequence><Action>move_forward</Action></Selector></Sequence><Sequence><Condition>is_food_collected</Condition><Selector><Sequence><Condition>is_food_collected</Condition><Action>consume_food</Action></Sequence><Action>move_forward</Action></Selector></Sequence></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'move_forward': 'Action: Move one step forward. Always returns True.', 'rotate_left': 'Action: Rotate left by 90 degrees. Always returns True.', 'rotate_right': 'Action: Rotate right by 90 degrees. Always returns True.', 'ascend_upward': 'Action: Ascend upwards by 1 unit. Returns True when successfully ascended.', 'descend_downward': 'Action: Descend downwards by 1 unit. Returns True when successfully descended.', 'check_height': 'Condition: Check if the current height is within the acceptable range. Returns True if height is within range, False otherwise.', 'is_obstacle_ahead': 'Condition: Check if an obstacle is detected ahead. Returns True if an obstacle is detected, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Fly the drone while avoiding obstacles and maintaining a safe altitude.
6.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>is_obstacle_ahead</Condition><Selector><Sequence><Condition>is_obstacle_detected</Condition><Action>avoid_obstacle</Action></Sequence><Action>ascend_upwards</Action></Selector></Sequence><Sequence><Condition>is_obstacle_ahead</Condition><Action>descend_downward</Action></Sequence></Selector><Sequence><Condition>check###
3.// INSTRUCTIONS: Use only the following behaviors {'check_inventory': 'Action: Display the agent's inventory. Returns True after displaying inventory.', 'pick_up_item': 'Action: Pick up a nearby item. Returns True if an item is successfully picked up, False otherwise.', 'move_to_target': 'Subtree node: Represents a behavior tree for moving to a specific target location.', 'is_inventory_full': 'Condition: Checks if the agent's inventory is full. Returns True if inventory is full, False otherwise.', 'use_item': 'Action: Use the item in the agent's inventory. Returns True if the item is successfully used, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3.// USER COMMAND: Check inventory after picking up an item, and use it if inventory is not full.
3.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Action>pick_up_item</Action><Action>check_inventory</Action></Sequence><Sequence><Condition>is_inventory_full</Condition><Action>use_item</Action></Sequence></Selector></Sequence></BehaviorTree>
###
4.// INSTRUCTIONS: Use only the following behaviors {'wait_for_timer': 'Action: Wait for a specified amount of time to pass. Always returns True.', 'move_to_random_location': 'Action: Move the robot to a random location within the environment boundaries. Always returns True.', 'is_battery_low': 'Condition: Checks for low battery level. Returns True if battery level is below a certain threshold, False otherwise.', 'return_to_charging_station': 'Subtree node: Represents a behavior tree for returning to the charging station.', 'is_at_charging_station': 'Condition: Checks if agent is at the charging station. Returns True if agent is at the charging station, False otherwise.', 'recharge_battery': 'Action: Recharges the agent's battery. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Move to a random location, and if battery is low, return to the charging station and recharge battery.
4.// OUTPUT:
<BehaviorTree><Sequence><Action>move_to_random_location</Action><Selector><Sequence><Condition>is_battery_low</Condition><Action>return_to_charging_station</Action><Sequence><Condition>is_at_charging_station</Condition><Action>recharge_battery</Action></Sequence></Sequence></Selector></Sequence></BehaviorTree>
###
5.// INSTRUCTIONS: Use only the following behaviors {'attack_target': 'Action: Attack the target within range. Returns True if attack is successful, False otherwise.', 'move_to_closest_enemy': 'Action: Move the agent towards the closest enemy. Returns True if agent has reached the enemy, False otherwise.', 'is_enemy_in_range': 'Condition: Checks if an enemy is within attack range. Returns True if an enemy is in range, False otherwise.', 'is_weapon_equipped': 'Condition: Checks if the agent has a weapon equipped. Returns True if a weapon is equipped, False otherwise.', 'equip_weapon': 'Action: Equips the best weapon available. Returns True if weapon is successfully equipped, False otherwise.', 'hide_and_ambush': 'Subtree node: Represents a behavior tree for hiding and ambushing enemies.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: If an enemy is within range, attack it. Otherwise, equip a weapon if not already equipped and move towards the closest enemy to attack.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_enemy_in_range</Condition><Action>attack_target</Action></Sequence><Sequence><Condition>is_weapon_equipped</Condition><Action>equip_weapon</Action></Sequence><Sequence><Action>move_to_closest_enemy</Action><Action>attack_target</Action></Sequence></Selector></BehaviorTree>
###
6.// INSTRUCTIONS: Use only the following behaviors {'follow_leader': 'Action: Follow the designated leader. Returns True if successfully following, False otherwise.', 'move_leader_to_target': 'Action: Move the designated leader to the target location. Returns True if leader has reached the target, False otherwise.', 'is_leader_reached_target': 'Condition: Checks if leader has reached the target. Returns True if leader is at the target location, False otherwise.', 'detect_obstacle': 'Condition: Detects for obstacles within a certain range. Returns True if an obstacle is detected, False otherwise.', 'avoid_obstacle': 'Action: Move away from the detected obstacle. Returns True after successfully avoiding the obstacle.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Follow the leader to the target location, but avoid obstacles along the way.
6.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Action>follow_leader</Action></Sequence><Sequence><Action>move_leader_to_target</Action><Selector><Sequence><Condition>is_leader_reached_target</Condition><Action>follow_leader</Action></Sequence></Selector></Sequence></Selector><Selector><Sequence><Condition>detect_obstacle</Condition><Action>avoid_obstacle</Action></Sequence></Selector></Sequence></BehaviorTree>
###
7.// INSTRUCTIONS: Use only the following behaviors {'grab_resource': 'Action: Dynamically selects the best resource type and grabs it. Returns True if successful, False otherwise.', 'drop_resource': 'Action: Drops the resource currently held. Returns True if successful, False otherwise.', 'move_towards_resource': 'Action: Move towards a specific resource type. Returns True if agent has reached the resource, False otherwise.', 'is_resource_available': 'Condition: Checks for availability of a specific resource type. Returns True if the resource is available, False otherwise.', 'is_resource_held': 'Condition: Checks if agent is holding a resource. Returns True if a resource is being held, False otherwise.', 'collect_resources': 'Subtree node: Represents a behavior tree for collecting resources.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: Grab a resource, move to the specified location, drop the resource, and repeat until specified resources are collected.
7.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Action>grab_resource</Action><Selector><Sequence><Condition>is_resource_held</Condition><Action>drop_resource</Action></Sequence></Selector></Sequence><Sequence><Action>move_towards_resource</Action><Selector><Sequence><Condition>is_resource_available</Condition><Action>grab_resource</Action></Sequence></Selector></Sequence></Selector></Sequence></BehaviorTree>
###
3.// INSTRUCTIONS: Use only the following behaviors {'explore': "Action: Move in a random direction. Always returns True.", 'detect_target': "Action: Detect the nearest target within a radius of 50 units. Always returns True.", 'follow_path': "Action: Follow the path to the target. Always return True.", 'is_target_detected': 'Condition: Check if target is within 50 units. Returns True if the target is within 50 units of distance, False otherwise.', 'is_near_obstacle': 'Condition: Check if there are obstacles within a radius of 10 units. Returns True if an obstacle is detected, False otherwise.', 'is_at_target': 'Condition: Check if agent has reached the target. Returns True if the agent is at the target, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3.// USER COMMAND: Explore the environment until a target is detected within 50 units, then follow the path to reach the target.
3.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Action>explore</Action> <Selector> <Condition>is_target_detected</Condition> <Sequence> <Action>detect_target</Action> <Action>follow_path</Action> </Sequence> </Selector> </Sequence> </Selector> </BehaviorTree>

###
4.// INSTRUCTIONS: Use only the following behaviors {'random_movement': "Action: Move in a random direction. Always returns True.", 'detect_light': "Action: Detect the nearest light source within a radius of 30 units. Always returns True.", 'move_towards_light': "Action: Move towards the nearest light source. Always return True.", 'is_light_detected': 'Condition: Check if light source is detected within a radius of 30 units. Returns True if a light source is detected, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_at_light': 'Condition: Check if agent is at the detected light source. Returns True if the agent is at the light source, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Randomly explore the environment until a light source is detected within 30 units, then move towards the light source.
4.// OUTPUT:
<BehaviorTree> <Sequence> <Action>random_movement</Action> <Selector> <Condition>is_light_detected</Condition> <Sequence> <Action>detect_light</Action> <Action>move_towards_light</Action> </Sequence> </Selector> </Sequence> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'detect_target': "Action: Detect the nearest target within a radius of 40 units. Always returns True.", 'follow_path': "Action: Follow the path to the target. Always return True.", 'is_target_detected': 'Condition: Check if target is within 40 units. Returns True if the target is within 40 units of distance, False otherwise.', 'is_near_obstacle': 'Condition: Check if there are obstacles within a radius of 15 units. Returns True if an obstacle is detected, False otherwise.', 'is_at_target': 'Condition: Check if agent has reached the target. Returns True if the agent is at the target, False otherwise.', 'is_enemy_nearby': 'Condition: Check if there are enemies within a radius of 30 units. Returns True if enemies are detected, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Detect and follow the nearest target within 40 units, but avoid obstacles and enemies within a radius of 15 units.
5.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Selector> <Condition>is_enemy_nearby</Condition> <Action>detour</Action> </Selector> <Selector> <Condition>is_near_obstacle</Condition> <Action>detour</Action> </Selector> <Condition>is_target_detected</Condition> <Sequence> <Action>detect_target</Action> <Action>follow_path</Action> </Sequence> </Sequence> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'detect_food': "Action: Detect the nearest food source within a radius of 20 units. Always returns True.", 'get_food': "Action: Move towards and retrieve the food source. Always return True.", 'is_food_detected': 'Condition: Check if food source is detected within a radius of 20 units. Returns True if a food source is detected, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_at_food': 'Condition: Check if agent is at the detected food source. Returns True if the agent is at the food source, False otherwise.', 'drop_food': 'Action: Move to a specified location and drop the food. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Detect the nearest food source within 20 units, retrieve it, and drop it at a specified location.
6.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>is_food_detected</Condition> <Selector> <Sequence> <Action>detect_food</Action> <Action>get_food</Action> <Selector> <Condition>is_at_food</Condition> <Action>drop_food</Action> </Selector> </Sequence> </Selector> </Sequence> </BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'detect_water': "Action: Detect the nearest water source within a radius of 30 units. Always returns True.", 'move_to_water': "Action: Move towards and retrieve the water source. Always return True.", 'drink_water': 'Action: Drink water from the source. Always returns True.', 'is_water_detected': 'Condition: Check if water source is detected within a radius of 30 units. Returns True if a water source is detected, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: Detect the nearest water source within 30 units, retrieve it, and drink from it.
7.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>is_water_detected</Condition> <Selector> <Sequence> <Action>detect_water</Action> <Action>move_to_water</Action> </Sequence> <Action>drink_water</Action> </###
3.// INSTRUCTIONS: Use only the following behaviors {'move_forward': 'Action: Move the robot one step forward in the current direction. Returns True if the movement was successful, False if blocked.', 'turn_left': 'Action: Turn the robot 90 degrees counterclockwise. Returns True if successful, False otherwise.', 'turn_right': 'Action: Turn the robot 90 degrees clockwise. Returns True if successful, False otherwise.', 'scan_environment': 'Subtree node: Represents a behavior tree for scanning the environment and making decisions based on different conditions. Returns True if successful, False if no decisions were made.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3.// USER COMMAND: Navigate through an unknown maze, turning right at dead ends and left at forks to reach the end.
3. // OUTPUT:
<BehaviorTree><Selector><Sequence><Selector><Condition>scan_environment</Condition><Sequence><Condition>is_left_clear</Condition><Action>turn_left</Action></Sequence></Selector><Sequence><Condition>scan_environment</Condition><Sequence><Condition>is_right_clear</Condition><Action>turn_right</Action></Sequence></Selector></Sequence><Action>move_forward</Action></Selector></BehaviorTree>

###
4.// INSTRUCTIONS: Use only the following behaviors {'gather_resources': 'Action: Sent agent to gather resources from a designated location. Returns True if successful, False otherwise.', 'move_to_resource': 'Action: Move agent towards the resource location. Returns True if successful, False otherwise.', 'wait_for_resource': 'Action: Wait until the resource is available. Returns True if successful, False otherwise.', 'drop_off_resources': 'Action: Drop off resources at the designated location. Returns True if successful, False otherwise.', 'check_resources': 'Subtree node: Represents a behavior tree for checking the agent's resources and making decisions based on the current level. Returns True if successful, False if no decisions were made.', 'is_resource_low': 'Condition: Checks if resources are below a specific threshold. Returns True if resources are below the threshold, False otherwise.', 'is_resource_full': 'Condition: Checks if resources are at maximum capacity. Returns True if resources are at maximum capacity, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Send agents to gather resources until they are nearly full, then drop them off at the designated location.
4.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Action>gather_resources</Action><Action>move_to_resource</Action></Sequence><Action>wait_for_resource</Action></Selector><Sequence><Condition>check_resources</Condition><Action>drop_off_resources</Action></Sequence></Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'find_partner': 'Subtree node: Represents a behavior tree to find a compatible partner in the swarm based on specific criteria. Returns True if a partner is found, False otherwise.', 'move_to_partner': 'Action: Move to the partner's location. Returns True if successful, False otherwise.', 'coordinate_actions': 'Action: Coordinate actions with the partner in order to complete a joint task. Returns True if successful, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Coordinate with a compatible partner in the swarm to gather resources together and bring them back to the nest.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>find_partner</Action><Action>move_to_partner</Action>
</Sequence><Action>task_completed</Action></Selector><Sequence><Condition>is_partner_reached</Condition><Action>coordinate_actions</Action></Sequence></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'avoid_obstacles': 'Action: Continuously scans the environment for obstacles and navigates around them. Always returns True.', 'follow_trail': 'Action: Follows a trail left behind by a lead agent. Returns True if successfully following the trail, False otherwise.', 'send_signal': 'Action: Send a signal to other agents within a certain radius. Always returns True.', 'is_obstacle_nearby': 'Condition: Checks if an obstacle is within a specific distance. Returns True if an obstacle is detected within the distance, False otherwise.', 'is_line_formed': 'Condition: Checks if a trail is formed by the lead agent. Returns True if a trail is present, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Have followers navigate through an obstacle course by following a lead agent's path.
6.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>is_line_formed</Condition><Action>follow_trail</Action></Sequence><Action>avoid_obstacles</Action></Selector><Condition>is_obstacle_nearby</Condition><Action>send_signal</Action></Sequence></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'scan_surroundings': 'Subtree node: Represents a behavior tree for scanning the environment and making decisions based on detected objects. Returns True if successful, False if no decisions were made.', 'identify_objects': 'Action: Uses vision to identify objects in the environment. Returns True if successful, False otherwise.', 'move_to_object': 'Action: Move towards a specific object. Returns True if successful, False otherwise.', 'collect_object': 'Action: Collect the object and store it. Returns True if successful, False otherwise.', 'return_to_base': 'Action: Return to the base while carrying the collected objects. Returns True if successful, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: Navigate through a cluttered environment, identify and collect objects, and bring them back to base.
7.// OUTPUT:
<BehaviorTree><Sequence><Selector><Condition>scan_surroundings</Condition><Sequence><Action>identify_objects</Action><Action>move_to_object</Action><Action>collect_object</Action></Sequence><Action>return_to_base</Action></Selector></Sequence></BehaviorTree> 
###
4.// INSTRUCTIONS: Use only the following behaviors {'start_engine': 'Action: Start engine. Always returns True.', 'stop_engine': 'Action: Stop engine. Always returns True.', 'fuel_available': 'Condition: Check if there is enough fuel for the journey. Returns True if there is enough fuel, False otherwise.', 'is_road_clear': 'Condition: Check if road ahead is clear of any obstacles. Returns True if no obstacles are detected, False otherwise.', 'is_engine_running': 'Condition: Check if the engine is currently running. Returns True if the engine is running, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Generate behavior tree for a self-driving car to navigate and reach its destination.
4.// OUTPUT:
<BehaviorTree><Sequence><Action>start_engine</Action><Selector><Sequence><Condition>is_road_clear</Condition><Action>drive_forward</Action></Sequence><Sequence><Condition>fuel_available</Condition><Action>refuel</Action></Sequence></Selector></Sequence><Selector><Sequence><Condition>is_engine_running</Condition><Action>stop_at_destination</Action></Sequence><Action>drive_to_destination</Action></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'take_photo': 'Action: Capture and save a photo. Always returns True.', 'upload_photo': 'Action: Upload the saved photo. Always returns True.', 'is_storage_full': 'Condition: Check if the storage capacity is full. Returns True if the storage is full, False otherwise.', 'is_connected_to_internet': 'Condition: Check if the device is currently connected to the internet. Returns True if the connection is established, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Generate behavior tree for a drone to carry out a photomapping task and upload the photos to a cloud server.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_storage_full</Condition><Action>empty_storage</Action></Sequence><Sequence><Condition>is_connected_to_internet</Condition><Action>upload_photo</Action></Sequence></Selector><Action>take_photo</Action></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'scan_surroundings': 'Action: Use sensors to scan the surroundings for resources. Always returns True.', 'collect_resource': 'Action: Collect the detected resource. Always returns True.', 'is_resource_full': 'Condition: Check if the resource storage is full. Returns True if the storage is full, False otherwise.', 'is_resource_available': 'Condition: Check if there is a resource within reach. Returns True if a resource is detected, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Generate behavior tree for a swarm of robots to forage and collect resources for their hive.
6.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_resource_full</Condition><Action>empty_resource_storage</Action></Sequence><Selector><Sequence><Condition>is_resource_available</Condition><Action>collect_resource</Action></Sequence><Action>scan_surroundings</Action></Selector></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'calculate_distance': 'Action: Calculate the distance between two objects. Always returns True.', 'compare_distances': 'Action: Compare two distances and determine the shorter one. Returns True if the first distance is shorter than the second, False otherwise.', 'is_distance_greater': 'Condition: Check if the distance between two objects is greater than a threshold. Returns True if the distance is greater, False otherwise.', 'is_object_moving': 'Condition: Check if the object is currently in motion. Returns True if the object is moving, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: Generate behavior tree for a robot to calculate and compare distances for effective path planning.
7.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_distance_greater</Condition><Selector><Sequence><Action>calculate_distance</Action><Action>compare_distances</Action></Sequence></Selector><Sequence><Condition>is_object_moving</Condition><Action>wait_for_object</Action></Sequence></Selector><Selector><Sequence><Condition>is_distance_greater</Condition><Action>recalculate_path</Action></Sequence><Sequence><Condition>is_no_obstacle_ahead</Condition><Action>move_forward</Action></Sequence></Selector></BehaviorTree>
###
3.// INSTRUCTIONS: Use only the following behaviors {'find_food': 'Action: Search for food source. Returns True if found, False otherwise.', 'get_food': 'Action: Grab food and bring it back to the nest. Returns True if successful, False otherwise.', 'is_food_available': 'Condition: Check if food source is available. Returns True if food is present, False otherwise.', 'is_food_brought_to_nest': 'Condition: Check if food is brought back to the nest. Returns True if food is successfully deposited, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3,// USER COMMAND: Return to the nest and deposit food once it is found and brought back.
3,// OUTPUT:
<BehaviorTree> <Sequence> <Action>find_food</Action> <Condition>is_food_available</Condition> <Action>get_food</Action> <Condition>is_food_brought_to_nest</Condition> <Action>task_completed</Action> </Sequence> </BehaviorTree>

###
4.// INSTRUCTIONS: Use only the following behaviors {'move_towards_target': 'Action: Move towards a specified target. Always returns True.', 'detect_target': 'Condition: Check if target is within range. Returns True if target is within range, False otherwise.', 'is_reward_received': 'Condition: Check if reward is received. Returns True if reward is received, False otherwise.', 'collect_reward': 'Action: Collect the received reward. Returns True if successful, False otherwise.', 'navigate_to_target': 'Action: Navigate to specified target. Returns True if target is reached, False otherwise.', 'is_obstacle_present': 'Condition: Check if an obstacle is present. Returns True if an obstacle is detected, False otherwise.', 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4,// USER COMMAND: Navigate to a target while avoiding obstacles and collecting rewards along the way.
4,// OUTPUT:
<BehaviorTree> <Sequence> <Action>navigate_to_target</Action> <Condition>is_reward_received</Condition> <Action>collect_reward</Action> </Sequence> <Selector> <Condition>is_obstacle_present</Condition> <Action>avoid_obstacle</Action> <Action>move_towards_target</Action> </Selector> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'patrol': 'Action: Patrol a specified area. Always returns True.', 'detect_intruders': 'Condition: Check for intruders in the patrol area. Returns True if an intruder is detected, False otherwise.', 'combat_intruder': 'Action: Combat the intruder. Returns True if successful, False otherwise.', 'is_damage_borderline': 'Condition: Check if the robot's damage is above a specific level. Returns True if its damage is above the specified level, False otherwise.', 'repair': 'Action: Repair the robot's damage. Returns True if successful, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5,// USER COMMAND: Patrol an area and combat any intruders that are detected. Repair any damage if the robot's damage is above the borderline.
5,// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Action>patrol</Action> <Condition>detect_intruders</Condition> <Action>combat_intruder</Action> </Sequence> <Condition>is_damage_borderline</Condition> <Action>repair</Action> </Selector> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'is_thief_detected': 'Condition: Check if a thief is detected. Returns True if a thief is detected, False otherwise.', 'lock_target': 'Action: Lock onto the detected thief and follow it. Returns True if locked and following, False otherwise.', 'call_for_backup': 'Action: Call for backup. Always returns True.', 'wait_for_backup': 'Condition: Check if backup has arrived. Returns True if backup has arrived, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6,// USER COMMAND: Follow and lock onto a detected thief while calling for backup and waiting for it to arrive.
6,// OUTPUT:
<Selector> <Sequence> <Condition>is_thief_detected</Condition> <Action>lock_target</Action> <Action>call_for_backup</Action> <Condition>wait_for_backup</Condition> </Sequence> </Selector> </BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'find_water_source': 'Action: Search for a water source. Returns True if found, False otherwise.', 'get_water': 'Action: Collect and refill the water supply. Returns True if successful, False otherwise.', 'is_water_available': 'Condition: Check if water source is available. Returns True if water is present, False otherwise.', 'is_water_refilled': 'Condition: Check if the water supply is refilled. Returns True if the water supply is refilled, False otherwise.', 'is_agent_near_water_source': 'Condition: Check if the agent is near a water source. Returns True if near a water source, False otherwise.', 'navigate_to_water_source': 'Action: Navigate to the nearest water source. Returns True if successful, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7,// USER COMMAND: Refill the water supply by navigating to the nearest water source and collecting water.
7,// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Action>find_water_source</Action> <Condition>is_agent_near_water_source</Condition> <Action>get_water</Action> </Sequence> <Action>navigate_to_water_source</Action> <Condition>is_water_available</Condition> <Action>get_water</Action> </Selector> </BehaviorTree> 
###
3.//INSTRUCTIONS: Use only the following behaviors {'find_opponent': 'Action: Use sensors to detect and locate the opponent robot. Returns True if an opponent is found, False otherwise.', 'attack_opponent': 'Action: Maneuver the robot into a position to attack the opponent. Returns True if the attack is successful, False otherwise.', 'reload': 'Action: Move the robot to the designated area to reload weapons. Always returns True.', 'is_weapons_ready': 'Condition: Check if the robot's weapons are reloaded and ready to use. Returns True if weapons are ready, False otherwise.', 'is_opponent_in_range': 'Condition: Check if the opponent robot is within attack range. Returns True if the opponent is in range, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3.// USER COMMAND: Generate behavior tree for a robot to engage in a game of robot wars
3.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_weapons_ready</Condition><Selector><Sequence><Action>find_opponent</Action><Selector><Condition>is_opponent_in_range</Condition><Action>attack_opponent</Action></Selector><Action>reload</Action></Sequence></Selector></Sequence></BehaviorTree>
 
###
4.// INSTRUCTIONS: Use only the following behaviors {'collect_resources': 'Action: Move to and collect resources in the current area. Always returns True.', 'build_structure': 'Action: Use collected resources to build a designated structure in the current area. Returns True if the structure is successfully built, False otherwise.', 'is_resource_depleted': 'Condition: Check if all resources in the current area have been depleted. Returns True if all resources are gone, False otherwise.', 'is_structure_built': 'Condition: Check if the designated structure has been built in the current area. Returns True if the structure is built, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Generate behavior tree for a robot to gather and use resources to construct a designated structure 
4.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_resource_depleted</Condition><Selector><Sequence><Action>collect_resources</Action><Selector><Condition>is_structure_built</Condition><Action>build_structure</Action></Selector><Action>wait_for_resources</Action></Sequence></Selector></Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'deploy_sensor': 'Action: Deploy a sensor in the current area to gather data for exploration. Returns True if the sensor is successfully deployed, False otherwise.', 'analyze_data': 'Action: Take the data collected from the sensor and analyze it for valuable information. Returns True if analysis is complete, False otherwise.', 'explore_area': 'Condition: Check if the robot has fully explored the current area. Returns True if the area is fully explored, False otherwise.', 'is_data_useful': 'Condition: Check if the analyzed data is useful for further exploration and decision-making. Returns True if the data is useful, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command: say (Sorry, I can't do the task)
5.// USER COMMAND: Generate behavior tree for a robot to explore and gather data in an unknown environment
5.// OUTPUT:
<BehaviorTree><Sequence><Condition>explore_area</Condition><Selector><Sequence><Action>deploy_sensor</Action><Selection><Condition>is_data_useful</Condition><Action>analyze_data</Action><Action>collect_data</Action></Selector><Action>wait_for_analysis</Action></Sequence><Action>move_to_next_unexplored_area</Action></Selector></Sequence></BehaviorTree>
 
###
6.// INSTRUCTIONS: Use only the following behaviors {'detect_hazard': 'Action: Use sensors to detect and locate potential hazards in the current area. Returns True if any hazards are detected, False otherwise.', 'avoid_collision': 'Action: Use maneuvering techniques to avoid collision with the detected hazard. Returns True if the robot successfully avoids collision, False otherwise.', 'is_safe_to_proceed': 'Condition: Check if the area is safe to proceed, i.e. no hazards are present. Returns True if the area is safe, False otherwise.', 'locate_exit': 'Condition: Check if the robot has located the designated exit from the hazardous area. Returns True once the exit is found, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Generate behavior tree for a robot to navigate through a hazardous environment to find the exit
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_safe_to_proceed</Condition><Selector><Condition>locate_exit</Condition><Action>move_to_exit</Action></Selector></Sequence><Action>detect_hazard</Action><Action>avoid_collision</Action></Selector></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'request_help': 'Action: Send a distress signal and request help from other robots in the swarm. Returns True if help is received, False otherwise.', 'move_to_help': 'Action: Move to the location of the robot requesting help. Returns True if the robot reaches the location, False otherwise.', 'perform_rescue': 'Action: Use appropriate tools and techniques to perform a rescue operation. Returns True if the rescue is successful, False otherwise.', 'is_rescue_complete': 'Condition: Check if the rescue operation is complete. Returns True if the rescue is complete, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: Generate behavior tree for a robot to assist in a search and rescue operation with other robots in the swarm
7.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_rescue_complete</Condition><Selector><Sequence><Action>request_help</Action><Selector><Action>move_to_help</Action><Action>wait_for_help</Action></Selector><Action>perform_rescue</Action></Sequence><Action>wait_for_rescue</Action></Selector></Sequence></BehaviorTree>
###
4.// INSTRUCTIONS: Use only the following behaviors {'disperse': 'Action: Move away from the centroid of swarm. Always returns True.', 'gather': 'Action: Move towards the centroid of swarm. Always returns True.', 'is_member_close_to_centroid': 'Condition: Check if any member of the swarm is close to the centroid. Returns True if a member is close, False otherwise.', 'surround': 'Action: Form a circle around the centroid. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree for a swarm of robots to disperse, gather, and then form a circle around the centroid
4.// OUTPUT:
<BehaviorTree> <Selector> <Action>disperse</Action> <Action>gather</Action> <Sequence> <Condition>is_member_close_to_centroid</Condition> <Action>surround</Action> </Sequence> </Selector> </BehaviorTree>

###
5.//INSTRUCTIONS: Use only the following behaviors {'approach_zone': 'Action: Move towards the designated approach zone. Always returns True.', 'is_zone_reached': 'Condition: Check if the robot has reached the designated approach zone. Returns True if the zone is reached, False otherwise.', 'activate_tool': 'Action: Activate the designated tool. Always returns True.', 'is_tool_activated': 'Condition: Check if the designated tool is activated. Returns True if the tool is activated, False otherwise.', 'collect_sample': 'Action: Collect a sample from the designated area. Always returns True.', 'analyze_sample': 'Action: Analyze the collected sample. Always returns True.', 'is_sample_analyzed': 'Condition: Check if the collected sample has been analyzed. Returns True if the sample is analyzed, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree for a robot to approach a designated zone, activate a tool, collect and analyze a sample
5.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Action>approach_zone</Action> <Sequence> <Condition>is_zone_reached</Condition> <Action>activate_tool</Action> </Sequence> <Selector> <Action>collect_sample</Action> <Sequence> <Condition>is_tool_activated</Condition> <Action>analyze_sample</Action> <Condition>is_sample_analyzed</Condition> </Sequence> </Selector> </Selector> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'move_towards_target': 'Action: Move towards the designated target location. Always returns True.', 'is_target_reached': 'Condition: Check if the robot has reached the designated target location. Returns True if the target is reached, False otherwise.', 'form_square': 'Action: Form a square shape with other robots. Always returns True.', 'is_square_formed': 'Condition: Check if a square shape is formed with other robots. Returns True if the shape is formed, False otherwise.', 'measure_distance': 'Action: Measure the distance between the robot and another target location. Always returns True.', 'is_distance_shorter': 'Condition: Check if the measured distance is shorter than a specified threshold. Returns True if the distance is shorter, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree for a robot to move towards a target location, form a square with other robots, and measure the distance between the robot and another target location
6.// OUTPUT:
<BehaviorTree> <Sequence> <Action>form_square</Action> <Sequence> <Condition>is_square_formed</Condition> <Action>move_towards_target</Action> </Sequence> <Selector> <Sequence> <Action>measure_distance</Action> <Condition>is_distance_shorter</Condition> </Sequence> <Action>is_target_reached</Action> </Selector> </Sequence> </BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'follow_leader': 'Action: Follow the designated leader robot. Always returns True.', 'is_leader_reached': 'Condition: Check if the robot has reached the designated leader robot. Returns True if the leader is reached, False otherwise.', 'group_up': 'Action: Group up with other robots. Always returns True.', 'is_group_formed': 'Condition: Check if a group is formed with other robots. Returns True if the group is formed, False otherwise.', 'collect_resource': 'Action: Collect a designated resource. Always returns True.', 'deposit_resource': 'Action: Deposit the collected resource. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: generate behavior tree for a robot to follow a designated leader, group up with other robots, and collect and deposit a resource
7.// OUTPUT:
<BehaviorTree> <Selector> <Action>follow_leader</Action> <Sequence> <Condition>is_leader_reached</Condition> <Action>group_up</Action> </Sequence> <Selector> <Sequence> <Action>collect_resource</Action> <Condition>is_group_formed</Condition> <Action>deposit_resource</Action> </Selector> </BehaviorTree>
###
4.// INSTRUCTIONS: Use only the following behaviors {'scan_surroundings': "Action: Perform a 360 degree scan of the environment. Returns True if no threats are detected, False otherwise.", 'move_to_target': 'Action: Move towards a specified target. Always returns True.', 'evade_threat': 'Action: Evade any detected threats. Returns True if successful, False otherwise.', 'search_for_targets': "Action: Search for targets in the environment. Returns True if targets are found, False otherwise.", 'wait': "Action: Stay in place for a set amount of time. Returns True after waiting for the specified time period.", 'is_target_detected': 'Condition: Check if target is within 10 units. Returns True if the target is within 10 units of distance, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Find and evade any nearby threats while searching for targets. If no threats are detected, wait for 5 minutes before resuming search.
4.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>scan_surroundings</Condition><Sequence><Condition>is_target_detected</Condition><Action>move_to_target</Action></Sequence><Sequence><Condition>is_target_detected</Condition><Action>evade_threat</Action></Sequence></Sequence><Sequence><Action>search_for_targets</Action></Sequence></Selector><Action>wait</Action></Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'detect_surface_type': 'Action: Perform surface analysis and return type of surface. Returns concrete, grass, or water.', 'check_weather': 'Action: Check weather conditions and return sunny, cloudy, or rainy.', 'navigate_to_destination': 'Action: Move to a specified destination. Returns True when destination is reached.', 'perform_task': "Action: Perform a specific task based on the surface type and weather conditions. Always returns True.", 'move_back_to_origin': 'Action: Return to starting location. Returns True when origin is reached.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Move to a designated location, perform a task based on the surface and weather, then return to the starting location.
5.// OUTPUT:
<BehaviorTree><Sequence><Action>navigate_to_destination</Action><Sequence><Action>detect_surface_type</Action><Action>check_weather</Action><Action>perform_task</Action></Sequence><Action>move_back_to_origin</Action></Sequence></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'detect_drop_zone': 'Subtree node: Represents a behavior tree for detecting and landing in the designated drop zone.', 'find_target': 'Subtree node: Represents a behavior tree for searching for a specific target.', 'collect_resource': 'Action: Collect a resource and return it to a specified location. Returns True when done.', 'return_to_base': 'Action: Return to the designated base location. Returns True when base is reached.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Find and collect a resource, then land in the designated drop zone and return to base.6.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Action>find_target</Action><Action>collect_resource</Action><Action>return_to_base</Action></Sequence><Sequence><Action>detect_drop_zone</Action><Action>land_in_drop_zone</Action><Action>return_to_base</Action></Sequence></Selector></Sequence></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'detect_enemy': 'Action: Detect and identify enemies in the surrounding area. Returns True if enemies are present.', 'navigate_to_cover': 'Action: Move to the nearest cover location. Returns True when cover is reached.', 'shoot_target': 'Action: Shoot at a designated target. Returns True when target is hit.', 'check_ammo': 'Condition: Check remaining ammo. Returns True if ammo is available, False otherwise.', 'reload_ammo': 'Action: Reload ammo. Returns True when reloading is completed.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: Identify enemies, take cover if necessary, and engage in combat while managing ammo. If ammo runs out, reload and continue engaging enemies.
7.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>detect_enemy</Condition><Action>navigate_to_cover</Action><Action>shoot_target</Action></Sequence><Sequence><Condition>check_ammo</Condition><Action>reload_ammo</Action></Sequence></Selector></Sequence></BehaviorTree>  
###
3.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'detect_resource': 'Condition: Check if a resource is within detection range. Returns True if a resource is within a specified range, False otherwise.', 'pick_resource': 'Action: Pick up a resource. Always returns True.', 'place_resource': 'Action: Place the picked resource at a designated location. Always returns True.', 'return_to_home': 'Action: Return to the home location. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3.// USER COMMAND: generate behavior tree to 'Collect three resources, return to home, and place resources in designated locations.'Output only the XML behavior tree without extra text.
3.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>detect_resource</Condition> <Action>pick_resource</Action> <Action>place_resource</Action> </Sequence> <Sequence> <Condition>detect_resource</Condition> <Action>pick_resource</Action> <Action>place_resource</Action> </Sequence> <Sequence> <Condition>detect_resource</Condition> <Action>pick_resource</Action> <Action>place_resource</Action> </Sequence> <Action>return_home</Action> </Selector> </Sequence> </BehaviorTree>

###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'detect_intruder': 'Condition: Check for an intruder within a specified range. Returns True if an intruder is detected, False otherwise.', 'move_towards_intruder': 'Action: Move towards the intruder. Always returns True.', 'decide_evade_strategy': 'Condition: Check for available escape routes. Returns True if escape routes are available, False otherwise.', 'evade_intruder': 'Action: Evade the intruder by moving in a random direction. Always returns True.', 'signal_intruder': 'Action: Send a signal to other robots about the intruder. Returns True if successfully signaled, False otherwise.', 'return_to_base': 'Action: Return to the designated base location. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Detect and evade an intruder. Send a signal to other robots and return to the base.'Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>detect_intruder</Condition> <Action>move_towards_intruder</Action> <Condition>decide_evade_strategy</Condition> <Action>evade_intruder</Action> <Action>signal_intruder</Action> </Sequence> <Action>return_to_base</Action> </Selector> </Sequence> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'detect_collaborator': 'Condition: Check for a nearby collaborator within a specified range. Returns True if a collaborator is detected, False otherwise.', 'communicate_with_collaborator': 'Action: Send a message to the collaborator. Returns True if the message is successfully sent, False otherwise.', 'move_to_collaborator': 'Action: Move towards the collaborator. Always returns True.', 'perform_joint_task': 'Action: Perform a joint task with the collaborator. Returns True if the task is successfully completed, False otherwise.', 'return_to_start': 'Action: Return to the starting location. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Find a collaborator, communicate and perform a joint task, then return to the starting location.'Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>detect_collaborator</Condition> <Action>communicate_with_collaborator</Action> <Sequence> <Condition>is_agent_in_nest</Condition> <Action>move_to_collaborator</Action> <Action>perform_joint_task</Action> </Sequence> </Sequence> <Action>return_to_start</Action> </Selector> </Sequence> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'detect_food': 'Condition: Check for food within a specified range. Returns True if food is detected, False otherwise.', 'collect_food': 'Action: Collect the food. Returns True if food is successfully collected, False otherwise.', 'bring_food_to_nest': 'Action: Bring the collected food to the designated nest. Returns True if successfully brought, False otherwise.', 'build_nest': 'Action: Construct a new nest. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Build a new nest. Collect food and bring it to the nest.'Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>detect_food</Condition> <Action>collect_food</Action> <Action>bring_food_to_nest</Action> <Action>build_nest</Action> </Sequence> </Selector> </Sequence> </BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'detect_predator': 'Condition: Check for a nearby predator within a specified range. Returns True if a predator is detected, False otherwise.', 'hide': 'Action: Move to a safe hiding place to avoid predation. Returns True if successfully hidden, False otherwise.', 'escape_towards_nest': 'Action: Quickly escape towards the nest to avoid predation. Returns True if escaped successfully, False otherwise.', 'form_defensive_unit': 'Action: Form a defensive unit with nearby agents. Returns True if successfully formed, False otherwise.', 'is_nest_safe': 'Condition: Check if the designated nest is safe. Returns True if safe, False otherwise.', 'return_to_nest': 'Action: Return to the designated nest. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: generate behavior tree to 'Detect a predator, form a defensive unit, and return to the nest. If the nest is not safe, hide or
###
4.// INSTRUCTIONS: Use only the following behaviors {'follow_target': 'Action: Move towards the designated target. Always returns True.', 'scan_for_obstacles': "Action: Scans the surrounding environment for obstacles. Always returns True.", 'avoid_obstacles': "Action: Move away from detected obstacles. Always returns True.", 'is_target_reached': 'Condition: Check if target is within a specific distance. Returns True if target is within the designated distance, False otherwise.', 'is_obstacle_nearby': 'Condition: Check if an obstacle is within a certain proximity. Returns True if an obstacle is nearby, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Move towards a designated target while avoiding obstacles. If the target is reached, perform a task.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_target_reached</Condition><Action>perform_task</Action></Sequence><Sequence><Action>follow_target</Action><Action>scan_for_obstacles</Action><Selector><Sequence><Condition>is_obstacle_nearby</Condition><Action>avoid_obstacles</Action></Sequence></Selector></Sequence></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'move_forward': 'Action: Move the agent in the current direction. Always returns True.', 'scan_environment': 'Action: Scan the current environment for resources. Always returns True.', 'collect_resource': 'Subtree node: Represents a behavior tree for collecting resources.', 'is_agent_full': 'Condition: Check if the agent has reached maximum carrying capacity. Returns True if the agent cannot collect any more resources, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Move forward while scanning for resources, and collect resources until carrying capacity is reached.
5.// OUTPUT:
<BehaviorTree><Sequence><Action>move_forward</Action><Action>scan_environment</Action><Selector><Sequence><Condition>is_agent_full</Condition><Action>move_to_nest</Action></Sequence><Action>collect_resource</Action></Selector></Sequence></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'go_to_next_checkpoint': 'Action: Move towards the next designated checkpoint. Always returns True.', 'check_for_hazard': "Action: Checks for any potential hazards in the current area. Always returns True.", 'avoid_hazard': "Action: Avoids the detected hazard and find an alternate route. Always returns True.", 'is_checkpoint_reached': 'Condition: Check if the next checkpoint is within a specific distance. Returns True if the checkpoint is within the designated distance, False otherwise.', 'is_hazard_detected': 'Condition: Check if a hazard is present in the current area. Returns True if a hazard is detected, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Travel to designated checkpoints while avoiding hazards. If a hazard is detected, find a new route to the checkpoint.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_checkpoint_reached</Condition><Action>continue_to_next_checkpoint</Action></Sequence><Sequence><Action>go_to_next_checkpoint</Action><Action>check_for_hazard</Action><Selector><Sequence><Condition>is_hazard_detected</Condition><Action>avoid_hazard</Action></Sequence></Selector></Sequence></Selector></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'move_forward': 'Action: Move the agent in the current direction. Always returns True.', 'scan_surroundings': 'Action: Scan the surrounding environment for targets. Always returns True.', 'scan_for_target': 'Subtree node: Represents a behavior tree for detecting and tracking targets.', 'target_encountered': 'Condition: Check if a target has been encountered. Returns True if a target is detected, False otherwise.', 'is_target_lost': 'Condition: Check if the target is lost or out of range. Returns True if the target is lost, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: Continuously scan the surroundings for targets, and track them until they are encountered or out of range.
7.// OUTPUT:
<BehaviorTree><Sequence><Action>scan_surroundings</Action><Selector><Sequence><Condition>target_encountered</Condition><Action>track_target</Action></Sequence><Sequence><Condition>is_target_lost</Condition><Action>move_to_last_known_target_location</Action></Sequence><Action>scan_for_target</Action></Selector></Sequence></BehaviorTree>
###
4.// INSTRUCTIONS: Use only the following behaviors {'scratch_head': 'Action: Scratch the agent's head in confusion. Always returns True.', 'apologize': 'Action: Apologize to the user. Always returns True.', 'scan_surroundings': 'Action: Scan the surroundings for potential threats. Always returns True.', 'wait': 'Action: Pause for 5 seconds before continuing. Always returns True.', 'is_user_confused': 'Condition: Check if user's commands are unclear or confusing. Returns True if user is confused, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: If the user's commands are unclear or confusing, apologize and notify them of the issue. Otherwise, continue scanning the surroundings.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_user_confused</Condition><Action>apologize</Action><Action>notify_user</Action></Sequence><Action>scan_surroundings</Action></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'access_sensors': 'Action: Access and collect data from sensors. Always returns True.', 'analyze_data': 'Action: Analyze the collected data and identify potential problems. Always returns True.', 'implement_solution': 'Action: Implement a solution based on the analyzed data. Always returns True.', 'is_sensor_locked': 'Condition: Check if sensors are currently locked and unavailable. Returns True if sensors are locked, False otherwise.', 'is_data_error': 'Condition: Check if the collected data contains any errors or inconsistencies. Returns True if data is erroneous, False otherwise.', 'is_problem_detected': 'Condition: Check if any problems were identified based on the analyzed data. Returns True if a problem is detected, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Collect data from sensors, analyze it, and implement a solution if any problems are detected. Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree><Sequence><Action>access_sensors</Action><Sequence><Action>analyze_data</Action><Sequence><Condition>is_data_error</Condition><Action>access_sensors</Action><Action>analyze_data</Action></Sequence></Sequence><Condition>is_problem_detected</Condition><Action>implement_solution</Action></Sequence></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'move_to_water_source': 'Action: Move towards the nearest water source. Always returns True.', 'fill_container': 'Action: Fill the agent's water container. Always returns True.', 'is_water_container_full': 'Condition: Check if the water container is full. Returns True if container is full, False otherwise.', 'is_reached_water_source': 'Condition: Check if the agent has reached the water source. Returns True if agent has reached the source, False otherwise.', 'is_agent_thirsty': 'Condition: Check if the agent's water level is low. Returns True if water level is low, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: If the agent is thirsty, move to the nearest water source and fill the water container. Otherwise, continue with current task.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_agent_thirsty</Condition><Selector><Sequence><Action>move_to_water_source</Action><Condition>is_reached_water_source</Condition><Action>fill_container</Action><Condition>is_water_container_full</Condition></Sequence><Action>continue_with_task</Action></Selector></Sequence></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'pickup_item': 'Action: Pick up the designated item. Always returns True.', 'drop_item': 'Action: Drop the currently held item. Always returns True.', 'is_item_available': 'Condition: Check if the designated item is available in the environment. Returns True if item is available, False otherwise.', 'is_holding_item': 'Condition: Check if the agent is currently holding an item. Returns True if item is held, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: If the agent is currently holding an item, drop it and pick up the designated item. Otherwise, check if the designated item is available and pick it up.
7.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_holding_item</Condition><Action>drop_item</Action><Action>pickup_item</Action></Sequence><Sequence><Condition>is_item_available</Condition><Action>pickup_item</Action></Sequence></Selector></BehaviorTree>###
3.// INSTRUCTIONS: Use only the following behaviors {'gather_resources': 'Action: Gather resources at the current location. Always returns True.', 'build_structure': 'Action: Build a structure at the current location. Always returns True.', 'move_to_resource': 'Action: Move towards the nearest resource. Always returns True.', 'move_to_base': 'Action: Move towards the base. Returns True once the agent reaches the base.', 'is_resource_nearby': 'Condition: Check for resources nearby. Returns True if a resource is detected within a certain radius, False otherwise.'} to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3.// USER COMMAND: Gather resources and build a structure at the current location, then return to base once all resources are depleted.
3.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Action>gather_resources</Action><Action>build_structure</Action></Sequence><Action>move_to_resource</Action></Selector><Sequence><Action>move_to_base</Action><Condition>is_resource_nearby</Condition></Sequence></Sequence></BehaviorTree>
###
4.// INSTRUCTIONS: Use only the following behaviors
{'move_to_nest': 'Action: Move towards the nest. Returns True once the agent reaches the nest.', 'return_to_position': 'Action: Return to a specific position. Returns True once the agent reaches the position.', 'is_obstacle_away': 'Condition: Check if an obstacle is away from the agent. Returns True if no obstacles are present within a certain distance, False otherwise.', 'is_food_detected': 'Condition: Check for food nearby. Returns True if food is detected within a certain radius, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Move back to designated position if there are no obstacles ahead, otherwise move towards the nearest food source.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_obstacle_away</Condition><Action>return_to_position</Action></Sequence><Action>move_to_nest</Action></Selector><Action>move_to_food</Action></BehaviorTree>
###
5.// INSTRUCTIONS: Use only the following behaviors
{'aggressively_attack': 'Action: Aggressively attack any visible enemies. Always returns True.', 'check_health': 'Action: Check the agent's health status. Returns True once the agent's health is checked.', 'heal': 'Action: Heal the agent if its health is low. Returns True once the agent's health has been restored.', 'is_enemy_nearby': 'Condition: Checks if there are any enemies within a certain radius. Returns True if enemies are detected, False otherwise.', 'is_health_low': 'Condition: Checks if the agent's health is below a certain threshold. Returns True if health is low, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: If health is low, check health and heal. If enemies are nearby, aggressively attack. Otherwise, continue moving.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_health_low</Condition><Sequence><Action>check_health</Action><Action>heal</Action></Sequence></Sequence><Condition>is_enemy_nearby</Condition><Action>aggressively_attack</Action><Action>continue_moving</Action></Selector></BehaviorTree>
###
6.// INSTRUCTIONS: Use only the following behaviors
{'follow': 'Action: Follow a designated leader. Returns True while following the leader.', 'avoid_obstacles': 'Action: Avoid obstacles while following the leader. Always returns True.', 'check_leader_status': 'Condition: Check the leader's status. Returns True if the leader is still active, False otherwise.', 'is_leader_nearby': 'Condition: Check if the leader is within a certain radius. Returns True if leader is detected, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Follow designated leader and avoid obstacles, but check if the leader is still active every 10 seconds.
6.// OUTPUT:
<BehaviorTree><Sequence><Action>follow</Action><Selector><Action>avoid_obstacles</Action><Condition>check_leader_status</Condition><Condition>is_leader_nearby</Condition></Selector></Sequence></BehaviorTree>
###
7.// INSTRUCTIONS: Use only the following behaviors
{'find_resources': 'Action: Search for resources within a large area. Always returns True.', 'gather_resource': 'Action: Gather the found resource. Returns True once the resource is in the agent's possession.', 'store_resource': 'Action: Store the gathered resource in the nest. Returns True once the resource is stored.', 'is_nest_nearby': 'Condition: Check if the nest is within a certain distance. Returns True if nest is detected, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: Find and gather resources, then move them back to the nest for storage. Continue until the nest is reached.
7.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Action>find_resources</Action><Sequence><Action>gather_resource</Action><Action>store_resource</Action></Sequence></Selector><Condition>is_nest_nearby</Condition></Sequence></BehaviorTree> 
###
3.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'detect_food': 'Condition: Check if food is detected within 20 units. Returns True if food is detected, False otherwise.', 'find_food': 'Action: Move towards the nearest food source. Returns True once food is reached and False otherwise.', 'pick_up_food': 'Action: Pick up the food and bring it back to the nest. Always returns True.', 'navigate_home': 'Action: Navigate back to the nest. Returns True once the agent reaches the nest, False otherwise.', 'release_food': 'Action: Release the food at the nest. Always returns True.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3.// USER COMMAND: generate behavior tree to 'Find and pick up food, avoid obstacles, and navigate back home to release food.'Output only the XML behavior tree without extra text.
3.// OUTPUT:
<BehaviorTree> <Sequence> <Action>find_food</Action> <Selector> <Sequence> <Condition>detect_food</Condition> <Action>pick_up_food</Action> </Sequence> <Action>avoid_obstacle</Action> </Selector> <Action>release_food</Action> </Sequence> <Sequence> <Condition>!= release_food</Condition> <Action>navigate_home</Action> <Action>task_completed</Action> </Sequence> </BehaviorTree>

###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'detect_intruder': 'Condition: Check for any intruders within 30 units. Returns True if an intruder is detected, False otherwise.', 'detect_nest_location': 'Condition: Check if the nest location is known. Returns True if the nest location is known, False otherwise.', 'move_to_intruder': 'Action: Move towards the detected intruder. Returns True once the agent reaches the intruder, False otherwise.', 'return_to_nest': 'Action: Return to the known location of the nest. Returns True once the nest location is reached, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Detect any intruders, move to intruder if detected, and return to the nest.'Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>detect_intruder</Condition> <Action>move_to_intruder</Action> </Sequence> <Action>avoid_obstacle</Action> </Selector> <Sequence> <Condition>!= move_to_intruder</Condition> <Action>return_to_nest</Action> <Action>task_completed</Action> </Sequence> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'change_color_to_blue': "Action: Change agent's color to blue. Returns True.", 'change_color_to_purple': "Action: Change agent's color to purple. Always returns True.", 'comunicate_message': 'Action: Communicate a message to other robots. Always returns True.', 'form_circle': 'Action: Form a circle with other robots. Always returns True.', 'gather_resources': 'Action: Gather resources from the environment. Returns True once resources are collected and False otherwise.', 'navigate_to_base': 'Action: Navigate to the base location. Returns True once the base location is reached, False otherwise.', 'return_to_base': 'Action: Return to the base location. Returns True once the base location is reached, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Change color to blue, gather resources, and communicate message, then form a circle and navigate back to base.'Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree> <Sequence> <Action>change_color_to_blue</Action> <Selector> <Sequence> <Condition>gather_resources</Condition> <Action>comunicate_message</Action> </Sequence> <Action>return_to_base</Action> </Selector> <Action>form_circle</Action> </Sequence> <Sequence> <Condition>!= form_circle</Condition> <Action>navigate_to_base</Action> <Action>agent_movement_freeze</Action> </Sequence> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'detect_human': 'Condition: Check if human is within 50 units. Returns True if human is detected, False otherwise.', 'get_human_attention': 'Action: Wave or jump to get the attention of a human. Always returns True.', 'hide': 'Action: Hide from the human. Always returns True.', 'observe_environment': 'Action: Observe and remember the environment. Returns True once the environment has been observed, False otherwise.', 'navigate_to_location': 'Action: Navigate to a specific location within the environment. Returns True once the location is reached, False otherwise.', 'navigate_to_nest': 'Action: Navigate to the nest location. Returns True once the nest location is reached, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Detect human, get human attention, hide, and navigate back to the nest.'Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree> <Sequence> <Condition>detect_human</Condition> <Action>get_human_attention</Action> </Sequence> <Selector> <Sequence> <Condition>detect_human</Condition> <Action>hide</Action> <Action>observe_environment</Action> </Sequence> <Sequence> <Condition>!= hide</Condition> <Selector> <Sequence> <Condition>observe_environment</Condition> <Action>navigate_to_location</Action> </Sequence> <Selector> <Sequence> <Condition>!= navigate_to_location</Condition> <Action>wander</Action
###
4.// INSTRUCTIONS: Use only the following behaviors {'align_with_leader': 'Action: Align the robot with the leader of the swarm. Always returns True.', 'follow_leader': 'Action: Follow the movement of the leader, maintaining a certain distance. Returns True as long as the leader is within range.', 'form_square_formation': 'Action: Form a square formation with the leader as the center point. Always returns True.', 'is_leader_detected': 'Condition: Check if the leader of the swarm is currently in range. Returns True if the leader is detected, False otherwise.', 'is_formation_complete': 'Condition: Check if all robots in the swarm have successfully formed the required formation. Returns True if the formation is complete, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Generate behavior tree for a swarm of robots to autonomously form a square formation and follow the movement of the leader
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_leader_detected</Condition><Selector><Sequence><Action>follow_leader</Action><Action>align_with_leader</Action></Sequence><Action>wait</Action></Selector></Sequence><Sequence><Condition>is_formation_complete</Condition><Action>form_square_formation</Action></Sequence></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'standby_mode': 'Action: Put the robot into standby mode, conserving energy until activated again. Always returns True.', 'request_power': 'Action: Request power from nearby charging station. Returns True if power is successfully received, False otherwise.', 'is_power_low': 'Condition: Check if the robot's energy level is below a certain threshold. Returns True if energy level is low, False otherwise.', 'is_charging_station_nearby': 'Condition: Check if there is a charging station within range of the robot. Returns True if a charging station is detected, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Generate behavior tree for a robot to efficiently manage its energy level and request power when needed
5.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_power_low</Condition><Selector><Sequence><Condition>is_charging_station_nearby</Condition><Action>request_power</Action></Sequence><Action>standby_mode</Action></Selector></Sequence></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'move_to_target_location': 'Action: Move the robot to a target location specified by coordinates. Returns True once the robot has reached the target location.', 'avoid_obstacles': 'Action: Use sensors to detect and avoid obstacles in the robot's path. Always returns True.', 'calculate_path': 'Action: Calculate the shortest path to the target location based on current obstacles and terrain. Always returns True.', 'is_target_reached': 'Condition: Check if the robot has successfully reached the target location. Returns True if the target is reached, False otherwise.', 'is_obstacle_detected': 'Condition: Check if an obstacle is currently detected in the robot's path. Returns True if an obstacle is detected, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Generate behavior tree for a robot to navigate to a specific location while avoiding obstacles along the way
6.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_target_reached</Condition><Selector><Sequence><Condition>is_obstacle_detected</Condition><Selector><Action>avoid_obstacles</Action><Action>calculate_path</Action></Selector></Sequence><Action>move_to_target_location</Action></Selector></Sequence></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'detect_environment': 'Action: Use sensors to detect and analyze the environment. Always returns True.', 'analyze_data': 'Action: Analyze the collected data to identify patterns and make predictions. Always returns True.', 'take_action': 'Action: Based on the analysis, take a specific action such as adjusting parameters or performing a task. Always returns True.', 'is_data_complete': 'Condition: Check if enough data has been collected for accurate analysis. Returns True if data is complete, False otherwise.', 'is_prediction_accurate': 'Condition: Check if the accuracy of the prediction meets a certain threshold. Returns True if the prediction is accurate, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: Generate behavior tree for a robot to collect and analyze data to make accurate predictions
7.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_data_complete</Condition><Selector><Sequence><Action>detect_environment</Action><Action>analyze_data</Action><Selector><Condition>is_prediction_accurate</Condition><Action>take_action</Action></Selector></Sequence><Action>wait</Action></Selector></Sequence></BehaviorTree>###
3.// INSTRUCTIONS: Create a behavior tree that uses the following behaviors {'avoid_obstacle': 'Action: Use sensors to detect and avoid obstacles while navigating. Always returns True.', 'gather_food': 'Action: Use sensors to detect and gather food resources within the environment. Returns True if food is present, False otherwise.', 'eat_food': 'Action: Consume gathered food resources. Returns True after successfully consuming food.', 'is_hungry': 'Condition: Check if robot's hunger level is low. Returns True if hunger level is below a certain threshold, False otherwise.', 'is_food_detected': 'Condition: Check if food resources are detected in the environment. Returns True if food is detected, False otherwise.', 'is_food_consumed': 'Condition: Check if food resources have been consumed. Returns True if food has been successfully consumed, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3.// USER COMMAND: generate behavior tree for a robot to forage and eat food until full
3.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_hungry</Condition><Selector><Condition>is_food_detected</Condition><Action>gather_food</Action><Selector><Condition>is_food_consumed</Condition><Action>eat_food</Action><Action>wander</Action></Selector></Selector></Sequence></BehaviorTree>

###
4.// INSTRUCTIONS: Use only the following behaviors {'go_to_location': "Action: Move the robot to the specified location. Returns True once the location is reached.", 'disperse_clustering': 'Action: Use dispersion algorithm to maintain distance from nearby robots. Always returns True.', 'search_for_light': 'Action: Use sensors to locate and move towards the nearest source of light. Returns True if light is present, False otherwise.', 'charge_battery': 'Action: Recharge the robot's battery. Returns True after successfully recharging.', 'is_battery_low': 'Condition: Check if the robot's battery level is below a certain threshold. Returns True if battery level is low, False otherwise.', 'is_location_reached': 'Condition: Check if the robot has reached the specified location. Returns True if the location is reached, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree for a robot to search for and recharge at a designated charging station
4.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_battery_low</Condition><Selector><Condition>is_location_reached</Condition><Action>go_to_location</Action><Selector><Condition>is_battery_low</Condition><Action>charge_battery</Action><Action>search_for_light</Action></Selector><Action>disperse_clustering</Action></Selector></Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'dispersion': "Action: Use dispersion algorithm to avoid clustering with other robots. Returns True once dispersed.", 'avoid_collision': 'Action: Use sensors to detect and avoid collisions with other robots. Returns True once collision is avoided.', 'follow_leader': 'Action: Follow the designated leader robot. Returns True while following the leader.', 'is_leader_detected': 'Condition: Check if the designated leader is within range. Returns True if leader is detected, False otherwise.', 'is_collision_present': 'Condition: Check if a collision is detected with another robot. Returns True if a collision is detected, False otherwise.', 'is_dispersed': 'Condition: Check if the robot has dispersed from other robots using the dispersion algorithm. Returns True if dispersed, False otherwise.', 'is_leader_reached': 'Condition: Check if the robot has reached the designated leader. Returns True if leader is reached, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree for a robot to follow the leader robot while avoiding collisions and maintaining dispersion
5.// OUTPUT:
<BehaviorTree><Selector><Condition>is_leader_detected</Condition><Action>follow_leader</Action><Selector><Condition>is_collision_present</Condition><Action>avoid_collision</Action><Selector><Condition>is_dispersed</Condition><Action>dispersion</Action><Action>wander</Action></Selector></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'find_source_of_sound': "Action: Use audio sensors to locate the source of any loud sound. Returns True if source is found, False otherwise.", 'navigate_to_sound': 'Action: Move towards the source of sound using the navigation algorithm. Returns True while navigating to the sound source.', 'avoid_obstacles': 'Action: Use sensors to detect obstacles and avoid them while navigating. Always returns True.', 'start_recording': 'Action: Begin recording audio once the sound source is reached. Returns True after successfully starting the recording.', 'is_recording_started': 'Condition: Check if audio recording has started. Returns True if recording has started, False otherwise.', 'is_sound_source_detected': 'Condition: Check if the source of sound has been detected. Returns True if source is detected, False otherwise.', 'is_sound_source_reached': 'Condition: Check if the robot has reached the source of sound. Returns True if source is reached, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree for a robot to navigate to and record audio at the source of a loud sound
6.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_sound_source_detected</Condition><Selector><Condition>is_sound_source_reached</Condition><Action>start_recording</Action><Selector><Condition>is_recording_started</Condition><Action>navigate_to_sound</Action><Action>avoid_obstacles</Action></Selector><Action>find_source_of_sound</Action></Selector></Sequence></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'move_to_location': "Action: Move the robot to the specified location using the navigation algorithm. Returns True once the location is reached.", 'detect_obstacles': 'Action: Use sensors to detect and avoid obstacles while navigating. Always returns True.', 'wait': 'Action: Pause the robot's movement for a designated time. Returns True after the wait time is complete.', 'get_ready_for_task': 'Action: Prepare the robot for a specified task. Returns True once the robot is ready.', 'is_location_reached': 'Condition: Check if the robot has reached the specified location. Returns True if the location is reached, False otherwise.', 'is_obstacle_detected': 'Condition: Check if an obstacle is detected nearby. Returns True if an obstacle is detected, False otherwise.', 'is_task_ready': 'Condition: Check if the robot is ready to perform the specified task. Returns True if task is ready to be performed, False otherwise.'}, to construct 
###
4.// INSTRUCTIONS: Use only the following behaviors {'patrol': 'Subtree node: A predefined sequence of actions to patrol around an area.', 'investigate': 'Subtree node: A predefined sequence of actions to investigate a suspicious area.', 'call_for_help': 'Action: Call for help from nearby robots. Always returns True.', 'terminate_intruder': 'Action: If an intruder is detected, eliminate the threat by terminating it. Always returns True', 'is_intruder_detected': 'Condition: Check if an intruder is detected in the current area. Returns True if an intruder is detected, False otherwise.', 'is_assistance_available': 'Condition: Check if help is available from nearby robots. Returns True if help is available, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Respond to "Intruder Alert!" by calling for help and eliminating the threat if possible
4.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_intruder_detected</Condition><Action>call_for_help</Action><Condition>is_assistance_available</Condition><Action>terminate_intruder</Action></Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'coordinate_swarm': 'Action: Coordinate with nearby robots to plan and execute movements. Always returns True.', 'recharge': "Action: Quickly find and recharge at a nearby energy source. Always returns True.", 'is_energy_low': 'Condition: Check if energy level is below a specific threshold. Returns True if energy is below the threshold, False otherwise.', 'is_charge_available': 'Condition: Check if a nearby energy source is available for recharging. Returns True if a source is within range, False otherwise.', 'move_to_charge': 'Action: Move towards a nearby energy source for recharging. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Create behavior tree for a robot to find and recharge at an energy source when energy is low
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_energy_low</Condition><Selector><Condition>is_charge_available</Condition><Action>move_to_charge</Action><Action>recharge</Action></Selector></Sequence><Action>coordinate_swarm</Action></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'inspect_area': 'Subtree node: A predefined sequence of actions to inspect a specific area.', 'mark_area_as_safe': 'Action: Mark a specific area as safe and clear. Always returns True.', 'mark_area_as_unsafe': 'Action: Mark a specific area as unsafe and potentially hazardous. Always returns True.', 'clear_obstacles': 'Action: If an obstacle is detected, use sensors to clear it from the area. Always returns True.', 'is_area_safe': 'Condition: Check if a specific area has been marked as safe. Returns True if the area is safe, False if it is marked as unsafe.', 'are_obstacles_present': 'Condition: Check if there are any remaining obstacles in the area. Returns True if obstacles are found, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Create behavior tree for a robot to inspect and clear obstacles from a specific area
6.// OUTPUT:
<BehaviorTree><Sequence><Action>inspect_area</Action><Selector><Condition>are_obstacles_present</Condition><Action>clear_obstacles</Action></Selector><Condition>is_area_safe</Condition><Selector><Action>mark_area_as_safe</Action><Action>mark_area_as_unsafe</Action></Selector></Sequence></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'perform_task': 'Subtree node: A predefined set of actions to perform a specific task.', 'share_resources': 'Action: Share resources with nearby robots if necessary. Always returns True.', 'transfer_item': 'Action: Transfer an item to another robot. Always returns True.', 'is_task_complete': 'Condition: Check if the current task is complete. Returns True if the task is complete, False otherwise.', 'is_resource_needed': 'Condition: Check if resources are needed by nearby robots. Returns True if resources are needed, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: Create behavior tree for a robot to work together with other robots by performing a task and sharing resources
7.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>perform_task</Action><Condition>is_task_complete</Condition></Sequence><Sequence><Condition>is_resource_needed</Condition><Action>transfer_item</Action><Action>share_resources</Action></Sequence></Selector></BehaviorTree> 
###
4.// INSTRUCTIONS: Use only the following behaviors {'follow_leader': 'Action: Follow the leader robot in the swarm. Always returns True.', 'move_to_next_checkpoint': 'Action: Move the robot to the next checkpoint in the designated path. Always returns True.', 'return_to_base': 'Action: Return the robot to the base station. Always returns True.', 'is_leader_reachable': 'Condition: Check if the leader robot is within a certain distance. Returns True if the leader is reachable, False otherwise.', 'is_path_safe': 'Condition: Check if the designated path is safe and clear of any obstacles. Returns True if the path is safe, False otherwise.', 'is_reached_checkpoint': 'Condition: Check if the robot has reached the designated checkpoint. Returns True if the checkpoint is reached, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree for a robot to follow the leader, move to the designated path and return to base station
4.// OUTPUT:
<BehaviorTree><Repeat><Selector><Sequence><Condition>is_leader_reachable</Condition><Action>follow_leader</Action></Sequence><Sequence><Condition>is_path_safe</Condition><Action>move_to_next_checkpoint</Action></Sequence><Sequence><Condition>is_reached_checkpoint</Condition><Action>return_to_base</Action></Sequence></Selector></Repeat></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'search_for_food': 'Action: Search the environment for a food source using sensors. Always returns True.', 'collect_food': 'Action: Collect the found food and store it in the robot. Always returns True.', 'return_to_nest': 'Action: Return the robot to the nest. Always returns True.', 'is_food_found': 'Condition: Check if a food source has been detected. Returns True if food is found, False otherwise.', 'is_food_collected': 'Condition: Check if the robot has collected any food. Returns True if food is collected, False otherwise.', 'is_nest_reachable': 'Condition: Check if the nest is within a certain distance. Returns True if the nest is reachable, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree for a robot to search for food, collect it, and return to the nest
5.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>is_food_found</Condition><Action>search_for_food</Action></Sequence><Sequence><Condition>is_food_collected</Condition><Action>collect_food</Action></Sequence><Condition>is_nest_reachable</Condition><Action>return_to_nest</Action></Selector></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'follow_left_wall': 'Action: Follow the left wall of the environment. Always returns True.', 'find_target_object': 'Action: Search for a specific target object within the environment using sensors. Always returns True.', 'collect_target_object': 'Action: Collect the target object and store it in the robot. Always returns True.', 'is_wall_detected': 'Condition: Check if the left wall of the environment is detected. Returns True if the wall is detected, False otherwise.', 'is_target_found': 'Condition: Check if the target object has been located. Returns True if the target is found, False otherwise.', 'is_object_collected': 'Condition: Check if the robot has collected the target object. Returns True if the object is collected, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree for a robot to follow the left wall, find a specific target object, and collect it
6.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>is_wall_detected</Condition><Action>follow_left_wall</Action></Sequence><Sequence><Condition>is_target_found</Condition><Action>find_target_object</Action></Sequence><Condition>is_object_collected</Condition><Action>collect_target_object</Action></Sequence></Selector></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'go_straight': 'Action: Move the robot straight ahead. Always returns True.', 'turn_left': 'Action: Turn the robot 90 degrees to the left. Always returns True.', 'turn_right': 'Action: Turn the robot 90 degrees to the right. Always returns True.', 'is_obstacle_detected': 'Condition: Check if an obstacle is detected in front. Returns True if an obstacle is detected, False otherwise.', 'is_target_reached': 'Condition: Check if the robot has reached the target. Returns True if the target is reached, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: generate behavior tree for a robot to move straight until obstacle and then turn towards the target
7.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>is_obstacle_detected</Condition><Selector><Action>turn_left</Action><Action>turn_right</Action></Selector></Sequence><Action>go_straight</Action></Selector></Sequence></BehaviorTree>
###
4.// INSTRUCTIONS: Use only the following behaviors {'move_towards_target': 'Action: Move towards a predefined target location. Returns True when the target is reached.', 'scan_surroundings': 'Action: Use sensors to scan the surroundings for any potential dangers. Always returns True.', 'avoid_obstacles': 'Action: Use sensors and predefined algorithms to avoid obstacles in the path. Always returns True.', 'is_target_nearby': 'Condition: Check if the target is within a specified distance. Returns True if the target is within the specified distance, False otherwise.', 'is_path_safe': 'Condition: Check if the path ahead is clear of obstacles. Returns True if no obstacles are detected, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Navigate through a maze while avoiding obstacles and reaching a specific location'
4.// OUTPUT:
<BehaviorTree> <Sequence> <Condition>is_target_nearby</Condition> <Selector> <Sequence> <Condition>is_path_safe</Condition> <Action>move_towards_target</Action> </Sequence> <Action>scan_surroundings</Action> <Action>avoid_obstacles</Action> </Selector> </Sequence> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'move_to_next_target': 'Action: Move to the next target location. Returns True when the target is reached.', 'perform_scan': 'Action: Use sensors to perform a scan of the environment. Always returns True.', 'complete_task': 'Action: Signal the completion of a task. Always returns True.', 'is_task_complete': 'Condition: Check if the current task has been completed. Returns True if the task is complete, False otherwise.', 'is_new_target_available': 'Condition: Check if there is a new target available. Returns True if a new target is available, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Complete a series of tasks in a specific order until all targets are reached'
5.// OUTPUT:
<BehaviorTree> <Sequence> <Condition>is_task_complete</Condition> <Selector> <Sequence> <Condition>is_new_target_available</Condition> <Action>move_to_next_target</Action> </Sequence> <Action>perform_scan</Action> <Action>complete_task</Action> </Selector> </Sequence> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'navigate_to_safe_zone': 'Action: Navigate to a predefined safe zone location. Returns True when the safe zone is reached.', 'scan_for_hostiles': 'Action: Use sensors to scan the surrounding area for any hostiles. Always returns True.', 'take_evasive_action': 'Action: Use predefined algorithms to take evasive action against detected hostiles. Always returns True.', 'is_safe_zone_nearby': 'Condition: Check if the safe zone is within a specified distance. Returns True if the safe zone is within the specified distance, False otherwise.', 'is_hostile_nearby': 'Condition: Check if any hostiles are detected within range. Returns True if hostiles are detected, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Navigate through a dangerous area while avoiding hostile targets and reaching a safe zone'
6.// OUTPUT:
<BehaviorTree> <Sequence> <Condition>is_safe_zone_nearby</Condition> <Selector> <Sequence> <Condition>is_hostile_nearby</Condition> <Action>scan_for_hostiles</Action> <Action>take_evasive_action</Action> </Sequence> <Action>navigate_to_safe_zone</Action> </Selector> </Sequence> </BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'search_for_fuel': 'Action: Search the surrounding area for any sources of fuel. Returns True when fuel is found.', 'refuel': 'Action: Use found fuel to refuel the robot. Returns True when refueling is complete.', 'check_fuel_level': 'Condition: Check the current fuel level. Returns True if the fuel level is below a certain threshold, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: generate behavior tree to 'Continuously search for and refuel using available sources'
7.// OUTPUT:
<BehaviorTree> <Sequence> <Condition>check_fuel_level</Condition> <Selector> <Sequence> <Action>search_for_fuel</Action> <Action>refuel</Action> </Sequence> </Selector> </Sequence> </BehaviorTree><BehaviorTree><Selector><Sequence><Condition>is_target_detected</Condition><Action>grab_target</Action></Sequence><Sequence><Condition>is_target_grabbed</Condition><Sequence><Condition>is_line_formed</Condition><Sequence><Condition>is_agent_in_nest</Condition><Action>change_color_to_red</Action></Sequence></Sequence><Action>form_line</Action></Sequence></Sequence><Sequence><Condition>is_obstacle_detected</Condition><Action>avoid_obstacle</Action></Sequence><Sequence><Condition>is_line_formed</Condition><Sequence><Condition>is_agent_in_nest</Condition><Action>change_color_to_red</Action></Sequence></Sequence><Action>wander</Action></Selector></BehaviorTree>

###
4.// INSTRUCTIONS: Use only the following behaviors {'follow_path': 'Action: Follow the predefined path. Always returns True.', 'move_forward': 'Action: Move the robot one step forward in the current direction. Always returns True.', 'turn_left': 'Action: Turn the robot 90 degrees to the left. Always returns True.', 'turn_right': 'Action: Turn the robot 90 degrees to the right. Always returns True.', 'is_goal_reached': 'Condition: Check if the robot has reached the goal. Returns True if the robot is at the goal, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'mark_visited': 'Action: Mark current location as visited in the internal map. Always returns True.', 'print_map': "Action: Print the internal map of the environment. Always returns True.", 'is_color_green': "Condition: Check if the current location's color is green. Returns True if the color is green, False otherwise.", 'is_color_red': "Condition: Check if the current location's color is red. Returns True if the color is red, False otherwise."}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Follow a predefined path while avoiding obstacles and marking visited locations. Print the internal map when the goal is reached and check if all locations have been marked.' Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_path_clear</Condition><Action>move_forward</Action><Action>mark_visited</Action></Sequence><Sequence><Condition>is_goal_reached</Condition><Action>follow_path</Action></Sequence><Sequence><Condition>is_color_green</Condition><Action>mark_visited</Action></Sequence><Sequence><Condition>is_color_red</Condition><Action>mark_visited</Action></Sequence><Action>print_map</Action></Selector></BehaviorTree>
<BehaviorTree><Selector><Sequence><Condition>is_path_clear</Condition><Action>move_forward</Action><Sequence><Condition>is_color_green</Condition><Action>mark_visited</Action><Sequence><Condition>is_color_red</Condition><Action>mark_visited</Action></Sequence></Sequence></Sequence><Sequence><Condition>is_goal_reached</Condition><Action>follow_path</Action><Action>print_map</Action></Sequence><Action>wander</Action></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'search_for_food': 'Subtree node: Represents a behavior tree for searching for food in the environment.', 'collect_food': 'Action: Collect the food and add it to the inventory. Always returns True.', 'eat_food': 'Action: Consume the food from the inventory. Always returns True.', 'is_hungry': "Event: Triggers when the agent's hunger level reaches a threshold. Returns True if the agent is hungry, False otherwise."}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Generate behavior tree to 'Search for food in the environment and eat when hungry'.
5.// OUTPUT:
<BehaviorTree><Sequence><Action>search_for_food</Action><Trigger>is_hungry</Trigger><Sequence><Action>collect_food</Action><Action>eat_food</Action></Sequence></Sequence></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'go_to_location': 'Subtree node: Represents a behavior tree for navigating to a specific location in the environment.', 'detect_obstacle': 'Condition: Check for obstacles in the current direction. Returns True if an obstacle is detected, False otherwise.', 'identify_target': 'Action: Identify the target object using sensors and update the internal map. Always returns True.', 'align_to_target': "Action: Align the robot's orientation towards the target object. Always returns True.", 'move_towards_target': "Action: Move towards the target object until within range. Always returns True.", 'is_target_reached': 'Condition: Check if the target object is within reach. Returns True if the target is within range, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Generate behavior tree to 'Navigate to a specific location while avoiding obstacles and reaching the target object'.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>detect_obstacle</Condition><Action>identify_target</Action></Sequence><Sequence><Condition>is_target_reached</Condition><Action>go_to_location</Action></Sequence><Sequence><Condition>is_target_reached</Condition><Action>go_to_location</Action></Sequence></Selector></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'deliver_mail': 'Subtree node: Represents a behavior tree for delivering mail to designated locations in the environment.', 'find_mailbox': 'Action: Move towards the nearest mailbox for mail delivery. Always returns True.', 'drop_mail': 'Action: Drop the mail at the designated mailbox. Always returns True.', 'handle_obstacle': 'Action: Handle detected obstacles in the current location, such as moving around them or waiting. Always returns True.', 'is_at_mailbox': 'Condition: Check if the robot is at the designated mailbox for mail delivery. Returns True if at the mailbox, False otherwise.', 'is_at_delivery_point': 'Condition: Check if the robot is at the designated delivery point for mail delivery. Returns True if at the delivery point, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: Generate behavior tree to 'Deliver mail to designated locations while handling obstacles and waiting at delivery points'.
7.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>find_mailbox</Action><Sequence><Condition>is_at_mailbox</Condition><Action>drop_mail</Action></Sequence><Sequence><Condition>is_at_delivery_point</Condition><Action>deliver_mail</Action></Sequence><Sequence 
###
3.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'follow_path': 'Action: Follow a specific path. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_color_changed_to_white': 'Condition: Check if the agent's color has been changed to white. Returns True if the color is white, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3.// USER COMMAND: generate behavior tree to 'Follow a specific path, change color to white, and then freeze movement.'Output only the XML behavior tree without extra text.
3.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>is_path_clear</Condition> <Action>follow_path</Action> <Action>task_completed</Action> </Sequence> <Action>wander</Action> </Selector> <Condition>is_color_changed_to_white</Condition> <Action>agent_movement_freeze</Action> </Sequence> </BehaviorTree>

###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_color_changed_to_green': 'Condition: Check if the agent's color has been changed to green. Returns True if the color is green, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Change color to green, then follow a specific path, and finally freeze movement.'Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>is_color_changed_to_green</Condition> <Action>change_color_to_green</Action> <Action>task_completed</Action> </Sequence> <Action>wander</Action> </Selector> <Sequence> <Condition>is_path_clear</Condition> <Action>follow_path</Action> <Action>agent_movement_freeze</Action> </Sequence> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Form a vertical line, avoid obstacles, and then change color to white.'Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree> <Sequence> <Sequence> <Action>avoid_obstacle</Action> <Condition>is_line_formed</Condition> </Sequence> <Selector> <Sequence> <Condition>is_line_formed</Condition> <Action>form_line</Action> </Sequence> <Action>wander</Action> </Selector> <Condition>is_line_formed</Condition> <Action>change_color_to_white</Action> </Sequence> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_color_changed_to_green': 'Condition: Check if the agent's colorIn this behavior tree, the agent will first check for obstacles. If an obstacle is detected, it will change its color to green and avoid the obstacle. If no obstacles are detected, it will randomly move until it finds the target within 20 units. Once the target is within 20 units, it will change its color to white and signal task completion. If the target is not found, it will continue wandering until the target is detected. 

###
3.// INSTRUCTIONS: Use only the following behaviors {'move_forward': 'Action: Continuously move forward. Always returns True.', 'stop_moving': 'Action: Stop all movement. Always returns True.', 'are_enemies_present': 'Condition: Check for enemies nearby. Returns True if enemies are within 10 units, False otherwise.', 'do_attack': 'Condition: Check if it is safe to attack enemies. Returns True if there are no obstacles blocking the attack, False otherwise.', 'do_retreat': 'Condition: Check if it is necessary to retreat. Returns True if the number of enemies exceeds the number of allies, False otherwise.', 'get_nearest_enemy': 'Function: Calculates the distance to the nearest enemy. Returns the distance to the nearest enemy.', 'reset_pathfinder': 'Action: Reset the pathfinder if a new enemy is detected. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3.// USER COMMAND: create a behavior tree that continuously moves forward, stops moving when enemies are present, attacks if no obstacles are blocking the attack, retreats if necessary, and resets the pathfinder if a new enemy is detected.
3.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Action>reset_pathfinder</Action><Condition>are_enemies_present</Condition><Condition>do_retreat</Condition></Sequence><Sequence><Condition>do_attack</Condition><Action>stop_moving</Action></Sequence></Selector><Action>move_forward</Action></Sequence></BehaviorTree>
In this behavior tree, the agent will continuously move forward until it detects enemies within 10 units. It will then first reset the pathfinder, and if necessary, retreat if the number of enemies exceeds the number of allies. If there are no obstacles blocking the attack, the agent will stop moving and initiate the attack. Otherwise, it will continue moving forward. 

###
4.// INSTRUCTIONS: Use only the following behaviors {'explore_around': 'Action: Explore the surrounding area. Always returns True.', 'id_nearest_resource': 'Function: Identifies the nearest resource to the agent. Returns the location of the nearest resource.', 'is_resource_reachable': 'Condition: Check if the nearest resource is reachable. Returns True if reachable, False otherwise.', 'gather_resource': 'Action: Move towards the nearest resource and gather it. Always returns True.', 'is_bag_full': 'Condition: Check if the agent's resource bag is full. Returns True if full, False otherwise.', 'deposit_resource': 'Action: Move towards the deposit location and deposit the collected resources. Always returns True.', 'is_deposit_reachable': 'Condition: Check if the deposit location is reachable. Returns True if reachable, False otherwise.', 'repair_structure': 'Action: Move towards a damaged structure and repair it. Always returns True.', 'is_structure_damaged': 'Condition: Check if there are any damaged structures within 10 units. Returns True if there are damaged structures, False otherwise.', 'find_structure_locations': 'Function: Identifies the locations of damaged structures within 10 units. Returns a list of locations.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: create a behavior tree that explores the surrounding area, identifies and gathers the nearest resource if reachable, deposits resources when the bag is full or the deposit location is unreachable, and repairs damaged structures if any are detected.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_deposit_reachable</Condition><Condition>is_bag_full</Condition><Action>deposit_resource</Action></Sequence><Sequence><Function>find_structure_locations</Function><Condition>is_structure_damaged</Condition><Action>repair_structure</Action></Sequence><Sequence><Condition>is_resource_reachable</Condition><Action>gather_resource</Action></Sequence></Selector><Action>explore_around</Action></BehaviorTree>
In this behavior tree, the agent will explore the surrounding area and gather resources if they are reachable. It will also deposit resources when the bag is full or if the deposit location is unreachable. If there are any damaged structures, the agent will repair them, and if no damaged structures are found, it will continue exploring. 

###
5.// INSTRUCTIONS: Use only the following behaviors {'navigate_to_dest': 'Action: Navigate towards the given destination. Returns True when the destination is reached.', 'wait': 'Action: Wait for 5 seconds. Always returns True.', 'scan_area': 'Action: Rotate 360 degrees to scan the surrounding area. Returns True after completing the scan.', 'is_end_destination_reached': 'Condition: Check if the final destination is reached. Returns True if the final destination is reached, False otherwise.', 'detect_obstacles': 'Condition: Check for obstacles in front of the agent. Returns True if obstacles are present, False otherwise.', 'follow_path': 'Action: Follow the pre-determined path. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: navigate to a given destination while also scanning for obstacles and following a predetermined path if obstacles are present.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>detect_obstacles</Condition><Action>wait</Action><Action>scan_area</Action></Sequence><Sequence><Condition>is_end_destination_reached</Condition><Action>navigate_to_dest</Action></Sequence></Selector><Action>follow_path</Action></BehaviorTree>
In this behavior tree, the agent will first check for obstacles and, if present, wait for 5 seconds before scanning the surrounding area. If no obstacles are detected, it will navigate to the given destination. Once the final destination is reached, the agent will follow the predetermined path to reach the destination. 

###
6.// INSTRUCTIONS: Use only the following behaviors {'move_to_point': 'Action: Move towards a given point. Returns True when the point is reached.', 'recharge': 'Action: Recharge the agent. Always returns True.', 'get_current_battery_level': 'Function: Retrieves the current battery level of the agent. Returns the battery level as a percentage.', 'is_battery_low': 'Condition: Check if the battery level is below 30%. Returns True if battery low, False otherwise.', 'detect_power_source': 'Condition: Check for a power source nearby. Returns True if a power source is detected, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say 
###
3.// INSTRUCTIONS: Use only the following behaviors {'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_food_detected': 'Condition: Check if there is food nearby. Returns True if food is detected, False otherwise.', 'is_food_reached': 'Condition: Check if the food is within 15 units. Returns True if the food is within 15 units of distance, False otherwise.', 'eat_food': 'Action: Pickup and consume the food. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3.// USER COMMAND: generate behavior tree to 'Find and consume food, then return to the nest and change color to white.' Output only the XML behavior tree without extra text.
3.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>is_agent_in_nest</Condition> <Action>change_color_to_white</Action> </Sequence> <Sequence> <Condition>is_food_detected</Condition> <Selector> <Sequence> <Condition>is_food_reached</Condition> <Action>eat_food</Action> <Action>task_completed</Action> </Sequence> <Action>move_forward</Action> </Selector> </Sequence> </Selector> </Sequence> </BehaviorTree>

###
4.// INSTRUCTIONS: Use only the following behaviors {'avoid_collision': 'Action: Avoid collisions with other robots. Always returns True.', 'communicate_position': 'Action: Communicate the agent's current position to other robots. Always returns True.', 'is_collision_detected': 'Condition: Check for collisions with other robots. Returns True if a collision is detected, False otherwise.', 'is_message_received': 'Condition: Check if a message has been received from another robot. Returns True if a message is received, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Avoid collisions with other robots and communicate position while exploring the environment.' Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>is_collision_detected</Condition> <Action>avoid_collision</Action> </Sequence> <Action>communicate_position</Action> </Selector> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'detect_boundary': 'Condition: Check if agent is near the boundary of the environment. Returns True if near boundary, False otherwise.', 'is_area_explored': 'Condition: Check if the current area has already been explored. Returns True if area is explored, False otherwise.', 'follow_boundary': 'Action: Follow the boundary of the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Explore the environment by following the boundary and avoiding obstacles.' Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>is_area_explored</Condition> <Action>alert_complete</Action> </Sequence> <Sequence> <Condition>detect_boundary</Condition> <Action>follow_boundary</Action> <Action>detect_boundary</Action> </Sequence> <Action>avoid_obstacle</Action> </Selector> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'pick_up_object': 'Action: Pick up a nearby object. Always returns True.', 'is_object_held': 'Condition: Check if the agent is holding an object. Returns True if holding an object, False otherwise.', 'place_object_at_location': 'Action: Place the held object at a specified location. Always returns True.', 'move_to_location': 'Action: Move to a specified location. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Pick up an object, move to a specified location, and place the object at that location.' Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>is_object_held</Condition> <Action>place_object_at_location</Action> </Sequence> <Sequence> <Action>pick_up_object</Action> <Action>move_to_location</Action> <Action>place_object_at_location</Action> </Sequence> </Selector> </BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'detect_neighbor': 'Condition: Check if a neighboring robot is within communication range. Returns True if a neighbor is detected, False otherwise.', 'is_message_received': 'Condition: Check if a message has been received from another robot. Returns True if a message is received, False otherwise.', 'relay_message': 'Action: Relay a received message to other robots. Returns True if message is successfully relayed, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: generate behavior tree to 'Relay messages between neighboring robots.' Output only the XML behavior tree without extra text.
7.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>detect_neighbor</Condition> <Selector> <Sequence> <Condition>is_message_received</Condition> <Action>relay_message</Action> </Sequence> </Selector> <Action>relay_message</Action> </Sequence> </Selector> </BehaviorTree>
###
4.// INSTRUCTIONS: Use only the following behaviors {'peck': 'Action: Make the agent peck the ground. Returns True if successful, False otherwise.', 'move_to_nest': 'Action: Move the agent to the nest. Returns True if successful, False otherwise.', 'is_food_nearby': 'Condition: Check if food is nearby. Returns True if food is within range, False otherwise.', 'is_nest_nearby': 'Condition: Check if the nest is nearby. Returns True if the nest is within range, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: For a group of robots, create a foraging behavior where they peck for food until their energy levels are full and then return to the nest to deposit food.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_food_nearby</Condition><Action>peck</Action></Sequence><Sequence><Condition>is_nest_nearby</Condition><Action>move_to_nest</Action></Sequence></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'move_to_target': 'Action: Move the robot to a designated target. Returns True if successful, False otherwise.', 'scan_surroundings': "Action: Rotate 360 degrees to scan the surroundings. Returns 'found target' if a target is detected, 'no target' if no target is detected.", 'chase_target': 'Action: Chase the detected target. Returns True if successful, False otherwise.', 'engage_target': 'Action: Engage with the target and perform a task. Returns True if successful, False otherwise.', 'is_target_nearby': 'Condition: Check if a target is within 10 units. Returns True if a target is within 10 units of distance, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Create a behavior tree for a robot to scan its surroundings, detect a target, and perform a task while avoiding obstacles.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>scan_surroundings</Action><Condition>is_target_nearby</Condition></Sequence><Selector><Sequence><Action>chase_target</Action><Action>engage_target</Action></Sequence><Condition>is_obstacle_detected</Condition></Selector></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'random_walk': 'Action: Move in a random direction for a set time period. Returns True after the set time period is over.', 'detect_boundary': 'Action: Detect the boundary of the environment. Returns True if boundary is detected, False otherwise.', 'avoid_boundary': "Action: Move away from the boundary. Returns True if successful, False otherwise.", 'gather_food': 'Action: Gather food from the environment. Returns True if successful, False otherwise.', 'drop_food': 'Action: Drop the food gathered. Returns True if successful, False otherwise.', 'is_food_nearby': 'Condition: Check if food is nearby. Returns True if food is within range, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Build a behavior tree for a robot to randomly explore the environment, gather food when it detects it, and avoid the boundary of the environment.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>random_walk</Action><Condition>is_food_nearby</Condition><Sequence><Action>gather_food</Action><Action>drop_food</Action></Sequence></Sequence><Selector><Sequence><Action>detect_boundary</Action><Action>avoid_boundary</Action></Sequence></Selector></Selector></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'send_signal': 'Action: Send a signal to communicate with other robots. Returns True if successful, False otherwise.', 'wait_for_signal': "Action: Wait for a signal from another robot. Returns 'got signal' if a signal is received, 'no signal' if no signal is received.", 'communicate': 'Action: Communicate with other robots to coordinate tasks. Returns True if successful, False otherwise.', 'random_movement': 'Action: Move in a random direction for a set time period. Returns True after the set time period is over.', 'is_signal_received': 'Condition: Check if a signal has been received. Returns True if a signal has been received, False otherwise.', 'is_group_member_found': 'Condition: Check if a group member has been found and is within range. Returns True if a group member is found, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: Create a behavior tree for a group of robots to communicate with each other, wait for a signal from a group member, and coordinate tasks.
7.// OUTPUT:
<BehaviorTree><Selector><Sequence><Selector><Action>send_signal</Action><Condition>is_group_member_found</Condition></Selector><Sequence><Action>wait_for_signal</Action><Condition>is_signal_received</Condition></Sequence></Sequence><Selector><Sequence><Action>communicate</Action><Action>random_movement</Action></Sequence><Sequence><Action>random_movement</Action></Sequence></Selector></Selector></BehaviorTree>
###
3.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'follow_path': 'Action: Follow the path set by the swarm leader. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_leader_detected': 'Condition: Check if the swarm leader is within a certain range. Returns True if the leader is detected, False otherwise.', 'is_link_formed': 'Condition: Check if the agent has formed a link with the swarm leader. Returns True if a link is formed, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3.// USER COMMAND: generate behavior tree to 'follow the swarm leader, avoid obstacles, and change color to green when the leader is detected'. Output only the XML behavior tree without extra text.
3.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_leader_detected</Condition><Action>follow_path</Action></Sequence><Sequence><Condition>is_obstacle_detected</Condition><Action>avoid_obstacle</Action></Sequence><Action>change_color_to_green</Action></BehaviorTree>

###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'explore_area': 'Action: Explore the surrounding area. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_area_explored': 'Condition: Check if the agent has explored the entire area. Returns True if area is fully explored, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'return_to_nest': 'Action: Return to the nest location. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'explore the environment, change color to green when obstacles are detected, and return to the nest after exploring'. Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_area_explored</Condition><Action>return_to_nest</Action></Sequence><Selector><Sequence><Condition>is_obstacle_detected</Condition><Action>avoid_obstacle</Action></Sequence><Sequence><Condition>is_obstacle_detected</Condition><Action>change_color_to_green</Action></Sequence></Selector><Action>explore_area</Action></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'detect_target': 'Condition: Check if target object is within sensor range. Returns True if target is detected, False otherwise.', 'follow_path': 'Action: Follow the path set by the swarm leader. Always returns True.', 'go_to_target': 'Action: Move towards the target object. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_at_target': 'Condition: Check if the agent has reached the target object. Returns True if at the target object, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'detect the target object, follow the swarm leader, and move towards the target object once it is detected'. Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree><Selector><Condition>detect_target</Condition><Sequence><Condition>is_at_target</Condition><Action>go_to_target</Action></Sequence></Selector><Sequence><Condition>is_agent_in_nest</Condition><Action>follow_path</Action></Sequence></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_blue': "Action: Change agent's color to blue. Always returns True.", 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'move_back': 'Action: Move backwards. Always returns True.', 'move_forward': 'Action: Move forward. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'avoid obstacles and move forward while maintaining a line with the center, change color to blue when obstacles are present, and move backwards when path ahead is not clear'. Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_obstacle_detected</Condition><Sequence><Condition>is_line_formed</Condition><Action>change_color_to_blue</Action></Sequence></Condition><Sequence><Condition>is_path_clear</Condition><Action>move_forward</Action></Sequence><Action>move_back</Action></Sequence><Action>avoid_obstacle</Action><Selector><Condition>is_line_formed</Condition><Action>change_color_to_green</Action></Selector></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'agent 
###
4.// INSTRUCTIONS: Use only the following behaviors {'spin_around': 'Action: Make a 360-degree spin to scan the surrounding environment. Always returns True.', 'go_to_recycling_point': 'Action: Navigate to the nearest recycling point to dispose of collected materials. Always returns True.', 'collect_materials': 'Action: Use arms to collect and store recyclable materials. Always returns True.', 'is_recycling_point_reached': 'Condition: Check if the robot has reached the designated recycling point. Returns True if the recycling point is reached, False otherwise.', 'is_material_detected': 'Condition: Check if there are any recyclable materials detected in the environment. Returns True if materials are detected, False otherwise.', 'is_arm_full': 'Condition: Check if the robot's arm storage is full. Returns True if the storage is full, False otherwise.', 'is_inventory_full': 'Condition: Check if the robot's overall inventory is full and needs to go to the recycling point. Returns True if the inventory is full, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Create a behavior tree for a recycling robot to collect recyclable materials and deposit them at the designated recycling point.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_inventory_full</Condition><Action>go_to_recycling_point</Action></Sequence><Sequence><Condition>is_material_detected</Condition><Selector><Sequence><Condition>is_arm_full</Condition><Action>go_to_recycling_point</Action></Sequence><Action>collect_materials</Action></Selector></Sequence><Sequence><Condition>is_recycling_point_reached</Condition><Action>deposit_materials</Action></Sequence></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'move_to_support_position': 'Action: Move to the designated support position to assist a team member. Always returns True.', 'scan_surroundings': 'Action: Use sensors to scan the surrounding environment for potential hazards. Always returns True.', 'provide_cover': 'Action: Use weapons and shields to provide cover for the team while they complete a task. Always returns True.', 'is_team_member_in_danger': 'Condition: Check if a team member is in danger or under attack. Returns True if a team member is in danger, False otherwise.', 'is_enemy_detected': 'Condition: Check for any enemy presence in the surrounding area. Returns True if an enemy is detected, False otherwise.', 'is_cover_provided': 'Condition: Check if the team currently has enough cover from potential threats. Returns True if enough cover is provided, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Generate a behavior tree for a team of swarm robots to provide support and cover for each other while completing a dangerous task.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_enemy_detected</Condition><Action>provide_cover</Action></Sequence><Sequence><Condition>is_team_member_in_danger</Condition><Action>move_to_support_position</Action></Sequence><Sequence><Condition>is_cover_provided</Condition><Action>move_to_cover_position</Action></Sequence><Sequence><Condition>is_enemy_detected</Condition><Action>use_weapons</Action></Sequence><Sequence><Condition>is_cover_provided</Condition><Selector><Sequence><Condition>is_enemy_detected</Condition><Action>use_weapons</Action></Sequence><Action>scan_surroundings</Action></Selector></Sequence></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'move_to_food_source': 'Action: Move towards the designated food source location. Always returns True.', 'collect_food': 'Action: Use arms to pick up food and store it in the robot's inventory. Always returns True.', 'eat_food': 'Action: Consume food from the robot's inventory. Always returns True.', 'is_food_nearby': 'Condition: Check if there is any food within a certain radius of the robot. Returns True if food is nearby, False otherwise.', 'is_inventory_full': 'Condition: Check if the robot's inventory is full and can no longer collect more food. Returns True if the inventory is full, False otherwise.', 'is_hungry': 'Condition: Check if the robot is hungry and needs to eat food. Returns True if the robot is hungry, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Construct a behavior tree for a foraging robot to collect food and replenish its energy levels.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_inventory_full</Condition><Action>drop_food</Action></Sequence><Sequence><Condition>is_hungry</Condition><Action>eat_food</Action><Sequence><Condition>is_food_nearby</Condition><Selector><Sequence><Condition>is_inventory_full</Condition><Selector><Sequence><Condition>is_food_nearby</Condition><Action>move_to_food_source</Action></Sequence><Action>collect_food</Action><Action>eat_food</Action></Selector></Sequence></Selector></Sequence></Selector></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'move_to_target': 'Action: Move towards the designated target location. Always returns True.', 'analyze_target': 'Action: Use sensors and data analysis methods to gather information about the target. Always returns True.', 'track_target': 'Action: Follow and monitor the movements of the target. Always returns True.', 'is_target_spotted': 'Condition: Check if the robot has spotted the target. Returns True if the target is spotted, False otherwise.', 'is_target_lost': 'Condition: Check if the robot has lost track of the target. Returns True if the target is lost, False otherwise.', 'is_information_gathered': 'Condition: Check if enough information has been gathered about the target. Returns True if enough information is gathered, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: Generate a behavior tree for a surveillance robot to track and gather information about a specific target.
7.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_target_spotted</Condition><Action>track_target</Action></Sequence><Sequence><Condition>is_target_lost</Condition><Action>move_to_target</Action></Sequence><Sequence><Condition>is_information_gathered</Condition><Action>analyze_target</Action></Sequence></Selector></BehaviorTree> 
###
3.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_concentric_circles': 'Action: Form concentric circles with other robots. Always returns True.', 'is_any_circle_formed': 'Condition: Check if any concentric circle is formed. Returns True if at least one circle is formed, False otherwise.', 'is_circle_at_center': 'Condition: Check if the formed circle is at the center. Returns True if the circle is at the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3.// USER COMMAND: generate behavior tree to 'Form two concentric circles, avoid obstacles during movement, and stop when target is reached.'Output only the XML behavior tree without extra text.
3.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Action>form_concentric_circles</Action> <Action>avoid_obstacle</Action> </Sequence> <Action>avoid_obstacle</Action> </Selector> <Selector> <Sequence> <Condition>is_target_reached</Condition> <Action>task_completed</Action> </Sequence> <Action>wander</Action> </Selector> </Sequence> </BehaviorTree>
 
###
4.// INSTRUCTIONS: Use only the following behaviors {'charge_battery': 'Action: Recharge the robot's battery. Returns True if battery is fully charged, False otherwise.', 'detect_low_battery': "Condition: Check if the robot's battery is below 20%. Returns True if battery level is below 20%, False otherwise.", 'go_to_charging_station': "Action: Move to the nearest charging station. Returns True if the robot is at the charging station, False otherwise.", 'move_to_location': 'Action: Move to a specific location. Returns True if the robot is at the target location, False otherwise.', 'pick_up_item': 'Action: Pick up an item at the current location. Returns True if the item is successfully picked up, False otherwise.', 'is_item_present': 'Condition: Check if an item is present at the current location. Returns True if an item is present, False otherwise.', 'drop_off_item': 'Action: Drop off the picked up item at a designated location. Returns True if the item is successfully dropped off, False otherwise.', 'is_item_dropped_off': 'Condition: Check if the item has been successfully dropped off. Returns True if item is successfully dropped off, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Pick up an item at current location, charge battery if below 20%, then drop off item at designated location.'Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>is_item_present</Condition> <Selector> <Action>pick_up_item</Action> <Selector> <Sequence> <Condition>detect_low_battery</Condition> <Action>charge_battery</Action> </Sequence> <Action>go_to_charging_station</Action> </Selector> </Selector> </Sequence> <Selector> <Condition>is_item_dropped_off</Condition> <Action>drop_off_item</Action> </Selector> </BehaviorTree>
 
###
5.// INSTRUCTIONS: Use only the following behaviors {'detect_human': 'Condition: Check for the presence of a human. Returns True if a human is detected, False otherwise.', 'greet_human': 'Action: Greet the detected human. Returns True if the greeting is successful, False otherwise.', 'follow_human': 'Action: Follow the detected human. Returns True if the robot is successfully following the human, False otherwise.', 'play_ball': 'Action: Play with the human by passing a ball back and forth. Returns True if the game is successfully played, False otherwise.', 'stop_following': 'Action: Stop following the human. Returns True if the robot has stopped following, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'If a human is present, greet them, follow them, and play a game with them. Stop following after the game.'Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>detect_human</Condition> <Selector> <Action>greet_human</Action> <Selector> <Action>follow_human</Action> <Selector> <Action>play_ball</Action> <Selector> <Action>stop_following</Action> </Selector> </Selector> </Selector> </Selector> </Selector> </BehaviorTree>
 
###
6.// INSTRUCTIONS: Use only the following behaviors {'detect_object': 'Action: Detect an object in front of the robot. Returns True if an object is detected, False otherwise.', 'stop_movement': 'Action: Stop the robot's movement. Returns True if the robot has stopped, False otherwise.', 'move_forward': 'Action: Move the robot forward. Returns True if the robot has reached the designated distance, False otherwise.', 'turn_left': 'Action: Turn the robot left. Returns True if the robot has turned left, False otherwise.', 'turn_right': 'Action: Turn the robot right. Returns True if the robot has turned right, False otherwise.', 'is_object_in_range': 'Condition: Check if the detected object is within a designated range. Returns True if the object is within range, False otherwise.', 'is_object_identified': 'Condition: Check if the detected object has been identified. Returns True if the object has been identified, False otherwise.', 'identify_object': 'Action: Identify the detected object. Returns True if the object is successfully identified, 
###
4.// INSTRUCTIONS: Use only the following behaviors {'rotate_left': 'Action: Makes the robot rotate left by 90 degrees. Always returns True.', 'rotate_right': 'Action: Makes the robot rotate right by 90 degrees. Always returns True.', 'move_forward': 'Action: Makes the robot move forward one step. Always returns True.', 'detect_obstacle': 'Condition: Checks if an obstacle is detected. Returns True if an obstacle is detected, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Move forward until an obstacle is detected, then rotate 90 degrees to the left and continue moving until another obstacle is detected. Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Action>move_forward</Action> <Condition>detect_obstacle</Condition> </Sequence> <Sequence> <Action>rotate_left</Action> <Action>move_forward</Action> <Condition>detect_obstacle</Condition> </Sequence> </Selector> </Sequence> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'go_to_goal': 'Action: Move towards the goal position. Always returns True.', 'avoid_obstacles': 'Action: Continuously scan for obstacles and avoid them. Always returns True.', 'wait_one_second': 'Action: Wait for one second before continuing. Always returns True.', 'is_goal_reached': 'Condition: Check if the goal position has been reached. Returns True if the goal has been reached, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Move towards the goal position, avoiding any detected obstacles along the way. If the goal is not reached within 5 seconds, wait for one second and then continue moving towards the goal.
5.// OUTPUT:
<BehaviorTree> <Sequence> <Action>go_to_goal</Action> <Sequence> <Action>avoid_obstacles</Action> <Condition>is_goal_reached</Condition> </Sequence> <Selector> <Sequence> <Condition>is_goal_reached</Condition> <Action>wait_one_second</Action> <Action>go_to_goal</Action> </Sequence> </Selector> </Sequence> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'scan_for_targets': 'Action: Scan the environment for any potential targets. Always returns True.', 'move_to_closest_target': 'Action: Move towards the closest detected target. Always returns True.', 'is_target_reached': 'Condition: Checks if the target has been reached. Returns True if the target has been reached, False otherwise.', 'detect_obstacle': 'Condition: Checks if an obstacle is detected. Returns True if an obstacle is detected, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Scan for targets, move towards the closest target, and repeat until the target is reached. If an obstacle is detected, avoid it before continuing towards the target.
6.// OUTPUT:
<BehaviorTree> <Sequence> <Action>scan_for_targets</Action> <Selector> <Sequence> <Action>move_to_closest_target</Action> <Sequence> <Condition>is_target_reached</Condition> <Action>task_completed</Action> </Sequence> </Selector> <Sequence> <Condition>detect_obstacle</Condition> <Action>move_to_closest_target</Action> </Sequence> </Sequence> </BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'follow_path': 'Action: Follow a predetermined path of waypoints. Always returns True.', 'avoid_obstacles': 'Action: Continuously scan for obstacles and avoid them. Always returns True.', 'reach_target': 'Action: Move towards the target point. Always returns True.', 'detect_obstacle': 'Condition: Checks if an obstacle is detected. Returns True if an obstacle is detected, False otherwise.', 'is_target_reached': 'Condition: Checks if the target point has been reached. Returns True if the target point has been reached, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: Follow a predetermined path, avoiding any detected obstacles along the way. When the target point is reached, the agent should stop moving and wait for further instructions.
7.// OUTPUT:
<BehaviorTree> <Sequence> <Action>follow_path</Action> <Selector> <Sequence> <Action>reach_target</Action> <Condition>is_target_reached</Condition> </Sequence> <Sequence> <Condition>detect_obstacle</Condition> <Action>avoid_obstacles</Action> </Sequence> </Selector> <Action>reach_target</Action> <Action>task_completed</Action> </Sequence> </BehaviorTree> 
###
3.// INSTRUCTIONS: Use only the following behaviors {'explore_terrain': 'Subtree node: Represents a behavior tree for exploring unknown terrain. Returns True when completed.', 'analyze_environment': 'Subtree node: Represents a behavior tree for analyzing the surrounding environment and making decisions based on the data collected.', 'follow_guidelines': 'Subtree node: Represents a behavior tree for following predefined guidelines and rules.', 'collect_resources': 'Action: Collect resources from the environment. Always returns True.', 'navigate_to_target': 'Action: Navigate to a specified target location. Always returns True.', 'check_parameters': 'Condition: Check if all parameters are within the specified ranges. Returns True if all parameters are within the ranges, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3.// USER COMMAND: Explore the terrain, collect resources, and navigate to a specific location while ensuring all parameters are within safe ranges.
3.// OUTPUT:
<BehaviorTree><Sequence><Action>explore_terrain</Action><Sequence><Action>collect_resources</Action><Action>analyze_environment</Action></Sequence><Action>navigate_to_target</Action><Condition>check_parameters</Condition></Sequence></BehaviorTree>

###
4.// INSTRUCTIONS: Use only the following behaviors {'detect_intruders': 'Subtree node: Represents a behavior tree for detecting intruders in the designated area.', 'chase_intruder': 'Action: Chase the detected intruder. Always returns True.', 'evade_obstacles': 'Action: Evade obstacles while pursuing the intruder. Always returns True.', 'call_for_reinforcements': 'Action: Send out a call for reinforcements. Always returns True.', 'signal_target_found': "Event: Triggers when the target intruder is found. Returns True when triggered, False otherwise."}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Detect and chase any intruders in the area. If obstacles are encountered, evade them and call for reinforcements. Signal target found when the intruder is caught.
4.// OUTPUT:
<BehaviorTree><Sequence><Action>detect_intruders</Action><Trigger>signal_target_found</Trigger><Sequence><Action>chase_intruder</Action><Sequence><Action>evade_obstacles</Action><Action>call_for_reinforcements</Action></Sequence></Sequence></Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'find_home_base': 'Subtree node: Represents a behavior tree for finding the home base.', 'return_to_base': 'Action: Return to the home base. Always returns True.', 'drop_off_resources': 'Action: Drop off any collected resources at the home base. Always returns True.', 'is_home_base_reachable': 'Condition: Check if the home base is reachable. Returns True if the base is within a set range, False otherwise.', 'is_home_base_full': 'Condition: Check if the home base has reached its maximum capacity. Returns True if the base is full, False otherwise.', 'pick_up_resources': 'Action: Pick up resources from the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Find the home base, pick up any resources, and return them to the base while checking for base accessibility and capacity.
5.// OUTPUT:
<BehaviorTree><Sequence><Action>find_home_base</Action><Sequence><Action>pick_up_resources</Action><Condition>is_home_base_reachable</Condition><Action>return_to_base</Action><Condition>is_home_base_full</Condition><Action>drop_off_resources</Action></Sequence></Sequence></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'assign_task': 'Action: Assign a specific task to a designated robot. Always returns True.', 'wait_for_signal': 'Condition: Check for a signal to start the assigned task. Returns True if a signal is received, False otherwise.', 'complete_assigned_task': 'Action: Complete the assigned task and signal completion. Always returns True.', 'is_resource_available': 'Condition: Check if the required resource is available. Returns True if the resource is available, False otherwise.', 'gather_resource': 'Action: Gather the required resource from the environment. Always returns True.', 'process_resource': 'Action: Process the gathered resource and prepare it for use. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Assign a resource-gathering task to a designated robot, wait for a signal to start the task, gather the required resource, process it, and signal task completion.
6.// OUTPUT:
<BehaviorTree><Sequence><Action>assign_task</Action><Condition>wait_for_signal</Condition><Sequence><Condition>is_resource_available</Condition><Action>gather_resource</Action><Action>process_resource</Action></Sequence><Action>complete_assigned_task</Action></Sequence></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'explore_environment': 'Action: Explore the surrounding environment. Always returns True.', 'identify_targets': 'Subtree node: Represents a behavior tree for identifying potential targets in the environment.', 'approach_target': 'Action: Approach the identified target. Always returns True.', 'attack_target': 'Action: Attack the target. Always returns True.', 'check_battle_status': 'Condition: Check the status of the ongoing battle. Returns True if the battle is still ongoing, False if the target has been defeated.', 'signal_victory': 'Action: Signal the end of the battle and celebrate. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: Explore the environment, identify potential targets, approach and attack the target, check the battle status, and signal victory when the target is defeated.
7.// OUTPUT:
<BehaviorTree><Sequence><Action>explore_environment</Action><Sequence><Action>identify_targets</Action><Action>approach_target</Action><Action>attack_target</Action></Sequence><Condition>check_battle_status</Condition><Action>signal_victory</Action></Sequence></BehaviorTree>###
3.// INSTRUCTIONS: Use only the following behaviors {'get_location': 'Action: Retrieve the current location of the robot within the swarm. Always returns True.', 'send_location_to_base': 'Action: Send the robot's location data to the base station for coordination. Always returns True.', 'evaluate_battery_level': 'Action: Check the current battery level and determine if it needs to be recharged. Always returns True.', 'recharge_battery': 'Action: Recharge the robot's battery if it falls below a certain threshold. Always returns True.', 'check_neighbors': 'Action: Communicate with neighboring robots to ensure coordination and avoid collisions. Always returns True.', 'is_ready_for_mission': 'Condition: Check if the robot is fully charged, has communicated with neighbors, and is at the designated starting location. Returns True if all conditions are met, False otherwise.', 'is_in_optimal_location': 'Condition: Check if the robot is at an optimal location within the swarm based on its current position and battery level. Returns True if in the optimal location, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3.// USER COMMAND: Create a behavior tree for a swarm of robots to coordinate and optimize their positions for maximum efficiency and battery usage.
3.// OUTPUT:
<BehaviorTree><Selected><Sequence><Condition>is_ready_for_mission</Condition><Action>get_location</Action><Selector><Sequence><Condition>is_in_optimal_location</Condition><Action>send_location_to_base</Action></Sequence><Action>move_to_optimal_position</Action></Selector><Action>evaluate_battery_level</Action><Selector><Sequence><Condition>is_battery_low</Condition><Action>recharge_battery</Action></Sequence><Action>continue_mission</Action></Selector></Sequence><Action>check_neighbors</Action></Selected></BehaviorTree>
###
4.// INSTRUCTIONS: Use only the following behaviors {'take_sample': 'Action: Use a sensor to take a sample of the environment or an object. Always returns True.', 'analyze_sample': 'Action: Analyze the collected sample and gather data. Always returns True.', 'identify_object': 'Action: Identify an object using gathered data and previous knowledge. Always returns True.', 'store_data': 'Action: Store the analyzed data for future use or transfer to other robots. Always returns True.', 'is_sample_needed': 'Condition: Check if a specific object or area requires a sample to be taken. Returns True if a sample is needed, False otherwise.', 'is_data_collected': 'Condition: Check if enough data has been collected for an object or area. Returns True if enough data is collected, False otherwise.', 'is_object_identified': 'Condition: Check if the identified object matches the desired object or if there are any discrepancies. Returns True if the object is identified, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Construct a behavior tree for a robot to collect and analyze data for a specific object or area
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_sample_needed</Condition><Action>take_sample</Action><Action>store_data</Action></Sequence><Action>analyze_sample</Action><Selector><Sequence><Condition>is_data_collected</Condition><Action>identify_object</Action></Sequence><Action>repeat_process</Action></Selector></Selector></BehaviorTree>
###
5.// INSTRUCTIONS: Use only the following behaviors {'explore_area': 'Action: Move to and explore a specific area or coordinate within the environment. Always returns True.', 'mark_visited': 'Action: Mark the current area as visited to prevent revisiting. Always returns True.', 'call_for_support': 'Action: Communicate with other robots to request support or assistance. Always returns True.', 'retrieve_data': 'Action: Retrieve data from other robots or the base station for coordination and analysis. Always returns True.', 'is_exploration_complete': 'Condition: Check if the entire designated area has been explored. Returns True if exploration is complete, False otherwise.', 'is_support_needed': 'Condition: Check if the robot requires assistance or support from other robots. Returns True if support is needed, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Create a behavior tree for a swarm of robots to explore and survey a large, unfamiliar environment.
5.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_exploration_complete</Condition><Selector><Sequence><Action>explore_area</Action><Action>retrieve_data</Action><Selector><Sequence><Condition>is_support_needed</Condition><Action>call_for_support</Action></Sequence><Action>continue_exploration</Action></Selector></Sequence><Action>mark_visited</Action></Selector></Sequence></BehaviorTree>
###
6.// INSTRUCTIONS: Use only the following behaviors {'detect_fire': 'Action: Use sensors to detect the presence of fire. Always returns True.', 'extinguish_fire': 'Action: Use appropriate equipment to extinguish the fire. Always returns True.', 'request_reinforcements': 'Action: Communicate with other robots to request additional assistance or equipment. Always returns True.', 'analyze_fire_data': 'Action: Analyze the data collected from the fire to determine the best course of action. Always returns True.', 'is_fire_detected': 'Condition: Check if a fire is detected in the environment. Returns True if a fire is detected, False otherwise.', 'is_fire_extinguished': 'Condition: Check if the fire has been successfully extinguished. Returns True if the fire is extinguished, False otherwise.', 'is_reinforcement_needed': 'Condition: Check if additional assistance or equipment is needed to control or put out the fire. Returns True if reinforcements are needed, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Build a behavior tree for a robot to detect and extinguish fires in an indoor or outdoor environment.
6.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_fire_detected</Condition><Action>analyze_fire_data</Action><Selector><Sequence><Condition>is_reinforcement_needed</Condition><Action>request_reinforcements</Action></Sequence><Action>continue_fire_suppression</Action></Selector></Sequence><Action>detect_fire</Action><Selector><Sequence><Condition>is_fire_detected</Condition><Action>extinguish_fire</Action></Sequence><Action>repeat_process</Action></Selector></BehaviorTree>
###
7.// INSTRUCTIONS: Use only the following behaviors {'find_food': 'Action: Use sensors to locate a source of food. Always returns True.', 'collect_food': 'Action: Use appropriate equipment to collect and transport the food back to the nest. Always returns True.', 'explore_new_area': '###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Check for obstacles, change color to green, continue moving and then check if target is reached.'Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>is_obstacle_detected</Condition> <Action>change_color_to_green</Action> <Action>avoid_obstacle</Action> </Sequence> <Sequence> <Action>continue_movement_agent</Action> <Condition>is_target_reached</Condition> <Action>task_completed</Action> </Sequence> </Selector> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_red': "Action: Change agent's color to red. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'move_towards_target': 'Action: Move towards the given target. Returns True when the target is reached, False otherwise.', 'search_for_target': 'Action: Search the environment for the target. Returns True when the target is spotted, False otherwise.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Search for the target, move towards it and then change color to red.'Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Action>search_for_target</Action> <Selector> <Condition>is_agent_in_nest</Condition> <Sequence> <Action>move_towards_target</Action> <Action>change_color_to_red</Action> </Sequence> <Action>avoid_obstacle</Action> </Selector> </Sequence> </Selector> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_blue': "Action: Change agent's color to blue. Always returns True.", 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_color_changed': 'Condition: Check if the agent changed its color to blue. Returns True if the agent's color is blue, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', }, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Check if agent changed its color to blue, if not, avoid obstacles and continue moving. If color changed, check for obstacles and change color to green.'Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>is_color_changed</Condition> <Action>avoid_obstacle</Action> <Action>continue_movement_agent</Action> </Sequence> <Sequence> <Condition>is_agent_in_nest</Condition> <Action>change_color_to_green</Action> <Action>avoid_obstacle</Action> </Sequence> </Selector> </BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the 
###
3.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'change_color_to_blue': "Action: Change agent's color to blue. Always returns True.", 'circle_pattern': 'Action: Move in a circular motion. Always returns True.', 'follow_path': 'Action: Follow a predetermined path. Returns True when the path is completed, False when it deviates.', 'fly_dive': 'Action: Perform a fly or dive motion. Always returns True.', 'is_facing_target': 'Condition: Check if the agent is facing the target. Returns True if facing, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'is_target_visible': 'Condition: Check if the target is visible. Returns True if target is in line of sight, False otherwise.', 'search_area': 'Action: Search a designated area for the target. Returns True when the target is found, False if the search is unsuccessful.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3.// USER COMMAND: generate behavior tree to 'Search area in a circular pattern until target is found, then approach target while changing color to blue.' Output only the XML behavior tree without extra text.
3.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Action>is_target_visible</Action><Selector><Condition>is_target_reached</Condition><Action>change_color_to_blue</Action><Sequence><Condition>is_facing_target</Condition><Action>follow_path</Action></Sequence></Selector></Sequence><Sequence><Condition>search_area</Condition><Action>circle_pattern</Action></Sequence></Selector><Action>task_completed</Action></Sequence></BehaviorTree> 

###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_red': "Action: Change agent's color to red. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'follow_path': 'Action: Follow a predetermined path. Returns True when the path is completed, False when it deviates.', 'is_agent_moving': 'Condition: Check if the agent is moving. Returns True if the agent is moving, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'move_to_next_point': 'Action: Move to the next point in a predetermined path. Returns True when the point is reached, False otherwise.', 'rotate_agent': 'Action: Rotate the agent in place. Returns True when rotation is completed, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with thr user command, say (Sorry, I can't do the task)
4. // USER COMMAND: generate behavior tree to 'Follow a predetermined path, avoiding obstacles and changing color to red when an obstacle is detected.' Output only the XML behavior tree without extra text.
4. // OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>is_obstacle_detected</Condition><Action>change_color_to_red</Action><Selector><Condition>is_agent_moving</Condition><Action>move_to_next_point</Action><Action>rotate_agent</Action></Selector></Sequence><Action>continue_movement_agent</Action></Selector><Action>avoid_obstacle</Action></Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'is_target_in_range': 'Condition: Check if target is within range of attack. Returns True if target is within range, False otherwise.', 'move_to_target': 'Action: Move towards the target. Returns True when the target is reached, False otherwise.', 'attack_target': 'Action: Perform an attack on the target. Returns True when the attack is successful, False otherwise.', 'is_enemy_detected': 'Condition: Check for enemies nearby. Returns True if an enemy is detected, False otherwise.', 'change_color_to_purple': "Action: Change agent's color to purple. Always returns True.", 'guard_area': 'Action: Patrol and guard a designated area. Always returns True.', 'is_agent_in_danger': 'Condition: Check if the agent is in danger. Returns True if the agent's health is below 50%, False otherwise.', 'heal_agent': 'Action: Increase the agent's health. Returns True when the agent's health is full, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with thr user command, say (Sorry, I can't do the task)
5. // USER COMMAND: generate behavior tree to 'Patrol and guard a designated area, attacking nearby enemies and healing if health falls below 50%.' Output only the XML behavior tree without extra text.
5. // OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>is_agent_in_danger</Condition><Action>heal_agent</Action></Sequence> <Selector><Condition>is_enemy_detected</Condition><Action>change_color_to_purple</Action><Selector><Condition>is_target_in_range</Condition><Action>attack_target</Action><Action>move_to_target</Action></Selector></Selector></Sequence> <Action>guard_area</Action></Selector><Action>task_completed</Action></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'move_to_specific_location': 'Action: Move to a specific location within the environment. Returns True when the location is reached, False otherwise.', 'change_color_to_yellow': "Action: Change agent's color to yellow. Always returns True.", 'collect_resource': 'Action: Collect a resource from the environment. Returns True when the resource is collected, False otherwise.', 'is_resource_available': 'Condition: Check if there is a resource available. Returns True if a resource is present, False otherwise.', 'deposit_resource': 'Action: Deposit the collected resource at a designated location. Returns True when the resource isOR
<BehaviorTree><Selector><Condition>is_target_detected</Condition><Sequence><Condition>is_path_clear</Condition><Action>continue_movement_agent</Action></Sequence><Action>wander</Action></Selector><Selector><Condition>is_target_reached</Condition><Action>change_color_to_green</Action></Selector><Sequence><Action>change_color_to_white</Action><Action>form_line</Action></Sequence><Action>agent_movement_freeze</Action></BehaviorTree>

###
3.// INSTRUCTIONS: Use only the following behaviors {'communication': 'Action: Communicate with other robots within 20 units. Always returns True.', 'check_tree_health': 'Action: Check the health status of surrounding trees. Always returns True.', 'chop_tree': 'Action: Chop down trees with low health. Always returns True.', 'pick_berries': 'Action: Pick ripe berries from the bushes. Always returns True.', 'move_to_resource': 'Action: Move towards the nearest resource. Returns True if resource is found within 30 units, False otherwise.', 'is_tree_low_health': 'Condition: Check if the tree has low health. Returns True if the tree has less than 25% health remaining, False otherwise.', 'is_resource_detected': 'Condition: Check for nearby resources. Returns True if a resource is detected within 30 units, False otherwise.', 'is_berry_ripe': 'Condition: Check if a berry is ripe. Returns True if a berry is ripe and ready to be picked, False otherwise.', 'pick_next_resource': 'Action: Signal the robot to pick the next nearest resource. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3.// USER COMMAND: gather resources and communicate status to other robots
3.//OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_resource_detected</Condition><Action>move_to_resource</Action></Sequence><Action>gather</Action></Selector><Sequence><Condition>is_tree_low_health</Condition><Action>check_tree_health</Action><Action>chop_tree</Action></Sequence><Sequence><Condition>is_berry_ripe</Condition><Action>pick_berries</Action></Sequence><Action>pick_next_resource</Action><Action>communication</Action></BehaviorTree>

###
4.// INSTRUCTIONS: Use only the following behaviors {'deposit_resource': 'Action: Deposit collected resources at the designated area. Always returns True.', 'return_to_nest': 'Action: Return to the nest area. Always returns True.', 'find_closest_resource': 'Action: Find the closest resource within 50 units. Returns True if a resource is found, False otherwise.', 'travel_to_resource': 'Action: Move towards the targeted resource. Returns True if target is within 30 units, False otherwise.', 'is_resource_collected': 'Condition: Check if the robot has collected the designated resource. Returns True if the resource is in the processor, False otherwise.', 'is_resource_available': 'Condition: Check if a resource is available within 50 units of distance. Returns True if a resource is available, False otherwise.', 'is_nest_reached': 'Condition: Check if the robot has reached the nest. Returns True if the robot is within 20 units of the nest, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: collect and deposit resources to the nest
4.// OUTPUT:
<BehaviorTree><Selector><Condition>is_resource_available</Condition><Action>find_closest_resource</Action></Selector><Selector><Condition>is_resource_collected</Condition><Action>deposit_resource</Action></Selector><Sequence><Condition>is_nest_reached</Condition><Action>return_to_nest</Action></Sequence><Action>travel_to_resource</Action></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'get_current_location': 'Action: Get the current coordinates of the robot. Always returns True.', 'move_to_location': 'Action: Move the robot to the designated coordinates. Returns True if the robot is within 10 units of the location, False otherwise.', 'mark_visited': 'Action: Mark a location as visited. Always returns True.', 'mark_not_visited': 'Action: Mark a location as not visited. Always returns True.', 'calculate_distance': 'Function: Calculates the distance between two points. Returns the distance in units.', 'generate_random_coordinates': 'Function: Generates random coordinates within a specified range. Returns the generated coordinates in a list.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: randomly travel to 5 unvisited locations
5.//OUTPUT:
<BehaviorTree><Action>get_current_location</Action><Selector><Condition>is_location_visited</Condition><Sequence><Action>move_to_location</Action><Action>mark_not_visited</Action></Sequence></Selector><Selector><Condition>is_location_visited</Condition><Sequence><Action>move_to_location</Action><Action>mark_visited</Action></Sequence></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'detect_nearest_object': 'Action: Detect nearest object within 20 units. Returns True if an object is detected, False otherwise.', 'evade_object': 'Action: Move away from the nearest object. Always returns True.', 'update_map': 'Action: Update the internal map with the location of the detected object. Always returns True.', 'choose_best_alternative': 'Function: Choose the best alternative path to reach the destination. Returns the selected path.', 'move_to_destination': 'Action: Move towards the designated destination. Returns True if destination is reached, False otherwise.', 'is_destination_reached': 'Condition: Check if the robot has reached the destination. Returns True if the robot is within 10 units of the destination, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: move to designated area, avoiding obstacles and updating map
6.// OUTPUT:
<BehaviorTree><Sequence><Action>detect_nearest_object</Action><Action>evade_object</Action></Sequence><Sequence><Action>update_map</Action><Action>choose_best_alternative</Action><Condition>is_destination_reached</Condition></Sequence><Action>move_to_destination</Action></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'launch_drone': 'Action: Launch a drone for aerial surveillance. Always returns True.', 'retrieve_data': 'Action: Retrieve data from the drone. Returns True if data is successfully retrieved, False otherwise.', 'upload_data': 'Action: Upload retrieved data to a remote server. Returns True if data is successfully uploaded, False otherwise.', 'analyze_data': 'Action: Analyze the retrieved data for relevant patterns/highlights. Returns True if data is successfully
###
3.// INSTRUCTIONS: Use only the following behaviors {'charge_battery': 'Action: Plug in and recharge the robot's battery. Returns True when the battery is fully charged.', 'check_battery_level': 'Condition: Checks the current battery level. Returns True if the battery level is below a specific threshold, False otherwise.', 'determine_best_route': 'Action: Analyze the environment and determine the most efficient route to reach the designated destination. Returns True when route is planned and ready.', 'follow_route': 'Action: Follow the predetermined route towards the destination. Returns True when destination is reached.', 'avoid_obstacles': 'Action: Use sensors to detect and avoid obstacles while following the designated route. Always returns True.', 'light_up_led': 'Action: Light up the robot's LED lights to improve visibility. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3.// USER COMMAND: Program the robot to recharge its battery, plan and follow the most efficient route towards a designated destination, while avoiding obstacles and improving visibility.
3.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>check_battery_level</Condition><Sequence><Action>charge_battery</Action><Condition>check_battery_level</Condition></Sequence></Sequence><Sequence><Selector><Condition>check_battery_level</Condition><Action>light_up_led</Action></Selector><Selector><Condition>check_battery_level</Condition><Action>avoid_obstacles</Action></Selector></Sequence><Sequence><Condition>check_battery_level</Condition><Selector><Action>determine_best_route</Action><Sequence><Action>follow_route</Action><Condition>check_destination_reached</Condition></Sequence></Selector></Sequence></Selector></BehaviorTree>

###
4.// INSTRUCTIONS: Use only the following behaviors {'gather_resources': 'Action: Collect resources in the environment. Always returns True.', 'analyze_resources': 'Action: Use sensors to analyze the gathered resources. Always returns True.', 'convert_resources': 'Action: Convert gathered resources into usable materials. Always returns True.', 'build_structure': 'Action: Use the converted materials to build a designated structure. Returns True when structure is completed.', 'is_resource_available': 'Condition: Check if resources are available in the surrounding area. Returns True if resources are available, False otherwise.', 'has_enough_resources': 'Condition: Check if enough resources have been gathered and converted. Returns True if enough resources are available, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Program the swarm of robots to gather, analyze, and convert resources in the environment to build a designated structure.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_resource_available</Condition><Selector><Sequence><Action>gather_resources</Action><Condition>has_enough_resources</Condition></Sequence><Sequence><Action>analyze_resources</Action><Condition>has_enough_resources</Condition></Sequence><Sequence><Action>convert_resources</Action><Condition>has_enough_resources</Condition></Sequence></Selector></Sequence><Sequence><Condition>has_enough_resources</Condition><Selector><Action>build_structure</Action><Condition>check_structure_completed</Condition></Selector></Sequence></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'search_for_target': 'Action: Search for a designated target in the environment. Always returns True.', 'identify_danger_level': 'Action: Use sensors to identify the danger level associated with the designated target. Returns True when danger level is determined.', 'avoid_danger': 'Action: Alter course and avoid areas with high danger levels. Always returns True.', 'attack_target': 'Action: Attack the designated target. Returns True when the target is successfully eliminated.', 'is_target_found': 'Condition: Check if the designated target has been located. Returns True if target is detected, False otherwise.', 'is_danger_high': 'Condition: Check if the danger level associated with the target is high. Returns True if danger level is high, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Create a behavior tree for a swarm of robots to locate, assess danger level, and attack a designated target while avoiding high danger areas.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_target_found</Condition><Selector><Sequence><Action>search_for_target</Action><Condition>is_target_found</Condition></Sequence><Sequence><Action>identify_danger_level</Action><Condition>is_danger_high</Condition></Sequence><Sequence><Action>avoid_danger</Action><Condition>is_danger_high</Condition></Sequence></Selector></Sequence><Sequence><Condition>is_target_found</Condition><Selector><Action>attack_target</Action><Condition>check_target_eliminated</Condition></Selector></Sequence></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'plant_seeds': 'Action: Use sensors to detect suitable areas for planting and plant seeds. Returns True when all seeds have been planted.', 'water_plants': 'Action: Use water reserves to water the newly planted seeds. Always returns True.', 'check_plant_health': 'Condition: Use sensors to check the health of the plants. Returns True if plants are healthy, False otherwise.', 'harvest_plants': 'Action: Use tools to harvest mature plants. Returns True when all plants have been harvested.', 'gather_harvest': 'Action: Gather the harvested plants and store them. Returns True when all harvested plants are stored.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Create a behavior tree for a group of agricultural robots to plant, water, monitor, and harvest crops.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>plant_seeds</Action><Condition>check_plant_health</Condition></Sequence><Sequence><Action>water_plants</Action><Condition>check_plant_health</Condition></Sequence><Sequence><Action>harvest_plants</Action><Condition>gather_harvest</Condition></Sequence><Sequence><Action>gather_harvest</Action><Condition>check_harvested</Condition></Sequence></Selector></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'explore_area': 'Action: Use sensors to explore and map the surrounding area. Always returns True.', 'share_map_data': 'Action: Share the mapped data with other robots in the swarm. Always returns True.', 'calculate_optimal_path': 'Action: Use the map data to calculate the most optimal path for the swarm to reach a designated target location. Returns True when optimal path is determined.', 'follow_path': 'Action: Follow the predetermined path towards the designated target. Returns True when destination is reached.', 'is_target_reached': 
###
3.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'attack': 'Action: Attack the target. Returns True if attack is successful, False otherwise.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_red': "Action: Change agent's color to red. Always returns True.", 'change_color_to_yellow': "Action: Change agent's color to yellow. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'move_towards_target': 'Action: Move towards the target. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_attacked': 'Condition: Check if agent is being attacked. Returns True if the agent is being attacked, False otherwise.', 'is_enemy_visible': 'Condition: Check if enemy is within sight. Returns True if enemy is visible, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3.// USER COMMAND: generate behavior tree to 'Move towards the target, attack, and signal task completion'. Output only the XML behavior tree without extra text.
3.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>move_towards_target</Action><Action>attack</Action><Action>task_completed</Action></Sequence></Selector></BehaviorTree>

###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'detect_enemy': 'Action: Use sensors to detect enemy. Always returns True.', 'fire_at_enemy': 'Action: Fire at enemy. Returns True if enemy is hit, False otherwise.', 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_enemy_detected': 'Condition: Check if enemy is detected. Returns True if enemy is detected, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Detect enemy, fire at enemy, and continue movement'. Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree><Sequence><Action>detect_enemy</Action><Sequence><Condition>is_enemy_detected</Condition><Action>fire_at_enemy</Action></Sequence><Action>continue_movement_agent</Action></Sequence></BehaviorTree>
 
###
5.// INSTRUCTIONS: Use only the following behaviors {'act_decoy': 'Action: Use a decoy to distract enemies. Returns True if decoy is effective, False otherwise.', 'act_hide': 'Action: Hide for evasion. Always returns True.', 'act_deploy_barrier': 'Action: Deploy a barrier to block enemy path. Returns True if barrier is successful, False otherwise.', 'change_color_to_blue': "Action: Change agent's color to blue. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_enemy_visible': 'Condition: Check if enemy is within sight. Returns True if enemy is visible, False otherwise.', 'is_decoy_deployed': 'Condition: Check if decoy is deployed. Returns True if decoy is deployed, False otherwise.', 'is_barrier_deployed': 'Condition: Check if barrier is deployed. Returns True if barrier is deployed, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Deploy barrier, use decoy for distraction, and signal task completion'. Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>act_deploy_barrier</Action><Condition>is_barrier_deployed</Condition><Action>act_decoy</Action></Sequence><Selector><Condition>is_decoy_deployed</Condition><Action>task_completed</Action><Action>wander</Action></Selector></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'act_stationary_scan': 'Action: Scan surroundings while remaining stationary. Returns True if target is visible, False otherwise.', 'act_search': 'Action: Search the area for the target. Returns True if target is found, False otherwise.', 'act_move_to_station': 'Action: Move to a designated station in the environment. Returns True if destination is reached, False otherwise.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_red': "Action: Change agent's color to red. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_target_visible': 'Condition: Check if target is visible. Returns True if target 
###
4.// INSTRUCTIONS: Use only the following behaviors {'leave_scent_trail': 'Action: Leave a scent trail behind the agent as it moves. Always returns True.', 'follow_scent_trail': 'Action: Follow the scent trail left by other agents. Returns True if the scent trail leads to the target, False otherwise.', 'is_target_detected': 'Condition: Check if target is within 10 units. Returns True if the target is within 10 units of distance, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Follow scent trail left by other agents to find the target.
4. // OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>is_target_detected</Condition> <Action>task_completed</Action> </Sequence> <Sequence> <Action>follow_scent_trail</Action> <Action>leave_scent_trail</Action> <Action>task_completed</Action> </Sequence> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'navigate_to_waypoint': 'Action: Move towards a specific waypoint. Returns True if waypoint is reached, False otherwise.', 'check_battery_level': "Action: Checks the current battery level of the agent. Always returns True.", 'charge_battery': 'Action: Connect to a charging station and charge the battery. Returns True if battery is fully charged, False otherwise.', 'is_battery_low': 'Condition: Checks if battery is below a specific threshold. Returns True if battery is below the threshold, False otherwise.'}, to construct behavior tree in XML format to the following command. If the b available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Navigate towards a distant waypoint while monitoring the battery level. If battery is low, charge it at the nearest station.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>navigate_to_waypoint</Action></Sequence><Sequence><Action>check_battery_level</Action><Selector><Sequence><Condition>is_battery_low</Condition><Action>charge_battery</Action></Sequence></Selector>/Sequence></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'move_towards_light': 'Action: Move towards the source of light. Returns True if light is within range, False otherwise.', 'check_light_level': "Action: Continuously checks the light level around the agent. Always returns True.", 'avoid_darkness': 'Action: Avoid entering dark areas. Returns True if surroundings are bright, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Move towards the light source while avoiding dark areas.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>move_towards_light</Action></Sequence><Sequence><Action>check_light_level</Action><Selector><Sequence><Action>avoid_darkness</Action></Sequence></Selector>/Sequence></Selector></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'wander': 'Action: Move randomly within the environment. Always returns True.', 'count_working_robots': 'Action: Count the number of working robots in the environment. Returns True along with the number of working robots.', 'continue_movement_agent': 'Action: Continue agent's movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: Count the number of working robots in the environment and continue movement.
7.// OUTPUT:
<BehaviorTree><Sequence><Action>count_working_robots</Action></Sequence><Action>continue_movement_agent</Action></BehaviorTree> 
###
3.// INSTRUCTIONS: Use only the following behaviors {'move_to_target': 'Subtree node: Represents a behavior tree for navigating towards a specific target position.', 'scan_surroundings': 'Action: Scan the surroundings and update the robot�s internal map. Always returns True.', 'is_target_reached': 'Condition: Check if the robot has reached its target position. Returns True if it has reached the target, False otherwise.', 'is_obstacle_detected': 'Condition: Check if any obstacles or objects are detected in the surroundings. Returns True if an obstacle is detected, False otherwise.', 'avoid_obstacle': 'Action: Steer or move the robot in a different direction to avoid the obstacle. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3.// USER COMMAND: Navigate towards a specific target position while avoiding any obstacles in the surroundings.
3.// OUTPUT:
<BehaviorTree><Sequence><Action>scan_surroundings</Action><Selector><Sequence><Condition>is_obstacle_detected</Condition><Action>avoid_obstacle</Action></Sequence><Sequence><Action>move_to_target</Action><Condition>is_target_reached</Condition></Sequence></Selector></Sequence></BehaviorTree>
 
###
4.// INSTRUCTIONS: Use only the following behaviors {'find_food': 'Subtree node: Represents a behavior tree for locating and retrieving food sources.', 'get_food': 'Action: Retrieve and collect food from the selected food source. Always returns True.', 'return_to_nest': 'Action: Move back to the designated nest or home location. Always returns True.', 'is_food_low': 'Condition: Check if food level is below a specific threshold. Returns True if food level is below the threshold, False otherwise.', 'is_nest_reached': 'Condition: Check if the robot has returned to the designated nest. Returns True if it has reached the nest, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Retrieve and collect food sources while maintaining a certain food level and returning to the nest when necessary.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_food_low</Condition><Selector><Sequence><Action>find_food</Action><Action>get_food</Action></Sequence><Sequence><Action>return_to_nest</Action><Condition>is_nest_reached</Condition></Sequence></Selector></Sequence><Sequence><Action>find_food</Action><Action>get_food</Action></Sequence></Selector></BehaviorTree>
 
###
5.// INSTRUCTIONS: Use only the following behaviors {'explore_area': 'Subtree node: Represents a behavior tree for exploring and mapping a specific area or region.', 'scan_surroundings': 'Action: Scan the surroundings and update the robot�s internal map. Always returns True.', 'is_area_mapped': 'Condition: Check if the current area has already been mapped and explored. Returns True if the area is mapped, False otherwise.', 'is_path_blocked': 'Condition: Check if the path in the current direction is blocked or impassable. Returns True if the path is blocked, False otherwise.', 'turn_random': 'Action: Turn the robot in a random direction. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Explore and map a specific area while avoiding any obstacles or blocked paths.
5.// OUTPUT:
<BehaviorTree><Sequence><Action>scan_surroundings</Action><Selector><Sequence><Condition>is_area_mapped</Condition><Selector><Action>turn_random</Action></Selector></Sequence><Sequence><Condition>is_path_blocked</Condition><Selector><Action>turn_random</Action></Selector></Sequence></Selector></Sequence><Action>explore_area</Action></BehaviorTree>
 
###
6.// INSTRUCTIONS: Use only the following behaviors {'move_towards_human': 'Action: Move towards and interact with a human, such as giving a high-five. Always returns True.', 'avoid_obstacles': 'Action: Steer or move the robot in a different direction to avoid any obstacles in its path. Always returns True.', 'is_human_detected': 'Condition: Check if any nearby humans are detected. Returns True if a human is detected, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Interact with humans in the environment while avoiding any obstacles in the path.
6.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_human_detected</Condition><Selector><Sequence><Action>move_towards_human</Action></Sequence><Sequence><Action>avoid_obstacles</Action></Sequence></Selector></Sequence></BehaviorTree>
 
###
7.// INSTRUCTIONS: Use only the following behaviors {'follow_leader': 'Subtree node: Represents a behavior tree for following and mimicking the actions of a designated leader robot.', 'is_leader_healthy': 'Condition: Check if the leader robot's health is above a specified threshold. Returns True if the leader is healthy, False otherwise.', 'wait': 'Action: Make the robot pause and wait for a certain period of time. Always returns True.', 'is_leader_moving': 'Condition: Check if the leader robot is currently moving. Returns True if the leader is moving, False otherwise.', 'is_leader_idle': 'Condition: Check if the leader robot is currently idle. Returns True if the leader is idle, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: Follow and mimic the actions of a designated leader robot while ensuring the leader is healthy and active.
7.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_leader_healthy</Condition><Selector><Sequence><Selector><Condition>is_leader_moving</Condition><Action>follow_leader</Action></Selector><Sequence><Condition>is_leader_idle</Condition><Action>wait</Action></Sequence></Sequence><Condition>is_leader_healthy</Condition><Selector><Sequence><Selector><Condition>is_leader_moving</Condition></Selector><Sequence><Condition>is_leader_idle</Condition></Sequence></Selector></Sequence></Selector></Sequence><Action>follow_leader</Action></BehaviorTree>###
3.// INSTRUCTIONS: Use only the following behaviors {'adjust_heading': 'Action: Adjust robot's heading to the desired direction. Always returns True.', 'move_forward': 'Action: Move robot forward for a specified distance. Always returns True.', 'rotate': 'Action: Rotate robot either clockwise or counterclockwise. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3.// USER COMMAND: Generate behavior tree for a robot to mow a specific lawn area
3.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>adjust_heading</Action><Action>move_forward</Action></Sequence><Action>rotate</Action></Selector></BehaviorTree>
###
4. // INSTRUCTIONS: Provide a specific scenario for the robot to navigate a maze, including details such as the starting point, obstacles, and end point.
// For example: Starting point: (0,0), End point: (10,10), Obstacles: (3,2), (5,7), (8,9)
4.// INPUT: Starting point: (0,0), End point: (10,10), Obstacles: (3,2), (5,7), (8,9)
4.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_target_reached</Condition><Selector><Sequence><Condition>is_path_clear</Condition><Action>move_forward</Action></Sequence><Selector><Sequence><Condition>is_obstacle_detected</Condition><Action>rotate</Action></Sequence><Action>wander</Action></Selector></Sequence></BehaviorTree>
###
5.// INSTRUCTIONS: Use only the following behaviors {'move_to_nest': 'Action: Move robot to the nest location. Always returns True.', 'collect_item': 'Action: Collect an item and carry it to the designated drop-off point. Always returns True.', 'drop_item': 'Action: Drop the collected item at the designated point. Always returns True.', 'is_nest_reached': 'Condition: Check if the robot has reached the nest. Returns True if the robot is at the nest location, False otherwise.', 'is_item_detected': 'Condition: Check if an item is within a certain range. Returns True if an item is detected, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Generate behavior tree for a robot to collect and deposit resources in a resource management game.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_item_detected</Condition><Action>collect_item</Action><Action>drop_item</Action></Sequence><Action>move_to_nest</Action></Selector></BehaviorTree>
###
6.// INSTRUCTIONS: Use only the following behaviors {'form_circle': 'Action: Form a circle with other robots. Always returns True.', 'follow_leader': 'Action: Follow the designated leader robot's movements. Always returns True.', 'communicate': 'Action: Communicate information to other robots in the swarm. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Generate behavior tree for a swarm of robots to coordinate and perform a complex formation in a synchronized manner.
6.// OUTPUT:
<BehaviorTree><Sequence><Action>follow_leader</Action><Action>form_circle</Action><Action>communicate</Action></Sequence></BehaviorTree>
###
7.// INSTRUCTIONS: Use only the following behaviors {'pick_up': 'Action: Pick up an object with a designated identifier. Always returns True.', 'drop_off': 'Action: Drop off the picked up object at the specified location. Always returns True.', 'is_object_picked_up': 'Condition: Check if the specified object has been picked up. Returns True if object is picked up, False otherwise.', 'is_at_destination': 'Condition: Check if the robot has reached the designated drop off location. Returns True if the robot is at the location, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: Generate behavior tree for a robot to pick up and deliver a specific package to a designated location.
7.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_object_picked_up</Condition><Selector><Sequence><Action>move_to_destination</Action><Condition>is_at_destination</Condition><Action>drop_off</Action></Sequence><Selector><Sequence><Condition>is_pickup_possible</Condition><Action>pick_up</Action></Sequence><Action>wander</Action></Selector></Sequence></BehaviorTree>
###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_blue': "Action: Change agent's color to blue. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'pick_up_object': 'Action: Pick up an object from the ground. Returns True if object is successfully picked up, False otherwise.', 'put_down_object': 'Action: Put down the object. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_reached': 'Condition: Check if target is within 10 units. Returns True if the target is within 10 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Pick up the blue object, form a line, and put down the object at the specified location'. Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree><Sequence><Condition>pick_up_object</Condition><Action>form_line</Action><Action>put_down_object</Action></Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_red': "Action: Change agent's color to red. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'is_intruder_detected': 'Condition: Check if an intruder is detected in the monitored area. Returns True if an intruder is detected, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Defend the nest against intruders by forming a line and changing color to red'. Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_intruder_detected</Condition><Sequence><Action>form_line</Action><Action>change_color_to_red</Action></Sequence></Sequence></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_red': "Action: Change agent's color to red. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'move_to_random_target': 'Action: Move the agent to a random target position. Returns True if target is reached, False otherwise.', 'wait': 'Action: Do nothing for a set amount of time. Returns True after the time is up.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Explore the environment by moving to a random position, wait for 5 seconds, then continue moving'. Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree><Sequence><Action>move_to_random_target</Action><Action>wait</Action><Action>continue_movement_agent</Action></Sequence></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns3.// INSTRUCTIONS: Use only the following behaviors {'collect_fruits': 'Subtree node: Represents a behavior tree for collecting fruits. Includes conditions to check if fruit is ripe and actions to collect the ripe fruit.', 'move_to_safety': 'Action: Makes the agent move to a safe location. Always returns True.', 'is_threat_near': 'Condition: Checks if there is a potential threat nearby. Returns True if a threat is detected, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3.// USER COMMAND: Collect ripe fruits while staying safe. If a threat is detected, move to a safe location.
3.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_threat_near</Condition><Action>move_to_safety</Action></Sequence><Action>collect_fruits</Action></Selector></BehaviorTree>

###
4.// INSTRUCTIONS: Use only the following behaviors {'explore': 'Action: Makes the agent explore its surroundings. Always returns True.', 'build_structure': 'Action: Makes the agent build a designated structure. Always returns True.', 'is_structure_complete': 'Condition: Checks if the designated structure is complete. Returns True if complete, False otherwise.', 'dismantle_structure': 'Action: Makes the agent dismantle a designated structure. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Explore the environment and build a structure. If the structure is complete, dismantle it.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>explore</Action><Action>build_structure</Action></Sequence><Sequence><Condition>is_structure_complete</Condition><Action>dismantle_structure</Action></Sequence></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'analyze_surroundings': 'Action: Makes the agent analyze its surroundings. Always returns True.', 'identify_anomaly': 'Subtree node: Represents a behavior tree for detecting and identifying anomalies.', 'collect_data': 'Action: Makes the agent collect data from the identified anomalies. Always returns True.', 'upload_data': 'Action: Makes the agent upload the collected data. Always returns True.', 'is_data_complete': 'Condition: Checks if all required data has been collected and uploaded. Returns True if complete, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Analyze surroundings and collect and upload data from identified anomalies. If all data is collected and uploaded, stop.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>analyze_surroundings</Action><Selector><Sequence><Action>identify_anomaly</Action><Action>collect_data</Action><Action>upload_data</Action></Sequence></Selector></Sequence><Condition>is_data_complete</Condition></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'plan_path': 'Subtree node: Represents a behavior tree for planning a path to a designated location. Includes conditions to check if the path is clear and actions to clear any obstacles.', 'move_to_destination': 'Action: Makes the agent move to a designated location. Always returns True.', 'is_obstacle_in_path': 'Condition: Checks if there is an obstacle in the designated path. Returns True if an obstacle is detected, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Plan a path to a designated location and remove any obstacles on the way. If there is an obstacle in the path, avoid it and continue towards the destination.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_obstacle_in_path</Condition><Action>plan_path</Action></Sequence><Selector><Action>move_to_destination</Action><Action>plan_path</Action></Selector></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'search_for_food': 'Subtree node: Represents a behavior tree for searching for food. Includes conditions to check if food is available and actions to collect it.', 'return_to_nest': 'Action: Makes the agent return to the nest. Always returns True.', 'is_food_available': 'Condition: Checks if food is currently available. Returns True if food is detected, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: Search for food and return to the nest. If food is not available, continue searching until food is found.
7.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_food_available</Condition><Action>search_for_food</Action></Sequence><Action>return_to_nest</Action></Selector></BehaviorTree>/*
4.// INSTRUCTIONS: Use only the following behaviors {'follow_leader': 'Action: Follow the leader robot. Always returns True.', 'check_leader_status': 'Action: Check the status of the leader robot. Returns True if the leader is active, False otherwise.', 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'is_facing_leader': 'Condition: Check if the robot is facing the leader robot. Returns True if the robot is facing the leader, False otherwise.', 'on_predicted_path': 'Condition: Check if the robot is on the predicted path of the leader robot. Returns True if the robot is on the predicted path, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Generate behavior tree for a robot to follow and assist the leader robot through a maze.
4.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>is_facing_leader</Condition><Action>follow_leader</Action></Sequence><Action>check_leader_status</Action></Selector><Condition>on_predicted_path</Condition><Action>avoid_obstacle</Action></Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'random_walk': 'Action: Move robot randomly within specified boundaries. Always returns True.', 'check_battery_level': 'Action: Check the battery level of the robot. Returns True if battery level is above 30%, False if below 30%.', 'return_to_base': 'Action: Return the robot to the designated base station. Always returns True.', 'perform_maintenance': 'Action: Perform basic maintenance tasks on the robot. Always returns True.', 'is_battery_low': 'Condition: Check if the battery level is below 20%. Returns True if battery level is below 20%, False otherwise.', 'is_maintenance_required': 'Condition: Check if the robot is in need of basic maintenance. Returns True if maintenance is required, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Ensure continuous maintenance of the robot while it performs a random walk within the boundaries.'Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_battery_low</Condition><Sequence><Action>return_to_base</Action><Action>perform_maintenance</Action></Sequence></Sequence><Action>check_battery_level</Action><Action>random_walk</Action></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'explore_area': 'Action: Explore the designated area using optimal pathing. Returns True if exploration is successful, False otherwise.', 'navigate_to_target': 'Action: Navigate to the designated target location using optimal pathing. Returns True if target is reached, False otherwise.', 'mark_current_location': 'Action: Mark the current location as explored. Always returns True.', 'is_target_found': 'Condition: Check if the target location is found. Returns True if target is found, False otherwise.', 'is_area_explored': 'Condition: Check if the designated exploration area is fully explored. Returns True if area is fully explored, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Explore a large area to find a hidden treasure.'Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree><Sequence><Selector><Condition>is_area_explored</Condition><Action>explore_area</Action></Selector><Sequence><Condition>is_target_found</Condition><Action>mark_current_location</Action></Sequence><Selector><Sequence><Condition>is_target_found</Condition><Selector><Sequence><Condition>is_target_found</Condition><Action>navigate_to_target</Action></Sequence><Action>return_to_base</Action></Selector></Sequence></Selector></Sequence></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'log_location': 'Action: Log the current location of the robot. Always returns True.', 'calculate_route': 'Action: Calculate the optimal route to the designated location. Returns True if route is successful, False otherwise.', 'wait_for_instructions': 'Action: Wait for instructions from the user or external source. Returns True once instructions are received.', 'is_route_calculated': 'Condition: Check if the optimal route has been calculated. Returns True if route is calculated, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: Generate behavior tree for a robot to log its current location and wait for instructions to calculate an optimal route.Output only the XML behavior tree without extra text.
7.// OUTPUT:
<BehaviorTree><Sequence><Action>log_location</Action><Selector><Sequence><Condition>is_route_calculated</Condition><Action>wait_for_instructions</Action></Sequence><Action>calculate_route</Action></Selector></Sequence></BehaviorTree> 
###
3.// INSTRUCTIONS: Use only the following behaviors {'look_for_food': 'Action: Search the environment for available food sources. Always returns True.', 'eat_food': 'Action: Consume the food source in the current area. Always returns True.', 'is_hungry': 'Condition: Check if the robot is hungry and in need of food. Returns True if the robot is hungry, False otherwise.', 'is_food_available': 'Condition: Check if there is food available in the current area. Returns True if food is present, False otherwise.', 'move_to_food_source': 'Action: Move the robot towards the nearest food source. Always returns True.', 'is_threat_detected': 'Condition: Check if there is a threat nearby. Returns True if a threat is detected, False otherwise.', 'escape': 'Action: Move away from the threat. Always returns True.', 'is_at_nest': 'Condition: Check if the robot has returned to the nest. Returns True if at the nest, False otherwise.', 'return_to_nest': 'Action: Return the robot to the nest for recharging or further instructions. Always returns True.', 'is_recharged': 'Condition: Check if the robot is fully recharged and ready for the next task. Returns True if the robot is fully powered, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3.// USER COMMAND: Generate behavior tree for a foraging robot to collect food and return to the nest when threatened or low on battery.
3.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_recharged</Condition></Sequence><Selector><Sequence><Condition>is_threat_detected</Condition><Action>escape</Action><Selector><Sequence><Condition>is_at_nest</Condition><Action>return_to_nest</Action></Sequence><Selector><Sequence><Condition>is_hungry</Condition><Selector><Sequence><Condition>is_food_available</Condition><Action>eat_food</Action><Action>return_to_nest</Action></Sequence><Action>move_to_food_source</Action><Sequence><Condition>is_at_nest</Condition><Action>return_to_nest</Action></Sequence></Selector></Sequence></Selector></Sequence><Action>look_for_food</Action></Sequence></BehaviorTree>

###
4.// INSTRUCTIONS: Use only the following behaviors {'scan_for_victims': 'Action: Use sensors to scan the environment for any victims. Always returns True.', 'is_victim_detected': 'Condition: Check if a victim has been detected. Returns True if a victim is detected, False otherwise.', 'move_to_victim': 'Action: Move the robot towards the nearest victim. Always returns True.', 'carry_victim': 'Action: Carefully transport the victim to the designated drop-off location. Always returns True.', 'drop_victim': 'Action: Release the victim at the designated drop-off location. Always returns True.', 'is_at_dropoff': 'Condition: Check if the robot has reached the designated drop-off location. Returns True if at the drop-off location, False otherwise.', 'is_victim_safe': 'Condition: Check if the victim has been safely transported and released. Returns True if the victim is safe, False otherwise.', 'identify_terrain': 'Action: Use cameras and sensors to identify the terrain and map out the best route to the drop-off location. Always returns True.', 'traverse_terrain': 'Action: Move through the terrain using calculated optimal route. Always returns True.', 'is_obstacle_detected': 'Condition: Check if there is an obstacle in the path. Returns True if an obstacle is detected, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Generate behavior tree for a rescue robot to safely transport victims to a designated drop-off location.
4.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_victim_safe</Condition></Sequence><Selector><Sequence><Condition>is_at_dropoff</Condition><Action>drop_victim</Action></Sequence><Sequence><Condition>is_obstacle_detected</Condition><Action>identify_terrain</Action><Action>traverse_terrain</Action><Sequence><Condition>is_victim_detected</Condition><Selector><Sequence><Condition>is_at_dropoff</Condition><Action>drop_victim</Action></Sequence><Action>move_to_victim</Action><Action>carry_victim</Action></Selector></Sequence></Sequence></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'patrol': 'Action: Use designated routes to patrol and monitor the area. Always returns True.', 'record_intrusion': 'Action: Record any detected intrusions using sensors and cameras. Always returns True.', 'is_intrusion_detected': 'Condition: Check if there has been an intrusion. Returns True if an intrusion is detected, False otherwise.', 'alert_security': 'Action: Alert the security team in case of an intrusion. Always returns True.', 'is_threat_detected': 'Condition: Check if there is a threat nearby. Returns True if a threat is detected, False otherwise.', 'neutralize_threat': 'Action: Neutralize the threat using designated methods. Always returns True.', 'is_area_safe': 'Condition: Check if the area is safe and secure. Returns True if the area is safe, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Generate behavior tree for a security robot to patrol, monitor, and neutralize threats in a designated area.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_area_safe</Condition></Sequence><Sequence><Condition>is_threat_detected</Condition><Action>alert_security</Action><Sequence><Condition>is_intrusion_detected</Condition><Action>record_intrusion</Action></Sequence><Sequence><Condition>is_threat_detected</Condition><Action>neutralize_threat</Action><Action>patrol</Action></Sequence></Sequence></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'scan_for_anomalies': 'Action: Use sensors and cameras to scan the area for any anomalies. Always returns True.', 'is_anomaly_detected': 'Condition: Check if an anomaly has been detected. Returns True if an anomaly is detected, False otherwise.', 'investigate_anomaly': 'Action: Move towards the anomaly to gather more information. Always returns True.', 'analyze_anomaly': 'Action: Use advanced sensors and tools to analyze the anomaly and determine its cause. Always returns True.', 'is_anomaly_resolved': 'Condition: Check if the anomaly has been resolved. Returns True if the root cause has been determined and resolved, False otherwise.', 'repair': 'Action: If the cause of the anomaly is a malfunction, repair it using designated tools and methods. Always returns True.', 'collect_data': 'Action: Gather data and evidence related to the anomaly for 
###
3.// INSTRUCTIONS: Use only the following behaviors {'generate_path_to_goal': 'Action: Generate a path from current position to the goal position. Always returns True.', 'follow_path': 'Action: Follow the generated path until the goal is reached. Always returns True.', 'detect_obstacle': 'Action: Detect any obstacles in the path. Always returns True.', 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'is_path_clear': 'Condition: Check if the path ahead is clear. Returns True if no obstacles are detected ahead, False otherwise.', 'is_goal_reached': 'Condition: Check if the goal position is reached. Returns True if the goal position is reached, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3.// USER COMMAND: create a behavior tree to navigate from the current position to the goal position while avoiding any obstacles.
3.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Action>generate_path_to_goal</Action> <Condition>is_path_clear</Condition> <Action>follow_path</Action> </Sequence> <Sequence> <Action>detect_obstacle</Action> <Condition>is_path_clear</Condition> <Action>avoid_obstacle</Action> <Action>generate_path_to_goal</Action> <Action>follow_path</Action> </Sequence> </Selector> </BehaviorTree>

###
4.// INSTRUCTIONS: Use only the following behaviors {'play_sound': 'Action: Play a sound when instructed. Always returns True.', 'detect_enemy': 'Action: Detect any enemies nearby. Always returns True.', 'move_towards_enemy': 'Action: Move towards the detected enemy. Always returns True.', 'is_enemy_detected': 'Condition: Check if enemies are detected. Returns True if enemies are detected, False otherwise.', 'is_player_nearby': 'Condition: Check if the player is within 10 units. Returns True if the player is within 10 units of distance, False otherwise.', 'take_cover': 'Action: Take cover from the detected enemy. Always returns True.', 'is_in_cover': 'Condition: Check if the agent is currently in cover. Returns True if the agent is in cover, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: detect any enemies nearby and either move towards them or take cover if the player is nearby.
4.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Action>detect_enemy</Action> <Condition>is_player_nearby</Condition> <Action>move_towards_enemy</Action> </Sequence> <Sequence> <Action>detect_enemy</Action> <Condition>is_in_cover</Condition> <Action>take_cover</Action> </Sequence> </Selector> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'random_path': 'Action: Generate a random path for exploration. Always returns True.', 'follow_path': 'Action: Follow the generated path until a certain distance is reached. Always returns True.', 'detect_target': 'Action: Detect the target object. Always returns True.', 'move_to_target': 'Action: Move towards the target object. Always returns True.', 'attack_target': 'Action: Attack the target when within a certain distance. Always returns True.', 'is_distance_reached': 'Condition: Check if the agent has reached a certain distance from the target. Returns True if the agent is within the specified distance, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: explore the environment by generating random paths and attacking any detected targets within a certain distance.
5.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Action>random_path</Action> <Action>detect_target</Action> <Condition>is_distance_reached</Condition> <Action>move_to_target</Action> <Action>attack_target</Action> </Sequence> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'identify_color': 'Subtree node: Represents a behavior tree for identifying colors.', 'red_detected': 'Condition: Check if red color is detected. Returns True if red color is detected, False otherwise.', 'blue_detected': 'Condition: Check if blue color is detected. Returns True if blue color is detected, False otherwise.', 'green_detected': 'Condition: Check if green color is detected. Returns True if green color is detected, False otherwise.', 'yellow_detected': 'Condition: Check if yellow color is detected. Returns True if yellow color is detected, False otherwise.', 'move_forward': 'Action: Move the robot one step forward in the current direction. Always returns True.', 'spin_counterclockwise': 'Action: Spin the robot counterclockwise. Always returns True.', 'spin_clockwise': 'Action: Spin the robot clockwise. Always returns True.', 'change_color_to_red': "Action: Change robot's color to red. Always returns True.", 'change_color_to_blue': "Action: Change robot's color to blue. Always returns True.", 'change_color_to_green': "Action: Change robot's color to green. Always returns True.", 'change_color_to_yellow': "Action: Change robot's color to yellow. Always returns True."}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: construct a behavior tree to identify the color of an object and change the robot's color to match.
6.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Action>move_forward</Action> <Action>identify_color</Action> <Condition>red_detected</Condition> <Action>change_color_to_red</Action> </Sequence> <Sequence> <Action>move_forward</Action> <Action>identify_color</Action> <Condition>blue_detected</Condition> <Action>change_color_to_blue</Action> </Sequence> <Sequence> <Action>move_forward</Action> <Action>identify_color</Action> <Condition>green_detected</Condition> <Action>change_color_to_green</Action> </Sequence> <Sequence> <Action>move_forward</Action> <Action>identify_color</Action> <Condition>yellow_detected</Condition> <Action>change_color_to_yellow</Action> </Sequence> </Selector> </BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'record_audio': 'Action: Record audio data from the environment. Always returns True.', 'recognize_speech': "Action: Recognize speech from recorded audio. Always returns True.", 'translate_speech': "Action: Translate speech into text. Always returns True.", 'check_command': "Action: Check if recognized speech matches a specific command. Returns True if the speech matches, False otherwise.", 'move_forward': 'Action###
3.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'circle_path': 'Action: Move in a circle around a target. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'randomize_movement': 'Action: Move randomly within the environment. Always returns True.', 'stay_in_nest': 'Action: Stay inside the nest. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3.// USER COMMAND: generate behavior tree to 'Randomize movement while staying in the nest, then move in a circle around the target.'Output only the XML behavior tree without extra text.
3.// OUTPUT:
<BehaviorTree> <Sequence> <Action>stay_in_nest</Action> <Selector> <Sequence> <Action>randomize_movement</Action> <Action>continue_movement_agent</Action> </Sequence> <Action>circle_path</Action> </Selector> </Sequence> </BehaviorTree>
###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'explode': 'Action: Explode agent. Always returns True.', 'follow_path': 'Action: Follow designated path. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Avoid obstacles while following designated path, then explode.'Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree> <Sequence> <Action>follow_path</Action> <Selector> <Sequence> <Condition>is_obstacle_detected</Condition> <Action>avoid_obstacle</Action> <Action>continue_movement_agent</Action> </Sequence> <Action>explode</Action> </Selector> </Sequence> </BehaviorTree>
###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'form_square': 'Action: Form a square shape. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_square_formed': 'Condition: Check if a square shape is formed. Returns True if the shape is formed with equal sides, False otherwise.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'turn_in_place': 'Action: Turn in place to face target. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Form a square shape, turn in place to face target, and then freeze movement.'Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree> <Sequence> <Action>form_square</Action> <Selector> <Condition>is_square_formed</Condition> <Action>turn_in_place</Action> <Action>continue_movement_agent</Action> </Selector> <Action>agent_movement_freeze</Action> </Sequence> </BehaviorTree>
###
6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'go_to_target': 'Action: Move towards a designated target. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'return_to_nest': 'Action: Return to the nest. Always returns True.', 'stay_still': 'Action: Stay still in the current position. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Move towards target, return to nest, change color to green, and then freeze movement.'Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree> <Sequence> <Action>go_to_target</Action
###
3.// INSTRUCTIONS: Use only the following behaviors {'scan_surroundings': 'Action: Scan surroundings for potential targets. Always returns True.', 'move_to_target': 'Action: Move towards the target. Always returns True.', 'is_target_detected': 'Condition: Check if a target is detected within scanning range. Returns True if a target is detected, False otherwise.', 'is_target_reachable': 'Condition: Check if the target is reachable. Returns True if the target is within reachable distance, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3.// USER COMMAND: Scan the surroundings and move towards the target if detected and reachable. If no target is detected or reachable, do nothing.
3.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>scan_surroundings</Action><Selector><Sequence><Condition>is_target_detected</Condition><Condition>is_target_reachable</Condition><Action>move_to_target</Action></Sequence></Selector></Sequence></Selector></BehaviorTree>

###
4.// INSTRUCTIONS: Use only the following behaviors {'collect_resource': 'Action: Collect the resource at current location. Always returns True.', 'move_to_resource': 'Action: Move towards the closest resource. Always returns True.', 'is_resource_available': 'Condition: Check if there is an available resource at current location. Returns True if a resource is available, False otherwise.', 'is_resource_detected': 'Condition: Check if a resource is detected within scanning range. Returns True if a resource is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path to resource is clear. Returns True if no obstacles are detected on the path, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Move towards the closest resource, collect it if available, otherwise scan for a resource and repeat the process.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>move_to_resource</Action><Selector><Sequence><Condition>is_resource_available</Condition><Action>collect_resource</Action></Sequence></Selector></Sequence><Sequence><Action>scan_surroundings</Action><Selector><Sequence><Condition>is_resource_detected</Condition><Condition>is_path_clear</Condition><Action>move_to_resource</Action><Selector><Sequence><Condition>is_resource_available</Condition><Action>collect_resource</Action></Sequence></Selector></Sequence></Selector></Sequence></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'go_to_checkpoint': "Action: Move to the designated checkpoint. Always returns True.", 'scan_checkpoint': 'Action: Scan the designated checkpoint for potential threats. Always returns True.', 'avoid_threats': 'Action: Take evasive maneuvers to avoid identified threats. Always returns True.', 'is_threat_present': 'Condition: Check if there is a potential threat at the designated checkpoint. Returns True if a threat is present, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Go to the designated checkpoint and scan for potential threats. If a threat is present, take evasive maneuvers. Otherwise, proceed to checkpoint.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>go_to_checkpoint</Action><Action>scan_checkpoint</Action><Selector><Sequence><Condition>is_threat_present</Condition><Action>avoid_threats</Action></Sequence></Selector></Sequence></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'detect_sign': 'Action: Scan the environment for any signs. Always returns True.', 'observe_sign': 'Action: Observe and try to decipher the sign. Always returns True.', 'interpret_sign': 'Action: Interpret the meaning of the sign and respond accordingly. Always returns True.', 'is_sign_detected': 'Condition: Check if a sign is detected within scanning range. Returns True if a sign is detected, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Detect and interpret any signs in the environment, responding accordingly.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>detect_sign</Action><Selector><Sequence><Condition>is_sign_detected</Condition><Action>observe_sign</Action><Action>interpret_sign</Action></Sequence></Selector></Sequence></Selector></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'track_target': 'Action: Track the movement of the target. Always returns True.', 'follow_target': 'Action: Follow the target at a safe distance. Always returns True.', 'avoid_obstacles': 'Action: Take evasive maneuvers to avoid obstacles. Always returns True.', 'is_obstacle_detected': 'Condition: Check if an obstacle is detected within the path. Returns True if an obstacle is detected, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: Track and follow the target, avoiding any detected obstacles.
7.// OUTPUT:
<BehaviorTree><Sequence><Action>track_target</Action><Action>follow_target</Action><Selector><Sequence><Condition>is_obstacle_detected</Condition><Action>avoid_obstacles</Action></Sequence></Selector></Sequence></BehaviorTree>###
3.// INSTRUCTIONS: Use only the following behaviors {'observe_surroundings': 'Action: Use sensors to observe the surroundings. Always returns True.', 'choose_best_path': 'Subtree node: Represents a behavior tree for choosing the most optimal path.', 'move_along_path': 'Action: Move the robot along the chosen path. Always returns True.', 'detect_obstacles': 'Condition: Checks for any obstacles in the path. Returns True if an obstacle is detected, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3.// USER COMMAND: Traverse through a maze using the most optimal path, while avoiding obstacles.
3.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>observe_surroundings</Action></Sequence><Sequence><Selector><Sequence><Action>choose_best_path</Action><Action>detect_obstacles</Action></Sequence></Selector><Action>move_along_path</Action></Sequence></Selector></BehaviorTree>

###
4.// INSTRUCTIONS: Use only the following behaviors {'collect_resources': 'Action: Collect resources from the environment. Always returns True.', 'construct_structure': 'Subtree node: Represents a behavior tree for constructing a new structure.', 'monitor_energy': 'Action: Continuously checks the agent's energy levels. Always returns True.', 'rest_and_recharge': 'Action: Makes the agent rest and recharge at a designated location. Always returns True.', 'is_energy_low': 'Condition: Checks if energy is below a specific threshold. Returns True if energy is below the threshold, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Harvest resources, construct new structures, and maintain energy levels to ensure sustained survival.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>collect_resources</Action><Subtree>construct_structure</Subtree></Sequence><Sequence><Action>monitor_energy</Action><Selector><Sequence><Condition>is_energy_low</Condition><Action>rest_and_recharge</Action></Sequence></Selector></Sequence></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'identify_targets': 'Action: Use cameras and sensors to identify potential targets. Always returns True.', 'track_targets': 'Action: Track the movement of identified targets. Always returns True.', 'engage_target': 'Action: Engage with the target and try to neutralize it. Always returns True.', 'check_ammo': 'Condition: Checks the agent's ammo levels. Returns True if the agent has enough ammo for engaging the target, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Identify potential targets, track their movements, and engage with them if enough ammo is available.
5.// OUTPUT:
<BehaviorTree><Sequence><Action>identify_targets</Action><Action>track_targets</Action><Selector><Sequence><Condition>check_ammo</Condition><Action>engage_target</Action></Sequence></Selector></Sequence></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'find_drops': 'Action: Use sensors to locate supply drops in the environment. Always returns True.', 'get_supplies': 'Action: Collect supplies from the identified drop. Returns True if supplies are successfully collected, False otherwise.', 'deliver_supplies': 'Action: Deliver the collected supplies to a designated location. Always returns True.', 'check_for_obstacles': 'Condition: Checks for obstacles in the path towards the designated location. Returns True if an obstacle is detected, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Locate and collect supply drops, and safely deliver them to a specific location while avoiding any obstacles.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>find_drops</Action><Sequence><Action>get_supplies</Action><Action>deliver_supplies</Action></Sequence></Sequence><Sequence><Condition>check_for_obstacles</Condition></Sequence></Selector></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'sort_items': 'Subtree node: Represents a behavior tree for sorting items based on predetermined criteria.', 'get_next_item': 'Action: Retrieve the next item in the sorted list. Returns True if the item is successfully retrieved, False otherwise.', 'load_item': 'Action: Load the retrieved item into a designated storage area. Always returns True.', 'check_storage_capacity': 'Condition: Checks the available storage capacity. Returns True if there is enough space for the next item, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: Sort and load items based on predetermined criteria while ensuring there is enough storage capacity.
7.// OUTPUT:
<BehaviorTree><Sequence><Subtree>sort_items</Subtree><Sequence><Action>get_next_item</Action><Selector><Sequence><Condition>check_storage_capacity</Condition><Action>load_item</Action></Sequence></Selector></Sequence></Sequence></BehaviorTree> 
###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'calculate_distance_to_target': 'Condition: Calculate the distance between the agent and the target. Returns the numerical value in units.', 'calculate_angle_to_target': 'Condition: Calculate the angle between the agent and the target. Returns the numerical value in degrees.', 'change_speed': 'Action: Change the speed of the agent. Takes a numerical value in units/second as input. Always returns True.', 'follow_path': 'Action: Follow a predetermined path. Takes a list of waypoints as input. Returns True once all waypoints are reached.', 'is_at_waypoint': 'Condition: Check if the agent has reached the specified waypoint. Takes a numerical value in units as input. Returns True if the agent is within the desired range of the waypoint, False otherwise.', 'is_target_reached': 'Condition: Check if the agent has reached the target. Returns True if the agent is within a certain distance of the target, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'navigate through a series of waypoints, changing speed at certain points and freezing movement at the end' Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_at_waypoint(5)</Condition><Action>change_speed(10)</Action><Condition>calculate_distance_to_target</Condition><Action>follow_path(waypoints=[2,7,1,3,8])</Action><Condition>is_target_reached(5)</Condition><Action>agent_movement_freeze</Action></Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'fall_back': 'Action: Move backwards to avoid obstacles. Always returns True.', 'go_to_next_checkpoint': 'Action: Move to the next specified checkpoint. Takes a numerical value in units as input. Returns True once the checkpoint is reached.', 'is_checkpoint_reached': 'Condition: Check if the agent has reached the specified checkpoint. Takes a numerical value in units as input. Returns True if the agent is within the desired range of the checkpoint, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_reached': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'navigate through a series of checkpoints while avoiding obstacles and freezing movement at the end' Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_obstacle_detected</Condition><Action>fall_back</Action><Condition>is_path_clear</Condition><Action>go_to_next_checkpoint(5)</Action><Condition>is_checkpoint_reached(5)</Condition><Action>continue_movement_agent</Action><Condition>is_target_reached(5)</Condition><Action>agent_movement_freeze</Action></Sequence></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_direction': 'Action: Change the direction of the agent. Takes a numerical value in degrees as input. Always returns True.', 'detect_collisions': 'Condition: Detect if there is a collision with another robot. Returns True if a collision is detected, False otherwise.', 'handle_collision': 'Action: If a collision is detected, move away from the collision and try to avoid it in the future. Always returns True.', 'is_at_safe_distance': 'Condition: Check if the agent is at a safe distance from other robots. Returns True if the agent is at a safe distance, False otherwise.', 'perform_task': 'Action: Perform a specific task assigned to the agent. Takes a string as input. Returns True once the task is completed.', 'target_detection_confirmed': 'Condition: Check if a target has been detected by another robot. Returns True if a target has been detected, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'navigate through the environment while avoiding collisions and performing assigned tasks' Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree><Sequence><Condition>detect_collisions</Condition><Action>handle_collision</Action><Condition>is_at_safe_distance</Condition><Selector><Sequence><Action>change_direction(90)</Action><Action>change_direction(-90)</Action></Sequence><Action>wander</Action></Selector><Selector><Sequence><Condition>target_detection_confirmed</Condition><Action>perform_task("collect_data")</Action></Sequence><Action>agent_movement_freeze</Action></Selector></Sequence></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'calculate_distance_to_target': 'Condition: Calculate the distance between the agent and the target. Returns the numerical value in units.', 'calculate_angle_to_target': 'Condition: Calculate the angle between the agent and the target. Returns the numerical value in degrees.', 'move_to_target': 'Action: Move the agent towards the target. Takes a numerical value in units as input. Always returns True.', 'detect_obstacles': 'Action: Use sensors to detect obstacles in the environment. Returns True if an obstacle is detected, False otherwise.', 'avoid_obstacle': 'Action: Move in a different direction to avoid obstacles. Always returns True.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 
###
4.// INSTRUCTIONS: Use only the following behaviors {'turn_towards_enemy': 'Action: Turn the robot towards the detected enemy. Returns True when facing enemy, False otherwise.', 'scan_for_enemies': 'Action: Scan the surroundings for enemies. Returns True if an enemy is detected, False otherwise.', 'wait': 'Action: Wait for 5 seconds. Always returns True.', 'shoot': 'Action: Shoot at the detected enemy. Returns True if the enemy is hit, False otherwise.', 'health_below_threshold': 'Condition: Check if the robot's health is below a certain threshold. Returns True if health is below the threshold, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Generate behavior tree for a robot to engage in a battle.
4.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>health_below_threshold</Condition><Action>wait</Action></Sequence><Sequence><Condition>health_above_threshold</Condition><Selector><Sequence><Condition>scan_for_enemies</Condition><Action>turn_towards_enemy</Action><Action>shoot</Action></Sequence><Action>wait</Action></Selector></Sequence></Selector></Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'collect_resources': 'Action: Collect resources when they are within reach. Returns True when collecting resources, False otherwise.', 'drop_resources': 'Action: Drop collected resources at the designated location. Returns True when successful, False otherwise.', 'empty_inventory': 'Action: Empty the robot's inventory when it reaches full capacity. Returns True when successful, False otherwise.', 'is_inventory_full': 'Condition: Check if the robot's inventory is at full capacity. Returns True if full, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Generate behavior tree for a robot to gather and drop resources.
5.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_inventory_full</Condition><Action>empty_inventory</Action></Sequence><Selector><Sequence><Condition>can_collect_resources</Condition><Action>collect_resources</Action></Sequence><Sequence><Condition>is_inventory_full</Condition><Action>drop_resources</Action></Sequence></Selector></BehaviorTree>
 
###
6.// INSTRUCTIONS: Use only the following behaviors {'find_path_to_target': 'Function: Calculate and find the optimal path to the target. Returns a list of sequential nodes as the path.', 'navigate_to_next_node': 'Action: Move to the next node in the calculated path. Returns True when the destination is reached, False otherwise.', 'is_destination_reached': 'Condition: Check if the current location is the target destination. Returns True if the destination is reached, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Generate behavior tree for a robot to navigate a maze and reach the target destination.
6.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_destination_reached</Condition><Action>task_completed</Action></Sequence><Sequence><Action>find_path_to_target</Action><Selector><Sequence><Condition>can_move_to_next_node</Condition><Action>navigate_to_next_node</Action></Sequence><Action>wander</Action></Selector></Sequence></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'pick_up_object': 'Action: Pick up the object in front of the robot. Returns True when object is picked up, False otherwise.', 'drop_object': 'Action: Drop the object at the designated location. Returns True when successful, False otherwise.', 'is_object_in_front': 'Condition: Check if there is an object in front of the robot. Returns True if object is detected, False otherwise.', 'is_capacity_full': 'Condition: Check if the robot's carrying capacity is full. Returns True if full, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: Generate behavior tree for a robot to pick up and drop off objects.
7.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_capacity_full</Condition><Action>drop_object</Action></Sequence><Selector><Sequence><Condition>is_object_in_front</Condition><Action>pick_up_object</Action></Sequence><Sequence><Condition>is_capacity_full</Condition><Action>drop_object</Action></Sequence></Selector></BehaviorTree> 
###
3.// INSTRUCTIONS: Use only the following behaviors {'search_object': 'Action: Search for an object within the environment. Always returns True.', 'pick_up_object': 'Action: Pick up the target object if it is detected. Always returns True.', 'deposit_object': 'Action: Deposit the target object into the nest. Always returns True.', 'is_object_detected': 'Condition: Checks if the target object is detected within a certain range. Returns True if the object is detected, False otherwise.', 'is_nest_full': 'Condition: Checks if the nest is at full capacity. Returns True if the nest is full, False otherwise.', 'navigate_to_target': 'Subtree node: Represents a behavior tree for navigating to a specific location.', 'form_circle': 'Action: Form a circle with other robots at the target location. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3.// USER COMMAND: Find and pick up a specific target object, then navigate to the nest and deposit the object. If the nest is full, form a circle with other robots.
3.// OUTPUT:
<BehaviorTree><Sequence><Action>search_object</Action><Selector><Sequence><Condition>is_object_detected</Condition><Action>pick_up_object</Action><Action>deposit_object</Action></Sequence><Selector><Condition>is_nest_full</Condition><Action>form_circle</Action></Sequence><Action>navigate_to_target</Action></Selector></Sequence></BehaviorTree>

###
4.// INSTRUCTIONS: Use only the following behaviors {'collect_resources': 'Action: Collect nearby resources such as food or water. Always returns True.', 'deposit_resources': 'Action: Deposit the collected resources into the nest. Always returns True.', 'is_resource_available': 'Condition: Checks if resources are available within a certain range. Returns True if resources are available, False otherwise.', 'is_nest_full': 'Condition: Checks if the nest is full. Returns True if the nest is full, False otherwise.', 'navigate_to_target': 'Subtree node: Represents a behavior tree for navigating to a specific location.', 'form_line': 'Action: Form a line with other robots for coordinated resource collection. Always returns True.', 'is_line_formed': 'Condition: Checks if a line is formed with other robots. Returns True if a line is formed, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Collect resources and deposit them into the nest. If the nest is full, form a line with other robots for coordinated collection.
4.// OUTPUT:
<BehaviorTree><Sequence><Action>collect_resources</Action><Selector><Sequence><Condition>is_resource_available</Condition><Action>deposit_resources</Action></Sequence><Selector><Condition>is_nest_full</Condition><Action>form_line</Action></Selector><Selector><Condition>is_line_formed</Condition><Action>navigate_to_target</Action></Sequence></Selector></Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'scan_surroundings': 'Condition: Scans the environment for threats and returns True if a threat is detected, False otherwise.', 'avoid_threat': 'Action: Avoids the detected threat by changing direction. Always returns True.', 'communicate_location': 'Action: Communicates the current location of the agent to other robots. Always returns True.', 'navigate_to_location': 'Subtree node: Represents a behavior tree for navigating to a specific location.', 'sound_alarm': 'Action: Sounds an alarm to alert other robots of danger. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Scan surroundings for threats, avoid them if detected, communicate current location to other robots, and sound an alarm if danger is imminent.
5.// OUTPUT:
<BehaviorTree><Sequence><Condition>scan_surroundings</Condition><Selector><Sequence><Action>avoid_threat</Action></Sequence><Selector><Action>communicate_location</Action></Selector><Selector><Sequence><Condition>scan_surroundings</Condition><Action>sound_alarm</Action></Sequence></Selector><Action>navigate_to_location</Action></Selector></Sequence></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'roam': 'Action: Roam freely within a specified area. Always returns True.', 'detect_foods': 'Condition: Detects nearby food sources and returns True if found, False otherwise.', 'forage': 'Action: Forage for and collect food resources. Always returns True.', 'eat': 'Action: Consume the collected food to replenish energy. Always returns True.', 'is_energy_low': 'Condition: Checks if energy levels are below a certain threshold. Returns True if energy levels are low, False otherwise.', 'search_for_resting_place': 'Subtree node: Represents a behavior tree for finding a suitable resting place.', 'rest': 'Action: Rest to recharge energy levels. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Roam freely and forage for food sources. If energy levels are low, search for a resting place and rest to recharge energy.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>roam</Action><Selector><Sequence><Condition>detect_foods</Condition><Action>forage</Action></Sequence></Selector></Sequence><Selector><Condition>is_energy_low</Condition><Action>search_for_resting_place</Action><Action>rest</Action></Selector></Selector></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'detect_other_robots': 'Condition: Detects other robots within a certain range and returns True if found, False otherwise.', 'communicate_strategy': 'Action: Communicates the current strategy being used to coordinate the actions of multiple robots. Always returns True.', 'move_to_location': 'Subtree node: Represents a behavior tree for moving to a specific location.', 'coordinate_actions': 'Action: Coordinates actions with other robots to achieve a common goal. Always returns True.', 'perform_task': 'Action: Performs a specific task based on the current strategy being coordinated with other robots. Always returns True.', 'is_task_complete': 'Condition: Checks if the current task has been successfully completed by all robots involved. Returns True if the task is complete, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: Detect other robots, communicate a coordination strategy, move to a specific location, coordinate actions, and perform a task. Check if the task is completed.
7.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>
###
4.// INSTRUCTIONS: Use only the following behaviors {'detect_enemy': 'Action: Detect any enemies in the vicinity. Always returns True.', 'is_enemy_nearby': 'Condition: Check if an enemy is within a specified distance. Returns True if an enemy is within the specified distance, False otherwise.', 'shoot_target': 'Action: Shoot at the enemy. Always returns True.', 'move_to_cover': 'Action: Move to a nearby cover spot. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Defend the base by detecting and shooting at enemies. If no enemies are nearby, move to cover.
4.// OUTPUT:
<BehaviorTree><Sequence><Trigger>detect_enemy</Trigger><Sequence><Condition>is_enemy_nearby</Condition><Action>shoot_target</Action><Action>task_completed</Action></Sequence><Action>move_to_cover</Action></Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'find_food': 'Subtree node: Represents a behavior tree for finding food.', 'eat_food': 'Action: Consume food when it is found. Always returns True.', 'is_hungry': 'Condition: Check the agent's hunger levels. Returns True if the agent is hungry, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Find food and eat it when hungry.
5.// OUTPUT:
<BehaviorTree><Sequence><Subtree>find_food</Subtree><Condition>is_hungry</Condition><Action>eat_food</Action></Sequence></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'follow_leader': 'Action: Follow the designated leader. Always returns True.', 'is_leader_in_sight': 'Condition: Check if the leader is in sight. Returns True if the leader is in sight, False otherwise.', 'stop_following': 'Action: Stop following the leader and resume own movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Follow the designated leader but stop if they are not in sight.
6.// OUTPUT:
<BehaviorTree><Sequence><Action>follow_leader</Action></Sequence><Sequence><Condition>is_leader_in_sight</Condition><Action>task_completed</Action></Sequence><Action>stop_following</Action></Sequence></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'send_signal': 'Action: Sends a signal to another robot to perform an action. Always returns True.', 'listen_for_signal': 'Action: Listens for a signal from another robot. Always returns True.', 'perform_action': 'Action: Performs a specific action based on the received signal. Returns True if action is successfully performed, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: Perform a task in coordination with other robots by sending and receiving signals.
7.// OUTPUT:
<BehaviorTree><Sequence><Action>send_signal</Action><Action>listen_for_signal</Action><Action>perform_action</Action></Sequence></BehaviorTree>
###
3.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'change_color_to_blue': "Action: Change agent's color to blue. Always returns True.", 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_yellow': "Action: Change agent's color to yellow. Always returns True.", 'form_circle': 'Action: Form a circular shape with other agents. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_circle_formed': 'Condition: Check if a circular shape is formed. Returns True if all agents are in a circular formation, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'leave_nest': 'Action: Move away from the nest. Always returns True.', 'return_to_nest': 'Action: Move towards the nest. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3.// USER COMMAND: generate behavior tree to 'Form a circular shape with other agents and change colors to blue, green, and yellow, then return to the nest.'Output only the XML behavior tree without extra text.
3.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>is_circle_formed</Condition> <Action>change_color_to_blue</Action> <Action>change_color_to_green</Action> <Action>change_color_to_yellow</Action> <Action>agent_movement_freeze</Action> <Action>return_to_nest</Action> </Sequence> <Action>form_circle</Action> </Selector> </Sequence> </BehaviorTree>

###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'collect_resource': 'Action: Collect available resource. Returns True if resource is collected successfully, False otherwise.', 'deposit_resource': 'Action: Deposit collected resource at designated location. Returns True if resource is successfully deposited, False otherwise.', 'find_resource': 'Action: Move towards and collect available resource. Returns True if resource is successfully collected, False otherwise.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_resource_available': 'Condition: Check if there is a resource available nearby. Returns True if there is a resource within a certain distance, False otherwise.', 'is_resource_depleted': 'Condition: Check if resource at designated location is depleted. Returns True if resource is depleted, False otherwise.', 'is_resource_deposit_successful': 'Condition: Check if resource is successfully deposited at designated location. Returns True if resource is deposited successfully, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Find resource, collect and deposit it at designated location.'Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>is_resource_available</Condition> <Action>find_resource</Action> <Selector> <Sequence> <Condition>is_resource_depleted</Condition> <Action>task_completed</Action> </Sequence> <Action>agent_movement_freeze</Action> </Selector> </Sequence> <Sequence> <Condition>is_resource_deposit_successful</Condition> <Selector> <Sequence> <Condition>is_agent_in_nest</Condition> <Action>agent_movement_freeze</Action> <Action>task_completed</Action> </Sequence> <Action>deposit_resource</Action> </Selector> </Sequence> </Selector> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'change_color_to_blue': "Action: Change agent's color to blue. Always returns True.", 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'consult_leader': 'Action: Communicate with designated leader for guidance. Always returns True.', 'detect_leader': 'Condition: Check if designated leader is within range. Returns True if leader is within a certain distance, False otherwise.', 'form_circle': 'Action: Form a circular shape with other agents. Always returns True.', 'is_circle_formed': 'Condition: Check if a circular shape is formed. Returns True if all agents are in a circular formation, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'return_to_nest': 'Action: Move towards the nest. Always returns True.', 'send_signal_to_leader': 'Action: Send a signal to designated leader. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Form a circular shape, consult with designated leader, receive guidance, and return to the nest.'Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>is_circle_formed</Condition> <Action>consult_leader</Action> <Action>return_to_nest</Action> </Sequence> <Action>form_circle</Action> </Selector> <Sequence> <Condition>is_target_reached</Condition> <Action>send_signal_to_leader</Action> <Selector> <Sequence> <Condition>is_agent_in_nest</Condition> <Action>agent_movement_freeze</Action> </Sequence
###
3.// INSTRUCTIONS: Use only the following behaviors {'move_towards_point': 'Action: Move towards a given point at a fixed speed. Always returns True.', 'detect_collisions': 'Action: Use sensors to detect nearby robots or obstacles. Always returns True.', 'avoid_collision': 'Action: Change direction to avoid potential collisions with other robots or obstacles. Always returns True.', 'wait': 'Action: Pause for a specific amount of time. Always returns True.', 'is_point_reached': 'Condition: Check if the given point has been reached. Returns True if the point has been reached, False otherwise.', 'is_collision_detected': 'Condition: Check if a collision with another robot or obstacle is detected. Returns True if a collision is detected, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3.// USER COMMAND: Generate a behavior tree for a swarm of robots to navigate a maze with multiple obstacles, while avoiding collisions, and reaching a designated endpoint.
3.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>is_collision_detected</Condition><Action>avoid_collision</Action></Sequence><Action>move_towards_point</Action></Selector><Action>detect_collisions</Action></Sequence><Sequence><Condition>is_point_reached</Condition><Action>wait</Action></Sequence></BehaviorTree>

###
4.// INSTRUCTIONS: Use only the following behaviors {'fly': 'Action: Fly to a specific location within the environment. Always returns True.', 'land': 'Action: Land and remain stationary at the current location. Always returns True.', 'take_off': 'Action: Take off and begin flying. Always returns True.', 'detect_target': 'Action: Use sensors to detect if the target is within range. Always returns True.', 'is_target_reached': 'Condition: Check if the target has been reached. Returns True if the target has been reached, False otherwise.', 'is_in_air': 'Condition: Check if the drone is currently flying. Returns True if the drone is in the air, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Generate a behavior tree for a swarm of drones to search for a specific target, while navigating obstacles and maintaining flight.
4.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>is_target_reached</Condition><Action>land</Action></Sequence><Action>fly</Action></Selector><Selector><Sequence><Condition>is_in_air</Condition><Action>take_off</Action></Sequence><Action>detect_target</Action></Selector></Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'start_recording': 'Action: Begin recording data from sensors. Always returns True.', 'stop_recording': 'Action: Stop recording data from sensors. Always returns True.', 'detect_object': 'Action: Use sensors to detect nearby objects. Always returns True.', 'sort_objects': 'Action: Sort detected objects based on size or type. Always returns True.', 'calculate_distance': 'Action: Use sensor data to calculate the distance between objects. Always returns True.', 'is_object_detected': 'Condition: Check if any objects have been detected. Returns True if an object is detected, False otherwise.', 'is_data_recorded': 'Condition: Check if sensor data has been recorded. Returns True if data has been recorded, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Generate a behavior tree for a swarm of robots to collect and sort data from the environment, while identifying and avoiding obstacles.
5.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>is_data_recorded</Condition><Action>stop_recording</Action></Sequence><Action>start_recording</Action></Selector><Selector><Sequence><Condition>is_object_detected</Condition><Action>detect_object</Action></Sequence><Action>calculate_distance</Action></Selector></Sequence><Sequence><Condition>is_obstacle_detected</Condition><Action>avoid_obstacle</Action></Sequence></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'collect_resources': 'Action: Collect resources from the environment. Always returns True.', 'deposit_resources': 'Action: Deposit collected resources at a designated location. Always returns True.', 'build_structure': 'Action: Use collected resources to build a structure. Always returns True.', 'assign_jobs': 'Action: Assign specific tasks or roles to individual robots. Always returns True.', 'is_resources_available': 'Condition: Check if there are any resources available in the environment. Returns True if resources are available, False otherwise.', 'is_structure_built': 'Condition: Check if the designated structure has been fully built. Returns True if the structure is built, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Generate a behavior tree for a swarm of robots to gather resources, assign tasks, and construct a specified structure.
6.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>is_resources_available</Condition><Action>collect_resources</Action></Sequence><Selector><Sequence><Condition>is_structure_built</Condition><Action>assign_jobs</Action></Sequence><Action>deposit_resources</Action></Selector></Sequence><Sequence><Condition>is_robots_ready</Condition><Action>build_structure</Action></Sequence></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'gather_food': 'Action: Gather food items from the environment. Always returns True.', 'avoid_predators': 'Action: Use sensors to detect nearby predators and take evasive action. Always returns True.', 'hunt_prey': 'Action: Use sensors to detect and hunt prey. Always returns True.', 'is_food_detected': 'Condition: Check if any food items are detected. Returns True if food is detected, False otherwise.', 'is_predator_detected': 'Condition: Check if any predators are detected. Returns True if predators are detected, False otherwise.', 'is_prey_detected': 'Condition: Check if any prey is detected. Returns True if prey is detected, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: Generate a behavior tree for a swarm of animal-inspired robots to forage for food, avoid predators, and hunt prey.
7.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_food_detected</Condition><Action>gather_food</Action></Sequence><Sequence><Condition>is_predator_detected</Condition><Action>avoid_predators</Action></Sequence><Sequence><Condition>is_prey_detected</Condition><Action>hunt_prey</Action></Sequence
###
3.// INSTRUCTIONS: Use only the following behaviors {'agent_move_backward': "Action: Move agent backward. Always returns True.", 'agent_move_forward': 'Action: Move agent forward. Always returns True.', 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_blue': "Action: Change agent's color to blue. Always returns True.", 'change_color_to_red': "Action: Change agent's color to red. Always returns True.", 'detect_fuel': 'Condition: Check if fuel level is below 50%. Returns True if fuel level is below 50%, False otherwise.', 'get_fuel': 'Action: Refill fuel. Always returns True.', 'is_task_completed': 'Condition: Check if task has been completed. Returns True if task is completed, False otherwise.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'move_to_target': 'Action: Move towards target. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3.// USER COMMAND: generate behavior tree to 'Get fuel, move to target, and change color to red if task is completed.'Output only the XML behavior tree without extra text.
3.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Condition>is_task_completed</Condition> <Action>change_color_to_red</Action> </Selector> <Sequence> <Condition>is_target_detected</Condition> <Action>get_fuel</Action> <Action>move_to_target</Action> </Sequence> </BehaviorTree>

###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_move_backward': "Action: Move agent backward. Always returns True.", 'agent_move_forward': 'Action: Move agent forward. Always returns True.', 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_blue': "Action: Change agent's color to blue. Always returns True.", 'change_color_to_red': "Action: Change agent's color to red. Always returns True.", 'detect_target': 'Condition: Check if target is in range. Returns True if target is within 30 units, False otherwise.', 'guard_target': 'Action: Move towards target and guard it. Always returns True.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'move_right': 'Action: Move towards right. Always returns True.', 'stop_movement': 'Action: Stop all movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Find target, guard it, and change color to blue if target is detected.'Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Condition>detect_target</Condition> <Action>change_color_to_blue</Action> </Selector> <Sequence> <Condition>is_obstacle_detected</Condition> <Action>avoid_obstacle</Action> <Action>guard_target</Action> </Sequence> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_move_backward': "Action: Move agent backward. Always returns True.", 'agent_move_forward': 'Action: Move agent forward. Always returns True.', 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_blue': "Action: Change agent's color to blue. Always returns True.", 'change_color_to_red': "Action: Change agent's color to red. Always returns True.", 'detect_enemy': 'Condition: Check if enemy is within range. Returns True if enemy is within 20 units, False otherwise.', 'escape_enemy': 'Action: Move away from enemy. Always returns True.', 'is_agent_at_nest': 'Condition: Check if agent is in the nest. Returns True if agent is in the nest, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'move_left': 'Action: Move towards left. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Find and escape enemy, and return to the nest.'Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Condition>detect_enemy</Condition> <Action>escape_enemy</Action> </Selector> <Sequence> <Condition>is_agent_at_nest</Condition> <Action>change_color_to_blue</Action> <Action>return_to_nest</Action> </Sequence> </Sequence> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'agent_move_backward': "Action: Move agent backward. Always returns True.", 'agent_move_forward': 'Action: Move agent forward. Always returns True.', 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_blue': "Action: Change agent's color to blue. Always returns True.", 'change_color_to_red': "Action: Change agent's color to red. Always returns True.", 'detect_signal': 'Condition: Check if signal is detected. Returns True if signal is detected, False otherwise.', 'gather_resource': 'Action: Collect resource. Always returns True.', 'is_resource_full': 'Condition: Check if resource level is full. Returns True if resource level is full, False otherwise.', 'is_resource_low': 'Condition: Check if resource level is below 50%. Returns True if resource level is below 50%, False otherwise.', 'move_randomly': 'Action: Move randomly within the environment. Always returns True.', 'return_to_nest': 'Action: Return to the nest. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Gather resource while resource level is low, and return to the nest when resource level is full.'Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Condition>is_resource_low</Condition> <Sequence> <Condition>
###
3.// INSTRUCTIONS: Use only the following behaviors {'collect_resources': 'Action: Collect resources in the environment. Always returns True.', 'navigate_to_home': 'Action: Navigate back to the team's home base. Always returns True.', 'has_enough_resources': 'Condition: Check if the robot has collected enough resources. Returns True if enough resources have been collected, False otherwise.', 'is_home': 'Condition: Check if the robot is at the home base. Returns True if the robot is at the home base, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3.// USER COMMAND: Create a behavior tree for a robot to collect resources until it has enough and then return to the home base.
3.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>collect_resources</Action><Condition>has_enough_resources</Condition></Sequence><Sequence><Action>navigate_to_home</Action><Condition>is_home</Condition></Sequence></Selector></BehaviorTree>

###
4.// INSTRUCTIONS: Use only the following behaviors {'search_for_survivor': 'Action: Search the environment for any injured individuals. Always returns True.', 'carry_survivor': 'Action: Carry the survivor to safety. Always returns True.', 'check_health': 'Subtree node: Represents a behavior tree for checking the agent's health.', 'treat_injury': 'Action: Provide basic medical treatment to the survivor. Always returns True.', 'is_survivor_safe': 'Condition: Check if the survivor has been safely transported to a designated location. Returns True if the survivor is safe, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Construct a behavior tree for a robot to search for and rescue an injured survivor, while making sure the robot's health is monitored and maintained.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>search_for_survivor</Action><Condition>is_survivor_safe</Condition></Sequence><Sequence><Selector><Sequence><Action>check_health</Action><Selector><Action>treat_injury</Action><Action>wait</Action></Selector></Sequence></Selector><Action>carry_survivor</Action></Sequence></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'gather_food': 'Action: Gather food items in the environment. Always returns True.', 'eat_food': 'Action: Consume the food item for sustenance. Always returns True.', 'check_hunger': 'Subtree node: Represents a behavior tree for checking the agent's hunger level.', 'is_full': 'Condition: Check if the agent is full. Returns True if the agent is full, False otherwise.', 'find_shelter': 'Action: Search for a suitable shelter in the environment. Always return True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Design a behavior tree for a robot to gather and consume food, while also finding shelter when necessary.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>gather_food</Action><Sequence><Action>eat_food</Action><Condition>is_full</Condition></Sequence></Sequence><Sequence><Action>check_hunger</Action><Selector><Action>eat_food</Action><Action>find_shelter</Action></Selector></Sequence></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'dig_hole': 'Action: Dig a hole in the ground. Always returns True.', 'place_seed': 'Action: Place a seed in the hole for planting. Always returns True.', 'water_plants': 'Action: Water the plants to help them grow. Always returns True.', 'check_enough_water': 'Subtree node: Represents a behavior tree for checking the water level.', 'is_plants_growing': 'Condition: Check if the plants are growing. Returns True if the plants are growing, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Generate a behavior tree for a robot to dig a hole, plant a seed, and water the plants until they are growing.
6.// OUTPUT:
<BehaviorTree><Sequence><Action>dig_hole</Action><Action>place_seed</Action><Action>water_plants</Action></Sequence><Sequence><Action>check_enough_water</Action><Condition>is_plants_growing</Condition></Sequence></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'pick_up_item': 'Action: Pick up an item in the environment. Always returns True.', 'drop_item': 'Action: Drop the item in a designated location. Always returns True.', 'check_inventory': 'Subtree node: Represents a behavior tree for checking the agent's current inventory.', 'is_inventory_full': 'Condition: Check if the agent's inventory is full. Returns True if the inventory is full, False otherwise.', 'use_item': 'Action: Use the item currently in the agent's inventory. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: Construct a behavior tree for a robot to pick up and use items from the environment, and drop them when the inventory is full.
7.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>pick_up_item</Action><Sequence><Check>check_inventory</Check><Condition>is_inventory_full</Condition></Sequence></Sequence><Sequence><Action>use_item</Action><Action>drop_item</Action></Sequence></Selector></BehaviorTree> 
###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_blue': "Action: Change agent's color to blue. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'move_to_start': 'Action: Move to designated starting location. Always returns True.', 'is_at_start': 'Condition: Check if the agent is at the designated starting location. Returns True if at the start, False otherwise.', 'is_at_goal': 'Condition: Check if the agent is at the designated goal location. Returns True if at the goal, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_goal_reached': 'Condition: Check if the goal has been reached. Returns True if the goal has been reached, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Navigate to the goal location, avoiding obstacles and change color to blue when reaching the goal'. Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_at_start</Condition><Action>move_to_start</Action></Sequence><Sequence><Condition>is_obstacle_detected</Condition><Action>avoid_obstacle</Action></Sequence><Sequence><Condition>is_goal_reached</Condition><Action>change_color_to_blue</Action></Sequence></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'move_to_start': 'Action: Move to designated starting location. Always returns True.', 'move_to_goal': 'Action: Move to designated goal location. Always returns True.', 'is_at_start': 'Condition: Check if the agent is at the designated starting location. Returns True if at the start, False otherwise.', 'is_at_goal': 'Condition: Check if the agent is at the designated goal location. Returns True if at the goal, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_goal_reached': 'Condition: Check if the goal has been reached. Returns True if the goal has been reached, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Navigate to the goal location by following a predefined path, avoiding obstacles along the way'. Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_at_start</Condition><Action>move_to_start</Action></Sequence><Sequence><Condition>is_obstacle_detected</Condition><Action>avoid_obstacle</Action></Sequence><Sequence><Condition>is_goal_reached</Condition><Action>move_to_goal</Action></Sequence></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'follow_path': 'Action: Follow the predefined path. Always returns True.', 'move_to_detected_obstacle': 'Action: Move towards the detected obstacle. Always returns True.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'target_within_reach': 'Condition: Check if the target is within reach. Returns True if the target is within a certain range, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Navigate to the target location, avoiding obstacles by following a predefined path or moving towards the detected obstacle'. Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>target_within_reach</Condition><Action>task_completed</Action></Sequence><Sequence><Condition>is_obstacle_detected</Condition><Action>move_to_detected_obstacle</Action></Sequence><Sequence><Action>follow_path</Action></Sequence><Sequence><Condition>target_within_reach</Condition><Action>task_completed</Action></Sequence></Selector></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'follow_path': 'Action: Follow the predefined path. Always returns True.', 'move_to_detected_obstacle': 'Action: Move towards the detected obstacle. Always returns True.', 'target_within_reach': 'Condition: Check if the target is within reach. Returns True if the target is within a certain range, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command.  If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: generate behavior tree to 'Explore the environment by navigating through paths and avoiding obstacles, and complete a specific task when the target is within reach'. Output only the XML behavior tree without extra text.
7.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>target_within_reach</Condition><Action>task_completed</Action></Sequence><Sequence><Condition>is_obstacle_detected</Condition><Action>avoid_obstacle</Action></Sequence><Sequence><Action###
3.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3.// USER COMMAND: generate behavior tree to 'Avoid obstacles, Form a vertical line, and Continue movement.'Output only the XML behavior tree without extra text.
3.// OUTPUT:
<BehaviorTree> <Sequence> <Action>avoid_obstacle</Action> <Action>form_line</Action> <Action>continue_movement_agent</Action> </Sequence> </BehaviorTree>
###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Check if agent is in nest and signal task completion or move randomly if not in nest.'Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>is_agent_in_nest</Condition> <Action>task_completed</Action> </Sequence> <Action>wander</Action> </Selector> </BehaviorTree>
###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Detect target, move towards it, and change to green when target is reached.'Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree> <Sequence> <Condition>is_target_detected</Condition> <Action>continue_movement_agent</Action> <Condition>is_target_reached</Condition> <Action>change_color_to_green</Action> </Sequence> </BehaviorTree>
###
6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line':
###
3.// INSTRUCTIONS: Use only the following behaviors {'identify_target': 'Subtree node: Uses sensors to identify the target.', 'align_with_target': 'Subtree node: Aligns the robot with the identified target.', 'charge': 'Action: Starts charging the target. Always returns True.', 'attack': 'Action: Attacks the target while maintaining distance. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3.// USER COMMAND: Develop a behavior tree for a swarm of robots to identify and attack a specific target while avoiding obstacles and maintaining distance.
3.// OUTPUT:
<BehaviorTree><Sequence><Action>identify_target</Action><Trigger>on_target_detected</Trigger><Sequence><Action>align_with_target</Action><Trigger>on_collision_detected</Trigger><Sequence><Action>backup</Action><Action>shift_left</Action></Sequence><Sequence><Condition>is_distance_safe</Condition><Action>charge</Action></Sequence></Sequence></Sequence><Sequence><Condition>is_target_in_range</Condition><Action>attack</Action></Sequence></BehaviorTree>

###
4.// INSTRUCTIONS: Use only the following behaviors {'count_obstacles': 'Condition: Counts the number of obstacles within a given area and returns the count.', 'move_closer_to_obstacle': 'Action: Moves closer to the nearest obstacle to get a better view. Returns True after moving.', 'take_picture': 'Action: Takes a picture of the obstacle. Returns True after taking a picture.', 'avoid_obstacle': 'Action: Moves away from the obstacle. Returns True after moving.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Develop a behavior tree for a swarm of robots to survey and gather data about obstacles in a designated area.
4.// OUTPUT:
<BehaviorTree><Sequence><Action>count_obstacles</Action><Selector><Sequence><Condition>is_area_safe</Condition><Action>move_closer_to_obstacle</Action></Sequence><Action>take_picture</Action></Selector></Sequence><Selector><Sequence><Condition>is_obstacle_dangerous</Condition><Action>avoid_obstacle</Action></Sequence><Action>move_forward</Action></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'detect_sinkhole': 'Condition: Checks for the presence of a sinkhole in the immediate environment. Returns True if a sinkhole is detected, False otherwise.', 'move_to_safety': 'Action: Moves away from the detected sinkhole and towards a safe location. Returns True after moving.', 'send_warning': 'Action: Sends a warning message to other swarm robots about the detected sinkhole. Returns True after sending.', 'repair_sinkhole': 'Action: Uses designated tools to repair the detected sinkhole. Returns True after repairing.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Develop a behavior tree for a swarm of robots to detect, warn, and repair sinkholes in a hazardous environment.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>detect_sinkhole</Condition><Selector><Sequence><Condition>is_sinkhole_dangerous</Condition><Sequence><Action>send_warning</Action><Action>move_to_safety</Action></Sequence><Action>repair_sinkhole</Action></Selector></Sequence><Action>move_forward</Action></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'sense_light_intensity': 'Condition: Checks the light intensity and returns the value.', 'adjust_brightness': 'Action: Adjusts the brightness of the robot's surroundings. Returns True after adjusting.', 'navigate_in_low_light': 'Action: Navigates through low light environments using specialized sensors. Returns True after navigating.', 'switch_to_night_vision': 'Action: Activates the robot's night vision mode. Returns True after switching.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Develop a behavior tree for a swarm of robots to adjust to changes in light intensity and navigate in low light conditions.
6.// OUTPUT:
<BehaviorTree><Sequence><Condition>sense_light_intensity</Condition><Selector><Sequence><Condition>is_brightness_too_high</Condition><Action>adjust_brightness</Action></Sequence><Selector><Sequence><Condition>is_light_low</Condition><Action>navigate_in_low_light</Action></Sequence><Action>switch_to_night_vision</Action></Selector></Sequence><Action>move_forward</Action></Selector></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'identify_object': 'Subtree node: Uses sensors to identify and classify objects in the environment.', 'pick_up_object': 'Action: Uses specialized grippers to pick up and hold onto the identified object. Returns True after picking up.', 'move_to_designated_area': 'Action: Moves to the designated area while holding onto the object. Returns True after moving.', 'place_object': 'Action: Places the object at the designated location. Returns True after placing.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: Develop a behavior tree for a swarm of robots to locate, pick up, and deliver objects to specific locations.
7.// OUTPUT:
<BehaviorTree><Sequence><Action>identify_object</Action><Sequence><Action>pick_up_object</Action><Action>move_to_designated_area</Action></Sequence></Sequence><Action>place_object</Action></BehaviorTree>###
4.// INSTRUCTIONS: Use only the following behaviors {'wait': 'Action: Wait for a specified amount of time. Always returns True.', 'move_to_pressure_plate': 'Action: Move towards the nearest pressure plate. Returns True when the plate is reached.', 'move_to_security_system': 'Action: Move towards the security system. Returns True when the system is reached.', 'is_pressure_plate_pressed': 'Condition: Check if the pressure plate has been pressed. Returns True if the plate is pressed, False otherwise.', 'is_security_system_active': 'Condition: Check if the security system is active. Returns True if the system is active, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5// USER COMMAND: Generate behavior tree for a robot to deactivate a security system by pressing a nearby pressure plate.Output only the XML behavior tree without extra text.
5// OUTPUT:
<BehaviorTree><Sequence><Selector><Condition>is_security_system_active</Condition><Selector><Sequence><Condition>is_pressure_plate_pressed</Condition><Action>move_to_security_system</Action></Sequence><Selector><Sequence><Condition>is_pressure_plate_pressed</Condition><Action>move_to_pressure_plate</Action></Sequence><Action>wait</Action></Selector></Selector></Sequence></BehaviorTree>
###
5.// INSTRUCTIONS: Use only the following behaviors {'collect_resource': 'Action: Collect the nearest resource. Always returns True.', 'store_resource': 'Action: Store the collected resource in the nearest storage unit. Returns True when the resource is stored.', 'move_to_resource': 'Action: Move towards the nearest available resource. Returns True when the resource is reached.', 'is_resource_available': 'Condition: Check if there is a resource nearby. Returns True if a resource is available, False otherwise.', 'is_storage_unit_full': 'Condition: Check if the nearest storage unit is full. Returns True if the unit is full, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5// USER COMMAND: Generate behavior tree for a robot to collect and store resources in an efficient manner.Output only the XML behavior tree without extra text.
5// OUTPUT:
<BehaviorTree><Sequence><Condition>is_resource_available</Condition><Selector><Sequence><Condition>is_storage_unit_full</Condition><Action>store_resource</Action></Sequence><Selector><Sequence><Condition>is_resource_available</Condition><Action>move_to_resource</Action></Sequence><Action>collect_resource</Action></Selector></Selector></Sequence></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'rotate_clockwise': 'Action: Rotate the robot 45 degrees to the right. Always returns True.', 'rotate_counterclockwise': 'Action: Rotate the robot 45 degrees to the left. Always returns True.', 'is_canister_attached': 'Condition: Check if the canister is attached to the robot. Returns True if the canister is attached, False otherwise.', 'is_research_station_reached': 'Condition: Check if the robot has reached the designated research station. Returns True if the station is reached, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Generate behavior tree for a robot to navigate to a research station and deposit a canister only when it is attached to the robot.Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree><Sequence><Selector><Condition>is_canister_attached</Condition><Selector><Action>rotate_counterclockwise</Action><Action>rotate_clockwise</Action></Selector></Sequence><Condition>is_research_station_reached</Condition></Selector></Sequence></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'find_beacon': 'Action: Search for the nearest beacon and move towards it. Returns True when the beacon is found and reached.', 'activate_beacon': 'Action: Activate the beacon once it is reached. Returns True when the beacon is activated.', 'is_beacon_available': 'Condition: Check if a beacon is present in the environment. Returns True if a beacon is available, False otherwise.', 'is_beacon_activated': 'Condition: Check if the beacon has been activated. Returns True if the beacon is activated, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: Generate behavior tree for a robot to locate and activate a beacon in a specific area of the environment.Output only the XML behavior tree without extra text.
7.// OUTPUT:
<BehaviorTree><Sequence><Selector><Condition>is_beacon_available</Condition><Selector><Condition>is_beacon_activated</Condition><Action>find_beacon</Action></Selector><Action>activate_beacon</Action></Selector></Sequence></BehaviorTree>
###
4.// INSTRUCTIONS: Use only the following behaviors {'pick_up_item': 'Action: Pick up an item from the ground. Returns True if successful, False if no item is found or the inventory is full.', 'drop_item': 'Action: Drop an item from the inventory. Returns True if successful, False if the inventory is empty.', 'is_inventory_full': 'Condition: Check if the inventory is full. Returns True if the inventory is full, False otherwise.', 'is_item_nearby': 'Condition: Check for items nearby. Returns True if an item is detected within 10 units, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Gather as many items from the area and drop them off at the designated location.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_inventory_full</Condition><Action>drop_item</Action></Sequence><Selector><Sequence><Condition>is_item_nearby</Condition><Action>pick_up_item</Action></Sequence><Action>wander</Action></Selector></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'search_forest': 'Action: Search for lost hikers in the forest area. Returns True if successful, False otherwise.', 'rescue_hiker': 'Action: Rescue the lost hiker. Returns True if successful, False otherwise.', 'find_shortest_path': 'Function: Calculates the shortest path to the lost hiker. Returns a list of coordinates of the path.', 'is_hiker_found': 'Condition: Check if the lost hiker has been found. Returns True if hiker is found, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Use swarm robots to search for and rescue lost hikers in the forest.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>search_forest</Action><Function>find_shortest_path</Function><Action>rescue_hiker</Action></Sequence><Action>wander</Action></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'gather_stone': 'Action: Pick up stones from the ground and deposit them in the designated area. Returns True if successful, False if no stones are found.', 'is_resource_depleted': 'Condition: Check if the stone resource has been depleted. Returns True if no more stones are available, False otherwise.', 'is_designated_area_full': 'Condition: Check if the designated area is full of stones. Returns True if the designated area is full, False otherwise.', 'fulfill_goal': 'Action: Signal goal completion by freezing movement. Always returns True.', 'change_direction': 'Action: Change the direction of movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Use swarm robots to gather stones and deposit them in the designated area until it is full.
6.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>is_resource_depleted</Condition><Action>change_direction</Action></Sequence><Action>gather_stone</Action></Selector><Selector><Sequence><Condition>is_designated_area_full</Condition><Action>change_direction</Action></Sequence><Action>fulfill_goal</Action></Selector></Sequence></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'find_shortest_path': 'Function: Calculates the shortest path to the target destination. Returns a list of coordinates of the path.', 'move_to_next_waypoint': 'Action: Move the robot to the next waypoint in the calculated path. Returns True if successful, False if there is an obstacle in the way or the end point has been reached.', 'detect_enemy': 'Action: Scan for enemy robots in the surrounding area. Returns True if enemies are detected, False otherwise.', 'attack': 'Action: Attack enemies. Returns True if successful, False if no enemies are present or the attack failed.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: Use swarm robots to navigate through a maze, detect and attack enemies along the way.
7.// OUTPUT:
<BehaviorTree><Selector><Sequence><Function>find_shortest_path</Function><Action>move_to_next_waypoint</Action></Sequence><Selector><Action>detect_enemy</Action><Action>attack</Action></Selector></Selector></BehaviorTree>3.// INSTRUCTIONS: Use only the following behaviors {'move_to_target': "Action: Move towards the target object. Always returns True.", 'is_blocked': 'Condition: Check if path to target is blocked. Returns True if path is blocked, False otherwise.', 'is_object_in_view': 'Condition: Check if the target object is in the robot's view. Returns True if object is in view, False otherwise.', 'is_target_reached': 'Condition: Check if the robot has reached the target object. Returns True if target is reached, False otherwise.', 'take_picture': 'Action: Take a picture of the target object. Always returns True.', 'is_picture_clear': 'Condition: Check if the picture of the target object is clear. Returns True if picture is clear, False otherwise.', 'send_picture': 'Action: Send the picture to the designated receiver. Always returns True.', 'call_for_help': 'Action: Call for backup from other robots. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3.// USER COMMAND: Locate and photograph the target object, send the picture if clear, otherwise call for help.
3.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_object_in_view</Condition><Sequence><Condition>is_target_reached</Condition><Sequence><Condition>is_picture_clear</Condition><Action>take_picture</Action><Action>send_picture</Action></Sequence></Sequence></Sequence><Sequence><Condition>is_object_in_view</Condition><Action>move_to_target</Action></Sequence><Action>call_for_help</Action></Selector></BehaviorTree>
4.// INSTRUCTIONS: Use only the following behaviors {'find_food': 'Subtree node: Represents a behavior tree for finding food.', 'eat_food': 'Action: Eat the found food. Always returns True.', 'is_hungry': 'Condition: Checks if the agent's hunger is above a specific threshold. Returns True if the agent is hungry, False otherwise.', 'is_thirsty': 'Condition: Checks if the agent's thirst is above a specific threshold. Returns True if the agent is thirsty, False otherwise.', 'drink_water': 'Action: Drink from a water source. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: If hungry and food is found, eat the food. If thirsty and water source is found, drink from it. Otherwise, keep searching for food and water.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_hungry</Condition><Sequence><Subtree>find_food</Subtree><Action>eat_food</Action></Sequence></Sequence><Sequence><Condition>is_thirsty</Condition><Sequence><Action>drink_water</Action><Subtree>find_water_source</Subtree></Sequence></Sequence><Action>find_food</Action></Selector></BehaviorTree>
5.// INSTRUCTIONS: Use only the following behaviors {'calculate_best_path': 'Subtree node: Represents a behavior tree for calculating the best path to the target location.', 'follow_path': 'Action: Follow the calculated path. Always returns True.', 'is_at_destination': "Condition: Check if the robot has reached the target location. Returns True if at destination, False otherwise.", 'is_path_blocked': 'Condition: Check if the path to the target location is blocked. Returns True if path is blocked, False otherwise.', 'detect_obstacles': 'Action: Use sensors to detect nearby obstacles. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Calculate the best path to the designated drop-off location, follow the path unless it is blocked by obstacles.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_at_destination</Condition><Action>follow_path</Action></Sequence><Sequence><Condition>is_path_blocked</Condition><Action>detect_obstacles</Action></Sequence></Selector></BehaviorTree>
6.// INSTRUCTIONS: Use only the following behaviors {'scan_area': 'Action: Use sensors to scan the surrounding area. Always returns True.', 'is_area_clear': 'Condition: Check if the surrounding area is clear. Returns True if area is clear, False otherwise.', 'is_resource_source_detected': 'Condition: Check if a resource source is detected. Returns True if resource source is detected, False otherwise.', 'collect_resource': 'Action: Collect the detected resource. Always returns True.', 'deposit_resource': 'Action: Deposit the collected resource at the designated location. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Scan the surrounding area, if resource source is detected, collect and deposit it. If area is not clear, keep scanning.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_area_clear</Condition><Action>scan_area</Action></Sequence><Sequence><Condition>is_resource_source_detected</Condition><Sequence><Action>collect_resource</Action><Action>deposit_resource</Action></Sequence></Sequence><Action>scan_area</Action></Selector></BehaviorTree>
7.// INSTRUCTIONS: Use only the following behaviors {'move_to_nest': 'Action: Move towards the nest. Always returns True.', 'arrange_in_line': 'Subtree node: Represents a behavior tree for arranging the robots in a line.', 'recharge': 'Action: Recharge the robot. Always returns True.', 'is_traveling': 'Condition: Checks if the robot is currently traveling. Returns True if traveling, False otherwise.', 'is_low_battery': 'Condition: Checks if the robot's battery level is below a specific threshold. Returns True if battery is low, False otherwise.', 'return_to_nest': 'Action: Return to the nest and recharge. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: If traveling to a location, arrange in a line before moving to the nest. If low on battery, return to the nest to recharge.
7.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_traveling</Condition><Subtree>arrange_in_line</Subtree></Sequence><Sequence><Condition>is_low_battery</Condition><Subtree>return_to_nest</Subtree></Sequence></Selector></BehaviorTree>
###
3.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3.// USER COMMAND: generate behavior tree to'Perform a sequence of actions: turn right, change color to white, continue movement, form line.' Output only the XML behavior tree without extra text.
3.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Action>turn_right</Action> <Action>change_color_to_white</Action> <Action>continue_movement_agent</Action> <Action>form_line</Action> </Sequence> <Action>agent_movement_freeze</Action> <Action>task_completed</Action> </Selector> </Sequence> </BehaviorTree>

###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'move_forward': 'Action: Move the robot one step forward in the current direction. Always returns True.', 'turn_left': 'Action: Turn the robot 90 degrees to the left. Always returns True.', 'turn_right': 'Action: Turn the robot 90 degrees to the right. Always returns True.', 'update_map': "Action: Update the robot's internal map of the environment based on its current location and sensor readings. Always returns True.", 'is_area_mapped': 'Condition: Check if the current area has already been mapped and explored. Returns: True if the area is mapped, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to'Explore environment and update map until entire area is mapped.' Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>is_area_mapped</Condition><Action>turn_right</Action><Action>update_map</Action></Sequence><Sequence><Condition>is_area_mapped</Condition><Action>turn_left</Action><Action>update_map</Action></Sequence><Action>move_forward</Action><Action>update_map</Action></Selector></Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to'Move towards target while changing color to green. If target is reached, signal task completion.'Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>is_target_reached</Condition><Action>change_color_to_green</Action></Sequence><Sequence><Condition>is_target_detected</Condition><Action>change_color_to_green</Action><Action>continue_movement_agent</Action></Sequence></Selector><Sequence><Condition>is_target_reached</Condition><Action>agent_movement_freeze</Action><Action>task_completed</Action></Sequence></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'move_forward': 'Action: Move the robot one step forward in the current direction. Always returns True.', 'turn_left': 'Action: Turn the robot 90 degrees to the left. Always returns True.', 'turn_right': 'Action: Turn the robot 90 degrees to the right. Always returns True.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to'Explore environment by moving forward and turning randomly until completion.'Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Action>move_forward</Action><Action>turn_right</Action></Sequence><Sequence><Action>move_forward</Action><Action>turn_left</Action></Sequence></Selector><Action>task_completed</Action></Sequence></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 
###
4. // INSTRUCTIONS: Use only the following behaviors {'goto_location': "Action: Moves agent to specific location. Returns True when location is reached.", 'move_forward': "Action: Moves agent forward. Always returns True.", 'move_backward': "Action: Moves agent backward. Always returns True.", 'turn_left': "Action: Rotates agent to the left. Always returns True.", 'turn_right': "Action: Rotates agent to the right. Always returns True.", 'move_randomly': "Action: Moves agent in a random direction. Always returns True.", 'is_location_reached': "Condition: Checks if agent has reached a specific location. Returns True if the agent is at the specified location, False otherwise.", 'is_obstacle_detected': "Condition: Checks for obstacles nearby. Returns True if an obstacle is detected, False otherwise.", 'is_target_visible': "Condition: Checks if target is in agent's line of sight. Returns True if target is visible, False otherwise.", 'task_completed': "Action: Signals task completion by freezing movement. Always returns True."}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4. // USER COMMAND: construct a behavior tree to 'find and reach specific location, avoiding obstacles' Output only the XML behavior tree without extra text.
4. // OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_location_reached</Condition><Action>move_randomly</Action></Sequence><Action>turn_left</Action></Selector></BehaviorTree>

###
5. // INSTRUCTIONS: Use only the following behaviors {'wait': "Action: Agent waits for a specific amount of time before continuing. Returns True when time is up.", 'randomly_fire': "Action: Fires weapon randomly. Always returns True.", 'reload': "Action: Reloads weapon. Always returns True.", 'is_ammo_low': "Condition: Checks if ammo is below a specific threshold. Returns True if ammo is low, False otherwise.", 'is_enemy_detected': "Condition: Checks if an enemy is detected. Returns True if an enemy is detected, False otherwise.", 'is_obstacle_detected': "Condition: Checks for obstacles nearby. Returns True if an obstacle is detected, False otherwise.", 'is_safe_to_proceed': "Condition: Checks if the agent is in a safe area. Returns True if the area is safe, False otherwise.", 'task_completed': "Action: Signals task completion by freezing movement. Always returns True."}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5. // USER COMMAND: construct a behavior tree to 'Wait for enemy, then randomly fire and reload when safe to proceed'. Output only the XML behavior tree without extra text.
5. // OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_enemy_detected</Condition><Sequence><Action>wait</Action><Action>randomly_fire</Action><Action>reload</Action></Sequence></Sequence><Condition>is_safe_to_proceed</Condition></Selector></BehaviorTree>

###
6. // INSTRUCTIONS: Use only the following behaviors {'detect_object': "Subtree node: Represents a behavior tree for object detection.", 'collect_object': "Subtree node: Represents a behavior tree for object collection.", 'drop_object': "Subtree node: Represents a behavior tree for dropping objects.", 'move_towards_object': "Action: Moves agent towards detected object. Returns True when agent reaches the object.", 'move_randomly': "Action: Moves agent in a random direction. Always returns True.", 'move_to_nest': "Action: Moves agent towards the nest. Returns True when agent reaches the nest.", 'is_object_detected': "Condition: Checks if an object is detected within a specific range. Returns True if an object is detected, False otherwise.", 'is_object_near_nest': "Condition: Checks if the agent is near the nest. Returns True if the agent is near the nest, False otherwise.", 'task_completed': "Action: Signals task completion by freezing movement. Always returns True."}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6. // USER COMMAND: construct a behavior tree to 'detect and collect objects, and return them to the nest'. Output only the XML behavior tree without extra text.
6. // OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_object_detected</Condition><Sequence><Action>detect_object</Action><Action>move_towards_object</Action></Sequence></Sequence><Sequence><Condition>is_object_near_nest</Condition><Sequence><Action>move_to_nest</Action><Action>collect_object</Action><Action>drop_object</Action></Sequence></Sequence></Selector></BehaviorTree>

###
7. // INSTRUCTIONS: Use only the following behaviors {'target_acquired': "Action: Signals that the target has been acquired. Always returns True.", 'patrol': "Subtree node: Represents a behavior tree for patrolling specific points.", 'interrogate': "Subtree node: Represents a behavior tree for interrogating suspects.", 'capture': "Subtree node: Represents a behavior tree for capturing suspects.", 'move_to_location': "Action: Moves to a specific location. Returns True when location is reached.", 'is_suspect_detected': "Condition: Checks if a suspect is detected within a specific range. Returns True if a suspect is detected, False otherwise.", 'is_target_lost': "Condition: Checks if the target has been lost. Returns True if the target has been lost, False otherwise.", 'is_suspect_found': "Condition: Checks if the suspect has been found. Returns True if the suspect has been found, False otherwise.", 'is_location_reached': "Condition: Checks if the agent has reached a specific location. Returns True if the agent is at the specified location, Falseotherwise."}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7. // USER COMMAND: construct a behavior tree to 'Patrol designated points, interrogate suspects, and capture them if target is detected'. Output only the XML behavior tree without extra text.
7. // OUTPUT:
<BehaviorTree><Selector><Sequence><Action>patrol</Action><Condition>is_suspect_detected</Condition><Sequence><Action>interrogate</Action><Sequence><Condition>is_suspect_found</Condition><Sequence><Action>capture</Action><Condition>is_target_lost</Condition></Sequence></Sequence></Sequence><Sequence><Action>move_to_location</Action><Condition>is_location_reached</Condition></Sequence><Action>target_acquired</Action></Selector></BehaviorTree>
###
4.// INSTRUCTIONS: Use only the following behaviors {'wait': 'Action: Do nothing for a set amount of time. Always returns True.', 'move_to_location': 'Action: Move the robot to a specific location in the environment. Always returns True.', 'pick_up_object': 'Action: Pick up an object at the robot's current location. Returns True if an object is successfully picked up, False otherwise.', 'drop_object': 'Action: Drop the held object at the robot's current location. Returns True if an object is successfully dropped, False otherwise.', 'is_object_detected': 'Condition: Check if an object is detected at the robot's current location. Returns True if an object is detected, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Generate behavior tree for a robot to search for and pick up a specific object in the environment.
4.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>is_object_detected</Condition><Action>pick_up_object</Action><Action>wait</Action></Sequence><Sequence><Action>move_to_location</Action><Condition>is_object_detected</Condition><Action>pick_up_object</Action></Sequence></Selector><Action>drop_object</Action></Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'start_charge': 'Action: Begin charging the robot's battery. Returns True if charging is started, False otherwise.', 'stop_charge': 'Action: Stop charging the robot's battery. Returns True if charging is stopped, False otherwise.', 'is_battery_low': 'Condition: Check if the robot's battery is below 20%. Returns True if battery is low, False otherwise.', 'navigate_to_charging_station': 'Action: Move the robot to the nearest charging station. Returns True if successfully reached the charging station, False otherwise.', 'detect_obstacle': 'Condition: Check for obstacles in the robot's immediate surroundings. Returns True if an obstacle is detected, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Generate behavior tree for a robot to autonomously manage its battery and navigate to a charging station when needed.Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_battery_low</Condition><Selector><Sequence><Action>start_charge</Action><Condition>is_battery_low</Condition><Action>stop_charge</Action></Sequence><Sequence><Condition>detect_obstacle</Condition><Action>move_to_location</Action><Action>navigate_to_charging_station</Action></Sequence></Selector></Sequence></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'move_to_target': 'Action: Move the robot towards a specified target location in the environment. Returns True if successfully reached the target, False otherwise.', 'check_surroundings': 'Action: Use sensors to scan the surroundings and update the robot's knowledge of the environment. Always returns True.', 'process_data': 'Action: Process the data collected from sensor readings. Always returns True.', 'is_obstacle_present': 'Condition: Check if any obstacles are present in the robot's immediate surroundings. Returns True if an obstacle is detected, False otherwise.', 'is_target_reached': 'Condition: Check if the robot has reached the specified target location. Returns True if target is reached, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Generate behavior tree for a robot to navigate to a target location in the environment while avoiding obstacles and updating its knowledge of the surroundings.
6.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_obstacle_present</Condition><Selector><Sequence><Action>move_to_target</Action><Action>check_surroundings</Action></Sequence><Sequence><Action>process_data</Action><Condition>is_obstacle_present</Condition><Action>move_around_obstacle</Action></Sequence></Selector><Action>check_surroundings</Action></Sequence></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'change_speed': 'Action: Adjust the robot's movement speed. Returns True if speed is successfully changed, False otherwise.', 'update_path': 'Action: Update the path for the robot to follow based on current location and target location. Always returns True.', 'move_to_path': 'Action: Move the robot along the designated path. Returns True if successfully reached the end of the path, False otherwise.', 'is_target_reached': 'Condition: Check if the robot has reached the designated target location. Returns True if target is reached, False otherwise.', 'is_path_valid': 'Condition: Check if the designated path is still valid and free of obstacles. Returns False if obstacles are detected along the path.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: Generate behavior tree for a robot to continuously update and follow an obstacle-free path towards a target location in the environment.
7.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Action>update_path</Action><Condition>is_path_valid</Condition><Action>move_to_path</Action></Sequence><Sequence><Condition>is_target_reached</Condition><Action>change_speed</Action><Action>update_path</Action></Sequence></Selector><Action>change_speed</Action><Action>update_path</Action><Action>move_to_path</Action></Sequence></BehaviorTree> 
###
4.// INSTRUCTIONS: Use only the following behaviors {'detect_flame': 'Condition: Check if a flame is detected in the environment. Returns True if a flame is detected, False otherwise.', 'extinguish_flame': 'Action: Use water to extinguish the detected flame. Always returns True.', 'move_to_next_room': 'Action: Move to the next room in search of flames. Always returns True.', 'refill_water': 'Action: Refill water supply for extinguishing flames. Always returns True.', 'is_room_completed': 'Condition: Check if the current room has been fully searched for flames. Returns True if the room is completed, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Generate behavior tree for a robot to search and extinguish flames in a building
4.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_room_completed</Condition><Selector><Sequence><Action>move_to_next_room</Action><Selector><Condition>detect_flame</Condition><Action>extinguish_flame</Action></Selector></Sequence><Selector><Condition>detect_flame</Condition><Action>call_for_back-up</Action></Selector></Sequence></Selector></Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'detect_pollution': 'Condition: Check if pollution is detected in the environment. Returns True if pollution is detected, False otherwise.', 'collect_trash': 'Action: Use a vacuum to collect any trash or debris. Always returns True.', 'filter_water': 'Action: Use a filter to purify polluted water. Always returns True.', 'move_to_next_location': 'Action: Move to the next location to continue pollution clean-up. Always returns True.', 'is_area_clean': 'Condition: Check if the current area has been fully cleaned. Returns True if the area is clean, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Generate behavior tree for a swarm of robots to clean up pollution in a lake
5.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_area_clean</Condition><Selector><Sequence><Action>move_to_next_location</Action><Selector><Condition>detect_pollution</Condition><Action>collect_trash</Action></Selector><Selector><Condition>detect_pollution</Condition><Action>filter_water</Action></Selector></Sequence><Selector><Condition>detect_pollution</Condition><Action>call_for_back-up</Action></Selector></Selection></Sequence></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'send_signal': 'Action: Send a signal to nearby robots to coordinate actions. Always returns True.', 'move_in_formation': 'Action: Move in a specific formation with other robots. Always returns True.', 'scan_for_obstacles': 'Action: Use sensors to scan for any obstacles in the path. Always returns True.', 'avoid_collision': 'Action: Adjust movement to avoid collisions with other robots. Always returns True.', 'is_formation_reached': 'Condition: Check if the specified formation has been reached. Returns True if the formation is reached, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Generate behavior tree for a swarm of robots to move in a specific formation while avoiding collisions
6.// OUTPUT:
<BehaviorTree><Selector><Condition>is_formation_reached</Condition><Sequence><Action>send_signal</Action><Action>move_in_formation</Action></Sequence><Sequence><Action>scan_for_obstacles</Action><Selector><Sequence><Condition>detect_obstacle</Condition><Action>avoid_collision</Action><Action>move_randomly</Action></Sequence><Action>continue_movement</Action></Sequence></Selector></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'explore_environment': 'Action: Use sensors to explore and map the environment. Always returns True.', 'create_detailed_map': 'Action: Use mapping data to create a detailed map of the environment. Always returns True.', 'detect_anomaly': 'Condition: Check if an anomaly or unusual feature is detected in the environment. Returns True if an anomaly is detected, False otherwise.', 'adjust_mapping_algorithm': 'Action: Modify mapping algorithm based on detected anomalies. Always returns True.', 'is_exploration_complete': 'Condition: Check if the entire environment has been fully explored and mapped. Returns True if the exploration is complete, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: Generate behavior tree for a swarm of robots to explore and map a new environment
7.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_exploration_complete</Condition><Selector><Sequence><Action>explore_environment</Action><Selector><Sequence><Condition>detect_anomaly</Condition><Action>adjust_mapping_algorithm</Action></Sequence></Selector><Action>create_detailed_map</Action></Sequence><Action>call_for_back-up</Action></Selector></Sequence></BehaviorTree>

###