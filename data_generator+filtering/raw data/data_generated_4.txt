
###

USER COMMAND: Create a behavior tree for a robot to navigate through a maze while picking up coins along the way and avoiding obstacles.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: navigate_maze: Subtree node (see attached for structure). pick_up_coins: Action node (see attached for structure). avoid_obstacle: Action node (see attached for structure).
OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Action>navigate_maze</Action> <Action>pick_up_coins</Action> <Action>avoid_obstacle</Action> </Sequence> </Selector> </BehaviorTree>


###

USER COMMAND: For a team of robots, coordinate actions to select a leader, designate a meeting point, and move towards the point while avoiding collisions.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: select_leader: Action node (see attached for structure). designate_meeting_point: Action node (see attached for structure). move_to_meeting_point: Subtree node (see attached for structure). avoid_collisions: Action node (see attached for structure).
OUTPUT:
<BehaviorTree> <Sequence> <Action>select_leader</Action> <Action>designate_meeting_point</Action> <Action>move_to_meeting_point</Action> <Action>avoid_collisions</Action> </Sequence> </BehaviorTree>


###

USER COMMAND: In a competitive swarm robotics scenario, have robots capture a designated "flag" while maintaining a formation and avoiding collisions.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: select_flag: Action node (see attached for structure). maintain_formation: Action node (see attached for structure). move_towards_flag: Subtree node (see attached for structure). avoid_collisions: Action node (see attached for structure).
OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Action>select_flag</Action> <Action>maintain_formation</Action> <Action>move_towards_flag</Action> </Sequence> <Action>avoid_collisions</Action> </Selector> </BehaviorTree>


###

USER COMMAND: generate behavior tree to 'Perform a coordinated movement as a group, avoiding obstacles and reaching the target together.'Output only the XML behavior tree without extra text.
INSTRUCTIONS: {'agent_movement_freeze': 'Action node: Freeze the agent’s movement, typically to indicate a stop in activity or end of tasks. Returns: Always returns True, indicating the action was executed.', 'avoid_obstacle': 'Action node: Execute an action to avoid detected obstacles. Returns: Always returns True, indicating the action was executed.', 'change_color_to_green': 'Action node: Change the agent’s color to green, usually indicating a successful operation or state. Returns: Always returns True, indicating the action was executed.', 'change_color_to_white': 'Action node: Change the agent’s color to white, usually indicating a neutral or initial state. Returns: Always returns True, indicating the action was executed.', 'continue_movement_agent': 'Action node: Continue the agent’s movement after it has been previously frozen. Returns: Always returns True, indicating the action was executed.', 'form_line': 'Action node: Direct the agent to form a line towards the center of the window. This function adjusts the agent’s position to align it with the center. Returns: Always returns True, indicating the action was executed.', 'is_agent_in_nest': 'Condition node: Determine if the agent is in the nest. Returns: True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition node: Determine if the agent has formed a line with a reference point at the center of the window. Returns: True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition node: Determine if any obstacles are detected in the vicinity of the agent. Returns: True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition node: Check if the path ahead of the agent is clear of obstacles. Returns: True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Action node: Check if the target is within a detectable distance from the agent’s position. Returns: True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition node: Check if the agent has reached the target. Returns: True if the target is close enough, False otherwise.', 'task_completed': 'Action node: Signal that the agent has completed its designated task by freezing movement and updating state. Returns: Always returns True, indicating that the task completion action was executed.', 'rotate_to_next_direction': 'Action node: Rotate the agent to face the next designated direction. Returns: Always returns True, indicating the action was executed.', 'swarm_movement': 'Action node: Coordinate the movement of the swarm robots towards a target destination. Returns: True when all robots have reached the target destination, False otherwise.'}
OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>is_agent_in_nest</Condition><Action>change_color_to_white</Action></Sequence><Action>swarm_movement</Action></Selector><Selector><Sequence><Condition>is_obstacle_detected</Condition><Action>avoid_obstacle</Action></Sequence><Sequence><Condition>is_target_reached</Condition><Action>rotate_to_next_direction</Action></Sequence></Selector><Sequence><Condition>is_line_formed</Condition><Action>change_color_to_green</Action><Action>form_line</Action></Sequence></Sequence></BehaviorTree>



###

USER COMMAND: generate behavior tree to 'Check for repairs and perform maintenance tasks in a structured and organized manner, while communicating with other robots.'Output only the XML behavior tree without extra text.
INSTRUCTIONS: {'agent_movement_freeze': 'Action node: Freeze the agent’s movement, typically to indicate a stop in activity or end of tasks. Returns: Always returns True, indicating the action was executed.', 'change_color_to_red': 'Action node: Change the agent’s color to red, usually indicating a malfunction or need for maintenance. Returns: Always returns True, indicating the action was executed.', 'change_color_to_green': 'Action node: Change the agent’s color to green, usually indicating a successful operation or state. Returns: Always returns True, indicating the action was executed.', 'check_for_repairs': 'Action node: Check for any necessary repairs or maintenance tasks. Returns: True if repairs are needed, False otherwise.', 'communicate_with_others': 'Action node: Communicate with other robots to coordinate repairs and maintenance tasks. Returns: Always returns True, indicating the action was executed.', 'move_to_repairs_area': 'Action node: Move the agent to the designated repairs area. Returns: True when the agent has reached the repairs area, False otherwise.', 'perform_maintenance': 'Action node: Perform the necessary maintenance tasks. Returns: True when all tasks are completed, False if any task fails.', 'return_to_original_position': 'Action node: Return the agent to its original position after completing repairs. Returns: True when the agent has returned to its original position, False otherwise.', 'wander': 'Action node: Perform a wandering action where the agent moves randomly within the environment. Returns: Always returns True, indicating the action was executed.'}
OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>check_for_repairs</Condition><Action>change_color_to_red</Action></Sequence><Action>communicate_with_others</Action></Selector><Selector><Sequence><Condition>is_agent_in_nest</Condition><Action>change_color_to_green</Action></Sequence><Sequence><Condition>is_agent_moved_to_repairs_area</Condition><Action>perform_maintenance</Action></Sequence><Sequence><Condition>is_maintenance_completed</Condition><Action>return_to_original_position</Action></Sequence></Selector></Sequence></BehaviorTree>



###

USER COMMAND: generate behavior tree to 'Search for and gather resources in the environment, while avoiding obstacles and staying in formation with other robots.'Output only the XML behavior tree without extra text.
INSTRUCTIONS: {'agent_movement_freeze': 'Action node: Freeze the agent’s movement, typically to indicate a stop in activity or end of tasks. Returns: Always returns True, indicating the action was executed.', 'avoid_obstacle': 'Action node: Execute an action to avoid detected obstacles. Returns: Always returns True, indicating the action was executed.', 'change_color_to_green': 'Action node: Change the agent’s color to green, usually indicating a successful operation or state. Returns: Always returns True, indicating the action was executed.', 'change_color_to_white': 'Action node: Change the agent’s color to white, usually indicating a neutral or initial state. Returns: Always returns True, indicating the action was executed.', 'collect_resource': 

###

USER COMMAND: Navigate a maze and reach the end goal by following a specific set of instructions.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: navigate_maze: Action node - Uses solving algorithms to navigate through the maze. move_forward, turn_left, turn_right: Action nodes (same as before). check_path: Condition node - Checks if the current path is a dead end. reached_goal: Condition node - Checks if the agent has reached the end goal.
OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>check_path</Condition><Action>turn_left</Action></Sequence><Sequence><Condition>check_path</Condition><Action>turn_right</Action></Sequence></Selector><Sequence><Action>move_forward</Action><Selector><Sequence><Condition>reached_goal</Condition></Sequence><Action>navigate_maze</Action></Sequence></Sequence></BehaviorTree>



###

USER COMMAND: Coordinate with other robots to collect resources and deliver them to a designated storage location.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: coordinate_with_others: Action node - Uses communication and coordination algorithms to work with other robots. collect_resource: Action node - Enables the agent to collect resources in the environment. deliver_resource: Action node - Enables the agent to deliver resources to a designated storage location. is_resource_needed: Condition node - Checks if resources are needed at the designated storage location.
OUTPUT:
<BehaviorTree><Selector><Sequence><Action>coordinate_with_others</Action><Selector><Sequence><Condition>is_resource_needed</Condition><Action>collect_resource</Action><Action>deliver_resource</Action></Sequence></Selector></Sequence></Selector></BehaviorTree>



###

USER COMMAND: Work together with other robots to build a structure using different materials.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: coordinate_with_others: Action node - Uses communication and coordination algorithms to work with other robots. gather_material: Action node - Enables the agent to gather materials needed for building. construct_structure: Action node - Enables the agent to use the materials to build the structure. is_structure_complete: Condition node - Checks if the structure is complete and no longer needs materials.
OUTPUT:
<BehaviorTree><Selector><Sequence><Action>coordinate_with_others</Action><Selector><Sequence><Condition>is_structure_complete</Condition><Action>construct_structure</Action></Sequence><Sequence><Action>gather_material</Action><Action>construct_structure</Action></Sequence></Selector></Sequence></Selector></BehaviorTree>


###

USER COMMAND: Pick up an object, move to a specific location, and drop the object.
INSTRUCTIONS: {'agent_movement_freeze': 'Action node: Freeze the agent’s movement, typically to indicate a stop in activity or end of tasks. Returns: Always returns True, indicating the action was executed.', 'avoid_obstacle': 'Action node: Execute an action to avoid detected obstacles. Returns: Always returns True, indicating the action was executed.', 'change_color_to_green': 'Action node: Change the agent’s color to green, usually indicating a successful operation or state. Returns: Always returns True, indicating the action was executed.', 'change_color_to_white': 'Action node: Change the agent’s color to white, usually indicating a neutral or initial state. Returns: Always returns True, indicating the action was executed.', 'continue_movement_agent': 'Action node: Continue the agent’s movement after it has been previously frozen. Returns: Always returns True, indicating the action was executed.', 'drop_object': 'Action node: Drop the object that the agent is holding. Returns: Always returns True, indicating the action was executed.', 'find_object': 'Action node: Look for a specific object in the environment. Returns: True if the object is found, False otherwise.', 'grab_object': 'Action node: Pick up and hold onto an object found in the environment. Returns: Always returns True, indicating the action was executed.', 'is_agent_in_nest': 'Condition node: Determine if the agent is in the nest. Returns: True if the agent is in the nest, False otherwise.', 'is_object_grabbed': 'Condition node: Check if the agent is currently holding an object. Returns: True if the agent is holding an object, False otherwise.', 'is_object_nearby': 'Condition node: Check if the specified object is within a detectable distance from the agent’s position. Returns: True if the object is within 10 units of distance, False otherwise.', 'move_to_location': 'Action node: Move the agent to a specific location in the environment. Returns: Always returns True, indicating the action was executed.'}
OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>is_object_nearby</Condition> <Action>change_color_to_green</Action> <Action>grab_object</Action> </Sequence> <Action>find_object</Action> </Selector> <Selector> <Sequence> <Condition>is_agent_in_nest</Condition> <Action>change_color_to_white</Action> <Action>drop_object</Action> </Sequence> <Action>move_to_location</Action> </Selector> </Sequence> </BehaviorTree>



###

USER COMMAND: Patrol a designated area, avoid obstacles, and interact with any detected objects.
INSTRUCTIONS: {'patrol_area': 'Action node: Patrol the designated area by moving in a specific pattern. Returns: Always returns True, indicating the action was executed.', 'avoid_obstacle': 'Action node: Execute an action to avoid detected obstacles. Returns: Always returns True, indicating the action was executed.', 'change_color_to_green': 'Action node: Change the agent’s color to green, usually indicating a successful operation or state. Returns: Always returns True, indicating the action was executed.', 'change_color_to_white': 'Action node: Change the agent’s color to white, usually indicating a neutral or initial state. Returns: Always returns True, indicating the action was executed.', 'interact_with_object': 'Action node: Interact with any detected objects in the environment. Returns: True if the object can be successfully interacted with, False otherwise.', 'is_agent_in_nest': 'Condition node: Determine if the agent is in the nest. Returns: True if the agent is in the nest, False otherwise.', 'is_object_detected': 'Condition node: Check if any objects are detected in the vicinity of the agent. Returns: True if an object is detected, False otherwise.', 'is_obstacle_detected': 'Condition node: Determine if any obstacles are detected in the vicinity of the agent. Returns: True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition node: Check if the path ahead of the agent is clear of obstacles. Returns: True if no obstacles are detected ahead, False if obstacles are present.', 'next_patrol_point': 'Action node: Move to the next designated patrol point in the area. Returns: Always returns True, indicating the action was executed.'}
OUTPUT:
<BehaviorTree> <Sequence> <Action>patrol_area</Action> <Selector> <Sequence> <Condition>is_obstacle_detected</Condition> <Action>change_color_to_green</Action> <Action>avoid_obstacle</Action> </Sequence> <Action>next_patrol_point</Action> </Selector> <Selector> <Sequence> <Condition>is_object_detected</Condition> <Action>change_color_to_white</Action> <Action>interact_with_object</Action> </Sequence> <Action>next_patrol_point</Action> </Selector> </Sequence> </BehaviorTree>



###

USER COMMAND: Swarm communication and cooperation - agents collaborate to reach a common goal.
INSTRUCTIONS: {'communicate': 'Action node: Send or receive information to/from other agents. Returns: Always returns True, indicating the action was executed.', 'change_color_to_green': 'Action node: Change the agent’s color to green, usually indicating a successful operation or state. Returns: Always returns True, indicating the action was executed.', 'change_color_to_white': 'Action node: Change the agent’s color to white, usually indicating a neutral or initial state. Returns: Always returns True, indicating the action was executed.', 'is_goal_reached': 'Condition node: Determine if the common goal has been reached by the swarm. Returns: True if the goal is reached, False otherwise.', 'is_message_received': 'Condition node: Check if a message has been received from another agent. Returns: True if a message is received, False otherwise.', 'is_onsite': 'Condition node: Check if the agent has reached its designated location for collaboration. Returns: True if the location is reached, False otherwise.', 'move_to_location': 'Action node: Move the agent to a designated location for collaboration. Returns: Always returns True, indicating the action was executed.', 'send_message': 'Action node: Send a message to another agent. Returns: Always returns True, indicating the action was executed.'}
ML BEHAVIOR TREE OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>is_goal_reached</Condition> <Action>change_color_to_white</Action> <Action>move_to_location</Action> </Sequence> <Selector> < 

###

USER COMMAND: generate behavior tree to 'Visit three points, changing color to green after each visit and then freeze movement.'Output only the XML behavior tree without extra text.
INSTRUCTIONS: {'agent_movement_freeze': 'Action node: Freeze the agent’s movement, typically to indicate a stop in activity or end of tasks. Returns: Always returns True, indicating the action was executed.', 'avoid_obstacle': 'Action node: Execute an action to avoid detected obstacles. Returns: Always returns True, indicating the action was executed.', 'change_color_to_green': 'Action node: Change the agent’s color to green, usually indicating a successful operation or state. Returns: Always returns True, indicating the action was executed.', 'change_color_to_white': 'Action node: Change the agent’s color to white, usually indicating a neutral or initial state. Returns: Always returns True, indicating the action was executed.', 'continue_movement_agent': 'Action node: Continue the agent’s movement after it has been previously frozen. Returns: Always returns True, indicating the action was executed.', 'form_line': 'Action node: Direct the agent to form a line towards the center of the window. This function adjusts the agent’s position to align it with the center. Returns: Always returns True, indicating the action was executed.', 'is_agent_in_nest': 'Condition node: Determine if the agent is in the nest. Returns: True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition node: Determine if the agent has formed a line with a reference point at the center of the window. Returns: True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition node: Determine if any obstacles are detected in the vicinity of the agent. Returns: True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition node: Check if the path ahead of the agent is clear of obstacles. Returns: True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Action node: Check if the target is within a detectable distance from the agent’s position. Returns: True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition node: Check if the agent has reached the target. Returns: True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action node: Signal that the agent has completed its designated task by freezing movement and updating state. Returns: Always returns True, indicating that the task completion action was executed.', 'wander': 'Action node: Perform a wandering action where the agent moves randomly within the environment. Returns: Always returns True, indicating the action was executed.'}
OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>is_target_reached</Condition> <Action>change_color_to_green</Action> <Action>agent_movement_freeze</Action> <Action>task_completed</Action> </Sequence> <Selector> <Sequence> <Condition>is_target_reached</Condition> <Action>change_color_to_green</Action> <Action>task_completed</Action> </Sequence> <Selector> <Sequence> <Condition>is_target_reached</Condition> <Action>change_color_to_green</Action> <Action>task_completed</Action> </Sequence> <Action>free_movement_agent</Action> </Selector> </Sequence> </BehaviorTree>



###

USER COMMAND: generate behavior tree to 'Complete a maze, avoiding obstacles, and reaching the goal.Output only the XML behavior tree without extra text.
INSTRUCTIONS: {'agent_movement_freeze': 'Action node: Freeze the agent’s movement, typically to indicate a stop in activity or end of tasks. Returns: Always returns True, indicating the action was executed.', 'avoid_obstacle': 'Action node: Execute an action to avoid detected obstacles. Returns: Always returns True, indicating the action was executed.', 'change_color_to_green': 'Action node: Change the agent’s color to green, usually indicating a successful operation or state. Returns: Always returns True, indicating the action was executed.', 'change_color_to_white': 'Action node: Change the agent’s color to white, usually indicating a neutral or initial state. Returns: Always returns True, indicating the action was executed.', 'continue_movement_agent': 'Action node: Continue the agent’s movement after it has been previously frozen. Returns: Always returns True, indicating the action was executed.', 'form_line': 'Action node: Direct the agent to form a line towards the center of the window. This function adjusts the agent’s position to align it with the center. Returns: Always returns True, indicating the action was executed.', 'is_agent_in_nest': 'Condition node: Determine if the agent is in the nest. Returns: True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition node: Determine if the agent has formed a line with a reference point at the center of the window. Returns: True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition node: Determine if any obstacles are detected in the vicinity of the agent. Returns: True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition node: Check if the path ahead of the agent is clear of obstacles. Returns: True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Action node: Check if the target is within a detectable distance from the agent’s position. Returns: True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition node: Check if the agent has reached the target. Returns: True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action node: Signal that the agent has completed its designated task by freezing movement and updating state. Returns: Always returns True, indicating that the task completion action was executed.', 'wander': 'Action node: Perform a wandering action where the agent moves randomly within the environment. Returns: Always returns True, indicating the action was executed.'}
OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>is_path_clear</Condition> <Action>continue_movement_agent</Action> </Sequence> <Action>avoid_obstacle</Action> </Selector> <Selector> <Sequence> <Condition>is_target_detected</Condition> <Action>change_color_to_green</Action> <Action>agent_movement_freeze</Action> <Action>task_completed</Action> </Sequence> <Action>wander</Action> </Selector> </Sequence> </BehaviorTree>



###

USER COMMAND: generate behavior tree to 'Collect all resources, managing load capacity and avoiding

###

USER COMMAND: Search and destroy enemy targets. Prioritize attacking targets within a specific distance. If no targets are within range, move towards nearest target.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: search_destroy: Subtree node - Represents a behavior tree for searching and attacking enemy targets. within_distance: Condition node - Checks if an enemy target is within a specific distance. attack: Action node - Attacks an enemy target. move_towards: Action node - Moves towards a specified target. nearest_target: Subtree node - Represents a behavior tree for finding the nearest enemy target.
OUTPUT:
<BehaviorTree><Sequence><Action>search_destroy</Action><Sequence><Condition>within_distance</Condition><Action>attack</Action><Selector><Sequence><Condition>within_distance</Condition><Action>move_towards</Action></Sequence><Action>nearest_target</Action></Selector></Sequence></Sequence></BehaviorTree>



###

USER COMMAND: Coordinate actions with other robots to gather resources and bring them back to the base. If resources run low, prioritize retrieving more resources before returning to base.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: gather_resources: Subtree node - Represents a behavior tree for coordinating with other robots to gather resources. return_to_base: Action node - Brings resources back to the base. prioritize_resources: Condition node - Checks if resource levels are low and adjusts actions accordingly.
OUTPUT:
<BehaviorTree><Sequence><Action>gather_resources</Action><Selector><Sequence><Condition>prioritize_resources</Condition><Action>gather_resources</Action></Sequence><Action>return_to_base</Action></Selector></Sequence></BehaviorTree>



###

USER COMMAND: Navigate through an obstacle course and reach the end point. If unable to reach the end, find an alternative path.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: navigate_course: Subtree node - Represents a behavior tree for navigating through an obstacle course. reach_end: Action node - Reaches the end point of the course. alternative_path: Subtree node - Represents a behavior tree for finding an alternative path if unable to reach the end.
OUTPUT:
<BehaviorTree><Selector><Sequence><Action>navigate_course</Action><Condition>reach_end</Condition></Sequence><Action>alternative_path</Action></Selector></BehaviorTree>


###

USER COMMAND: generate behavior tree to 'Explore the environment and avoid obstacles along the way, then return to the nest and change color to white.' Output only the XML behavior tree without extra text.
INSTRUCTIONS: {'agent_movement_freeze': 'Action node: Freeze the agent’s movement, typically to indicate a stop in activity or end of tasks. Returns: Always returns True, indicating the action was executed.', 'avoid_obstacle': 'Action node: Execute an action to avoid detected obstacles. Returns: Always returns True, indicating the action was executed.', 'change_color_to_green': 'Action node: Change the agent’s color to green, usually indicating a successful operation or state. Returns: Always returns True, indicating the action was executed.', 'change_color_to_white': 'Action node: Change the agent’s color to white, usually indicating a neutral or initial state. Returns: Always returns True, indicating the action was executed.', 'continue_movement_agent': 'Action node: Continue the agent’s movement after it has been previously frozen. Returns: Always returns True, indicating the action was executed.', 'form_line': 'Action node: Direct the agent to form a line towards the center of the window. This function adjusts the agent’s position to align it with the center. Returns: Always returns True, indicating the action was executed.', 'is_agent_in_nest': 'Condition node: Determine if the agent is in the nest. Returns: True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition node: Determine if the agent has formed a line with a reference point at the center of the window. Returns: True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition node: Determine if any obstacles are detected in the vicinity of the agent. Returns: True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition node: Check if the path ahead of the agent is clear of obstacles. Returns: True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Action node: Check if the target is within a detectable distance from the agent’s position. Returns: True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition node: Check if the agent has reached the target. Returns: True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action node: Signal that the agent has completed its designated task by freezing movement and updating state. Returns: Always returns True, indicating that the task completion action was executed.', 'wander': 'Action node: Perform a wandering action where the agent moves randomly within the environment. Returns: Always returns True, indicating the action was executed.'}
OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Action>avoid_obstacle</Action> <Action>wander</Action> </Sequence> <Sequence> <Action>form_line</Action> <Action>task_completed</Action> </Sequence> </Selector> <Selector> <Sequence> <Condition>is_agent_in_nest</Condition> <Action>change_color_to_white</Action> </Sequence> <Sequence> <Action>wander</Action> </Sequence> </Selector> </Sequence> </BehaviorTree>



###

USER COMMAND: generate behavior tree to 'Gather resources, avoid danger, and communicate with other robots, then return to the nest and perform maintenance.' Output only the XML behavior tree without extra text.
INSTRUCTIONS: {'agent_movement_freeze': 'Action node: Freeze the agent’s movement, typically to indicate a stop in activity or end of tasks. Returns: Always returns True, indicating the action was executed.', 'avoid_obstacle': 'Action node: Execute an action to avoid detected obstacles. Returns: Always returns True, indicating the action was executed.', 'change_color_to_green': 'Action node: Change the agent’s color to green, usually indicating a successful operation or state. Returns: Always returns True, indicating the action was executed.', 'change_color_to_white': 'Action node: Change the agent’s color to white, usually indicating a neutral or initial state. Returns: Always returns True, indicating the action was executed.', 'continue_movement_agent': 'Action node: Continue the agent’s movement after it has been previously frozen. Returns: Always returns True, indicating the action was executed.', 'form_line': 'Action node: Direct the agent to form a line towards the center of the window. This function adjusts the agent’s position to align it with the center. Returns: Always returns True, indicating the action was executed.', 'is_agent_in_nest': 'Condition node: Determine if the agent is in the nest. Returns: True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition node: Determine if the agent has formed a line with a reference point at the center of the window. Returns: True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition node: Determine if any obstacles are detected in the vicinity of the agent. Returns: True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition node: Check if the path ahead of the agent is clear of obstacles. Returns: True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Action node: Check if the target is within a detectable distance from the agent’s position. Returns: True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition node: Check if the agent has reached the target. Returns: True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action node: Signal that the agent has completed its designated task by freezing movement and updating state. Returns: Always returns True, indicating that the task completion action was executed.', 'wander': 'Action node: Perform a wandering action where the agent moves randomly within the environment. Returns: Always returns True, indicating the action was executed.'}
OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Action>avoid_obstacle</Action> <Action>is_target_detected</Action> <Action>change_color_to_green</Action> <Action>task_completed</Action> </Sequence> <Sequence> <Action>communicate</Action> <Action>task_completed</Action> </Sequence> </Selector> <Selector> <Sequence> <Condition>is_agent_in_nest</Condition> <Action>perform_maintenance</Action> <Action>task_completed</Action> </Sequence> </Selector> </BehaviorTree>



###

USER COMMAND: generate behavior tree to 'Search for missing members of the swarm, 

###

USER COMMAND: Coordinate a swarm of robots to explore a new environment
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: explore_area: Action node - Instructs a single robot to explore the current area. mark_explored: Action node - Marks the current area as explored so other robots know not to revisit it. are_all_explored: Condition node - Checks if all areas in the environment have been explored. regroup: Action node - Commands all robots to come together and regroup.
OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>are_all_explored</Condition><Action>regroup</Action></Sequence><Sequence><Action>explore_area</Action><Action>mark_explored</Action></Sequence></Selector></Sequence></BehaviorTree>



###

USER COMMAND: Guard and protect an important object while also patrolling the area for potential threats.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: guard_object: Subtree node - Represents a behavior tree for guarding a specific object. protect_object: Subtree node - Represents a behavior tree for protecting a specific object. patrol_area: Action node - Instructs the robot to patrol the designated area. detect_threat: Condition node - Checks the surrounding area for any potential threats.
OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Action>guard_object</Action></Sequence><Action>patrol_area</Action><Selector><Sequence><Condition>detect_threat</Condition><Action>protect_object</Action></Sequence></Selector></Sequence></BehaviorTree>



###

USER COMMAND: Navigate through a maze while collecting resources and avoiding obstacles.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: navigate_maze: Subtree node - Represents a behavior tree for navigating through a maze. collect_resource: Action node - Instructs the robot to collect a nearby resource. avoid_obstacles: Subtree node - Represents a behavior tree for avoiding obstacles in the robot's path. is_obstacle_detected: Condition node - Checks if an obstacle is detected in the current path.
OUTPUT:
<BehaviorTree><Sequence><Action>navigate_maze</Action><Selector><Sequence><Condition>is_obstacle_detected</Condition><Action>avoid_obstacles</Action></Sequence><Action>collect_resource</Action></Selector></Sequence></BehaviorTree>

###

USER COMMAND: generate behavior tree to 'Follow the leader until reaching a designated location'
INSTRUCTIONS: Use the following behaviors to construct an XML behavior tree for the given command: {'follow_leader': 'Action node: Move towards the leader’s position with a distance threshold of 5 units.
Returns: True if the leader is within 5 units, False otherwise.', 'leader_reached_destination': 'Condition node: Check if the leader has reached the designated destination.
Returns: True if the leader has reached the destination, False otherwise.', 'move_to_destination': 'Action node: Move towards the designated destination using the shortest path.
Returns: True if the robot successfully reached the destination, False otherwise.'}
OUTPUT:
<BehaviorTree><Sequence><Condition>leader_reached_destination</Condition><Action>move_to_destination</Action><Action>follow_leader</Action></Sequence></BehaviorTree>



###

USER COMMAND: generate behavior tree for a swarm of robots to gather resources and bring them back to the nest
INSTRUCTIONS: Use the following behaviors to construct an XML behavior tree for the given command: {'is_resource_available': 'Condition node: Check if a resource is available within the vicinity.
Returns: True if a resource is detected, False otherwise.', 'collect_resource': 'Action node: Collect the resource from the environment and attach it to the robot.
Returns: True if the resource was successfully collected, False otherwise.', 'return_to_nest': 'Action node: Move towards the nest while carrying a resource.
Returns: True if the robot successfully reached the nest, False otherwise.', 'drop_resource': 'Action node: Detach the resource from the robot and place it at the nest.
Returns: True if the resource was successfully dropped, False otherwise.'}
OUTPUT:
<BehaviorTree><Sequence><Selector><Action>collect_resource</Action><Condition>is_resource_available</Condition></Selector><Action>return_to_nest</Action><Action>drop_resource</Action></Sequence></BehaviorTree>



###

USER COMMAND: generate behavior tree for a robot to navigate through obstacles
INSTRUCTIONS: Use the following behaviors to construct an XML behavior tree for the given command: {'detect_obstacle': 'Condition node: Check if an obstacle is detected within a certain distance from the robot.
Returns: True if an obstacle is detected, False otherwise.', 'avoid_obstacle': 'Action node: Move away from the detected obstacle to avoid collision.
Returns: True if the robot successfully avoids the obstacle, False otherwise.', 'follow_path': 'Action node: Follow the pre-defined path towards the designated destination.
Returns: True if the robot successfully reaches the destination, False otherwise.'}
OUTPUT:
<BehaviorTree><Sequence><Condition>detect_obstacle</Condition><Action>avoid_obstacle</Action></Sequence><Action>follow_path</Action></BehaviorTree>


###

USER COMMAND: Gather resources from a source, transport them to a designated storage area, and deposit them.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: gather_resources: Subtree node (same as before). transport_resources: Subtree node (same as before). check_storage_area: Condition node (checks if storage area is available). move_to_storage: Action node (moves robot to designated storage area). deposit_resources: Action node (deposits resources at designated storage area).
OUTPUT:
<BehaviorTree><Sequence><Action>gather_resources</Action><Selector><Sequence><Action>transport_resources</Action><Sequence><Condition>check_storage_area</Condition><Action>move_to_storage</Action></Sequence></Sequence><Action>deposit_resources</Action></Selector></Sequence></BehaviorTree>



###

USER COMMAND: Complete a set of tasks in a specific order while avoiding obstacles and potential hazards.
INSTRUCTIONS: Use a mix of Sequence and Selector nodes to handle different paths and decision points. Include conditions to check for obstacles and hazards, and actions to complete specific tasks. Be sure to use specific behaviors relevant to the given tasks. Generate an XML Behavior tree based on the user command.
OUTPUT:
<BehaviorTree><Sequence><Sequence><Condition>check_for_obstacles</Condition><Selector><Sequence><Action>collect_sample</Action><Sequence><Condition>is_sample_collected</Condition><Action>analyze_sample</Action></Sequence><Action>transmit_data</Action></Selector></Sequence></Sequence></BehaviorTree>



###

USER COMMAND: Coordinate with other robots in the swarm to complete a complex task that requires teamwork and communication.
INSTRUCTIONS: Tailor the tasks and scenarios to the context of swarm robotics, ensuring that the behavior tree reflects the collective actions and coordination of multiple robots. Use a mix of Sequence and Selector nodes to handle different paths and decision points. Include conditions to check for the status of other robots, and actions to communicate and collaborate with them. Generate an XML Behavior tree based on the user command.
OUTPUT:
<BehaviorTree><Sequence><Action>move_to_object</Action><Sequence><Condition>check_for_hazards</Condition><Selector><Sequence><Action>communicate_with_swarm</Action><Sequence><Condition>are_other_robots_ready</Condition><Action>coordinate_movements</Action></Sequence></Sequence></Selector></Sequence><Action>transport_object</Action></Sequence></BehaviorTree>


###

USER COMMAND: generate behavior tree to collect resources and bring them back to the base while avoiding obstacles and enemy attacks
INSTRUCTIONS: Use the following behaviors to construct an XML behavior tree: {'move_forward': 'Action node: Move the agent one step forward in the current direction.
Returns: True if the agent can move forward, False otherwise.', 'turn_left': 'Action node: Turn the agent 90 degrees to the left.
Returns: Always returns True.', 'turn_right': 'Action node: Turn the agent 90 degrees to the right.
Returns: Always returns True.', 'collect_resource': 'Action node: Collect a resource from the environment.
Returns: True if a resource was successfully collected, False otherwise.', 'return_to_base': 'Action node: Return to the base with collected resources.
Returns: True if the agent successfully reached the base, False otherwise.', 'avoid_obstacle': 'Action node: Take evasive action to avoid detected obstacles.
Returns: True if the agent successfully avoided the obstacle, False otherwise.', 'is_resource_available': 'Condition node: Check if there is a resource available in the current location.
Returns: True if a resource is available, False otherwise.', 'is_resource_carrying_limit_reached': 'Condition node: Check if the agent has reached its carrying limit for resources.
Returns: True if the limit is reached, False otherwise.', 'is_obstacle_detected': 'Condition node: Check if any obstacles are detected in the vicinity of the agent.
Returns: True if an obstacle is detected, False otherwise.', 'is_enemy_detected': 'Condition node: Check if any enemy agents are detected in the vicinity of the agent.
Returns: True if an enemy is detected, False otherwise.', 'was_successful_attack': 'Condition node: Check if the agent successfully defended against an enemy attack.
Returns: True if the attack was successfully defended against, False otherwise.'}
OUTPUT:
<BehaviorTree><Sequence><Selector><Condition>is_resource_carrying_limit_reached</Condition><Action>return_to_base</Action></Selector><Sequence><Condition>is_obstacle_detected</Condition><Action>avoid_obstacle</Action></Sequence><Sequence><Condition>is_enemy_detected</Condition><Condition>was_successful_attack</Condition><Selector><Action>turn_left</Action><Action>turn_right</Action></Selector></Sequence><Selector><Condition>is_resource_available</Condition><Action>collect_resource</Action></Selector><Action>move_forward</Action></Sequence></BehaviorTree>



###

USER COMMAND: generate behavior tree to coordinate search and rescue efforts during a natural disaster
INSTRUCTIONS: Use the following behaviors to construct an XML behavior tree: {'move_forward': 'Action node: Move the agent one step forward in the current direction.
Returns: True if the agent can move forward, False otherwise.', 'turn_left': 'Action node: Turn the agent 90 degrees to the left.
Returns: Always returns True.', 'turn_right': 'Action node: Turn the agent 90 degrees to the right.
Returns: Always returns True.', 'search_area': 'Action node: Search the designated area for any survivors or signs of life.
Returns: True if an area was successfully searched, False otherwise.', 'carry_survivor': 'Action node: Carry a survivor to a safe location.
Returns: True if a survivor was successfully carried, False otherwise.', 'build_shelter': 'Action node: Build a temporary shelter for survivors.
Returns: True if a shelter was successfully built, False otherwise.', 'avoid_obstacle': 'Action node: Take evasive action to avoid detected obstacles.
Returns: True if the agent successfully avoided the obstacle, False otherwise.', 'is_area_searched': 'Condition node: Check if the designated search area has been thoroughly searched.
Returns: True if the area is fully searched, False otherwise.', 'is_survivor_detected': 'Condition node: Check if any survivors are detected in the vicinity of the agent.
Returns: True if a survivor is detected, False otherwise.', 'is_carrying_survivor': 'Condition node: Check if the agent is currently carrying a survivor.
Returns: True if a survivor is being carried, False otherwise.', 'is_shelter_built': 'Condition node: Check if a shelter has been successfully built.
Returns: True if a shelter is built, False otherwise.', 'is_obstacle_detected': 'Condition node: Check if any obstacles are detected in the vicinity of the agent.
Returns: True if an obstacle is detected, False otherwise.'}
OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_shelter_built</Condition><Action>build_shelter</Action></Sequence><Sequence><Condition>is_carrying_survivor</Condition><Selector><Condition>is_obstacle_detected</Condition><Action>avoid_obstacle</Action></Selector></Sequence><Sequence><Condition>is_survivor_detected</Condition><Selector><Condition>is_carrying_survivor</Condition><Action>carry_survivor</Action><Action>move_to_safe_location</Action></Selector></Sequence></Selector></BehaviorTree>



###

USER COMMAND: generate behavior tree to coordinate the delivery of packages in a busy city environment
INSTRUCTIONS: Use the following behaviors to construct an XML behavior tree: {'move_forward': 'Action node: Move the agent one step forward in the current direction.
Returns: True if the agent can move forward, False otherwise.', 'turn_left': 'Action node: Turn the agent 90 degrees to the left.
Returns: Always returns True.', 'turn_right': 'Action node: Turn the agent 90 degrees to the right.
Returns: Always returns True.', 'deliver_package': 'Action node: Deliver a package to its designated location.
Returns: True if the package was successfully delivered, False otherwise.', 'collect_package': 'Action node: Collect a package from a pickup location.
Returns: True if a package was successfully collected, False otherwise.', 'avoid_obstacle': 'Action node: Take evasive action to avoid detected obstacles.
Returns: True if the agent successfully avoided the obstacle, False otherwise.', 'is_package_available': 'Condition node: Check if there is a package available for delivery.
Returns: True if a package is available, False otherwise.', 'is_package_collected': 'Condition node: Check if the agent is currently carrying a package.
Returns: True if a package is being carried, False otherwise.', 'is_destination_reached': 'Condition node: Check if the agent has reached its designated delivery location.
Returns: True if the destination is reached, False otherwise.', 'is_obstacle_detected': 'Condition node: Check if any obstacles are detected in the vicinity of the agent.
Returns: True if an obstacle is detected, False otherwise.'}
OUTPUT:
<BehaviorTree><Sequence><Selector><Condition>is_package_collected</Condition><Action>deliver_package</Action></Selector><Sequence><Condition 

###

USER COMMAND: generate behavior tree to 'Collect resources, avoid obstacles, and deposit resources.'Output only the XML behavior tree without extra text.
INSTRUCTIONS: {'agent_movement_freeze': 'Action node: Freeze the agent’s movement, typically to indicate a stop in activity or end of tasks. Returns: Always returns True, indicating the action was executed.', 'avoid_obstacle': 'Action node: Execute an action to avoid detected obstacles. Returns: Always returns True, indicating the action was executed.', 'change_color_to_green': 'Action node: Change the agent’s color to green, usually indicating a successful operation or state. Returns: Always returns True, indicating the action was executed.', 'change_color_to_white': 'Action node: Change the agent’s color to white, usually indicating a neutral or initial state. Returns: Always returns True, indicating the action was executed.', 'continue_movement_agent': 'Action node: Continue the agent’s movement after it has been previously frozen. Returns: Always returns True, indicating the action was executed.', 'form_line': 'Action node: Direct the agent to form a line towards the center of the window. This function adjusts the agent’s position to align it with the center. Returns: Always returns True, indicating the action was executed.', 'is_agent_in_nest': 'Condition node: Determine if the agent is in the nest. Returns: True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition node: Determine if the agent has formed a line with a reference point at the center of the window. Returns: True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition node: Determine if any obstacles are detected in the vicinity of the agent. Returns: True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition node: Check if the path ahead of the agent is clear of obstacles. Returns: True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Action node: Check if the target is within a detectable distance from the agent’s position. Returns: True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition node: Check if the agent has reached the target. Returns: True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action node: Signal that the agent has completed its designated task by freezing movement and updating state. Returns: Always returns True, indicating that the task completion action was executed.', 'wander': 'Action node: Perform a wandering action where the agent moves randomly within the environment. Returns: Always returns True, indicating the action was executed.'}
OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>is_agent_in_nest</Condition> <Action>continue_movement_agent</Action> <Action>agent_movement_freeze</Action> </Sequence> <Sequence> <Condition>is_target_reached</Condition> <Action>form_line</Action> <Action>change_color_to_green</Action> <Action>task_completed</Action> </Sequence> <Sequence> <Condition>is_target_detected</Condition> <Condition>is_path_clear</Condition> <Action>change_color_to_white</Action> <Action>avoid_obstacle</Action> <Action>wander</Action> </Sequence> </Selector> </Sequence> </BehaviorTree>



###

USER COMMAND: generate behavior tree to 'Search for a lost swarm member, form a group, and return to the nest.'Output only the XML behavior tree without extra text.
INSTRUCTIONS: {'agent_movement_freeze': 'Action node: Freeze the agent’s movement, typically to indicate a stop in activity or end of tasks. Returns: Always returns True, indicating the action was executed.', 'avoid_obstacle': 'Action node: Execute an action to avoid detected obstacles. Returns: Always returns True, indicating the action was executed.', 'change_color_to_green': 'Action node: Change the agent’s color to green, usually indicating a successful operation or state. Returns: Always returns True, indicating the action was executed.', 'change_color_to_white': 'Action node: Change the agent’s color to white, usually indicating a neutral or initial state. Returns: Always returns True, indicating the action was executed.', 'continue_movement_agent': 'Action node: Continue the agent’s movement after it has been previously frozen. Returns: Always returns True, indicating the action was executed.', 'form_line': 'Action node: Direct the agent to form a line towards the center of the window. This function adjusts the agent’s position to align it with the center. Returns: Always returns True, indicating the action was executed.', 'is_agent_in_nest': 'Condition node: Determine if the agent is in the nest. Returns: True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition node: Determine if the agent has formed a line with a reference point at the center of the window. Returns: True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition node: Determine if any obstacles are detected in the vicinity of the agent. Returns: True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition node: Check if the path ahead of the agent is clear of obstacles. Returns: True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Action node: Check if the target is within a detectable distance from the agent’s position. Returns: True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition node: Check if the agent has reached the target. Returns: True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action node: Signal that the agent has completed its designated task by freezing movement and updating state. Returns: Always returns True, indicating that the task completion action was executed.', 'wander': 'Action node: Perform a wandering action where the agent moves randomly within the environment. Returns: Always returns True, indicating the action was executed.'}
OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>is_agent_in_nest</Condition> <Action>change_color_to_green</Action> <Action>form_line</Action> <Action>task_completed</Action> </Sequence> <Sequence> <Condition>is_line_formed</Condition> <Condition>is_agent_in_nest</Condition> <Action>task_completed</Action> <Action>form_line</Action> <Action>change_color_to_white</Action> </Sequence> <Sequence> <Condition>is_target_detected</Condition> <Condition>is_path_clear</Condition> <Action>avoid
###


USER COMMAND: Coordinate with other robots to create a formation and move as a single unit
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: form_formation: Action node: Move into a pre-defined formation with other robots. Returns: True if formation is successful, False otherwise. follow_leader: Action node: Follow the leader robot in the formation. Returns: True if successfully following, False otherwise. maintain_distance: Action node: Maintain a certain distance from leader robot. Returns: True if maintaining distance, False otherwise. check_formation_complete: Condition node: Check if formation is complete. Returns: True if formation is complete, False otherwise.
OUTPUT:
<BehaviorTree><Sequence><Action>form_formation(V)</Action><Selector><Sequence><Action>follow_leader</Action><Action>maintain_distance</Action></Sequence><Condition>check_formation_complete</Condition></Selector></Sequence></BehaviorTree>



###

USER COMMAND: Perform a complicated task that requires multiple robots to work together.
INSTRUCTIONS: Use a mix of the following behaviors to generate an XML Behavior tree based on the user command: find_teammates: Action node: Use sensors to locate other robots. Returns: True if teammates are found, False otherwise. assign_tasks: Action node: Assign specific tasks to each robot based on their capabilities. Returns: True if tasks are successfully assigned, False otherwise. coordinate_actions: Action node: Coordinate and synchronize actions between robots. Returns: True if actions are successfully coordinated, False otherwise. check_task_complete: Condition node: Check if the assigned task is completed by the robot. Returns: True if task is completed, False otherwise.
OUTPUT:
<BehaviorTree><Sequence><Action>find_teammates</Action><Selector><Action>assign_tasks</Action><Selector><Sequence><Action>coordinate_actions</Action><Condition>check_task_complete</Condition></Sequence></Selector></Selector></Sequence></BehaviorTree>



###

USER COMMAND: Explore an unknown environment while avoiding obstacles and staying within a designated boundary.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: explore_area: Action node: Move around and explore the environment using sensors. Returns: True if successfully exploring, False otherwise. avoid_obstacles: Action node: Use sensors to detect and maneuver around obstacles. Returns: True if successfully avoiding obstacles, False otherwise. stay_within_boundary: Action node: Use sensors to stay within the designated boundary. Returns: True if successfully staying within the boundary, False otherwise. is_boundary_reached: Condition node: Check if the robot has reached the designated boundary. Returns: True if boundary is reached, False otherwise.
OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_boundary_reached</Condition><Sequence><Action>stay_within_boundary</Action><Selector><Sequence><Action>explore_area</Action><Action>avoid_obstacles</Action></Sequence></Selector></Sequence></Selector></BehaviorTree>

###

USER COMMAND: generate behavior tree to 'Coordinate with other robots to form a grid pattern while avoiding obstacles.' Output only the XML behavior tree without extra text.
INSTRUCTIONS: {'agent_movement_freeze': 'Action node: Freeze the agent’s movement, typically to indicate a stop in activity or end of tasks. Returns: Always returns True, indicating the action was executed.', 'avoid_obstacle': 'Action node: Execute an action to avoid detected obstacles. Returns: Always returns True, indicating the action was executed.', 'change_color_to_green': 'Action node: Change the agent’s color to green, usually indicating a successful operation or state. Returns: Always returns True, indicating the action was executed.', 'change_color_to_white': 'Action node: Change the agent’s color to white, usually indicating a neutral or initial state. Returns: Always returns True, indicating the action was executed.', 'continue_movement_agent': 'Action node: Continue the agent’s movement after it has been previously frozen. Returns: Always returns True, indicating the action was executed.', 'form_grid_pattern': 'Action node: Coordinate with other robots to form a grid pattern in the environment. Returns: Always returns True, indicating the action was executed.', 'is_agent_in_nest': 'Condition node: Determine if the agent is in the nest. Returns: True if the agent is in the nest, False otherwise.', 'is_grid_pattern_formed': 'Condition node: Determine if the grid pattern has been successfully formed. Returns: True if the pattern is formed, False otherwise.', 'is_obstacle_detected': 'Condition node: Determine if any obstacles are detected in the vicinity of the agent. Returns: True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition node: Check if the path ahead of the agent is clear of obstacles. Returns: True if no obstacles are detected ahead, False if obstacles are present.'}
OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>is_grid_pattern_formed</Condition> <Action>change_color_to_green</Action> <Action>agent_movement_freeze</Action> </Sequence> <Action>form_grid_pattern</Action> </Selector> <Action>avoid_obstacle</Action> </Sequence> </BehaviorTree>


###

USER COMMAND: generate behavior tree to 'Catch the invading robot and disable it while protecting the home base.'Output only the XML behavior tree without extra text.
INSTRUCTIONS: {'agent_movement_freeze': 'Action node: Freeze the agent’s movement, typically to indicate a stop in activity or end of tasks. Returns: Always returns True, indicating the action was executed.', 'catch_invading_robot': 'Action node: Catch and disable the invading robot. Returns: Always returns True, indicating the action was executed.', 'change_color_to_red': 'Action node: Change the agent’s color to red, typically indicating a danger or threat. Returns: Always returns True, indicating the action was executed.', 'protect_home_base': 'Action node: Protect the home base from any invasions or threats. Returns: Always returns True, indicating the action was executed.', 'is_invader_detected': 'Condition node: Determine if any invading robots are detected within a certain range. Returns: True if an invader is detected, False otherwise.', 'is_base_threatened': 'Condition node: Check if the home base is currently under threat or attack. Returns: True if the base is under threat, False otherwise.'}
OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>is_invader_detected</Condition> <Action>catch_invading_robot</Action> <Action>change_color_to_red</Action> </Sequence> <Action>protect_home_base</Action> </Selector> <Sequence> <Condition>is_base_threatened</Condition> <Action>change_color_to_red</Action> <Action>agent_movement_freeze</Action> </Sequence> </Sequence> </BehaviorTree>


###

USER COMMAND: generate behavior tree to 'Collaborate with other robots to efficiently gather resources and store them in the designated location.'Output only the XML behavior tree without extra text.
INSTRUCTIONS: {'agent_movement_freeze': 'Action node: Freeze the agent’s movement, typically to indicate a stop in activity or end of tasks. Returns: Always returns True, indicating the action was executed.', 'collaborate_with_other_robots': 'Action node: Collaborate with other robots in the area to efficiently gather resources and store them in the designated location. Returns: Always returns True, indicating the action was executed.', 'gather_resources': 'Action node: Gather resources from the environment. Returns: True if resources are successfully gathered, False otherwise.', 'store_resources': 'Action node: Store gathered resources in the designated location. Returns: Always returns True, indicating the action was executed.', 'is_resource_available': 'Condition node: Determine if there are any resources available in the environment. Returns: True if there are resources present, False otherwise.', 'is_storage_full': 'Condition node: Check if the designated storage location is full. Returns: True if the storage is full, False otherwise.'}
OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>is_resource_available</Condition> <Action>gather_resources</Action> </Sequence> <Action>collaborate_with_other_robots</Action> </Selector> <Sequence> <Condition>is_storage_full</Condition> <Action>store_resources</Action> <Action>agent_movement_freeze</Action> </Sequence> </Sequence> </BehaviorTree>


###

USER COMMAND: Navigate through a maze to reach the end goal, avoiding obstacles along the way.
INSTRUCTIONS: Using the following behaviors, construct a behavior tree in XML format to guide the robot through the maze: {'move_forward': 'Action node: Move the robot forward by one unit.
Returns: True if the movement was successful, False if there was an obstacle in the way.', 'turn_left': 'Action node: Turn the robot to the left by 90 degrees.
Returns: Always returns True.', 'turn_right': 'Action node: Turn the robot to the right by 90 degrees.
Returns: Always returns True.', 'is_obstacle_present': 'Condition node: Check if there is an obstacle directly in front of the robot.
Returns: True if an obstacle is present, False otherwise.', 'is_goal_reached': 'Condition node: Check if the robot has reached the end goal.
Returns: True if the goal is reached, False otherwise.'}
OUTPUT:
<BehaviorTree><Sequence><Condition>is_goal_reached</Condition><Selector><Sequence><Condition>is_obstacle_present</Condition><Selector><Action>turn_right</Action><Action>turn_left</Action></Selector></Sequence><Action>move_forward</Action></Selector></Sequence></BehaviourTree>


###

USER COMMAND: Assemble a structure using multiple swarm robots, each with a specific task in the assembly process.
INSTRUCTIONS: Use the following behaviors to create a behavior tree in XML format for the swarm robots to assemble a structure: {'move_to_location': 'Action node: Move the robot to the specified location.
Returns: True if the movement was successful, False otherwise.', 'rotate_part': 'Action node: Rotate the designated part in a specified direction.
Returns: True if the rotation was successful, False otherwise.', 'attach_part': 'Action node: Attach the designated part to the structure.
Returns: True if the attachment was successful, False otherwise.', 'is_part_attached': 'Condition node: Check if the designated part has been successfully attached to the structure.
Returns: True if the part is attached, False otherwise.', 'is_structure_complete': 'Condition node: Check if the entire structure has been assembled.
Returns: True if the structure is complete, False otherwise.'}
OUTPUT:
<BehaviorTree><Sequence><Condition>is_structure_complete</Condition><Selector><Sequence><Condition>is_part_attached</Condition><Action>rotate_part</Action><Action>attach_part</Action></Sequence><Action>move_to_location</Action></Selector></Sequence></BehaviourTree>


###

USER COMMAND: Clean a room with multiple swarm robots, each with a specific task in the cleaning process.
INSTRUCTIONS: Use the following behaviors to construct a behavior tree in XML format for the cleaning process: {'move_to_location': 'Action node: Move the robot to the specified location.
Returns: True if the movement was successful, False otherwise.', 'suck_up_dirt': 'Action node: Use a suction device to remove dirt from the specified location.
Returns: True if the dirt was successfully removed, False otherwise.', 'replace_cleaning_solution': 'Action node: Replace the cleaning solution in the robot's container.
Returns: Always returns True.', 'is_dirt_present': 'Condition node: Check if there is dirt present at the specified location.
Returns: True if dirt is present, False otherwise.', 'is_room_clean': 'Condition node: Check if the entire room is clean.
Returns: True if the room is clean, False otherwise.'}
OUTPUT:
<BehaviorTree><Sequence><Condition>is_room_clean</Condition><Selector><Sequence><Condition>is_dirt_present</Condition><Action>suck_up_dirt</Action><Action>replace_cleaning_solution</Action></Sequence><Action>move_to_location</Action></Selector></Sequence></BehaviourTree>

###

USER COMMAND: generate a behavior tree for a swarm of robots to coordinate and perform a complex task
INSTRUCTIONS: Include the following behaviors to generate XML behavior tree for swarm robotics: {'move_to_point': 'Action node: Move the robot to a designated point in the environment.
Returns: True if the robot reaches the point, False otherwise.', 'form_circle': 'Action node: Direct the robots to form a circle formation.
Returns: True if the robots successfully form a circle, False otherwise', 'wait_for_command': 'Condition node: Check if the robots are waiting for a command or instruction.
Returns: True if the robots are waiting, False otherwise.', 'send_message': 'Action node: Send a message to other robots in the swarm.
Returns: True if the message was successfully sent, False otherwise.', 'is_task_complete': 'Condition node: Determine if the task has been completed by the swarm.
Returns: True if the task is complete, False otherwise.', 'detect_obstacles': 'Action node: Use sensors to detect obstacles in the environment.
Returns: True if an obstacle is detected, False otherwise.'}
OUTPUT:
<BehaviorTree><Sequence><Condition>wait_for_command</Condition><Selector><Sequence><Condition>is_task_complete</Condition><Action>form_circle</Action><Action>send_message</Action></Sequence><Sequence><Action>detect_obstacles</Action><Action>move_to_point</Action></Sequence></Selector></Sequence></BehaviorTree>



###

USER COMMAND: generate a behavior tree for a robot to navigate and safely transport a fragile object to a designated location
INSTRUCTIONS: Use only the following behaviors to generate XML behavior tree for the user command: {'move_forward': 'Action node: Move the robot one step forward in the current direction.
Returns: True if the robot can move forward, False otherwise.', 'pick_up_object': 'Action node: Pick up the fragile object for transport.
Returns: True if the object is picked up successfully, False otherwise.', 'avoid_obstacle': 'Action node: Execute an action to avoid detected obstacles in the environment.
Returns: Always returns True.', 'detect_obstacles': 'Condition node: Check if there are obstacles in the environment.
Returns: True if an obstacle is detected, False otherwise.', 'is_object_picked_up': 'Condition node: Check if the fragile object has been successfully picked up.
Returns: True if the object is picked up, False otherwise.', 'transport_object': 'Action node: Safely transport the fragile object to the designated location.
Returns: True if the object is transported successfully, False otherwise.', 'is_transport_complete': 'Condition node: Check if the object has reached the designated location.
Returns: True if the object is at the designated location, False otherwise.'}
OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>detect_obstacles</Condition><Action>avoid_obstacle</Action></Sequence><Sequence><Condition>is_object_picked_up</Condition><Action>transport_object</Action></Sequence></Selector><Sequence><Action>move_forward</Action><Action>pick_up_object</Action></Sequence></Sequence></BehaviorTree>



###

USER COMMAND: generate a behavior tree for a swarm of robots to communicate and coordinate in a search and rescue mission
INSTRUCTIONS: Include the following behaviors to generate XML behavior tree for swarm search and rescue: {'move_to_point': 'Action node: Move the robot to a designated point in the environment.
Returns: True if the robot reaches the point, False otherwise.', 'idle': 'Action node: Keep the robots idle until a command or instruction is received.
Returns: Always returns True.', 'send_message': 'Action node: Send a message to other robots in the swarm to provide updates or requests.
Returns: True if the message was successfully sent, False otherwise.', 'is_message_received': 'Condition node: Check if the robots have received a message from the swarm leader.
Returns: True if a message is received, False otherwise.', 'search_area': 'Action node: Patrol and search a designated area for any signs of life or survivors.
Returns: True if the area is thoroughly searched, False otherwise.', 'return_to_base': 'Action node: Return to the designated base location.
Returns: True if the robot successfully returns to base, False otherwise.'}
OUTPUT:
<BehaviorTree><Sequence><Condition>is_message_received</Condition><Action>return_to_base</Action><Action>send_message</Action></Sequence><Selector><Sequence><Condition>search_area</Condition><Action>move_to_point</Action></Sequence><Sequence><Action>idle</Action></Sequence></Selector></BehaviorTree>

###

USER COMMAND: generate behavior tree to 'Execute a scouting pattern while avoiding obstacles, detect target, and signal completion by changing color to green.'Output only the XML behavior tree without extra text.
INSTRUCTIONS: {'agent_movement_freeze': 'Action node: Freeze the agent’s movement, typically to indicate a stop in activity or end of tasks. Returns: Always returns True, indicating the action was executed.', 'avoid_obstacle': 'Action node: Execute an action to avoid detected obstacles. Returns: Always returns True, indicating the action was executed.', 'change_color_to_green': 'Action node: Change the agent’s color to green, usually indicating a successful operation or state. Returns: Always returns True, indicating the action was executed.', 'change_color_to_white': 'Action node: Change the agent’s color to white, usually indicating a neutral or initial state. Returns: Always returns True, indicating the action was executed.', 'continue_movement_agent': 'Action node: Continue the agent’s movement after it has been previously frozen. Returns: Always returns True, indicating the action was executed.', 'form_line': 'Action node: Direct the agent to form a line towards the center of the window. This function adjusts the agent’s position to align it with the center. Returns: Always returns True, indicating the action was executed.', 'is_agent_in_nest': 'Condition node: Determine if the agent is in the nest. Returns: True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition node: Determine if the agent has formed a line with a reference point at the center of the window. Returns: True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition node: Determine if any obstacles are detected in the vicinity of the agent. Returns: True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition node: Check if the path ahead of the agent is clear of obstacles. Returns: True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Action node: Check if the target is within a detectable distance from the agent’s position. Returns: True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition node: Check if the agent has reached the target. Returns: True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action node: Signal that the agent has completed its designated task by freezing movement and updating state. Returns: Always returns True, indicating that the task completion action was executed.', 'wander': 'Action node: Perform a wandering action where the agent moves randomly within the environment. Returns: Always returns True, indicating the action was executed.'}
OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>is_obstacle_detected</Condition><Action>avoid_obstacle</Action><Action>change_color_to_white</Action></Sequence><Selector><Sequence><Condition>is_target_detected</Condition><Action>change_color_to_green</Action><Action>task_completed</Action></Sequence><Action>wander</Action></Selector></Selector></Sequence></BehaviorTree>


###

USER COMMAND: generate behavior tree to 'Avoid obstacles, search for a target, and signal completion by forming a line and changing color to green.'Output only the XML behavior tree without extra text.
INSTRUCTIONS: {'agent_movement_freeze': 'Action node: Freeze the agent’s movement, typically to indicate a stop in activity or end of tasks. Returns: Always returns True, indicating the action was executed.', 'avoid_obstacle': 'Action node: Execute an action to avoid detected obstacles. Returns: Always returns True, indicating the action was executed.', 'change_color_to_green': 'Action node: Change the agent’s color to green, usually indicating a successful operation or state. Returns: Always returns True, indicating the action was executed.', 'change_color_to_white': 'Action node: Change the agent’s color to white, usually indicating a neutral or initial state. Returns: Always returns True, indicating the action was executed.', 'continue_movement_agent': 'Action node: Continue the agent’s movement after it has been previously frozen. Returns: Always returns True, indicating the action was executed.', 'form_line': 'Action node: Direct the agent to form a line towards the center of the window. This function adjusts the agent’s position to align it with the center. Returns: Always returns True, indicating the action was executed.', 'is_agent_in_nest': 'Condition node: Determine if the agent is in the nest. Returns: True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition node: Determine if the agent has formed a line with a reference point at the center of the window. Returns: True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition node: Determine if any obstacles are detected in the vicinity of the agent. Returns: True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition node: Check if the path ahead of the agent is clear of obstacles. Returns: True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Action node: Check if the target is within a detectable distance from the agent’s position. Returns: True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition node: Check if the agent has reached the target. Returns: True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action node: Signal that the agent has completed its designated task by freezing movement and updating state. Returns: Always returns True, indicating that the task completion action was executed.', 'wander': 'Action node: Perform a wandering action where the agent moves randomly within the environment. Returns: Always returns True, indicating the action was executed.'}
OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_obstacle_detected</Condition><Action>avoid_obstacle</Action></Sequence><Selector><Sequence><Condition>is_target_detected</Condition><Action>change_color_to_green</Action><Action>form_line</Action></Sequence><Action>wander</Action></Selector></Selector></BehaviorTree>


###

USER COMMAND: generate behavior tree to 'Check for obstacles, move towards target, and signal completion by changing color to green.'Output only the XML behavior tree without extra text.
INSTRUCTIONS: {'agent_movement_freeze': 'Action node: Freeze the agent’s movement, typically to indicate a stop in activity or end of tasks. Returns: Always returns True, indicating the action was executed.', 'avoid_obstacle': 'Action node: Execute an action

###

USER COMMAND: Make a swarm of robots collectively avoid an obstacle while staying together.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: {'move_to_target': 'Action node: Move the robot towards a specific target location.
Returns: True if the robot successfully reached the target, False otherwise.', 'avoid_obstacles': 'Action node: Use sensors to detect and avoid any obstacles in the robot's path.
Returns: True if the robot was able to successfully avoid the obstacle, False otherwise.', 'stay_together': 'Action node: Use swarm algorithms to ensure that all robots stay within close proximity.
Returns: True if the swarm remains cohesive, False otherwise.'}.
OUTPUT:
<BehaviorTree><Sequence><Action>move_to_target</Action><Action>avoid_obstacles</Action></Sequence><Selector><Sequence><Action>stay_together</Action></Sequence></Selector></BehaviorTree>



###

USER COMMAND: Assemble a structure using a team of robots that have different capabilities.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: {'move_to_next_part': 'Action node: Move the robot to the next designated part of the structure.
Returns: True if the robot successfully reached the part, False otherwise.', 'pick_up_part': 'Action node: Use the robot's manipulator to pick up a designated part of the structure.
Returns: True if the part was successfully picked up, False otherwise.', 'assemble_part': 'Action node: Use the robot's manipulator to assemble the picked up part into the structure.
Returns: True if the part was successfully assembled, False otherwise.', 'is_structure_complete': 'Condition node: Check if the entire structure has been assembled.
Returns: True if the structure is complete, False otherwise.'}.
OUTPUT:
<BehaviorTree><Sequence><Condition>is_structure_complete</Condition><Sequence><Action>move_to_next_part</Action><Selector><Sequence><Action>pick_up_part</Action><Action>assemble_part</Action></Sequence><Action>mark_part_complete</Action></Selector></Sequence></Sequence></BehaviorTree>



###

USER COMMAND: Coordinate a swarm of robots to map and clean a large indoor environment.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: {'map_area': 'Action node: Use sensors to map and record the environment.
Returns: True if the mapping was successful, False otherwise.', 'clean_area': 'Action node: Use the robot's cleaning mechanism to clean any debris or dirt in the environment.
Returns: True if the area was cleaned, False otherwise.'}.
OUTPUT:
<BehaviorTree><Selector><Sequence><Action>map_area</Action><Action>clean_area</Action></Sequence></Selector></BehaviorTree>


###

USER COMMAND: generate behavior tree for a group of swarm robots to collaborate and build a structure
INSTRUCTIONS: Use only the following behaviors to generate XML Behavior tree based on the user command: {'move_to_construction_site': 'Action node: Move the robot to the designated construction site.
Returns: True if the robot successfully reached the site, False otherwise.', 'collect_building_materials': 'Action node: Collect the necessary materials for construction.
Returns: True if all materials are collected, False otherwise.', 'build_structure': 'Action node: Assemble the collected materials to construct the designated structure.
Returns: True if the structure is successfully built, False otherwise.', 'is_structure_complete': 'Condition node: Check if the designated structure is fully built.
Returns: True if the structure is complete, False otherwise.'} to construct a behavior tree in XML format for the given command.
OUTPUT:
<BehaviorTree><Sequence><Condition>is_structure_complete</Condition><Sequence><Action>move_to_construction_site</Action><Action>collect_building_materials</Action><Selector><Action>build_structure</Action><Action>return_to_construction_site</Action></Selector></Sequence></Sequence>
</BehaviorTree>



###

USER COMMAND: generate behavior tree for a swarm of robots to gather resources in a natural disaster scenario
INSTRUCTIONS: Use only the following behaviors to generate XML Behavior tree based on the user command: {'move_to_resource_site': 'Action node: Move the robot to the designated resource site.
Returns: True if the robot successfully reached the site, False otherwise.', 'search_for_resources': 'Action node: Scan the current area for any available resources.
Returns: True if resources are found, False otherwise.', 'collect_resources': 'Action node: Collect the available resources.
Returns: True if all resources are collected, False otherwise.', 'is_resource_site_empty': 'Condition node: Check if there are any resources left at the designated site.
Returns: False if resources are still available, True otherwise.'} to construct a behavior tree in XML format for the given command.
OUTPUT:
<BehaviorTree><Sequence><Condition>is_resource_site_empty</Condition><Sequence><Action>move_to_resource_site</Action><Selector><Sequence><Condition>search_for_resources</Condition><Action>collect_resources</Action></Sequence><Action>report_empty_site</Action></Selector></Sequence></Sequence>
</BehaviorTree>



###

USER COMMAND: generate behavior tree for a robot to navigate and deliver packages in a warehouse
INSTRUCTIONS: Use only the following behaviors to generate XML Behavior tree based on the user command: {'move_to_pickup_location': 'Action node: Move the robot to the designated pickup location.
Returns: True if the robot successfully reached the location, False otherwise.', 'pick_up_package': 'Action node: Pick up the designated package.
Returns: True if the package is successfully picked up, False otherwise.', 'move_to_delivery_location': 'Action node: Move the robot to the designated delivery location.
Returns: True if the robot successfully reached the location, False otherwise.', 'deliver_package': 'Action node: Deliver the designated package to the specified location.
Returns: True if the package is successfully delivered, False otherwise.', 'is_delivery_complete': 'Condition node: Check if all packages have been successfully delivered.
Returns: True if all packages have been delivered, False otherwise.'} to construct a behavior tree in XML format for the given command.
OUTPUT:
<BehaviorTree><Sequence><Condition>is_delivery_complete</Condition><Sequence><Action>move_to_pickup_location</Action><Action>pick_up_package</Action><Action>move_to_delivery_location</Action><Action>deliver_package</Action></Sequence></Sequence>
</BehaviorTree>


###

USER COMMAND: Coordinate with other robots to complete the task of building a structure using blocks - First build walls, then add a roof, and finally add finishing touches.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: form_wall: Action node - Directs the agent to form a wall by stacking blocks. is_wall_formed: Condition node - Checks if the wall is successfully formed. add_roof: Action node - Places blocks on top of the wall to create a roof. is_roof_added: Condition node - Checks if the roof is successfully added. add_details: Action node - Adds decorative details to the structure. is_details_added: Condition node - Checks if the details are successfully added. communicate: Action node - Communicates with other robots to coordinate and complete the task. 
OUTPUT:
<BehaviorTree><Sequence><Action>communicate</Action></Sequence><Selector><Sequence><Action>form_wall</Action><Selector><Sequence><Condition>is_wall_formed</Condition><Action>add_roof</Action><Selector><Sequence><Condition>is_roof_added</Condition><Action>add_details</Action><Selector><Sequence><Condition>is_details_added</Condition></Sequence></Selector></Sequence></Selector></Sequence></Selector></Sequence></BehaviorTree>



###

USER COMMAND: Survive in a hostile environment by collecting resources to build a shelter and defend against predators.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: collect_resource: Action node - Collects resources found in the environment. is_resource_collected: Condition node - Checks if a resource is successfully collected. build_shelter: Action node - Uses collected resources to build a shelter. is_shelter_built: Condition node - Checks if the shelter is successfully built. defend: Action node - Defends against predators by activating a protective mechanism. is_predator_detected: Condition node - Checks if a predator is detected in the vicinity. 
OUTPUT:
<BehaviorTree><Selector><Sequence><Action>collect_resource</Action><Selector><Sequence><Condition>is_resource_collected</Condition><Action>build_shelter</Action><Selector><Sequence><Condition>is_shelter_built</Condition><Action>defend</Action><Selector><Sequence><Condition>is_predator_detected</Condition></Sequence></Selector></Sequence></Selector></Sequence></Selector></Sequence></BehaviorTree>



###

USER COMMAND: Explore the unknown terrain and discover a hidden treasure.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: move_forward: Action node (same as before). repeatedly_scan: Action node - Continuously scans the environment for potential treasure locations. move_to_treasure: Action node - Moves towards a potential treasure location. is_treasure_detected: Condition node - Checks if a treasure is detected in the vicinity. collect_treasure: Action node - Collects the treasure once it is reached. has_treasure: Condition node - Checks if the agent is carrying the treasure. return_home: Action node - Returns home after collecting the treasure. 
OUTPUT:
<BehaviorTree><Selector><Sequence><Action>move_forward</Action></Sequence><Sequence><Action>repeatedly_scan</Action><Selector><Sequence><Condition>is_treasure_detected</Condition><Action>move_to_treasure</Action><Sequence><Condition>is_treasure_detected</Condition></Sequence></Selector><Sequence><Condition>has_treasure</Condition><Action>return_home</Action></Sequence></Sequence></Selector></Sequence></BehaviorTree>


###

USER COMMAND: Complete a delivery task by picking up a package, navigating to the drop-off location, and notifying the receiver of successful delivery.
INSTRUCTIONS: {'pick_up_package': 'Action node: Pick up the designated package. Returns: Always returns True, indicating the action was executed.', 'navigate_to_drop_off': 'Action node: Navigate the agent to the designated drop-off location. Returns: True when the agent reaches the drop-off location, False otherwise.', 'notify_receiver': 'Action node: Notify the receiver of successful delivery. Returns: Always returns True, indicating the action was executed.', 'is_package_picked_up': 'Condition node: Check if the agent has picked up the designated package. Returns: True if the package is picked up, False otherwise.', 'is_at_drop_off': 'Condition node: Check if the agent has reached the designated drop-off location. Returns: True if the agent is at the drop-off location, False otherwise.', 'is_delivery_successful': 'Condition node: Check if the receiver has confirmed successful delivery. Returns: True if the receiver confirms successful delivery, False otherwise.', 'task_completed': 'Action node: Signal that the agent has completed its designated task by freezing movement and updating state. Returns: Always returns True, indicating that the task completion action was executed.'}
OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Action>pick_up_package</Action> <Condition>is_package_picked_up</Condition> </Sequence> <Sequence> <Action>navigate_to_drop_off</Action> <Condition>is_at_drop_off</Condition> </Sequence> <Sequence> <Action>notify_receiver</Action> <Condition>is_delivery_successful</Condition> </Sequence> </Selector> <Action>task_completed</Action> </Sequence> </BehaviorTree>



###

USER COMMAND: Explore an unknown environment, gather samples, return to base, and analyze samples for signs of life.
INSTRUCTIONS: {'explore_unknown': 'Action node: Explore the designated unknown environment. Returns: True when the agent reaches the end of the exploration area, False otherwise.', 'gather_samples': 'Action node: Gather samples from the environment. Returns: True when the agent has gathered enough samples, False otherwise.', 'return_to_base': 'Action node: Navigate the agent back to the designated base. Returns: True when the agent reaches the base, False otherwise.', 'analyze_samples': 'Action node: Analyze the gathered samples for signs of life. Returns: True when the analysis is complete, False otherwise.', 'are_samples_enough': 'Condition node: Check if the agent has gathered enough samples. Returns: True if enough samples have been gathered, False otherwise.', 'is_base_reached': 'Condition node: Check if the agent has reached the designated base. Returns: True if the agent is at the base, False otherwise.', 'is_analysis_complete': 'Condition node: Check if the analysis of samples is complete. Returns: True if the analysis is complete, False otherwise.', 'task_completed': 'Action node: Signal that the agent has completed its designated task by freezing movement and updating state. Returns: Always returns True, indicating that the task completion action was executed.'}
OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Action>explore_unknown</Action> <Condition>is_base_reached</Condition> </Sequence> <Sequence> <Action>gather_samples</Action> <Condition>are_samples_enough</Condition> </Sequence> <Sequence> <Action>return_to_base</Action> <Condition>is_analysis_complete</Condition> </Sequence> <Sequence> <Action>analyze_samples</Action> <Condition>is_analysis_completed</Condition> </Sequence> </Selector> <Action>task_completed</Action> </Sequence> </BehaviorTree>



###

USER COMMAND: Search and rescue mission to find a stranded hiker in a mountainous terrain. Provide medical assistance if necessary and escort the hiker to safety.
INSTRUCTIONS: {'search_area': 'Action node: Search the designated mountainous terrain for the stranded hiker. Returns: True when the hiker is located, False otherwise.', 'provide_medical_assistance': 'Action node: Provide basic medical assistance to the hiker. Returns: True when the hiker has received medical attention, False otherwise.', 'escort_to_safety': 'Action node: Navigate the agent and the hiker to the designated evacuation point. Returns: True when the agent and the hiker reach the evacuation point, False otherwise.', 'is_hiker_found': 'Condition node: Check if the hiker has been found. Returns: True if the hiker is located, False otherwise.', 'is_medical_assistance_needed': 'Condition node: Check if the hiker requires medical assistance. Returns: True if the hiker requires medical attention, False otherwise.', 'is_safety_reached': 'Condition node: Check if the agent and the hiker have reached the designated evacuation point. Returns: True if the agent and the hiker are at the evacuation point, False otherwise.', 'task_completed': 'Action node: Signal that the agent has completed its designated task by freezing movement and updating state. Returns: Always returns True, indicating that the task completion action was executed.'}
OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Action>search_area</Action> <Condition>is_hiker_found</Condition> </Sequence> <Sequence> <Action>provide_medical_assistance</Action> <Condition>is_medical_assistance_needed</Condition> </Sequence> <Sequence> <Action>escort_to_safety</Action> <Condition>is_safety_reached</Condition> </Sequence> <Sequence> <Action>task_completed</Action> </Sequence> </Selector> </Sequence> </BehaviorTree>


###

USER COMMAND: generate behavior tree for a robot swarm to clear a debris field and return to base
INSTRUCTIONS: Use a mix of the following behaviors to generate an XML behavior tree for the given command: {'move_to_next_position': 'Action node: Move the robot to the next designated position within the debris field. Returns: True if the robot successfully moved to the next position, False otherwise.', 'collect_debris': 'Action node: Collect debris at the current position using specialized tools. Returns: True if debris is successfully collected, False otherwise.', 'check_battery_level': 'Condition node: Check the current battery level of the robot. Returns: True if the battery level is above 50%, False otherwise.', 'return_to_base': 'Action node: Return to the base station for recharging and debris disposal. Returns: Always returns True.', 'is_debris_field_cleared': 'Condition node: Check if all debris has been cleared from the designated area. Returns: True if all debris is cleared, False otherwise.'}
OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>is_debris_field_cleared</Condition><Action>return_to_base</Action></Sequence><Sequence><Action>check_battery_level</Action><Selector><Action>move_to_next_position</Action><Action>collect_debris</Action></Selector></Sequence></Selector></Sequence></BehaviorTree>



###

USER COMMAND: generate behavior tree for swarm robots to perform a coordinated dance routine
INSTRUCTIONS: Use only the following behaviors to generate an XML behavior tree for the given command: {'rotate_clockwise': 'Action node: Rotate the robot in a clockwise direction. Returns: Always returns True.', 'move_forward': 'Action node: Move the robot forward in a straight line. Returns: Always returns True.', 'change_color': 'Action node: Change the color of the robot to the specified color. Returns: Always returns True.'}
OUTPUT:
<BehaviorTree><Selector><Sequence><Action>change_color</Action><Selector><Action>rotate_clockwise</Action><Action>wait</Action></Selector></Sequence><Sequence><Action>change_color</Action><Selector><Action>move_forward</Action><Action>wait</Action></Selector></Sequence></Selector></BehaviorTree>



###

USER COMMAND: generate behavior tree for swarm robots to build a structure using blocks
INSTRUCTIONS: Use a mix of the following behaviors to generate an XML behavior tree for the given command: {'pick_up_block': 'Action node: Pick up a block from the designated area. Returns: True if a block is successfully picked up, False otherwise.', 'place_block': 'Action node: Place a block at the specified location. Returns: True if the block is successfully placed, False otherwise.', 'search_for_blocks': 'Action node: Search the surrounding area for blocks to pick up. Returns: True if one or more blocks are found, False otherwise.', 'check_build_progress': 'Condition node: Check the current progress of the structure being built. Returns: True if the structure is complete, False otherwise.', 'navigate_to_next_block': 'Action node: Move the robot to the next designated location for placing a block. Returns: True if the robot successfully moved to the next location, False otherwise.'}
OUTPUT:
<BehaviorTree><Sequence><Condition>check_build_progress</Condition><Action>search_for_blocks</Action></Sequence><Sequence><Action>pick_up_block</Action><Selector><Action>place_block</Action><Action>navigate_to_next_block</Action></Selector></Sequence></BehaviorTree>


###

USER COMMAND: generate a behavior tree for a robot to perform a complex construction task
INSTRUCTIONS: Use the following behaviors to construct an XML Behavior tree: {'move_to_next_step': 'Action node: Move the robot to the next step of the construction task.
Returns: True if the robot successfully moved to the next step, False otherwise.', 'gather_materials': 'Action node: Gather necessary materials for the current step of the construction task.
Returns: True if all materials were successfully gathered, False otherwise.', 'place_material': 'Action node: Place a specific material in the designated location for the current step of the construction task.
Returns: True if the material was successfully placed, False otherwise.', 'check_for_obstacles': 'Condition node: Check the surrounding area for any potential obstacles that may impede the construction task.
Returns: True if there are no obstacles, False if obstacles are present.', 'is_construction_complete': 'Condition node: Check if the entire construction task is complete.
Returns: True if the construction task is finished, False otherwise.'}
OUTPUT:
<BehaviorTree><Sequence><Condition>is_construction_complete</Condition><Sequence><Selector><Sequence><Condition>check_for_obstacles</Condition><Action>gather_materials</Action></Sequence><Sequence><Condition>check_for_obstacles</Condition><Action>place_material</Action><Action>move_to_next_step</Action></Sequence></Selector></Sequence></Sequence></BehaviorTree>



###

USER COMMAND: generate a behavior tree for a swarm of robots to coordinate and carry an object to a designated location
INSTRUCTIONS: Use only the following behaviors to create the XML behavior tree: {'move_to_target': 'Action node: Move the robot towards the designated target location.
Returns: True if the robot successfully reached the target, False otherwise.', 'lift_object': 'Action node: Lift the object using the robot's arms.
Returns: True if the object is lifted, False otherwise.', 'carry_object': 'Action node: Carry the lifted object towards the designated target location.
Returns: True if the object is successfully transported, False otherwise.', 'release_object': 'Action node: Safely release the object in the designated location.
Returns: True if the object was successfully released, False otherwise.', 'check_for_obstacles': 'Condition node: Check the environment for any potential obstacles that may hinder the movement.
Returns: True if there are no obstacles, False if obstacles are present.', 'is_object_lifted': 'Condition node: Check if the object is successfully lifted.
Returns: True if the object is lifted, False otherwise.', 'is_object_released': 'Condition node: Check if the object is safely released in the designated location.
Returns: True if the object is released, False otherwise.', 'is_robot_at_target': 'Condition node: Check if the robot has successfully reached the designated target location.
Returns: True if the robot is at the target, False otherwise.'}
OUTPUT:
<BehaviorTree><Sequence><Condition>is_object_released</Condition><Sequence><Selector><Sequence><Condition>is_object_lifted</Condition><Action>move_to_target</Action></Sequence><Selector><Sequence><Condition>check_for_obstacles</Condition><Action>lift_object</Action></Sequence><Sequence><Condition>check_for_obstacles</Condition><Action>carry_object</Action></Sequence></Selector></Sequence><Action>release_object</Action></Selector></Sequence></BehaviorTree>



###

USER COMMAND: generate a behavior tree to simulate a group of robots forming a formation and performing a synchronized dance
INSTRUCTIONS: Use the following behaviors to construct an XML behavior tree: {'form_formation': 'Action node: Create a formation using the designated robots in the group.
Returns: True if the formation is successfully created, False otherwise.', 'perform_dance_move': 'Action node: Each robot performs a specific dance move in synchronization with the other robots in the formation.
Returns: True if the dance move is successfully performed, False otherwise.', 'update_move_sequence': 'Action node: Update the move sequence for the next iteration of the dance.
Returns: True if the move sequence is successfully updated, False otherwise.', 'reform_formation': 'Action node: Reform the formation after each iteration of the dance.
Returns: True once the formation is successfully reformed.', 'is_dance_complete': 'Condition node: Check if the entire dance routine is complete.
Returns: True if the dance is finished, False otherwise.'}
OUTPUT:
<BehaviorTree><Sequence><Condition>is_dance_complete</Condition><Sequence><Selector><Sequence><Condition>form_formation</Condition><Action>perform_dance_move</Action></Sequence><Sequence><Condition>update_move_sequence</Condition><Action>reform_formation</Action></Sequence></Selector></Sequence></Sequence></BehaviorTree>


###

USER COMMAND: generate behavior tree for a swarm of robots to search and rescue a trapped victim in a disaster scenario
INSTRUCTIONS: Use only the following behaviors to generate XML Behavior tree for the swarm of robots in a disaster scenario: {'reach_victim': 'Action node: Move towards the location of the trapped victim.
Returns: True if the robot successfully reaches the victim, False otherwise.', 'lift_victim': 'Action node: Lift and carry the trapped victim to safety.
Returns: True if the victim was successfully lifted and carried, False otherwise.', 'clear_obstacles': 'Action node: Remove any obstacles in the path to clear the way for the robots.
Returns: True if the obstacles were successfully cleared, False otherwise.', 'assess_damage': 'Condition node: Check the severity of the damage in the environment.
Returns: True if the damage is significant, False otherwise.', 'find_exit': 'Action node: Search for the nearest exit or safe location in the environment.
Returns: True if an exit was found, False otherwise.', 'navigate_to_exit': 'Action node: Move towards the designated exit or safe location.
Returns: True if the robot successfully reaches the exit, False otherwise.', 'rescue_completed': 'Condition node: Check if all the trapped victims have been successfully rescued.
Returns: True if all victims have been rescued, False otherwise.'} to construct a behavior tree in XML format for the given command.
OUTPUT:
<BehaviorTree> <Sequence> <Condition>assess_damage</Condition> <Sequence> <Action>clear_obstacles</Action> <Selector> <Sequence> <Action>reach_victim</Action> <Action>lift_victim</Action> <Selector> <Action>find_exit</Action> <Action>navigate_to_exit</Action> </Selector> </Sequence> <Action>rescue_completed</Action> </Selector> </Sequence> </BehaviorTree>



###

USER COMMAND: generate behavior tree for a robot to autonomously explore and map an unknown environment
INSTRUCTIONS: Use only the following behaviors to generate XML Behavior tree for the exploration and mapping of an unknown environment: {'move_to_next_cell': 'Action node: Move the robot to the next unexplored cell in the environment.
Returns: True if the robot successfully moves to the next cell, False otherwise.', 'scan_environment': 'Action node: Use sensors to scan the environment and update the map.
Returns: True if the map was successfully updated, False otherwise.', 'is_obstacle_detected': 'Condition node: Check if any obstacles are detected in the current cell.
Returns: True if an obstacle is detected, False otherwise.', 'is_cell_explored': 'Condition node: Check if the current cell has been explored by the robot.
Returns: True if the cell has been explored, False otherwise.', 'is_map_complete': 'Condition node: Check if the entire map has been explored and updated.
Returns: True if the map is complete, False otherwise.'} to construct a behavior tree in XML format for the given command.
OUTPUT:
<BehaviorTree> <Selector> <Condition>is_map_complete</Condition> <Sequence> <Action>move_to_next_cell</Action> <Selector> <Action>scan_environment</Action> <Action>wait</Action> </Selector> </Sequence> </Selector> </BehaviorTree>



###

USER COMMAND: generate behavior tree for a swarm of robots to coordinate and carry out a collaborative construction task
INSTRUCTIONS: Use only the following behaviors to generate XML Behavior tree for the collaborative construction task of the swarm robots: {'collect_materials': 'Action node: Move to the designated location to collect necessary materials.
Returns: True if the materials were successfully collected, False otherwise.', 'build_structure': 'Action node: Use the collected materials to build the designated structure.
Returns: True if the structure was successfully built, False otherwise.', 'deliver_materials': 'Action node: Move to the designated robot and deliver the collected materials.
Returns: True if the materials were successfully delivered, False otherwise.', 'reach_designated_area': 'Action node: Move to the designated area to start the construction task.
Returns: True if the robot successfully reaches the designated area, False otherwise.', 'coordinate_actions': 'Action node: Coordinate with other robots to ensure efficient and coordinated actions.
Returns: True if the actions were successfully coordinated, False otherwise.', 'is_structure_complete': 'Condition node: Check if the designated structure has been completed.
Returns: True if the structure is complete, False otherwise.'} to construct a behavior tree in XML format for the given command.
OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Condition>is_structure_complete</Condition> <Action>reach_designated_area</Action> <Sequence> <Action>collect_materials</Action> <Action>deliver_materials</Action> <Action>coordinate_actions</Action> <Action>build_structure</Action> </Sequence> </Selector> </Sequence> </BehaviorTree>


###

USER COMMAND: Gather resources, then deposit them at the designated location until a certain amount is reached.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: gather_resource: Action node (same as before). deposit_resource: Action node (same as before). is_resource_full: Condition node (same as before). is_deposit_location_reached: Condition node (same as before).
OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Action>gather_resource</Action><Action>deposit_resource</Action></Sequence><Sequence><Condition>is_resource_full</Condition><Action>deposit_resource</Action></Sequence></Selector><Sequence><Condition>is_deposit_location_reached</Condition><Action>deposit_resource</Action></Sequence></Sequence></BehaviorTree>



###

USER COMMAND: Protect the queen from potential threats, while also gathering resources to bring back to the hive.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: protect_queen: Action node (same as before). gather_resource: Action node (same as before). deposit_resource: Action node (same as before). is_threat_detected: Condition node (same as before).
OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>is_threat_detected</Condition><Action>protect_queen</Action></Sequence><Sequence><Action>gather_resource</Action><Action>deposit_resource</Action></Sequence></Selector></Sequence></BehaviorTree>



###

USER COMMAND: Navigate through a maze and collect all checkpoints in a specific order.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: navigate_maze: Action node (same as before). collect_checkpoint: Action node (same as before). is_checkpoint_complete: Condition node (same as before). is_maze_complete: Condition node (same as before).
OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Action>collect_checkpoint</Action><Condition>is_checkpoint_complete</Condition><Selector><Sequence><Action>navigate_maze</Action></Sequence><Action>collect_checkpoint</Action></Selector></Sequence><Sequence><Action>navigate_maze</Action><Condition>is_maze_complete</Condition></Sequence></Selector></Sequence></BehaviorTree>


###

USER COMMAND: Coordinate with other robots to build a bridge over a gap in the terrain
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: find_bridge_location: Action node - uses sensors and communication to locate the best spot to build the bridge. request_materials: Action node - sends a signal to nearby robots asking for materials to build the bridge. build_bridge: Action node - once materials are received, use them to build the bridge. is_bridge_complete: Condition node - checks if the bridge is successfully built.
OUTPUT:
<BehaviorTree><Selector><Sequence><Action>find_bridge_location</Action><Action>request_materials</Action><Action>build_bridge</Action><Condition>is_bridge_complete</Condition></Sequence></Selector></BehaviorTree>



###

USER COMMAND: Search for and retrieve an object in a cluttered environment
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: explore_environment: Action node - uses sensors and navigation to explore the environment. locate_object: Action node - uses sensors and communication to locate the desired object. pick_up_object: Action node - once the object is located, pick it up and hold onto it. return_to_base: Action node - navigate back to the designated base location with the retrieved object. is_object_retrieved: Condition node - checks if the object has been successfully retrieved.
OUTPUT:
<BehaviorTree><Selector><Sequence><Action>explore_environment</Action><Action>locate_object</Action><Action>pick_up_object</Action><Action>return_to_base</Action></Sequence><Condition>is_object_retrieved</Condition></Selector></BehaviorTree>



###

USER COMMAND: Navigate through a maze and avoid obstacles along the way
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: navigate_maze: Action node - uses sensors and navigation to navigate through the maze. detect_obstacle: Condition node - checks for obstacles in the robot's path using sensors. choose_direction: Action node - chooses a direction to navigate based on the detected obstacle. continue_navigation: Action node - once a direction is chosen, continue navigating forward. is_maze_complete: Condition node - checks if the robot has successfully navigated through the maze.
OUTPUT:
<BehaviorTree><Selector><Sequence><Action>navigate_maze</Action><Condition>detect_obstacle</Condition><Action>choose_direction</Action><Action>continue_navigation</Action></Sequence><Condition>is_maze_complete</Condition></Selector></BehaviorTree>



###

USER COMMAND: Guide the swarm of robots to safely navigate through a hazardous environment
INSTRUCTIONS: Create a behavior tree in XML format using the following behaviors to guide the swarm of robots through a hazardous environment: {'move_forward': 'Action node: Move the robot one step forward in the current direction.
Returns: True if the robot can move forward, False otherwise.', 'turn_left': 'Action node: Turn the robot 90 degrees to the left.
Returns: Always returns True.', 'turn_right': 'Action node: Turn the robot 90 degrees to the right.
Returns: Always returns True.', 'is_obstacle_detected': 'Condition node: Scan the environment for obstacles in the current direction.
Returns: True if an obstacle is detected, False otherwise.', 'is_hazard_detected': 'Condition node: Scan the environment for hazardous elements in the current direction.
Returns: True if a hazard is detected, False otherwise.', 'avoid_obstacle': 'Action node: Make the robot perform a series of movements to avoid the obstacle in the current direction.
Returns: True if the robot successfully avoids the obstacle, False otherwise.', 'navigate_to_safety': 'Action node: Make the robot navigate to a predetermined safe location.
Returns: True if the robot reaches safety, False otherwise.'}
OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_obstacle_detected</Condition><Selector><Action>avoid_obstacle</Action></Selector></Sequence><Sequence><Condition>is_hazard_detected</Condition><Action>navigate_to_safety</Action></Sequence><Sequence><Selector><Condition>is_obstacle_detected</Condition><Selector><Action>avoid_obstacle</Action></Selector></Sequence><Sequence><Condition>is_hazard_detected</Condition><Action>navigate_to_safety</Action></Sequence></Selector></BehaviorTree>


###

USER COMMAND: Coordinate a swarm of robots to complete a complex construction task
INSTRUCTIONS: Construct a behavior tree in XML format using the given behaviors to coordinate a swarm of robots for a complex construction task: {'move_to_start': 'Action node: Move the robot to the starting point of the construction site.
Returns: True if the robot reaches the starting point, False otherwise.', 'gather_materials': 'Action node: Make the robot gather the necessary materials for the construction.
Returns: True if all materials are gathered, False otherwise.', 'build_wall': 'Action node: Make the robot construct a wall using the gathered materials.
Returns: True if the wall is successfully built, False otherwise.', 'build_roof': 'Action node: Make the robot construct a roof using the gathered materials.
Returns: True if the roof is successfully built, False otherwise.', 'is_site_complete': 'Condition node: Check if the construction site is fully completed.
Returns: True if the site is complete, False otherwise.', 'is_materials_available': 'Condition node: Check if the necessary materials for construction are available.
Returns: True if the materials are available, False otherwise.'}
OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_materials_available</Condition><Action>gather_materials</Action></Sequence><Sequence><Condition>is_materials_available</Condition><Selector><Action>build_wall</Action><Action>build_roof</Action></Selector></Sequence><Sequence><Condition>is_site_complete</Condition><Action>move_to_start</Action></Sequence></Selector></BehaviorTree>


###

USER COMMAND: Clean a designated area using a swarm of robots
INSTRUCTIONS: Use the provided behaviors to construct a behavior tree in XML format for cleaning a designated area using a swarm of robots: {'move_to_area': 'Action node: Move the robot to the designated cleaning area.
Returns: True if the robot reaches the area, False otherwise.', 'scan_area': 'Action node: Scan the area for any debris or garbage.
Returns: True if the area is scanned, False otherwise.', 'pick_up_debris': 'Action node: Make the robot pick up any debris or garbage found in the area.
Returns: True if debris is successfully picked up, False otherwise.', 'dispose_debris': 'Action node: Make the robot dispose of the debris in a designated location.
Returns: True if the debris is disposed, False otherwise.', 'is_area_cleaned': 'Condition node: Check if the designated area is clean.
Returns: True if the area is clean, False otherwise.', 'is_debris_present': 'Condition node: Check if there is any debris or garbage present in the area.
Returns: True if debris is present, False otherwise.'}
OUTPUT:
<BehaviorTree><Selector><Sequence><Action>move_to_area</Action><Action>scan_area</Action><Selector><Condition>is_debris_present</Condition><Action>pick_up_debris</Action></Selector><Selector><Condition>is_debris_present</Condition><Action>dispose_debris</Action></Selector></Sequence><Condition>is_area_cleaned</Condition><Action>move_to_area</Action></Selector></BehaviorTree>

###

USER COMMAND: generate behavior tree for a robot swarm to search and rescue a lost hiker
INSTRUCTIONS: Utilize both sequence and selector nodes to handle different paths and decision points. Use the following behaviors to generate XML Behavior tree for the given user command: {'move_to_next_waypoint': 'Action node: Move the robot to the next waypoint in the search area.
Returns: True if the robot successfully moved to the next waypoint, False otherwise.', 'scan_surroundings': 'Action node: Use sensors to scan the surroundings for any signs of the lost hiker.
Returns: True if the hiker is detected, False otherwise.', 'send_signal_to_base': 'Action node: Send a signal back to base indicating the location and status of the lost hiker.
Returns: Always returns True.', 'is_hiker_found': 'Condition node: Check if the lost hiker has been found.
Returns: True if the hiker is located, False otherwise.', 'is_area_searched': 'Condition node: Check if the entire search area has been covered.
Returns: True if the search area has been fully searched, False otherwise.', 'perform_rescue': 'Action node: Perform the necessary actions to rescue the lost hiker.
Returns: Always returns True.'}
OUTPUT:
<BehaviorTree><Selector><Condition>is_hiker_found</Condition><Sequence><Condition>is_area_searched</Condition><Selector><Action>move_to_next_waypoint</Action><Action>scan_surroundings</Action></Selector></Sequence></Selector><Action>perform_rescue</Action><Action>send_signal_to_base</Action></BehaviorTree>



###

USER COMMAND: generate behavior tree for a robot swarm to defend against a hostile takeover
INSTRUCTIONS: Utilize a mix of sequence and selector nodes to handle different paths and decision points. Use the following behaviors to generate XML Behavior tree for the given user command: {'control_access_point': 'Action node: Take control of a vulnerable access point to prevent the hostile takeover.
Returns: True if the robot successfully gained control, False otherwise.', 'scan_for_intruders': 'Action node: Use sensors to scan the surroundings for hostile intruders.
Returns: True if one or more intruders were detected, False otherwise.', 'engage_enemy': 'Action node: Engage in combat with the hostile intruders.
Returns: True if the intruders were successfully repelled, False otherwise.', 'is_all_access_points_secure': 'Condition node: Check if all vulnerable access points are secured.
Returns: True if all access points are controlled, False otherwise.', 'is_hostile_takedown_successful': 'Condition node: Check if the hostile takeover attempt has been successfully stopped.
Returns: True if the takeover has been prevented, False otherwise.', 'notify_authorities': 'Action node: Send a notification to the authorities about the hostile takeover attempt.
Returns: Always returns True.'}
OUTPUT:
<BehaviorTree><Sequence><Condition>is_all_access_points_secure</Condition><Sequence><Action>control_access_point</Action><Action>scan_for_intruders</Action></Sequence><Action>engage_enemy</Action></Sequence><Action>notify_authorities</Action><Condition>is_hostile_takedown_successful</Condition></BehaviorTree>



###

USER COMMAND: generate behavior tree for a group of swarm robots to map and collect data in an unknown environment
INSTRUCTIONS: Utilize a mix of sequence and selector nodes to handle different paths and decision points. Use the following behaviors to generate XML Behavior tree for the given user command: {'move_to_next_location': 'Action node: Move to the next designated location for data collection.
Returns: True if the robot successfully moved to the next location, False otherwise.', 'scan_environment': 'Action node: Use sensors to scan the surroundings for any relevant data.
Returns: True if data is detected, False otherwise.', 'collect_data': 'Action node: Collect the data from the current location.
Returns: True if the data was successfully collected, False otherwise.', 'is_all_data_collected': 'Condition node: Check if all designated locations have been visited and data collected.
Returns: True if all data has been collected, False otherwise.', 'process_data': 'Action node: Process the collected data for further analysis.
Returns: True if the data was successfully processed, False otherwise.'}
OUTPUT:
<BehaviorTree><Selector><Condition>is_all_data_collected</Condition><Selector><Action>move_to_next_location</Action><Action>scan_environment</Action></Selector></Selector><Action>collect_data</Action><Sequence><Action>process_data</Action><Selector><Action>wander</Action><Action>continue_movement_agent</Action></Selector></Sequence></BehaviorTree>


###

USER COMMAND: create a behavior tree for a swarm of robots to gather and transport resources to a designated location
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: {'find_resource': 'Action node: Search for and detect any nearby resources.
Returns: True if resources are found, False otherwise.', 'gather_resource': 'Action node: Gather the detected resources.
Returns: True if resources are successfully gathered, False otherwise.', 'transport_resource': 'Action node: Transport the gathered resources to the designated location.
Returns: True if resources are successfully transported, False otherwise.', 'is_location_reached': 'Condition node: Check if the robot has reached the designated location.
Returns: True if the location is reached, False otherwise.'} to construct a behavior tree in XML format for the given command.
OUTPUT:
<BehaviorTree><Sequence><Condition>is_location_reached</Condition><Selector><Sequence><Action>find_resource</Action><Action>gather_resource</Action><Action>transport_resource</Action></Sequence><Sequence><Action>wait</Action><Action>move_towards_destination</Action></Sequence></Selector></Sequence></BehaviorTree>



###

USER COMMAND: create a behavior tree for a swarm of robots to defend against enemy attacks and protect a central base
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: {'detect_enemy': 'Action node: Use sensors to detect any enemies in the vicinity of the robot.
Returns: True if enemies are detected, False otherwise.', 'engage_enemy': 'Action node: Engage with the detected enemies and initiate attack.
Returns: True if the robot successfully engages with the enemies, False otherwise.', 'return_to_base': 'Action node: Return to the designated base location.
Returns: True if the robot successfully reaches the base, False otherwise.', 'is_base_under_attack': 'Condition node: Check if the central base is currently under attack.
Returns: True if the base is under attack, False otherwise.'} to construct a behavior tree in XML format for the given command.
OUTPUT:
<BehaviorTree><Sequence><Condition>is_base_under_attack</Condition><Selector><Sequence><Action>detect_enemy</Action><Action>engage_enemy</Action><Action>return_to_base</Action></Sequence><Sequence><Action>wait</Action><Action>move_towards_attack</Action></Sequence></Selector></Sequence></BehaviorTree>



###

USER COMMAND: create a behavior tree for a swarm of robots to coordinate and complete a complex construction project
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: {'retrieve_materials': 'Action node: Retrieve the necessary materials from designated locations.
Returns: True if all materials are gathered, False otherwise.', 'assemble_parts': 'Action node: Assemble and connect the different parts of the construction project.
Returns: True if all parts are successfully assembled, False otherwise.', 'install_electrical_components': 'Action node: Install the necessary electrical components of the project.
Returns: True if all components are successfully installed, False otherwise.', 'test_functionality': 'Action node: Test the functionality of the completed project.
Returns: True if all tests are passed, False otherwise.'} to construct a behavior tree in XML format for the given command.
OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Action>retrieve_materials</Action><Action>assemble_parts</Action><Action>install_electrical_components</Action><Action>test_functionality</Action></Sequence><Sequence><Action>wait</Action><Action>move_towards_destination</Action></Sequence></Selector></Sequence></BehaviorTree>


###

USER COMMAND: generate behavior tree for a robot to navigate a complex maze and reach the end point
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: {'check_left_wall': 'Condition node: Check if there is a wall on the left side.
Returns: True if a wall is present, False otherwise.', 'check_right_wall': 'Condition node: Check if there is wall on the right side.
Returns: True if a wall is present, False otherwise.', 'check_front_wall': 'Condition node: Check if there is wall in front.
Returns: True if a wall is present, False otherwise.', 'turn_left': 'Action node: Turn the robot 90 degrees to the left.
Returns: Always returns True.', 'turn_right': 'Action node: Turn the robot 90 degrees to the right.
Returns: Always returns True.', 'go_forward': 'Action node: Move the robot forward one step.
Returns: True if the move was successful, False otherwise.'} to construct a behavior tree in XML format for the given command.
OUTPUT:
<BehaviorTree><Sequence><Selector><Condition>check_left_wall</Condition><Action>turn_right</Action></Selector><Selector><Condition>check_right_wall</Condition><Action>turn_left</Action></Selector><Selector><Condition>check_front_wall</Condition><Action>turn_left</Action><Action>go_forward</Action></Selector></Sequence></BehaviorTree>



###

USER COMMAND: generate behavior tree for a swarm of robots to coordinate and build a structure
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: {'collect_resource': 'Action node: Collect a resource from the environment.
Returns: True if a resource was successfully collected, False otherwise.', 'move_to_location': 'Action node: Move the robot to a designated location.
Returns: True if the move was successful, False otherwise.', 'assemble_structure': 'Action node: Assemble a structure using collected resources.
Returns: True if the structure was successfully built, False otherwise.', 'is_resource_available': 'Condition node: Check if a resource is available in the environment.
Returns: True if a resource is available, False otherwise.', 'is_task_complete': 'Condition node: Check if the structure has been fully assembled by all robots.
Returns: True if the structure is complete, False otherwise.'} to construct a behavior tree in XML format for the given command.
OUTPUT:
<BehaviorTree><Sequence><Condition>is_resource_available</Condition><Selector><Sequence><Action>collect_resource</Action><Action>move_to_location</Action></Sequence><Selector><Condition>is_task_complete</Condition><Action>report_completion</Action></Selector></Selector><Action>assemble_structure</Action></Sequence></BehaviorTree>



###

USER COMMAND: generate behavior tree for a robot to navigate and collect samples in an unknown environment
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: {'move_to_next_location': 'Action node: Move the robot to the next designated location.
Returns: True if the move was successful, False otherwise.', 'scan_for_sample': 'Action node: Use sensors to scan the current location for any samples.
Returns: True if a sample is detected, False otherwise.', 'collect_sample': 'Action node: Collect a sample if one is detected.
Returns: True if a sample was successfully collected, False otherwise.', 'analyze_sample': 'Action node: Analyze the collected sample using on-board equipment.
Returns: True if the analysis was successful, False otherwise.', 'is_area_explored': 'Condition node: Check if the entire unknown environment has been explored.
Returns: True if the exploration is complete, False otherwise.', 'is_sample_detected': 'Condition node: Check if a sample was detected in the current location.
Returns: True if a sample is detected, False otherwise.'} to construct a behavior tree in XML format for the given command.
OUTPUT:
<BehaviorTree><Sequence><Condition>is_area_explored</Condition><Selector><Sequence><Action>move_to_next_location</Action><Selector><Sequence><Condition>is_sample_detected</Condition><Action>collect_sample</Action><Action>analyze_sample</Action></Sequence><Action>scan_for_sample</Action></Selector></Sequence></Selector></Sequence></BehaviorTree>


###

USER COMMAND: generate behavior tree for a swarm of robots to efficiently harvest a field of crops
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree for the swarm of robots for the given command: {'move_to_next_field': 'Action node: Move the robot to the next available crop field.
Returns: True if the robot successfully moved to the next field, False otherwise.', 'collect_crops': 'Action node: Harvest the crops in the current field.
Returns: True if crops were successfully collected, False otherwise.', 'is_harvest_complete': 'Condition node: Check if all crops in the field have been harvested.
Returns: True if all crops are harvested, False otherwise.', 'deliver_crops': 'Action node: Deliver the harvested crops to a designated location.
Returns: True if the crops were successfully delivered, False otherwise.', 'is_delivery_complete': 'Condition node: Check if all crops have been delivered to the designated location.
Returns: True if all crops are delivered, False otherwise.', 'refuel': 'Action node: Refuel the robot.
Returns: True if the robot is successfully refueled, False otherwise.'} to construct a behavior tree in XML format for the given command.
NPUT: Efficiently harvest a field of crops and deliver them to a designated location.
ML BEHAVIOR TREE OUTPUT:
<BehaviorTree><Sequence><Condition>is_harvest_complete</Condition><Selector><Sequence><Condition>is_delivery_complete</Condition><Action>refuel</Action><Sequence><Action>deliver_crops</Action><Action>refuel</Action></Sequence></Sequence><Sequence><Action>collect_crops</Action><Action>refuel</Action></Sequence></Selector><Action>move_to_next_field</Action></Sequence></BehaviorTree>

 

###

USER COMMAND: generate behavior tree for a swarm of robots to defend their territory against intruders
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree for the swarm of robots for the given command: {'scan_for_intruders': 'Action node: Scan the territory for any intruders using sensors.
Returns: True if one or more intruders were detected, False otherwise.', 'alert': 'Action node: Alert the other robots in the swarm about the presence of intruders.
Returns: Always returns True.', 'move_to_position': 'Action node: Move the robot to a designated defensive position.
Returns: True if the robot successfully moved to the designated position, False otherwise.', 'engage': 'Action node: Engage with the intruders and defend the territory.
Returns: True if the robot successfully engages with the intruders, False otherwise.'} to construct a behavior tree in XML format for the given command.
OUTPUT:
<BehaviorTree><Selector><Sequence><Action>scan_for_intruders</Action><Action>alert</Action><Action>move_to_position</Action><Selector><Action>engage</Action><Action>wait</Action></Selector></Sequence></Selector></BehaviorTree>

 

###

USER COMMAND: generate behavior tree for a swarm of robots to build a structure using individual contributions from each robot 
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree for the swarm of robots for the given command: {'move_to_worksite': 'Action node: Move the robot to the designated worksite where the construction will take place.
Returns: True if the robot successfully moved to the worksite, False otherwise.', 'collect_materials': 'Action node: Collect the necessary materials for the construction project.
Returns: True if the materials were successfully collected, False otherwise.', 'build_structure': 'Action node: Contribute to building the structure by performing designated tasks.
Returns: True if the robot successfully completed its designated task, False otherwise.', 'is_structure_complete': 'Condition node: Check if the structure has been fully built.
Returns: True if the structure is complete, False otherwise.', 'repair': 'Action node: Repair any damage to the structure during the construction process.
Returns: True if the repair was successful, False otherwise.'} to construct a behavior tree in XML format for the given command.
OUTPUT:
<BehaviorTree><Sequence><Condition>is_structure_complete</Condition><Selector><Sequence><Action>move_to_worksite</Action><Action>collect_materials</Action><Action>repair</Action><Sequence><Action>build_structure</Action><Action>repair</Action></Sequence></Sequence><Action>move_to_worksite</Action></Selector></Sequence></BehaviorTree>


###

3. // USER COMMAND: Generate behavior tree for a swarm of robots to work collaboratively and collect resources in a simulated environment.
3. // INSTRUCTIONS: Use the given behaviors to create a behavior tree that allows for efficient resource collection and coordination among multiple robots.{'move_to_resource': 'Action node: Move the robot to the nearest resource.
Returns: True if the resource is reached, False otherwise.', 'collect_resource': 'Action node: Collect the resource at the current location.
Returns: True if the resource is successfully collected, False otherwise.', 'return_to_nest': 'Action node: Return to the nest area.
Returns: True if the robot successfully reaches the nest, False otherwise.', 'is_resource_available': 'Condition node: Check if there are any resources available in the current environment.
Returns: True if at least one resource is available, False otherwise.', 'is_resource_collected': 'Condition node: Check if the robot has successfully collected the resource.
Returns: True if the resource is collected, False otherwise.', 'is_nest_reached': 'Condition node: Check if the robot has reached the nest area.
Returns: True if the robot is in the nest area, False otherwise.'}
3. //
3. // OUTPUT:
<BehaviorTree><Sequence><Selector><Condition>is_resource_available</Condition><Sequence><Action>move_to_resource</Action><Selector><Sequence><Condition>is_resource_collected</Condition><Action>return_to_nest</Action></Sequence><Action>collect_resource</Action></Selector></Sequence><Action>return_to_nest</Action></Selector></Sequence></BehaviorTree>



###

4. // USER COMMAND: Generate behavior tree for a swarm of robots to build a structure using coordinated movements and specialized roles.
4. // INSTRUCTIONS: Use the given behaviors to create a behavior tree that allows for efficient building and coordination among multiple robots.{'move_to_position': 'Action node: Move the robot to the designated position for their specific role.
Returns: True if the robot has reached the position, False otherwise.', 'gather_materials': 'Action node: Search and collect the required materials for the building project.
Returns: True if all materials are successfully collected, False otherwise.', 'build_structure': 'Action node: Perform the specific building action assigned to the robot's role.
Returns: True if the building action is completed, False otherwise.', 'return_to_home': 'Action node: Return to the home base once the designated building task is completed.
Returns: True if the robot successfully reaches the home base, False otherwise.', 'is_materials_available': 'Condition node: Check if the required materials are available in the environment.
Returns: True if all materials are available, False otherwise.', 'is_building_complete': 'Condition node: Check if the building project has been completed.
Returns: True if the building is completed, False otherwise.', 'is_home_reached': 'Condition node: Check if the robot has reached the home base.
Returns: True if the robot is in the home base, False otherwise.'}
4. //
4. // OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>is_materials_available</Condition><Sequence><Action>gather_materials</Action><Selector><Sequence><Condition>is_building_complete</Condition><Action>return_to_home</Action></Sequence><Action>build_structure</Action></Selector></Sequence><Action>move_to_position</Action></Selector><Sequence><Condition>is_home_reached</Condition><Action>move_to_next_build_position</Action></Sequence></Sequence></BehaviorTree>



###

5. // USER COMMAND: Generate behavior tree for a swarm of drones to locate a missing person in a mountainous region.
5. // INSTRUCTIONS: Use the given behaviors to create a behavior tree that allows for efficient search and rescue operations in a challenging environment.{'fly_to_search_area': 'Action node: Fly the drone to the designated search area.
Returns: True if the drone has reached the search area, False otherwise.', 'scan_for_person': 'Action node: Use sensors to scan the area for any heat signatures or signals from the missing person.
Returns: True if the person is located, False otherwise.', 'ascend_to_higher_altitude': 'Action node: Move the drone to a higher altitude to increase visibility and search range.
Returns: True if the drone reaches the designated altitude, False otherwise.', 'return_to_base': 'Action node: Return to the base once the missing person is located or the search operation is completed.
Returns: True if the drone successfully reaches the base, False otherwise.', 'is_search_area_reached': 'Condition node: Check if the drone has reached the designated search area.
Returns: True if the drone is in the search area, False otherwise.', 'is_person_located': 'Condition node: Check if the missing person has been located.
Returns: True if the person is located, False otherwise.', 'is_base_reached': 'Condition node: Check if the drone has returned to the base.
Returns: True if the drone is in the base, False otherwise.'}
5. //
5. // OUTPUT:
<BehaviorTree><Sequence><Selector><Condition>is_search_area_reached</Condition><Sequence><Action>fly_to_search_area</Action><Selector><Sequence><Condition>is_person_located</Condition><Action>return_to_base</Action></Sequence><Action>ascend_to_higher_altitude</Action></Selector></Sequence><Action>return_to_base</Action></Selector></Sequence></BehaviorTree>



###

USER COMMAND: Gather nearby resources and bring them back to a central location.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: find_resource: Subtree node (same as before). pick_up_resource: Action node (same as before). return_to_base: Action node (same as before). is_resource_nearby: Condition node (same as before).
OUTPUT:
<BehaviorTree><Sequence><Action>find_resource</Action><Condition>is_resource_nearby</Condition><Sequence><Action>pick_up_resource</Action><Action>return_to_base</Action></Sequence></Sequence></BehaviorTree>



###

USER COMMAND: Find and eliminate a designated target enemy within a certain radius.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: search_for_target: Subtree node (same as before). move_to_target: Action node (same as before). check_target_distance: Condition node (same as before). eliminate_target: Action node (same as before).
OUTPUT:
<BehaviorTree><Sequence><Action>search_for_target</Action><Condition>check_target_distance</Condition><Sequence><Action>move_to_target</Action><Action>eliminate_target</Action></Sequence></Sequence></BehaviorTree>



###

USER COMMAND: Coordinate with other swarm robots to clear obstacles and find a safe path.
INSTRUCTIONS: {'avoid_obstacle': 'Action node: Execute an action to avoid detected obstacles. Returns: Always returns True, indicating the action was executed.', 'clear_obstacles': 'Action node: Signal to other swarm robots to join and clear obstacles in the environment. Returns: Always returns True, indicating the action was executed.', 'find_safe_path': 'Action node: After obstacles are cleared, determine the safest path for the swarm robots to follow. Returns: Always returns True, indicating the action was executed.', 'is_obstacle_detected': 'Condition node: Determine if any obstacles are detected in the vicinity of the agent. Returns: True if an obstacle is detected, False otherwise.', 'is_path_safe': 'Condition node: Check if the path ahead of the agent is safe to traverse. Returns: False if obstacles are present or path is deemed unsafe, True otherwise.', 'is_swarm_coordinated': 'Condition node: Check if all swarm robots have successfully coordinated and cleared obstacles. Returns: True if all robots have signaled successful obstacle clearing, False otherwise.', 'return_to_original_position': 'Action node: After the path is deemed safe, return to the original starting position. Returns: Always returns True, indicating the action was executed.'}
OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>is_obstacle_detected</Condition> <Action>clear_obstacles</Action> </Sequence> <Action>find_safe_path</Action> <Sequence> <Condition>is_path_safe</Condition> <Action>return_to_original_position</Action> </Sequence> </Selector> </BehaviorTree>

###

USER COMMAND: Search for a specific target while avoiding obstacles and enemies. If target is found, attack it. If health is low, find health and restore it before continuing.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: find_target: Subtree node - Represents a behavior tree for searching and locating a target. is_target_found: Condition node - Checks if a target has been found. attack_target: Action node - Performs an attack action on a target. avoid_obstacles: Action node - Guides the robot to avoid obstacles while moving towards the target. avoid_enemies: Action node - Guides the robot to avoid enemies while searching for the target. is_health_low: Condition node (same as before). get_health_pack: Subtree node (same as before). restore_health: Action node (same as before).
OUTPUT:
<BehaviorTree><Selector><Sequence><Action>find_target</Action><Condition>is_target_found</Condition><Action>attack_target</Action></Sequence><Sequence><Action>avoid_obstacles</Action></Sequence><Sequence><Action>avoid_enemies</Action><Selector><Sequence><Condition>is_health_low</Condition><Sequence><Action>get_health_pack</Action><Action>restore_health</Action></Sequence></Selector></Sequence></Selector></BehaviorTree>



###

USER COMMAND: Build a structure using available resources. If resources runs low, gather more resources before resuming building.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: build_structure: Subtree node - Represents a behavior tree for building a structure. available_resources: Action node - Checks the amount of resources available. resources_low: Condition node - Checks if resources are below a certain threshold. gather_resources: Action node - Guides the robot to gather more resources. is_building_complete: Condition node - Checks if the building is complete.
OUTPUT:
<BehaviorTree><Sequence><Action>build_structure</Action><Selector><Sequence><Action>available_resources</Action><Condition>resources_low</Condition><Action>gather_resources</Action><Action>wait</Action></Sequence><Condition>is_building_complete</Condition></Selector></Sequence></BehaviorTree>



###

USER COMMAND: Coordinate with other robots to complete a complex task. If coordination fails, adapt and find alternative solutions.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: coordinate_task: Subtree node - Represents a behavior tree for coordinating with other robots. coordination_failed: Condition node - Checks if coordination has failed. adapt_and_find_solution: Action node - Guides the robot to adapt and find alternative solutions. alternative_solution_found: Condition node - Checks if an alternative solution has been found. perform_alternative_solution: Action node - Performs the alternative solution. task_completed: Condition node - Checks if the complex task has been completed.
OUTPUT:
<BehaviorTree><Sequence><Action>coordinate_task</Action><Selector><Sequence><Condition>coordination_failed</Condition><Action>adapt_and_find_solution</Action><Condition>alternative_solution_found</Condition><Action>perform_alternative_solution</Action></Sequence><Condition>task_completed</Condition></Selector></Sequence></BehaviorTree>


###

USER COMMAND: generate behavior tree to 'Collect all items in a given area and return to the starting point.'
INSTRUCTIONS: Use only the following behaviors to generate XML Behavior tree based on the user command: {'move_to_item': 'Action node: Move the robot to the nearest item within the given area. Returns: True if an item is found and the robot moves towards it, False otherwise.', 'collect_item': 'Action node: Collect the item the robot is currently at. Returns: True if the item is successfully collected, False otherwise.', 'move_to_origin': 'Action node: Move the robot to the starting point or origin. Returns: True if the robot successfully reaches the starting point, False otherwise.', 'is_area_explored': 'Condition node: Check if the given area has been fully explored and all items have been collected. Returns: True if the area is explored and all items are collected, False otherwise.', 'is_item_collected': 'Condition node: Check if the robot is currently holding an item. Returns: True if an item is collected and being held by the robot, False otherwise.', 'is_item_visible': 'Condition node: Check if an item is visible to the robot within the given area. Returns: True if an item is visible, False otherwise.'} to construct a behavior tree in XML format for the given command.
OUTPUT:
<BehaviorTree> <Sequence> <Condition>is_area_explored</Condition> <Selector> <Sequence> <Condition>is_item_collected</Condition> <Action>move_to_origin</Action> </Sequence> <Sequence> <Selector> <Condition>is_item_visible</Condition> <Action>move_to_item</Action> </Selector> <Action>collect_item</Action> </Sequence> </Selector> </Sequence> </BehaviorTree>



###

USER COMMAND: generate behavior tree to 'Coordinate with other robots to transport a heavy object.'
INSTRUCTIONS: Use only the following behaviors to generate XML Behavior tree based on the user command: {'move_to_location': 'Action node: Move the robot to a given location. Returns: True if the robot is able to move towards the location, False otherwise.', 'wait': 'Action node: Wait for a specified amount of time. Returns: True if the wait time has passed, False if the wait is not completed.', 'lift_object': 'Action node: Lift the heavy object to be transported. Returns: True if the object is lifted successfully, False otherwise.', 'transport_object': 'Action node: Physically move the heavy object to the desired location. Returns: True if the object is successfully transported, False otherwise.', 'lower_object': 'Action node: Lower the heavy object to its new position. Returns: True if the object is lowered successfully, False otherwise.', 'is_object_lifted': 'Condition node: Check if the heavy object is currently lifted by the robot. Returns: True if the object is lifted, False otherwise.', 'is_object_lowered': 'Condition node: Check if the heavy object is currently lowered by the robot. Returns: True if the object is lowered, False otherwise.', 'is_object_in_position': 'Condition node: Check if the heavy object has reached the desired location. Returns: True if the object is in position, False otherwise.', 'is_collaboration_successful': 'Condition node: Check if all robots involved in the task have successfully collaborated to transport the heavy object. Returns: True if the collaboration is successful, False otherwise.'} to construct a behavior tree in XML format for the given command.
OUTPUT:
<BehaviorTree> <Sequence> <Action>wait</Action> <Selector> <Sequence> <Condition>is_object_lifted</Condition> <Action>transport_object</Action> </Sequence> <Sequence> <Selector> <Condition>is_object_in_position</Condition> <Action>lower_object</Action> </Selector> <Action>lift_object</Action> </Sequence> </Selector> <Selector> <Condition>is_collaboration_successful</Condition> <Action>move_to_location</Action> </Selector> </Sequence> </BehaviorTree>



###

USER COMMAND: generate behavior tree to 'Scout the area for potential hazards and safely navigate through them.'
INSTRUCTIONS: Use only the following behaviors to generate XML Behavior tree based on the user command: {'move_forward': 'Action node: Move the robot one step forward in the current direction.
Returns: True if the robot can move forward, False otherwise.', 'turn_left': 'Action node: Turn the robot 90 degrees to the left.
Returns: Always returns True.', 'turn_right': 'Action node: Turn the robot 90 degrees to the right.
Returns: Always returns True.', 'detect_hazards': 'Condition node: Use sensors to detect potential hazards in the environment.
Returns: True if hazards are detected, False otherwise.', 'avoid_hazard': 'Action node: Safely avoid the detected hazard and navigate around it.
Returns: True if successfully navigated around the hazard, False otherwise.', 'is_destination_reached': 'Condition node: Check if the robot has reached its designated destination.
Returns: True if the robot is at its destination, False otherwise.'} to construct a behavior tree in XML format for the given command.
OUTPUT:
<BehaviorTree> <Sequence> <Condition>is_destination_reached</Condition> <Selector> <Sequence> <Condition>detect_hazards</Condition> <Action>avoid_hazard</Action> </Sequence> <Sequence> <Selector> <Condition>detect_hazards</Condition> <Action>turn_left</Action> <Action>turn_right</Action> </Selector> <Action>move_forward</Action> </Sequence> </Selector> </Sequence> </BehaviorTree>

###

USER COMMAND: generate behavior tree to 'Find a nearby source of food, collect it, return to base, and deposit the food.'
INSTRUCTIONS:{'move_towards_food': 'Action node: Move the robot towards the nearest food source.
Returns: True if the robot can move towards the food source, False otherwise.', 'collect_food': 'Action node: Collect the food from the source and store it internally.
Returns: True if the food was successfully collected, False otherwise.', 'return_to_base': 'Action node: Return to the designated base location.
Returns: True if the robot can return to base, False otherwise.', 'deposit_food': 'Action node: Deposit the collected food at the designated drop-off point.
Returns: True if the food was successfully deposited, False otherwise.', 'is_food_nearby': 'Condition node: Check if there is food within a detectable distance from the robot.
Returns: True if food is detected within 10 units of distance, False otherwise.', 'is_food_collected': 'Condition node: Check if the robot has successfully collected and stored the food.
Returns: True if food is collected and stored, False otherwise.', 'is_return_path_clear': 'Condition node: Check if the path back to base is clear of obstacles.
Returns: True if no obstacles are detected, False if obstacles are present.', 'is_base_detected': 'Condition node: Check if the robot has reached the designated base location.
Returns: True if the base is reached, False otherwise.', 'task_completed': 'Action node: Signal that the robot has completed its designated task by freezing movement and updating state.
Returns: Always returns True.'}
OUTPUT:
<BehaviorTree><Sequence><Condition>is_food_nearby</Condition><Selector><Sequence><Action>move_towards_food</Action><Action>collect_food</Action></Sequence><Sequence><Condition>is_food_collected</Condition><Action>return_to_base</Action></Sequence><Action>deposit_food</Action></Selector><Condition>is_base_detected</Condition><Action>task_completed</Action></Sequence>
</BehaviorTree>



###

USER COMMAND: generate behavior tree for swarm robots to collaborate and build a structure using individual component parts.
INSTRUCTIONS: Use the following behaviors to construct an XML behavior tree: {'gather_parts': 'Action node: Move towards a designated location to gather individual component parts for the structure.
Returns: True if the robot can gather parts, False if the parts are unavailable or the robot is already carrying parts.', 'attach_part': 'Action node: Attach the gathered part to the existing structure or another robot carrying a part.
Returns: True if the part was attached successfully, False otherwise.', 'move_to_new_position': 'Action node: Move to a new designated position to attach the next part.
Returns: True if the robot can move to the new position, False otherwise.', 'is_part_available': 'Condition node: Check if there are available parts at the designated location.
Returns: True if parts are available, False otherwise.', 'is_structure_complete': 'Condition node: Check if the overall structure is complete by counting all attached parts.
Returns: True if the structure is complete, False if some parts are still missing.', 'is_part_attached': 'Condition node: Check if the robot has successfully attached a part to the structure.
Returns: True if the part is attached, False otherwise.', 'is_structure_stable': 'Condition node: Check if the completed structure is stable and able to withstand movement.
Returns: True if the structure has been checked and is determined to be stable, False otherwise.', 'wait_for_other_robots': 'Action node: Pause actions and movements and wait for other swarm robots to finish their tasks.
Returns: Always returns True.', 'task_completed': 'Action node: Signal that the robot has completed its designated task by freezing movement and updating state.
Returns: Always returns True.'}
OUTPUT:
<BehaviorTree><Condition>is_part_available</Condition><Selector><Sequence><Action>gather_parts</Action><Condition>is_part_attached</Condition></Sequence><Sequence><Action>move_to_new_position</Action><Condition>is_structure_complete</Condition></Sequence><Selector><Condition>is_structure_stable</Condition><Action>wait_for_other_robots</Action></Selector></Selector><Action>task_completed</Action></BehaviorTree>



###

USER COMMAND: generate behavior tree for a swarm of robots to defend their territory against intruders
INSTRUCTIONS: Use the following behaviors to construct an XML behavior tree: {'patrol_area': 'Action node: Patrol the designated territory to identify potential intruders.
Returns: True if the robot can move and patrol the area, False if the robot is currently carrying out another task.', 'detect_intruder': 'Action node: Use sensors and visual cues to detect potential intruders within the territory.
Returns: True if an intruder is detected, False otherwise.', 'interrogate_intruder': 'Action node: Approach the detected intruder and interrogate for identification and intentions.
Returns: True if the intruder is identified and questioned, False if the intruder is out of range or does not respond.', 'raise_alarm': 'Action node: Notify other swarm robots of the potential intruder and signal for them to assist in defending the territory.
Returns: True if the alarm is successfully raised, False otherwise.', 'attack_intruder': 'Action node: Confront and attack the intruder to drive them away from the territory.
Returns: True if the intruder is successfully attacked, False if the intruder is out of range or cannot be reached due to obstacles.', 'is_intruder_defeated': 'Condition node: Check if the intruder has been successfully defeated or driven away from the territory.
Returns: True if the intruder is defeated, False if the intruder is not yet defeated or has escaped.', 'is_all_clear': 'Condition node: Check if the territory is clear of intruders and no longer requires defense.
Returns: True if no intruders are detected in the vicinity, False otherwise.', 'is_assistance_needed': 'Condition node: Check if other swarm robots have been notified and are on their way to assist in defending the territory.
Returns: True if assistance has been requested, False otherwise.'}
OUTPUT:
<BehaviorTree><Selector><Condition>is_intruder_defeated</Condition><Sequence><Selector><Condition>is_all_clear</Condition><Action>patrol_area</Action></Selector><Selector><Condition>is_assistance_needed</Condition><Action>raise_alarm</Action></Selector><Sequence><Condition>detect_intruder</Condition><Action>interrogate_intruder</Action></Sequence><Action>attack_intruder</Action></Sequence></Selector></BehaviorTree>


###

USER COMMAND: generate behavior tree to 'Gather resources, deposit them at designated location, and avoid obstacles.'Output only the XML behavior tree without extra text.
INSTRUCTIONS: {'agent_movement_freeze': 'Action node: Freeze the agent’s movement, typically to indicate a stop in activity or end of tasks. Returns: Always returns True, indicating the action was executed.', 'avoid_obstacle': 'Action node: Execute an action to avoid detected obstacles. Returns: Always returns True, indicating the action was executed.', 'change_color_to_green': 'Action node: Change the agent’s color to green, usually indicating a successful operation or state. Returns: Always returns True, indicating the action was executed.', 'change_color_to_white': 'Action node: Change the agent’s color to white, usually indicating a neutral or initial state. Returns: Always returns True, indicating the action was executed.', 'continue_movement_agent': 'Action node: Continue the agent’s movement after it has been previously frozen. Returns: Always returns True, indicating the action was executed.', 'deposit_resources': 'Action node: Transport and deposit collected resources to a designated location. Returns: Always returns True, indicating the action was executed.', 'gather_resources': 'Action node: Search and gather available resources in the environment. Returns: Always returns True, indicating the action was executed.', 'is_agent_near_deposit': 'Condition node: Determine if the agent is near the designated deposit location. Returns: True if the agent is within 5 units of distance, False otherwise.', 'is_deposit_full': 'Condition node: Check if the designated deposit location is full of resources. Returns: True if the deposit is at maximum capacity, False otherwise.', 'is_obstacle_detected': 'Condition node: Determine if any obstacles are detected in the vicinity of the agent. Returns: True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition node: Check if the path ahead of the agent is clear of obstacles. Returns: True if no obstacles are detected ahead, False if obstacles are present.', 'is_resource_detected': 'Action node: Check if any resources are within a detectable distance from the agent’s position. Returns: True if resources are within 10 units of distance, False otherwise.', 'is_resource_gathered': 'Condition node: Determine if the agent has successfully gathered resources. Returns: True if resources are successfully collected, False otherwise.', 'task_completed': 'Action node: Signal that the agent has completed its designated task by freezing movement and updating state. Returns: Always returns True, indicating that the task completion action was executed.', 'wander': 'Action node: Perform a wandering action where the agent moves randomly within the environment. Returns: Always returns True, indicating the action was executed.'}
OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>is_resource_detected</Condition><Action>gather_resources</Action><Condition>is_resource_gathered</Condition><Action>change_color_to_green</Action><Action>agent_movement_freeze</Action><Action>task_completed</Action></Sequence><Action>wander</Action></Selector><Sequence><Condition>is_agent_near_deposit</Condition><Condition>is_path_clear</Condition><Action>deposit_resources</Action></Sequence></Sequence></BehaviorTree>



###

USER COMMAND: generate behavior tree to 'Explore the environment, collect data, communicate with other robots and return to the nest.'Output only the XML behavior tree without extra text.
INSTRUCTIONS: {'agent_movement_freeze': 'Action node: Freeze the agent’s movement, typically to indicate a stop in activity or end of tasks. Returns: Always returns True, indicating the action was executed.', 'avoid_obstacle': 'Action node: Execute an action to avoid detected obstacles. Returns: Always returns True, indicating the action was executed.', 'change_color_to_green': 'Action node: Change the agent’s color to green, usually indicating a successful operation or state. Returns: Always returns True, indicating the action was executed.', 'change_color_to_white': 'Action node: Change the agent’s color to white, usually indicating a neutral or initial state. Returns: Always returns True, indicating the action was executed.', 'communicate_data': 'Action node: Communicate collected data with other robots in the swarm. Returns: Always returns True, indicating the action was executed.', 'explore_environment': 'Action node: Move around the environment, scanning and collecting data. Returns: Always returns True, indicating the action was executed.', 'is_agent_in_nest': 'Condition node: Determine if the agent is in the nest. Returns: True if the agent is in the nest, False otherwise.', 'is_communication_successful': 'Condition node: Determine if the communication with other robots was successful. Returns: True if the communication was successful, False otherwise.', 'is_data_collected': 'Condition node: Determine if the agent has collected enough data. Returns: True if enough data is collected, False otherwise.', 'is_environment_explored': 'Condition node: Check if the agent has explored a significant portion of the environment. Returns: True if enough data has been collected to indicate significant exploration, False otherwise.', 'is_obstacle_detected': 'Condition node: Determine if any obstacles are detected in the vicinity of the agent. Returns: True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition node: Check if the path ahead of the agent is clear of obstacles. Returns: True if no obstacles are detected ahead, False if obstacles are present.', 'task_completed': 'Action node: Signal that the agent has completed its designated task by freezing movement and updating state. Returns: Always returns True, indicating that the task completion action was executed.', 'return_to_nest': 'Action node: Navigate back to the nest location. Returns: Always returns True, indicating the action was executed.'}
OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>is_data_collected</Condition><Action>communicate_data</Action><Condition>is_communication_successful</Condition><Action>change_color_to_green</Action><Action>agent_movement_freeze</Action><Action>task_completed</Action></Sequence><Action>explore_environment</Action></Selector><Sequence><Condition>is_obstacle_detected</Condition><Condition>is_path_clear</Condition><Action>return_to_nest</Action></Sequence><Action>change_color_to_white</Action></Sequence></BehaviorTree>



###

USER COMMAND: generate behavior tree to 'Coordinate with other robots to build a structure.'Output only the XML behavior tree without extra text.
INSTRUCTIONS: {'agent_movement_freeze': 'Action node: Freeze the agent’s movement, typically to indicate a stop in activity or end of tasks. Returns: Always returns True, indicating the action was executed.', 'build_structure': 'Action node: Act upon the instructions received from other robots and execute the necessary actions 

###

USER COMMAND: generate behavior tree to 'Explore the environment, avoiding obstacles and forming a line with other robots.'Output only the XML behavior tree without extra text.
INSTRUCTIONS: {'agent_movement_freeze': 'Action node: Freeze the agent’s movement, typically to indicate a stop in activity or end of tasks. Returns: Always returns True, indicating the action was executed.', 'avoid_obstacle': 'Action node: Execute an action to avoid detected obstacles. Returns: Always returns True, indicating the action was executed.', 'change_color_to_green': 'Action node: Change the agent’s color to green, usually indicating a successful operation or state. Returns: Always returns True, indicating the action was executed.', 'change_color_to_white': 'Action node: Change the agent’s color to white, usually indicating a neutral or initial state. Returns: Always returns True, indicating the action was executed.', 'continue_movement_agent': 'Action node: Continue the agent’s movement after it has been previously frozen. Returns: Always returns True, indicating the action was executed.', 'form_line': 'Action node: Direct the agent to form a line towards the center of the window. This function adjusts the agent’s position to align it with the center. Returns: Always returns True, indicating the action was executed.', 'is_agent_in_nest': 'Condition node: Determine if the agent is in the nest. Returns: True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition node: Determine if the agent has formed a line with a reference point at the center of the window. Returns: True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition node: Determine if any obstacles are detected in the vicinity of the agent. Returns: True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition node: Check if the path ahead of the agent is clear of obstacles. Returns: True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Action node: Check if the target is within a detectable distance from the agent’s position. Returns: True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition node: Check if the agent has reached the target. Returns: True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action node: Signal that the agent has completed its designated task by freezing movement and updating state. Returns: Always returns True, indicating that the task completion action was executed.', 'wander': 'Action node: Perform a wandering action where the agent moves randomly within the environment. Returns: Always returns True, indicating the action was executed.'}
OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_obstacle_detected</Condition><Action>avoid_obstacle</Action><Action>task_completed</Action></Sequence><Sequence><Condition>is_line_formed</Condition></Sequence><Action>wander</Action></Selector><Sequence><Condition>is_path_clear</Condition><Action>form_line</Action><Action>task_completed</Action></Sequence></BehaviorTree>



###

USER COMMAND: generate behavior tree to 'Inspect unknown object, collect data and return to base for analysis.Output only the XML behavior tree without extra text.
INSTRUCTIONS: {'agent_movement_freeze': 'Action node: Freeze the agent’s movement, typically to indicate a stop in activity or end of tasks. Returns: Always returns True, indicating the action was executed.', 'avoid_obstacle': 'Action node: Execute an action to avoid detected obstacles. Returns: Always returns True, indicating the action was executed.', 'change_color_to_green': 'Action node: Change the agent’s color to green, usually indicating a successful operation or state. Returns: Always returns True, indicating the action was executed.', 'change_color_to_white': 'Action node: Change the agent’s color to white, usually indicating a neutral or initial state. Returns: Always returns True, indicating the action was executed.', 'continue_movement_agent': 'Action node: Continue the agent’s movement after it has been previously frozen. Returns: Always returns True, indicating the action was executed.', 'form_line': 'Action node: Direct the agent to form a line towards the center of the window. This function adjusts the agent’s position to align it with the center. Returns: Always returns True, indicating the action was executed.', 'is_agent_in_nest': 'Condition node: Determine if the agent is in the nest. Returns: True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition node: Determine if the agent has formed a line with a reference point at the center of the window. Returns: True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition node: Determine if any obstacles are detected in the vicinity of the agent. Returns: True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition node: Check if the path ahead of the agent is clear of obstacles. Returns: True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Action node: Check if the target is within a detectable distance from the agent’s position. Returns: True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition node: Check if the agent has reached the target. Returns: True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action node: Signal that the agent has completed its designated task by freezing movement and updating state. Returns: Always returns True, indicating that the task completion action was executed.', 'wander': 'Action node: Perform a wandering action where the agent moves randomly within the environment. Returns: Always returns True, indicating the action was executed.'}
OUTPUT:
<BehaviorTree> <Sequence> <Condition>is_target_detected</Condition> <Action>wander</Action> <Action>change_color_to_green</Action> </Sequence> <Sequence> <Condition>is_target_reached</Condition> <Action>change_color_to_white</Action> <Action>agent_movement_freeze</Action> </Sequence> </BehaviorTree>



###


USER COMMAND: Collect and transport resources from a designated location to a central storage area. If storage capacity is reached, return to the designated location to collect more resources.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: {'collect_resources': 'Action node: Collect resources from the designated location.
Returns: True if resources were successfully collected, False otherwise.', 'transport_resources': 'Action node: Transport collected resources to the central storage area.
Returns: True if resources were successfully transported, False otherwise.', 'is_storage_full': 'Condition node: Check if the central storage area has reached its capacity.
Returns: True if storage is full, False otherwise.'}
OUTPUT:
<BehaviorTree><Sequence><Action>collect_resources</Action><Selector><Sequence><Action>transport_resources</Action><Condition>is_storage_full</Condition><Action>return_to_designated_location</Action></Sequence></Selector></Sequence></BehaviorTree>


###

USER COMMAND: Navigate through a maze to reach the end goal while avoiding obstacles and enemies.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: {'navigate_maze': 'Action node: Move through the maze using pathfinding algorithms.
Returns: True if successfully completed the maze, False otherwise.', 'avoid_obstacles': 'Action node: Use sensors and pathfinding algorithms to avoid obstacles in the maze.
Returns: True if obstacles were successfully avoided, False otherwise.', 'run_away': 'Action node: Use sensors and pathfinding algorithms to evade enemies in the maze.
Returns: True if successfully evaded enemies, False otherwise.'}
OUTPUT:
<BehaviorTree><Sequence><Action>navigate_maze</Action><Selector><Sequence><Action>avoid_obstacles</Action><Action>run_away</Action></Sequence></Selector></Sequence></BehaviorTree>


###

USER COMMAND: Coordinate with other robots in a swarm to construct a predefined structure using specific building blocks.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: {'gather_blocks': 'Action node: Use sensors to locate and gather specific building blocks.
Returns: True if successfully gathered blocks, False otherwise.', 'assemble_structure': 'Action node: Work with other robots to construct the predefined structure using the gathered blocks.
Returns: True if structure is successfully assembled, False otherwise.', 'wait_for_instructions': 'Condition node: Check for instructions from the swarm leader.
Returns: True if instructions are received, False otherwise.'}
OUTPUT:
<BehaviorTree><Sequence><Action>gather_blocks</Action><Selector><Sequence><Condition>wait_for_instructions</Condition><Action>follow_instructions</Action></Sequence><Action>assemble_structure</Action></Selector></Sequence></BehaviorTree>


###

USER COMMAND: Navigate a labyrinth while avoiding traps and collecting treasure
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: move_forward: Action node (same as before). check_for_trap: Condition node - Checks if there is a trap ahead. avoid_trap: Action node - Takes a detour to avoid the trap. collect_treasure: Action node - Collects treasure found while navigating. reach_end: Condition node - Checks if the end of the labyrinth has been reached.
OUTPUT:
<BehaviorTree><Selector><Sequence><Action>move_forward</Action><Condition>check_for_trap</Condition><Action>avoid_trap</Action></Sequence><Action>collect_treasure</Action></Selector><Condition>reach_end</Condition></BehaviorTree>



###

USER COMMAND: Collaboratively build a structure using swarm robots
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: move_to_location: Action node - Moves the robot to a specific location. is_location_reachable: Condition node - Checks if the robot can reach the desired location. retrieve_building_materials: Action node - Retrieves building materials needed at the location. build_structure: Action node - Uses the retrieved materials to build a structure. are_materials_available: Condition node - Checks if the required materials are available for building.
OUTPUT:
<BehaviorTree><Selector><Sequence><Action>move_to_location</Action><Condition>is_location_reachable</Condition><Action>retrieve_building_materials</Action><Sequence><Condition>are_materials_available</Condition><Action>build_structure</Action></Sequence></Sequence></Selector></BehaviorTree>



###

USER COMMAND: Search and rescue mission in a disaster-affected area
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: search_area: Action node - Uses sensors to scan and search the designated area for any signs of life. transport_victim: Action node - If a victim is found during the search, move them to a safe location for further assistance. move_to_next_grid: Action node - Moves the robot to the next grid within the designated search area. is_grid_safe: Condition node - Checks if the current grid has been deemed safe for search and rescue operations.
OUTPUT:
<BehaviorTree><Sequence><Action>search_area</Action><Selector><Sequence><Condition>is_grid_safe</Condition><Action>move_to_next_grid</Action></Sequence><Action>transport_victim</Action></Selector></Sequence></BehaviorTree>


###

USER COMMAND: construct a behavior tree for a robot to collect samples from the environment and deliver them to a designated location.
INSTRUCTIONS: Use only the following behaviors to generate XML behavior tree based on the user command: {'move_to_next_sample': 'Action node: Move the robot to the next sample location.
Returns: True if the robot successfully moved to the next sample location, False otherwise.', 'collect_sample': 'Action node: Collect a sample from the environment.
Returns: True if a sample was successfully collected, False otherwise.', 'deliver_sample': 'Action node: Deliver the collected sample to the designated location.
Returns: True if the sample was successfully delivered, False otherwise.', 'is_sample_complete': 'Condition node: Check if the robot has completed collecting all the samples from the environment.
Returns: True if all samples have been collected, False otherwise.'} to construct a behavior tree in XML format for the given command.
OUTPUT:
<BehaviorTree><Sequence><Condition>is_sample_complete</Condition><Sequence><Action>move_to_next_sample</Action><Action>collect_sample</Action><Selector><Action>deliver_sample</Action><Action>wait</Action></Selector></Sequence></Sequence></BehaviorTree>



###

USER COMMAND: set up behavior tree for a group of swarm robots to work together to move a heavy object in unison.
INSTRUCTIONS: This behavior tree will consist of a top-level Selector node, with the following child nodes: 
1) Sequence node for coordinating movements and lifting actions
2) Sequence node for checking the weight and size of the object
3) Sequence node for synchronizing movements and maintaining balance
With the following behaviors: {'wait': 'Action node: Pause and wait for a specified amount of time.
Returns: Always returns True.', 'move_forward': 'Action node: Move the robot forward a certain distance.
Returns: True if the robot successfully moved forward, False otherwise.', 'move_backward': 'Action node: Move the robot backward a certain distance.
Returns: True if the robot successfully moved backward, False otherwise.', 'lift_object': 'Action node: Use specialized gripping mechanisms to lift the heavy object.
Returns: True if the object was successfully lifted, False otherwise.', 'check_weight': 'Condition node: Check if the weight of the object is within a safe range for the robots to lift.
Returns: True if the weight is safe, False otherwise.', 'check_size': 'Condition node: Check if the size of the object is within the specified dimensions for the robots to maneuver.
Returns: True if the size is within bounds, False otherwise.', 'synchronize_movements': 'Action node: Coordinate the movements of all the robots to ensure smooth and synchronized motion.
Returns: Always returns True, indicating the action was executed.', 'maintain_balance': 'Action node: Adjust the movements of each robot to maintain balance and prevent the object from tilting or falling.
Returns: Always returns True, indicating the action was executed.'}
OUTPUT:
<BehaviorTree><Selector><Sequence><Action>move_forward</Action><Action>move_backward</Action><Selector><Condition>check_weight</Condition><Action>lift_object</Action><Action>wait</Action></Selector></Sequence><Sequence><Condition>check_size</Condition><Sequence><Continue>move_forward</Continue><Continue>-move_backward</Continue></Sequence></Sequence><Sequence><Condition>check_size</Sequence><Sequence><Continue>synchronize_movements</Continue><Continue>maintain_balance</Continue></Sequence></Selector></BehaviorTree>



###

USER COMMAND: construct a behavior tree for swarm robots to collaboratively explore a unknown environment and map out its features.
INSTRUCTIONS: This behavior tree should utilize the following behaviors: {'explore': 'Action node: Move the robot to unexplored areas in the environment using a mapping algorithm.
Returns: True if the robot successfully moved to an unexplored area, False otherwise.', 'scan_area': 'Action node: Use sensors to scan the surrounding area and collect data.
Returns: True if data was successfully collected, False otherwise.', 'analyze_data': 'Action node: Analyze the collected data and map out the features of the environment.
Returns: True if data was successfully analyzed and mapped, False otherwise.', 'update_map': 'Action node: Update the current map of the environment with the new data.
Returns: True if the map was successfully updated, False otherwise.', 'is_exploration_complete': 'Condition node: Check if the entire environment has been explored.
Returns: True if the exploration is complete, False otherwise.'} Construct a behavior tree in XML format for the given command.
OUTPUT:
<BehaviorTree><Sequence><Condition>is_exploration_complete</Condition><Sequence><Action>explore</Action><Action>scan_area</Action><Sequence><Action>analyze_data</Action><Action>update_map</Action></Sequence></Sequence></Sequence></BehaviorTree>


###

USER COMMAND: generate behavior tree for swarm robots to collaborate on building a structure
INSTRUCTIONS: Use the following predefined behaviors to construct the XML behavior tree for the given command: {'move_to_next_position': 'Action node: Move to the next designated position in the building process.
Returns: True if the robot successfully moved to the next position, False otherwise.', 'attach_building_block': 'Action node: Attach a building block to the structure at the current position.
Returns: True if the block is successfully attached, False otherwise.', 'is_block_attached': 'Condition node: Check if a building block has been successfully attached at the current position.
Returns: True if a block is attached, False otherwise.', 'is_building_complete': 'Condition node: Check if the entire structure has been completed.
Returns: True if the building is complete, False otherwise.'}
OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>is_building_complete</Condition> <Action>wait</Action> </Sequence> <Selector> <Sequence> <Condition>is_block_attached</Condition> <Action>move_to_next_position</Action> <Action>attach_building_block</Action> </Sequence> <Action>move_to_next_position</Action> </Selector> </Sequence> </Selector> </BehaviorTree>



###

USER COMMAND: generate behavior tree for swarm robots to explore a new environment and collect data
INSTRUCTIONS: Use the following predefined behaviors to construct the XML behavior tree for the given command: {'explore': 'Action node: Move to a new unexplored area in the environment.
Returns: True if a new area is successfully explored, False otherwise.', 'collect_data': 'Action node: Collect data from the current location.
Returns: True if data is successfully collected, False otherwise.', 'is_area_explored': 'Condition node: Check if the current area has been fully explored.
Returns: True if the area has been explored, False otherwise.', 'is_data_collected': 'Condition node: Check if data has been successfully collected at the current location.
Returns: True if data is collected, False otherwise.', 'is_environment_explored': 'Condition node: Check if the entire environment has been explored.
Returns: True if all areas have been explored, False otherwise.'}
OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>is_environment_explored</Condition> <Action>wait</Action> </Sequence> <Selector> <Sequence> <Condition>is_area_explored</Condition> <Action>move_to_next_position</Action> <Selector> <Sequence> <Condition>is_data_collected</Condition> <Action>collect_data</Action> </Sequence> <Action>explore</Action> </Selector> </Sequence> <Action>move_to_next_position</Action> </Selector> </BehaviorTree>



###

USER COMMAND: generate behavior tree for swarm robots to defend against a simulated attack
INSTRUCTIONS: Use the following predefined behaviors to construct the XML behavior tree for the given command: {'monitor_attack': 'Action node: Monitor the environment for any impending attack.
Returns: True if an attack is detected, False otherwise.', 'alert_defenders': 'Action node: Send an alert signal to all defenders to prepare for attack.
Returns: Always returns True.', 'combat_attack': 'Action node: Initiate defense measures against the attack.
Returns: True if the attack is successfully countered, False otherwise.', 'is_attacker_defeated': 'Condition node: Check if the attacker has been successfully defeated.
Returns: True if the attacker is defeated, False otherwise.'}
OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>is_attacker_defeated</Condition> <Action>wait</Action> </Sequence> <Selector> <Sequence> <Action>monitor_attack</Action> <Action>alert_defenders</Action> <Action>combat_attack</Action> </Sequence> <Action>wait</Action> </Selector> </Sequence> </BehaviorTree>


###

USER COMMAND: Collect resources from surrounding area and return to base for deposit.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: collect_resources: Subtree node - Represents a behavior tree for collecting resources. return_home: Subtree node - Represents a behavior tree for returning to base. deposit_resources: Action node - Performs the action of depositing collected resources. are_resources_available: Condition node - Checks if any resources are available in the surrounding area. is_at_base: Condition node - Checks if the agent is at the base. has_resources: Condition node - Checks if the agent has collected any resources.
OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>are_resources_available</Condition><Action>collect_resources</Action><Action>task_completed</Action></Sequence><Action>wander</Action></Selector><Sequence><Condition>is_at_base</Condition><Selector><Sequence><Condition>has_resources</Condition><Action>return_home</Action><Action>deposit_resources</Action></Sequence></Selector><Action>task_completed</Action></Sequence></Sequence></BehaviorTree>



###

USER COMMAND: Roam the environment and evade obstacles.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: roam_environment: Action node - Performs a wandering behavior while avoiding obstacles. avoid_obstacle: Action node - Executes an action to avoid detected obstacles. is_obstacle_detected: Condition node - Checks if any obstacles are detected in the vicinity of the agent.
OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_obstacle_detected</Condition><Action>avoid_obstacle</Action><Action>task_completed</Action></Sequence><Action>roam_environment</Action></Selector></BehaviorTree>



###

USER COMMAND: Protect the Queen from incoming threats while maintaining a safe distance from other agents.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: protect_queen: Subtree node - Represents a behavior tree for protecting the queen. maintain_distance: Action node - Moves the agent to maintain a safe distance from other agents. is_threat_detected: Condition node - Checks if any threats are detected in the surrounding area. is_distance_safe: Condition node - Checks if the agent is at a safe distance from other agents.
OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>is_threat_detected</Condition><Action>protect_queen</Action><Action>task_completed</Action></Sequence><Action>maintain_distance</Action></Selector><Selector><Sequence><Condition>is_distance_safe</Condition><Action>maintain_distance</Action></Sequence><Action>move_away</Action></Selector><Action>task_completed</Action></Sequence></BehaviorTree>

###

USER COMMAND: generate behavior tree to coordinate swarm robots to create a formation
INSTRUCTIONS: Utilize the following behaviors and conditions to create a coordinated behavior tree in XML format for the given command: {'move_to_position': 'Action node: Command the robot to move to a designated position.
Returns: True if the robot successfully moved to the designated position, False otherwise.', 'align_with_leader': 'Action node: Direct the robot to align itself with the leader robot.
Returns: True if the robot successfully aligned with the leader, False otherwise.', 'is_formation_complete': 'Condition node: Check if all robots have completed forming the designated formation.
Returns: True if all robots are aligned in formation, False otherwise.', 'start_formation': 'Action node: Send a signal to all robots to start forming the designated formation.
Returns: Always returns True.', 'wait': 'Action node: Pause all actions and wait for further commands.
Returns: Always returns True.'}
OUTPUT:
<BehaviorTree><Action>start_formation</Action><Sequence><Action>move_to_position</Action><Action>align_with_leader</Action><Action>wait</Action></Sequence><Selector><Condition>is_formation_complete</Condition><Action>wait</Action></Selector><Action>wait</Action><!-- Repeat this Sequence and Selector for additional robots--></BehaviorTree>



###

USER COMMAND: generate behavior tree for a robot to explore its surroundings and map out new areas
INSTRUCTIONS: Use the following behaviors and conditions to create a behavior tree in XML format for the given command: {'move_to_next_location': 'Action node: Move to the next designated location to explore.
Returns: True if the robot successfully moved to the next location, False otherwise.', 'scan_for_obstacles': 'Action node: Use sensors to scan the surroundings for any obstacles.
Returns: True if an obstacle is detected, False otherwise.', 'map_area': 'Action node: Map out the area currently being explored.
Returns: Always returns True.', 'is_area_explored': 'Condition node: Check if the current area has been fully mapped out and explored.
Returns: True if the area is fully explored, False otherwise.'}
OUTPUT:
<BehaviorTree><Sequence><Condition>is_area_explored</Condition><Sequence><Action>move_to_next_location</Action><Action>scan_for_obstacles</Action><Selector><Action>wait</Action><Action>map_area</Action></Selector></Sequence></Sequence><Action>wait</Action><!-- Repeat this Sequence and Selector for additional locations--></BehaviorTree>



###

USER COMMAND: generate behavior tree for swarm robots to work together to collect resources and build a structure
INSTRUCTIONS: Use the following behaviors and conditions to create a behavior tree in XML format for the given command: {'collect_resource': 'Action node: Command the robot to collect a designated resource.
Returns: True if the resource was successfully collected, False otherwise.', 'drop_resource': 'Action node: Direct the robot to drop the collected resource at a designated location.
Returns: True if the resource was successfully dropped, False otherwise.', 'build_structure': 'Action node: Use the collected resources to build a designated structure.
Returns: Always returns True.', 'is_resource_needed': 'Condition node: Check if resources are needed for building the designated structure.
Returns: True if resources are needed, False otherwise.', 'is_structure_complete': 'Condition node: Check if the designated structure has been successfully built.
Returns: True if the structure is complete, False otherwise.'}
OUTPUT:
<BehaviorTree><Sequence> <Condition>is_resource_needed</Condition> <Sequence> <Action>collect_resource</Action> <Action>drop_resource</Action> <Selector> <Action>collect_resource</Action> <Action>wait</Action> </Selector> </Sequence> <Action>build_structure</Action> </Sequence> <Sequence> <Condition>is_structure_complete</Condition> <Action>wait</Action> </Sequence> <Action>wait</Action><!-- Repeat these Sequences for additional swarm robots--></BehaviorTree>


###

USER COMMAND: generate behavior tree to 'Collect resources from multiple locations and return to base.'Output only the XML behavior tree without extra text.
INSTRUCTIONS: {'agent_movement_freeze': 'Action node: Freeze the agent’s movement, typically to indicate a stop in activity or end of tasks. Returns: Always returns True, indicating the action was executed.', 'avoid_obstacle': 'Action node: Execute an action to avoid detected obstacles. Returns: Always returns True, indicating the action was executed.', 'change_color_to_green': 'Action node: Change the agent’s color to green, usually indicating a successful operation or state. Returns: Always returns True, indicating the action was executed.', 'change_color_to_white': 'Action node: Change the agent’s color to white, usually indicating a neutral or initial state. Returns: Always returns True, indicating the action was executed.', 'continue_movement_agent': 'Action node: Continue the agent’s movement after it has been previously frozen. Returns: Always returns True, indicating the action was executed.', 'is_agent_in_nest': 'Condition node: Determine if the agent is in the nest. Returns: True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition node: Determine if the agent has formed a line with a reference point at the center of the window. Returns: True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition node: Determine if any obstacles are detected in the vicinity of the agent. Returns: True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition node: Check if the path ahead of the agent is clear of obstacles. Returns: True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Action node: Check if the target is within a detectable distance from the agent’s position. Returns: True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition node: Check if the agent has reached the target. Returns: True if the target is within 15 units of distance, False otherwise.', 'pick_up_resource': 'Action node: Move towards and pick up a resource at the agent’s current location. Returns: True if successfully picked up a resource, False otherwise.', 'return_home': 'Action node: Return to the designated base or nest location. Returns: Always returns True, indicating the action was executed.', 'task_completed': 'Action node: Signal that the agent has completed its designated task by freezing movement and updating state. Returns: Always returns True, indicating that the task completion action was executed.', 'wander': 'Action node: Perform a wandering action where the agent moves randomly within the environment. Returns: Always returns True, indicating the action was executed.'}
OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_agent_in_nest</Condition><Selector><Sequence><Condition>is_path_clear</Condition><Action>return_home</Action><Action>change_color_to_white</Action></Sequence><Action>wander</Action></Selector></Sequence><Selector><Sequence><Condition>is_obstacle_detected</Condition><Action>avoid_obstacle</Action></Sequence><Sequence><Selector><Sequence><Condition>pick_up_resource</Condition><Action>change_color_to_green</Action><Action>task_completed</Action></Sequence><Action>continue_movement_agent</Action></Selector></Sequence></Selector></BehaviorTree>



###

USER COMMAND: generate behavior tree to 'Protect the designated target from hazards while completing tasks.' Output only the XML behavior tree without extra text.
INSTRUCTIONS: {'agent_movement_freeze': 'Action node: Freeze the agent’s movement, typically to indicate a stop in activity or end of tasks. Returns: Always returns True, indicating the action was executed.', 'avoid_obstacle': 'Action node: Execute an action to avoid detected obstacles. Returns: Always returns True, indicating the action was executed.', 'change_color_to_green': 'Action node: Change the agent’s color to green, usually indicating a successful operation or state. Returns: Always returns True, indicating the action was executed.', 'change_color_to_white': 'Action node: Change the agent’s color to white, usually indicating a neutral or initial state. Returns: Always returns True, indicating the action was executed.', 'continue_movement_agent': 'Action node: Continue the agent’s movement after it has been previously frozen. Returns: Always returns True, indicating the action was executed.', 'is_agent_in_nest': 'Condition node: Determine if the agent is in the nest. Returns: True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition node: Determine if the agent has formed a line with a reference point at the center of the window. Returns: True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition node: Determine if any obstacles are detected in the vicinity of the agent. Returns: True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition node: Check if the path ahead of the agent is clear of obstacles. Returns: True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Action node: Check if the target is within a detectable distance from the agent’s position. Returns: True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition node: Check if the agent has reached the target. Returns: True if the target is within 15 units of distance, False otherwise.', 'protect_target': 'Action node: Position the agent to block potential hazards from approaching the designated target. Returns: Always returns True, indicating the action was executed.', 'task_completed': 'Action node: Signal that the agent has completed its designated task by freezing movement and updating state. Returns: Always returns True, indicating that the task completion action was executed.', 'wander': 'Action node: Perform a wandering action where the agent moves randomly within the environment. Returns: Always returns True, indicating the action was executed.'}
OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>is_target_detected</Condition><Action>protect_target</Action><Action>change_color_to_green</Action><Action>task_completed</Action></Sequence><Action>continue_movement_agent</Action></Selector><Selector><Sequence><Condition>is_obstacle_detected</Condition><Action>avoid_obstacle</Action></Sequence><Sequence><Condition>is_agent_in_nest</Condition><Action>change_color_to_white</Action></Sequence><Sequence><Condition>is_path_clear</Condition><Action>wander</Action></Sequence></Selector><Selector><Sequence><Condition>is_target_reached</Condition><Action>change_color_to_white</Action></Sequence></Selector></Sequence></BehaviorTree>



###

USER COMMAND: generate behavior tree to 'Navigate
###

USER COMMAND: generate behavior tree for a robot swarm to coordinate and transport objects from one location to another
INSTRUCTIONS: Use only the following behaviors to generate XML Behavior tree based on the user command: {'pick_up_object': 'Action node: Pick up an object located at the current location.
Returns: True if the object was successfully picked up, False otherwise.', 'move_to_destination': 'Action node: Move the robot to the specified destination.
Returns: True if the robot reached the destination, False otherwise.', 'drop_off_object': 'Action node: Drop off the object at the destination location.
Returns: True if the object was successfully dropped off, False otherwise.', 'is_object_picked_up': 'Condition node: Check if the robot is currently carrying an object.
Returns: True if the robot is carrying an object, False otherwise.', 'is_destination_reached': 'Condition node: Check if the robot has reached the specified destination.
Returns: True if the robot has reached the destination, False otherwise.'} to construct a behavior tree in XML format for the given command.
OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>is_object_picked_up</Condition><Condition>is_destination_reached</Condition></Sequence><Sequence><Action>pick_up_object</Action><Action>move_to_destination</Action><Action>drop_off_object</Action></Sequence></Selector></Sequence>
</BehaviorTree>


###

USER COMMAND: generate behavior tree for a robot to interact with human users in a public space
INSTRUCTIONS: Use only the following behaviors to generate XML Behavior tree based on the user command: {'greet_user': 'Action node: Greet the user in a friendly manner.
Returns: Always returns True.', 'answer_question': 'Action node: Answer a question asked by the user.
Returns: True if the question was answered successfully, False otherwise.', 'collect_feedback': 'Action node: Collect feedback from the user about their experience.
Returns: True if the feedback was successfully collected, False otherwise.', 'is_human_present': 'Condition node: Check if there is a human present in the area.
Returns: True if a human is present, False otherwise.'} to construct a behavior tree in XML format for the given command.
OUTPUT:
<BehaviorTree><Sequence><Condition>is_human_present</Condition><Sequence><Action>greet_user</Action><Selector><Action>answer_question</Action><Action>collect_feedback</Action></Selector></Sequence></Sequence>
</BehaviorTree>


###

USER COMMAND: generate behavior tree for a group of swarm robots to work together to construct a structure
INSTRUCTIONS: Use only the following behaviors to generate XML Behavior tree based on the user command: {'move_to_build_site': 'Action node: Move the robot to the designated location for construction.
Returns: True if the robot successfully reached the build site, False otherwise.', 'gather_materials': 'Action node: Collect necessary materials from designated locations.
Returns: True if all necessary materials were collected, False otherwise.', 'construct_structure': 'Action node: Use programmed movements and precision to construct the desired structure.
Returns: True if the structure was successfully constructed, False otherwise.', 'is_material_available': 'Condition node: Check if all necessary materials are available at their designated locations.
Returns: True if all materials are available, False otherwise.', 'is_structure_built': 'Condition node: Check if the structure has been fully constructed.
Returns: True if the structure is built, False otherwise.'} to construct a behavior tree in XML format for the given command.
OUTPUT:
<BehaviorTree><Sequence><Condition>is_material_available</Condition><Condition>is_structure_built</Condition><Sequence><Action>move_to_build_site</Action><Action>gather_materials</Action><Action>construct_structure</Action></Sequence></Sequence>
</BehaviorTree>


###

USER COMMAND: Perform a coordinated search of an unknown environment.Output only the XML behavior tree without extra text.
INSTRUCTIONS: {'align_to_center': 'Action node: Align the agent’s movement to face towards the center of the environment. Returns: Always returns True, indicating the action was executed.', 'explore_horizontal': 'Action node: Move laterally within the environment, alternating between left and right directions. Returns: Always returns True, indicating the action was executed.', 'explore_vertical': 'Action node: Move forward or backward within the environment, alternating between forward and backward directions. Returns: Always returns True, indicating the action was executed.', 'is_agent_near_boundary': 'Condition node: Check if the agent is close to the boundaries of the environment. Returns: True if the agent is within 20 units of distance from the boundaries, False otherwise.', 'is_area_explored': 'Condition node: Check if the entire environment has been explored. Returns: True if all the coordinates within the environment have been visited, False otherwise.', 'is_obstacle_detected': 'Condition node: Determine if any obstacles are detected in the vicinity of the agent. Returns: True if an obstacle is detected, False otherwise.', 'is_target_detected': 'Action node: Check if the target is within a detectable distance from the agent’s position. Returns: True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition node: Check if the agent has reached the target. Returns: True if the target is within 15 units of distance, False otherwise.', 'return_to_start': 'Action node: Return to the starting point of the exploration. Returns: Always returns True, indicating the action was executed.', 'set_explored': 'Action node: Update the agent’s explored coordinates to reflect the current position. Returns: Always returns True, indicating the action was executed.'}
OUTPUT:
<BehaviorTree><Sequence><Action>set_explored</Action><Selector><Sequence><Condition>is_area_explored</Condition><Action>return_to_start</Action></Sequence><Selector><Sequence><Action>explore_horizontal</Action><Condition>is_agent_near_boundary</Condition></Sequence><Selector><Action>explore_vertical</Action><Condition>is_agent_near_boundary</Condition></Selector></Selector></Selector></BehaviorTree>



###

USER COMMAND: Collect resources and transport them to a designated location.
INSTRUCTIONS: {'collect_resource': 'Action node: Collect a resource from the current location and store it for transport. Returns: True once the resource has been successfully collected.', 'deposit_resource': 'Action node: Transport the collected resource to the designated location. Returns: True once the resource has been successfully delivered.', 'find_resource': 'Action node: Search for resources within the environment. Returns: True once a resource has been located within a detectable distance.', 'is_resource_collected': 'Condition node: Check if a resource has been successfully collected by the agent. Returns: True if a resource has been collected, False otherwise.', 'is_resource_deposited': 'Condition node: Check if a resource has been successfully deposited at the designated location. Returns: True if a resource has been delivered, False otherwise.', 'is_resource_nearby': 'Condition node: Check if a resource is within a detectable distance from the agent’s current position. Returns: True if a resource is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition node: Check if the agent has reached the designated location for resource delivery. Returns: True if the target location is within 15 units of distance, False otherwise.', 'move_towards_target': 'Action node: Move towards the designated location for resource delivery. Returns: Always returns True, indicating the action was executed.', 'pick_up_resource': 'Action node: Pick up the located resource at the current position. Returns: Always returns True, indicating the action was executed.'}
OUTPUT:
<BehaviorTree><Sequence><Action>find_resource</Action><Selector><Sequence><Condition>is_resource_nearby</Condition><Action>pick_up_resource</Action><Condition>is_resource_collected</Condition><Action>deposit_resource</Action><Condition>is_target_reached</Condition></Sequence><Selector><Action>move_towards_target</Action><Condition>is_resource_nearby</Condition></Selector></Selector></Sequence></BehaviorTree>



###

USER COMMAND: Coordinate multiple robots to work together to complete a task.
INSTRUCTIONS: {'assign_task': 'Action node: Assign a specific task to each robot within the swarm. Returns: True once all robots have been assigned a task.', 'collect_resource': 'Action node: Collect a resource from the current location and store it for transport. Returns: True once the resource has been successfully collected.', 'is_robot_available': 'Condition node: Check if a robot is available for a new task. Returns: True if a robot is not currently assigned a task, False otherwise.', 'move_to_location': 'Action node: Move towards a designated location within the environment. Returns: Always returns True, indicating the action was executed.', 'return_to_base': 'Action node: Return to the designated base location for resource storage and task completion. Returns: Always returns True, indicating the action was executed.', 'set_task_complete': 'Action node: Signal that the assigned task has been successfully completed. Returns: Always returns True, indicating the action was executed.'}
OUTPUT:
<BehaviorTree><Sequence><Action>assign_task</Action><Selector><Sequence><Condition>is_robot_available</Condition><Sequence><Action>collect_resource</Action><Action>move_to_location</Action><Condition>is_target_reached</Condition><Action>return_to_base</Action><Action>set_task_complete</Action></Sequence></Sequence></Selector></Sequence></BehaviorTree>


###

USER COMMAND: Vary patrol routes for each robot in the swarm to increase coverage of the area.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: randomize_route: Action node: Randomly select a new patrol route for the current robot. Returns: True if a new route was successfully selected, False otherwise. is_patrol_complete: Condition node (see above instructions). move_to_next_waypoint: Action node (see above instructions).
OUTPUT:
<BehaviorTree><Sequence><Condition>is_patrol_complete</Condition><Sequence><Action>randomize_route</Action><Action>move_to_next_waypoint</Action></Sequence></Sequence></BehaviorTree>



###

USER COMMAND: Coordinate with other robots to form a protective barrier around a central object.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: get_position: Action node: Move to a designated location to form the protective barrier. Returns: True if the robot successfully reached the designated location, False otherwise. check_for_other_robots: Condition node: Check if other robots have also formed the protective barrier. Returns: True if all robots are in position, False otherwise. form_barrier: Action node: Coordinate with other robots to form the protective barrier. Returns: True if the barrier is successfully formed, False otherwise.
OUTPUT:
<BehaviorTree><Sequence><Action>get_position</Action><Condition>check_for_other_robots</Condition><Action>form_barrier</Action></Sequence></BehaviorTree>



###

USER COMMAND: Collect resources scattered around the environment and return them to a designated storage area.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: find_resource: Action node: Search the nearby environment for resources. Returns: True if resources were found, False otherwise. collect_resource: Action node: Collect the resources and hold onto them. Returns: True if the resources were successfully collected, False otherwise. return_to_storage: Action node: Return to the designated storage area. Returns: True if the robot successfully reached the storage area, False otherwise. is_storage_full: Condition node: Check if the storage area is already full. Returns: True if it is full, False otherwise.
OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Action>find_resource</Action><Action>collect_resource</Action></Sequence><Sequence><Condition>is_storage_full</Condition><Action>wait</Action></Sequence></Selector><Action>return_to_storage</Action></Sequence></BehaviorTree>


###

USER COMMAND: generate behavior tree to 'Gather resources, deliver them to the designated location, and then return to the starting point.'Output only the XML behavior tree without extra text.
INSTRUCTIONS: {'agent_movement_freeze': 'Action node: Freeze the agent’s movement, typically to indicate a stop in activity or end of tasks. Returns: Always returns True, indicating the action was executed.', 'avoid_obstacle': 'Action node: Execute an action to avoid detected obstacles. Returns: Always returns True, indicating the action was executed.', 'change_color_to_green': 'Action node: Change the agent’s color to green, usually indicating a successful operation or state. Returns: Always returns True, indicating the action was executed.', 'change_color_to_white': 'Action node: Change the agent’s color to white, usually indicating a neutral or initial state. Returns: Always returns True, indicating the action was executed.', 'continue_movement_agent': 'Action node: Continue the agent’s movement after it has been previously frozen. Returns: Always returns True, indicating the action was executed.', 'gather_resources': 'Action node: Collect nearby resources and add them to the agent’s inventory. Returns: Always returns True, indicating the action was executed.', 'is_agent_at_start': 'Condition node: Determine if the agent has returned to its starting point. Returns: True if the agent is back at its starting point, False otherwise.', 'is_agent_carrying_resources': 'Condition node: Check if the agent is currently carrying resources in its inventory. Returns: True if the agent is carrying resources, False otherwise.', 'is_agent_in_nest': 'Condition node: Determine if the agent is in the nest. Returns: True if the agent is in the nest, False otherwise.', 'is_obstacle_detected': 'Condition node: Determine if any obstacles are detected in the vicinity of the agent. Returns: True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition node: Check if the path ahead of the agent is clear of obstacles. Returns: True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Action node: Check if the designated location for resource delivery is within a detectable distance from the agent’s position. Returns: True if the designated location is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition node: Check if the agent has reached the designated location for resource delivery. Returns: True if the designated location is within 15 units of distance, False otherwise.', 'task_completed': 'Action node: Signal that the agent has completed its designated task by freezing movement and updating state. Returns: Always returns True, indicating that the task completion action was executed.', 'return_to_start': 'Action node: Move the agent back to its starting point. Returns: Always returns True, indicating the action was executed.'}
OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>is_agent_carrying_resources</Condition> <Action>change_color_to_green</Action> </Sequence> <Action>gather_resources</Action> </Selector> <Selector> <Sequence> <Condition>is_target_detected</Condition> <Action>change_color_to_white</Action> <Action>task_completed</Action> </Sequence> <Action>return_to_start</Action> </Selector> </Sequence> </BehaviorTree>



###

USER COMMAND: generate behavior tree to 'Search for an object, pick it up, and return it to the designated drop-off location.'Output only the XML behavior tree without extra text.
INSTRUCTIONS: {'agent_movement_freeze': 'Action node: Freeze the agent�s movement, typically to indicate a stop in activity or end of tasks. Returns: Always returns True, indicating the action was executed.', 'avoid_obstacle': 'Action node: Execute an action to avoid detected obstacles. Returns: Always returns True, indicating the action was executed.', 'carry_object': 'Action node: Command the agent to pick up and carry the designated object. Returns: Always returns True, indicating the action was executed.', 'change_color_to_green': 'Action node: Change the agent�s color to green, usually indicating a successful operation or state. Returns: Always returns True, indicating the action was executed.', 'change_color_to_white': 'Action node: Change the agent�s color to white, usually indicating a neutral or initial state. Returns: Always returns True, indicating the action was executed.', 'continue_movement_agent': 'Action node: Continue the agent�s movement after it has been previously frozen. Returns: Always returns True, indicating the action was executed.', 'drop_object': 'Action node: Command the agent to drop the object it is carrying. Returns: Always returns True, indicating the action was executed.', 'find_object': 'Action node: Use sensor data to locate the designated object. Returns: True if the object is detected, False otherwise.', 'is_object_carried': 'Condition node: Determine if the agent is currently carrying an object. Returns: True if the agent is carrying an object, False otherwise.', 'is_object_in_dropoff': 'Condition node: Check if the agent is in the designated drop-off location for the object. Returns: True if the agent is within 5 units of distance from the location, False otherwise.', 'is_obstacle_detected': 'Condition node: Determine if any obstacles are detected in the vicinity of the agent. Returns: True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition node: Check if the path ahead of the agent is clear of obstacles. Returns: True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Action node: Check if the target (object) is within a detectable distance from the agent�s position. Returns: True if the object is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition node: Check if the agent has reached the target (object). Returns: True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action node: Signal that the agent has completed its designated task by freezing movement and updating state. Returns: Always returns True, indicating that the task completion action was executed.', 'wander': 'Action node: Perform a wandering action where the agent moves randomly within the environment. Returns: Always returns True, indicating the action was executed.'}
OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>is_object_carried</Condition> <Action>change_color_to_green</Action> </Sequence> <Selector> <Sequence> <Condition>is_object_in_dropoff</Condition> <Action>drop_object</Action> <Action>task_completed</Action> </Sequence> <Selector> <Sequence> <Action>change_color_to_white</Action> <Action>find_object</ 

###

USER COMMAND: Explore the environment and collect resources. If resources run low, return to base and deposit them before continuing exploration.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: explore: Action node - Represents the behavior of exploring the environment. collect_resources: Action node - Represents the behavior of collecting resources. monitor_resources: Action node - Continuously checks the level of resources. return_to_base: Action node - Makes the agent return to the base. deposit_resources: Action node - Makes the agent deposit resources at the base. is_resources_low: Condition node - Checks if the level of resources is below a specific threshold.
OUTPUT:
<BehaviorTree><Selector><Sequence><Action>explore</Action><Action>collect_resources</Action></Sequence><Sequence><Action>monitor_resources</Action><Condition>is_resources_low</Condition><Sequence><Action>return_to_base</Action><Action>deposit_resources</Action></Sequence></Sequence></Selector></BehaviorTree>



###

USER COMMAND: Coordinate with other robots to form a defensive formation. If attacked, retaliate before resuming formation.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: coordinate_formation: Subtree node - Represents a behavior tree for coordinating with other robots. form_defense: Action node - Represents the behavior of forming a defensive formation. attack: Action node - Represents the behavior of attacking. monitor_attacks: Action node - Continuously checks for attacks. retaliate: Action node - Makes the agent retaliate when attacked.
OUTPUT:
<BehaviorTree><Sequence><Action>coordinate_formation</Action><Selector><Sequence><Action>form_defense</Action><Action>attack</Action></Sequence><Sequence><Action>monitor_attacks</Action><Action>retaliate</Action></Sequence></Selector></Sequence></BehaviorTree>



###

USER COMMAND: Search and rescue mission. If a survivor is found, carry them to safety and return to continue searching. If attacked, defend yourself and resume search.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: search_rescue: Action node - Represents the behavior of searching for survivors. carry: Action node - Represents the behavior of carrying survivors. return_to_base: Action node - Makes the agent return to the base. monitor_attacks: Action node (same as before). defend: Action node - Represents the behavior of defending. drop_survivor: Action node - Makes the agent drop the survivor. is_survivor_found: Condition node - Checks if a survivor has been found.
OUTPUT:
<BehaviorTree><Selector><Sequence><Action>search_rescue</Action><Condition>is_survivor_found</Condition><Sequence><Action>carry</Action><Action>return_to_base</Action></Sequence></Sequence><Sequence><Action>monitor_attacks</Action><Action>defend</Action></Sequence></Selector></BehaviorTree>


###

USER COMMAND: generate behavior tree to 'Avoid obstacles and reach the target, changing color to red if an obstacle is hit.' Output only the XML behavior tree without extra text.
INSTRUCTIONS: {'agent_movement_freeze': 'Action node: Freeze the agent’s movement, typically to indicate a stop in activity or end of tasks. Returns: Always returns True, indicating the action was executed.', 'avoid_obstacle': 'Action node: Execute an action to avoid detected obstacles. Returns: Always returns True, indicating the action was executed.', 'change_color_to_red': 'Action node: Change the agent’s color to red, usually indicating a collision or error. Returns: Always returns True, indicating the action was executed.', 'continue_movement_agent': 'Action node: Continue the agent’s movement after it has been previously frozen. Returns: Always returns True, indicating the action was executed.', 'is_agent_in_nest': 'Condition node: Determine if the agent is in the nest. Returns: True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition node: Determine if the agent has formed a line with a reference point at the center of the window. Returns: True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition node: Determine if any obstacles are detected in the vicinity of the agent. Returns: True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition node: Check if the path ahead of the agent is clear of obstacles. Returns: True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Action node: Check if the target is within a detectable distance from the agent’s position. Returns: True if the target is within 20 units of distance, False otherwise.', 'task_completed': 'Action node: Signal that the agent has completed its designated task by freezing movement and updating state. Returns: Always returns True, indicating that the task completion action was executed.', 'wander': 'Action node: Perform a wandering action where the agent moves randomly within the environment. Returns: Always returns True, indicating the action was executed.'}
OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>is_obstacle_detected</Condition> <Action>avoid_obstacle</Action> <Action>change_color_to_red</Action> </Sequence> <Action>wander</Action> </Selector> <Sequence> <Condition>is_target_detected</Condition> <Action>task_completed</Action> </Sequence> </Sequence> </BehaviorTree>



###

USER COMMAND: generate behavior tree to 'Patrol the area by wandering and occasionally stopping to check for obstacles.' Output only the XML behavior tree without extra text.
INSTRUCTIONS: {'agent_movement_freeze': 'Action node: Freeze the agent’s movement, typically to indicate a stop in activity or end of tasks. Returns: Always returns True, indicating the action was executed.', 'avoid_obstacle': 'Action node: Execute an action to avoid detected obstacles. Returns: Always returns True, indicating the action was executed.', 'continue_movement_agent': 'Action node: Continue the agent’s movement after it has been previously frozen. Returns: Always returns True, indicating the action was executed.', 'is_agent_in_nest': 'Condition node: Determine if the agent is in the nest. Returns: True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition node: Determine if the agent has formed a line with a reference point at the center of the window. Returns: True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition node: Determine if any obstacles are detected in the vicinity of the agent. Returns: True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition node: Check if the path ahead of the agent is clear of obstacles. Returns: True if no obstacles are detected ahead, False if obstacles are present.', 'task_completed': 'Action node: Signal that the agent has completed its designated task by freezing movement and updating state. Returns: Always returns True, indicating that the task completion action was executed.', 'wander': 'Action node: Perform a wandering action where the agent moves randomly within the environment. Returns: Always returns True, indicating the action was executed.'}
OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>is_obstacle_detected</Condition> <Action>avoid_obstacle</Action> <Action>agent_movement_freeze</Action> </Sequence> <Action>wander</Action> </Selector> <Sequence> <Condition>is_patrol_time</Condition> <Action>agent_movement_freeze</Action> </Sequence> </Sequence> </BehaviorTree>



###

USER COMMAND: generate behavior tree to 'Collect resources and return them to the nest, avoiding enemy robots.' Output only the XML behavior tree without extra text.
INSTRUCTIONS: {'agent_movement_freeze': 'Action node: Freeze the agent’s movement, typically to indicate a stop in activity or end of tasks. Returns: Always returns True, indicating the action was executed.', 'avoid_obstacle': 'Action node: Execute an action to avoid detected obstacles. Returns: Always returns True, indicating the action was executed.', 'continue_movement_agent': 'Action node: Continue the agent’s movement after it has been previously frozen. Returns: Always returns True, indicating the action was executed.', 'detect_enemy': 'Action node: Scan the environment to detect any enemy robots within a detectable distance. Returns: True if an enemy is detected, False otherwise.', 'gather_resource': 'Action node: Collect a resource located within the agent’s reach. Returns: True if a resource is successfully gathered, False otherwise.', 'is_agent_in_nest': 'Condition node: Determine if the agent is in the nest. Returns: True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition node: Determine if the agent has formed a line with a reference point at the center of the window. Returns: True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition node: Determine if any obstacles are detected in the vicinity of the agent. Returns: True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition node: Check if the path ahead of the agent is clear of obstacles. Returns: True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition node: Check if the nest is within a detectable distance from the agent’s position. Returns: True if the nest is within 15 units of distance, False otherwise.', 'return_to_nest': 'Action node: Move towards the nest while avoiding any detected obstacles. If the nest is reached, deposit

###

USER COMMAND: generate behavior tree to 'Collect 10 objects and bring them back to the designated area, then change color to green.' Output only the XML behavior tree without extra text.
INSTRUCTIONS: {'agent_movement_freeze': 'Action node: Freeze the agent’s movement, typically to indicate a stop in activity or end of tasks. Returns: Always returns True, indicating the action was executed.', 'avoid_obstacle': 'Action node: Execute an action to avoid detected obstacles. Returns: Always returns True, indicating the action was executed.', 'change_color_to_green': 'Action node: Change the agent’s color to green, usually indicating a successful operation or state. Returns: Always returns True, indicating the action was executed.', 'change_color_to_white': 'Action node: Change the agent’s color to white, usually indicating a neutral or initial state. Returns: Always returns True, indicating the action was executed.', 'continue_movement_agent': 'Action node: Continue the agent’s movement after it has been previously frozen. Returns: Always returns True, indicating the action was executed.', 'goto_designated_area': 'Action node: Move the agent to the designated area using a predefined path. Returns: Always returns True, indicating the action was executed.', 'grab_object': 'Action node: Pick up an object from the environment and add it to the agent’s collection. Returns: True if the object is successfully picked up, False if no objects are available.', 'is_agent_at_designated_area': 'Condition node: Check if the agent has reached the designated area. Returns: True if the agent is within a 5-unit radius of the designated area, False otherwise.', 'is_object_available': 'Condition node: Check if there are any objects available in the environment. Returns: True if there are objects available, False otherwise.', 'is_object_collected': 'Condition node: Check if the agent has collected 10 objects. Returns: True if 10 objects have been collected, False otherwise.', 'task_completed': 'Action node: Signal that the agent has completed its designated task by freezing movement and updating state. Returns: Always returns True, indicating that the task completion action was executed.', 'wander': 'Action node: Perform a wandering action where the agent moves randomly within the environment. Returns: Always returns True, indicating the action was executed.'}
OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>is_object_available</Condition><Action>grab_object</Action></Sequence><Action>goto_designated_area</Action></Selector><Selector><Condition>is_agent_at_designated_area</Condition><Action>change_color_to_green</Action><Action>task_completed</Action></Selector></Sequence></BehaviorTree>



###

USER COMMAND: generate behavior tree to 'Navigate through a maze and reach the end, then change color to green.' Output only the XML behavior tree without extra text.
INSTRUCTIONS: {'agent_movement_freeze': 'Action node: Freeze the agent’s movement, typically to indicate a stop in activity or end of tasks. Returns: Always returns True, indicating the action was executed.', 'avoid_obstacle': 'Action node: Execute an action to avoid detected obstacles. Returns: Always returns True, indicating the action was executed.', 'change_color_to_green': 'Action node: Change the agent’s color to green, usually indicating a successful operation or state. Returns: Always returns True, indicating the action was executed.', 'change_color_to_white': 'Action node: Change the agent’s color to white, usually indicating a neutral or initial state. Returns: Always returns True, indicating the action was executed.', 'continue_movement_agent': 'Action node: Continue the agent’s movement after it has been previously frozen. Returns: Always returns True, indicating the action was executed.', 'is_end_reached': 'Condition node: Check if the agent has reached the end of the maze. Returns: True if the agent is within a 5-unit radius of the end point, False otherwise.', 'is_obstacle_detected': 'Condition node: Determine if any obstacles are detected in the vicinity of the agent. Returns: True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition node: Check if the path ahead of the agent is clear of obstacles. Returns: True if no obstacles are detected ahead, False if obstacles are present.', 'move_forward': 'Action node: Move the agent forward in a set direction. Returns: Always returns True, indicating the action was executed.', 'turn_left': 'Action node: Turn the agent left by a set degree. Returns: Always returns True, indicating the action was executed.', 'turn_right': 'Action node: Turn the agent right by a set degree. Returns: Always returns True, indicating the action was executed.', 'task_completed': 'Action node: Signal that the agent has completed its designated task by freezing movement and updating state. Returns: Always returns True, indicating that the task completion action was executed.'}
OUTPUT:
<BehaviorTree><Sequence><Selector><Selector><Condition>is_obstacle_detected</Condition><Action>avoid_obstacle</Action></Selector><Action>move_forward</Action></Selector><Sequence><Condition>is_end_reached</Condition><Action>change_color_to_green</Action><Action>task_completed</Action></Sequence></Sequence></BehaviorTree>



###

USER COMMAND: generate behavior tree to 'Coordinate with other agents to surround a target.'Output only the XML behavior tree without extra text.
INSTRUCTIONS: {'agent_movement_freeze': 'Action node: Freeze the agent’s movement, typically to indicate a stop in activity or end of tasks. Returns: Always returns True, indicating the action was executed.', 'agent_movement_swarm': 'Action node: Move the agent in a coordinated swarm motion, following the other agents in the swarm. Returns: Always returns True, indicating the action was executed.', 'avoid_obstacle': 'Action node: Execute an action to avoid detected obstacles. Returns: Always returns True, indicating the action was executed.', 'change_color_to_green': 'Action node: Change the agent’s color to green, usually indicating a successful operation or state. Returns: Always returns True, indicating the action was executed.', 'continue_movement_agent': 'Action node: Continue the agent’s movement after it has been previously frozen. Returns: Always returns True, indicating the action was executed.', 'is_swarm_in_position': 'Condition node: Check if the swarm has successfully encircled the target. Returns: True if all agents are within a 5-unit radius of the target, False otherwise.', 'is_target_detected': 'Condition node: Check if the target is within a detectable distance from the agent’s position. Returns: True if the target is within 20 units of distance, False otherwise.', 'swarm_encircle_target': 'Action node: Move each agent to 

###

USER COMMAND: Bring all robots to a central point, ensure their collective color matches and execute a synchronized dance routine.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: gather_robots: Subtree node (same as before). check_color_match: Action node (same as before). synchronize_dance: Subtree node (same as before). change_color_to_match: Action node (same as before). robot_reaches_goal: Condition node (same as before).
OUTPUT:
<BehaviorTree><Sequence><Subtree>gather_robots</Subtree><Selector><Sequence><Action>check_color_match</Action><Condition>robot_reaches_goal</Condition><Action>synchronize_dance</Action><Action>change_color_to_match</Action></Sequence></Selector></Sequence></BehaviorTree>



###

USER COMMAND: Detect the surrounding environment for potential threats and actively avoid them while maintaining a specific distance between robots.
INSTRUCTIONS: {'agent_movement_forward': 'Action node: Move the agent forward. Adjusts the agent’s position by its speed vector. Returns: Always returns True, indicating the action was executed.', 'agent_movement_rotate': 'Action node: Rotate the agent’s orientation by a specified angle. Returns: Always returns True, indicating the action was executed.', 'avoid_collision': 'Action node: Execute an action to avoid detected obstacles. Returns: Always returns True, indicating the action was executed.', 'avoid_vehicles': 'Action node: Execute an action to avoid detected vehicles ahead of the agent’s trajectory. Returns: Always returns True, indicating the action was executed.', 'check_distance_to_obstacle': 'Condition node: Check the distance to the nearest obstacle within the agent’s proximity. Returns: True if an obstacle is within 5 units of distance, False otherwise.', 'check_distance_to_vehicle': 'Condition node: Determine the distance to the nearest vehicle within the agent’s trajectory. Returns: True if a vehicle is within 20 units of distance, False otherwise.', 'is_agent_running': 'Condition node: Check if the agent is currently in motion. Returns: True if the agent is moving, False if it is stationary.', 'is_obstacle_detected': 'Condition node: Determine if any obstacles are detected in the vicinity of the agent. Returns: True if an obstacle is detected, False otherwise.', 'maintain_distance': 'Action node: Direct the agent to maintain a specific distance from a designated target. Returns: True if the agent is maintaining the distance, False otherwise.', 'move_to_center': 'Action node: Move the agent towards the center of the environment. Returns: Always returns True, indicating the action was executed.', 'reorient_to_center': 'Action node: Orient the agent towards the center of the environment. Returns: Always returns True, indicating the action was executed.', 'task_completed': 'Action node: Signal that the agent has completed its designated task by freezing movement and updating state. Returns: Always returns True, indicating that the task completion action was executed.', 'wander': 'Action node: Perform a wandering action where the agent moves randomly within the environment. Returns: Always returns True, indicating the action was executed.'}
OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>is_obstacle_detected</Condition> <Sequence> <Action>avoid_collision</Action> <Action>avoid_vehicles</Action> <Action>task_completed</Action> </Sequence> </Sequence> <Action>move_to_center</Action> <Action>reorient_to_center</Action> <Action>maintain_distance</Action> </Selector> </Sequence> </BehaviorTree>



###

USER COMMAND: Coordinate actions with other robots in the swarm to gather and transport a large object to a designated location.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: synchronize_position: Action node (same as before). communicate: Subtree node (same as before). lift_object: Action node (same as before). transport_object: Action node (same as before). drop_off_object: Action node (same as before).
OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Action>synchronize_position</Action><Subtree>communicate</Subtree><Action>lift_object</Action><Action>transport_object</Action><Action>drop_off_object</Action></Sequence></Selector></Sequence></BehaviorTree>


###

USER COMMAND: generate behavior tree for a swarm of robots to coordinate and complete a task
INSTRUCTIONS: Use only the following behaviors to generate XML Behavior tree based on the user command: {'move_to_goal': 'Action node: Move the robot towards a specific goal point.
Returns: True if the robot successfully reached the goal, False otherwise.', 'check_resource_availability': 'Action node: Check if necessary resources are available for the task at hand.
Returns: True if all resources are available, False otherwise.', 'collect_resource': 'Action node: Collect a required resource from the environment.
Returns: True if the resource was successfully collected, False otherwise.', 'is_task_complete': 'Condition node: Check if the overall task is completed by all robots.
Returns: True if the task is complete, False otherwise.', 'is_resource_collected': 'Condition node: Check if a required resource has been collected.
Returns: True if the resource has been collected, False otherwise.'}  to construct a behavior tree in XML format for the given command.
OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>is_resource_collected</Condition><Action>move_to_goal</Action></Sequence><Sequence><Condition>check_resource_availability</Condition><Action>collect_resource</Action></Sequence></Selector><Condition>is_task_complete</Condition></Sequence></BehaviorTree>



###

USER COMMAND: generate behavior tree for a robot to autonomously navigate through a complex maze
INSTRUCTIONS: Use only the following behaviors to generate XML Behavior tree based on the user command: {'keep_moving_forward': 'Action node: Continue moving forward until a change in direction is required.
Returns: True if the robot successfully moved forward, False otherwise.', 'turn_left': 'Action node: Turn the robot 90 degrees to the left.
Returns: Always returns True.', 'turn_right': 'Action node: Turn the robot 90 degrees to the right.
Returns: Always returns True.', 'detect_obstacle': 'Condition node: Check if an obstacle is present in the current direction of the robot.
Returns: True if an obstacle is detected, False otherwise.', 'is_exit_reached': 'Condition node: Check if the robot has reached the exit of the maze.
Returns: True if the exit is reached, False otherwise.'}  to construct a behavior tree in XML format for the given command.
OUTPUT:
<BehaviorTree><Sequence><Condition>is_exit_reached</Condition><Selector><Sequence><Condition>detect_obstacle</Condition><Selector><Sequence><Action>turn_left</Action><Action>turn_right</Action></Selector><Action>keep_moving_forward</Action></Sequence><Action>move_to_next_area</Action></Selector></Sequence></BehaviorTree>



###

USER COMMAND: generate behavior tree for a swarm of robots to efficiently distribute resources among each other
INSTRUCTIONS: Use only the following behaviors to generate XML Behavior tree based on the user command: {'distribute_resource': 'Action node: Distribute a certain resource to another robot within the swarm.
Returns: True if the resource was successfully distributed, False otherwise.', 'check_resource_quantity': 'Condition node: Check if there is enough of a particular resource for distribution.
Returns: True if there is enough, False otherwise.', 'move_to_nearest_resource': 'Action node: Move the robot to the nearest available resource.
Returns: True if the robot successfully moved to the resource, False otherwise.', 'is_distribution_complete': 'Condition node: Check if all necessary resources have been distributed among the swarm.
Returns: True if distribution is complete, False otherwise.', 'is_resource_needed': 'Condition node: Check if a specific resource is needed by another robot in the swarm.
Returns: True if the resource is needed, False otherwise.'}  to construct a behavior tree in XML format for the given command.
OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>is_resource_needed</Condition><Action>move_to_nearest_resource</Action></Sequence><Sequence><Condition>check_resource_quantity</Condition><Action>distribute_resource</Action></Sequence></Selector><Condition>is_distribution_complete</Condition></Sequence></BehaviorTree>


###

USER COMMAND: generate behavior tree to 'Navigate through a maze, avoiding obstacles and reaching the end goal.'Output only the XML behavior tree without extra text.
INSTRUCTIONS: {'agent_movement_freeze': 'Action node: Freeze the agent’s movement, typically to indicate a stop in activity or end of tasks. Returns: Always returns True, indicating the action was executed.', 'avoid_obstacle': 'Action node: Execute an action to avoid detected obstacles. Returns: Always returns True, indicating the action was executed.', 'change_color_to_green': 'Action node: Change the agent’s color to green, usually indicating a successful operation or state. Returns: Always returns True, indicating the action was executed.', 'change_color_to_white': 'Action node: Change the agent’s color to white, usually indicating a neutral or initial state. Returns: Always returns True, indicating the action was executed.', 'continue_movement_agent': 'Action node: Continue the agent’s movement after it has been previously frozen. Returns: Always returns True, indicating the action was executed.', 'form_line': 'Action node: Direct the agent to form a line towards the center of the window. This function adjusts the agent’s position to align it with the center. Returns: Always returns True, indicating the action was executed.', 'is_agent_in_nest': 'Condition node: Determine if the agent is in the nest. Returns: True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition node: Determine if the agent has formed a line with a reference point at the center of the window. Returns: True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition node: Determine if any obstacles are detected in the vicinity of the agent. Returns: True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition node: Check if the path ahead of the agent is clear of obstacles. Returns: True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Action node: Check if the target is within a detectable distance from the agent’s position. Returns: True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition node: Check if the agent has reached the target. Returns: True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action node: Signal that the agent has completed its designated task by freezing movement and updating state. Returns: Always returns True, indicating that the task completion action was executed.', 'wander': 'Action node: Perform a wandering action where the agent moves randomly within the environment. Returns: Always returns True, indicating the action was executed.'}
OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>is_obstacle_detected</Condition><Action>avoid_obstacle</Action></Sequence><Action>continue_movement_agent</Action></Selector><Sequence><Condition>is_target_detected</Condition><Action>change_color_to_green</Action><Action>task_completed</Action></Sequence></Sequence></BehaviorTree>



###

USER COMMAND: generate behavior tree to 'Collect resources while avoiding enemy robots, and bring them back to the base.'Output only the XML behavior tree without extra text.
INSTRUCTIONS: {'agent_movement_freeze': 'Action node: Freeze the agent’s movement, typically to indicate a stop in activity or end of tasks. Returns: Always returns True, indicating the action was executed.', 'avoid_obstacle': 'Action node: Execute an action to avoid detected obstacles. Returns: Always returns True, indicating the action was executed.', 'change_color_to_green': 'Action node: Change the agent’s color to green, usually indicating a successful operation or state. Returns: Always returns True, indicating the action was executed.', 'change_color_to_white': 'Action node: Change the agent’s color to white, usually indicating a neutral or initial state. Returns: Always returns True, indicating the action was executed.', 'continue_movement_agent': 'Action node: Continue the agent’s movement after it has been previously frozen. Returns: Always returns True, indicating the action was executed.', 'form_line': 'Action node: Direct the agent to form a line towards the center of the window. This function adjusts the agent’s position to align it with the center. Returns: Always returns True, indicating the action was executed.', 'is_agent_in_nest': 'Condition node: Determine if the agent is in the nest. Returns: True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition node: Determine if the agent has formed a line with a reference point at the center of the window. Returns: True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition node: Determine if any obstacles are detected in the vicinity of the agent. Returns: True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition node: Check if the path ahead of the agent is clear of obstacles. Returns: True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Action node: Check if the target is within a detectable distance from the agent’s position. Returns: True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition node: Check if the agent has reached the target. Returns: True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action node: Signal that the agent has completed its designated task by freezing movement and updating state. Returns: Always returns True, indicating that the task completion action was executed.', 'wander': 'Action node: Perform a wandering action where the agent moves randomly within the environment. Returns: Always returns True, indicating the action was executed.'}
OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>is_target_detected</Condition><Action>change_color_to_green</Action><Action>task_completed</Action></Sequence><Action>wander</Action></Selector><Sequence><Selector><Sequence><Condition>is_obstacle_detected</Condition><Action>avoid_obstacle</Action></Sequence><Action>continue_movement_agent</Action></Selector><Condition>is_agent_in_nest</Condition><Action>change_color_to_white</Action><Action>agent_movement_freeze</Action></Sequence></Sequence></BehaviorTree>



###

USER COMMAND: generate behavior tree to 'Follow a specific path while coordinating with other robots, and reach the final destination together.'Output only the XML behavior tree without extra text.
INSTRUCTIONS: {'agent_movement_freeze': 'Action node: Freeze the agent’s movement, typically to indicate a stop in activity or end of tasks. Returns: Always returns True, indicating the action was executed.', 'avoid_obstacle 

###

USER COMMAND: Coordinate with other robots to surround and capture a moving target.
INSTRUCTIONS: {'move_to_target': 'Action node: Move towards the designated target location. Returns: Always returns True, indicating the movement towards the target was executed.', 'surround_target': 'Action node: Coordinate with other robots to surround and block the target’s movement. Returns: True if the target is successfully surrounded, False otherwise.', 'capture_target': 'Action node: Physically capture the target and hold it in place. Returns: True if the target is successfully captured, False otherwise.', 'disperse': 'Action node: Move away from the target and disperse to avoid collisions with other robots. Returns: Always returns True, indicating the action was executed.', 'is_target_reached': 'Condition node: Check if the agent has reached the target. Returns: True if the target is within 5 units of distance, False otherwise.', 'is_target_captured': 'Condition node: Check if the target has been successfully captured by the robot. Returns: True if the target is physically held in place, False otherwise.', 'is_surrounded': 'Condition node: Check if the target is completely surrounded, without any gaps for the target to escape. Returns: True if all sides of the target are blocked, False otherwise.'}
OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Action>move_to_target</Action><Action>surround_target</Action></Sequence><Sequence><Condition>is_surrounded</Condition><Action>capture_target</Action></Sequence></Selector><Sequence><Condition>is_target_reached</Condition><Action>disperse</Action></Sequence></Sequence></BehaviorTree>

 

###

USER COMMAND: Conduct a search and rescue mission in a disaster zone by navigating through obstacles and locating survivors.
INSTRUCTIONS: {'navigate_obstacles': 'Action node: Navigate through obstacles and avoid collisions. Returns: Always returns True, indicating the action was executed.', 'search_area': 'Action node: Search the designated area for survivors. Returns: True if survivors are found, False otherwise.', 'rescue_survivors': 'Action node: Perform physical actions to rescue survivors and bring them to safety. Returns: True if survivors are successfully rescued and brought to safety, False otherwise.', 'check_survivor_health': 'Condition node: Check the health status of the rescued survivors. Returns: True if the health of the survivor is above a certain threshold, False otherwise.', 'is_area_cleared': 'Condition node: Check if the designated search area is cleared of obstacles. Returns: True if the area is cleared, False otherwise.', 'is_survivor_rescued': 'Condition node: Check if the survivor has been successfully rescued and brought to safety. Returns: True if the survivor is currently in a safe location, False otherwise.', 'is_victim_found': 'Condition node: Check if the robot has detected a survivor within a certain distance. Returns: True if a survivor is detected within 10 units of distance, False otherwise.'}
OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Action>navigate_obstacles</Action><Sequence><Condition>is_area_cleared</Condition><Action>search_area</Action><Selector><Sequence><Condition>is_victim_found</Condition><Action>rescue_survivors</Action></Sequence><Action>check_survivor_health</Action></Selector></Sequence></Sequence><Action>search_area</Action></Selector></Sequence></BehaviorTree>



###

USER COMMAND: Coordinate with other drones to gather and transport large objects across different locations.
INSTRUCTIONS: {'gather_objects': 'Action node: Gather large objects and hold on to them. Returns: True if the objects are successfully gathered, False otherwise.', 'transport_objects': 'Action node: Coordinate with other drones to transport and place the objects at a designated location. Returns: True if objects are successfully transported and placed at the designated location, False otherwise.', 'wait_for_other_drones': 'Condition node: Check if all other drones have successfully gathered and are ready to transport the objects. Returns: True if all other drones are ready, False otherwise.', 'is_target_reached': 'Condition node: Check if the agent has reached the designated location. Returns: True if the target location is within 5 units of distance, False otherwise.', 'is_objects_placed': 'Condition node: Check if the large objects have been successfully placed in the designated location. Returns: True if the objects are in the designated location, False otherwise.'}
OUTPUT:
<BehaviorTree><Sequence><Sequence><Selector><Sequence><Action>gather_objects</Action><Action>transport_objects</Action><Condition>wait_for_other_drones</Condition></Sequence><Sequence><Condition>is_target_reached</Condition><Action>transport_objects</Action></Sequence></Selector><Action>wait_for_other_drones</Action></Sequence><Sequence><Condition>is_objects_placed</Condition><Action>transport_objects</Action></Sequence></Sequence></BehaviorTree>



###

USER COMMAND: generate behavior tree to 'Collect resources, build shelter, and defend against threats.' Output only the XML behavior tree without extra text.
INSTRUCTIONS: {'agent_movement_freeze': 'Action node: Freeze the agent’s movement, typically to indicate a stop in activity or end of tasks. Returns: Always returns True, indicating the action was executed.', 'avoid_obstacle': 'Action node: Execute an action to avoid detected obstacles. Returns: Always returns True, indicating the action was executed.', 'build_shelter': 'Action node: Construct a shelter to protect the agent. Returns: Always returns True, indicating the action was executed.', 'collect_resources': 'Action node: Gather resources from the environment. Returns: True if resources were successfully collected, False otherwise.', 'defend': 'Action node: Defend against potential threats. Returns: Always returns True, indicating the action was executed.', 'detect_threat': 'Condition node: Check for any potential threats in the environment. Returns: True if a threat is detected, False otherwise.', 'is_agent_visible': 'Condition node: Determine if the agent is within visible range. Returns: True if the agent is visible, False otherwise.', 'is_shelter_built': 'Condition node: Check if the shelter has been constructed. Returns: True if the shelter is built, False otherwise.', 'is_threat_near': 'Condition node: Check if a threat is within a certain proximity of the agent. Returns: True if a threat is detected within 10 units of distance, False otherwise.', 'navigate_to_resource': 'Action node: Move towards a resource in the environment. Returns: True if the agent is successfully moving towards the resource, False otherwise.', 'navigate_to_shelter': 'Action node: Move towards the shelter. Returns: True if the agent is successfully moving towards the shelter, False otherwise.', 'task_completed': 'Action node: Signal that the agent has completed its designated task by freezing movement and updating state. Returns: Always returns True, indicating that the task completion action was executed.'}
OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>collect_resources</Condition> <Navigator> <Selector> <Sequence> <Condition>is_shelter_built</Condition> <Navigator> <Selector> <Sequence> <Condition>is_agent_visible</Condition> <Action>defend</Action> <Action>navigate_to_shelter</Action> </Sequence> <Action>build_shelter</Action> <Action>agent_movement_freeze</Action> </Navigator> <Action>navigate_to_resource</Action> <Action>agent_movement_freeze</Action> </Navigator> <Action>task_completed</Action> </Sequence> <Action>wander</Action> </Selector> </Sequence> </BehaviorTree>



###

USER COMMAND: generate behavior tree to 'Gather intel, plan attack, and execute attack on enemy base.' Output only the XML behavior tree without extra text.
INSTRUCTIONS: {'agent_movement_freeze': 'Action node: Freeze the agent’s movement, typically to indicate a stop in activity or end of tasks. Returns: Always returns True, indicating the action was executed.', 'avoid_obstacle': 'Action node: Execute an action to avoid detected obstacles. Returns: Always returns True, indicating the action was executed.', 'collect_intel': 'Action node: Gather information on enemy base. Returns: True if intel was successfully collected, False otherwise.', 'execute_attack': 'Action node: Execute an attack on the enemy base. Returns: True if the attack was successful, False otherwise.', 'navigate_to_enemy_base': 'Action node: Move towards the enemy base. Returns: True if the agent is successfully moving towards the enemy base, False otherwise.', 'plan_attack': 'Action node: Create a plan of attack based on gathered intel. Returns: True if a plan was successfully created, False otherwise.', 'is_attack_planned': 'Condition node: Determine if a plan of attack has been created. Returns: True if a plan is in place, False otherwise.', 'is_enemy_base_reachable': 'Condition node: Check if the enemy base is within reachable distance. Returns: True if the enemy base is within 20 units of distance, False otherwise.', 'is_intel_gathered': 'Condition node: Check if intel has been successfully gathered. Returns: True if intel is available, False otherwise.', 'is_obstacle_detected': 'Condition node: Determine if any obstacles are detected in the vicinity of the agent. Returns: True if an obstacle is detected, False otherwise.'}
OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Navigator> <Selector> <Sequence> <Condition>is_enemy_base_reachable</Condition> <Action>execute_attack</Action> <Action>agent_movement_freeze</Action> </Sequence> <Action>navigate_to_enemy_base</Action> <Action>agent_movement_freeze</Action> </Navigator> <Condition>is_intel_gathered</Condition> <Navigator> <Sequence> <Condition>is_attack_planned</Condition> <Action>agent_movement_freeze</Action> <Action>navigate_to_enemy_base</Action> <Action>agent_movement_freeze</Action> </Sequence> <Action>collect_intel</Action> <Action>plan_attack</Action> </Navigator> </Sequence> <Action>wander</Action> </Selector> </Sequence> </BehaviorTree>



###

USER COMMAND: generate behavior tree to 'Search for survivors, provide medical assistance, and transport to safety.' Output only the XML behavior tree without extra text.
INSTRUCTIONS: {'agent_movement_freeze': 'Action node: Freeze the agent’s movement, typically to indicate a stop in activity or end of tasks. Returns: Always returns True, indicating the action was executed.', 'avoid_obstacle': 'Action node: Execute an action to avoid detected obstacles. Returns: Always returns True, indicating the action was executed.', 'carry_survivor': 'Action node: Carry a survivor to safety. Returns: True if the survivor was successfully carried to safety, False otherwise.', 'check_for_survivors': 'Action node: Search for survivors in the environment. Returns: True if at least one survivor is found, False otherwise.', 'is_survivor_in_range': 'Condition node: Determine if a survivor is within the agent’s reachable range. Returns: True if a survivor is detected within 20 units of distance, False otherwise.', 'provide_medical_assistance': 'Action node: Provide medical assistance to a survivor. Returns: True if medical assistance was successfully provided, False otherwise.', 'return_to_safety': 'Action node: Return to safety after successfully rescuing survivors. Returns: Always returns True, indicating the action was executed.', 'is_safety_reached': 'Condition node: Check if the agent has reached safety. Returns: True if the agent has reached safety, False otherwise.', 'is_surv(assuming 'call_for_rescue' is another predefined behavior that would trigger a rescue team to come to the current area.)


###

USER COMMAND: generate a behavior tree for a robot to autonomously navigate through a crowded space without colliding with any obstacles or other robots.
INSTRUCTIONS: Provide a detailed
OUTPUT:
<BehaviorTree><Selector><Sequence><Action>scan_for_obstacles</Action><Condition>is_obstacle_detected</Condition><Action>stop_movement</Action></Sequence><Sequence><Action>scan_for_other_robots</Action><Condition>is_robot_detected</Condition><Action>change_path</Action></Sequence><Sequence><Action>continue_movement</Action><Condition>is_obstacle_detected</Condition><Action>stop_movement</Action></Sequence></Selector></BehaviorTree>

(assuming 'scan_for_obstacles' and 'scan_for_other_robots' use predefined behaviors to perform the designated actions.)


###

USER COMMAND: generate a behavior tree for multiple swarm robots to collaboratively complete a construction task.
INSTRUCTIONS: Tailor the task and scenario to the context of swarm robotics, and use a diverse mix of behaviors to reflect the collective actions and coordination of the robots. Ensure that the behavior tree follows a logical sequence of actions and conditions, allowing for decision-making processes that guide the robots’ actions effectively.
OUTPUT:
<BehaviorTree><Selector><Sequence><Selector><Condition>is_material_available</Condition><Action>pick_up_material</Action></Selector><Sequence><Condition>is_position_available</Condition><Action>move_to_position</Action></Sequence></Sequence><Sequence><Action>communicate_with_other_robots</Action><Condition>is_other_robot_moving</Condition><Action>avoid_collision</Action><Action>continue_movement</Action></Sequence><Sequence><Condition>is_tower_built</Condition><Action>stop_movement</Action></Sequence></Selector></BehaviorTree>

(assuming 'is_material_available' and 'is_position_available' are condition nodes, and 'pick_up_material' and 'move_to_position' are actions specific to each role of the robots) 


###

USER COMMAND: generate a behavior tree for a robot to efficiently navigate and collect environmental data in a large field.
INSTRUCTIONS: Use a mix of conditions and actions to handle various tasks and obstacles that the robot may encounter in the field. The behavior tree should prioritize efficiently navigating the field while gathering data, and handle unexpected obstacles or changes in environment.
OUTPUT:
<BehaviorTree><Selector><Sequence><Action>scan_field</Action><Condition>is_hazard_detected</Condition><Action>avoid_hazard</Action></Sequence><Sequence><Action>map_field</Action><Condition>is_terrain_changed</Condition><Action>adjust_movement</Action></Sequence><Sequence><Condition>is_field_mapped</Condition><Action>return_to_start</Action><Condition>is_obstacle_detected</Condition><Action>avoid_obstacle</Action><Action>continue_movement</Action></Sequence></Selector></BehaviorTree>

(assuming 'scan_field' and 'map_field' use predefined behaviors to perform the designated actions.) 

###

USER COMMAND: generate behavior tree for a robot to gather resources and return to base
INSTRUCTIONS: Use only the following behaviors to generate XML Behavior tree based on the user command: {'move_to_resource': 'Action node: Move the robot to the closest available resource.
Returns: True if the robot successfully moved to the resource, False otherwise.', 'gather_resource': 'Action node: Gather the resource at the current location and store it in the robot.
Returns: True if the resource was successfully gathered, False otherwise.', 'return_to_base': 'Action node: Return to the designated base location.
Returns: True if the robot successfully returned to base, False otherwise.', 'is_resource_depleted': 'Condition node: Check if the current resource has been depleted.
Returns: True if the resource is depleted, False otherwise.'} to construct a behavior tree in XML format for the given command.
OUTPUT:
<BehaviorTree><Sequence><Selector><Condition>is_resource_depleted</Condition><Sequence><Action>move_to_resource</Action><Selector><Action>gather_resource</Action><Action>wait</Action></Selector></Sequence></Selector><Action>return_to_base</Action></Sequence></BehaviorTree>



###

USER COMMAND: generate behavior tree for a swarm of robots to work together in a construction project
INSTRUCTIONS: Use only the following behaviors to generate XML Behavior tree based on the user command: {'move_to_location': 'Action node: Move the robot to the designated construction site.
Returns: True if the robot successfully moved to the location, False otherwise.', 'construct': 'Action node: Use tools to assemble and build the designated structure.
Returns: True if the construction was completed successfully, False otherwise.', 'wait_for_materials': 'Action node: Wait for the delivery of necessary building materials.
Returns: True when materials are available, False otherwise.', 'is_structure_complete': 'Condition node: Check if the designated structure has been completed.
Returns: True if the structure is complete, False otherwise.'} to construct a behavior tree in XML format for the given command.
OUTPUT:
<BehaviorTree><Sequence><Condition>is_structure_complete</Condition><Sequence><Selector><Condition>wait_for_materials</Condition><Selector><Action>move_to_location</Action><Action>wait</Action></Selector></Sequence><Action>construct</Action></Sequence></BehaviorTree>



###

USER COMMAND: generate behavior tree for a robot to perform a search and rescue mission
INSTRUCTIONS: Use only the following behaviors to generate XML Behavior tree based on the user command:
{
'explore_area': "Action node: Use sensors and mapping techniques to explore the area surrounding the designated location. Returns: True if the area was successfully explored, False otherwise.",
'rescue_victim': "Action node: Use robotic arms and tools to rescue the victim located at the designated location. Returns: True if the victim was successfully rescued, False otherwise.",
'call_for_help': "Action node: Send a distress signal to other robots in the area. Returns: True if the signal was successfully sent, False otherwise.",
'is_victim_found': "Condition node: Check if a victim has been located at the designated location. Returns: True if a victim is found, False otherwise."} to construct a behavior tree in XML format for the given command.
OUTPUT:
<BehaviorTree><Sequence><Condition>is_victim_found</Condition><Action>rescue_victim</Action></Sequence><Selector><Action>explore_area</Action><Action>call_for_help</Action></Selector></BehaviorTree>


###

USER COMMAND: generate behavior tree to allocate tasks to multiple robots and coordinate their actions
INSTRUCTIONS: {'get_target_task': 'Action node: Assign a robot to the task of reaching the target location. Returns: True if robot is successfully assigned, False otherwise.', 'collect_object_task': 'Action node: Assign a robot to the task of collecting an object from a specified location. Returns: True if robot is successfully assigned, False otherwise.', 'navigate_to_target': 'Action node: Move towards the target location while avoiding obstacles. Returns: True if target is reached, False otherwise.', 'grab_object': 'Action node: Pick up the object from the specified location if it is within reach. Returns: True if object is successfully grabbed, False otherwise.', 'drop_object': 'Action node: Drop the object at the designated location. Returns: True if object is successfully dropped, False otherwise.', 'recharge_battery': 'Action node: Recharge the robot's battery when it reaches a low level. Returns: True if battery is successfully recharged, False otherwise.', 'is_target_reached': 'Condition node: Check if the robot has reached the target location. Returns: True if robot is within a specified distance from the target, False otherwise.', 'is_object_collected': 'Condition node: Check if the robot has successfully picked up the object. Returns: True if robot is holding an object, False otherwise.', 'is_battery_low': 'Condition node: Check if the robot's battery level is below a certain threshold. Returns: True if battery level is low, False otherwise.'}
OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Action>get_target_task</Action><Sequence><Condition>is_target_reached</Condition><Action>recharge_battery</Action></Sequence></Sequence><Sequence><Action>collect_object_task</Action><Sequence><Condition>is_object_collected</Condition><Action>recharge_battery</Action></Sequence></Sequence><Sequence><Condition>is_battery_low</Condition><Action>recharge_battery</Action></Sequence></Selector></Sequence></BehaviorTree>



###

USER COMMAND: generate behavior tree for a robot to follow a person while avoiding obstacles in a crowded environment
INSTRUCTIONS: Use only the following behaviors to generate XML Behavior tree based on the user command: {'follow_person': 'Action node: Move towards the target person while avoiding obstacles. Returns: True if person is being followed, False otherwise.', 'detect_obstacle': 'Action node: Use sensors to detect any obstacles in the path ahead. Returns: True if obstacle is detected, False otherwise.', 'avoid_obstacle': 'Action node: Steer the robot to avoid the obstacle in its path. Returns: True if obstacle is successfully avoided, False otherwise.', 'is_person_detected': 'Condition node: Check if the target person is detected within a certain distance. Returns: True if person is detected, False otherwise.'}
OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>is_person_detected</Condition><Selector><Sequence><Action>follow_person</Action><Sequence><Condition>detect_obstacle</Condition><Action>avoid_obstacle</Action></Sequence></Sequence><Action>avoid_obstacle</Action></Selector></Sequence><Action>avoid_obstacle</Action></Selector></Sequence></BehaviorTree>

 

###

USER COMMAND: generate behavior tree for a swarm of robots to coordinate and search for a lost object
INSTRUCTIONS: {'random_search': 'Action node: Assign a random search pattern to each robot within the specified area. Returns: True if search pattern is successfully assigned, False otherwise.', 'coordinate_search': 'Action node: Tailor the search pattern for each robot to ensure maximum coverage of the specified area. Returns: True if search pattern is successfully coordinated, False otherwise.', 'move_to_location': 'Action node: Move towards a target location while maintaining swarm coordination. Returns: True if target location is reached, False otherwise.', 'detect_obstacle': 'Action node: Use sensors to detect any obstacles in the path ahead. Returns: True if obstacle is detected, False otherwise.', 'avoid_obstacle': 'Action node: Steer the robot to avoid the obstacle in its path. Returns: True if obstacle is successfully avoided, False otherwise.', 'is_target_found': 'Condition node: Check if the lost object has been found by any robot. Returns: True if the object is found, False otherwise.', 'is_location_reached': 'Condition node: Check if the swarm has reached the target location. Returns: True if all robots have reached the location, False otherwise.'}
OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>is_target_found</Condition><Action>move_to_location</Action></Sequence><Sequence><Selector><Action>random_search</Action><Action>coordinate_search</Action></Selector><Sequence><Condition>detect_obstacle</Condition><Action>avoid_obstacle</Action></Sequence></Sequence></Selector><Condition>is_location_reached</Condition></Sequence></BehaviorTree>


###

USER COMMAND: Create behavior tree for a swarm of robots to collect samples from different areas
INSTRUCTIONS: Use the following actions and conditions to generate an XML behavior tree:{'move_to_sample': 'Action node: Move the robot to a designated sample location.
Returns: True if the robot successfully moved to the sample location, False otherwise.', 'collect_sample': 'Action node: Collect a sample from the current location.
Returns: True if a sample is successfully collected, False otherwise.', 'return_to_nest': 'Action node: Return the collected samples to the designated nest location.
Returns: True if the robot successfully returns to the nest, False otherwise.', 'area_visited': 'Condition node: Check if the current area has already been visited by a robot.
Returns: True if the area has been visited, False otherwise.', 'is_sample_available': 'Condition node: Check if a sample is available at the current location.
Returns: True if a sample is present, False otherwise.'}
OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>area_visited</Condition><Selector><Sequence><Condition>is_sample_available</Condition><Action>collect_sample</Action></Sequence><Action>move_to_sample</Action></Selector></Sequence><Action>return_to_nest</Action></Selector></BehaviorTree>



###

USER COMMAND: generate behavior tree for robots to build a structure in a cooperative manner
INSTRUCTIONS: Use the following behaviors to generate an XML behavior tree: {'move_to_next_location': 'Action node: Move to the next designated building location.
Returns: True if the robot successfully reaches the location, False otherwise.', 'gather_resource': 'Action node: Gather resources needed for the construction.
Returns: True if resources are successfully gathered, False otherwise.', 'build_structure': 'Action node: Begin constructing the designated structure.
Returns: True if the structure is successfully built, False otherwise.', 'mark_location_complete': 'Action node: Mark the current location as completed.
Returns: Always returns True.', 'all_locations_complete': 'Condition node: Check if all designated building locations have been completed.
Returns: True if all locations are marked as complete, False otherwise.'}
OUTPUT:
<BehaviorTree><Sequence><Condition>all_locations_complete</Condition><Selector><Sequence><Condition>is_resource_available</Condition><Action>gather_resource</Action></Sequence><Selector><Sequence><Condition>area_visited</Condition><Selector><Sequence><Condition>is_resource_available</Condition><Action>build_structure</Action><Action>mark_location_complete</Action></Sequence><Action>move_to_next_location</Action></Selector></Sequence></Selector></Sequence></BehaviorTree>



###

USER COMMAND: create behavior tree for a swarm of robots to cooperatively transport a heavy object to a designated location
INSTRUCTIONS: Use the following actions and conditions to generate an XML behavior tree: {'move_to_object': 'Action node: Move to the designated location of the object to be transported.
Returns: True if the robot reaches the location, False otherwise.', 'lift_object': 'Action node: Lift the object up for transport.
Returns: True if the object is successfully lifted, False otherwise.', 'follow_path': 'Action node: Follow designated path to the destination.
Returns: True if the robot successfully follows the path, False otherwise.', 'deposit_object': 'Action node: Deposits the object at the designated location.
Returns: True if the object is successfully deposited, False otherwise.', 'is_object_attached': 'Condition node: Check if the object is attached to the robot.
Returns: True if the object is attached, False otherwise.', 'is_destination_reached': 'Condition node: Check if the robot has reached the designated destination.
Returns: True if the destination is reached, False otherwise.', 'path_obstructed': 'Condition node: Check if the designated path is obstructed.
Returns: True if the path is obstructed, False otherwise.'}
OUTPUT:
<BehaviorTree><Sequence><Condition>is_path_obstructed</Condition><Selector><Sequence><Condition>is_object_attached</Condition><Selector><Sequence><Condition>is_destination_reached</Condition><Action>deposit_object</Action></Sequence><Action>follow_path</Action></Selector></Sequence><Selector><Sequence><Condition>is_object_attached</Condition><Action>lift_object</Action></Sequence><Action>move_to_object</Action></Selector></Selector></Sequence></BehaviorTree>


###

USER COMMAND: Follow the leader robot while avoiding obstacles. If the leader robot stops moving, take over leadership and continue the designated path.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: follow_leader: Action node (same as before). avoid_obstacles: Condition node - Checks for any obstacles in the robot's path. take_leadership: Action node - Makes the robot take over leadership and continue the designated path.
OUTPUT:
<BehaviorTree><Selector><Sequence><Action>follow_leader</Action></Sequence><Sequence><Condition>avoid_obstacles</Condition><Action>take_leadership</Action></Sequence></Selector></BehaviorTree>



###

USER COMMAND: Work together to retrieve an object and return it to the starting point. If one robot is unable to move, the others adjust to compensate.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: retrieve_object: Action node (same as before). bring_to_start: Action node - Makes the robot return to the starting point with the object. check_movement: Condition node - Checks if the robot is unable to move. adjust_movement: Action node - Makes the robot adjust its movements to compensate for a non-moving robot.
OUTPUT:
<BehaviorTree><Selector><Sequence><Action>retrieve_object</Action><Action>bring_to_start</Action></Sequence><Sequence><Condition>check_movement</Condition><Action>adjust_movement</Action></Sequence></Selector></BehaviorTree>



###

USER COMMAND: Navigate through a maze, avoiding obstacles and dead ends. When reaching an intersection, use swarm intelligence to choose the optimal path.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: navigate_maze: Subtree node (same as before). avoid_obstacles: Condition node (same as before). use_swarm_intelligence: Action node - Coordinates with other robots to determine the optimal path at an intersection.
OUTPUT:
<BehaviorTree><Sequence><Action>navigate_maze</Action><Selector><Condition>avoid_obstacles</Condition><Action>use_swarm_intelligence</Action></Selector></Sequence></BehaviorTree>

###

USER COMMAND: generate a behavior tree for a swarm of robots to collectively gather resources and bring them back to the colony
INSTRUCTIONS: {'agent_movement_freeze': 'Action node: Freeze the agent’s movement, typically to indicate a stop in activity or end of tasks. Returns: Always returns True, indicating the action was executed.', 'avoid_obstacle': 'Action node: Execute an action to avoid detected obstacles. Returns: Always returns True, indicating the action was executed.', 'collect_resource': 'Action node: Collect the resource at the current location and add it to the collective storage. Returns: True if the resource was successfully collected, False otherwise.', 'deposit_resource': 'Action node: Deposit the collected resources at the colony's storage location. Returns: True if the resources were successfully deposited, False otherwise.', 'is_area_explored': 'Condition node: Check if the current area has been fully explored and all resources have been collected. Returns: True if the area is explored, False otherwise.', 'is_resource_nearby': 'Condition node: Check if a resource is within the agent's sensing range. Returns: True if a resource is present, False otherwise.', 'is_storage_full': 'Condition node: Check if the colony's storage is full and no more resources can be deposited. Returns: True if the storage is full, False otherwise.', 'return_to_colony': 'Action node: Return to the colony's storage location. Returns: True if the agent successfully reaches the colony, False otherwise.', 'set_path_to_resource': 'Action node: Set the agent's path towards the nearest resource. Returns: True if the path was successfully set, False otherwise.'} Use these behaviors to construct a behavior tree in XML format for the given command.
OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>is_resource_nearby</Condition><Sequence><Action>collect_resource</Action><Selector><Sequence><Condition>is_storage_full</Condition><Action>return_to_colony</Action><Action>deposit_resource</Action><Action>agent_movement_freeze</Action></Sequence><Sequence><Condition>is_area_explored</Condition><Action>deposit_resource</Action><Action>agent_movement_freeze</Action></Sequence></Sequence></Sequence><Sequence><Condition>is_resource_nearby</Condition><Selector><Sequence><Action>set_path_to_resource</Action><Action>avoid_obstacle</Action><Selector><Action>move_forward</Action><Action>agent_movement_freeze</Action></Selector></Sequence><Action>agent_movement_freeze</Action></Selector></Sequence></Selector></Sequence></BehaviorTree>



###

USER COMMAND: generate behavior tree for a robot to detect and avoid obstacles while navigating through a narrow maze
INSTRUCTIONS: Use the following behaviors to construct a behavior tree in XML format: {'move_forward': 'Action node: Move the robot one step forward in the current direction.
Returns: True if the robot can move forward, False otherwise.', 'turn_left': 'Action node: Turn the robot 90 degrees to the left.
Returns: Always returns True.', 'turn_right': 'Action node: Turn the robot 90 degrees to the right.
Returns: Always returns True.', 'detect_obstacle': 'Condition node: Check if an obstacle is detected in the current direction.
Returns: True if an obstacle is detected, False otherwise.', 'is_path_blocked': 'Condition node: Check if the path in the current direction is blocked or impassable.
Returns: True if the path is blocked, False otherwise.'} Provide a specific scenario for the robot to navigate through a narrow maze with obstacles.
OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>detect_obstacle</Condition><Selector><Action>turn_left</Action><Action>turn_right</Action></Selector></Sequence><Sequence><Condition>is_path_blocked</Condition><Selector><Action>turn_left</Action><Action>turn_right</Action></Sequence><Action>move_forward</Action></Sequence></Selector></Sequence></BehaviorTree>



###

USER COMMAND: generate behavior tree for a swarm of drones to autonomously scan a large area for geological data collection
INSTRUCTIONS: Use the following behaviors to construct a behavior tree in XML format: {'collect_data': 'Action node: Collect the available geological data at the current location and store it in a designated location.
Returns: True if the data was successfully collected, False otherwise.', 'move_to_next_location': 'Action node: Move the drone to the next designated location for data collection. Returns: True if the drone successfully moves to the next location, False otherwise.', 'is_area_explored': 'Condition node: Check if the entire area has been explored and all necessary data has been collected. Returns: True if the area is explored, False otherwise.', 'is_resource_nearby': 'Condition node: Check if any geological resources are within the drone's sensing range. Returns: True if resources are present, False otherwise.', 'set_path_to_resource': 'Action node: Set the drone's path towards the nearest resource for data collection. Returns: True if the path was successfully set, False otherwise.', 'avoid_obstacle': 'Action node: Execute an action to avoid detected obstacles. Returns: Always returns True, indicating the action was executed.'} Provide a specific scenario for the swarm of drones to autonomously scan a large area for geological data collection.
OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>is_resource_nearby</Condition><Sequence><Action>collect_data</Action><Selector><Sequence><Condition>is_area_explored</Condition><Action>move_to_next_location</Action></Sequence><Sequence><Selector><Condition>is_resource_nearby</Condition><Action>set_path_to_resource</Action><Action>move_to_next_location</Action><Action>avoid_obstacle</Action></Selector></Sequence></Sequence></Sequence><Sequence><Condition>is_resource_nearby</Condition><Action>avoid_obstacle</Action></Sequence></Selector></Sequence></BehaviorTree>


###

USER COMMAND: generate behavior tree to 'Collect all resources, check for potential dangers, and bring them back to the nest.'Output only the XML behavior tree without extra text.
INSTRUCTIONS: {'agent_movement_freeze': 'Action node: Freeze the agent’s movement, typically to indicate a stop in activity or end of tasks. Returns: Always returns True, indicating the action was executed.', 'avoid_obstacle': 'Action node: Execute an action to avoid detected obstacles. Returns: Always returns True, indicating the action was executed.', 'change_color_to_green': 'Action node: Change the agent’s color to green, usually indicating a successful operation or state. Returns: Always returns True, indicating the action was executed.', 'change_color_to_white': 'Action node: Change the agent’s color to white, usually indicating a neutral or initial state. Returns: Always returns True, indicating the action was executed.', 'continue_movement_agent': 'Action node: Continue the agent’s movement after it has been previously frozen. Returns: Always returns True, indicating the action was executed.', 'gather_resources': 'Action node: Gather resources by moving towards a designated location and collecting them. Returns: Always returns True, indicating the action was executed.', 'is_agent_in_nest': 'Condition node: Determine if the agent is in the nest. Returns: True if the agent is in the nest, False otherwise.', 'is_danger_detected': 'Condition node: Check if any potential dangers are detected in the environment. Returns: True if a danger is detected, False otherwise.', 'is_resource_available': 'Condition node: Determine if any resources are available to collect in the environment. Returns: True if resources are available, False otherwise.', 'is_resource_collected': 'Condition node: Check if a resource has been successfully collected. Returns: True if a resource has been collected, False otherwise.', 'task_completed': 'Action node: Signal that the agent has completed its designated task by freezing movement and updating state. Returns: Always returns True, indicating that the task completion action was executed.'}
OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>is_resource_available</Condition> <Action>gather_resources</Action> <Action>change_color_to_green</Action> <Action>task_completed</Action> </Sequence> <Condition>is_danger_detected</Condition> </Selector> <Sequence> <Condition>is_resource_collected</Condition> <Action>change_color_to_white</action> </Sequence> </Sequence> </BehaviorTree>



###

USER COMMAND: generate behavior tree to 'Explore the environment, interact with other robots, and return to a specific location.'Output only the XML behavior tree without extra text.
INSTRUCTIONS: {'agent_movement_freeze': 'Action node: Freeze the agent’s movement, typically to indicate a stop in activity or end of tasks. Returns: Always returns True, indicating the action was executed.', 'avoid_obstacle': 'Action node: Execute an action to avoid detected obstacles. Returns: Always returns True, indicating the action was executed.', 'change_color_to_green': 'Action node: Change the agent’s color to green, usually indicating a successful operation or state. Returns: Always returns True, indicating the action was executed.', 'change_color_to_white': 'Action node: Change the agent’s color to white, usually indicating a neutral or initial state. Returns: Always returns True, indicating the action was executed.', 'continue_movement_agent': 'Action node: Continue the agent’s movement after it has been previously frozen. Returns: Always returns True, indicating the action was executed.', 'explore_environment': 'Action node: Explore the environment by moving in random directions. Returns: Always returns True, indicating the action was executed.', 'interact_with_others': 'Action node: Interact with other robots by exchanging information or resources. Returns: Always returns True, indicating the action was executed.', 'is_agent_at_location': 'Condition node: Determine if the agent has reached a specific location. Returns: True if the agent has reached the location, False otherwise.', 'is_other_robot_nearby': 'Condition node: Check if there are other robots within a detectable distance from the agent’s position. Returns: True if other robots are detected, False otherwise.', 'return_to_location': 'Action node: Return to a specific location by following a designated path. Returns: Always returns True, indicating the action was executed.', 'task_completed': 'Action node: Signal that the agent has completed its designated task by freezing movement and updating state. Returns: Always returns True, indicating that the task completion action was executed.'}
OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Action>explore_environment</Action> <Condition>is_other_robot_nearby</Condition> <Action>interact_with_others</Action> <Action>task_completed</Action> </Sequence> <Selector> <Condition>is_agent_at_location</Condition> <Action>change_color_to_green</Action> <Action>return_to_location</Action> </Selector> </Sequence> </BehaviorTree>



###

USER COMMAND: generate behavior tree to 'Perform a coordinated dance routine with other robots.'Output only the XML behavior tree without extra text.
INSTRUCTIONS: {'agent_movement_freeze': 'Action node: Freeze the agent’s movement, typically to indicate a stop in activity or end of tasks. Returns: Always returns True, indicating the action was executed.', 'avoid_obstacle': 'Action node: Execute an action to avoid detected obstacles. Returns: Always returns True, indicating the action was executed.', 'change_color_to_green': 'Action node: Change the agent’s color to green, usually indicating a successful operation or state. Returns: Always returns True, indicating the action was executed.', 'change_color_to_white': 'Action node: Change the agent’s color to white, usually indicating a neutral or initial state. Returns: Always returns True, indicating the action was executed.', 'continue_movement_agent': 'Action node: Continue the agent’s movement after it has been previously frozen. Returns: Always returns True, indicating the action was executed.', 'dance_move': 'Action node: Perform a specific dance move in coordination with other robots. Returns: Always returns True, indicating the action was executed.', 'is_dance_move_complete': 'Condition node: Check if the dance move has been completed by all robots. Returns: True if all robots have completed the dance move, False otherwise.', 'is_line_formed': 'Condition node: Determine if the robots have formed a line. Returns: True if the robots have formed a line, False otherwise.', 'line_up': 'Action node: Line up with other robots in a specified formation by following a designated path. Returns: Always returns True, indicating the action was executed.', 'reset_position': 'Action

###

USER COMMAND: generate behavior tree to 'Build a structure with blocks, checking for any obstacles along the way and avoiding them if necessary.'
INSTRUCTIONS: Use the following behaviors to generate an XML behavior tree: {'pick_up_block': 'Action node: Pick up a block from the environment and place it in the robot's inventory.
Returns: True if a block was successfully picked up, False otherwise.', 'place_block': 'Action node: Place a block from the robot's inventory into the environment at the specified location.
Returns: True if a block was successfully placed, False otherwise.', 'detect_obstacle': 'Condition node: Check if there is an obstacle in front of the robot.
Returns: True if an obstacle is detected, False otherwise.', 'move_forward': 'Action node: Move the robot one step forward in the current direction.
Returns: True if the robot can move forward, False otherwise.', 'turn_left': 'Action node: Turn the robot 90 degrees to the left.
Returns: Always returns True.', 'turn_right': 'Action node: Turn the robot 90 degrees to the right.
Returns: Always returns True.', 'update_structure': 'Action node: Update the structure being built by placing a block from the inventory at the specified location.
Returns: True if the structure was successfully updated, False otherwise.', 'is_structure_complete': 'Condition node: Check if the structure has been completed based on the blocks placed.
Returns: True if the structure is complete, False otherwise.'} only. Output an XML behavior tree without extra text.
OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_structure_complete</Condition><Action>task_completed</Action></Sequence><Sequence><Selector><Condition>detect_obstacle</Condition><Selector><Action>turn_left</Action><Action>turn_right</Action></Selector></Selector><Selector><Condition>pick_up_block</Condition><Selector><Action>move_forward</Action></Selector></Selector><Selector><Condition>detect_obstacle</Condition><Selector><Action>move_forward</Action></Selector></Selector><Selector><Condition>detect_obstacle</Condition><Selector><Action>turn_left</Action><Action>turn_right</Action></Selector></Selector><Selector><Condition>is_structure_complete</Condition><Selector><Action>place_block</Action><Action>update_structure</Action></Selector></Selector></Sequence></Selector></BehaviorTree>



###

USER COMMAND: generate behavior tree to 'Collect resources and transfer them to another robot, while avoiding any obstacles in the environment.'
INSTRUCTIONS: Use the following behaviors to generate an XML behavior tree: {'move_forward': 'Action node: Move the robot one step forward in the current direction.
Returns: True if the robot can move forward, False otherwise.', 'turn_left': 'Action node: Turn the robot 90 degrees to the left.
Returns: Always returns True.', 'turn_right': 'Action node: Turn the robot 90 degrees to the right.
Returns: Always returns True.', 'gather_resource': 'Action node: Gather resources from the environment and add them to the robot's inventory.
Returns: True if resources were successfully gathered, False otherwise.', 'transfer_resource': 'Action node: Transfer resources from the robot's inventory to another designated robot.
Returns: True if resources were successfully transferred, False otherwise.', 'detect_obstacle': 'Condition node: Check if there is an obstacle in front of the robot.
Returns: True if an obstacle is detected, False otherwise.', 'is_target_detected': 'Condition node: Check if the designated robot to transfer resources to is within a detectable distance.
Returns: True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition node: Check if the robot has reached the designated robot to transfer resources to.
Returns: True if the target is within 15 units of distance, False otherwise.', 'is_resource_available': 'Condition node: Check if there are resources available in the environment for the robot to gather.
Returns: True if resources are available, False otherwise.'} only. Output an XML behavior tree without extra text.
OUTPUT:
<BehaviorTree><Sequence><Selector><Condition>is_target_reached</Condition><Action>transfer_resource</Action><Action>task_completed</Action></Selector><Sequence><Selector><Condition>is_resource_available</Condition><Action>move_forward</Action></Selector><Selector><Condition>detect_obstacle</Condition><Selector><Action>turn_left</Action><Action>turn_right</Action></Selector></Selector><Selector><Condition>is_target_detected</Condition><Action>gather_resource</Action></Selector></Sequence></Sequence></BehaviorTree>



###

USER COMMAND: generate behavior tree to 'Search for missing team members and bring them back to the group, while avoiding any obstacles along the way.'
INSTRUCTIONS: Use the following behaviors to generate an XML behavior tree: {'move_forward': 'Action node: Move the robot one step forward in the current direction.
Returns: True if the robot can move forward, False otherwise.', 'turn_left': 'Action node: Turn the robot 90 degrees to the left.
Returns: Always returns True.', 'turn_right': 'Action node: Turn the robot 90 degrees to the right.
Returns: Always returns True.', 'search_for_teammate': 'Action node: Search the environment for any missing team members and bring them back to the group.
Returns: True if a team member was found and brought back successfully, False otherwise.', 'return_to_group': 'Action node: Return to the group with the missing team member.
Returns: True if the robot successfully returned to the group, False otherwise.', 'detect_obstacle': 'Condition node: Check if there is an obstacle in front of the robot.
Returns: True if an obstacle is detected, False otherwise.', 'is_teammate_found': 'Condition node: Check if a missing team member has been found in the environment.
Returns: True if a team member was found, False otherwise.', 'is_team_complete': 'Condition node: Check if the entire team is present and no members are missing.
Returns: True if the team is complete, False otherwise.'} only. Output an XML behavior tree without extra text.
OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_team_complete</Condition><Action>task_completed</Action></Sequence><Sequence><Selector><Condition>detect_obstacle</Condition><Selector><Action>turn_left</Action><Action>turn_right</Action></Selector></Selector><Selector><Condition>is_teammate_found</Condition><Sequence><Action>move_forward</Action><Action>return_to_group</Action></Sequence></Selector><Selector><Condition>search_for_teammate</Condition><Action>return_to_group</Action></Selector></Sequence></Selector></Behavior
###

USER COMMAND: generate behavior tree to 'Avoid obstacles while searching for and collecting objects.' Output only the XML behavior tree without extra text.
INSTRUCTIONS: {'agent_movement_freeze': 'Action node: Freeze the agent’s movement, typically to indicate a stop in activity or end of tasks. Returns: Always returns True, indicating the action was executed.', 'avoid_obstacle': 'Action node: Execute an action to avoid detected obstacles. Returns: Always returns True, indicating the action was executed.', 'change_color_to_green': 'Action node: Change the agent’s color to green, usually indicating a successful operation or state. Returns: Always returns True, indicating the action was executed.', 'change_color_to_white': 'Action node: Change the agent’s color to white, usually indicating a neutral or initial state. Returns: Always returns True, indicating the action was executed.', 'continue_movement_agent': 'Action node: Continue the agent’s movement after it has been previously frozen. Returns: Always returns True, indicating the action was executed.', 'form_line': 'Action node: Direct the agent to form a line towards the center of the window. This function adjusts the agent’s position to align it with the center. Returns: Always returns True, indicating the action was executed.', 'is_agent_in_nest': 'Condition node: Determine if the agent is in the nest. Returns: True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition node: Determine if the agent has formed a line with a reference point at the center of the window. Returns: True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition node: Determine if any obstacles are detected in the vicinity of the agent. Returns: True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition node: Check if the path ahead of the agent is clear of obstacles. Returns: True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Action node: Check if the target is within a detectable distance from the agent’s position. Returns: True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition node: Check if the agent has reached the target. Returns: True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action node: Signal that the agent has completed its designated task by freezing movement and updating state. Returns: Always returns True, indicating that the task completion action was executed.', 'wander': 'Action node: Perform a wandering action where the agent moves randomly within the environment. Returns: Always returns True, indicating the action was executed.'}
OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_obstacle_detected</Condition><Action>avoid_obstacle</Action></Sequence><Selector><Sequence><Condition>is_target_detected</Condition><Action>change_color_to_green</Action><Action>task_completed</Action></Sequence><Action>wander</Action></Selector></Selector></BehaviorTree>



###

USER COMMAND: generate behavior tree to 'Deliver packages to designated locations while avoiding obstacles and adjusting movement based on weight.' Output only the XML behavior tree without extra text.
INSTRUCTIONS: {'agent_movement_freeze': 'Action node: Freeze the agent’s movement, typically to indicate a stop in activity or end of tasks. Returns: Always returns True, indicating the action was executed.', 'avoid_obstacle': 'Action node: Execute an action to avoid detected obstacles. Returns: Always returns True, indicating the action was executed.', 'adjust_movement_weight': 'Action node: Adjust the agent’s movement based on the weight of the package. Returns: Always returns True, indicating the action was executed.', 'deliver_package': 'Action node: Deliver the package to the designated location. Returns: Always returns True, indicating the action was executed.', 'is_agent_in_nest': 'Condition node: Determine if the agent is in the nest. Returns: True if the agent is in the nest, False otherwise.', 'is_obstacle_detected': 'Condition node: Determine if any obstacles are detected in the vicinity of the agent. Returns: True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition node: Check if the path ahead of the agent is clear of obstacles. Returns: True if no obstacles are detected ahead, False if obstacles are present.', 'is_package_delivered': 'Condition node: Check if the package has been successfully delivered. Returns: True if the package has been delivered, False otherwise.', 'load_package': 'Action node: Load a package onto the agent. Returns: True if the package is successfully loaded, False otherwise.', 'move_forward': 'Action node: Move the agent forward. Returns: Always returns True, indicating the action was executed.', 'return_home': 'Action node: Return the agent to the designated home location. Returns: Always returns True, indicating the action was executed.', 'unload_package': 'Action node: Unload the package from the agent. Returns: True if the package is successfully unloaded, False otherwise.'}
OUTPUT:
<BehaviorTree><Sequence><Action>unload_package</Action><Selector><Sequence><Condition>is_obstacle_detected</Condition><Action>avoid_obstacle</Action></Sequence><Selector><Sequence><Condition>load_package</Condition><Action>adjust_movement_weight</Action><Action>move_forward</Action><Condition>is_package_delivered</Condition><Action>deliver_package</Action><Action>agent_movement_freeze</Action></Sequence><Action>return_home</Action></Selector></Selector></Sequence></BehaviorTree>



###

USER COMMAND: Navigate through an obstacle course while avoiding obstacles and reaching the designated finish line.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: avoid_obstacle: Action node (same as before). reach_finish_line: Action node (same as before). is_obstacle_detected: Condition node (same as before).
OUTPUT:
<BehaviorTree><Sequence><Condition>is_obstacle_detected</Condition><Action>avoid_obstacle</Action><Action>reach_finish_line</Action></Sequence></BehaviorTree>



###

USER COMMAND: Gather resources from designated locations and deliver them to the central base.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: gather_resources: Action node (same as before). deliver_resources: Action node (same as before). is_resource_available: Condition node (same as before).
OUTPUT:
<BehaviorTree><Sequence><Condition>is_resource_available</Condition><Action>gather_resources</Action><Action>deliver_resources</Action></Sequence></BehaviorTree>



###

USER COMMAND: Defend the central base from incoming enemy attacks while coordinating with nearby allied units.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: defend_base: Action node (same as before). coordinate_with_allies: Action node (same as before). is_enemy_detected: Condition node (same as before).
OUTPUT:
<BehaviorTree><Sequence><Condition>is_enemy_detected</Condition><Action>defend_base</Action><Action>coordinate_with_allies</Action></Sequence></BehaviorTree>


###

USER COMMAND: generate behavior tree to 'Find and retrieve an object, avoid obstacles, navigate through a narrow path, and return to the starting point.'Output only the XML behavior tree without extra text.
INSTRUCTIONS: {'agent_movement_freeze': 'Action node: Freeze the agent’s movement, typically to indicate a stop in activity or end of tasks. Returns: Always returns True, indicating the action was executed.', 'avoid_obstacle': 'Action node: Execute an action to avoid detected obstacles. Returns: Always returns True, indicating the action was executed.', 'change_color_to_green': 'Action node: Change the agent’s color to green, usually indicating a successful operation or state. Returns: Always returns True, indicating the action was executed.', 'change_color_to_white': 'Action node: Change the agent’s color to white, usually indicating a neutral or initial state. Returns: Always returns True, indicating the action was executed.', 'continue_movement_agent': 'Action node: Continue the agent’s movement after it has been previously frozen. Returns: Always returns True, indicating the action was executed.', 'form_line': 'Action node: Direct the agent to form a line towards the center of the window. This function adjusts the agent’s position to align it with the center. Returns: Always returns True, indicating the action was executed.', 'is_agent_in_nest': 'Condition node: Determine if the agent is in the nest. Returns: True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition node: Determine if the agent has formed a line with a reference point at the center of the window. Returns: True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition node: Determine if any obstacles are detected in the vicinity of the agent. Returns: True if obstacles are detected, False otherwise.', 'is_path_clear': 'Condition node: Check if the path ahead of the agent is clear of obstacles. Returns: True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition node: Check if the target object is within a detectable distance from the agent’s position. Returns: True if the target object is within 20 units of distance, False otherwise.', 'is_target_retrieved': 'Condition node: Check if the agent has retrieved the target object. Returns: True if the target object is in the agent’s possession, False if not.', 'is_target_reached': 'Condition node: Check if the agent has reached the target object’s location. Returns: True if the agent is within 15 units of distance from the target, False otherwise.', 'task_completed': 'Action node: Signal that the agent has completed its designated task by freezing movement and updating state. Returns: Always returns True, indicating that the task completion action was executed.', 'wander': 'Action node: Perform a wandering action where the agent moves randomly within the environment. Returns: Always returns True, indicating the action was executed.'}
OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>is_target_detected</Condition> <Action>change_color_to_green</Action> <Action>task_completed</Action> </Sequence> <Action>wander</Action> </Selector> <Selector> <Sequence> <Condition>is_obstacle_detected</Condition> <Action>avoid_obstacle</Action> </Sequence> <Sequence> <Condition>is_path_clear</Condition> <Selector> <Sequence> <Condition>is_target_reached</Condition> <Action>change_color_to_white</Action> <Action>task_completed</Action> </Sequence> <Action>continue_movement_agent</Action> </Selector> </Sequence> </Selector> </Sequence> </BehaviorTree>



###

USER COMMAND: generate behavior tree to 'Collect data, avoid obstacles, and return to home base.'Output only the XML behavior tree without extra text.
INSTRUCTIONS: {'agent_movement_freeze': 'Action node: Freeze the agent’s movement, typically to indicate a stop in activity or end of tasks. Returns: Always returns True, indicating the action was executed.', 'avoid_obstacle': 'Action node: Execute an action to avoid detected obstacles. Returns: Always returns True, indicating the action was executed.', 'change_color_to_green': 'Action node: Change the agent’s color to green, usually indicating a successful operation or state. Returns: Always returns True, indicating the action was executed.', 'change_color_to_white': 'Action node: Change the agent’s color to white, usually indicating a neutral or initial state. Returns: Always returns True, indicating the action was executed.', 'continue_movement_agent': 'Action node: Continue the agent’s movement after it has been previously frozen. Returns: Always returns True, indicating the action was executed.', 'form_line': 'Action node: Direct the agent to form a line towards the center of the window. This function adjusts the agent’s position to align it with the center. Returns: Always returns True, indicating the action was executed.', 'is_agent_in_nest': 'Condition node: Determine if the agent is in the nest. Returns: True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition node: Determine if the agent has formed a line with a reference point at the center of the window. Returns: True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition node: Determine if any obstacles are detected in the vicinity of the agent. Returns: True if obstacles are detected, False otherwise.', 'is_path_clear': 'Condition node: Check if the path ahead of the agent is clear of obstacles. Returns: True if no obstacles are detected ahead, False if obstacles are present.', 'is_data_collected': 'Condition node: Check if the agent has collected data. Returns: True if data is collected, False otherwise.', 'is_homebase_reached': 'Condition node: Check if the agent has returned to home base. Returns: True if the agent is within 15 units of distance from home base, False otherwise.', 'task_completed': 'Action node: Signal that the agent has completed its designated task by freezing movement and updating state. Returns: Always returns True, indicating that the task completion action was executed.', 'wander': 'Action node: Perform a wandering action where the agent moves randomly within the environment. Returns: Always returns True, indicating the action was executed.'}
OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>is_data_collected</Condition> <Action>change_color_to_green</Action> <Action>task_completed</Action> </Sequence> <Action>wander</Action> </Selector> <Selector> <Sequence> <Condition>is_obstacle_detected</Condition> <
###

3. // USER COMMAND: Navigate to a specified location using obstacle avoidance technique, while avoiding other robots in the vicinity.
INSTRUCTIONS: {'adjust_heading_robot': 'Action node: Adjust the robot’s heading based on the obstacle detection. Returns: Always returns True, indicating the action was executed.', 'avoid_other_robots': 'Action node: Execute an action to avoid other robots in the vicinity. Returns: Always returns True, indicating the action was executed.', 'detect_obstacles': 'Condition node: Determine if any obstacles are detected in the vicinity of the robot. Returns: True if an obstacle is detected, False otherwise.', 'is_location_reached': 'Condition node: Check if the robot has reached the specified location. Returns: True if the robot is within 10 units of distance from the target, False otherwise.', 'is_other_robot_detected': 'Condition node: Determine if any other robots are detected in the vicinity of the robot. Returns: True if another robot is detected, False otherwise.', 'is_path_clear': 'Condition node: Check if the path ahead of the robot is clear of obstacles. Returns: True if no obstacles are detected ahead, False if obstacles are present.', 'navigate_to_location': 'Action node: Navigate to a specified target location using obstacle avoidance technique. Returns: Always returns True, indicating the action was executed.', 'perform_obstacle_avoidance': 'Action node: Initiate the obstacle avoidance process by calling the necessary functions and actions. Returns: Always returns True, indicating the action was executed.', 'prevent_collision': 'Action node: Execute an action to prevent collision with other robots. Returns: Always returns True, indicating the action was executed.'}
OUTPUT:
<BehaviorTree> <Sequence> <Action>navigate_to_location</Action> <Action>prevent_collision</Action> <Selector> <Condition>is_other_robot_detected</Condition> <Sequence> <Action>perform_obstacle_avoidance</Action> <Condition>is_path_clear</Condition> <Action>adjust_heading_robot</Action> </Sequence> <Action>avoid_other_robots</Action> </Selector> <Condition>is_location_reached</Condition> </Sequence> </BehaviorTree>



###

USER COMMAND: Explore the environment by performing a series of random movements while avoiding obstacles and other robots.
INSTRUCTIONS: {'avoid_other_robots': 'Action node: Execute an action to avoid other robots in the vicinity. Returns: Always returns True, indicating the action was executed.', 'detect_obstacles': 'Condition node: Determine if any obstacles are detected in the vicinity of the robot. Returns: True if an obstacle is detected, False otherwise.', 'is_other_robot_detected': 'Condition node: Determine if any other robots are detected in the vicinity of the robot. Returns: True if another robot is detected, False otherwise.', 'is_path_clear': 'Condition node: Check if the path ahead of the robot is clear of obstacles. Returns: True if no obstacles are detected ahead, False if obstacles are present.', 'move_randomly': 'Action node: Move the robot in a random direction within the environment. Returns: Always returns True, indicating the action was executed.', 'not_equal': 'Condition node: Check if the current random direction is the same as the previous random direction. Returns: True if the directions are different, False otherwise.', 'perform_loop': 'Sequence node: Execute a sequence of actions in a loop until a specific condition is met. Returns: True if all actions are executed successfully, False if any action fails or the condition is not met.', 'set_random_direction': 'Action node: Generate a new random direction for the robot to move in. Returns: Always returns True, indicating the action was executed.'}
OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Condition>is_other_robot_detected</Condition> <Sequence> <Action>perform_loop</Action> <Sequence> <Action>set_random_direction</Action> <Condition>not_equal</Condition> <Sequence> <Action>move_randomly</Action> <Condition>is_path_clear</Condition> </Sequence> </Sequence> <Action>avoid_other_robots</Action> </Sequence> <Action>move_randomly</Action> </Selector> </Sequence> </BehaviorTree>



###

USER COMMAND: Work together with other robots to transport a heavy object to a specific location, while avoiding obstacles.
INSTRUCTIONS: {'adjust_heading_robot': 'Action node: Adjust the robot’s heading based on the obstacle detection. Returns: Always returns True, indicating the action was executed.', 'avoid_obstacle': 'Action node: Execute an action to avoid detected obstacles. Returns: Always returns True, indicating the action was executed.', 'change_color': 'Action node: Change the robot’s color to indicate a specific state or action. Returns: Always returns True, indicating the action was executed.', 'is_obstacle_detected': 'Condition node: Determine if any obstacles are detected in the vicinity of the robot. Returns: True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition node: Check if the path ahead of the robot is clear of obstacles. Returns: True if no obstacles are detected ahead, False if obstacles are present.', 'move_towards_target': 'Action node: Move the robot towards the designated target location. Returns: Always returns True, indicating the action was executed.', 'pick_up_object': 'Action node: Execute an action to pick up a heavy object. Returns: Always returns True, indicating the action was executed.', 'set_destination': 'Action node: Set the designated destination for the robot to move towards. Returns: Always returns True, indicating the action was executed.', 'transport_object': 'Sequence node: Execute a sequence of actions to transport a heavy object to the destination. Returns: True if all actions are executed successfully, False if any action fails.', 'wait': 'Action node: Wait for a specified amount of time before resuming actions. Returns: Always returns True, indicating the action was executed.'}
OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>is_obstacle_detected</Condition> <Sequence> <Action>move_towards_target</Action> <Condition>is_path_clear</Condition> <Action>adjust_heading_robot</Action> </Sequence> <Action>avoid_obstacle</Action> </Sequence> <Action>set_destination</Action> <Action>pick_up_object</Action> <Action>change_color</Action> <Action>wait</Action> <Sequence> <Condition>is_path_clear</Condition> <Action>move_towards_target</Action> <Action>transport_object</Action> </Sequence> </Selector> </Sequence> </BehaviorTree>


###

USER_COMMAND: Complete a set of tasks in a warehouse simulation - Retrieve an item from a shelf, place it in a designated location, and return to the starting position.
INSTRUCTIONS: {'get_item': 'Action node: Use the simulated robot arms to retrieve an item from the designated shelf. Returns: True if the item is successfully retrieved, False if the item is not found or retrieval fails.', 'place_item': 'Action node: Use the simulated robot arms to place the retrieved item in the designated location. Returns: True if the item is successfully placed, False if the placement fails or location is occupied.', 'return_to_start': 'Action node: Navigate the robot back to its starting position. Returns: True if the robot successfully returns to starting position, False if there are obstacles or errors in navigation.', 'is_item_available': 'Condition node: Check if the specified item is available on the designated shelf. Returns: True if the item is available, False otherwise.', 'is_item_in_hand': 'Condition node: Check if the robot is currently carrying an item in its hand. Returns: True if an item is being carried, False otherwise.', 'is_item_placed': 'Condition node: Check if the item has been successfully placed in the designated location. Returns: True if the item is successfully placed, False otherwise.', 'is_navigation_safe': 'Condition node: Check if the robot's current path is safe from obstacles. Returns: True if the path is clear, False if obstacles are present.', 'is_start_position_reached': 'Condition node: Check if the robot has returned to its starting position. Returns: True if the starting position is reached, False otherwise.'}
OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Action>get_item</Action> <Condition>is_item_available</Condition> <Sequence> <Action>place_item</Action> <Condition>is_navigation_safe</Condition> </Sequence> <Action>return_to_start</Action> </Selector> </Sequence> </BehaviorTree>



###

USER_COMMAND: Perform a coordinated formation with other robots - move to a designated position while maintaining a specific spacing and orientation with other robots.
INSTRUCTIONS: {'move_to_position': 'Action node: Move the robot to the designated position. Returns: True if the movement is successful, False if there are obstacles or errors.', 'maintain_spacing': 'Action node: Use sensors and navigation to maintain a specific spacing with other robots in the formation. Returns: True if the spacing is successfully maintained, False if the spacing is not achieved or there are errors.', 'maintain_orientation': 'Action node: Use sensors and navigation to maintain a specific orientation with other robots in the formation. Returns: True if the orientation is successfully maintained, False if the orientation is not achieved or there are errors.', 'is_position_reached': 'Condition node: Check if the robot has arrived at the designated position. Returns: True if the position is reached, False otherwise.', 'is_spacing_maintained': 'Condition node: Check if the robot has maintained the specified spacing with other robots in the formation. Returns: True if the spacing is maintained, False otherwise.', 'is_orientation_maintained': 'Condition node: Check if the robot has maintained the specified orientation with other robots in the formation. Returns: True if the orientation is maintained, False otherwise.', 'is_formation_complete': 'Condition node: Check if all robots have successfully reached their designated positions and maintained the required spacing and orientation. Returns: True if the formation is complete, False otherwise.'}
OUTPUT:
<BehaviorTree> <Sequence> <Action>move_to_position</Action> <Condition>is_position_reached</Condition> <Selector> <Action>maintain_spacing</Action> <Action>maintain_orientation</Action> <Condition>is_spacing_maintained</Condition> <Condition>is_orientation_maintained</Condition> </Selector> </Sequence> <Condition>is_formation_complete</Condition> </BehaviorTree>



###

USER_COMMAND: Navigate through a complex maze, making use of different sensors and strategies to reach the end goal.
INSTRUCTIONS: {'use_shortest_path_strategy': 'Action node: Use the shortest path strategy to navigate through the maze. Returns: True if the shortest path is successfully navigated, False if there are obstacles or errors.', 'use_dead_end_strategy': 'Action node: Use the dead-end strategy to navigate through the maze. Returns: True if the dead-end strategy is successfully navigated, False if there are obstacles or errors.', 'use_left_wall_follow_strategy': 'Action node: Use the left wall-following strategy to navigate through the maze. Returns: True if the path is successfully navigated, False if there are obstacles or errors.', 'is_end_goal_reached': 'Condition node: Check if the robot has successfully reached the end goal of the maze. Returns: True if the goal is reached, False otherwise.', 'is_dead_end': 'Condition node: Check if the robot has reached a dead-end in the maze. Returns: True if the path ahead is blocked, False otherwise.', 'is_left_wall_clear': 'Condition node: Check if there are no obstacles on the robot's left side. Returns: True if the left side is clear, False if there are obstacles.', 'is_right_wall_clear': 'Condition node: Check if there are no obstacles on the robot's right side. Returns: True if the right side is clear, False if there are obstacles.', 'is_front_clear': 'Condition node: Check if there are no obstacles directly in front of the robot. Returns: True if the path ahead is clear, False if there are obstacles.'}
OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Action>use_shortest_path_strategy</Action> <Condition>is_end_goal_reached</Condition> </Sequence> <Sequence> <Action>use_dead_end_strategy</Action> <Condition>is_dead_end</Condition> </Sequence> <Sequence><Selector> <Condition>is_left_wall_clear</Condition> <Action>use_left_wall_follow_strategy</Action> </Selector> <Sequence> <Condition>is_right_wall_clear</Condition> <Sequence><Action>wander</Action> <Condition>is_front_clear</Condition> </Sequence> <Sequence> <Action>use_left_wall_follow_strategy</Action> </Sequence> </Sequence> </Selector> </BehaviorTree>


###

USER COMMAND: generate behavior tree to 'Collect resources, deposit them in storage, then return to starting position and wait for further instructions.'Output only the XML behavior tree without extra text.
INSTRUCTIONS: {'agent_movement_freeze': 'Action node: Freeze the agent’s movement, typically to indicate a stop in activity or end of tasks. Returns: Always returns True, indicating the action was executed.', 'avoid_obstacle': 'Action node: Execute an action to avoid detected obstacles. Returns: Always returns True, indicating the action was executed.', 'collect_resources': 'Action node: Collect resources from the environment and add them to the agent’s inventory. Returns: Always returns True, indicating the action was executed.', 'deposit_resources': 'Action node: Deposit collected resources into the designated storage area. Returns: Always returns True, indicating the action was executed.', 'is_agent_in_starting_pos': 'Condition node: Determine if the agent is in the starting position. Returns: True if the agent is in the starting position, False otherwise.', 'is_resources_full': 'Condition node: Check if the agent’s resource inventory is full. Returns: True if the inventory is full, False otherwise.', 'is_storage_full': 'Condition node: Check if the designated storage area is full. Returns: True if the storage is full, False otherwise.', 'return_to_start': 'Action node: Move the agent back to the starting position. Returns: Always returns True, indicating the action was executed.', 'wait_for_instructions': 'Action node: Freeze the agent’s movement and wait for further instructions. Returns: Always returns True, indicating the action was executed.'}
OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>is_resources_full</Condition><Action>deposit_resources</Action></Sequence><Sequence><Condition>is_storage_full</Condition><Action>return_to_start</Action><Action>wait_for_instructions</Action></Sequence></Selector><Sequence><Condition>is_agent_in_starting_pos</Condition><Action>agent_movement_freeze</Action></Sequence></Sequence></BehaviorTree>



###

USER COMMAND: generate behavior tree to 'Explore the environment, map out new areas, and report back to the central unit.'Output only the XML behavior tree without extra text.
INSTRUCTIONS: {'agent_movement_freeze': 'Action node: Freeze the agent’s movement, typically to indicate a stop in activity or end of tasks. Returns: Always returns True, indicating the action was executed.', 'avoid_obstacle': 'Action node: Execute an action to avoid detected obstacles. Returns: Always returns True, indicating the action was executed.', 'explore': 'Action node: Move around the environment to map out new areas. Returns: Always returns True, indicating the action was executed.', 'map_new_areas': 'Action node: Record and map out new areas in the environment. Returns: Always returns True, indicating the action was executed.', 'report_to_central_unit': 'Action node: Send a report of the mapped areas to the central unit. Returns: Always returns True, indicating the action was executed.', 'is_central_unit_notified': 'Condition node: Check if the central unit has been notified of the new mapped areas. Returns: True if the central unit is notified, False otherwise.'}
OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Action>explore</Action><Action>map_new_areas</Action></Sequence><Sequence><Condition>is_central_unit_notified</Condition><Action>report_to_central_unit</Action></Sequence></Selector></Sequence></BehaviorTree>



###

USER COMMAND: generate behavior tree to 'Assemble parts, perform quality checks, and move to the next assembly station.'Output only the XML behavior tree without extra text.
INSTRUCTIONS: {'agent_movement_freeze': 'Action node: Freeze the agent’s movement, typically to indicate a stop in activity or end of tasks. Returns: Always returns True, indicating the action was executed.', 'assemble_parts': 'Action node: Gather and assemble the necessary parts for the assembly process. Returns: Always returns True, indicating the action was executed.', 'perform_quality_checks': 'Action node: Check the assembled parts for quality and make any necessary adjustments. Returns: Always returns True, indicating the action was executed.', 'move_to_next_station': 'Action node: Move the assembled parts to the next assembly station. Returns: Always returns True, indicating the action was executed.', 'is_parts_assembled': 'Condition node: Check if all necessary parts have been assembled. Returns: True if all parts are assembled, False otherwise.'}
OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>is_parts_assembled</Condition><Action>perform_quality_checks</Action></Sequence><Sequence><Action>assemble_parts</Action><Action>move_to_next_station</Action></Sequence></Selector></Sequence></BehaviorTree>


###

USER COMMAND: generate behavior tree to navigate a swarm of robots towards a designated destination while avoiding obstacles
INSTRUCTIONS: Use the following behaviors to generate XML behavior tree based on the user command: {'move_to_destination': 'Action node: Move the swarm towards the designated destination.
Returns: True if the swarm successfully reaches the destination, False otherwise.', 'avoid_obstacles': 'Action node: Navigate the swarm to avoid detected obstacles using collaborative movement.
Returns: True if the swarm successfully navigated around the obstacle, False otherwise.', 'reform_swarm': 'Action node: Reorganize the swarm formation to maintain optimal coordination and avoid collisions.
Returns: Always returns True.', 'is_destination_reached': 'Condition node: Check if the swarm has reached the designated destination.
Returns: True if the destination is reached, False otherwise.', 'is_obstacle_detected': 'Condition node: Check if any obstacles are detected within the swarm's path.
Returns: True if an obstacle is detected, False otherwise.'}
OUTPUT:
<BehaviorTree><Sequence><Condition>is_destination_reached</Condition><Action>move_to_destination</Action></Sequence><Selector><Sequence><Condition>is_obstacle_detected</Condition><Action>avoid_obstacles</Action><Action>reform_swarm</Action></Sequence><Action>move_to_destination</Action></Selector></BehaviorTree>



###

USER COMMAND: generate behavior tree for a swarm of robots to collectively perform a complex task while avoiding collisions
INSTRUCTIONS: Use the following behaviors to generate XML behavior tree based on the user command:
{'perform_task': 'Action node: Instruct the swarm to collectively perform a complex task requiring coordinated movements.
Returns: True if the task is successfully completed, False otherwise.', 'avoid_collisions': 'Action node: Utilize collaborative movement to avoid collisions within the swarm.
Returns: True if the swarm successfully avoids collisions, False otherwise.', 'reform_swarm': 'Action node: Reorganize the swarm formation to maintain optimal coordination and avoid collisions.
Returns: Always returns True.', 'is_task_complete': 'Condition node: Check if the complex task has been completed by the entire swarm.
Returns: True if the task is complete, False otherwise.', 'is_collision_detected': 'Condition node: Check if any collisions are detected within the swarm.
Returns: True if a collision is detected, False otherwise.'}
OUTPUT:
<BehaviorTree><Sequence><Condition>is_task_complete</Condition><Action>perform_task</Action></Sequence><Selector><Sequence><Condition>is_collision_detected</Condition><Action>avoid_collisions</Action><Action>reform_swarm</Action></Sequence><Action>perform_task</Action></Selector></BehaviorTree>



###

USER COMMAND: generate behavior tree for a swarm of robots to collectively gather resources and return to the designated area
INSTRUCTIONS: Use the following behaviors to generate XML behavior tree based on the user command:
{'gather_resources': 'Action node: Instruct the swarm to gather resources from the environment.
Returns: True if the swarm successfully gathers resources, False otherwise.', 'return_to_designated_area': 'Action node: Navigate the swarm back to the designated area while carrying the gathered resources.
Returns: True if the swarm successfully returns to the designated area, False otherwise.', 'reform_swarm': 'Action node: Reorganize the swarm formation to maintain optimal coordination and avoid collisions.
Returns: Always returns True.', 'is_resources_collected': 'Condition node: Check if the swarm has successfully gathered all necessary resources.
Returns: True if all resources are gathered, False otherwise.', 'is_at_designated_area': 'Condition node: Check if the swarm has reached the designated area.
Returns: True if the swarm is at the designated area, False otherwise.', 'is_collision_detected': 'Condition node: Check if any collisions are detected within the swarm.
Returns: True if a collision is detected, False otherwise.'}
OUTPUT:
<BehaviorTree><Sequence><Condition>is_resources_collected</Condition><Action>gather_resources</Action></Sequence><Sequence><Condition>is_collision_detected</Condition><Action>reform_swarm</Action></Sequence><Selector><Sequence><Condition>is_at_designated_area</Condition><Action>return_to_designated_area</Action></Sequence><Action>gather_resources</Action></Selector></BehaviorTree>

###

USER COMMAND: construct a behavior tree to navigate a maze and find the exit in a swarm robot setting
INSTRUCTIONS: Use the following specific behaviors and conditions to construct the behavior tree in XML format: {'move_forward': 'Action node: Move the robot forward one step in the maze.
Returns: True if the movement was successful, False otherwise.', 'turn_left': 'Action node: Turn the robot 90 degrees to its left.
Returns: Always returns True.', 'turn_right': 'Action node: Turn the robot 90 degrees to its right.
Returns: Always returns True.', 'detect_wall': 'Condition node: Check for a wall in front of the robot.
Returns: True if a wall is detected, False otherwise.', 'detect_exit': 'Condition node: Check for the exit in the maze.
Returns: True if the exit is detected, False otherwise.'}
OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>detect_exit</Condition><Action>exit_found</Action></Sequence><Sequence><Condition>detect_wall</Condition><Selector><Sequence><Selector><Condition>detect_wall</Condition><Sequence><Action>turn_left</Action></Sequence></Selector><Selector><Condition>detect_wall</Condition><Sequence><Action>turn_right</Action></Sequence></Selector></Sequence></Selector><Selector><Sequence><Condition>detect_wall</Condition><Sequence><Action>turn_right</Action></Sequence></Selector><Sequence><Condition>detect_wall</Condition><Sequence><Action>turn_right</Action></Sequence></Selector></Sequence></Selector><Action>move_forward</Action></Sequence></BehaviorTree>


###

USER COMMAND: create a behavior tree for a swarm robot to efficiently clean a large area
INSTRUCTIONS: Use the following specific behaviors and conditions to construct the behavior tree in XML format: {'divide_area': 'Action node: Divide the large area into smaller sections for efficient cleaning.
Returns: True if the division was successful, False otherwise.', 'clean_area': 'Action node: Clean the given area assigned to the robot.
Returns: True if the cleaning was successful, False otherwise.', 'detect_obstacles': 'Condition node: Check for any obstacles in the current area.
Returns: True if an obstacle is detected, False otherwise.', 'is_area_clean': 'Condition node: Check if the assigned area has been fully cleaned.
Returns: True if the area is clean, False otherwise.'}
OUTPUT:
<BehaviorTree><Action>divide_area</Action><Selector><Sequence><Condition>detect_obstacles</Condition><Action>avoid_obstacles</Action></Sequence><Sequence><Action>clean_area</Action><Selector><Sequence><Condition>detect_obstacles</Condition><Action>avoid_obstacles</Action></Sequence><Sequence><Condition>is_area_clean</Condition><Selector><Sequence><Action>call_for_reassignment</Action></Sequence><Action>move_to_next_section</Action></Selector></Sequence></Selector></Sequence></Selector></BehaviorTree>



###

USER COMMAND: implement a cooperative foraging strategy for a swarm of robots
INSTRUCTIONS: Use the following specific behaviors and conditions to construct the behavior tree in XML format: {'sense_food': 'Condition node: Check for food in the environment.
Returns: True if food is present, False otherwise.', 'pick_up_food': 'Action node: Pick up the food and carry it back to the nest.
Returns: True if the food is successfully picked up, False otherwise.', 'deposit_food': 'Action node: Deposit the carried food in the nest.
Returns: True if the food is successfully deposited, False otherwise.', 'scout_area': 'Action node: Scout the environment for potential food sources.
Returns: True if successful, False otherwise.', 'is_nest_found': 'Condition node: Check if the nest has been located.
Returns: True if the nest has been found, False otherwise.'}
OUTPUT:
<BehaviorTree><Action>scout_area</Action><Selector><Sequence><Condition>sense_food</Condition><Action>pick_up_food</Action><Action>deposit_food</Action></Sequence><Sequence><Condition>sense_food</Condition><Selector><Sequence><Condition>is_nest_found</Condition><Action>return_to_nest</Action></Sequence><Action>continue_searching</Action></Selector></Sequence></Selector></BehaviorTree>


###

USER COMMAND: Implement a cooperative foraging task for a swarm of robots.Generate a behavior tree to guide the robots towards the food source, dividing their tasks to collect food, bring it back to the nest, and repeat.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: find_food_source: Subtree node - Represents a behavior tree for finding and approaching the food source. collect_food: Action node - Makes the robot collect food from the source. return_to_nest: Action node - Guides the robot back to the nest. deposit_food: Action node - Makes the robot deposit food in the nest. is_food_collected: Condition node - Checks if the robot has successfully collected food. is_at_nest: Condition node - Checks if the robot has reached the nest. is_food_deposited: Condition node - Checks if the robot has successfully deposited food in the nest.
OUTPUT:
<BehaviorTree> <Sequence> <Action>find_food_source</Action> <Sequence> <Condition>is_food_collected</Condition> <Action>return_to_nest</Action> <Sequence> <Condition>is_at_nest</Condition> <Action>deposit_food</Action> <Condition>is_food_deposited</Condition> </Sequence> </Sequence> </Sequence> </BehaviorTree>



###

USER COMMAND: Explore and map an unknown environment using a swarm of robots.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: explore: Subtree node - Represents a behavior tree for exploring the environment in a coordinated manner. map: Action node - Makes the robots use sensors and mapping algorithms to create a map of the environment. update_map: Action node - Updates the map with new information as the robots explore. is_map_complete: Condition node - Checks if the map is complete and all areas of the environment have been explored.
OUTPUT:
<BehaviorTree> <Sequence> <Action>explore</Action> <Sequence> <Condition>is_map_complete</Condition> <Action>map</Action> <Action>update_map</Action> </Sequence> </Sequence> </BehaviorTree>



###

USER COMMAND: Guide a swarm of robots to collaboratively build a structure using modular pieces.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: find_brick: Action node - Makes the robots search for a modular brick piece nearby. pick_up_brick: Action node - Guides a robot to pick up the brick and bring it to the construction site. place_brick: Action node - Places the brick in the designated position in the structure. is_brick_picked_up: Condition node - Checks if a robot has successfully picked up the brick. is_at_construction_site: Condition node - Checks if the robot has reached the construction site. is_brick_placed: Condition node - Checks if the robot has successfully placed the brick in the structure.
OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>find_brick</Condition> <Action>pick_up_brick</Action> <Condition>is_brick_picked_up</Condition> </Sequence> <Action>wander</Action> </Selector> <Sequence> <Condition>is_at_construction_site</Condition> <Action>place_brick</Action> <Condition>is_brick_placed</Condition> </Sequence> </Sequence> </BehaviorTree>


###

USER COMMAND: Traverse through a challenging obstacle course while maintaining coordination with other robots.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: {'move_forward': 'Action node: Move the robot forward.', 'move_backward': 'Action node: Move the robot backward.', 'turn_left': 'Action node: Turn the robot left.', 'turn_right': 'Action node: Turn the robot right.', 'is_obstacle_detected': 'Condition node: Checks if an obstacle is detected in front of the robot.
Returns: True if an obstacle is detected, False otherwise.', 'is_teammate_in_sight': 'Condition node: Checks if a teammate is within range of vision.
Returns: True if a teammate is detected, False otherwise.'}
OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_obstacle_detected</Condition><Sequence><Action>turn_right</Action><Action>move_forward</Action></Sequence><Sequence><Action>move_backward</Action><Action>turn_left</Action></Sequence><Action>move_forward</Action></Sequence><Sequence>><Condition>is_teammate_in_sight</Condition><Action>maintain_coordinate</Action></Sequence></Selector></BehaviorTree>



###

USER COMMAND: Collect and deliver resources while defending against enemy attacks in a resource-collecting game.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: {'collect_resources': 'Action node: Collect resources when in range.',
'return_resources': 'Action node: Return collected resources back to base.',
'attack_enemy': 'Action node: Attack enemy players when they are within range.',
'is_resource_available': 'Condition node: Check if there are resources available to collect in the current location.
Returns: True if resources are available, False otherwise.',
'is_enemy_detected': 'Condition node: Check if an enemy player is detected in the current location.
Returns: True if an enemy is detected, False otherwise.'}
OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_resource_available</Condition><Sequence><Action>collect_resources</Action><Action>return_resources</Action></Sequence><Sequence><Condition>is_enemy_detected</Condition><Action>attack_enemy</Action></Sequence></Selector></BehaviorTree>



###

USER COMMAND: Coordinate with other robots to create a bridge for crossing over a gap in the terrain.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: {'move_forward': 'Action node: Move the robot forward.',
'move_backward': 'Action node: Move the robot backward.',
'turn_left': 'Action node: Turn the robot left.',
'turn_right': 'Action node: Turn the robot right.',
'create_supports': 'Action node: Create support beams for the bridge.',
'is_obstacle_detected': 'Condition node: Checks if an obstacle is detected in front of the robot.
Returns: True if an obstacle is detected, False otherwise.',
'is_teammate_in_sight': 'Condition node: Checks if a teammate is within range of vision.
Returns: True if a teammate is detected, False otherwise.'}
OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_obstacle_detected</Condition><Sequence><Action>turn_right</Action><Action>move_forward</Action></Sequence><Sequence><Action>move_backward</Action><Action>turn_left</Action></Sequence><Action>move_forward</Action></Sequence><Sequence><Condition>is_teammate_in_sight</Condition><Action>create_supports</Action></Sequence></Selector></BehaviorTree>


###

USER COMMAND: generate behavior tree to 'Avoid obstacles while navigating to the goal.'Output only the XML behavior tree without extra text.
INSTRUCTIONS: {'avoid_obstacle': 'Action node: Execute an action to avoid detected obstacles. Returns: Always returns True, indicating the action was executed.', 'change_color_to_green': 'Action node: Change the agent’s color to green, usually indicating a successful operation or state. Returns: Always returns True, indicating the action was executed.', 'is_obstacle_detected': 'Condition node: Determine if any obstacles are detected in the vicinity of the agent. Returns: True if an obstacle is detected, False otherwise.', 'is_target_detected': 'Action node: Check if the target is within a detectable distance from the agent’s position. Returns: True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition node: Check if the agent has reached the target. Returns: True if the target is within 15 units of distance, False otherwise.', 'wander': 'Action node: Perform a wandering action where the agent moves randomly within the environment. Returns: Always returns True, indicating the action was executed.'}
OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>is_obstacle_detected</Condition> <Action>change_color_to_green</Action> </Sequence> <Action>avoid_obstacle</Action> <Condition>is_target_reached</Condition> <Action>wander</Action> </Selector> </BehaviorTree>



###

USER COMMAND: generate behavior tree to 'Search for nearby objects and retrieve them if possible.'Output only the XML behavior tree without extra text.
INSTRUCTIONS: {'agent_movement_freeze': 'Action node: Freeze the agent’s movement, typically to indicate a stop in activity or end of tasks. Returns: Always returns True, indicating the action was executed.', 'change_color_to_green': 'Action node: Change the agent’s color to green, usually indicating a successful operation or state. Returns: Always returns True, indicating the action was executed.', 'check_for_nearby_objects': 'Condition node: Check if there are any objects within a specified distance from the agent. Returns: True if objects are detected within 10 units of distance, False otherwise.', 'retrieve_object': 'Action node: Retrieve the nearest object within range and bring it back to the nest. Returns: True if an object is successfully retrieved and brought back to the nest, False if no object can be retrieved.', 'update_object_list': 'Action node: Update the list of objects in the environment after retrieving one. Returns: Always returns True, indicating the action was executed.', 'wander': 'Action node: Perform a wandering action where the agent moves randomly within the environment. Returns: Always returns True, indicating the action was executed.'}
OUTPUT:
<BehaviorTree> <Sequence> <Condition>check_for_nearby_objects</Condition> <Selector> <Sequence> <Action>change_color_to_green</Action> <Action>update_object_list</Action> </Sequence> <Sequence> <Action>retrieve_object</Action> <Action>agent_movement_freeze</Action> </Sequence> </Selector> <Action>wander</Action> </Sequence> </BehaviorTree>



###

USER COMMAND: generate behavior tree to 'Defend the nest from intruders.'Output only the XML behavior tree without extra text.
INSTRUCTIONS: {'agent_movement_freeze': 'Action node: Freeze the agent’s movement, typically to indicate a stop in activity or end of tasks. Returns: Always returns True, indicating the action was executed.', 'check_for_intruders': 'Condition node: Check if an intruder is within the vicinity of the nest. Returns: True if an intruder is detected within 10 units of distance from the nest, False otherwise.', 'attack_intruder': 'Action node: Direct the agent to attack the intruder, using physical force or other actions. Returns: True if the attack was successful, False otherwise.', 'send_alert': 'Action node: Send a notification or alert to other agents in the swarm to come to the nest and assist in defending it. Returns: Always returns True, indicating the action was executed.', 'wander': 'Action node: Perform a wandering action where the agent moves randomly within the environment. Returns: Always returns True, indicating the action was executed.'}
OUTPUT:
<BehaviorTree> <Sequence> <Condition>check_for_intruders</Condition> <Selector> <Action>attack_intruder</Action> <Sequence> <Action>send_alert</Action> <Action>agent_movement_freeze</Action> </Sequence> </Selector> <Action>wander</Action> </Sequence> <BehaviorTree><BehaviorTree><Selector><Sequence><Condition>is_agent_in_nest</Condition><Action>change_color_to_white</Action></Sequence><Sequence><Condition>is_obstacle_detected</Condition><Action>avoid_obstacle</Action></Sequence><Sequence><Condition>is_path_clear</Condition><Action>form_line</Action><Action>continue_movement_agent</Action></Sequence></Selector><Selector><Sequence><Condition>is_target_detected</Condition><Action>change_color_to_green</Action><Action>task_completed</Action></Sequence><Action>wander</Action></Selector></BehaviorTree>



###

USER COMMAND: generate behavior tree for a swarm of robots to collaborate and construct a tower
INSTRUCTIONS: Provide a set of behaviors that allow the swarm of robots to collaborate and construct a tower. These behaviors should include motion, communication, and construction related actions and conditions. Ensure that the final behavior tree in XML format follows a logical flow and properly utilizes both Sequence and Selector nodes.
OUTPUT:
<BehaviorTree><Sequence><Condition>is_agent_at_base</Condition><Action>communicate_with_other_robots</Action></Sequence><Sequence><Condition>is_tower_under_construction</Condition><Sequence><Condition>is_agent_available</Condition><Action>move_to_next_level</Action></Sequence></Sequence><Selector><Sequence><Condition>is_tower_completed</Condition><Action>communicate_tower_completion</Action></Sequence><Sequence><Condition>is_robot_stuck</Condition><Action>remove_obstacle</Action></Sequence></Selector></BehaviorTree>



###

USER COMMAND: generate behavior tree for a robot to scavenge for resources in a post-apocalyptic world
INSTRUCTIONS: Use the following set of behaviors to construct a behavior tree in XML format for the given command: {'move_forward': 'Action node: Move the robot one step forward in the current direction.
Returns: True if the robot can move forward, False otherwise.', 'turn_left': 'Action node: Turn the robot 90 degrees to the left.
Returns: Always returns True.', 'turn_right': 'Action node: Turn the robot 90 degrees to the right.
Returns: Always returns True.', 'scan_environment': 'Action node: Scan the environment for any resources that can be scavenged.
Returns: True if resources are found, False otherwise.', 'collect_resource': 'Action node: Collect the nearest available resource.
Returns: True if the resource is successfully collected, False otherwise.', 'is_resource_depleted': 'Condition node: Check if the current resource has been depleted or not.
Returns: True if the resource is depleted, False otherwise.', 'is_path_blocked': 'Condition node: Check if the path in the current direction is blocked or impassable.
Returns: True if the path is blocked, False otherwise.', 'is_sufficient_resources_collected': 'Condition node: Check if a sufficient amount of resources have been collected.
Returns: True if enough resources have been collected, False otherwise.'}. Ensure that the behavior tree follows a logical flow, utilizing both Sequence and Selector nodes to handle different paths and decision points.
OUTPUT:
<BehaviorTree><Sequence><Condition>is_path_blocked</Condition><Selector><Sequence><Action>turn_left</Action><Action>turn_right</Action></Sequence><Sequence><Action>move_forward</Action><Sequence><Condition>is_resource_depleted</Condition><Action>scan_environment</Action><Selector><Action>collect_resource</Action><Action>move_to_next_resource</Action></Selector></Sequence></Sequence></Selector></Sequence><Sequence><Condition>is_sufficient_resources_collected</Condition><Action>return_to_base</Action></Sequence></BehaviorTree>



###

USER COMMAND: generate behavior tree for a robot to navigate through a maze and reach the end point
INSTRUCTIONS: Use the following set of behaviors to construct a behavior tree in XML format for the given command: {'move_forward': 'Action node: Move the robot one step forward in the current direction.
Returns: True if the robot can move forward, False otherwise.', 'turn_left': 'Action node: Turn the robot 90 degrees to the left.
Returns: Always returns True.', 'turn_right': 'Action node: Turn the robot 90 degrees to the right.
Returns: Always returns True.', 'is_maze_boundary_reached': 'Condition node: Check if the robot has reached the boundary of the maze.
Returns: True if the boundary is reached, False otherwise.', 'is_obstacle_detected': 'Condition node: Check if any obstacles are detected in the path.
Returns: True if an obstacle is detected, False otherwise.', 'is_endpoint_reached': 'Condition node: Check if the robot has reached the designated endpoint.
Returns: True if the endpoint is reached, False otherwise.'}. Ensure that the behavior tree follows a logical flow and effectively utilizes both Sequence and Selector nodes to handle different paths and decision points.
OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>is_obstacle_detected</Condition><Selector><Action>turn_left</Action><Action>turn_right</Action></Selector></Sequence><Sequence><Action>move_forward</Action><Selector><Condition>is_maze_boundary_reached</Condition><Action>scan_for_possible_path</Action></Selector></Sequence></Selector></Sequence><Sequence><Condition>is_endpoint_reached</Condition><Selector><Condition>is_obstacle_detected</Condition><Action>scan_for_possible_path</Action></Selector></Sequence></BehaviorTree>


###

USER COMMAND: generate behavior tree for a group of robots to navigate through a maze and reach a designated target while avoiding obstacles and keeping a safe distance from each other.
INSTRUCTIONS: Use only the following behaviors to generate XML behavior tree for the group of robots:{'move_to_next_waypoint': 'Action node: Move the robot to the next waypoint in the maze route.
Returns: True if the robot successfully moved to the next waypoint, False otherwise.', 'avoid_obstacle': 'Action node: Execute an action to avoid detected obstacles.
Returns: Always returns True, indicating the action was executed.', 'maintain_safe_distance': 'Action node: Adjust the robot's speed and direction to maintain a safe distance from nearby robots.
Returns: Always returns True, indicating the action was executed.', 'check_target_distance': 'Condition node: Check if the target is within a safe distance from the robot.
Returns: True if the target is within a safe distance, False otherwise.', 'is_obstacle_detected': 'Condition node: Determine if any obstacles are detected in the vicinity of the robot.
Returns: True if an obstacle is detected, False otherwise.', 'check_robot_distance': 'Condition node: Check the distance from other robots and ensure a safe distance is maintained.
Returns: True if a safe distance is maintained, False otherwise.'} to construct a behavior tree in XML format for the given command.
OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>check_target_distance</Condition> <Action>move_to_next_waypoint</Action> </Sequence> <Selector> <Sequence> <Condition>is_obstacle_detected</Condition> <Action>avoid_obstacle</Action> </Sequence> <Sequence> <Condition>check_robot_distance</Condition> <Action>maintain_safe_distance</Action> </Sequence> </Selector> </Selector> </BehaviorTree>



###

USER COMMAND: generate behavior tree for a robot to search for a lost item in a designated area, pick it up, and return to base.
INSTRUCTIONS: Use only the following behaviors to generate XML behavior tree for the robot:{'move_to_next_grid': 'Action node: Move the robot to the next grid in the designated search area.
Returns: True if the robot successfully moved to the next grid, False otherwise.', 'scan_for_item': 'Action node: Scan the current grid for the lost item using sensors.
Returns: True if the item is detected, False otherwise.', 'pick_up_item': 'Action node: Pick up the lost item.
Returns: True if the item is successfully picked up, False otherwise.', 'return_to_base': 'Action node: Return to base with the lost item in possession.
Returns: True if the robot successfully returned to base, False otherwise.', 'is_search_complete': 'Condition node: Check if the robot has completed searching the designated area.
Returns: True if the search is complete, False otherwise.', 'is_item_found': 'Condition node: Determine if the lost item has been found.
Returns: True if the item is detected, False otherwise.'} to construct a behavior tree in XML format for the given command.
OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>is_search_complete</Condition> <Action>return_to_base</Action> </Sequence> <Sequence> <Action>move_to_next_grid</Action> <Selector> <Sequence> <Condition>is_item_found</Condition> <Action>pick_up_item</Action> </Sequence> <Action>scan_for_item</Action> </Selector> </Sequence> </Selector> </BehaviorTree>



###

USER COMMAND: generate behavior tree for a group of swarm robots to work together to terraform a designated area, including tasks such as removing debris, planting seeds, and watering plants.
INSTRUCTIONS: Use only the following behaviors to generate XML behavior tree for the swarm robots:{'remove_debris': 'Action node: Use collective effort to remove any debris from the designated area.
Returns: True if the debris is successfully removed, False otherwise.', 'plant_seeds': 'Action node: Plant seeds in the designated area.
Returns: True if the seeds are successfully planted, False otherwise.', 'water_plants': 'Action node: Use collective effort to water the plants in the designated area.
Returns: True if the plants are successfully watered, False otherwise.', 'form_line': 'Action node: Coordinate the robots to form a line towards the center of the designated area.
Returns: Always returns True, indicating the action was executed.', 'is_debris_present': 'Condition node: Determine if there is any debris present in the designated area.
Returns: True if debris is present, False otherwise.', 'is_area_terraformable': 'Condition node: Check if the designated area is suitable for terraforming.
Returns: True if the area is terraformable, False otherwise.', 'is_planting_completed': 'Condition node: Check if all the seeds have been successfully planted.
Returns: True if all seeds have been planted, False otherwise.'} to construct a behavior tree in XML format for the given command.
OUTPUT:
<BehaviorTree> <Sequence> <Condition>is_area_terraformable</Condition> <Selector> <Sequence> <Condition>is_debris_present</Condition> <Action>remove_debris</Action> </Sequence> <Sequence> <Condition>is_planting_completed</Condition> <Action>form_line</Action> </Sequence> <Action>plant_seeds</Action> </Selector> <Selector> <Action>water_plants</Action> </Selector> </Sequence> </BehaviorTree>


###

USER COMMAND: generate behavior tree for swarm robots to gather a pile of resources and transport them to a designated location
INSTRUCTIONS: Use the following behaviors to construct the behavior tree in XML format for the given command: {'move_to_target_location': 'Action node: Move the robot towards a designated target location.
Returns: True if the robot successfully moved to the target location, False otherwise.', 'detect_resources': 'Condition node: Check if resources are detected within the robot’s range.
Returns: True if resources are detected, False otherwise.', 'gather_resources': 'Action node: Collect the resources detected in the robot’s range.
Returns: True if resources are successfully gathered, False otherwise.', 'navigate_to_nest': 'Action node: Navigate the robot to the designated nest location.
Returns: True if the robot successfully navigated to the nest, False otherwise.', 'deposit_resources': 'Action node: Deposit the gathered resources at the designated nest location.
Returns: True if resources are successfully deposited, False otherwise.'}
OUTPUT:
<BehaviorTree><Sequence><Condition>detect_resources</Condition><Selector><Sequence><Action>move_to_target_location</Action><Action>gather_resources</Action></Sequence><Selector><Sequence><Action>move_to_target_location</Action><Action>navigate_to_nest</Action><Action>deposit_resources</Action></Sequence><Action>wait</Action></Selector></Selector></Sequence></BehaviorTree>



###

USER COMMAND: generate behavior tree for swarm robots to defend against an incoming intrusion while also continuing their current task of resource gathering
INSTRUCTIONS: Utilize the following behaviors and conditions to create the behavior tree in XML format for the given command: {'continue_task': 'Action node: Continue the current task of resource gathering.
Returns: Always returns True.', 'detect_intruder': 'Condition node: Check if an intrusion is detected in the swarm's vicinity.
Returns: True if an intrusion is detected, False otherwise.', 'evade_intruder': 'Action node: Move away from the detected intruder while continuing the current task.
Returns: True if the evasive action was successful, False otherwise.', 'gather_resources': 'Action node: Collect the resources detected in the robot's range.
Returns: True if resources are successfully gathered, False otherwise.'}
OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>detect_intruder</Condition><Action>evade_intruder</Action></Sequence><Action>continue_task</Action></Selector><Action>gather_resources</Action></Sequence></BehaviorTree>



###

USER COMMAND: generate behavior tree to coordinate multiple swarm robots in a search and rescue mission
INSTRUCTIONS: Incorporate the following behaviors and conditions to construct the behavior tree in XML format for the given command: {'move_to_target_location': 'Action node: Move the robot towards a designated target location.
Returns: True if the robot successfully moved to the target location, False otherwise.', 'scan_for_survivors': 'Condition node: Check if any survivors are detected in the robot’s range.
Returns: True if survivors are detected, False otherwise.', 'pickup_survivor': 'Action node: Collect the detected survivor and bring them to a designated safe location.
Returns: True if the survivor is successfully picked up, False otherwise.', 'navigate_to_nest': 'Action node: Navigate the robot to the designated nest location.
Returns: True if the robot successfully navigated to the nest, False otherwise.', 'deposit_survivor': 'Action node: Deposit the picked up survivor at the designated safe location.
Returns: True if the survivor is successfully deposited, False otherwise.'}
OUTPUT:
<BehaviorTree><Sequence><Condition>scan_for_survivors</Condition><Selector><Sequence><Action>move_to_target_location</Action><Action>pickup_survivor</Action><Action>navigate_to_nest</Action><Action>deposit_survivor</Action></Sequence><Action>wait</Action></Selector></Sequence></BehaviorTree>


###

USER COMMAND: Control a swarm of robots to build a designated structure using available resources.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: {'gather_resources': 'Subtree node: Coordinates a group of robots to gather resources needed for construction.
Returns: True if resources are successfully gathered, False otherwise.', 'transport_resources': 'Action node: Transport gathered resources to the construction site.
Returns: True if resources are successfully transported, False otherwise.', 'construct_structure': 'Action node: Use gathered resources to construct the designated structure.
Returns: True if the structure is successfully constructed, False otherwise.', 'is_structure_complete': 'Condition node: Check if the designated structure has been fully constructed.
Returns: True if the structure is complete, False otherwise.'}
OUTPUT:
<BehaviorTree><Sequence><Action>gather_resources</Action><Selector><Sequence><Action>transport_resources</Action><Action>construct_structure</Action><Condition>is_structure_complete</Condition></Sequence></Selector></Sequence></BehaviorTree>



###

USER COMMAND: Create a formation with a swarm of robots and maintain it while avoiding obstacles.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: {'create_formation': 'Action node: Use specific behaviors to coordinate the swarm of robots into a designated formation.
Returns: True if the formation is successfully created, False otherwise.', 'maintain_formation': 'Action node: Continuously check and adjust the robots' positions to maintain the designated formation.
Returns: True if the formation is successfully maintained, False otherwise.', 'avoid_obstacles': 'Condition node: Check for obstacles in the environment and instruct the swarm to avoid them.
Returns: True if no obstacles are present, False otherwise.'}
OUTPUT:
<BehaviorTree><Sequence><Action>create_formation</Action><Selector><Sequence><Condition>avoid_obstacles</Condition><Action>maintain_formation</Action></Sequence></Selector></Sequence></BehaviorTree>



###

USER COMMAND: Coordinate a swarm of robots to distribute supplies to various locations.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: {'gather_supplies': 'Subtree node: Directs the swarm to gather supplies from a designated location.
Returns: True if supplies are successfully gathered and transported, False otherwise.', 'distribute_supplies': 'Action node: Distribute supplies to various locations based on predetermined distribution points.
Returns: True if supplies are successfully distributed, False otherwise.', 'check_supplies': 'Condition node: Check the current supply levels and determine if more supplies need to be gathered.
Returns: True if more supplies are needed, False otherwise.'}
OUTPUT:
<BehaviorTree><Sequence><Action>gather_supplies</Action><Selector><Sequence><Condition>check_supplies</Condition><Action>distribute_supplies</Action></Sequence></Selector></Sequence></BehaviorTree>


###

USER COMMAND: Follow the path and avoid obstacles while staying within the boundaries.Output only the XML behavior tree without extra text.
INSTRUCTIONS: {'avoid_obstacle': 'Action node: Execute an action to avoid detected obstacles. Returns: Always returns True, indicating the action was executed.', 'follow_path': 'Action node: Move agent along a predetermined path. Returns: Always returns True, indicating the action was executed.', 'is_boundary_reached': 'Condition node: Check if the agent has reached the boundary of its designated area. Returns: True if agent reaches boundary, false otherwise.', 'is_obstacle_detected': 'Condition node: Check if any obstacles are detected in front of the agent. Returns: True if obstacle is detected, False otherwise.'}
OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>is_obstacle_detected</Condition> <Action>avoid_obstacle</Action> </Sequence> <Action>follow_path</Action> </Selector> <Condition>is_boundary_reached</Condition> </Sequence> </BehaviorTree>



###

USER COMMAND: Collect resources from multiple locations and return to base.Output only the XML behavior tree without extra text.
INSTRUCTIONS: {'collect_resource': 'Action node: Move to and collect resources from a designated location. Returns: Always returns True, indicating the action was executed.', 'is_target_reached': 'Condition node: Check if the agent has reached the designated target location. Returns: True if target is reached, False otherwise.', 'is_target_detected': 'Action node: Check if the target is within a detectable distance from the agent’s position. Returns: True if the target is within 20 units of distance, False otherwise.', 'move_to_target': 'Action node: Move towards the designated target location. Returns: Always returns True, indicating the action was executed.'}
OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>is_target_reached</Condition> <Action>collect_resource</Action> </Sequence> <Action>move_to_target</Action> </Selector> <Sequence> <Condition>is_target_detected</Condition> <Action>move_to_target</Action> </Sequence> </Sequence> </BehaviorTree>



###

USER COMMAND: Defend the base by attacking any intruders, repair damage if necessary, and report back to base for further instructions.Output only the XML behavior tree without extra text.
INSTRUCTIONS: {'attack_intruders': 'Action node: Attack any intruders detected near the base. Returns: Always returns True, indicating the action was executed.', 'is_damage_detected': 'Condition node: Check if there is any damage to the base. Returns: True if damage is detected, False otherwise.', 'is_intruder_detected': 'Condition node: Check if there are any intruders near the base. Returns: True if intruders are detected, False otherwise.', 'repair_damage': 'Action node: Repair any damage to the base. Returns: Always returns True, indicating the action was executed.', 'return_to_base': 'Action node: Return to the base for further instructions. Returns: Always returns True, indicating the action was executed.'}
OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>is_intruder_detected</Condition> <Action>attack_intruders</Action> </Sequence> <Sequence> <Condition>is_damage_detected</Condition> <Action>repair_damage</Action> </Sequence> <Action>return_to_base</Action> </Selector> </Sequence> </BehaviorTree>


###

USER COMMAND: Navigate through a maze and reach the designated end point while avoiding obstacles along the way.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: navigate_maze: Subtree node (same as before). check_obstacle: Action node (same as before). avoid_obstacle: Action node (same as before). reach_end_point: Condition node (same as before).
OUTPUT:
<BehaviorTree><Sequence><Action>navigate_maze</Action><Selector><Sequence><Action>check_obstacle</Action><Condition>found_obstacle</Condition><Action>avoid_obstacle</Action></Sequence><Condition>reach_end_point</Condition></Selector></Sequence></BehaviorTree>



###

USER COMMAND: Engage in group formation with other swarm robots to collectively move an object to a predetermined location.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: form_group: Action node (same as before). move_object: Action node (same as before). navigate_to_destination: Action node (same as before). is_group_complete: Condition node (same as before).
OUTPUT:
<BehaviorTree><Sequence><Action>form_group</Action><Selector><Sequence><Action>move_object</Action><Condition>is_object_moved</Condition><Action>navigate_to_destination</Action></Sequence><Condition>is_group_complete</Condition></Selector></Sequence></BehaviorTree>



###

USER COMMAND: Collect resources from different locations and deliver them to a central storage area, while communicating with other swarm robots to optimize resource collection and delivery.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: collect_resource: Action node (same as before). navigate_to_storage: Action node (same as before). communicate_with_swarm: Action node (same as before). optimize_collection: Action node (same as before).
OUTPUT:
<BehaviorTree><Sequence><Action>optimize_collection</Action><Selector><Sequence><Action>collect_resource</Action><Condition>resources_full</Condition><Action>navigate_to_storage</Action></Sequence><Action>communicate_with_swarm</Action></Selector></Sequence></BehaviorTree>


###

USER COMMAND: construct behavior tree for a swarm of robots to work together to build a structure
INSTRUCTIONS: Utilize the following behaviors to construct an XML behavior tree for the given task: {'move_to_next_location': 'Action node: Move the robot to the next specified location in the building process.
Returns: True if the robot successfully moved to the next location, False otherwise.', 'attach_part': 'Action node: Attach a designated part to the structure at the current location.
Returns: True if the part was successfully attached, False otherwise.', 'check_resource': 'Condition node: Check if the required resources for building are available.
Returns: True if all resources are available, False otherwise.', 'gather_resources': 'Action node: Search and gather any required resources.
Returns: True if all resources were successfully gathered, False otherwise.', 'is_structure_complete': 'Condition node: Check if the structure has been fully built.
Returns: True if the structure is complete, False otherwise.'}
OUTPUT:
<BehaviorTree> <Sequence> <Condition>is_structure_complete</Condition> <Selector> <Sequence> <Action>gather_resources</Action> <Selector> <Condition>check_resource</Condition> <Action>move_to_next_location</Action> <Action>attach_part</Action> </Selector> </Sequence> <Action>wait</Action> </Selector> </Sequence> </BehaviorTree>



###

USER COMMAND: generate behavior tree for a robot to navigate through a maze and reach the end point
INSTRUCTIONS: Use the following behaviors to construct an XML behavior tree for the given task: {'move_forward': 'Action node: Move the robot forward by one step.
Returns: True if the robot successfully moved forward, False otherwise.', 'turn_left': 'Action node: Turn the robot 90 degrees to the left.
Returns: True if the robot successfully turned left, False otherwise.', 'turn_right': 'Action node: Turn the robot 90 degrees to the right.
Returns: True if the robot successfully turned right, False otherwise.', 'detect_wall': 'Condition node: Check if a wall is present in front of the robot.
Returns: True if a wall is detected, False otherwise.', 'detect_end_point': 'Condition node: Check if the end point has been reached.
Returns: True if the end point is reached, False otherwise.'}
OUTPUT:
<BehaviorTree> <Sequence> <Condition>detect_end_point</Condition> <Selector> <Sequence> <Condition>detect_wall</Condition> <Action>turn_left</Action> <Action>move_forward</Action> </Sequence> <Sequence> <Action>turn_right</Action> <Action>move_forward</Action> </Sequence> </Selector> </Sequence> </BehaviorTree>



###

USER COMMAND: generate behavior tree for a team of robots to coordinate and collect resources in a disaster relief scenario
INSTRUCTIONS: Utilize the following behaviors to construct an XML behavior tree for the given task: {'move_to_resource_location': 'Action node: Move the robot to the designated location where a resource needs to be collected.
Returns: True if the robot successfully moved to the resource location, False otherwise.', 'pick_up_resource': 'Action node: Collect the specified resource from the location.
Returns: True if the resource was successfully collected, False otherwise.', 'deliver_resource_to_base': 'Action node: Deliver the collected resource to the base camp.
Returns: True if the resource was successfully delivered, False otherwise.', 'is_resource_available': 'Condition node: Check if a resource is available at the designated location.
Returns: True if a resource is present, False otherwise.', 'return_to_base': 'Action node: Return to the base camp.
Returns: True if the robot successfully returned to base, False otherwise.'}
OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>is_resource_available</Condition> <Action>move_to_resource_location</Action> <Action>pick_up_resource</Action> <Action>deliver_resource_to_base</Action> </Sequence> <Sequence> <Action>return_to_base</Action> <Action>wait</Action> </Sequence> </Selector> </BehaviorTree>


###

USER COMMAND: Complete a series of tasks in a specific sequence - collect resources, build structures, and defend against enemy attacks.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: collect_resources: Action node (same as before). build_structures: Action node (same as before). wait_for_enemy: Subtree node (same as before). attack_enemy: Action node (same as before). check_enemy: Condition node (same as before).
OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Action>collect_resources</Action><Action>build_structures</Action></Sequence><Subtree>wait_for_enemy</Subtree></Selector><Sequence><Condition>check_enemy</Condition><Action>attack_enemy</Action></Sequence></BehaviorTree>



###

USER COMMAND: Investigate a potential threat and report findings back to base.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: move_to_location: Action node (same as before). search_for_threat: Action node (same as before). report_findings: Action node (same as before). is_threat_detected: Condition node (same as before).
OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_threat_detected</Condition><Action>move_to_location</Action><Action>search_for_threat</Action><Action>report_findings</Action></Sequence></Selector></BehaviorTree>



###

USER COMMAND: Coordinate with other robots to build a structure together.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: find_partner: Action node (same as before). move_to_location: Action node (same as before). build_structure: Action node (same as before). wait_for_partner: Subtree node (same as before). check_partner_complete: Condition node (same as before).
OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Action>find_partner</Action><Action>move_to_location</Action><Action>build_structure</Action></Sequence><Subtree>wait_for_partner</Subtree></Selector><Condition>check_partner_complete</Condition></Sequence></BehaviorTree>


###

USER COMMAND: generate behavior tree to 'Collect samples from 3 different locations, avoid obstacles, and return to base for analysis.'
INSTRUCTIONS: Construct a behavior tree in XML format using the following behaviors: {'move_to_next_location': 'Action node: Move the robot to the next designated location to collect a sample. Returns: True if the robot successfully moves to the next location, False otherwise.', 'collect_sample': 'Action node: Collect a sample from the current location. Returns: True if a sample was successfully collected, False otherwise.', 'avoid_obstacle': 'Action node: Take action to avoid detected obstacles. Returns: True if the obstacle was successfully avoided, False otherwise.', 'return_to_base': 'Action node: Return to base with collected samples for analysis. Returns: True if the robot successfully returns to base, False otherwise.', 'is_obstacle_detected': 'Condition node: Determine if any obstacles are detected in the vicinity of the robot. Returns: True if an obstacle is detected, False otherwise.', 'is_sample_collected': 'Condition node: Check if a sample was successfully collected from the current location. Returns: True if a sample was collected, False otherwise.', 'is_all_samples_collected': 'Condition node: Check if the robot has successfully collected all 3 designated samples. Returns: True if all samples have been collected, False otherwise.'}
OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>is_obstacle_detected</Condition><Action>avoid_obstacle</Action></Sequence><Sequence><Condition>is_sample_collected</Condition><Action>move_to_next_location</Action><Action>collect_sample</Action></Sequence></Selector><Condition>is_all_samples_collected</Condition><Action>return_to_base</Action></Sequence></BehaviorTree>



###

USER COMMAND: generate behavior tree for a robot to build a structure using blocks
INSTRUCTIONS: Use the following behaviors to construct an XML behavior tree: {'move_to_block': 'Action node: Move the robot to the designated block. Returns: True if the robot successfully moves to the block, False otherwise.', 'pick_up_block': 'Action node: Pick up the block at the current location. Returns: True if the block was successfully picked up, False otherwise.', 'place_block': 'Action node: Place the block at the designated location. Returns: True if the block was successfully placed, False otherwise.', 'rotate_arm': 'Action node: Rotate the robot's arm to adjust the position of the block. Returns: True if the arm was successfully rotated, False otherwise.', 'is_block_available': 'Condition node: Determine if a block is available at the designated location. Returns: True if a block is available, False otherwise.', 'is_block_held': 'Condition node: Check if the robot is currently holding a block. Returns: True if a block is held, False otherwise.', 'is_building_complete': 'Condition node: Check if the structure has been fully built using blocks. Returns: True if the structure is complete, False otherwise.'}
OUTPUT:
<BehaviorTree><Sequence><Selection><Sequence><Condition>is_block_held</Condition><Action>place_block</Action></Sequence><Sequence><Selection><Sequence><Condition>is_block_available</Condition><Action>move_to_block</Action><Action>pick_up_block</Action></Sequence><Action>rotate_arm</Action></Selection></Sequence></Selection><Condition>is_building_complete</Condition></Sequence></BehaviorTree>



###

USER COMMAND: generate behavior tree for swarm robots to work together to forage for food and return it to the nest.
INSTRUCTIONS: Use the following behaviors and conditions to construct an XML behavior tree: {'move_to_food': 'Action node: Move the robot to the designated food source. Returns: True if the robot successfully moves to the food, False otherwise.', 'collect_food': 'Action node: Collect food from the current location. Returns: True if food was successfully collected, False otherwise.', 'return_to_nest': 'Action node: Return to the nest with collected food. Returns: True if the robot successfully returns to the nest, False otherwise.', 'deposit_food': 'Action node: Deposit the food at the nest. Returns: True if the food was successfully deposited, False otherwise.', 'is_food_available': 'Condition node: Determine if food is available at the designated location. Returns: True if food is available, False otherwise.', 'is_food_collected': 'Condition node: Check if food has been successfully collected. Returns: True if food has been collected, False otherwise.' 'are_all_robots_at_nest': 'Condition node: Check if all robots in the swarm have returned to the nest. Returns: True if all robots are at the nest, False otherwise.', 'is_nest_full': 'Condition node: Check if the nest is full and cannot store any more food. Returns: True if the nest is full, False otherwise.'}
OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>are_all_robots_at_nest</Condition><Selection><Sequence><Action>move_to_food</Action><Action>collect_food</Action></Sequence><Sequence><Condition>is_food_collected</Condition><Selection><Action>return_to_nest</Action><Action>deposit_food</Action></Selection></Sequence></Selection></Sequence><Condition>is_nest_full</Condition></Selector></Sequence></BehaviorTree>


###

USER COMMAND: Call for backup when encountering enemies and continue exploring afterwards
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: call_for_backup: Action node - Sends a distress signal to other robots for backup. is_enemy_nearby: Condition node - Checks if there are enemies within a certain radius. explore_area: Subtree node - Represents a behavior tree for exploring an area. continue_exploring: Action node - Instructs the robot to continue exploring after backup has been called.
OUTPUT:
<BehaviorTree><Sequence><Condition>is_enemy_nearby</Condition><Action>call_for_backup</Action><Action>explore_area</Action><Action>continue_exploring</Action></Sequence></BehaviorTree>



###

USER COMMAND: Collect resources and deposit them at base while avoiding obstacles
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: collect_resources: Action node - Instructs the robot to gather resources. deposit_resources: Action node - Brings the collected resources back to base. avoid_obstacles: Condition node - Checks if there are obstacles in the path.
OUTPUT:
<BehaviorTree><Sequence><Action>collect_resources</Action><Condition>avoid_obstacles</Condition><Action>deposit_resources</Action></Sequence></BehaviorTree>



###

USER COMMAND: Find the nearest charging station and recharge before continuing task
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: find_charging_station: Action node - Instructs the robot to locate the nearest charging station. recharge: Action node - Charges the robot's battery. is_low_battery: Condition node - Checks if the battery level is below a certain threshold.
OUTPUT:
<BehaviorTree><Sequence><Action>find_charging_station</Action><Condition>is_low_battery</Condition><Action>recharge</Action></Sequence></BehaviorTree>


###

USER COMMAND: Patrol an area while avoiding obstacles and checking for any suspicious activity
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: patrol_area: Action node - Moves the robot along a designated patrol route. avoid_obstacles: Action node - Uses sensors to detect and avoid any obstacles in the robot's path. scan_for_suspicious_activity: Action node - Scans the area for any suspicious activity using cameras and other sensors. is_obstacle_detected: Condition node - Checks if an obstacle is detected in the robot's path. is_suspicious_activity_detected: Condition node - Checks if any suspicious activity is detected in the current area.
OUTPUT:
<BehaviorTree><Sequence><Action>patrol_area</Action><Sequence><Condition>is_obstacle_detected</Condition><Action>avoid_obstacles</Action></Sequence><Sequence><Condition>is_suspicious_activity_detected</Condition><Action>investigate_activity</Action></Sequence><Action>scan_for_suspicious_activity</Action></Sequence></BehaviorTree>



###

USER COMMAND: Perform a coordinated attack with other robots on an enemy base
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: {'move_to_position': 'Action node - Moves the robot to a specified position near the enemy base using path planning and coordinated movements with other robots.', 'detect_enemy': 'Action node - Scans the area for any enemies using sensors and cameras.', 'fire_at_enemy': 'Action node - If an enemy is detected, the robot will fire at it using its weapons.', 'is_enemy_defeated': 'Condition node - Checks if the enemy has been defeated by monitoring its health status.'}
OUTPUT:
<BehaviorTree><Sequence><Action>move_to_position</Action><Selector><Sequence><Action>detect_enemy</Action><Selector><Sequence><Condition>is_enemy_defeated</Condition><Action>move_to_next_position</Action></Sequence><Action>fire_at_enemy</Action></Selector></Sequence></Selector></Sequence></BehaviorTree>



###

USER COMMAND: Navigate through a hazardous environment while collecting data samples
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: {'navigate_to_next_location': 'Action node - Moves the robot to the next designated location using path planning and obstacle avoidance.', 'collect_data_sample': 'Action node - Collects a data sample at the current location using sensors and sampling equipment.', 'avoid_hazards': 'Action node - Uses sensors to detect and avoid any hazards in the environment.', 'is_data_collected': 'Condition node - Checks if a data sample has been successfully collected.'}
OUTPUT:
<BehaviorTree><Sequence><Action>navigate_to_next_location</Action><Selector><Sequence><Condition>is_data_collected</Condition><Action>navigate_to_next_location</Action></Sequence><Sequence><Action>avoid_hazards</Action><Action>collect_data_sample</Action></Sequence></Selector></Sequence></BehaviorTree>

This behavior tree utilizes a Sequence node to perform a logical sequence of actions: moving to the next waypoint, scanning for intruders, and then reporting any detected intruders.
The Selector node is used to handle different outcomes: if an intruder is detected, the robot will immediately report it by sending an alert signal. Otherwise, it will wait for the next waypoint. This structure allows for efficient decision-making in the robot's patrol behavior.
The use of conditions and actions also ensures clear definitions for checks and tasks, while staying within the context of swarm robotics by utilizing cooperative actions through the use of a wait node.


###

USER COMMAND: Find and retrieve a lost item while avoiding obstacles
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: move_to_lost_item: Action node - Uses sensors to detect and move towards a lost item location. is_item_found: Condition node - Checks if the lost item has been found. retrieve_item: Action node - Moves closer to the lost item and retrieves it. avoid_obstacles: Action node - Uses obstacle avoidance algorithms to move around obstacles.
OUTPUT:
<BehaviorTree><Selector><Sequence><Action>move_to_lost_item</Action><Selector><Condition>is_item_found</Condition><Action>retrieve_item</Action></Selector><Action>avoid_obstacles</Action></Sequence></Selector></BehaviorTree>

Explanation:
This behavior tree utilizes a Sequence node to move towards the location of the lost item, while also utilizing a Selector node to handle different outcomes. If the item is found, the robot will retrieve it, but if it encounters an obstacle, it will use its avoidance algorithms to navigate around it.
This example also showcases the use of specific behaviors relevant to the given task, such as obstacle avoidance. This provides a more comprehensive and applicable behavior tree for the robot to follow.


###

USER COMMAND: Coordinate with other robots to build a structure
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: move_to_construction_site: Action node - Uses sensors to detect and move towards the construction site. is_site_reached: Condition node - Checks if the robot has reached the construction site. pick_up_material: Action node - Picks up building materials. is_material_picked: Condition node - Checks if the robot has successfully picked up materials. build_structure: Action node - Coordinates with other robots to build a structure.
OUTPUT:
<BehaviorTree><Sequence><Action>move_to_construction_site</Action><Condition>is_site_reached</Condition><Action>pick_up_material</Action><Condition>is_material_picked</Condition><Action>build_structure</Action></Sequence></BehaviorTree>

Explanation:
This behavior tree highlights the use of a Sequence node to perform a stepwise execution of tasks, in this case, coordinating with other robots to build a structure. Conditions are used to check if each task has been completed successfully before moving onto the next step. This showcases the coordination and cooperation aspect of swarm robotics in a task-oriented manner.


###

USER COMMAND: Search and retrieve a missing person in a disaster area
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: move_to_search_area: Action node - Uses sensors and data analysis to determine the optimal search area and moves towards it. is_search_area_reached: Condition node - Checks if the search area has been reached. search_area: Subtree node - Represents a behavior tree for systematically searching the designated area. is_person_found: Condition node - Checks if the missing person has been found. retrieve_person: Action node - Coordinates with other robots to retrieve the missing person.
OUTPUT:
<BehaviorTree><Sequence><Action>move_to_search_area</Action><Condition>is_search_area_reached</Condition><Sequence><Subtree>search_area</Subtree><Condition>is_person_found</Condition><Action>retrieve_person</Action></Sequence><Action>scan_for_survivors</Action></Sequence></BehaviorTree>

Explanation:
This behavior tree utilizes a mix of Sequence and Subtree nodes to handle different paths and decision points in the search and retrieval process. The use of a Subtree node allows for a more systematic and thorough search of the designated area. Conditions are also used to check for important milestones, such as finding the missing person, before proceeding with the retrieval process. The final action of scanning for any other survivors also fits within the context of swarm robotics, as it showcases the collective efforts and actions of multiple robots working together.

###

USER COMMAND: generate behavior tree for a swarm of robots to efficiently clean a large warehouse
INSTRUCTIONS: Use the following behaviors to generate an XML behavior tree for the given command: {'spread_out': 'Action node: Direct robots to spread out and cover different areas of the warehouse.
Returns: Always returns True.', 'clean_floor': 'Action node: Use cleaning tools to clean the designated area.
Returns: True if the area has been cleaned, False otherwise.', 'is_area_dirty': 'Condition node: Check if the designated area is dirty and in need of cleaning.
Returns: True if the area is dirty, False otherwise.', 'is_cleaning_finished': 'Condition node: Check if the entire warehouse has been cleaned.
Returns: True if all areas have been cleaned, False otherwise.'}
OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>is_area_dirty</Condition><Action>clean_floor</Action></Sequence><Action>spread_out</Action></Selector><Sequence><Condition>is_cleaning_finished</Condition><Action>task_completed</Action></Sequence></Sequence></BehaviorTree>



###

USER COMMAND: generate behavior tree to complete a complex cooperative task with multiple steps
INSTRUCTIONS: Use the following behaviors to generate an XML behavior tree for the given command: {'navigate_obstacle_course': 'Action node: Navigate a preset obstacle course as a team.
Returns: True if all robots successfully complete the course, False otherwise.', 'pickup_object': 'Action node: Pick up the designated object.
Returns: True if the object is successfully picked up, False otherwise.', 'place_object': 'Action node: Place the designated object in a specific location.
Returns: True if the object is successfully placed, False otherwise.', 'is_object_picked_up': 'Condition node: Check if the designated object has been picked up.
Returns: True if the object is picked up, False otherwise.', 'is_object_placed': 'Condition node: Check if the designated object has been correctly placed.
Returns: True if the object is placed in the correct location, False otherwise.'}
OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Action>pickup_object</Action><Condition>is_object_picked_up</Condition><Action>place_object</Action><Condition>is_object_placed</Condition></Sequence><Action>navigate_obstacle_course</Action></Selector></Sequence></BehaviorTree>



###

USER COMMAND: generate behavior tree to coordinate a swarm of drones for an aerial mapping mission
INSTRUCTIONS: Use the following behaviors to generate an XML behavior tree for the given command: {'take_off': 'Action node: Initiate take-off sequence for the drones.
Returns: True if all drones successfully take off, False otherwise.', 'fly_to_target': 'Action node: Fly the drones to the designated target location.
Returns: True if all drones successfully reach the target, False otherwise.', 'take_photos': 'Action node: Use cameras to take aerial photos of the target location.
Returns: True if all drones successfully take photos, False otherwise.', 'is_target_reached': 'Condition node: Check if all drones have reached the target.
Returns: True if all drones have reached the target, False otherwise.', 'is_photos_taken': 'Condition node: Check if all drones have successfully taken photos.
Returns: True if all drones have taken photos, False otherwise.'}
OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Action>take_off</Action><Action>fly_to_target</Action><Condition>is_target_reached</Condition><Action>take_photos</Action><Condition>is_photos_taken</Condition></Sequence><Action>task_completed</Action></Selector></Sequence></BehaviorTree>


###

USER COMMAND: generate behavior tree for a swarm of robots to coordinate and build a structure together
INSTRUCTIONS: Use only the following behaviors to generate XML Behavior tree based on the user command: {'receive_instructions': 'Action node: Receive instructions from a designated leader robot on what task to perform.
Returns: True if the instructions were received successfully, False otherwise.', 'move_to_designated_area': 'Action node: Move the robot to the designated area for construction.
Returns: True if the robot successfully arrived at the designated area, False otherwise.', 'gather_resources': 'Action node: Gather the necessary resources from the environment to build the structure.
Returns: True if all resources were collected successfully, False otherwise.', 'build_structure': 'Action node: Use the collected resources to build the designated structure in the designated area.
Returns: True if the structure was successfully built, False otherwise.', 'has_resources': 'Condition node: Check if the robot has the necessary resources to build the structure.
Returns: True if the robot has all resources, False otherwise.'} to construct a behavior tree in XML format for the given command.
OUTPUT:
<BehaviorTree><Sequence><Condition>has_resources</Condition><Selector><Sequence><Action>receive_instructions</Action><Action>move_to_designated_area</Action><Action>gather_resources</Action></Sequence><Action>build_structure</Action></Selector></Sequence>
</BehaviorTree>



###

USER COMMAND: generate behavior tree for a robot to search for a lost object in a cluttered environment
INSTRUCTIONS: Use only the following behaviors to generate XML Behavior tree based on the user command: {'move_to_next_location': 'Action node: Move the robot to the next search location in the designated search path.
Returns: True if the robot successfully moved to the next location, False otherwise.', 'scan_for_object': 'Action node: Use sensors to scan the current location for the lost object.
Returns: True if the object was detected, False otherwise.', 'pick_up_object': 'Action node: Pick up the lost object if it is found.
Returns: True if the object was successfully picked up, False otherwise.', 'is_object_found': 'Condition node: Check if the object has been found in the current location.
Returns: True if the object is found, False otherwise.', 'is_search_complete': 'Condition node: Check if the robot has completed the designated search path.
Returns: True if the search is complete, False otherwise.'} to construct a behavior tree in XML format for the given command.
OUTPUT:
<BehaviorTree><Selector><Condition>is_search_complete</Condition><Sequence><Action>move_to_next_location</Action><Sequence><Condition>is_object_found</Condition><Sequence><Action>pick_up_object</Action><Action>wait</Action></Sequence><Selector><Action>scan_for_object</Action><Action>wait</Action></Selector></Sequence></Selector></BehaviorTree>



###

USER COMMAND: generate behavior tree for a swarm of robots to collect and transport resources to a designated location
INSTRUCTIONS: Use only the following behaviors to generate XML Behavior tree based on the user command: {'move_to_resource': 'Action node: Move to the nearest resource location.
Returns: True if the robot successfully moved to the resource location, False otherwise.', 'collect_resource': 'Action node: Collect the resource at the current location.
Returns: True if the resource was successfully collected, False otherwise.', 'move_to_designated_location': 'Action node: Move the resource to the designated location.
Returns: True if the robot successfully arrived at the designated location, False otherwise.', 'drop_resource': 'Action node: Drop the resource at the designated location.
Returns: True if the resource was successfully dropped, False otherwise.', 'has_resource': 'Condition node: Check if the robot has a resource to transport.
Returns: True if the robot has a resource, False otherwise.', 'is_collection_complete': 'Condition node: Check if all resources have been collected and transported to the designated location.
Returns: True if the collection is complete, False otherwise.'} to construct a behavior tree in XML format for the given command.
OUTPUT:
<BehaviorTree><Sequence><Condition>is_collection_complete</Condition><Selector><Sequence><Condition>has_resource</Condition><Sequence><Action>move_to_designated_location</Action><Action>drop_resource</Action></Sequence><Sequence><Action>move_to_resource</Action><Action>collect_resource</Action></Sequence></Selector></Sequence>
</BehaviorTree>


###

USER COMMAND: Create a behavior tree to 'Forage for food in a designated area. If food is scarce, collaborate with other robots to find a new foraging location.'
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: forage_food: Subtree node (same as before). check_food_supply: Subtree node (same as before). collaborate_forage: Subtree node (same as before). find_new_location: Action node (same as before). is_food_scarce: Condition node (same as before).
OUTPUT:
<BehaviorTree><Sequence><Action>forage_food</Action><Selector><Sequence><Action>check_food_supply</Action><Condition>is_food_scarce</Condition><Sequence><Action>collaborate_forage</Action><Action>find_new_location</Action></Sequence></Sequence></Selector></Sequence></BehaviorTree>



###

USER COMMAND: Assemble a formation with multiple robots, each taking up a specific position and performing a unique task.
INSTRUCTIONS: {'move_to_position': 'Action node: Move to a designated position within the formation. Returns: Returns True if the agent is able to reach the intended position, False otherwise.', 'rotate_in_place': 'Action node: Rotate the agent in place to adjust its position in the formation. Returns: Always returns True, indicating the rotation action was completed.', 'process_data': 'Action node: Process and analyze data collected by the robot in its designated position. Returns: Always returns True, indicating the data processing action was completed. ', 'is_formation_complete': 'Condition node: Check if all robots have successfully reached their designated positions. Returns: True if all robots have reached their positions, False otherwise.', 'is_leader': 'Condition node: Determine if the current robot is the designated leader in the formation. Returns: True if the robot is the leader, False otherwise.'}
OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Action>move_to_position</Action><Condition>is_leader</Condition><Selector><Sequence><Condition>is_formation_complete</Condition><Action>process_data</Action></Sequence><Sequence><Action>rotate_in_place</Action><Action>task_completed</Action></Sequence></Selector></Sequence></Selector></Sequence></BehaviorTree>



###

USER COMMAND: Navigate through an obstacle course, using specific behaviors to avoid obstacles and complete tasks.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: navigate_obstacle_course: Subtree node (same as before). detect_obstacle: Subtree node (same as before). avoid_obstacle: Action node (same as before). complete_task: Action node (same as before). is_task_complete: Condition node (same as before).
OUTPUT:
<BehaviorTree><Sequence><Action>navigate_obstacle_course</Action><Sequence><Action>detect_obstacle</Action><Condition>is_task_complete</Condition><Sequence><Action>avoid_obstacle</Action><Action>complete_task</Action></Sequence></Sequence></BehaviorTree>



###

USER COMMAND: generate behavior tree for a group of robots to collaborate and build a structure
INSTRUCTIONS: Use the following behaviors to create a behavior tree in XML format for the given command: {'move_to_location': 'Action node: Move to a specific location.
Returns: True if the robot successfully moved to the location, False otherwise.', 'gather_resources': 'Action node: Gather necessary resources for building.
Returns: True if the resources were successfully gathered, False otherwise.', 'build_structure': 'Action node: Use gathered resources to build a structure.
Returns: True if the structure was successfully built, False otherwise.', 'is_resources_available': 'Condition node: Check if there are enough resources available for building.
Returns: True if there are enough resources, False otherwise.', 'is_location_reached': 'Condition node: Check if the robot has reached the designated building location.
Returns: True if the location is reached, False otherwise.'}
OUTPUT:
<BehaviorTree><Sequence><Condition>is_location_reached</Condition><Action>build_structure</Action></Sequence><Sequence><Condition>is_resources_available</Condition><Action>gather_resources</Action><Action>move_to_location</Action><Selector><Sequence><Condition>is_resources_available</Condition><Action>gather_resources</Action></Sequence><Action>move_to_location</Action></Selector></Sequence></BehaviorTree>



###

USER COMMAND: generate behavior tree for a delivery robot to pick up and drop off a package
INSTRUCTIONS: Use the following behaviors to create a behavior tree in XML format for the given command: {'move_to_pickup_location': 'Action node: Move to the designated pickup location.
Returns: True if the robot successfully moved to the location, False otherwise.', 'pick_up_package': 'Action node: Pick up the package at the designated location.
Returns: True if the package was successfully picked up, False otherwise.', 'move_to_dropoff_location': 'Action node: Move to the designated drop off location.
Returns: True if the robot successfully moved to the location, False otherwise.', 'drop_off_package': 'Action node: Drop off the package at the designated location.
Returns: True if the package was successfully dropped off, False otherwise.', 'is_package_picked_up': 'Condition node: Check if the package has been successfully picked up.
Returns: True if the package has been picked up, False otherwise.', 'is_delivery_complete': 'Condition node: Checks if the delivery has been completed.
Returns: True if the package has been successfully dropped off, False otherwise.'}
OUTPUT:
<BehaviorTree><Sequence><Condition>is_package_picked_up</Condition><Action>move_to_dropoff_location</Action><Condition>is_delivery_complete</Condition></Sequence><Sequence><Condition>is_package_picked_up</Condition><Action>pick_up_package</Action><Action>move_to_pickup_location</Action></Sequence></BehaviorTree>



###

USER COMMAND: generate behavior tree for swarm robots to efficiently harvest a field
INSTRUCTIONS: Use the following behaviors to create a behavior tree in XML format for the given command: {'move_to_next_row': 'Action node: Move the robot to the next row in the field.
Returns: True if the robot successfully moved to the row, False otherwise.', 'harvest_plant': 'Action node: Harvest the plant in the current row.
Returns: True if the plant was successfully harvested, False otherwise.', 'is_next_row_available': 'Condition node: Check if there is a next row in the field.
Returns: True if there is another row, False otherwise.', 'is_plant_fully_grown': 'Condition node: Check if the plant in the current row is fully grown.
Returns: True if the plant is fully grown, False otherwise.', 'is_field_harvested': 'Condition node: Check if the entire field has been harvested.
Returns: True if the entire field has been harvested, False otherwise.'}
OUTPUT:
<BehaviorTree><Sequence><Condition>is_field_harvested</Condition><Selector><Sequence><Condition>is_plant_fully_grown</Condition><Action>harvest_plant</Action></Sequence><Action>move_to_next_row</Action></Selector><Sequence><Condition>is_next_row_available</Condition><Action>move_to_next_row</Action></Sequence></Sequence></BehaviorTree>


###

USER COMMAND: Swarm robots to work together and build a structure while avoiding obstacles and maintaining communication.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: swarm_together: Subtree node - Includes behaviors for coordinating and communicating with other robots. build_structure: Action node - Represents building a structure. avoid_obstacles: Subtree node - Includes behaviors for sensing and avoiding obstacles. maintain_communication: Action node - Represents maintaining communication with other robots. 
OUTPUT:
<BehaviorTree><Sequence><Action>swarm_together</Action><Action>build_structure</Action><Selector><Sequence><Action>avoid_obstacles</Action></Sequence><Action>maintain_communication</Action></Selector></Sequence></BehaviorTree>



###

USER COMMAND: Search and rescue mission - swarm robots must locate and rescue a person trapped in a specific location while avoiding hazards.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: search_location: Subtree node - Represents behaviors for searching a specific location. rescue_person: Action node - Represents the action of rescuing a person. avoid_hazards: Subtree node - Includes behaviors for identifying and avoiding hazards. approach_person: Action node - Represents approaching the person to be rescued.
OUTPUT:
<BehaviorTree><Sequence><Action>search_location</Action><Selector><Sequence><Action>rescue_person</Action></Sequence><Action>avoid_hazards</Action><Action>approach_person</Action></Selector></Sequence></BehaviorTree>



###

USER COMMAND: Coordinated exploration and mapping - swarm robots must explore a designated area and create a map while avoiding collisions with one another.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: explore_area: Subtree node - Represents behaviors for exploring and mapping a designated area. avoid_collisions: Subtree node - Includes behaviors for detecting and avoiding collisions with other robots. update_map: Action node - Represents updating the map with new information. 
OUTPUT:
<BehaviorTree><Sequence><Action>explore_area</Action><Selector><Action>avoid_collisions</Action><Sequence><Action>update_map</Action></Sequence></Selector></Sequence></BehaviorTree>

###

USER COMMAND: Explore new territory while avoiding obstacles. If an obstacle is detected, navigate around it and return to exploration.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: explore_new_territory: Subtree node (same as before). avoid_obstacle: Subtree node - Represents a behavior tree for navigating around obstacles. return_to_exploration: Action node - Signals the agent to stop avoiding obstacles and continue exploring. is_obstacle_detected: Condition node - Checks if an obstacle is detected.
OUTPUT:
<BehaviorTree><Sequence><Action>explore_new_territory</Action><Selector><Sequence><Condition>is_obstacle_detected</Condition><Action>avoid_obstacle</Action><Action>return_to_exploration</Action></Sequence></Selector></Sequence></BehaviorTree>


###

USER COMMAND: Coordinate with other robots to gather resources for the colony. If a robot requires assistance, prioritize helping them before continuing to gather resources.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: coordinate_with_other_robots: Action node - Signals to the agent to coordinate with other robots. gather_resources: Action node (same as before). help_robot: Action node - Signals to the agent to assist a robot in need. continue_gathering: Action node - Signals to the agent to continue gathering resources. requires_assistance: Condition node - Checks if another robot requires assistance.
OUTPUT:
<BehaviorTree><Sequence><Action>coordinate_with_other_robots</Action><Selector><Sequence><Condition>requires_assistance</Condition><Action>help_robot</Action><Action>continue_gathering</Action></Sequence></Selector></Sequence></BehaviorTree>


###

USER COMMAND: Defend the colony from an approaching threat. If the threat is too strong, retreat and regroup with other robots before re-entering the fight.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: defend_colony: Action node - Signals to the agent to defend the colony from a threat. retreat_and_regroup: Subtree node - Represents a behavior tree for retreating and regrouping with other robots. re_enter_fight: Action node - Signals to the agent to re-enter the fight after retreating. is_threat_too_strong: Condition node - Checks if the threat is too strong to handle alone.
OUTPUT:
<BehaviorTree><Selector><Sequence><Action>defend_colony</Action></Sequence><Sequence><Condition>is_threat_too_strong</Condition><Action>retreat_and_regroup</Action><Action>re_enter_fight</Action></Selector></BehaviorTree>



###

USER COMMAND: Form a formation with other robots and move towards a designated point while avoiding obstacles.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: form_formation: Action node - Guides the robot to form a formation with other robots. move_towards_point: Action node - Moves the robot towards a designated point. avoid_obstacles: Action node - Adjusts the robot's path to avoid obstacles in the environment. is_destination_reached: Condition node - Checks if the robot has reached the designated point.
OUTPUT:
<BehaviorTree><Sequence><Action>form_formation</Action><Action>move_towards_point</Action><Selector><Sequence><Condition>is_destination_reached</Condition></Sequence><Sequence><Action>avoid_obstacles</Action></Sequence></Selector></Sequence></BehaviorTree>



###

USER COMMAND: Collect resources while defending against enemy attacks in a resource-constrained environment.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: collect_resources: Action node - Guides the robot to collect resources from the environment. defend: Action node - Instructs the robot to defend itself against enemy attacks. is_resource_available: Condition node - Checks if there are resources available in the environment. is_enemy_detected: Condition node - Checks if there are enemies present in the environment.
OUTPUT:
<BehaviorTree><Sequence><Action>collect_resources</Action><Selector><Sequence><Condition>is_resource_available</Condition></Sequence><Sequence><Action>defend</Action><Selector><Sequence><Condition>is_enemy_detected</Condition></Sequence></Selector></Sequence></Selector></Sequence></BehaviorTree>



###

USER COMMAND: Coordinate with other robots to build a structure while ensuring structural stability and proper placement.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: coordinate: Action node - Instructs the robot to coordinate with other robots to build a structure. ensure_stability: Action node - Adjusts the placement of the robot's building materials to ensure structural stability. place_materials: Action node - Guides the robot to properly place building materials in the designated location. is_structure_complete: Condition node - Checks if the structure is complete and stable.
OUTPUT:
<BehaviorTree><Selector><Sequence><Action>coordinate</Action><Action>place_materials</Action><Selector><Sequence><Condition>is_structure_complete</Condition></Sequence><Sequence><Action>ensure_stability</Action></Sequence></Selector></Sequence></Selector></BehaviorTree>


###

USER COMMAND: generate behavior tree to 'Collect resources, avoid enemies, and return to home base.'Output only the XML behavior tree without extra text.
INSTRUCTIONS: {'agent_movement_freeze': 'Action node: Freeze the agent’s movement, typically to indicate a stop in activity or end of tasks. Returns: Always returns True, indicating the action was executed.', 'collect_resources': 'Action node: Execute an action to collect available resources in the environment. Returns: Always returns True, indicating the action was executed.', 'avoid_enemies': 'Action node: Execute an action to avoid enemies or other hostile agents. Returns: Always returns True, indicating the action was executed.', 'return_to_home_base': 'Action node: Direct the agent to return to its designated home base. Returns: Always returns True, indicating the action was executed.', 'form_line': 'Action node: Direct the agent to form a line towards the center of the window. This function adjusts the agent’s position to align it with the center. Returns: Always returns True, indicating the action was executed.', 'is_agent_in_nest': 'Condition node: Determine if the agent is in the nest. Returns: True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition node: Determine if the agent has formed a line with a reference point at the center of the window. Returns: True if the line is formed with the center, False otherwise.', 'is_enemy_detected': 'Condition node: Determine if any enemies are in the vicinity of the agent. Returns: True if an enemy is detected, False otherwise.', 'is_path_clear': 'Condition node: Check if the path ahead of the agent is clear of obstacles. Returns: True if no obstacles are detected ahead, False if obstacles are present.', 'is_resource_available': 'Condition node: Check if any resources are available in the environment. Returns: True if resources are available, False otherwise.', 'is_home_base_reached': 'Condition node: Check if the agent has reached its designated home base. Returns: True if the agent is within a specified distance of the home base, False otherwise.', 'task_completed': 'Action node: Signal that the agent has completed its designated task by freezing movement and updating state. Returns: Always returns True, indicating that the task completion action was executed.', 'wander': 'Action node: Perform a wandering action where the agent moves randomly within the environment. Returns: Always returns True, indicating the action was executed.'}
OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>is_resource_available</Condition><Action>collect_resources</Action><Action>task_completed</Action></Sequence><Action>wander</Action></Selector><Selector><Sequence><Condition>is_enemy_detected</Condition><Action>avoid_enemies</Action></Sequence><Action>continue_movement_agent</Action></Selector><Sequence><Condition>is_agent_in_nest</Condition><Action>change_color_to_white</Action></Sequence></BehaviorTree>



###

USER COMMAND: generate behavior tree to 'Search for and retrieve a lost object, avoiding obstacles and returning to home base once completed.'Output only the XML behavior tree without extra text.
INSTRUCTIONS: {'agent_movement_freeze': 'Action node: Freeze the agent’s movement, typically to indicate a stop in activity or end of tasks. Returns: Always returns True, indicating the action was executed.', 'retrieve_object': 'Action node: Execute an action to retrieve a lost object in the environment. Returns: Always returns True, indicating the action was executed.', 'avoid_obstacle': 'Action node: Execute an action to avoid detected obstacles. Returns: Always returns True, indicating the action was executed.', 'return_to_home_base': 'Action node: Direct the agent to return to its designated home base. Returns: Always returns True, indicating the action was executed.', 'explore_area': 'Action node: Direct the agent to explore the environment in search of the lost object. Returns: Always returns True, indicating the action was executed.', 'is_agent_in_nest': 'Condition node: Determine if the agent is in the nest. Returns: True if the agent is in the nest, False otherwise.', 'is_object_retrieved': 'Condition node: Check if the lost object has been successfully retrieved. Returns: True if the object has been retrieved, False otherwise.', 'is_area_explored': 'Condition node: Check if the agent has explored the entire search area. Returns: True if the agent has explored the entire area, False otherwise.', 'is_obstacle_detected': 'Condition node: Determine if any obstacles are detected in the vicinity of the agent. Returns: True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition node: Check if the path ahead of the agent is clear of obstacles. Returns: True if no obstacles are detected ahead, False if obstacles are present.', 'is_home_base_reached': 'Condition node: Check if the agent has reached its designated home base. Returns: True if the agent is within a specified distance of the home base, False otherwise.', 'task_completed': 'Action node: Signal that the agent has completed its designated task by freezing movement and updating state. Returns: Always returns True, indicating that the task completion action was executed.', 'wander': 'Action node: Perform a wandering action where the agent moves randomly within the environment. Returns: Always returns True, indicating the action was executed.'}
OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>is_object_retrieved</Condition><Action>return_to_home_base</Action><Action>change_color_to_white</Action></Sequence><Action>wander</Action></Selector><Selector><Sequence><Condition>is_area_explored</Condition><Action>explore_area</Action></Sequence><Sequence><Condition>is_obstacle_detected</Condition><Action>avoid_obstacle</Action><Action>task_completed</Action></Sequence></Selector><Sequence><Condition>is_agent_in_nest</Condition><Action>change_color_to_white</Action></Sequence></BehaviorTree>



###


USER COMMAND: Navigate through a maze while avoiding obstacles and collecting coins. If all coins are collected, return to starting point.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: move_forward: Action node (same as before). avoid_obstacle: Action node (same as before). collect_coin: Action node - Makes the agent collect a coin. is_obstacle_detected: Condition node (same as before). is_coin_collected: Condition node - Checks if all coins have been collected. return_to_start: Subtree node - Represents a behavior tree for returning to the starting point.
OUTPUT:
<BehaviorTree><Selector><Sequence><Action>move_forward</Action></Sequence><Sequence><Action>avoid_obstacle</Action></Sequence><Sequence><Action>collect_coin</Action></Sequence><Sequence><Condition>is_obstacle_detected</Condition><Condition>is_coin_collected</Condition><Action>return_to_start</Action></Sequence></Selector></BehaviorTree>


###

USER COMMAND: Patrol a designated area while keeping an eye on surroundings. If an intruder is detected, sound an alarm and alert other robots.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: patrol_area: Action node - Makes the agent move in a designated area. monitor_surroundings: Action node - Continuously checks for any intruders. sound_alarm: Action node - Activates the alarm system. alert_others: Action node - Sends a signal to other robots to alert them. is_intruder_detected: Condition node - Checks if an intruder has been detected.
OUTPUT:
<BehaviorTree><Sequence><Action>patrol_area</Action><Action>monitor_surroundings</Action><Selector><Sequence><Condition>is_intruder_detected</Condition><Action>sound_alarm</Action><Action>alert_others</Action></Sequence></Selector></Sequence></BehaviorTree>


###

USER COMMAND: Assemble a structure by picking up and placing blocks in a specific order.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: pick_up_block: Action node - Makes the agent pick up a block. place_block: Action node - Makes the agent place a block in a designated location. is_block_available: Condition node - Checks if there are any blocks available to pick up. is_structure_complete: Condition node - Checks if the structure has been fully assembled.
OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_block_available</Condition><Action>pick_up_block</Action><Action>place_block</Action></Sequence><Sequence><Condition>is_structure_complete</Condition></Sequence></Selector></BehaviorTree>


###

USER COMMAND: Search for a missing object by systematically scanning the environment.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: scan_environment: Action node - Makes the agent scan the environment in a systematic manner. is_object_found: Condition node - Checks if the missing object has been found. continue_searching: Action node - Continues the search if the object has not been found.
OUTPUT:
<BehaviorTree><Sequence><Action>scan_environment</Action><Selector><Sequence><Condition>is_object_found</Condition></Sequence><Action>continue_searching</Action></Selector></Sequence></BehaviorTree>


###

USER COMMAND: Perform a coordinated dance routine with other robots.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: synchronize_movement: Action node - Makes the agent synchronize its movements with other robots. perform_dance_move: Action node - Makes the agent perform a specific dance move. is_dance_finished: Condition node - Checks if the dance routine has been completed.
OUTPUT:
<BehaviorTree><Sequence><Action>synchronize_movement</Action><Selector><Sequence><Condition>is_dance_finished</Condition></Sequence><Action>perform_dance_move</Action></Selector></Sequence></BehaviorTree>


###

USER COMMAND: Complete a series of tasks in a specific order, with the option to skip a task if necessary.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: perform_task: Action node - Makes the agent perform a specific task. skip_task: Action node - Allows the agent to skip a task if necessary. is_task_completed: Condition node - Checks if the task has been completed. continue_to_next_task: Action node - Continues to the next task in the sequence.
OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>is_task_completed</Condition><Action>continue_to_next_task</Action></Sequence><Action>perform_task</Action><Action>skip_task</Action></Selector></Sequence></BehaviorTree>


###

USER COMMAND: Work together with other robots to build a structure, with each robot assigned a specific task.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: assign_task: Action node - Assigns a specific task to the agent. perform_task: Action node - Makes the agent perform the assigned task. is_task_completed: Condition node - Checks if the task has been completed. continue_to_next_task: Action node - Continues to the next task in the sequence.
OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>is_task_completed</Condition><Action>continue_to_next_task</Action></Sequence><Action>assign_task</Action><Action>perform_task</Action></Selector></Sequence></BehaviorTree>

###

USER COMMAND: Collect resources from multiple locations and deposit them at a designated location.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: collect_resource: Subtree node - Represents a behavior tree for collecting resources from a specific location. deposit_resource: Action node - Deposits the collected resources at a designated location. is_resource_full: Condition node - Checks if the robot's resource storage is full. is_resource_available: Condition node - Checks if there are any resources available at the current location.
OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>is_resource_full</Condition><Action>deposit_resource</Action></Sequence><Sequence><Condition>is_resource_available</Condition><Action>collect_resource</Action></Sequence></Selector></Sequence></BehaviorTree>


###

USER COMMAND: Navigate through a maze while avoiding obstacles and reaching the end goal.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: navigate_maze: Subtree node - Represents a behavior tree for navigating through a maze. avoid_obstacle: Action node - Makes the robot avoid obstacles in its path. reach_goal: Action node - Makes the robot reach the end goal. is_obstacle_detected: Condition node - Checks if there is an obstacle in the robot's path. is_goal_reached: Condition node - Checks if the robot has reached the end goal.
OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>is_obstacle_detected</Condition><Action>avoid_obstacle</Action></Sequence><Sequence><Condition>is_goal_reached</Condition><Action>reach_goal</Action></Sequence></Selector></Sequence></BehaviorTree>


###

USER COMMAND: Work together with other robots to build a structure.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: build_structure: Subtree node - Represents a behavior tree for building a structure. coordinate_movement: Action node - Coordinates movement with other robots to work together. gather_resources: Action node - Makes the robot gather resources needed for building. is_structure_complete: Condition node - Checks if the structure is complete. is_resource_available: Condition node - Checks if there are any resources available at the current location.
OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>is_structure_complete</Condition><Action>coordinate_movement</Action></Sequence><Sequence><Condition>is_resource_available</Condition><Action>gather_resources</Action></Sequence></Selector><Action>build_structure</Action></Sequence></BehaviorTree>


###

USER COMMAND: Search for a specific object in a cluttered environment.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: search_object: Subtree node - Represents a behavior tree for searching for a specific object. move_randomly: Action node - Makes the robot move randomly to cover more area. is_object_found: Condition node - Checks if the object has been found. is_obstacle_detected: Condition node - Checks if there is an obstacle in the robot's path.
OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>is_object_found</Condition><Action>move_randomly</Action></Sequence><Sequence><Condition>is_obstacle_detected</Condition><Action>search_object</Action></Sequence></Selector></Sequence></BehaviorTree>


###

USER COMMAND: Work together with other robots to transport a heavy object.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: transport_object: Subtree node - Represents a behavior tree for transporting a heavy object. coordinate_movement: Action node - Coordinates movement with other robots to work together. lift_object: Action node - Makes the robot lift the heavy object. is_object_lifted: Condition node - Checks if the object has been lifted. is_obstacle_detected: Condition node - Checks if there is an obstacle in the robot's path.
OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>is_object_lifted</Condition><Action>coordinate_movement</Action></Sequence><Sequence><Condition>is_obstacle_detected</Condition><Action>lift_object</Action></Sequence></Selector><Action>transport_object</Action></Sequence></BehaviorTree>


###

USER COMMAND: Perform a coordinated dance routine with other robots.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: perform_dance: Subtree node - Represents a behavior tree for performing a dance routine. coordinate_movement: Action node - Coordinates movement with other robots to perform the routine together. synchronize_moves: Action node - Makes the robot synchronize its moves with other robots. is_dance_complete: Condition node - Checks if the dance routine is complete.
OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>is_dance_complete</Condition><Action>coordinate_movement</Action></Sequence><Sequence><Action>synchronize_moves</Action><Action>perform_dance</Action></Sequence></Selector></Sequence></BehaviorTree>

###

USER COMMAND: Work together with other robots to form a specific shape.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: form_shape: Subtree node - Represents a behavior tree for forming a specific shape. coordinate_movement: Action node - Coordinates movement with other robots to form the shape together. move_to_position: Action node - Makes the robot move to a specific position to form the shape. is_shape_formed: Condition node - Checks if the shape has been formed.
OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>is_shape_formed</Condition><Action>coordinate_movement</Action></Sequence><Sequence><Action>move_to_position</Action><Action>form_shape</Action></Sequence></Selector></Sequence></BehaviorTree>

###

USER COMMAND: generate behavior tree to 'Collect data from designated areas and return to central hub.'
INSTRUCTIONS: Use only the following behaviors to generate XML Behavior tree based on the user command: {move_to_designated_area: 'Action node: Move to the designated area to collect data.
Returns: True if the robot successfully moved to the designated area, False otherwise.', collect_data: 'Action node: Collect data at the designated area.
Returns: True if the data was successfully collected, False otherwise.', return_to_central_hub: 'Action node: Return to the central hub.
Returns: True if the robot successfully returned to the central hub, False otherwise.'} to construct a behavior tree in XML format for the given command.
OUTPUT:
<BehaviorTree><Sequence><Selector><Action>move_to_designated_area</Action><Action>collect_data</Action></Selector><Action>return_to_central_hub</Action></Sequence>
</BehaviorTree>


###

USER COMMAND: generate behavior tree to 'Search and rescue mission with two robots - one scout and one rescuer'
INSTRUCTIONS: Use only the following behaviors to generate XML Behavior tree based on the user command: {search_area: 'Action node: Scout the designated area for potential victims.
Returns: True if a victim is located, False otherwise.', reach_victim: 'Action node: Move to and reach the victim in need of rescue.
Returns: True if the victim is successfully reached, False otherwise.', carry_victim: 'Action node: Carry the victim to a safe location.
Returns: True if the victim is successfully carried to safety, False otherwise.', return_to_base: 'Action node: Return to the base with the rescued victim.
Returns: Always returns True, indicating the action was executed.'} to construct a behavior tree in XML format for the given command.
OUTPUT:
<BehaviorTree><Sequence><Action>search_area</Action><Selector><Sequence><Action>reach_victim</Action><Action>carry_victim</Action></Sequence></Selector><Action>return_to_base</Action></Sequence>
</BehaviorTree>


###

USER COMMAND: generate behavior tree to 'Assemble parts to build a structure'
INSTRUCTIONS: Use only the following behaviors to generate XML Behavior tree based on the user command: {move_to_part: 'Action node: Move to the designated part needed for the structure.
Returns: True if the robot successfully moved to the designated part, False otherwise.', pick_up_part: 'Action node: Pick up the designated part.
Returns: True if the part is successfully picked up, False otherwise.', assemble_part: 'Action node: Assemble the picked up part with other parts to build the structure.
Returns: True if the part is successfully assembled, False otherwise.', check_completed: 'Condition node: Check if the structure is completed.
Returns: True if the structure is completed, False otherwise.'} to construct a behavior tree in XML format for the given command.
OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Action>move_to_part</Action><Action>pick_up_part</Action></Sequence><Action>assemble_part</Action></Selector><Condition>check_completed</Condition></Sequence>
</BehaviorTree>


###

USER COMMAND: generate behavior tree to 'Gather resources and bring to central storage'
INSTRUCTIONS: Use only the following behaviors to generate XML Behavior tree based on the user command: {search_area: 'Action node: Search the designated area for resources.
Returns: True if resources are found, False otherwise.', collect_resource: 'Action node: Collect the found resources.
Returns: True if the resources are successfully collected, False otherwise.', return_to_storage: 'Action node: Return to the central storage.
Returns: True if the robot successfully returned to storage, False otherwise.'} to construct a behavior tree in XML format for the given command.
OUTPUT:
<BehaviorTree><Sequence><Action>search_area</Action><Selector><Sequence><Action>collect_resource</Action><Action>return_to_storage</Action></Sequence></Selector></Sequence>
</BehaviorTree>


###

USER COMMAND: generate behavior tree to 'Conduct a collaborative search for a hidden object'
INSTRUCTIONS: Use only the following behaviors to generate XML Behavior tree based on the user command: {move_to_search_point: 'Action node: Move to the designated search point.
Returns: True if the robot successfully moved to the designated point, False otherwise.', search_area: 'Action node: Conduct a thorough search of the designated area for the hidden object.
Returns: True if the object is found, False otherwise.', lift_object: 'Action node: Lift and move the found object to a designated location.
Returns: True if the object is successfully lifted and moved, False otherwise.', is_search_complete: 'Condition node: Check if the search is complete and the object has been found.
Returns: True if the object is found and the search is complete, False otherwise.'} to construct a behavior tree in XML format for the given command.
OUTPUT:
<BehaviorTree><Sequence><Selector><Action>move_to_search_point</Action><Action>search_area</Action></Selector><Sequence><Condition>is_search_complete</Condition><Action>lift_object</Action></Sequence></Sequence>
</BehaviorTree>


###

USER COMMAND: generate behavior tree to 'Camouflage and deceive the opponent robots'
INSTRUCTIONS: Use only the following behaviors to generate XML Behavior tree based on the user command: {camouflage: 'Action node: Use materials from the environment to camouflage the robot.
Returns: True if the robot is successfully camouflaged, False otherwise.', deceive: 'Action node: Use deceptive tactics to confuse and mislead the opponent robots.
Returns: True if the deception is successful, False otherwise.', escape: 'Action node: Make a quick escape to a safe location.
Returns: True if the robot successfully escaped, False otherwise.'} to construct a behavior tree in XML format for the given command.
OUTPUT:
<BehaviorTree><Sequence><Action>camouflage</Action><Selector><Sequence><Action>deceive</Action><Action>escape</Action></Sequence></Selector></Sequence>
</BehaviorTree>


###

USER COMMAND: generate behavior tree to 'Perform coordinated movements while carrying a heavy object'
INSTRUCTIONS: Use only the following behaviors to generate XML Behavior tree based on the user command: {move_in_sync: 'Action node: Move in synchronization with other robots to carry the heavy object.
Returns: Always returns True, indicating that the action was executed.', check_weight: 'Condition node: Check the weight of the object being carried.
Returns: True if the object is still considered heavy, False otherwise.', move_carefully: 'Action node: Move carefully to ensure the heavy object is not dropped.
Returns: True if the robot is moving carefully, False otherwise.',
reposition_object: 'Action node: Reposition the heavy object if it becomes difficult to carry.
Returns: True if the object was successfully repositioned, False otherwise.'} to construct a behavior tree in XML format for the given command.
OUTPUT:
<BehaviorTree><Sequence><Action>move_in_sync</Action><Selector><Sequence><Condition>check_weight</Condition><Action>move_carefully</Action></Sequence><Action>reposition_object</Action></Selector></Sequence>
</BehaviorTree>


###

USER COMMAND: generate behavior tree to 'Regroup in case of separation during a mission'
INSTRUCTIONS: Use only the following behaviors to generate XML Behavior tree based on the user command: {move_to_designated_location: 'Action node: Move to the designated regrouping location.
Returns: True if the robot successfully moved to the designated location, False otherwise.', call_for_assistance: 'Action node: Send a signal to call for assistance from other robots to regroup.
Returns: Always returns True, indicating that the action was executed.', wait_for_assistance: 'Action node: Wait for assistance from other robots to regroup.
Returns: Always returns True, indicating that the action was executed.'} to construct a behavior tree in XML format for the given command.
OUTPUT:
<BehaviorTree><Sequence><Action>move_to_designated_location</Action><Selector><Sequence><Action>call_for_assistance</Action><Action>wait_for_assistance</Action></Sequence></Selector></Sequence>
</BehaviorTree>


###

USER COMMAND: generate behavior tree to 'Secure perimeter and protect base from enemy attacks'
INSTRUCTIONS: Use only the following behaviors to generate XML Behavior tree based on the user command: {move_to_designated_location: 'Action node: Move to the designated location to secure the perimeter.
Returns: True if the robot successfully moved to the designated location, False otherwise.', scan_for_enemy: 'Action node: Use sensors to scan the surrounding area for any enemy presence.
Returns: True if an enemy is detected, False otherwise.', attack_enemy: 'Action node: Take appropriate action to attack and defeat the enemy.
Returns: True if the enemy is successfully defeated, False otherwise.'} to construct a behavior tree in XML format for the given command.
OUTPUT:
<BehaviorTree><Sequence><Action>move_to_designated_location</Action><Selector><Sequence><Action>scan_for_enemy</Action><Action>attack_enemy</Action></Sequence></Selector></Sequence>
</BehaviorTree>


###

USER COMMAND: generate behavior tree to 'Coordinate and execute a complex formation with multiple robots'
INSTRUCTIONS: Use only the following behaviors to generate XML Behavior tree based on the user command: {move_in_sync: 'Action node: Move in synchronization with other robots to form the complex formation.
Returns: Always returns True, indicating that the action was executed.', maintain_formation: 'Action node: Continuously adjust movement to maintain the complex formation.
Returns: Always returns True, indicating that the action was executed.', complete_formation: 'Condition node: Check if the entire complex formation has been completed.
Returns: True if all robots have reached their designated positions, False otherwise.'} to construct a behavior tree in XML format for the given command.
OUTPUT:
<BehaviorTree><Sequence><Action>move_in_sync</Action><Selector><Sequence><Condition>complete_formation</Condition><Action>maintain_formation</Action></Sequence><Action>maintain_formation</Action></Selector></Sequence>
</BehaviorTree>


###

USER COMMAND: generate behavior tree to 'Defuse a bomb while avoiding obstacles and coordinating with other robots'
INSTRUCTIONS: Use only the following behaviors to generate XML Behavior tree based on the user command: {detect_bomb: 'Action node: Use sensors to detect the location of the bomb.
Returns: True if the bomb is successfully located, False otherwise.', approach_bomb: 'Action node: Approach the bomb while avoiding obstacles along the way.
Returns: True if the bomb is successfully reached, False otherwise.', disarm_bomb: 'Action node: Disarm the bomb using specialized tools.
Returns: True if the bomb is successfully disarmed, False otherwise.', call_for_assistance: 'Action node: Call for assistance from other robots to coordinate the disarming efforts.
Returns: Always returns True, indicating that the action was executed.'} to construct a behavior tree in XML format for the given command.
OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Action>detect_bomb</Action><Action>approach_bomb</Action></Sequence><Sequence><Action>disarm_bomb</Action><Action>call_for_assistance</Action></Sequence></Selector></Sequence>
</BehaviorTree>


###

USER COMMAND: generate behavior tree to 'Synchronize and move in formation with other robots'
INSTRUCTIONS: Use only the following behaviors to generate XML Behavior tree based on the user command: {move_in_sync: 'Action node: Move in sync with other robots to stay in formation.
Returns: Always returns True, indicating that the action was executed.', change_formation: 'Action node: Change the formation to a more suitable one.
Returns: Always returns True, indicating that the action was executed.', maintain_formation: 'Action node: Continuously adjust movement to maintain the current formation.
Returns: Always returns True, indicating that the action was executed.'} to construct a behavior tree in XML format for the given command.
OUTPUT:
<BehaviorTree><Sequence><Selector><Action>move_in_sync</Action><Selector><Sequence><Action>change_formation</Action><Action>maintain_formation</Action></Sequence><Sequence><Action>maintain_formation</Action><Action>change_formation</Action></Sequence></Selector></Sequence></Selector>
</BehaviorTree>


###

USER COMMAND: generate behavior tree to 'Create a barrier to block enemy advance'
INSTRUCTIONS: Use only the following behaviors to generate XML Behavior tree based on the user command: {move_to_barrier_location: 'Action node: Move to the designated location to create the barrier.
Returns: True if the robot successfully moved to the designated location, False otherwise.', gather_materials: 'Action node: Collect materials from the environment to use for building the barrier.
Returns: True if the materials are successfully gathered, False otherwise.', construct_barrier: 'Action node: Use the gathered materials to build and reinforce the barrier.
Returns: True if the barrier is successfully constructed, False otherwise.'} to construct a behavior tree in XML format for the given command.
15 

###

USER COMMAND: Navigate the robot through an obstacle course to reach the end point.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: move_forward: Action node - Move the robot forward in a straight line. turn_left: Action node - Turn the robot left by 90 degrees. turn_right: Action node - Turn the robot right by 90 degrees. is_obstacle_ahead: Condition node - Check if there is an obstacle ahead of the robot.
OUTPUT:
<BehaviorTree><Sequence><Condition>is_obstacle_ahead</Condition><Selector><Sequence><Action>turn_left</Action><Action>move_forward</Action></Sequence><Sequence><Action>turn_right</Action><Action>move_forward</Action></Sequence></Selector></Sequence></BehaviorTree>


###

USER COMMAND: Form a circle with other robots and rotate together.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: join_circle: Action node - Move towards other robots and position accordingly to form a circle. is_circle_formed: Condition node - Check if a circle has been successfully formed with other robots. rotate: Action node - Rotate the robot in the circle formation.
OUTPUT:
<BehaviorTree><Sequence><Condition>is_circle_formed</Condition><Action>rotate</Action></Sequence><Action>join_circle</Action></BehaviorTree>


###

USER COMMAND: Pick up objects of different sizes and place them in designated areas.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: move_to_object: Action node - Move towards object and pick it up. carry_object: Action node - Carry the object to the designated area. is_object_size_large: Condition node - Check if the object is large in size and requires the robot to use both hands to carry. place_object: Action node - Place the object in the designated area.
OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>is_object_size_large</Condition><Action>move_to_object</Action><Action>carry_object</Action></Sequence><Sequence><Action>move_to_object</Action><Action>carry_object</Action></Sequence></Selector><Action>place_object</Action></Sequence></BehaviorTree>


###

USER COMMAND: Coordinate with other robots to form a bridge and cross over a gap.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: move_to_barge: Action node - Move towards other robots to form a bridge. cross_bridge: Action node - Move in a coordinated manner to cross the bridge. is_bridge_formed: Condition node - Check if the bridge has been successfully formed with other robots. is_crossing_complete: Condition node - Check if all robots have successfully crossed the bridge.
OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_bridge_formed</Condition><Sequence><Condition>is_crossing_complete</Condition><Action>cross_bridge</Action></Sequence></Sequence><Action>move_to_bridge</Action></Selector></BehaviorTree>


###

USER COMMAND: Explore an unknown environment and map out the area.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: move_forward: Action node - Move the robot forward in a straight line. turn_left: Action node - Turn the robot left by 90 degrees. turn_right: Action node - Turn the robot right by 90 degrees. is_boundary_reached: Condition node - Check if the robot has reached the boundary of the unknown environment. map_area: Action node - Map out the area using sensors and record data.
OUTPUT:
<BehaviorTree><Sequence><Condition>is_boundary_reached</Condition><Action>map_area</Action></Sequence><Selector><Sequence><Action>turn_left</Action><Action>move_forward</Action></Sequence><Sequence><Action>turn_right</Action><Action>move_forward</Action></Sequence></Selector></BehaviorTree>


###

USER COMMAND: Working in a team, stack blocks to create a structure.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: move_to_block: Action node - Move towards a block to pick it up. pick_up_block: Action node - Pick up the block. stack_blocks: Action node - Place the block on top of the existing structure. is_block_in_correct_position: Condition node - Check if the block has been successfully placed on top of the structure.
OUTPUT:
<BehaviorTree><Sequence><Condition>is_block_in_correct_position</Condition><Action>stack_blocks</Action></Sequence><Sequence><Action>move_to_block</Action><Action>pick_up_block</Action></Sequence></BehaviorTree>


###

USER COMMAND: Sync with other robots to form a line and move in unison.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: join_line: Action node - Move towards other robots and position accordingly to form a line. is_line_formed: Condition node - Check if a line has been successfully formed with other robots. move_in_sync: Action node - Move in unison with other robots in the line.
OUTPUT:
<BehaviorTree><Sequence><Condition>is_line_formed</Condition><Action>move_in_sync</Action></Sequence><Action>join_line</Action></BehaviorTree>


###

USER COMMAND: Rescue a stranded robot and bring it back to the base.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: move_to_stranded_robot: Action node - Move towards the stranded robot. carry_robot: Action node - Pick up the robot and carry it back to the base. is_robot_rescued: Condition node - Check if the robot has been successfully rescued. return_to_base: Action node - Return to the base with the rescued robot.
OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>is_robot_rescued</Condition><Action>return_to_base</Action></Sequence><Sequence><Action>move_to_stranded_robot</Action><Action>carry_robot</Action></Sequence></Selector></Sequence></BehaviorTree>


###

USER COMMAND: Collect and deposit resources while avoiding obstacles in a mining task.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: move_to_resource: Action node - Move towards a resource to collect it. collect_resource: Action node - Collect the resource and store it. move_to_depot: Action node - Move towards the deposit point. deposit_resource: Action node - Deposit the resource. is_obstacle_ahead: Condition node - Check if there is an obstacle ahead of the robot and avoid it if necessary.
OUTPUT:
<BehaviorTree><Sequence><Condition>is_obstacle_ahead</Condition><Selector><Sequence><Action>move_to_resource</Action><Action>collect_resource</Action></Sequence><Sequence><Action>move_to_depot</Action><Action>deposit_resource</Action></Sequence></Selector></Sequence></BehaviorTree>


###

USER COMMAND: Respond to a distress signal and assist a fellow robot in trouble.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: move_to_distress_signal: Action node - Move towards the location of the distress signal. offer_assistance: Action node - Provide assistance to the fellow robot in trouble. is_assistance_successful: Condition node - Check if the assistance was successful and the robot has been rescued.
OUTPUT:
<BehaviorTree><Sequence><Condition>is_assistance_successful</Condition><Action>offer_assistance</Action></Sequence><Action>move_to_distress_signal</Action></BehaviorTree>


###

USER COMMAND: Collaborate with other robots to transport a large object to a specified location.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: move_to_object: Action node - Move towards the large object. pick_up_object: Action node - Pick up the object. move_to_destination: Action node - Move towards the specified location. place_object: Action node - Place the object at the destination. join_forces: Action node - Collaborate and coordinate with other robots to transport the object.
OUTPUT:
<BehaviorTree><Sequence><Action>join_forces</Action><Selector><Sequence><Action>move_to_object</Action><Action>pick_up_object</Action></Sequence><Sequence><Action>move_to_destination</Action><Action>place_object</Action></Sequence></Selector></Sequence></BehaviorTree>


###

USER COMMAND: Work together to solve a puzzle by arranging objects in a specific order.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: move_to_object: Action node - Move towards an object. pick_up_object: Action node - Pick up the object. place_object: Action node - Place the object in the desired location. is_puzzle_solved: Condition node - Check if the objects have been arranged in the correct order to solve the puzzle.
OUTPUT:
<BehaviorTree><Sequence><Condition>is_puzzle_solved</Condition><Action>place_object</Action></Sequence><Selector><Sequence><Action>move_to_object</Action><Action>pick_up_object</Action></Sequence><Sequence><Action>move_to_destination</Action><Action>place_object</Action></Sequence></Selector></Sequence></BehaviorTree>


###

USER COMMAND: Perform a coordinated dance routine with other robots.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: move_to_starting_position: Action node - Move towards the starting position for the dance routine. perform_moves: Action node - Perform specific dance moves. is_dance_complete: Condition node - Check if the dance routine has been completed.
OUTPUT:
<BehaviorTree><Sequence><Condition>is_dance_complete</Condition><Action>perform_moves</Action></Sequence><Action>move_to_starting_position</Action></BehaviorTree>


###

USER COMMAND: Navigate through a maze to reach the end point.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: move_forward: Action node - Move the robot forward in a straight line. turn_left: Action node - Turn the robot left by 90 degrees. turn_right: Action node - Turn the robot right by 90 degrees. is_end_point_reached: Condition node - Check if the end point of the maze has been reached.
OUTPUT:
<BehaviorTree><Sequence><Condition>is_end_point_reached</Condition><Selector><Sequence><Action>turn_left</Action><Action>move_forward</Action></Sequence><Sequence><Action>turn_right</Action><Action>move_forward</Action></Sequence></Selector></Sequence></BehaviorTree>


###

USER COMMAND: Working together, build a structure using blocks of different colors.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: move_to_block: Action node - Move towards a block. pick_up_block: Action node - Pick up the block. place_block: Action node - Place the block in the designated location. is_structure_completed: Condition node - Check if the structure has been completed with blocks of all colors.
OUTPUT:
<BehaviorTree><Sequence><Condition>is_structure_completed</Condition><Action>place_block</Action></Sequence><Selector><Sequence><Action>move_to_block</Action><Action>pick_up_block</Action></Sequence><Sequence><Action>move_to_destination</Action><Action>place_block</Action></Sequence></Selector></Sequence></BehaviorTree>


###

USER COMMAND: Respond to a fire alarm and coordinate to extinguish a fire.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: move_to_fire: Action node - Move towards the location of the fire. extinguish_fire: Action node - Use designated tools to extinguish the fire. is_fire_extinguished: Condition node - Check if the fire has been successfully extinguished. coordinate_with_other_robots: Action node - Communicate and coordinate with other robots to effectively extinguish the fire.
OUTPUT:
<BehaviorTree><Sequence><Condition>is_fire_extinguished</Condition><Action>return_to_base</Action></Sequence><Selector><Sequence><Action>coordinate_with_other_robots</Action><Action>extinguish_fire</Action></Sequence><Action>move_to_fire</Action></Selector></BehaviorTree>


###

USER COMMAND: Search for collectible items and bring them back to the home base.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: search_for_items: Subtree node - Represents a behavior tree for searching for items. collect_item: Action node - Makes the agent collect an item. return_to_base: Action node - Makes the agent return to the home base. is_inventory_full: Condition node - Checks if the agent's inventory is full.
OUTPUT:
<BehaviorTree><Sequence><Action>search_for_items</Action><Action>collect_item</Action><Selector><Sequence><Condition>is_inventory_full</Condition><Action>return_to_base</Action></Sequence></Selector></Sequence></BehaviorTree>


###

USER COMMAND: Protect the queen and attack any enemies in the vicinity.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: protect_queen: Subtree node - Represents a behavior tree for protecting the queen. attack_enemy: Action node - Makes the agent attack an enemy. detect_enemy: Condition node - Checks if an enemy is nearby. get_queen_location: Function node - Retrieves the queen's current location.
OUTPUT:
<BehaviorTree><Sequence><Action>get_queen_location</Action><Action>protect_queen</Action><Selector><Sequence><Condition>detect_enemy</Condition><Action>attack_enemy</Action></Sequence></Selector></Sequence></BehaviorTree>


###

USER COMMAND: Gather resources and use them to build a base.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: gather_resources: Subtree node - Represents a behavior tree for gathering resources. build_base: Action node - Makes the agent use gathered resources to build a base. is_resource_full: Condition node - Checks if the agent's resource inventory is full.
OUTPUT:
<BehaviorTree><Sequence><Action>gather_resources</Action><Selector><Sequence><Condition>is_resource_full</Condition><Action>build_base</Action></Sequence></Selector></Sequence></BehaviorTree>


###

USER COMMAND: Scan the environment and map out any potential threats.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: scan_environment: Action node - Makes the agent scan the environment for potential threats. generate_map: Subtree node - Represents a behavior tree for creating a map. analyze_threats: Action node - Makes the agent analyze any potential threats on the map. is_map_complete: Condition node - Checks if the map is complete.
OUTPUT:
<BehaviorTree><Sequence><Action>scan_environment</Action><Action>generate_map</Action><Selector><Sequence><Condition>is_map_complete</Condition><Action>analyze_threats</Action></Sequence></Selector></Sequence></BehaviorTree>


###

USER COMMAND: Work together with other robots to push a heavy object.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: push_object: Action node - Makes the agent push the heavy object. sync_motions: Action node - Makes the agent synchronize motions with other robots. is_object_moving: Condition node - Checks if the object is moving.
OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Action>sync_motions</Action><Action>push_object</Action></Sequence><Condition>is_object_moving</Condition></Selector></Sequence></BehaviorTree>


###

USER COMMAND: Locate and rescue a trapped survivor in a disaster zone.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: locate_survivor: Subtree node - Represents a behavior tree for locating the trapped survivor. rescue_survivor: Action node - Makes the agent rescue the survivor. is_rescued: Condition node - Checks if the survivor has been rescued. get_disaster_zone: Function node - Retrieves the current disaster zone location.
OUTPUT:
<BehaviorTree><Sequence><Action>get_disaster_zone</Action><Action>locate_survivor</Action><Selector><Sequence><Condition>is_rescued</Condition><Action>rescue_survivor</Action></Sequence></Selector></Sequence></BehaviorTree>


###

USER COMMAND: Navigate through a maze and avoid obstacles.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: navigate_maze: Subtree node - Represents a behavior tree for navigating through a maze. avoid_obstacles: Action node - Makes the agent avoid any obstacles. detect_obstacle: Condition node - Checks if there is an obstacle in the way.
OUTPUT:
<BehaviorTree><Sequence><Action>navigate_maze</Action><Selector><Sequence><Condition>detect_obstacle</Condition><Action>avoid_obstacles</Action></Sequence></Selector></Sequence></BehaviorTree>


###

USER COMMAND: Collect data from different locations and send it back to the central server.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: collect_data: Subtree node - Represents a behavior tree for collecting data from different locations. transmit_data: Action node - Makes the agent transmit the collected data to the central server. is_data_transmitted: Condition node - Checks if the data has been transmitted successfully.
OUTPUT:
<BehaviorTree><Sequence><Action>collect_data</Action><Selector><Sequence><Condition>is_data_transmitted</Condition><Action>transmit_data</Action></Sequence></Selector></Sequence></BehaviorTree>


###

USER COMMAND: Search for a hidden object in a cluttered environment.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: search_for_object: Subtree node - Represents a behavior tree for searching for the hidden object. pick_up_object: Action node - Makes the agent pick up the object when found. is_object_found: Condition node - Checks if the object has been found. navigate_obstacle: Action node - Makes the agent navigate around obstacles while searching.
OUTPUT:
<BehaviorTree><Selector><Sequence><Action>search_for_object</Action><Condition>is_object_found</Condition><Action>pick_up_object</Action></Sequence><Sequence><Condition>!is_object_found</Condition><Action>navigate_obstacle</Action></Sequence></Selector></BehaviorTree>


###

USER COMMAND: Retrieve and carry a heavy object to a specific location.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: retrieve_object: Subtree node - Represents a behavior tree for retrieving the heavy object. carry_object: Action node - Makes the agent carry the object to a specific location. is_object_at_location: Condition node - Checks if the object has been successfully carried to the specified location. navigate_to_location: Action node - Makes the agent navigate to the specified location.
OUTPUT:
<BehaviorTree><Sequence><Action>retrieve_object</Action><Selector><Sequence><Condition>is_object_at_location</Condition><Action>carry_object</Action></Sequence><Sequence><Condition>!is_object_at_location</Condition><Action>navigate_to_location</Action></Sequence></Selector>
</Sequence></BehaviorTree>


###

USER COMMAND: Create a formation with other robots and move together towards a designated target.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: create_formation: Subtree node - Represents a behavior tree for creating a formation. move_to_target: Action node - Makes the agent move towards the designated target. is_formation_created: Condition node - Checks if the formation has been successfully created.
OUTPUT:
<BehaviorTree><Sequence><Action>create_formation</Action><Selector><Sequence><Condition>is_formation_created</Condition><Action>move_to_target</Action></Sequence></Selector></Sequence></BehaviorTree>


###

USER COMMAND: Collect and analyze environmental data to identify potential hazards.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: collect_data: Subtree node - Represents a behavior tree for collecting environmental data. analyze_data: Action node - Makes the agent analyze the collected data. is_hazard_detected: Condition node - Checks if any hazards have been identified. navigate_to_hazard: Action node - Makes the agent navigate towards a detected hazard.
OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Action>collect_data</Action><Action>analyze_data</Action></Sequence><Sequence><Condition>is_hazard_detected</Condition><Action>navigate_to_hazard</Action></Sequence></Selector></Sequence></BehaviorTree>


###

USER COMMAND: Recharge and repair any damaged parts while continuing to fulfill assigned tasks.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: recharge_battery: Action node - Makes the agent recharge its battery. repair_damage: Action node - Makes the agent repair any damaged parts. continue_tasks: Action node - Makes the agent continue fulfilling assigned tasks. is_battery_low: Condition node - Checks if the battery level is low. is_damage_present: Condition node - Checks if any damage is present.
OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>is_battery_low</Condition><Action>recharge_battery</Action></Sequence><Sequence><Condition>is_damage_present</Condition><Action>repair_damage</Action></Sequence><Action>continue_tasks</Action></Selector></Sequence></BehaviorTree>


###

USER COMMAND: Perform reconnaissance on an unknown terrain and communicate important findings back to the base.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: scout_terrain: Subtree node - Represents a behavior tree for scouting an unknown terrain. communicate_findings: Action node - Makes the agent communicate important findings back to the base. is_terrain_explored: Condition node - Checks if the terrain has been successfully explored.
OUTPUT:
<BehaviorTree><Sequence><Action>scout_terrain</Action><Selector><Sequence><Condition>is_terrain_explored</Condition><Action>communicate_findings</Action></Sequence></Selector></Sequence></BehaviorTree>


###

USER COMMAND: Coordinate with other robots to create a secure perimeter and defend against incoming attacks.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: create_defense_perimeter: Subtree node - Represents a behavior tree for creating a secure perimeter. defend_against_attack: Subtree node - Represents a behavior tree for defending against incoming attacks. is_perimeter_set: Condition node - Checks if the defense perimeter has been successfully created.
OUTPUT:
<BehaviorTree><Sequence><Action>create_defense_perimeter</Action><Selector><Sequence><Action>defend_against_attack</Action><Condition>is_perimeter_set</Condition></Sequence></Selector></Sequence></BehaviorTree>


###

USER COMMAND: Collaborate with other robots to complete a complex task that requires different sets of skills.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: collaborate_task: Subtree node - Represents a behavior tree for collaborating with other robots on a complex task. assign_roles: Action node - Makes the agent assign roles to other robots based on their skills. perform_task: Subtree node - Represents a behavior tree for performing the assigned task. is_task_complete: Condition node - Checks if the task has been successfully completed.
OUTPUT:
<BehaviorTree><Sequence><Action>collaborate_task</Action><Selector><Sequence><Action>assign_roles</Action><Action>perform_task</Action><Condition>is_task_complete</Condition></Sequence></Selector></Sequence></BehaviorTree>


###

USER COMMAND: Work together with other robots to clear a path for a vehicle to pass through.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: clear_path: Subtree node - Represents a behavior tree for clearing a path. coordinate_actions: Action node - Makes the agent coordinate actions with other robots to efficiently clear the path. move_vehicle: Action node - Makes the agent move the vehicle once the path is clear. is_vehicle_moved: Condition node - Checks if the vehicle has been successfully moved.
OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Action>clear_path</Action><Action>coordinate_actions</Action><Condition>is_vehicle_moved</Condition></Sequence><Sequence><Action>move_vehicle</Action></Sequence></Selector></Sequence></BehaviorTree>

###

USER COMMAND: Navigate through a maze to reach the treasure at the end.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: navigate: Action node - Makes the agent navigate through the maze using pathfinding algorithms. check_treasure: Condition node - Checks if the agent has reached the treasure. collect_treasure: Action node - Makes the agent collect the treasure. is_maze_complete: Condition node - Checks if the agent has successfully completed the maze.
OUTPUT:
<BehaviorTree><Sequence><Action>navigate</Action><Selector><Sequence><Condition>check_treasure</Condition><Action>collect_treasure</Action></Sequence><Condition>is_maze_complete</Condition></Selector></Sequence></BehaviorTree>


###

USER COMMAND: Sort through a pile of objects based on color and size.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: scan_objects: Action node - Makes the agent scan the pile of objects. sort_color: Action node - Makes the agent sort the objects based on color. sort_size: Action node - Makes the agent sort the objects based on size. is_sort_complete: Condition node - Checks if all objects have been sorted.
OUTPUT:
<BehaviorTree><Sequence><Action>scan_objects</Action><Selector><Sequence><Action>sort_color</Action><Action>sort_size</Action></Sequence><Condition>is_sort_complete</Condition></Selector></Sequence></BehaviorTree>


###

USER COMMAND: Respond to customer inquiries and handle customer complaints.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: receive_inquiry: Action node - Makes the agent receive customer inquiries. respond_to_inquiry: Action node - Makes the agent respond to customer inquiries. handle_complaint: Action node - Makes the agent handle customer complaints. is_all_complaints_handled: Condition node - Checks if all customer complaints have been handled.
OUTPUT:
<BehaviorTree><Sequence><Action>receive_inquiry</Action><Selector><Sequence><Action>respond_to_inquiry</Action></Sequence><Sequence><Action>handle_complaint</Action></Sequence></Selector></Sequence></BehaviorTree>


###

USER COMMAND: Assemble a piece of furniture from instructions.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: read_instructions: Action node - Makes the agent read the furniture assembly instructions. initialize_tools: Action node - Makes the agent gather the necessary tools for assembly. assemble_parts: Action node - Makes the agent assemble the parts of the furniture. is_assembly_complete: Condition node - Checks if the furniture has been fully assembled.
OUTPUT:
<BehaviorTree><Sequence><Action>read_instructions</Action><Action>initialize_tools</Action><Selector><Sequence><Action>assemble_parts</Action></Sequence><Condition>is_assembly_complete</Condition></Selector></Sequence></BehaviorTree>


###

USER COMMAND: Cooperate with team members to solve a complex puzzle.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: assess_puzzle: Action node - Makes the agent assess the complexity of the puzzle. divide_puzzle: Action node - Makes the agent divide the puzzle into smaller sections to be solved individually. solve_puzzle: Action node - Makes the agent solve their assigned section of the puzzle. communicate_progress: Action node - Makes the agent communicate their progress to team members. is_puzzle_solved: Condition node - Checks if the puzzle has been fully solved.
OUTPUT:
<BehaviorTree><Sequence><Action>assess_puzzle</Action><Action>divide_puzzle</Action><Selector><Sequence><Action>solve_puzzle</Action><Action>communicate_progress</Action></Sequence><Condition>is_puzzle_solved</Condition></Selector></Sequence></BehaviorTree>


###

USER COMMAND: Explore a new environment and gather important data.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: scout_area: Action node - Makes the agent scout the new environment for potential data. collect_data: Action node - Makes the agent collect any important data found. analyze_data: Action node - Makes the agent analyze the collected data. is_all_data_collected: Condition node - Checks if all important data has been collected.
OUTPUT:
<BehaviorTree><Sequence><Action>scout_area</Action><Selector><Sequence><Action>collect_data</Action><Action>analyze_data</Action></Sequence><Condition>is_all_data_collected</Condition></Selector></Sequence></BehaviorTree>


###

USER COMMAND: Complete a series of fitness challenges in a specified order.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: select_challenge: Action node - Makes the agent select the next challenge in the series. complete_challenge: Action node - Makes the agent complete the selected challenge. is_challenge_complete: Condition node - Checks if the challenge has been successfully completed. next_challenge: Action node - Makes the agent move on to the next challenge in the series.
OUTPUT:
<BehaviorTree><Selector><Sequence><Action>select_challenge</Action><Action>complete_challenge</Action><Condition>is_challenge_complete</Condition><Action>next_challenge</Action></Sequence></Selector></BehaviorTree>


###

USER COMMAND: Safely navigate through a busy intersection while obeying traffic laws.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: check_traffic_signal: Action node - Makes the agent check the traffic signal to determine the right of way. obey_traffic_laws: Action node - Makes the agent obey any traffic laws or signals. navigate_intersection: Action node - Makes the agent safely navigate through the intersection. is_intersection_clear: Condition node - Checks if the intersection is clear and it is safe to proceed.
OUTPUT:
<BehaviorTree><Sequence><Action>check_traffic_signal</Action><Action>obey_traffic_laws</Action><Selector><Sequence><Action>navigate_intersection</Action></Sequence><Condition>is_intersection_clear</Condition></Selector></Sequence></BehaviorTree>


###

USER COMMAND: Search and rescue a missing person in a remote location.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: explore_area: Action node - Makes the agent explore the remote location for the missing person. search_area: Action node - Makes the agent search specific areas within the location. track_scent: Action node - Makes the agent use their scent tracking abilities to locate the missing person. is_person_found: Condition node - Checks if the missing person has been located.
OUTPUT:
<BehaviorTree><Sequence><Action>explore_area</Action><Selector><Sequence><Action>search_area</Action><Action>track_scent</Action></Sequence><Condition>is_person_found</Condition></Selector></Sequence><BehaviorTree>


###

USER COMMAND: Complete a complex math problem based on given data.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: analyze_data: Action node - Makes the agent analyze the given data. select_algorithm: Action node - Makes the agent select the appropriate algorithm for solving the problem based on the data. solve_problem: Action node - Makes the agent solve the math problem using the selected algorithm. is_problem_solved: Condition node - Checks if the problem has been successfully solved.
OUTPUT:
<BehaviorTree><Sequence><Action>analyze_data</Action><Selector><Sequence><Action>select_algorithm</Action><Action>solve_problem</Action></Sequence><Condition>is_problem_solved</Condition></Selector></Sequence></BehaviorTree>


###

USER COMMAND: Successfully complete a multi-level obstacle course.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: navigate_obstacles: Action node - Makes the agent navigate through various obstacles. overcome_obstacle: Action node - Makes the agent overcome a specific type of obstacle. retry_obstacle: Action node - Makes the agent retry an obstacle if they fail. is_course_complete: Condition node - Checks if the agent has successfully completed the entire course.
OUTPUT:
<BehaviorTree><Sequence><Action>navigate_obstacles</Action><Selector><Sequence><Action>overcome_obstacle</Action></Sequence><Action>retry_obstacle</Action><Condition>is_course_complete</Condition></Selector></Sequence></BehaviorTree>


###

USER COMMAND: Plan a trip itinerary based on user preferences and available options.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: gather_preferences: Action node - Makes the agent gather
OUTPUT:
<BehaviorTree><Sequence><Action>gather_preferences</Action><Selector><Sequence><Action>search_options</Action><Action>create_itinerary</Action></Sequence><Condition>is_itinerary_created</Condition></Selector></Sequence></BehaviorTree>


###

USER COMMAND: Cook a three-course meal using specified ingredients and recipe.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: gather_ingredients: Action node - Makes the agent gather all necessary ingredients for the meal. prep_meal: Action node - Makes the agent prepare the ingredients as per the recipe. cook_meal: Action node - Makes the agent cook the meal using the prepared ingredients. is_meal_ready: Condition node - Checks if the three-course meal is ready to be served.
OUTPUT:
<BehaviorTree><Sequence><Action>gather_ingredients</Action><Selector><Sequence><Action>prep_meal</Action><Action>cook_meal</Action></Sequence><Condition>is_meal_ready</Condition></Selector></Sequence></BehaviorTree>


###

USER COMMAND: Design and build a functioning robot prototype using provided materials.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: brainstorm_design: Action node - Makes the agent brainstorm ideas for the robot design. select_materials: Action node - Makes the agent select appropriate materials for building the prototype. build_prototype: Action node - Makes the agent build the robot prototype. is_robot_built: Condition node - Checks if the robot has been successfully built and is functional.
OUTPUT:
<BehaviorTree><Sequence><Action>brainstorm_design</Action><Selector><Sequence><Action>select_materials</Action><Action>build_prototype</Action></Sequence><Condition>is_robot_built</Condition></Selector></Sequence></BehaviorTree>


###

USER COMMAND: Conduct a scientific experiment and analyze data to draw conclusions.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: set_up_experiment: Action node - Makes the agent set up the equipment for the experiment. conduct_experiment: Action node - Makes the agent conduct the experiment and record data. analyze_data: Action node - Makes the agent analyze the collected data. form_conclusions: Action node - Makes the agent draw conclusions based on the analysis. is_conclusion_reached: Condition node - Checks if the agent has successfully drawn conclusions from the experiment.
OUTPUT:
<BehaviorTree><Sequence><Action>set_up_experiment</Action><Selector><Sequence><Action>conduct_experiment</Action><Action>analyze_data</Action><Action>form_conclusions</Action></Sequence><Condition>is_conclusion_reached</Condition></Selector></Sequence></BehaviorTree>


###

USER COMMAND: Create a successful marketing campaign for a new product.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: conduct_research: Action node - Makes the agent conduct market research to understand target audience and competitors. create_campaign: Action node - Makes the agent create a marketing campaign strategy based on the research findings. implement_campaign: Action node - Makes the agent implement the campaign and monitor its success. is_campaign_successful: Condition node - Checks if the campaign has successfully generated desired results.
OUTPUT:
<BehaviorTree><Sequence><Action>conduct_research</Action><Selector><Sequence><Action>create_campaign</Action><Action>implement_campaign</Action></Sequence><Condition>is_campaign_successful</Condition></Selector></Sequence></BehaviorTree>


###

USER COMMAND: generate behavior tree for a group of robots to work together to build a structure
INSTRUCTIONS: Use only the following behaviors to generate XML Behavior tree based on the user command: {'move_to_next_location': 'Action node: Move to the next designated location to begin constructing the structure.
Returns: True if the robot successfully moved to the next location, False otherwise.', 'gather_resources': 'Action node: Use sensors to collect necessary resources for construction.
Returns: True if enough resources were gathered, False otherwise.', 'build_structure': 'Action node: Use gathered resources to construct a designated structure.
Returns: True if the structure was successfully built, False otherwise.', 'is_structure_complete': 'Condition node: Check if the designated structure has been completed.
Returns: True if the structure is complete, False otherwise.'}  to construct a behavior tree in XML format for the given command.
OUTPUT:
<BehaviorTree><Sequence><Condition>is_structure_complete</Condition><Selector><Sequence><Action>move_to_next_location</Action><Sequence><Action>gather_resources</Action><Action>build_structure</Action></Sequence></Sequence><Action>wait</Action></Selector></Sequence>
</BehaviorTree>

###

USER COMMAND: generate behavior tree for a robot to navigate through a maze and reach the end goal
INSTRUCTIONS: Use only the following behaviors to generate XML Behavior tree based on the user command: {'move_forward': 'Action node: Move the robot forward in the maze.
Returns: True if the robot successfully moved forward, False otherwise.', 'turn_right': 'Action node: Turn the robot right in the maze.
Returns: True if the robot successfully turned right, False otherwise.', 'turn_left': 'Action node: Turn the robot left in the maze.
Returns: True if the robot successfully turned left, False otherwise.', 'is_goal_reached': 'Condition node: Check if the goal has been reached.
Returns: True if the goal is reached, False otherwise.'}  to construct a behavior tree in XML format for the given command.
OUTPUT:
<BehaviorTree><Sequence><Condition>is_goal_reached</Condition><Sequence><Action>move_forward</Action><Selector><Action>turn_right</Action><Action>turn_left</Action></Selector></Sequence></Sequence>
</BehaviorTree>

###

USER COMMAND: generate behavior tree for a robot to cooperate with others to transport a heavy object
INSTRUCTIONS: Use only the following behaviors to generate XML Behavior tree based on the user command: {'move_to_object': 'Action node: Move the robot to the designated object.
Returns: True if the robot successfully moved to the object, False otherwise.', 'grab_object': 'Action node: Use a grasping mechanism to grab the object.
Returns: True if the object is successfully grabbed, False otherwise.', 'move_to_destination': 'Action node: Move the robot to the designated destination while carrying the object.
Returns: True if the robot successfully reached the destination, False otherwise.', 'is_object_delivered': 'Condition node: Check if the object has been successfully delivered to the destination.
Returns: True if the object is delivered, False otherwise.'}  to construct a behavior tree in XML format for the given command.
OUTPUT:
<BehaviorTree><Sequence><Condition>is_object_delivered</Condition><Selector><Sequence><Action>move_to_object</Action><Action>grab_object</Action><Action>move_to_destination</Action></Sequence><Action>wait</Action></Selector></Sequence>
</BehaviorTree>

###

USER COMMAND: generate behavior tree for a group of robots to collect and sort different types of debris in a disaster zone
INSTRUCTIONS: Use only the following behaviors to generate XML Behavior tree based on the user command: {'check_surroundings': 'Action node: Use sensors to detect debris in the surrounding area.
Returns: True if debris is detected, False otherwise.', 'collect_debris': 'Action node: Collect the detected debris and sort it based on type.
Returns: True if debris is successfully collected, False otherwise.', 'return_to_base': 'Action node: Return to the designated base area to deposit sorted debris.
Returns: True if the robot successfully reached the base area, False otherwise.', 'is_all_debris_collected': 'Condition node: Check if all the specified debris has been collected and sorted.
Returns: True if all debris is collected, False otherwise.'}  to construct a behavior tree in XML format for the given command.
OUTPUT:
<BehaviorTree><Sequence><Condition>is_all_debris_collected</Condition><Sequence><Action>check_surroundings</Action><Action>collect_debris</Action></Sequence><Sequence><Action>return_to_base</Action><Action>wait</Action></Sequence></BehaviorTree>

###

USER COMMAND: generate behavior tree for a group of robots to perform a coordinated dance routine
INSTRUCTIONS: Use only the following behaviors to generate XML Behavior tree based on the user command: {'move_to_start_position': 'Action node: Move the robot to the designated starting position.
Returns: True if the robot successfully reached the starting position, False otherwise.', 'perform_dance_move': 'Action node: Execute a predetermined dance move.
Returns: True if the move was successfully performed, False otherwise.', 'move_to_next_position': 'Action node: Move the robot to the next designated position in the dance routine.
Returns: True if the robot successfully reached the next position, False otherwise.', 'is_dance_finished': 'Condition node: Check if the entire dance routine has been completed.
Returns: True if the dance is finished, False otherwise.'}  to construct a behavior tree in XML format for the given command.
OUTPUT:
<BehaviorTree><Sequence><Condition>is_dance_finished</Condition><Sequence><Action>move_to_start_position</Action><Action>perform_dance_move</Action><Action>move_to_next_position</Action></Sequence><Action>wait</Action></Sequence>
</BehaviorTree>

###

USER COMMAND: generate behavior tree for a robot to autonomously mow a lawn
INSTRUCTIONS: Use only the following behaviors to generate XML Behavior tree based on the user command: {'move_to_next_patch': 'Action node: Move the robot to the next designated patch of grass to mow.
Returns: True if the robot successfully reached the next patch, False otherwise.', 'mow_grass': 'Action node: Use a designated mowing mechanism to mow the grass in the current patch.
Returns: True if the patch is successfully mowed, False otherwise.', 'is_lawn_mowed': 'Condition node: Check if the entire lawn has been mowed.
Returns: True if the entire lawn is mowed, False otherwise.'}  to construct a behavior tree in XML format for the given command.
OUTPUT:
<BehaviorTree><Sequence><Condition>is_lawn_mowed</Condition><Sequence><Action>move_to_next_patch</Action><Action>mow_grass</Action></Sequence></Sequence>
</BehaviorTree>

###

USER COMMAND: generate behavior tree for a group of robots to navigate through a cluttered environment and reach a designated point
INSTRUCTIONS: Use only the following behaviors to generate XML Behavior tree based on the user command: {'move_to_next_obstacle': 'Action node: Move the robot to the next designated obstacle in the environment.
Returns: True if the robot successfully reached the obstacle, False otherwise.', 'avoid_obstacle': 'Action node: Use sensors and algorithms to navigate around the obstacle.
Returns: True if the robot successfully avoided the obstacle, False otherwise.', 'move_to_destination': 'Action node: Continue moving towards the designated destination.
Returns: True if the robot successfully reached the destination, False otherwise.', 'is_destination_reached': 'Condition node: Check if the destination has been reached.
Returns: True if the destination is reached, False otherwise.'}  to construct a behavior tree in XML format for the given command.
OUTPUT:
<BehaviorTree><Sequence><Condition>is_destination_reached</Condition><Sequence><Action>move_to_next_obstacle</Action><Action>avoid_obstacle</Action><Action>move_to_destination</Action></Sequence></Sequence>
</BehaviorTree>

###

USER COMMAND: Perform a coordinated formation with other robots while following a designated leader.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: follow_leader: Action node - Follows a designated leader robot. maintain_formation: Action node - Maintains a set distance and formation from the leader. check_distance: Condition node - Checks the distance between the robot and the leader. adjust_formation: Action node - Adjusts the formation based on the leader's movements.
OUTPUT:
<BehaviorTree><Sequence><Action>follow_leader</Action><Action>maintain_formation</Action><Selector><Sequence><Condition>check_distance</Condition><Action>adjust_formation</Action></Sequence></Selector></Sequence></BehaviorTree>


###

USER COMMAND: Defend a specified area while monitoring for enemy robots.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: defend_area: Action node - Takes defensive positions in the specified area. monitor_enemies: Action node - Constantly scans the area for enemies. engage_enemy: Action node - Engages any enemy in the vicinity. is_area_attacked: Condition node - Checks if the specified area is being attacked by enemies.
OUTPUT:
<BehaviorTree><Sequence><Action>defend_area</Action><Action>monitor_enemies</Action><Selector><Sequence><Condition>is_area_attacked</Condition><Action>engage_enemy</Action></Sequence></Selector></Sequence></BehaviorTree>


###

USER COMMAND: Retrieve a specific object while avoiding obstacles and enemies.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: navigate_to_object: Action node - Uses path planning to reach the object. avoid_obstacles: Action node - Uses sensors to detect and avoid obstacles. avoid_enemies: Action node - Uses sensors to detect and avoid enemy robots. pick_up_object: Action node - Picks up the object once reached. has_object: Condition node - Checks if the robot is holding the object.
OUTPUT:
<BehaviorTree><Sequence><Action>navigate_to_object</Action><Selector><Sequence><Condition>has_object</Condition><Action>pick_up_object</Action></Sequence></Selector></Sequence><Selector><Sequence><Action>avoid_obstacles</Action><Action>avoid_enemies</Action></Sequence></Selector></BehaviorTree>


###

USER COMMAND: Work together as a swarm to transport a large object to a designated location.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: move_to_object: Action node - Moves towards the specified object. pick_up_object: Action node - Picks up the object once reached. move_to_location: Action node - Moves towards the designated location. drop_object: Action node - Drops the object at the designated location. is_object_picked_up: Condition node - Checks if the robot is holding an object.
OUTPUT:
<BehaviorTree><Sequence><Action>move_to_object</Action><Selector><Sequence><Condition>is_object_picked_up</Condition><Action>pick_up_object</Action></Sequence></Selector></Sequence><Sequence><Action>move_to_location</Action><Selector><Sequence><Condition>is_object_picked_up</Condition><Action>drop_object</Action></Sequence></Selector></Sequence></BehaviorTree>


###

USER COMMAND: Search and rescue a person in a hazardous area while avoiding danger.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: locate_person: Action node - Uses sensors to locate the person in the hazardous area. avoid_danger: Action node - Uses sensors to detect and avoid dangerous elements. reach_person: Action node - Uses path planning to reach the person's location. carry_person: Action node - Carries the person to a safe location. is_person_found: Condition node - Checks if the person has been located.
OUTPUT:
<BehaviorTree><Sequence><Action>locate_person</Action><Selector><Sequence><Condition>is_person_found</Condition><Action>reach_person</Action><Action>carry_person</Action></Sequence></Selector></Sequence><Selector><Sequence><Action>avoid_danger</Action><Action>reach_person</Action><Action>carry_person</Action></Sequence></Selector></BehaviorTree>


###

USER COMMAND: Collect resources from multiple locations and bring them back to a designated base.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: collect_resource: Action node - Uses path planning to reach a resource location. pick_up_resource: Action node - Picks up the resource at the location. navigate_to_base: Action node - Uses path planning to return to the designated base. deposit_resource: Action node - Deposits the collected resources at the base. is_resource_collected: Condition node - Checks if the robot is carrying a resource.
OUTPUT:
<BehaviorTree><Selector><Sequence><Action>collect_resource</Action><Selector><Sequence><Condition>is_resource_collected</Condition><Action>pick_up_resource</Action></Sequence></Selector><Action>navigate_to_base</Action></Sequence><Selector><Sequence><Condition>is_resource_collected</Condition><Action>deposit_resource</Action></Sequence></Selector></BehaviorTree>


###

USER COMMAND: Build a structure by combining multiple smaller objects in a specific order.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: collect_component: Action node - Uses path planning to reach a resource location. pick_up_component: Action node - Picks up the component at the location. assemble_structure: Action node - Combines the collected components in a specific order. is_structure_built: Condition node - Checks if the structure has been built successfully.
OUTPUT:
<BehaviorTree><Selector><Sequence><Action>collect_component</Action><Selector><Sequence><Condition>is_structure_built</Condition><Action>pick_up_component</Action><Action>assemble_structure</Action></Sequence></Selector></Sequence><Sequence><Condition>is_structure_built</Condition><Action>assemble_structure</Action></Sequence></Selector></BehaviorTree>


###

USER COMMAND: Compete in a race with other robots and reach the finish line first.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: race_forward: Action node - Moves forward in a race. check_obstacles: Action node - Uses sensors to detect and avoid obstacles. check_opponents: Action node - Uses sensors to identify and avoid other competing robots. check_finish_line: Condition node - Checks if the finish line has been reached. sprint_to_finish: Action node - Increases speed and sprints towards the finish line.
OUTPUT:
<BehaviorTree><Sequence><Action>race_forward</Action><Selector><Sequence><Condition>check_obstacles</Condition><Action>race_forward</Action></Sequence></Selector></Sequence><Sequence><Action>race_forward</Action><Selector><Sequence><Condition>check_opponents</Condition><Action>race_forward</Action></Sequence></Selector></Sequence><Selector><Sequence><Condition>check_finish_line</Condition><Action>sprint_to_finish</Action></Sequence></Selector></BehaviorTree> 

###

USER COMMAND: Build a stack of blocks by picking them up one by one and placing them on top of each other.
INSTRUCTIONS: Use the following behaviors and nodes to generate an XML behavior tree for the given command: pick_up_block: Action node - Picks up a block from the ground. stack_block: Action node - Places a block on top of the previously stacked block. is_stack_complete: Condition node - Checks if the stack contains a predetermined number of blocks.
OUTPUT:
<BehaviorTree><Sequence><Condition>is_stack_complete</Condition><Sequence><Action>pick_up_block</Action><Action>stack_block</Action></Sequence></Sequence></BehaviorTree>


###

USER COMMAND: Perform a dance routine with a group of robots.
INSTRUCTIONS: Use the following behaviors and nodes to generate an XML behavior tree for the given command: move_to_position: Action node - Moves the robot to a designated position for the dance routine. perform_move: Action node - Executes a specific dance move. is_dance_complete: Condition node - Checks if the entire dance routine has been completed.
OUTPUT:
<BehaviorTree><Sequence><Condition>is_dance_complete</Condition><Sequence><Action>move_to_position</Action><Action>perform_move</Action></Sequence></Sequence></BehaviorTree>


###

USER COMMAND: Navigate through an obstacle course, avoiding any red obstacles and collecting green power-ups along the way.
INSTRUCTIONS: Use the following behaviors and nodes to generate an XML behavior tree for the given command: move_forward: Action node (same as before). avoid_obstacle: Action node - Steers the robot away from a red obstacle. collect_power_up: Action node - Picks up a green power-up. is_obstacle: Condition node - Checks if there is a red obstacle ahead. is_power_up: Condition node - Checks if there is a green power-up ahead.
OUTPUT:
<BehaviorTree><Selector><Sequence><Action>move_forward</Action></Sequence><Sequence><Action>avoid_obstacle</Action><Selector><Sequence><Condition>is_obstacle</Condition></Sequence></Selector></Sequence><Sequence><Action>collect_power_up</Action><Selector><Sequence><Condition>is_power_up</Condition></Sequence></Selector></Sequence></Selector></BehaviorTree>


###

USER COMMAND: Construct a building by transporting materials to the construction site and assembling them in the correct order.
INSTRUCTIONS: Use the following behaviors and nodes to generate an XML behavior tree for the given command: get_materials: Action node - Collects materials from a designated location. transport_materials: Action node - Moves materials to the construction site. assemble_building: Action node - Assembles the materials in the correct order to construct the building. is_building_complete: Condition node - Checks if the building has been fully constructed.
OUTPUT:
<BehaviorTree><Sequence><Condition>is_building_complete</Condition><Sequence><Action>get_materials</Action><Action>transport_materials</Action><Action>assemble_building</Action></Sequence></Sequence></BehaviorTree>


###

USER COMMAND: Explore a new, unknown environment while avoiding any potential dangers or unknown obstacles.
INSTRUCTIONS: Use the following behaviors and nodes to generate an XML behavior tree for the given command: move_forward: Action node (same as before). avoid_dangers: Action node - Uses sensors to detect and avoid potential dangers. explore_unknown: Action node - Continuously searches for new areas to explore. is_danger_detected: Condition node - Checks if any dangers are detected in the environment. is_environment_unknown: Condition node - Checks if the entire environment has been fully explored.
OUTPUT:
<BehaviorTree><Selector><Sequence><Action>move_forward</Action></Sequence><Sequence><Action>explore_unknown</Action><Selector><Sequence><Condition>is_danger_detected</Condition><Action>avoid_dangers</Action></Sequence></Selector></Sequence><Condition>is_environment_unknown</Condition></Selector></BehaviorTree>


###

USER COMMAND: Prepare and cook a meal using various kitchen appliances.
INSTRUCTIONS: Use the following behaviors and nodes to generate an XML behavior tree for the given command: move_to_kitchen: Action node - Moves the robot to the kitchen area. use_appliance: Action node - Operates a specific kitchen appliance. prepare_food: Action node - Prepares ingredients for cooking. cook_food: Action node - Follows a recipe to cook the prepared ingredients. is_food_cooked: Condition node - Checks if the food has been cooked to perfection.
OUTPUT:
<BehaviorTree><Sequence><Condition>is_food_cooked</Condition><Sequence><Action>move_to_kitchen</Action><Action>use_appliance (stove)</Action><Action>prepare_food</Action><Action>use_appliance (oven)</Action><Action>cook_food</Action></Sequence></Sequence></BehaviorTree>


###

USER COMMAND: Participate in a team sports competition by coordinating with other robots to score goals and block opponents.
INSTRUCTIONS: Use the following behaviors and nodes to generate an XML behavior tree for the given command: move_to_ball: Action node - Moves the robot to the location of the ball. kick_ball: Action node - Kicks the ball in a desired direction. block_opponents: Action node - Moves to block any opponent robots from scoring. score_goal: Action node - Attempts to kick the ball into the designated goal area. is_goal_scored: Condition node - Checks if a goal has been scored.
OUTPUT:
<BehaviorTree><Selector><Sequence><Action>move_to_ball</Action><Action>kick_ball</Action></Sequence><Sequence><Action>block_opponents</Action><Selector><Sequence><Condition>is_goal_scored</Condition><Action>score_goal</Action></Sequence></Selector></Sequence></selector></BehaviorTree>


###

USER COMMAND: Complete a puzzle by navigating through various obstacles and activating switches in a specific order.
INSTRUCTIONS: Use the following behaviors and nodes to generate an XML behavior tree for the given command: move_forward: Action node (same as before). navigate_obstacles: Action node - Uses sensors to navigate through obstacles. activate_switch: Action node - Activates a switch in a specific order. is_obstacle: Condition node - Checks if there is an obstacle ahead. is_switch_activated: Condition node - Checks if the designated switch has been activated.
OUTPUT:
<BehaviorTree><Sequence><Condition>is_switch_activated</Condition><Selector><Sequence><Action>move_forward</Action><Selector><Sequence><Condition>is_obstacle</Condition><Action>navigate_obstacles</Action></Sequence><Selector><Sequence><Condition>is_switch_activated</Condition><Action>activate_switch</Action></Sequence></Selector></Sequence></Selector></Sequence></BehaviorTree>

###

USER COMMAND: Navigate to a specific location while avoiding obstacles and staying within a designated area.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: navigate_to_location: Action node - Moves the agent towards a specific location. check_obstacles: Action node - Checks for obstacles within the agent's immediate vicinity. avoid_obstacle: Action node - Performs a movement action to avoid the detected obstacle. stay_within_bounds: Condition node - Checks if the agent is within a designated area. adjust_position: Action node - Moves the agent back within the designated area if needed.
OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Action>navigate_to_location</Action></Sequence><Sequence><Action>check_obstacles</Action><Condition>stay_within_bounds</Condition><Action>adjust_position</Action><Action>avoid_obstacle</Action></Sequence></Selector></Sequence></BehaviorTree>


###

USER COMMAND: Explore the environment while avoiding collisions with other robots.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: explore_environment: Action node - Performs random movements to explore the environment. detect_other_robots: Action node - Checks for other robots within a specified distance. avoid_collision: Action node - Performs a maneuver to avoid colliding with detected robots.
OUTPUT:
<BehaviorTree><Sequence><Action>explore_environment</Action></Sequence><Action>detect_other_robots</Action><Action>avoid_collision</Action></BehaviorTree>


###

USER COMMAND: Gather resources and bring them back to home base.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: gather_resources: Action node - Searches for and collects resources within the environment. return_home: Action node - Moves the agent back to the designated home base. deposit_resources: Subtree node - Represents a behavior tree for depositing resources at the home base. is_resource_present: Condition node - Checks if resources are present within the agent's immediate vicinity.
OUTPUT:
<BehaviorTree><Sequence><Action>gather_resources</Action><Action>return_home</Action><Selector><Sequence><Condition>is_resource_present</Condition><Action>deposit_resources</Action></Sequence></Selector></Sequence></BehaviorTree>


###

USER COMMAND: Coordinate with other swarm robots to form a synchronized pattern.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: form_pattern: Action node - Performs movements to form a specific pattern with other robots. all_formed: Condition node - Checks if all robots have successfully formed the pattern. communicate: Action node - Communicates and coordinates with other robots to form the pattern. adjust_position: Action node - Adjusts the agent's position to align with the rest of the group.
OUTPUT:
<BehaviorTree><Sequence><Sequence><Action>communicate</Action><Condition>all_formed</Condition><Action>form_pattern</Action></Sequence><Action>communicate</Action><Action>adjust_position</Action></Sequence><Condition>all_formed</Condition></BehaviorTree>


###

USER COMMAND: Search for a specific target within a designated area.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: search_for_target: Action node - Performs random movements to search for the target. detect_target: Action node - Checks if the target is within a specified distance. navigate_to_target: Action node - Moves the agent towards the detected target. stay_within_bounds: Condition node - Checks if the agent is within a designated area. adjust_position: Action node - Moves the agent back within the designated area if needed.
OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Action>search_for_target</Action><Condition>stay_within_bounds</Condition><Action>adjust_position</Action><Action>detect_target</Action><Action>navigate_to_target</Action></Sequence></Selector></Sequence></BehaviorTree>


###

USER COMMAND: Survey the environment and collect data on resources.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: survey_environment: Action node - Performs movements to survey the environment for resources. collect_data: Subtree node - Represents a behavior tree for collecting data on resources. return_to_base: Action node - Moves the agent back to the designated home base. deposit_data: Action node - Deposits the collected data at the home base.
OUTPUT:
<BehaviorTree><Sequence><Sequence><Action>survey_environment</Action><Action>collect_data</Action><Action>return_to_base</Action><Action>deposit_data</Action></Sequence></Sequence></BehaviorTree>


###

USER COMMAND: React to changes in the environment and adapt accordingly.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: react_to_environment: Action node - Checks the environment for any changes and determines a necessary response. evaluate_risk: Action node - Evaluates the potential risk of the change in the environment. adjust_behavior: Action node - Updates the agent's behavior based on the evaluated risk.
OUTPUT:
<BehaviorTree><Sequence><Action>react_to_environment</Action><Action>evaluate_risk</Action><Action>adjust_behavior</Action></Sequence></BehaviorTree>


###

USER COMMAND: Work together with other swarm robots to complete a complex task.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: work_together: Action node - Coordinates and communicates with other robots to complete the task. break_down_task: Subtree node - Represents a behavior tree for breaking down the complex task into smaller subtasks. complete_subtask: Action node - Completes a specific subtask. evaluate_progress: Action node - Evaluates the progress of the overall task and updates the behavior accordingly.
OUTPUT:
<BehaviorTree><Sequence><Action>work_together</Action><Action>break_down_task</Action><Selector><Sequence><Action>complete_subtask</Action><Action>evaluate_progress</Action></Sequence></Selector></Sequence></BehaviorTree>

###

USER COMMAND: Navigate through a maze while avoiding obstacles and reaching the end goal.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: {'move_forward': 'Action node: Move the robot forward in a straight line.
Returns: True if the robot successfully moved forward, False otherwise.', 'turn_left': 'Action node: Turn the robot left by 90 degrees.
Returns: True if the robot successfully turned left, False otherwise.', 'turn_right': 'Action node: Turn the robot right by 90 degrees.
Returns: True if the robot successfully turned right, False otherwise.', 'detect_obstacle': 'Condition node: Check if an obstacle is detected in front of the robot.
Returns: True if an obstacle is detected, False otherwise.', 'detect_goal': 'Condition node: Check if the goal is within a detectable distance from the robot.
Returns: True if the goal is within 10 units of distance, False otherwise.'}
OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>detect_goal</Condition><Action>move_forward</Action></Sequence><Sequence><Condition>detect_obstacle</Condition><Selector><Sequence><Action>turn_left</Action><Action>move_forward</Action></Sequence><Sequence><Action>turn_right</Action><Action>move_forward</Action></Sequence></Selector></Sequence></Selector></BehaviorTree>



###


USER COMMAND: Assemble a structure by picking up and placing objects in a specific order.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: {'pick_up_object': 'Action node: Pick up an object from the environment.
Returns: True if an object was successfully picked up, False otherwise.', 'place_object': 'Action node: Place an object in a specific location.
Returns: True if the object was successfully placed, False otherwise.', 'is_object_available': 'Condition node: Check if there is an object available to pick up.
Returns: True if an object is available, False otherwise.', 'is_structure_complete': 'Condition node: Check if the structure has been fully assembled.
Returns: True if the structure is complete, False otherwise.'}
OUTPUT:
<BehaviorTree><Sequence><Condition>is_structure_complete</Condition><Sequence><Condition>is_object_available</Condition><Selector><Sequence><Action>pick_up_object</Action><Action>place_object</Action></Sequence><Action>wait</Action></Selector></Sequence></Sequence></BehaviorTree>



###


USER COMMAND: generate behavior tree for a swarm of robots to coordinate and build a structure
INSTRUCTIONS: Use only the following behaviors to generate XML Behavior tree based on the user command: {'move_to_next_location': 'Action node: Move the robot to the next designated location.
Returns: True if the robot successfully moved to the next location, False otherwise.', 'collect_resource': 'Action node: Collect a resource from the environment.
Returns: True if a resource was successfully collected, False otherwise.', 'build_structure': 'Action node: Use collected resources to build a structure.
Returns: True if the structure was successfully built, False otherwise.', 'is_structure_complete': 'Condition node: Check if the structure is complete.
Returns: True if the structure is complete, False otherwise.', 'is_resource_available': 'Condition node: Check if there are resources available in the environment.
Returns: True if resources are available, False otherwise.'} to construct a behavior tree in XML format for the given command.
OUTPUT:
<BehaviorTree><Sequence><Condition>is_structure_complete</Condition><Sequence><Action>move_to_next_location</Action><Selector><Sequence><Condition>is_resource_available</Condition><Action>collect_resource</Action></Sequence><Action>build_structure</Action></Selector></Sequence></Sequence>
</BehaviorTree>


###


USER COMMAND: Navigate through a maze and reach the end goal while avoiding obstacles
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: {'move_forward': 'Action node (same as before).', 'turn_left': 'Action node (same as before).', 'turn_right': 'Action node (same as before).', 'is_obstacle_detected': 'Condition node: Check if there is an obstacle in front of the robot.
Returns: True if an obstacle is detected, False otherwise.', 'is_goal_reached': 'Condition node: Check if the robot has reached the end goal.
Returns: True if the goal is reached, False otherwise.'} to construct a behavior tree in XML format for the given command.
OUTPUT:
<BehaviorTree><Sequence><Condition>is_goal_reached</Condition><Selector><Sequence><Condition>is_obstacle_detected</Condition><Selector><Action>turn_left</Action><Action>turn_right</Action></Selector></Sequence><Action>move_forward</Action></Selector></Sequence></BehaviorTree>



###


USER COMMAND: Coordinate with other robots to complete a task in a swarm
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: {'move_to_target': 'Action node: Move the robot to the designated target location.
Returns: True if the robot successfully moved to the target, False otherwise.', 'perform_task': 'Action node: Perform the designated task at the current location.
Returns: True if the task was successfully completed, False otherwise.', 'is_task_complete': 'Condition node: Check if the task has been completed.
Returns: True if the task is complete, False otherwise.', 'is_swarm_coordinated': 'Condition node: Check if all robots in the swarm have completed their tasks and are ready to move on.
Returns: True if the swarm is coordinated, False otherwise.'} to construct a behavior tree in XML format for the given command.
OUTPUT:
<BehaviorTree><Sequence><Condition>is_swarm_coordinated</Condition><Selector><Sequence><Action>move_to_target</Action><Action>perform_task</Action><Selector><Action>wait</Action><Action>wait</Action></Selector></Sequence></Selector></Sequence></BehaviorTree> 


###


USER COMMAND: Move towards the target while avoiding obstacles and changing color to blue when the target is reached.
INSTRUCTIONS: {'agent_movement_freeze': 'Action node: Freeze the agent’s movement, typically to indicate a stop in activity or end of tasks. Returns: Always returns True, indicating the action was executed.', 'avoid_obstacle': 'Action node: Execute an action to avoid detected obstacles. Returns: Always returns True, indicating the action was executed.', 'change_color_to_blue': 'Action node: Change the agent’s color to blue, usually indicating a successful operation or state. Returns: Always returns True, indicating the action was executed.', 'continue_movement_agent': 'Action node: Continue the agent’s movement after it has been previously frozen. Returns: Always returns True, indicating the action was executed.', 'is_agent_in_nest': 'Condition node: Determine if the agent is in the nest. Returns: True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition node: Determine if the agent has formed a line with a reference point at the center of the window. Returns: True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition node: Determine if any obstacles are detected in the vicinity of the agent. Returns: True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition node: Check if the path ahead of the agent is clear of obstacles. Returns: True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Action node: Check if the target is within a detectable distance from the agent’s position. Returns: True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition node: Check if the agent has reached the target. Returns: True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action node: Signal that the agent has completed its designated task by freezing movement and updating state. Returns: Always returns True, indicating that the task completion action was executed.', 'wander': 'Action node: Perform a wandering action where the agent moves randomly within the environment. Returns: Always returns True, indicating the action was executed.'}
OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>is_target_detected</Condition> <Action>change_color_to_blue</Action> <Action>continue_movement_agent</Action> </Sequence> <Action>avoid_obstacle</Action> </Selector> <Sequence> <Condition>is_target_reached</Condition> <Action>task_completed</Action> </Sequence> </Sequence> </BehaviorTree>



###


USER COMMAND: Perform a coordinated search for a target while avoiding obstacles and changing color to yellow when the target is found.
INSTRUCTIONS: {'agent_movement_freeze': 'Action node: Freeze the agent’s movement, typically to indicate a stop in activity or end of tasks. Returns: Always returns True, indicating the action was executed.', 'avoid_obstacle': 'Action node: Execute an action to avoid detected obstacles. Returns: Always returns True, indicating the action was executed.', 'change_color_to_yellow': 'Action node: Change the agent’s color to yellow, usually indicating a successful operation or state. Returns: Always returns True, indicating the action was executed.', 'continue_movement_agent': 'Action node: Continue the agent’s movement after it has been previously frozen. Returns: Always returns True, indicating the action was executed.', 'is_agent_in_nest': 'Condition node: Determine if the agent is in the nest. Returns: True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition node: Determine if the agent has formed a line with a reference point at the center of the window. Returns: True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition node: Determine if any obstacles are detected in the vicinity of the agent. Returns: True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition node: Check if the path ahead of the agent is clear of obstacles. Returns: True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Action node: Check if the target is within a detectable distance from the agent’s position. Returns: True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition node: Check if the agent has reached the target. Returns: True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action node: Signal that the agent has completed its designated task by freezing movement and updating state. Returns: Always returns True, indicating that the task completion action was executed.', 'wander': 'Action node: Perform a wandering action where the agent moves randomly within the environment. Returns: Always returns True, indicating the action was executed.'}
OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>is_target_detected</Condition> <Action>change_color_to_yellow</Action> <Action>continue_movement_agent</Action> </Sequence> <Action>avoid_obstacle</Action> </Selector> <Sequence> <Condition>is_target_reached</Condition> <Action>task_completed</Action> </Sequence> </Sequence> </BehaviorTree>


###


USER COMMAND: Build a structure using a group of robots. Ensure proper coordination and efficient use of resources.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: {'move_to_structure_location': 'Action node: Move the robot to the designated location to begin building the structure.
Returns: True if the robot successfully moved to the location, False otherwise.', 'scan_for_resources': 'Action node: Scan the surrounding area for available resources needed for building.
Returns: True if resources are found, False otherwise.', 'collect_resource': 'Action node: Collect a specific amount of resources from the environment.
Returns: True if the designated amount of resources was collected, False otherwise.', 'build_structure': 'Action node: Use collected resources to build the designated structure.
Returns: True if the structure was successfully built, False otherwise.', 'is_structure_complete': 'Condition node: Check if the structure has been fully built.
Returns: True if the structure is complete, False otherwise.', 'is_resource_available': 'Condition node: Check if the designated amount of resources is available in the environment.
Returns: True if the resources are present, False otherwise.', 'is_structure_located': 'Condition node: Check if the robot has reached the designated location for building.
Returns: True if the robot is at the location, False otherwise.', 'is_resource_collected': 'Condition node: Check if the designated amount of resources have been collected.
Returns: True if the resources have been collected, False otherwise.'}
OUTPUT:
<BehaviorTree><Sequence><Condition>is_structure_located</Condition><Selector><Sequence><Action>scan_for_resources</Action><Selector><Sequence><Condition>is_resource_available</Condition><Action>collect_resource</Action></Sequence></Selector><Condition>is_resource_collected</Condition></Sequence><Action>build_structure</Action></Selector></Sequence></BehaviorTree>



###


USER COMMAND: Collect data from multiple sensors and analyze for any anomalies. Take necessary action if an anomaly is detected.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: {'collect_sensor_data': 'Action node: Collect data from multiple sensors.
Returns: True if data is successfully collected, False otherwise.', 'analyze_data': 'Action node: Analyze the collected data for any anomalies.
Returns: True if an anomaly is detected, False otherwise.', 'take_action': 'Action node: Take necessary action if an anomaly is detected.
Returns: True if the action was taken, False otherwise.', 'is_data_collected': 'Condition node: Check if data has been collected from all sensors.
Returns: True if data has been collected, False otherwise.', 'is_anomaly_detected': 'Condition node: Check if an anomaly has been detected in the analyzed data.
Returns: True if an anomaly is detected, False otherwise.'}
OUTPUT:
<BehaviorTree><Sequence><Condition>is_data_collected</Condition><Action>collect_sensor_data</Action><Selector><Sequence><Action>analyze_data</Action><Condition>is_anomaly_detected</Condition><Action>take_action</Action></Sequence></Selector></Sequence></BehaviorTree>


###


USER COMMAND: Coordinate with other robots to collect resources and build a structure.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: locate_resource: Action node - Scans the environment and identifies the nearest resource. collect_resource: Action node - Collects the identified resource. build_structure: Action node - Constructs a designated structure using collected resources. is_resource_available: Condition node - Checks if there are any resources available in the area. is_structure_complete: Condition node - Checks if the designated structure has been fully constructed.
OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_resource_available</Condition><Sequence><Action>locate_resource</Action><Action>collect_resource</Action><Selector><Condition>is_structure_complete</Condition><Action>build_structure</Action></Selector></Sequence></Sequence></Selector></BehaviorTree>



###


USER COMMAND: Explore the environment while avoiding obstacles and staying close to the group.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: explore_environment: Action node - Moves the robot to explore the environment. avoid_obstacle: Action node - Uses sensors to detect and avoid obstacles. stay_close_to_group: Action node - Keeps the robot within a certain distance from other robots. is_obstacle_detected: Condition node - Checks if an obstacle has been detected. is_near_group: Condition node - Checks if the robot is within the designated distance from other robots.
OUTPUT:
<BehaviorTree><Sequence><Action>explore_environment</Action><Selector><Condition>is_obstacle_detected</Condition><Sequence><Action>avoid_obstacle</Action><Condition>is_near_group</Condition><Action>stay_close_to_group</Action></Sequence></Selector></Sequence></BehaviorTree>


###


USER COMMAND: generate behavior tree to 'Scan the environment for obstacles, avoid them, and then return home.'Output only the XML behavior tree without extra text.
INSTRUCTIONS: {'agent_movement_freeze': 'Action node: Freeze the agent’s movement, typically to indicate a stop in activity or end of tasks. Returns: Always returns True, indicating the action was executed.', 'avoid_obstacle': 'Action node: Execute an action to avoid detected obstacles. Returns: Always returns True, indicating the action was executed.', 'change_color_to_green': 'Action node: Change the agent’s color to green, usually indicating a successful operation or state. Returns: Always returns True, indicating the action was executed.', 'change_color_to_white': 'Action node: Change the agent’s color to white, usually indicating a neutral or initial state. Returns: Always returns True, indicating the action was executed.', 'continue_movement_agent': 'Action node: Continue the agent’s movement after it has been previously frozen. Returns: Always returns True, indicating the action was executed.', 'form_line': 'Action node: Direct the agent to form a line towards the center of the window. This function adjusts the agent’s position to align it with the center. Returns: Always returns True, indicating the action was executed.', 'is_agent_in_nest': 'Condition node: Determine if the agent is in the nest. Returns: True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition node: Determine if the agent has formed a line with a reference point at the center of the window. Returns: True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition node: Determine if any obstacles are detected in the vicinity of the agent. Returns: True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition node: Check if the path ahead of the agent is clear of obstacles. Returns: True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Action node: Check if the target is within a detectable distance from the agent’s position. Returns: True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition node: Check if the agent has reached the target. Returns: True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action node: Signal that the agent has completed its designated task by freezing movement and updating state. Returns: Always returns True, indicating that the task completion action was executed.', 'wander': 'Action node: Perform a wandering action where the agent moves randomly within the environment. Returns: Always returns True, indicating the action was executed.'}
OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>is_obstacle_detected</Condition> <Action>avoid_obstacle</Action> <Action>continue_movement_agent</Action> <Action>task_completed</Action> </Sequence> <Action>wander</Action> </Selector> <Selector> <Condition>is_agent_in_nest</Condition> <Action>change_color_to_white</Action> </Selector> </Sequence> </BehaviorTree>



###


USER COMMAND: generate behavior tree to 'Collect all objects within a specified area and bring them to a designated drop-off point.'Output only the XML behavior tree without extra text.
INSTRUCTIONS: {'agent_movement_freeze': 'Action node: Freeze the agent’s movement, typically to indicate a stop in activity or end of tasks. Returns: Always returns True, indicating the action was executed.', 'avoid_obstacle': 'Action node: Execute an action to avoid detected obstacles. Returns: Always returns True, indicating the action was executed.', 'change_color_to_green': 'Action node: Change the agent’s color to green, usually indicating a successful operation or state. Returns: Always returns True, indicating the action was executed.', 'change_color_to_white': 'Action node: Change the agent’s color to white, usually indicating a neutral or initial state. Returns: Always returns True, indicating the action was executed.', 'continue_movement_agent': 'Action node: Continue the agent’s movement after it has been previously frozen. Returns: Always returns True, indicating the action was executed.', 'form_line': 'Action node: Direct the agent to form a line towards the center of the window. This function adjusts the agent’s position to align it with the center. Returns: Always returns True, indicating the action was executed.', 'is_agent_in_nest': 'Condition node: Determine if the agent is in the nest. Returns: True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition node: Determine if the agent has formed a line with a reference point at the center of the window. Returns: True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition node: Determine if any obstacles are detected in the vicinity of the agent. Returns: True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition node: Check if the path ahead of the agent is clear of obstacles. Returns: True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Action node: Check if the target is within a detectable distance from the agent’s position. Returns: True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition node: Check if the agent has reached the target. Returns: True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action node: Signal that the agent has completed its designated task by freezing movement and updating state. Returns: Always returns True, indicating that the task completion action was executed.', 'wander': 'Action node: Perform a wandering action where the agent moves randomly within the environment. Returns: Always returns True, indicating the action was executed.'}
OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>is_target_detected</Condition> <Action>change_color_to_green</Action> <Action>task_completed</Action> </Sequence> <Action>wander</Action> </Selector> <Sequence> <Condition>is_target_reached</Condition> <Action>change_color_to_white</Action> <Action>agent_movement_freeze</Action> </Sequence> </Sequence> </BehaviorTree>


###


USER COMMAND: Navigate through a complex maze with multiple obstacles and reach the end point
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: navigate_to_next_waypoint: Action node - Move the robot to the next waypoint in the maze. Returns: True if the robot successfully navigated to the next waypoint, False otherwise. detect_obstacle: Action node - Uses sensors to detect any obstacles in front of the robot. Returns: True if an obstacle is detected, False otherwise. avoid_obstacle: Action node - Uses a predefined algorithm to avoid the detected obstacle. Returns: True if the robot successfully avoided the obstacle, False otherwise. is_maze_complete: Condition node - Checks if the robot has reached the end point of the maze. Returns: True if the maze is completed, False otherwise.
OUTPUT:
<BehaviorTree><Sequence><Condition>is_maze_complete</Condition><Selector><Sequence><Action>navigate_to_next_waypoint</Action></Sequence><Sequence><Action>detect_obstacle</Action><Action>avoid_obstacle</Action><Action>wait</Action></Sequence></Selector></Sequence></BehaviorTree>



###


USER COMMAND: Perform a collaborative task with another robot to complete a complex task
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: communicate: Action node - Allows the robot to communicate with another robot. Returns: True if communication is successful, False otherwise. share_information: Action node - Allows the robot to share relevant information with another robot. Returns: True if information is successfully shared, False otherwise. execute_task: Action node - Executes a specific task assigned by the other robot. Returns: True if the task is successfully executed, False otherwise. is_task_complete: Condition node - Checks if the task assigned by the other robot is completed. Returns: True if the task is completed, False otherwise.
OUTPUT:
<BehaviorTree><Sequence><Condition>is_task_complete</Condition><Selector><Sequence><Action>communicate</Action><Action>share_information</Action><Action>execute_task</Action></Sequence><Action>wait</Action></Selector></Sequence></BehaviorTree>



###


USER COMMAND: Explore an unknown environment and map it for future navigation
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: explore: Action node - Move the robot to an unexplored area. Returns: True if the robot successfully explored a new area, False otherwise. update_map: Action node - Updates the map with new information gathered during exploration. Returns: True if the map is successfully updated, False otherwise. is_map_complete: Condition node - Checks if the entire environment has been explored and mapped. Returns: True if the map is complete, False otherwise.
OUTPUT:
<BehaviorTree><Sequence><Condition>is_map_complete</Condition><Selector><Sequence><Action>explore</Action><Action>update_map</Action></Sequence><Action>wait</Action></Selector></Sequence></BehaviorTree>

###


USER COMMAND: generate behavior tree to 'Move towards the target while avoiding obstacles and change color to red when close to the target.'Output only the XML behavior tree without extra text.
INSTRUCTIONS: {'agent_movement_freeze': 'Action node: Freeze the agent’s movement, typically to indicate a stop in activity or end of tasks. Returns: Always returns True, indicating the action was executed.', 'avoid_obstacle': 'Action node: Execute an action to avoid detected obstacles. Returns: Always returns True, indicating the action was executed.', 'change_color_to_green': 'Action node: Change the agent’s color to green, usually indicating a successful operation or state. Returns: Always returns True, indicating the action was executed.', 'change_color_to_red': 'Action node: Change the agent’s color to red, usually indicating a warning or alert state. Returns: Always returns True, indicating the action was executed.', 'continue_movement_agent': 'Action node: Continue the agent’s movement after it has been previously frozen. Returns: Always returns True, indicating the action was executed.', 'form_line': 'Action node: Direct the agent to form a line towards the center of the window. This function adjusts the agent’s position to align it with the center. Returns: Always returns True, indicating the action was executed.', 'is_agent_in_nest': 'Condition node: Determine if the agent is in the nest. Returns: True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition node: Determine if the agent has formed a line with a reference point at the center of the window. Returns: True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition node: Determine if any obstacles are detected in the vicinity of the agent. Returns: True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition node: Check if the path ahead of the agent is clear of obstacles. Returns: True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Action node: Check if the target is within a detectable distance from the agent’s position. Returns: True if the target is within 20 units of distance, False otherwise.', 'is_target_close': 'Condition node: Check if the target is within 10 units of distance from the agent. Returns: True if the target is within 10 units of distance, False otherwise.', 'task_completed': 'Action node: Signal that the agent has completed its designated task by freezing movement and updating state. Returns: Always returns True, indicating that the task completion action was executed.', 'wander': 'Action node: Perform a wandering action where the agent moves randomly within the environment. Returns: Always returns True, indicating the action was executed.'}
OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>is_target_detected</Condition> <Action>avoid_obstacle</Action> <Condition>is_target_close</Condition> <Action>change_color_to_red</Action> </Sequence> <Action>continue_movement_agent</Action> </Selector> <Action>form_line</Action> </Sequence> </BehaviorTree>


###


USER COMMAND: generate behavior tree to 'Search for the target while avoiding obstacles and change color to yellow when target is nearby.'Output only the XML behavior tree without extra text.
INSTRUCTIONS: {'agent_movement_freeze': 'Action node: Freeze the agent’s movement, typically to indicate a stop in activity or end of tasks. Returns: Always returns True, indicating the action was executed.', 'avoid_obstacle': 'Action node: Execute an action to avoid detected obstacles. Returns: Always returns True, indicating the action was executed.', 'change_color_to_yellow': 'Action node: Change the agent’s color to yellow, usually indicating a warning or alert state. Returns: Always returns True, indicating the action was executed.', 'continue_movement_agent': 'Action node: Continue the agent’s movement after it has been previously frozen. Returns: Always returns True, indicating the action was executed.', 'form_line': 'Action node: Direct the agent to form a line towards the center of the window. This function adjusts the agent’s position to align it with the center. Returns: Always returns True, indicating the action was executed.', 'is_agent_in_nest': 'Condition node: Determine if the agent is in the nest. Returns: True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition node: Determine if the agent has formed a line with a reference point at the center of the window. Returns: True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition node: Determine if any obstacles are detected in the vicinity of the agent. Returns: True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition node: Check if the path ahead of the agent is clear of obstacles. Returns: True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Action node: Check if the target is within a detectable distance from the agent’s position. Returns: True if the target is within 20 units of distance, False otherwise.', 'is_target_nearby': 'Condition node: Check if the target is within 15 units of distance from the agent. Returns: True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action node: Signal that the agent has completed its designated task by freezing movement and updating state. Returns: Always returns True, indicating that the task completion action was executed.', 'wander': 'Action node: Perform a wandering action where the agent moves randomly within the environment. Returns: Always returns True, indicating the action was executed.'}
OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Action>avoid_obstacle</Action> <Condition>is_path_clear</Condition> <Action>continue_movement_agent</Action> </Sequence> <Sequence> <Condition>is_target_detected</Condition> <Action>change_color_to_yellow</Action> <Condition>is_target_nearby</Condition> <Action>agent_movement_freeze</Action> <Action>task_completed</Action> </Sequence> <Action>wander</Action> </Selector> </BehaviorTree>


###


USER COMMAND: generate behavior tree to 'Gather resources, bring them back to the nest, and distribute them evenly among all robots.'Output only the XML behavior tree without extra text.
INSTRUCTIONS: {'agent_movement_freeze': 'Action node: Freeze the agent’s movement, typically to indicate a stop in activity or end of tasks. Returns: Always returns True, indicating the action was executed.', 'avoid_obstacle': 'Action node: Execute an action to avoid detected obstacles.

###


USER COMMAND: coordinate with other robots to form a formation and move together towards a target location
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: form_formation: Action node (same as before). move_to_target: Action node (same as before). check_distance: Condition node (same as before).
OUTPUT:
<BehaviorTree><Sequence><Action>form_formation</Action><Sequence><Action>move_to_target</Action><Condition>check_distance</Condition></Sequence></Sequence></BehaviorTree>


###


USER COMMAND: defend the perimeter of a designated area from intruders
INSTRUCTIONS: Use only the following behaviors to generate XML Behavior tree based on the user command: {'patrol_boundary': 'Action node: Move along the perimeter of the designated area to patrol and defend it.
Returns: True if the robot successfully patrols the boundary, False otherwise.', 'detect_intruders': 'Action node: Use sensors to detect any intruders approaching the perimeter.
Returns: True if one or more intruders are detected, False otherwise.', 'engage_intruders': 'Action node: Engage and deter the intruders from entering the designated area.
Returns: True if the intruders are successfully engaged, False otherwise.', 'is_defense_successful': 'Condition node: Check if the perimeter is successfully defended and the designated area remains secure.
Returns: True if the defense is successful, False otherwise.'}  to construct a behavior tree in XML format for the given command.
OUTPUT:
<BehaviorTree><Sequence><Action>patrol_boundary</Action><Selector><Sequence><Action>detect_intruders</Action><Condition>is_defense_successful</Condition></Sequence><Action>engage_intruders</Action></Selector></Sequence></BehaviorTree>


###


USER COMMAND: navigate through a complex maze to reach a specific destination
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: explore_maze: Action node (same as before). check_dead_end: Condition node (same as before). backtrack: Action node (same as before). move_to_destination: Action node (same as before).
OUTPUT:
<BehaviorTree><Sequence><Action>explore_maze</Action><Selector><Sequence><Condition>check_dead_end</Condition><Action>backtrack</Action></Sequence><Action>move_to_destination</Action></Selector></Sequence></BehaviorTree> 


###


USER COMMAND: generate behavior tree for a swarm of robots to coordinate and form a bridge over a gap
INSTRUCTIONS: Use only the following behaviors to generate XML Behavior tree based on the user command: {'move_to_position': 'Action node: Move the robot to the designated position to form the bridge.
Returns: True if the robot successfully moved to the position, False otherwise.', 'deploy_bridge': 'Action node: Deploy the bridge mechanism to connect with other robots.
Returns: True if the bridge was successfully deployed, False otherwise.', 'check_gap': 'Condition node: Check if there is a gap that needs to be bridged.
Returns: True if there is a gap, False otherwise.', 'is_bridge_complete': 'Condition node: Check if the bridge has been successfully formed.
Returns: True if the bridge is complete, False otherwise.'} to construct a behavior tree in XML format for the given command.
OUTPUT:
<BehaviorTree><Sequence><Condition>is_bridge_complete</Condition><Sequence><Action>move_to_position</Action><Selector><Condition>check_gap</Condition><Action>deploy_bridge</Action></Selector></Sequence></Sequence>
</BehaviorTree>



###


USER COMMAND: generate behavior tree for a robot to navigate through a maze and reach the end
INSTRUCTIONS: Use only the following behaviors to generate XML Behavior tree based on the user command: {'move_forward': 'Action node: Move the robot forward in the maze.
Returns: True if the robot successfully moved forward, False otherwise.', 'turn_left': 'Action node: Turn the robot left.
Returns: True if the robot successfully turned left, False otherwise.', 'turn_right': 'Action node: Turn the robot right.
Returns: True if the robot successfully turned right, False otherwise.', 'check_end': 'Condition node: Check if the robot has reached the end of the maze.
Returns: True if the end is reached, False otherwise.'} to construct a behavior tree in XML format for the given command.
OUTPUT:
<BehaviorTree><Sequence><Condition>check_end</Condition><Selector><Action>move_forward</Action><Sequence><Action>turn_left</Action><Action>move_forward</Action><Selector><Action>turn_right</Action><Action>move_forward</Action></Selector></Sequence></Selector></Sequence></BehaviorTree>



###


USER COMMAND: generate behavior tree for a swarm of robots to work together and clear a debris field
INSTRUCTIONS: Use only the following behaviors to generate XML Behavior tree based on the user command: {'move_to_debris': 'Action node: Move the robot to a piece of debris in the field.
Returns: True if the robot successfully moved to the debris, False otherwise.', 'collect_debris': 'Action node: Collect the debris and dispose of it.
Returns: True if the debris was successfully collected and disposed, False otherwise.', 'check_field': 'Condition node: Check if there is any debris left in the field.
Returns: True if there is debris remaining, False otherwise.', 'is_field_cleared': 'Condition node: Check if the debris field has been completely cleared.
Returns: True if the field is cleared, False otherwise.'} to construct a behavior tree in XML format for the given command.
OUTPUT:
<BehaviorTree><Sequence><Condition>is_field_cleared</Condition><Sequence><Action>move_to_debris</Action><Selector><Condition>check_field</Condition><Action>collect_debris</Action></Selector></Sequence></Sequence></BehaviorTree>



###


USER COMMAND: generate behavior tree for a swarm of robots to collect objects from different locations and return to a central location
INSTRUCTIONS: {'move_to_object': 'Action node: Move the robot to the designated object location.
Returns: True if the robot successfully moved to the object location, False otherwise.', 'pick_up_object': 'Action node: Pick up the designated object.
Returns: True if the robot successfully picked up the object, False otherwise.', 'move_to_central_location': 'Action node: Move the robot to the central location.
Returns: True if the robot successfully moved to the central location, False otherwise.', 'deposit_object': 'Action node: Deposit the object at the central location.
Returns: True if the robot successfully deposited the object, False otherwise.', 'is_object_detected': 'Condition node: Check if an object is detected at the robot's current location.
Returns: True if an object is detected, False otherwise.', 'is_object_in_hand': 'Condition node: Check if the robot is currently holding an object.
Returns: True if an object is in hand, False otherwise.'}
OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_object_in_hand</Condition><Action>move_to_central_location</Action><Action>deposit_object</Action></Sequence><Sequence><Condition>is_object_detected</Condition><Action>move_to_object</Action><Action>pick_up_object</Action></Sequence></Selector></BehaviorTree>




###


USER COMMAND: generate behavior tree for a robot to navigate through a maze and reach the end point
INSTRUCTIONS: Use the following behaviors to construct the behavior tree in XML format: {'move_forward': 'Action node: Move the robot one step forward in the current direction.
Returns: True if the robot can move forward, False otherwise.', 'turn_left': 'Action node: Turn the robot 90 degrees to the left.
Returns: Always returns True.', 'turn_right': 'Action node: Turn the robot 90 degrees to the right.
Returns: Always returns True.', 'is_wall_ahead': 'Condition node: Check if there is a wall or obstacle ahead of the robot.
Returns: True if there is a wall, False otherwise.', 'is_goal_reached': 'Condition node: Check if the robot has reached the end point.
Returns: True if the end point is reached, False otherwise.'}
OUTPUT:
<BehaviorTree><Sequence><Condition>is_wall_ahead</Condition><Selector><Action>turn_left</Action><Action>turn_right</Action></Selector></Sequence><Sequence><Condition>is_goal_reached</Condition><Action>move_forward</Action></Sequence></BehaviorTree>




###


USER COMMAND: generate behavior tree for a swarm of robots to coordinate and perform a complex task
INSTRUCTIONS: { 'perform_task': 'Action node: Perform the designated task.
Returns: True if the task was successfully performed, False otherwise.', 'check_environment': 'Condition node: Check the environment for any obstacles or changes.
Returns: True if there are no obstacles or changes, False otherwise.', 'is_task_completed': 'Condition node: Check if the designated task has been completed.
Returns: True if the task is completed, False otherwise.', 'update_map': 'Action node: Update the internal map of the environment.
Returns: True if the map was successfully updated, False otherwise.', 'communicate': 'Action node: Communicate with other robots in the swarm to coordinate and share information.
Returns: True if communication was successful, False otherwise.', 'move_to_location': 'Action node: Move the robot to the designated location.
Returns: True if the robot successfully moved to the location, False otherwise.'}
OUTPUT:
<BehaviorTree><Sequence><Condition>check_environment</Condition><Action>update_map</Action></Sequence><Selector><Sequence><Condition>is_task_completed</Condition><Action>communicate</Action><Action>perform_task</Action></Sequence><Sequence><Action>move_to_location</Action><Action>perform_task</Action></Sequence></Selector></BehaviorTree>




###


USER COMMAND: Navigate through a maze while avoiding obstacles and reaching the end point
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: {'move_forward': 'Action node: Move the robot forward one step.',
'turn_left': 'Action node: Turn the robot left.',
'turn_right': 'Action node: Turn the robot right.',
'is_obstacle_detected': 'Condition node: Check if an obstacle is detected in front of the robot.',
'is_reached_destination': 'Condition node: Check if the robot has reached the end point.'}
OUTPUT:
<BehaviorTree><Sequence><Condition>is_reached_destination</Condition><Selector><Sequence><Condition>is_obstacle_detected</Condition><Action>turn_left</Action><Action>move_forward</Action></Sequence><Sequence><Condition>is_obstacle_detected</Condition><Action>turn_right</Action><Action>move_forward</Action></Sequence><Sequence><Condition>is_obstacle_detected</Condition><Action>move_forward</Action></Sequence></Selector></Sequence></BehaviorTree>



###


USER COMMAND: Perform a collaborative task of building a tower with other robots
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: {'move_to_location': 'Action node: Move the robot to a specific location.',
'pick_up_block': 'Action node: Pick up a block from the ground.',
'place_block': 'Action node: Place a block on top of the tower.',
'is_block_available': 'Condition node: Check if there is a block available at the current location.',
'is_tower_height_limit_reached': 'Condition node: Check if the tower has reached the desired height.'}
OUTPUT:
<BehaviorTree><Sequence><Condition>is_tower_height_limit_reached</Condition><Action>move_to_location</Action><Selector><Sequence><Condition>is_block_available</Condition><Action>pick_up_block</Action><Action>move_to_location</Action><Action>place_block</Action></Sequence><Action>wait</Action></Selector></Sequence></BehaviorTree>



###


USER COMMAND: Navigate a swarm of robots through a complex maze to reach the designated destination
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: {'move_forward': 'Action node: Move the robot forward one step.',
'move_left': 'Action node: Move the robot left.',
'move_right': 'Action node: Move the robot right.',
'is_obstacle_detected': 'Condition node: Check if an obstacle is detected in front of the robot.',
'is_reached_destination': 'Condition node: Check if the robot has reached the designated destination.'}
OUTPUT:
<BehaviorTree><Sequence><Condition>is_reached_destination</Condition><Selector><Sequence><Condition>is_obstacle_detected</Condition><Action>move_left</Action><Action>move_forward</Action></Sequence><Sequence><Condition>is_obstacle_detected</Condition><Action>move_right</Action><Action>move_forward</Action></Sequence><Sequence><Condition>is_obstacle_detected</Condition><Action>move_forward</Action></Sequence></Selector></Sequence></BehaviorTree> 


###


USER COMMAND: generate behavior tree to 'Find and collect resources, return to base, and deposit resources.'Output only the XML behavior tree without extra text.
INSTRUCTIONS: {'agent_movement_freeze': 'Action node: Freeze the agent’s movement, typically to indicate a stop in activity or end of tasks. Returns: Always returns True, indicating the action was executed.', 'avoid_obstacle': 'Action node: Execute an action to avoid detected obstacles. Returns: Always returns True, indicating the action was executed.', 'change_color_to_green': 'Action node: Change the agent’s color to green, usually indicating a successful operation or state. Returns: Always returns True, indicating the action was executed.', 'change_color_to_white': 'Action node: Change the agent’s color to white, usually indicating a neutral or initial state. Returns: Always returns True, indicating the action was executed.', 'continue_movement_agent': 'Action node: Continue the agent’s movement after it has been previously frozen. Returns: Always returns True, indicating the action was executed.', 'form_line': 'Action node: Direct the agent to form a line towards the center of the window. This function adjusts the agent’s position to align it with the center. Returns: Always returns True, indicating the action was executed.', 'is_agent_in_nest': 'Condition node: Determine if the agent is in the nest. Returns: True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition node: Determine if the agent has formed a line with a reference point at the center of the window. Returns: True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition node: Determine if any obstacles are detected in the vicinity of the agent. Returns: True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition node: Check if the path ahead of the agent is clear of obstacles. Returns: True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Action node: Check if the target is within a detectable distance from the agent’s position. Returns: True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition node: Check if the agent has reached the target. Returns: True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action node: Signal that the agent has completed its designated task by freezing movement and updating state. Returns: Always returns True, indicating that the task completion action was executed.', 'wander': 'Action node: Perform a wandering action where the agent moves randomly within the environment. Returns: Always returns True, indicating the action was executed.', 'collect_resources': 'Action node: Direct the agent to collect resources within the environment. Returns: Always returns True, indicating the action was executed.', 'deposit_resources': 'Action node: Direct the agent to deposit collected resources at the base. Returns: Always returns True, indicating the action was executed.'}
OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>is_target_detected</Condition> <Action>change_color_to_green</Action> </Sequence> <Action>collect_resources</Action> </Selector> <Selector> <Sequence> <Condition>is_agent_in_nest</Condition> <Action>change_color_to_white</Action> </Sequence> <Action>deposit_resources</Action> </Selector> </Sequence> </BehaviorTree>
 


###


USER COMMAND: generate behavior tree to 'Survive in harsh environment by finding shelter and collecting resources.'Output only the XML behavior tree without extra text.
INSTRUCTIONS: {'agent_movement_freeze': 'Action node: Freeze the agent’s movement, typically to indicate a stop in activity or end of tasks. Returns: Always returns True, indicating the action was executed.', 'avoid_obstacle': 'Action node: Execute an action to avoid detected obstacles. Returns: Always returns True, indicating the action was executed.', 'change_color_to_green': 'Action node: Change the agent’s color to green, usually indicating a successful operation or state. Returns: Always returns True, indicating the action was executed.', 'change_color_to_white': 'Action node: Change the agent’s color to white, usually indicating a neutral or initial state. Returns: Always returns True, indicating the action was executed.', 'continue_movement_agent': 'Action node: Continue the agent’s movement after it has been previously frozen. Returns: Always returns True, indicating the action was executed.', 'form_line': 'Action node: Direct the agent to form a line towards the center of the window. This function adjusts the agent’s position to align it with the center. Returns: Always returns True, indicating the action was executed.', 'is_agent_in_nest': 'Condition node: Determine if the agent is in the nest. Returns: True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition node: Determine if the agent has formed a line with a reference point at the center of the window. Returns: True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition node: Determine if any obstacles are detected in the vicinity of the agent. Returns: True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition node: Check if the path ahead of the agent is clear of obstacles. Returns: True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Action node: Check if the target is within a detectable distance from the agent’s position. Returns: True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition node: Check if the agent has reached the target. Returns: True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action node: Signal that the agent has completed its designated task by freezing movement and updating state. Returns: Always returns True, indicating that the task completion action was executed.', 'wander': 'Action node: Perform a wandering action where the agent moves randomly within the environment. Returns: Always returns True, indicating the action was executed.', 'find_shelter': 'Action node: Direct the agent to find and reach a shelter in the environment. Returns: Always returns True, indicating the action was executed.', 'collect_resources': 'Action node: Direct the agent to collect resources within the environment. Returns: Always returns True, indicating the action was executed.'}
OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>is_path_clear</Condition> <Action>continue_movement_agent</Action> <Action>wander</Action> </Sequence> <Action>avoid_obstacle</Action> </Selector> <Selector> <Action>find_shelter</   


###


USER COMMAND: generate behavior tree to 'Search for a target, avoid obstacles, and once target is found, move towards it and perform a specific action.'Output only the XML behavior tree without extra text.
INSTRUCTIONS: {'agent_movement_freeze': 'Action node: Freeze the agent’s movement, typically to indicate a stop in activity or end of tasks. Returns: Always returns True, indicating the action was executed.', 'avoid_obstacle': 'Action node: Execute an action to avoid detected obstacles. Returns: Always returns True, indicating the action was executed.', 'change_color_to_green': 'Action node: Change the agent’s color to green, usually indicating a successful operation or state. Returns: Always returns True, indicating the action was executed.', 'change_color_to_white': 'Action node: Change the agent’s color to white, usually indicating a neutral or initial state. Returns: Always returns True, indicating the action was executed.', 'continue_movement_agent': 'Action node: Continue the agent’s movement after it has been previously frozen. Returns: Always returns True, indicating the action was executed.', 'form_line': 'Action node: Direct the agent to form a line towards the center of the window. This function adjusts the agent’s position to align it with the center. Returns: Always returns True, indicating the action was executed.', 'is_agent_in_nest': 'Condition node: Determine if the agent is in the nest. Returns: True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition node: Determine if the agent has formed a line with a reference point at the center of the window. Returns: True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition node: Determine if any obstacles are detected in the vicinity of the agent. Returns: True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition node: Check if the path ahead of the agent is clear of obstacles. Returns: True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Action node: Check if the target is within a detectable distance from the agent’s position. Returns: True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition node: Check if the agent has reached the target. Returns: True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action node: Signal that the agent has completed its designated task by freezing movement and updating state. Returns: Always returns True, indicating that the task completion action was executed.', 'wander': 'Action node: Perform a wandering action where the agent moves randomly within the environment. Returns: Always returns True, indicating the action was executed.'}
OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>is_target_detected</Condition> <Action>change_color_to_green</Action> <Action>task_completed</Action> </Sequence> <Action>avoid_obstacle</Action> </Selector> <Selector> <Sequence> <Condition>is_target_reached</Condition> <Action>change_color_to_white</Action> <Action>task_completed</Action> </Sequence> <Action>continue_movement_agent</Action> </Selector> </Sequence> </BehaviorTree>



###


USER COMMAND: generate behavior tree to 'Perform a coordinated movement in the shape of a triangle.'Output only the XML behavior tree without extra text.
INSTRUCTIONS: {'agent_movement_freeze': 'Action node: Freeze the agent’s movement, typically to indicate a stop in activity or end of tasks. Returns: Always returns True, indicating the action was executed.', 'avoid_obstacle': 'Action node: Execute an action to avoid detected obstacles. Returns: Always returns True, indicating the action was executed.', 'change_color_to_green': 'Action node: Change the agent’s color to green, usually indicating a successful operation or state. Returns: Always returns True, indicating the action was executed.', 'change_color_to_white': 'Action node: Change the agent’s color to white, usually indicating a neutral or initial state. Returns: Always returns True, indicating the action was executed.', 'continue_movement_agent': 'Action node: Continue the agent’s movement after it has been previously frozen. Returns: Always returns True, indicating the action was executed.', 'form_line': 'Action node: Direct the agent to form a line towards the center of the window. This function adjusts the agent’s position to align it with the center. Returns: Always returns True, indicating the action was executed.', 'is_agent_in_nest': 'Condition node: Determine if the agent is in the nest. Returns: True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition node: Determine if the agent has formed a line with a reference point at the center of the window. Returns: True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition node: Determine if any obstacles are detected in the vicinity of the agent. Returns: True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition node: Check if the path ahead of the agent is clear of obstacles. Returns: True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Action node: Check if the target is within a detectable distance from the agent’s position. Returns: True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition node: Check if the agent has reached the target. Returns: True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action node: Signal that the agent has completed its designated task by freezing movement and updating state. Returns: Always returns True, indicating that the task completion action was executed.', 'wander': 'Action node: Perform a wandering action where the agent moves randomly within the environment. Returns: Always returns True, indicating the action was executed.'}
OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>is_agent_in_nest</Condition> <Action>change_color_to_green</Action> <Action>task_completed</Action> </Sequence> <Action>wander</Action> </Selector> <Selector> <Sequence> <Condition>is_line_formed</Condition> <Action>change_color_to_green</Action> <Action>agent_movement_freeze</Action> <Action>task_completed</Action> </Sequence> <Action>form_line</Action> </Selector> <Selector> <Sequence> <Condition>is_target_reached</Condition> <Action>change_color_to_white</Action> <Action>task_completed</Action> </Sequence> <Action>continue


###


USER COMMAND: generate behavior tree for a swarm of robots to efficiently collect resources in a designated area
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: {'move_to_resource': 'Action node: Move the robot towards the nearest resource in the designated area. Returns: True if the resource was successfully reached, False otherwise.', 'collect_resource': 'Action node: Collect the resource at the robot's current position. Returns: True if the resource was successfully collected, False otherwise.', 'deposit_resource': 'Action node: Deposit the collected resources at a designated collection point. Returns: True if the resources were successfully deposited, False otherwise.', 'is_resource_available': 'Condition node: Check if there are any remaining resources in the designated area. Returns: True if resources are available, False otherwise.', 'is_collection_point_reached': 'Condition node: Check if the robot has reached the designated resource collection point. Returns: True if the collection point is reached, False otherwise.'} to construct a behavior tree in XML format for the given command.
OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_resource_available</Condition><Sequence><Action>move_to_resource</Action><Action>collect_resource</Action></Sequence></Sequence><Sequence><Condition>is_collection_point_reached</Condition><Action>deposit_resource</Action></Sequence></Selector></BehaviorTree>



###


USER COMMAND: generate behavior tree for a swarm of robots to work together to build a structure
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: {'move_to_location': 'Action node: Move the robot towards a designated location for building. Returns: True if the location was successfully reached, False otherwise.', 'pick_up_resource': 'Action node: Pick up a resource at the robot's current position. Returns: True if the resource was successfully picked up, False otherwise.', 'place_resource': 'Action node: Place the resource at a designated location for building. Returns: True if the resource was successfully placed, False otherwise.', 'is_resource_available': 'Condition node: Check if there are any remaining resources available for building. Returns: True if resources are available, False otherwise.', 'is_structure_complete': 'Condition node: Check if the structure has been completed. Returns: True if the structure is complete, False otherwise.'} to construct a behavior tree in XML format for the given command.
OUTPUT:
<BehaviorTree><Sequence><Condition>is_structure_complete</Condition><Sequence><Action>move_to_location</Action><Selector><Sequence><Condition>is_resource_available</Condition><Sequence><Action>pick_up_resource</Action><Action>place_resource</Action></Sequence></Sequence><Action>wander</Action></Selector></Sequence></Sequence></BehaviorTree>



###


USER COMMAND: generate behavior tree for a swarm of robots to explore an unknown environment
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: {'move_to_next_area': 'Action node: Move the robot to the next unexplored area. Returns: True if the robot successfully moved to the next area, False otherwise.', 'scan_surroundings': 'Action node: Scan the surroundings for any potential obstacles or hazards using sensors. Returns: True if any obstacles were detected, False otherwise.', 'avoid_obstacle': 'Action node: Move the robot away from any detected obstacles. Returns: True if the robot successfully avoided the obstacle, False otherwise.', 'is_area_explored': 'Condition node: Check if the current area has been fully explored. Returns: True if the area is explored, False otherwise.', 'is_obstacle_detected': 'Condition node: Check if any obstacles were detected in the surroundings. Returns: True if obstacles are detected, False otherwise.'} to construct a behavior tree in XML format for the given command.
OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_area_explored</Condition><Action>move_to_next_area</Action></Sequence><Sequence><Condition>is_obstacle_detected</Condition><Selector><Sequence><Action>scan_surroundings</Action><Condition>is_obstacle_detected</Condition><Action>avoid_obstacle</Action></Sequence><Action>wander</Action></Selector></Sequence></Selector></BehaviorTree> 


###


USER COMMAND: Explore the environment and gather resources while avoiding obstacles and enemy robots.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: explore_environment: Subtree node - Represents a behavior tree for exploring the environment and gathering resources. avoid_obstacles: Action node - Makes the robot avoid obstacles. avoid_enemies: Action node - Makes the robot avoid enemy robots.
OUTPUT:
<BehaviorTree><Selector><Sequence><Action>explore_environment</Action></Sequence><Sequence><Action>avoid_obstacles</Action></Sequence><Sequence><Action>avoid_enemies</Action></Sequence></Selector></BehaviorTree>



###


USER COMMAND: Collect and deposit resources at a designated location while avoiding obstacles and enemy robots.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: collect_resources: Subtree node - Represents a behavior tree for collecting resources. deposit_resources: Subtree node - Represents a behavior tree for depositing resources. avoid_obstacles: Action node (same as before). avoid_enemies: Action node (same as before).
OUTPUT:
<BehaviorTree><Selector><Sequence><Action>collect_resources</Action></Sequence><Sequence><Action>deposit_resources</Action></Sequence><Sequence><Action>avoid_obstacles</Action></Sequence><Sequence><Action>avoid_enemies</Action></Sequence></Selector></BehaviorTree>



###


USER COMMAND: Perform a coordinated task with other robots, such as building a structure or defending a location.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: coordinate_task: Subtree node - Represents a behavior tree for coordinating tasks with other robots. build_structure: Subtree node - Represents a behavior tree for building a structure. defend_location: Subtree node - Represents a behavior tree for defending a location. communicate: Action node - Makes the robot communicate with other robots to coordinate tasks.
OUTPUT:
<BehaviorTree><Selector><Sequence><Action>coordinate_task</Action><Action>communicate</Action><Condition>is_building</Condition><Sequence><Action>build_structure</Action></Sequence><Condition>is_defending</Condition><Sequence><Action>defend_location</Action></Sequence></Sequence></Selector></BehaviorTree> 


###


USER COMMAND: generate behavior tree for a group of swarm robots to collect resources and return to the nest
INSTRUCTIONS: Use only the following behaviors to generate XML Behavior tree based on the user command: {'move_to_resource': 'Action node: Move the robot to the nearest available resource.
Returns: True if the robot successfully moved to the resource, False otherwise.', 'collect_resource': 'Action node: Collect the resource at the current location.
Returns: True if the resource was successfully collected, False otherwise.', 'return_to_nest': 'Action node: Move the robot back to the nest.
Returns: True if the robot successfully returned to the nest, False otherwise.', 'is_resource_available': 'Condition node: Check if there is a resource available at the current location.
Returns: True if a resource is available, False otherwise.', 'is_nest_reached': 'Condition node: Check if the robot has reached the nest.
Returns: True if the robot has reached the nest, False otherwise.'}  to construct a behavior tree in XML format for the given command.
OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>is_resource_available</Condition> <Action>move_to_resource</Action> <Action>collect_resource</Action> </Sequence> <Sequence> <Condition>is_nest_reached</Condition> <Action>return_to_nest</Action> </Sequence> </Selector> </Sequence> </BehaviorTree>



###


USER COMMAND: generate behavior tree for a robot to navigate a maze and reach the end goal
INSTRUCTIONS: Use only the following behaviors to generate XML Behavior tree based on the user command: {'move_forward': 'Action node: Move the robot forward one step.
Returns: True if the robot successfully moved forward, False otherwise.', 'turn_left': 'Action node: Turn the robot to the left.
Returns: True if the robot successfully turned left, False otherwise.', 'turn_right': 'Action node: Turn the robot to the right.
Returns: True if the robot successfully turned right, False otherwise.', 'is_path_clear': 'Condition node: Check if the path ahead is clear.
Returns: True if the path is clear, False otherwise.', 'is_goal_reached': 'Condition node: Check if the robot has reached the end goal.
Returns: True if the goal is reached, False otherwise.', 'is_path_available': 'Condition node: Check if there is a path available to continue navigating.
Returns: True if a path is available, False otherwise.'}  to construct a behavior tree in XML format for the given command.
OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>is_goal_reached</Condition> </Sequence> <Sequence> <Condition>is_path_available</Condition> <Selector> <Sequence> <Condition>is_path_clear</Condition> <Action>move_forward</Action> </Sequence> <Selector> <Sequence> <Action>turn_left</Action> <Action>move_forward</Action> </Sequence> <Sequence> <Action>turn_right</Action> <Action>move_forward</Action> </Sequence> </Selector> </Sequence> </Sequence> </Selector> </Sequence> </BehaviorTree>



###


USER COMMAND: generate behavior tree for a robot to perform a complex task of building a structure with blocks
INSTRUCTIONS: Use only the following behaviors to generate XML Behavior tree based on the user command: {'move_to_next_block': 'Action node: Move the robot to the next available block to be placed.
Returns: True if the robot successfully moved to the next block, False otherwise.', 'pick_up_block': 'Action node: Pick up the block at the current location.
Returns: True if the block was successfully picked up, False otherwise.', 'place_block': 'Action node: Place the block at the designated location.
Returns: True if the block was successfully placed, False otherwise.', 'check_if_structure_complete': 'Condition node: Check if the structure is complete.
Returns: True if the structure is complete, False otherwise.', 'is_block_available': 'Condition node: Check if there is a block available at the current location.
Returns: True if a block is available, False otherwise.', 'is_block_below': 'Condition node: Check if there is a block already placed below the current location.
Returns: True if a block is present below, False otherwise.'}  to construct a behavior tree in XML format for the given command.
OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>check_if_structure_complete</Condition> </Sequence> <Sequence> <Condition>is_block_available</Condition> <Selector> <Sequence> <Condition>is_block_below</Condition> <Action>pick_up_block</Action> <Action>move_to_next_block</Action> <Action>place_block</Action> </Sequence> <Sequence> <Action>move_to_next_block</Action> </Sequence> </Selector> </Sequence> </Selector> </Sequence> </BehaviorTree> 


###


USER COMMAND: generate behavior tree to 'Wander until an obstacle is detected, then avoid the obstacle and return to original position.' Output only the XML behavior tree without extra text.
INSTRUCTIONS: {'agent_movement_freeze': 'Action node: Freeze the agent’s movement, typically to indicate a stop in activity or end of tasks. Returns: Always returns True, indicating the action was executed.', 'avoid_obstacle': 'Action node: Execute an action to avoid detected obstacles. Returns: Always returns True, indicating the action was executed.', 'change_color_to_green': 'Action node: Change the agent’s color to green, usually indicating a successful operation or state. Returns: Always returns True, indicating the action was executed.', 'change_color_to_white': 'Action node: Change the agent’s color to white, usually indicating a neutral or initial state. Returns: Always returns True, indicating the action was executed.', 'continue_movement_agent': 'Action node: Continue the agent’s movement after it has been previously frozen. Returns: Always returns True, indicating the action was executed.', 'form_line': 'Action node: Direct the agent to form a line towards the center of the window. This function adjusts the agent’s position to align it with the center. Returns: Always returns True, indicating the action was executed.', 'is_agent_in_nest': 'Condition node: Determine if the agent is in the nest. Returns: True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition node: Determine if the agent has formed a line with a reference point at the center of the window. Returns: True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition node: Determine if any obstacles are detected in the vicinity of the agent. Returns: True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition node: Check if the path ahead of the agent is clear of obstacles. Returns: True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Action node: Check if the target is within a detectable distance from the agent’s position. Returns: True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition node: Check if the agent has reached the target. Returns: True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action node: Signal that the agent has completed its designated task by freezing movement and updating state. Returns: Always returns True, indicating that the task completion action was executed.', 'wander': 'Action node: Perform a wandering action where the agent moves randomly within the environment. Returns: Always returns True, indicating the action was executed.'}
OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>is_obstacle_detected</Condition> <Action>avoid_obstacle</Action> <Condition>is_agent_in_nest</Condition> <Action>change_color_to_white</Action> <Action>task_completed</Action> </Sequence> <Action>wander</Action> </Selector> </Sequence> </BehaviorTree>



###


USER COMMAND: generate behavior tree to 'Complete a series of tasks, including finding and reaching a target, changing color, and forming a line.' Output only the XML behavior tree without extra text.
INSTRUCTIONS: {'agent_movement_freeze': 'Action node: Freeze the agent’s movement, typically to indicate a stop in activity or end of tasks. Returns: Always returns True, indicating the action was executed.', 'avoid_obstacle': 'Action node: Execute an action to avoid detected obstacles. Returns: Always returns True, indicating the action was executed.', 'change_color_to_green': 'Action node: Change the agent’s color to green, usually indicating a successful operation or state. Returns: Always returns True, indicating the action was executed.', 'change_color_to_white': 'Action node: Change the agent’s color to white, usually indicating a neutral or initial state. Returns: Always returns True, indicating the action was executed.', 'continue_movement_agent': 'Action node: Continue the agent’s movement after it has been previously frozen. Returns: Always returns True, indicating the action was executed.', 'form_line': 'Action node: Direct the agent to form a line towards the center of the window. This function adjusts the agent’s position to align it with the center. Returns: Always returns True, indicating the action was executed.', 'is_agent_in_nest': 'Condition node: Determine if the agent is in the nest. Returns: True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition node: Determine if the agent has formed a line with a reference point at the center of the window. Returns: True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition node: Determine if any obstacles are detected in the vicinity of the agent. Returns: True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition node: Check if the path ahead of the agent is clear of obstacles. Returns: True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Action node: Check if the target is within a detectable distance from the agent’s position. Returns: True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition node: Check if the agent has reached the target. Returns: True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action node: Signal that the agent has completed its designated task by freezing movement and updating state. Returns: Always returns True, indicating that the task completion action was executed.', 'wander': 'Action node: Perform a wandering action where the agent moves randomly within the environment. Returns: Always returns True, indicating the action was executed.'}
OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>is_target_detected</Condition> <Action>change_color_to_green</Action> <Action>task_completed</Action> </Sequence> <Sequence> <Condition>is_line_formed</Condition> <Action>change_color_to_white</Action> <Action>agent_movement_freeze</Action> <Action>task_completed</Action> </Sequence> <Sequence> <Action>form_line</Action> <Condition>is_target_reached</Condition> <Action>task_completed</Action> </Sequence> </Selector> </BehaviorTree>



###


USER COMMAND: generate behavior tree for a swarm of robots to coordinate and complete a construction task
INSTRUCTIONS: Use only the following behaviors to generate XML Behavior tree based on the user command: {'move_to_next_task': 'Action node: Move the current robot to the next task in the construction project.
Returns: True if the robot successfully moved to the next task, False otherwise.', 'collect_materials': 'Action node: Collect necessary materials from the designated area for the current task.
Returns: True if all materials were successfully collected, False otherwise.', 'build_structure': 'Action node: Use tools and materials to construct the designated structure.
Returns: True if the structure was successfully built, False otherwise.', 'is_task_complete': 'Condition node: Check if the current task has been completed.
Returns: True if the task is complete, False otherwise.'} to construct a behavior tree in XML format for the given command.
OUTPUT:
<BehaviorTree><Sequence><Condition>is_task_complete</Condition><Sequence><Action>move_to_next_task</Action><Action>collect_materials</Action><Action>build_structure</Action></Sequence></Sequence></BehaviorTree>



###


USER COMMAND: generate behavior tree for a robot to navigate through a maze and reach the end goal
INSTRUCTIONS: Use only the following behaviors to generate XML Behavior tree based on the user command: {'move_forward': 'Action node: Move the robot forward one step in the maze.
Returns: True if the robot successfully moved forward, False otherwise.', 'turn_left': 'Action node: Turn the robot 90 degrees to the left.
Returns: Always returns True.', 'turn_right': 'Action node: Turn the robot 90 degrees to the right.
Returns: Always returns True.', 'is_at_end': 'Condition node: Check if the robot has reached the end of the maze.
Returns: True if the end goal is reached, False otherwise.'} to construct a behavior tree in XML format for the given command.
OUTPUT:
<BehaviorTree><Sequence><Condition>is_at_end</Condition><Selector><Sequence><Action>move_forward</Action><Action>turn_left</Action></Sequence><Sequence><Action>move_forward</Action><Action>turn_right</Action></Sequence></Selector></Sequence></BehaviorTree>



###


USER COMMAND: generate behavior tree for a swarm of robots to gather resources and bring them back to a central location
INSTRUCTIONS: Use only the following behaviors to generate XML Behavior tree based on the user command: {'move_to_resource': 'Action node: Move the robot to the closest available resource.
Returns: True if the robot successfully moved to the resource, False otherwise.', 'gather_resource': 'Action node: Use tools to gather the designated resource.
Returns: True if the resource was successfully gathered, False otherwise.', 'return_to_base': 'Action node: Return to the central location with the collected resources.
Returns: True if the robot successfully returned to the base, False otherwise.', 'is_resource_available': 'Condition node: Check if there are any available resources within the vicinity.
Returns: True if there is at least one resource available, False otherwise.'} to construct a behavior tree in XML format for the given command.
OUTPUT:
<BehaviorTree><Sequence><Condition>is_resource_available</Condition><Sequence><Action>move_to_resource</Action><Action>gather_resource</Action><Action>return_to_base</Action></Sequence></Sequence></BehaviorTree> 


###


USER COMMAND: generate behavior tree for a swarm of robots to collaborate and transport a large object to a specific location
INSTRUCTIONS: Use only the following behaviors to generate XML Behavior tree based on the user command: {'move_to_object': 'Action node: Move the robot to the designated object.
Returns: True if the robot successfully reached the object, False otherwise.', 'pick_up_object': 'Action node: Pick up the designated object using the robot's manipulators.
Returns: True if the object was successfully picked up, False otherwise.', 'move_to_destination': 'Action node: Move the robot to the designated destination.
Returns: True if the robot successfully reached the destination, False otherwise.', 'drop_object': 'Action node: Release the object using the robot's manipulators.
Returns: Always returns True.', 'is_object_picked': 'Condition node: Check if the designated object has been picked up by the robot.
Returns: True if the object is picked up, False otherwise.', 'is_destination_reached': 'Condition node: Check if the robot has reached the designated destination.
Returns: True if the destination is reached, False otherwise.'} to construct a behavior tree in XML format for the given command.
OUTPUT:
<BehaviorTree><Sequence><Condition>is_object_picked</Condition><Sequence><Action>move_to_destination</Action><Action>drop_object</Action></Sequence><Selector><Sequence><Action>move_to_object</Action><Action>pick_up_object</Action></Sequence><Action>wait</Action></Selector><Condition>is_destination_reached</Condition></Sequence>
</BehaviorTree>



###


USER COMMAND: generate behavior tree for a swarm of robots to search and rescue a missing person in a disaster-stricken area
INSTRUCTIONS: Use only the following behaviors to generate XML Behavior tree based on the user command: {'move_to_search_area': 'Action node: Move the robot to the designated search area.
Returns: True if the robot successfully reached the search area, False otherwise.', 'scan_for_person': 'Action node: Use sensors to scan the current area for any signs of the missing person.
Returns: True if the person is detected, False otherwise.', 'rescue_person': 'Action node: Collaboratively lift and carry the missing person to a designated safe zone.
Returns: True if the person is successfully rescued, False otherwise.', 'is_area_searched': 'Condition node: Check if the current area has been thoroughly searched for the missing person.
Returns: True if the area is searched, False otherwise.', 'is_person_found': 'Condition node: Check if the missing person has been located.
Returns: True if the person is found, False otherwise.'} to construct a behavior tree in XML format for the given command.
OUTPUT:
<BehaviorTree><Sequence><Condition>is_person_found</Condition><Selector><Sequence><Condition>is_area_searched</Condition><Action>wait</Action></Sequence><Sequence><Action>move_to_search_area</Action><Action>scan_for_person</Action></Sequence><Selector><Sequence><Action>rescue_person</Action><Action>wait</Action></Sequence><Action>wait</Action></Selector></Selector></Sequence>
</BehaviorTree>



###


USER COMMAND: generate behavior tree for a swarm of robots to build a structure based on a specific blueprint
INSTRUCTIONS: Use only the following behaviors to generate XML Behavior tree based on the user command: {'move_to_blueprint': 'Action node: Move the robot to the designated location of the blueprint.
Returns: True if the robot successfully reached the blueprint location, False otherwise.', 'analyze_blueprint': 'Action node: Use sensors to analyze and understand the blueprint's structure and requirements.
Returns: True if the blueprint is analyzed and understood, False otherwise.', 'collect_materials': 'Action node: Collaboratively gather the necessary materials for the structure based on the blueprint.
Returns: True if all materials are collected, False otherwise.', 'construct_structure': 'Action node: Work together to construct the structure according to the blueprint.
Returns: True if the structure is successfully built, False otherwise.', 'is_blueprint_complete': 'Condition node: Check if the entire blueprint has been built according to specifications.
Returns: True if the blueprint is complete, False otherwise.'} to construct a behavior tree in XML format for the given command.
OUTPUT:
<BehaviorTree><Sequence><Condition>is_blueprint_complete</Condition><Selector><Sequence><Action>move_to_blueprint</Action><Action>analyze_blueprint</Action></Sequence><Selector><Sequence><Action>collect_materials</Action><Action>construct_structure</Action></Sequence><Action>wait</Action></Selector></Selector></Sequence>
</BehaviorTree>


###


USER COMMAND: generate behavior tree to 'Collect resources and deposit them in the designated storage area.'
INSTRUCTIONS: Use only the following behaviors to generate XML Behavior tree based on the user command: {'move_to_resource': 'Action node: Move the robot to the nearest resource location.
Returns: True if the robot successfully moved to the resource, False otherwise.', 'collect_resource': 'Action node: Collect the resource at the current location.
Returns: True if the resource was successfully collected, False otherwise.', 'move_to_storage': 'Action node: Move the robot to the designated storage area.
Returns: True if the robot successfully moved to the storage area, False otherwise.', 'deposit_resource': 'Action node: Deposit the collected resource in the designated storage area.
Returns: True if the resource was successfully deposited, False otherwise.', 'has_resource': 'Condition node: Check if the robot is currently carrying a resource.
Returns: True if the robot has a resource, False otherwise.', 'is_storage_reachable': 'Condition node: Check if the designated storage area is reachable by the robot.
Returns: True if the storage area is reachable, False otherwise.', 'is_resource_available': 'Condition node: Check if there are any resources available in the current location.
Returns: True if resources are available, False otherwise.', 'is_storage_full': 'Condition node: Check if the designated storage area is full.
Returns: True if the storage area is full, False otherwise.'}  to construct a behavior tree in XML format for the given command.
OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>has_resource</Condition><Action>deposit_resource</Action></Sequence><Selector><Sequence><Condition>is_storage_full</Condition><Action>move_to_storage</Action></Sequence><Selector><Sequence><Condition>is_storage_reachable</Condition><Action>move_to_resource</Action><Action>collect_resource</Action></Sequence><Action>wander</Action></Selector></Selector></Sequence></BehaviorTree>



###


USER COMMAND: generate behavior tree to 'Detect enemy and engage in combat'
INSTRUCTIONS: Use only the following behaviors to generate XML Behavior tree based on the user command: {'move_to_enemy': 'Action node: Move the robot closer to the enemy's location.
Returns: True if the robot successfully moved to the enemy's location, False otherwise.', 'detect_enemy': 'Action node: Use sensors to detect the presence of an enemy.
Returns: True if an enemy is detected, False otherwise.', 'engage_in_combat': 'Action node: Engage in combat with the detected enemy.
Returns: True if the robot successfully engaged in combat, False otherwise.', 'is_enemy_detected': 'Condition node: Check if an enemy has been detected by the sensors.
Returns: True if an enemy is detected, False otherwise.', 'is_in_combat': 'Condition node: Check if the robot is currently engaged in combat.
Returns: True if the robot is in combat, False otherwise.', 'is_enemy_defeated': 'Condition node: Check if the enemy has been defeated.
Returns: True if the enemy is defeated, False otherwise.'}  to construct a behavior tree in XML format for the given command.
OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>is_enemy_defeated</Condition><Action>move_to_enemy</Action><Action>detect_enemy</Action><Action>engage_in_combat</Action></Sequence><Selector><Condition>is_enemy_detected</Condition><Action>move_to_enemy</Action><Action>engage_in_combat</Action></Selector></Selector></Sequence></BehaviorTree>



###


USER COMMAND: generate behavior tree for a robot to perform a construction task
INSTRUCTIONS: Use only the following behaviors to generate XML Behavior tree based on the user command: {'move_to_location': 'Action node: Move the robot to the designated construction location.
Returns: True if the robot successfully moved to the location, False otherwise.', 'pick_up_materials': 'Action node: Pick up the required materials for the construction task.
Returns: True if the materials were successfully picked up, False otherwise.', 'build_structure': 'Action node: Use the collected materials to build the designated structure.
Returns: True if the structure was successfully built, False otherwise.', 'is_at_location': 'Condition node: Check if the robot is currently at the designated construction location.
Returns: True if the robot is at the location, False otherwise.', 'has_materials': 'Condition node: Check if the robot has the required materials for the construction task.
Returns: True if the robot has the materials, False otherwise.', 'is_structure_built': 'Condition node: Check if the designated structure has been built.
Returns: True if the structure is built, False otherwise.'}  to construct a behavior tree in XML format for the given command.
OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>is_structure_built</Condition><Action>move_to_location</Action><Action>pick_up_materials</Action><Action>build_structure</Action></Sequence><Selector><Sequence><Condition>is_at_location</Condition><Action>pick_up_materials</Action><Action>build_structure</Action></Sequence><Action>wander</Action></Selector></Selector></Sequence></BehaviorTree> 


###


USER COMMAND: generate behavior tree to 'Navigate through obstacles to reach the target, avoiding obstacles along the way.'Output only the XML behavior tree without extra text.
INSTRUCTIONS: {'agent_movement_freeze': 'Action node: Freeze the agent’s movement, typically to indicate a stop in activity or end of tasks. Returns: Always returns True, indicating the action was executed.', 'avoid_obstacle': 'Action node: Execute an action to avoid detected obstacles. Returns: Always returns True, indicating the action was executed.', 'change_color_to_green': 'Action node: Change the agent’s color to green, usually indicating a successful operation or state. Returns: Always returns True, indicating the action was executed.', 'change_color_to_white': 'Action node: Change the agent’s color to white, usually indicating a neutral or initial state. Returns: Always returns True, indicating the action was executed.', 'continue_movement_agent': 'Action node: Continue the agent’s movement after it has been previously frozen. Returns: Always returns True, indicating the action was executed.', 'form_line': 'Action node: Direct the agent to form a line towards the center of the window. This function adjusts the agent’s position to align it with the center. Returns: Always returns True, indicating the action was executed.', 'is_agent_in_nest': 'Condition node: Determine if the agent is in the nest. Returns: True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition node: Determine if the agent has formed a line with a reference point at the center of the window. Returns: True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition node: Determine if any obstacles are detected in the vicinity of the agent. Returns: True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition node: Check if the path ahead of the agent is clear of obstacles. Returns: True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Action node: Check if the target is within a detectable distance from the agent’s position. Returns: True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition node: Check if the agent has reached the target. Returns: True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action node: Signal that the agent has completed its designated task by freezing movement and updating state. Returns: Always returns True, indicating that the task completion action was executed.', 'wander': 'Action node: Perform a wandering action where the agent moves randomly within the environment. Returns: Always returns True, indicating the action was executed.'}
OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>is_path_clear</Condition><Condition>is_target_reached</Condition><Action>continue_movement_agent</Action></Sequence><Action>is_target_detected</Action><Action>avoid_obstacle</Action></Selector><Sequence><Condition>is_agent_in_nest</Condition><Action>change_color_to_white</Action></Sequence></Sequence></BehaviorTree>



###


USER COMMAND: generate behavior tree to 'Search for and collect resources, and then return to the designated storage area.'Output only the XML behavior tree without extra text.
INSTRUCTIONS: {'agent_movement_freeze': 'Action node: Freeze the agent’s movement, typically to indicate a stop in activity or end of tasks. Returns: Always returns True, indicating the action was executed.', 'avoid_obstacle': 'Action node: Execute an action to avoid detected obstacles. Returns: Always returns True, indicating the action was executed.', 'change_color_to_green': 'Action node: Change the agent’s color to green, usually indicating a successful operation or state. Returns: Always returns True, indicating the action was executed.', 'change_color_to_white': 'Action node: Change the agent’s color to white, usually indicating a neutral or initial state. Returns: Always returns True, indicating the action was executed.', 'continue_movement_agent': 'Action node: Continue the agent’s movement after it has been previously frozen. Returns: Always returns True, indicating the action was executed.', 'form_line': 'Action node: Direct the agent to form a line towards the center of the window. This function adjusts the agent’s position to align it with the center. Returns: Always returns True, indicating the action was executed.', 'is_agent_in_nest': 'Condition node: Determine if the agent is in the nest. Returns: True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition node: Determine if the agent has formed a line with a reference point at the center of the window. Returns: True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition node: Determine if any obstacles are detected in the vicinity of the agent. Returns: True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition node: Check if the path ahead of the agent is clear of obstacles. Returns: True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Action node: Check if the target is within a detectable distance from the agent’s position. Returns: True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition node: Check if the agent has reached the target. Returns: True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action node: Signal that the agent has completed its designated task by freezing movement and updating state. Returns: Always returns True, indicating that the task completion action was executed.', 'wander': 'Action node: Perform a wandering action where the agent moves randomly within the environment. Returns: Always returns True, indicating the action was executed.'}
OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>is_target_detected</Condition><Action>change_color_to_green</Action><Action>task_completed</Action></Sequence><Condition>is_line_formed</Condition><Action>form_line</Action></Sequence><Selector><Sequence><Condition>is_path_clear</Condition><Action>continue_movement_agent</Action></Sequence><Action>is_target_detected</Action><Action>avoid_obstacle</Action></Selector><Action>is_target_reached</Action><Action>task_completed</Action></Sequence></BehaviorTree>



###


USER COMMAND: generate behavior tree for a robot to navigate through a maze and reach the end point
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: {'move_forward': 'Action node: Move the robot forward one unit.
Returns: True if the movement was successful, False otherwise.', 'turn_left': 'Action node: Turn the robot 90 degrees to the left.
Returns: True if the turn was successful, False otherwise.', 'turn_right': 'Action node: Turn the robot 90 degrees to the right.
Returns: True if the turn was successful, False otherwise.', 'is_wall_ahead': 'Condition node: Check if there is a wall directly ahead of the robot.
Returns: True if a wall is detected, False otherwise.', 'is_goal_reached': 'Condition node: Check if the robot has reached the end point.
Returns: True if the end point is reached, False otherwise.'}  to construct a behavior tree in XML format for the given command.
OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_goal_reached</Condition><Action>celebrate_success</Action></Sequence><Selector><Sequence><Condition>is_wall_ahead</Condition><Action>turn_left</Action></Sequence><Sequence><Action>move_forward</Action><Repeat><Action>turn_right</Action></Repeat></Sequence></Selector></Selector></BehaviorTree>



###


USER COMMAND: generate behavior tree for a swarm of robots to cooperate and complete a task
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: {'gather_resource': 'Action node: Move to a nearby resource and gather it.
Returns: True if the resource is gathered successfully, False otherwise.', 'deposit_resource': 'Action node: Move to the designated deposit location and deposit the resource.
Returns: True if the resource is deposited successfully, False otherwise.', 'is_resource_available': 'Condition node: Check if there is a resource available nearby.
Returns: True if a resource is detected, False otherwise.', 'is_deposit_reached': 'Condition node: Check if the robot has reached the designated deposit location.
Returns: True if the deposit location is reached, False otherwise.'}  to construct a behavior tree in XML format for the given command.
OUTPUT:
<BehaviorTree><Sequence><Repeat><Selector><Sequence><Condition>is_resource_available</Condition><Action>gather_resource</Action></Sequence><Sequence><Condition>is_deposit_reached</Condition><Action>deposit_resource</Action></Sequence></Selector></Repeat></Sequence></BehaviorTree>



###


USER COMMAND: generate behavior tree for a robot to perform a series of tasks in a manufacturing plant
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: {'move_to_next_station': 'Action node: Move to the next designated station in the manufacturing plant.
Returns: True if the movement was successful, False otherwise.', 'perform_task': 'Action node: Perform a task at the current station using specialized machinery.
Returns: True if the task was successfully completed, False otherwise.', 'check_inventory': 'Action node: Check the inventory level at the current station.
Returns: True if the inventory level is sufficient, False otherwise.', 'refill_inventory': 'Action node: Refill the inventory level at the current station using supplies from a central location.
Returns: True if the inventory was successfully refilled, False otherwise.'}  to construct a behavior tree in XML format for the given command.
OUTPUT:
<BehaviorTree><Sequence><Repeat><Selector><Sequence><Action>check_inventory</Action><Condition>is_inventory_low</Condition><Action>refill_inventory</Action></Sequence><Sequence><Action>perform_task</Action><Repeat><Action>move_to_next_station</Action></Repeat></Sequence></Selector></Repeat></Sequence></BehaviorTree>


###


USER COMMAND: generate behavior tree for a robot to navigate through a maze and reach the end point
INSTRUCTIONS: Use the provided behaviors to create a behavior tree in XML format for the given user command: {'move_forward': 'Action node: Move the robot forward by 1 unit.
Returns: True if the movement was successful, False otherwise.', 'turn_left': 'Action node: Turn the robot left by 90 degrees.
Returns: True if the turn was successful, False otherwise.', 'turn_right': 'Action node: Turn the robot right by 90 degrees.
Returns: True if the turn was successful, False otherwise.', 'is_wall_ahead': 'Condition node: Check if there is a wall in front of the robot.
Returns: True if a wall is detected, False otherwise.', 'is_end_reached': 'Condition node: Check if the end point has been reached.
Returns: True if the robot is within a certain distance from the end point, False otherwise.'}
OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_wall_ahead</Condition><Selector><Sequence><Action>turn_left</Action><Action>move_forward</Action></Sequence><Sequence><Action>turn_right</Action><Action>move_forward</Action></Sequence></Selector></Sequence><Sequence><Condition>is_end_reached</Condition><Action>stop_movement</Action></Sequence></Selector></BehaviorTree>



###


USER COMMAND: generate behavior tree for a swarm of robots to collaborate in building a structure
INSTRUCTIONS: Use the following behaviors to construct a behavior tree in XML format for the given user command: {'move_to_next_location': 'Action node: Move the robot to the next designated location.
Returns: True if the movement was successful, False otherwise.', 'collect_resource': 'Action node: Collect a resource from the surrounding environment.
Returns: True if a resource was successfully collected, False otherwise.', 'build_structure': 'Action node: Use collected resources to build a structure at the current location.
Returns: True if the structure was successfully built, False otherwise.', 'is_resource_available': 'Condition node: Check if there is a resource available at the current location.
Returns: True if a resource is present, False otherwise.', 'is_structure_built': 'Condition node: Check if the structure has been fully built.
Returns: True if the structure is complete, False otherwise.'}
OUTPUT:
<BehaviorTree><Sequence><Condition>is_resource_available</Condition><Sequence><Action>collect_resource</Action><Action>build_structure</Action></Sequence></Sequence><Selector><Sequence><Condition>is_structure_built</Condition><Action>move_to_next_location</Action></Sequence><Action>wait_for_other_robots</Action></Selector></BehaviorTree>



###


USER COMMAND: generate behavior tree for a robot to perform a series of tasks in a specific order
INSTRUCTIONS: Use the provided behaviors to create a behavior tree in XML format for the given user command: {'detect_obstacle': 'Action node: Use sensors to detect any obstacles in the environment.
Returns: True if an obstacle is detected, False otherwise.', 'navigate_around_obstacle': 'Action node: Navigate the robot around the detected obstacle.
Returns: True if the navigation was successful, False otherwise.', 'pick_up_object': 'Action node: Pick up an object from the surrounding environment.
Returns: True if the object was successfully picked up, False otherwise.', 'place_object': 'Action node: Place the picked up object at a designated location.
Returns: True if the object was successfully placed, False otherwise.', 'is_object_detected': 'Condition node: Check if an object is detected in the environment.
Returns: True if an object is detected, False otherwise.', 'is_obstacle_detected': 'Condition node: Check if an obstacle is detected in the environment.
Returns: True if an obstacle is detected, False otherwise.'}
OUTPUT:
<BehaviorTree><Sequence><Condition>is_obstacle_detected</Condition><Sequence><Action>detect_obstacle</Action><Action>navigate_around_obstacle</Action></Sequence></Sequence><Selector><Sequence><Condition>is_object_detected</Condition><Sequence><Action>pick_up_object</Action><Action>place_object</Action></Sequence></Sequence><Selector><Action>wait_for


###


USER COMMAND: Navigate through a maze while avoiding obstacles and reaching the end goal.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: move_forward: Action node (same as before). avoid_obstacle: Action node - Executes an action to avoid detected obstacles. is_obstacle_detected: Condition node - Checks if any obstacles are detected in the vicinity. reach_goal: Action node - Moves towards the end goal. is_goal_reached: Condition node - Checks if the goal has been reached. wander: Action node - Performs a wandering action where the agent moves randomly in the environment.
OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>is_goal_reached</Condition><Action>move_forward</Action></Sequence><Sequence><Condition>is_obstacle_detected</Condition><Action>avoid_obstacle</Action></Sequence></Selector><Action>reach_goal</Action><Action>wander</Action></Sequence></BehaviorTree>



###


USER COMMAND: Follow a leader robot while maintaining a safe distance and avoiding obstacles.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: follow_leader: Action node - Move towards the leader robot. maintain_distance: Action node - Adjust the agent's position to maintain a safe distance from the leader robot. is_obstacle_detected: Condition node - Check if any obstacles are detected in the vicinity. avoid_obstacle: Action node - Executes an action to avoid detected obstacles.
OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Action>follow_leader</Action></Sequence><Sequence><Condition>is_obstacle_detected</Condition><Action>avoid_obstacle</Action></Sequence></Selector><Action>maintain_distance</Action></Sequence></BehaviorTree>



###


USER COMMAND: Coordinate with other robots to form a triangle shape.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: move_to_position: Action node - Move towards a designated position. form_triangle: Subtree node - Represents a behavior tree for coordinating with other robots to form a triangle shape. calculate_position: Action node - Calculates the agent's position in the triangle shape. maintain_distance: Action node - Adjust the agent's position to maintain a safe distance from other robots. is_triangle_formed: Condition node - Check if the triangle shape has been formed. is_obstacle_detected: Condition node - Check if any obstacles are detected in the vicinity. avoid_obstacle: Action node - Executes an action to avoid detected obstacles.
OUTPUT:
<BehaviorTree><Selector><Sequence><Action>move_to_position</Action><Action>calculate_position</Action></Sequence><Sequence><Condition>is_obstacle_detected</Condition><Action>avoid_obstacle</Action></Sequence></Selector><Action>form_triangle</Action><Action>maintain_distance</Action></BehaviorTree> 


###


USER COMMAND: generate behavior tree to 'Complete a complex task - gather resources, build a structure, and defend against enemy robots.'Output only the XML behavior tree without extra text.
INSTRUCTIONS: {'agent_movement_freeze': 'Action node: Freeze the agent’s movement, typically to indicate a stop in activity or end of tasks. Returns: Always returns True, indicating the action was executed.', 'avoid_obstacle': 'Action node: Execute an action to avoid detected obstacles. Returns: Always returns True, indicating the action was executed.', 'build_structure': 'Action node: Construct a structure using gathered resources. Returns: Always returns True, indicating the action was executed.', 'change_color_to_green': 'Action node: Change the agent’s color to green, usually indicating a successful operation or state. Returns: Always returns True, indicating the action was executed.', 'change_color_to_white': 'Action node: Change the agent’s color to white, usually indicating a neutral or initial state. Returns: Always returns True, indicating the action was executed.', 'continue_movement_agent': 'Action node: Continue the agent’s movement after it has been previously frozen. Returns: Always returns True, indicating the action was executed.', 'defend_against_enemies': 'Action node: Defend against enemy robots using a specific strategy. Returns: Always returns True, indicating the action was executed.', 'gather_resources': 'Action node: Collect resources from the environment. Returns: Always returns True, indicating the action was executed.', 'is_agent_in_nest': 'Condition node: Determine if the agent is in the nest. Returns: True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition node: Determine if the agent has formed a line with a reference point at the center of the window. Returns: True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition node: Determine if any obstacles are detected in the vicinity of the agent. Returns: True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition node: Check if the path ahead of the agent is clear of obstacles. Returns: True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Action node: Check if the target is within a detectable distance from the agent’s position. Returns: True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition node: Check if the agent has reached the target. Returns: True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action node: Signal that the agent has completed its designated task by freezing movement and updating state. Returns: Always returns True, indicating that the task completion action was executed.', 'wander': 'Action node: Perform a wandering action where the agent moves randomly within the environment. Returns: Always returns True, indicating the action was executed.'}
OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>is_target_detected</Condition> <Action>change_color_to_green</Action> <Sequence> <Condition>is_obstacle_detected</Condition> <Action>avoid_obstacle</Action> </Sequence> <Action>gather_resources</Action> <Action>build_structure</Action> <Action>task_completed</Action> </Sequence> <Sequence> <Condition>is_path_clear</Condition> <Action>wander</Action> </Sequence> </Selector> <Sequence> <Condition>is_agent_in_nest</Condition> <Action>change_color_to_white</Action> <Action>continue_movement_agent</Action> <Action>defend_against_enemies</Action> </Sequence> </Sequence> </BehaviorTree>

###



USER COMMAND: while moving forward, constantly check for low battery and return to charging station if battery is low.
INSTRUCTIONS: Use only the following behaviors to generate XML Behavior tree based on the user command: {move_forward: 'Action node: Move the agent forward.
Returns: Always returns True, indicating the action was executed.', check_battery: 'Condition node: Check if the battery level is below a certain threshold.
Returns: True if battery is low, otherwise False.', return_to_station: 'Action node: Return to charging station.
Returns: Always returns True, indicating the action was executed.'} to construct a behavior tree in XML format to the following command.
OUTPUT:
<BehaviorTree><Sequence><Action>move_forward</Action><Selector><Sequence><Condition>check_battery</Condition><Action>return_to_station</Action><Action>move_forward</Action></Sequence><Action>move_forward</Action></Selector></Sequence>
</BehaviorTree>

###

USER COMMAND: follow designated leader robot, but if leader is obstructed, switch to following another robot in the group.
INSTRUCTIONS: Use only the following behaviors to generate XML Behavior tree based on the user command: {follow_leader: 'Action node: Follow the designated leader robot.
Returns: Always returns True, indicating the action was executed.', check_obstruction: 'Condition node: Check if the designated leader is obstructed.
Returns: True if leader is obstructed, otherwise False.', reassign_leader: 'Action node: Reassign leader to another robot in the group.
Returns: Always returns True, indicating the action was executed.'} to construct a behavior tree in XML format to the following command.
OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>check_obstruction</Condition><Action>reassign_leader</Action><Action>follow_leader</Action></Sequence><Action>follow_leader</Action></Selector>
</BehaviorTree>

###

USER COMMAND: perform a coordinated search and rescue mission with other robots in the swarm.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: take_off: Action node - Initiate the search mission by taking off. search_area: Action node - Search the designated area for the target. detect_target: Condition node - Check if the target has been found. retrieve_target: Action node - Retrieve the target once found. return_to_base: Action node - Return to base with the retrieved target.
OUTPUT:
<BehaviorTree><Selector><Selector><Action>take_off</Action><Sequence><Condition>detect_target</Condition><Action>retrieve_target</Action><Action>return_to_base</Action></Sequence></Selector><Sequence><Action>search_area</Action><Action>search_area</Action></Sequence></Selector></BehaviorTree>

###

USER COMMAND: if oil spill is detected, deploy cleaning mechanism and remain in that location until spill is completely cleaned.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: detect_oil_spill: Condition node - Check if there is an oil spill in the designated area. deploy_mechanism: Action node - Deploy the cleaning mechanism. clean_spill: Action node - Continue cleaning the spill. check_cleanliness: Condition node - Check if the spill has been completely cleaned. stay_in_place: Action node - Stay in the current location until the spill is cleaned completely.
OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>detect_oil_spill</Condition><Action>deploy_mechanism</Action><Selector><Sequence><Condition>check_cleanliness</Condition><Action>stay_in_place</Action><Action>clean_spill</Action></Sequence><Action>clean_spill</Action></Selector></Sequence><Action>stay_in_place</Action></Selector></BehaviorTree>

###

USER COMMAND: perform a coordinated mapping mission with other robots in the swarm.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: take_off: Action node - Initiate the mapping mission by taking off. map_area: Action node - Map the designated area. synchronize_maps: Action node - Synchronize the maps from all robots in the group. return_to_base: Action node - Return to base with the completed map.
OUTPUT:
<BehaviorTree><Sequence><Action>take_off</Action><Selector><Sequence><Condition>detect_target</Condition><Action>map_area</Action><Action>synchronize_maps</Action><Action>return_to_base</Action></Sequence><Action>map_area</Action></Selector></Sequence></BehaviorTree>

###

USER COMMAND: follow designated route, but if route is blocked, find an alternative route.
INSTRUCTIONS: Use only the following behaviors to generate XML Behavior tree based on the user command: {follow_route: 'Action node: Follow the designated route.
Returns: Always returns True, indicating the action was executed.', check_blockage: 'Condition node: Check if the designated route is blocked.
Returns: True if route is blocked, otherwise False.', find_alternative_route: 'Action node: Find an alternate route.
Returns: Always returns True, indicating the action was executed.'} to construct a behavior tree in XML format to the following command.
OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>check_blockage</Condition><Action>find_alternative_route</Action><Action>follow_route</Action></Sequence><Action>follow_route</Action></Selector>
</BehaviorTree>

###

USER COMMAND: while exploring, constantly communicate with other robots in the swarm to share discovered information.
INSTRUCTIONS: Use only the following behaviors to generate XML Behavior tree based on the user command: {explore: 'Action node: Explore the surrounding area.
Returns: Always returns True, indicating the action was executed.', communicate: 'Action node: Communicate with other robots to share information.
Returns: Always returns True, indicating the action was executed.'} to construct a behavior tree in XML format to the following command.
OUTPUT:
<BehaviorTree><Sequence><Action>explore</Action><Action>communicate</Action></Sequence>
</BehaviorTree>

###

USER COMMAND: perform a coordinated search and destroy mission with other robots in the swarm.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: take_off: Action node - Initiate the search mission by taking off. search_area: Action node - Search the designated area for the target. detect_target: Condition node - Check if the target has been found. destroy_target: Action node - Destroy the target once found. return_to_base: Action node - Return to base with the completed mission.
OUTPUT:
<BehaviorTree><Sequence><Action>take_off</Action><Selector><Sequence><Condition>detect_target</Condition><Action>destroy_target</Action><Action>return_to_base</Action></Sequence><Action>search_area</Action></Selector></Sequence></BehaviorTree>

###

USER COMMAND: if communication with other robots is lost, search for and reestablish communication.
INSTRUCTIONS: Use only the following behaviors to generate XML Behavior tree based on the user command: {search: 'Action node: Search for the other robots.
Returns: Always returns True, indicating the action was executed.', reestablish_communication: 'Action node: Retrieve and reestablish communication with the other robots.
Returns: Always returns True, indicating the action was executed.'} to construct a behavior tree in XML format to the following command.
OUTPUT:
<BehaviorTree><Sequence><Action>search</Action><Action>reestablish_communication</Action></Sequence>
</BehaviorTree>

###

USER COMMAND: constantly monitor for any changes in the environment, adjust behaviors accordingly.
INSTRUCTIONS: Use only the following behaviors to generate XML Behavior tree based on the user command: {monitor: 'Action node: Monitor the environment for changes.
Returns: Always returns True, indicating the action was executed.', adjust_behavior: 'Action node: Adjust behaviors based on changes in the environment.
Returns: Always returns True, indicating the action was executed.'} to construct a behavior tree in XML format to the following command.
OUTPUT:
<BehaviorTree><Sequence><Action>monitor</Action><Action>adjust_behavior</Action></Sequence>
</BehaviorTree>

###

USER COMMAND: perform a coordinated delivery mission with other robots in the swarm.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: take_off: Action node - Initiate the delivery mission by taking off. pick_up_package: Action node - Pick up the package from the designated location. deliver_package: Action node - Deliver the package to the designated location. synchronize_delivery: Action node - Synchronize with other robots to ensure successful delivery. return_to_base: Action node - Return to base with completed mission.
OUTPUT:
<BehaviorTree><Sequence><Action>take_off</Action><Selector><Sequence><Condition>detect_package</Condition><Action>pick_up_package</Action><Action>deliver_package</Action><Action>synchronize_delivery</Action><Action>return_to_base</Action></Sequence><Action>deliver_package</Action></Selector></Sequence></BehaviorTree>

###

USER COMMAND: while monitoring crops, use fertilization and pest control behaviors to maintain healthy plants.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: check_crops: Condition node - Check the health of the crops. fertilize: Action node - Spread fertilizer over the crops. pest_control: Action node - Use pest control methods to protect the crops. crop_monitor: Action node - Continuously monitor the health of the crops.
OUTPUT:
<BehaviorTree><Sequence><Action>crop_monitor</Action><Selector><Sequence><Condition>check_crops</Condition><Action>fertilize</Action><Action>crop_monitor</Action></Sequence><Action>pest_control</Action></Selector></Sequence></BehaviorTree>

###

USER COMMAND: utilize formation behaviors to maintain a specific shape while moving.
INSTRUCTIONS: Use only the following behaviors to generate XML Behavior tree based on the user command: {maintain_formation: 'Action node: Maintain the specified formation while moving.
Returns: Always returns True, indicating the action was executed.', adjust_formation: 'Action node: Adjust the formation based on
Returns: Always returns True, indicating the action was executed.'} to construct a behavior tree in XML format to the following command.
OUTPUT:
<BehaviorTree><Sequence><Action>maintain_formation</Action><Action>adjust_formation</Action></Sequence>
</BehaviorTree>

###

USER COMMAND: if temperature drops, deploy heaters to ensure the survival of plants.
INSTRUCTIONS: Use only the following behaviors to generate XML Behavior tree based on the user command: {check_temperature: 'Condition node: Check the temperature.
Returns: True if temperature is below threshold, otherwise False.', deploy_heaters: 'Action node: Deploy heaters to maintain a suitable temperature.
Returns: Always returns True, indicating the action was executed.'} to construct a behavior tree in XML format to the following command.
OUTPUT:
<BehaviorTree><Sequence><Condition>check_temperature</Condition><Action>deploy_heaters</Action></Sequence>
</BehaviorTree>

###

USER COMMAND: continuously scan for hazardous materials and dispose of them in designated containers.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: scan_environment: Action node - Scan the environment for hazardous materials. detect_hazard: Condition node - Check if a hazardous material is detected. dispose_hazard: Action node - Dispose of the hazardous material in a designated container. repeat_scan: Action node - Continuously scan the environment.
OUTPUT:
<BehaviorTree><Sequence><Action>scan_environment</Action><Selector><Sequence><Condition>detect_hazard</Condition><Action>dispose_hazard</Action><Action>repeat_scan</Action></Sequence><Action>repeat_scan</Action></Selector></Sequence></BehaviorTree>

###

USER COMMAND: work together with other robots to construct a path or bridge for safe passage.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: start_project: Action node - Begin the project of constructing a path or bridge. gather_materials: Action node - Collect necessary materials from the surrounding environment. construct: Action node - Build the path or bridge with the materials. check_safety: Condition node - Check the safety of the constructed structure. continue_project: Action node - Continue working together with other robots to complete the project.
OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>check_safety</Condition><Action>start_project</Action><Action>gather_materials</Action><Action>construct</Action><Action>continue_project</Action></Sequence><Action>continue_project</Action></Selector></BehaviorTree>

###

USER COMMAND: Explore the environment while avoiding obstacles. If an obstacle is detected, navigate around it.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: explore_environment: Action node (same as before). detect_obstacles: Condition node - Checks if any obstacles are detected in the environment. navigate_around_obstacle: Action node - Makes the agent navigate around the detected obstacle.
OUTPUT:
<BehaviorTree><Sequence><Action>explore_environment</Action></Sequence><Sequence><Condition>detect_obstacles</Condition><Action>navigate_around_obstacle</Action></Sequence></BehaviorTree>

###

USER COMMAND: Gather resources from multiple locations and return them to a designated area.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: gather_resources: Subtree node - Represents a behavior tree for gathering resources from multiple locations. return_resources: Action node - Makes the agent return to a designated area with the collected resources.
OUTPUT:
<BehaviorTree><Sequence><Action>gather_resources</Action><Action>return_resources</Action></Sequence></BehaviorTree>

###

USER COMMAND: Attack enemy robots in the vicinity. If outnumbered, retreat and regroup with allies.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: attack_enemies: Action node - Makes the agent engage in combat with enemy robots in the vicinity. outnumbered: Condition node - Checks if the agent is outnumbered by enemy robots. regroup_with_allies: Action node - Makes the agent retreat and regroup with allied robots.
OUTPUT:
<BehaviorTree><Sequence><Action>attack_enemies</Action><Selector><Sequence><Condition>outnumbered</Condition><Action>regroup_with_allies</Action></Sequence></Selector></Sequence></BehaviorTree>

###

USER COMMAND: Search for a specific target in the environment while watching out for threats. If target is found, approach and attack.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: search_target: Subtree node - Represents a behavior tree for searching the environment for a specific target. watch_for_threats: Action node - Makes the agent constantly scan for potential threats. approach_target: Action node - Makes the agent approach the identified target. attack_target: Action node - Makes the agent engage in combat with the target.
OUTPUT:
<BehaviorTree><Sequence><Action>search_target</Action><Action>watch_for_threats</Action><Selector><Sequence><Condition>target_found</Condition><Action>approach_target</Action><Action>attack_target</Action></Sequence></Selector></Sequence></BehaviorTree>

###

USER COMMAND: Retrieve a lost object from a designated location. If unable to find it, ask for assistance from nearby robots.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: retrieve_object: Action node - Makes the agent search for and retrieve a lost object from the designated location. unable_to_find_object: Condition node - Checks if the agent is unable to find the object. ask_for_assistance: Action node - Makes the agent communicate with nearby robots to request assistance.
OUTPUT:
<BehaviorTree><Sequence><Action>retrieve_object</Action><Selector><Sequence><Condition>unable_to_find_object</Condition><Action>ask_for_assistance</Action></Sequence></Selector></Sequence></BehaviorTree>

###

USER COMMAND: Survey the environment and gather data for map creation. If obstructed, scan for alternative routes.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: survey_environment: Action node - Makes the agent move around and gather data for map creation. obstructed: Condition node - Checks if the agent is facing any obstructions. scan_for_alternative_routes: Action node - Makes the agent scan for alternative routes to continue surveying.
OUTPUT:
<BehaviorTree><Sequence><Action>survey_environment</Action></Sequence><Sequence><Condition>obstructed</Condition><Action>scan_for_alternative_routes</Action></Sequence></BehaviorTree>

###

USER COMMAND: Defend the designated base from enemy attacks. If outnumbered, retreat and call for reinforcements.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: defend_base: Action node - Makes the agent engage in combat with enemy robots attacking the designated base. outnumbered: Condition node - Checks if the agent is outnumbered by enemy robots. retreat: Action node - Makes the agent retreat to a safer location. call_for_reinforcements: Action node - Makes the agent request reinforcements from nearby robots.
OUTPUT:
<BehaviorTree><Sequence><Action>defend_base</Action><Selector><Sequence><Condition>outnumbered</Condition><Action>retreat</Action><Action>call_for_reinforcements</Action></Sequence></Selector></Sequence></BehaviorTree>

###

USER COMMAND: Transport a heavy object to a specific location. If the object is dropped, pick it up and continue moving.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: transport_object: Action node - Makes the agent move while carrying a heavy object to a specific location. object_dropped: Condition node - Checks if the agent has dropped the object. pick_up_object: Action node - Makes the agent pick up the dropped object and continue moving with it.
OUTPUT:
<BehaviorTree><Sequence><Action>transport_object</Action><Sequence><Condition>object_dropped</Condition><Action>pick_up_object</Action><Action>transport_object</Action></Sequence></Sequence></BehaviorTree>

###

USER COMMAND: Work together with other robots to lift and move a large obstacle.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: lift_obstacle: Action node - Makes the agent gather with other robots to lift and move a large obstacle. check_cooperation: Action node - Makes the agent communicate with other robots to ensure cooperation in lifting the obstacle. move_to_destinations: Subtree node - Represents a behavior tree for moving the obstacle to the designated destination.
OUTPUT:
<BehaviorTree><Sequence><Action>lift_obstacle</Action><Action>check_cooperation</Action><Action>move_to_destinations</Action></Sequence></BehaviorTree>

###

USER COMMAND: Search for and rescue trapped robots in a disaster-stricken area.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: search_area: Action node - Makes the agent search the disaster-stricken area for any trapped robots. rescue_robot: Action node - Makes the agent use the appropriate tools to rescue a trapped robot. check_rescue_success: Condition node - Checks if the rescue was successful. move_to_next_location: Action node - Makes the agent move to the next designated location to continue the search and rescue mission.
OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Action>search_area</Action><Sequence><Condition>robot_found</Condition><Action>rescue_robot</Action><Selector><Sequence><Condition>check_rescue_success</Condition><Action>move_to_next_location</Action></Sequence></Selector></Sequence></Sequence></Selector></Sequence></BehaviorTree>

###

USER COMMAND: Navigate through a maze and reach the end point.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: navigate_maze: Action node - Makes the agent navigate through the maze using its sensors and predefined pathfinding algorithm. check_finished: Condition node - Checks if the agent has reached the end point. move_to_next_step: Action node - Makes the agent move to the next step according to the predefined path.
OUTPUT:
<BehaviorTree><Sequence><Action>navigate_maze</Action><Sequence><Condition>not_finished</Condition><Action>move_to_next_step</Action></Sequence></Sequence></BehaviorTree>

###

USER COMMAND: Coordinated movement with other robots to form a specific shape or figure.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: move_to_designated_locations: Subtree node - Represents a behavior tree for each agent to move to the designated location for forming the shape. communicate_and_align: Action node - Makes the agent communicate with other robots to align themselves into the specified shape.
OUTPUT:
<BehaviorTree><Sequence><Action>move_to_designated_locations</Action><Selector><Sequence><Condition>reached_designated_locations</Condition><Action>communicate_and_align</Action></Sequence></Selector></Sequence></BehaviorTree>

###

USER COMMAND: Collaborate with other robots to build a structure using provided materials.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: search_for_materials: Action node - Makes the agent search and gather the required materials for building the structure. build_structure: Action node - Makes the agent use the gathered materials to build the desired structure. check_completion: Condition node - Checks if the structure has been built successfully.
OUTPUT:
<BehaviorTree><Selector><Sequence><Action>search_for_materials</Action><Sequence><Condition>has_materials</Condition><Action>build_structure</Action></Sequence></Selector></Sequence><Selector><Sequence><Condition>check_completion</Condition><Action>celebrate</Action></Sequence></Selector></BehaviorTree>

###

USER COMMAND: Search for and collect valuable resources in a designated area.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: search_area: Action node - Makes the agent search a designated area for valuable resources. collect_resource: Action node - Makes the agent collect the valuable resource. check_collect_success: Condition node - Checks if the resource was successfully collected. move_to_next_location: Action node - Makes the agent move to the next designated location to continue the resource collection mission.
OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Action>search_area</Action><Sequence><Condition>resource_found</Condition><Action>collect_resource</Action><Selector><Sequence><Condition>check_collect_success</Condition><Action>move_to_next_location</Action></Sequence></Selector></Sequence></Sequence></Selector></Sequence></BehaviorTree>

###

USER COMMAND: Cooperate with other robots to clear debris from a disaster-stricken area.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: clear_debris: Action node - Makes the agent use its tools and sensors to clear debris from the designated area. notify_progress: Action node - Makes the agent communicate with other robots to inform them of the progress made. check_completion: Condition node - Checks if all debris has been cleared from the designated area.
OUTPUT:
<BehaviorTree><Sequence><Action>clear_debris</Action><Sequence><Condition>not_finished</Condition><Action>notify_progress</Action></Sequence><Selector><Sequence><Action>check_completion</Action><Action>celebrate</Action></Sequence></Selector></BehaviorTree>

###

USER COMMAND: Navigate through a hazardous environment and reach a safe zone.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: navigate_hazardous_area: Action node - Makes the agent navigate through the hazardous environment while avoiding any dangers. check_safe: Condition node - Checks if the agent has reached a safe zone. move_to_next_step: Action node - Makes the agent move to the next step according to the predefined path.
OUTPUT:
<BehaviorTree><Sequence><Action>navigate_hazardous_area</Action><Sequence><Condition>not_safe</Condition><Action>move_to_next_step</Action></Sequence><Selector><Sequence><Condition>check_safe</Condition><Action>celebrate</Action></Sequence></Selector></BehaviorTree>

###

USER COMMAND: Carry out a designated task while communicating and coordinating with other robots in the vicinity.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: carry_out_task: Action node - Makes the agent carry out the designated task while using its sensors and tools. communicate: Action node - Enables the agent to communicate with other robots in the vicinity. coordinate: Action node - Makes the agent coordinate its actions with other robots to efficiently complete the task.
OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Action>carry_out_task</Action><Action>communicate</Action><Action>coordinate</Action></Sequence></Selector></Sequence></BehaviorTree>4.

###

USER COMMAND: Collect resources from different locations and deposit them at a designated area.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: collect_resources: Action node - Makes the agent collect resources from the environment. deposit_resources: Action node - Makes the agent deposit resources at a designated area. check_designated_area: Condition node - Checks if the agent is at the designated deposit area.
OUTPUT:
<BehaviorTree><Selector><Sequence><Action>check_designated_area</Action><Action>deposit_resources</Action></Sequence><Action>collect_resources</Action></Selector></BehaviorTree>

###

USER COMMAND: If a member of the swarm gets stuck, activate a rescue protocol to assist them.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: check_swarm_status: Condition node - Checks if any member of the swarm is stuck. activate_rescue_protocol: Action node - Triggers a coordinated rescue protocol to assist the stuck member.
OUTPUT:
<BehaviorTree><Sequence><Condition>check_swarm_status</Condition><Action>activate_rescue_protocol</Action></Sequence></BehaviorTree>

###

USER COMMAND: Prioritize attacking enemies that pose the biggest threat first.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: prioritze_targets: Action node - Makes the agent prioritize targets based on a set of rules (e.g. threat level, proximity). attack_target: Action node - Makes the agent attack the prioritized target.
OUTPUT:
<BehaviorTree><Sequence><Action>prioritize_targets</Action><Action>attack_target</Action></Sequence></BehaviorTree>

###

USER COMMAND: Avoid obstacles while navigating to a specific location.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: avoid_obstacles: Action node - Makes the agent avoid obstacles while moving to a target location. go_to_location: Action node (same as before). check_for_obstacles: Condition node - Checks for any obstacles in the agent's path.
OUTPUT:
<BehaviorTree><Selector><Condition>check_for_obstacles</Condition><Sequence><Action>avoid_obstacles</Action><Action>go_to_location</Action></Sequence></Selector></BehaviorTree>

###

USER COMMAND: Respond to distress calls from other agents in the swarm.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: listen_for_distress_calls: Condition node - Checks for any incoming distress calls from other agents. respond_to_distress_call: Action node - Triggers a coordinated response to assist the agent in distress.
OUTPUT:
<BehaviorTree><Sequence><Condition>listen_for_distress_calls</Condition><Action>respond_to_distress_call</Action></Sequence></BehaviorTree>

###

USER COMMAND: Explore the environment while maintaining a safe distance from known threats.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: explore_area: Action node - Makes the agent explore the environment. maintain_safe_distance: Action node - Makes the agent maintain a safe distance from known threats. check_threats: Condition node - Checks for known threats in the environment.
OUTPUT:
<BehaviorTree><Selector><Sequence><Action>check_threats</Action><Action>maintain_safe_distance</Action></Sequence><Action>explore_area</Action></Selector></BehaviorTree>

###

USER COMMAND: Retrieve a lost teammate and bring them back to the group.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: find_lost_teammate: Action node - Makes the agent search for the lost teammate. retrieve_teammate: Action node - Makes the agent retrieve the lost teammate and bring them back to the group. check_group_status: Condition node - Checks if all members of the group are accounted for.
OUTPUT:
<BehaviorTree><Sequence><Selector><Condition>check_group_status</Condition><Sequence><Action>find_lost_teammate</Action><Action>retrieve_teammate</Action></Sequence></Selector></Sequence></BehaviorTree>

###

USER COMMAND: Avoid friendly fire while attacking enemies.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: avoid_friendlies: Action node - Makes the agent avoid friendly units while attacking enemies. attack_target: Action node - Makes the agent attack the specified target. check_friendlies_in_range: Condition node - Checks for friendly units in the agent's attack range.
OUTPUT:
<BehaviorTree><Selector><Condition>check_friendlies_in_range</Condition><Sequence><Action>avoid_friendlies</Action><Action>attack_target</Action></Sequence></Selector></BehaviorTree>

###

USER COMMAND: Coordinate with other agents to form a defensive formation.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: engage_in_formation: Action node - Makes the agent engage in a coordinated defensive formation with other agents. check_team_status: Condition node - Checks if all members of the team are in formation.
OUTPUT:
<BehaviorTree><Sequence><Condition>check_team_status</Condition><Action>engage_in_formation</Action></Sequence></BehaviorTree>

###

USER COMMAND: Prioritize protecting the injured or weaker members of the group.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: prioritize_targets: Action node - Makes the agent prioritize targets based on a set of rules (e.g. proximity, threat level). protect_target: Action node - Makes the agent protect the prioritized target (e.g. by shielding them). check_team_member_status: Condition node - Checks the status of team members (e.g. health, strength).
OUTPUT:
<BehaviorTree><Sequence><Action>check_team_member_status</Action><Selector><Action>protect_target</Action><Sequence><Action>prioritize_targets</Action><Action>protect_target</Action></Sequence></Selector></Sequence></BehaviorTree>

###

USER COMMAND: Use specialized behaviors to navigate through complex terrains.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: navigate_complex_terrains: Action node - Makes the agent use specialized behaviors and strategies to navigate through complex terrains (e.g. climbing, jumping, crawling). check_terrain_difficulty: Condition node - Checks for the difficulty level of the terrain.
OUTPUT:
<BehaviorTree><Sequence><Action>check_terrain_difficulty</Action><Selector><Condition>check_team_status</Condition><Sequence><Action>navigate_complex_terrains</Action><Action>take_action_accordingly</Action></Sequence></Selector></Sequence></BehaviorTree>

###

USER COMMAND: Perform reconnaissance and gather information about enemy positions.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: perform_reconnaissance: Action node - Makes the agent use specialized behaviors and strategies to gather information about enemy positions (e.g. stealth, observation). report_information: Action node - Makes the agent report the gathered information to the group leader. check_for_actions_to_take: Condition node - Checks for any specific actions to be taken based on the gathered information.
OUTPUT:
<BehaviorTree><Selector><Sequence><Action>perform_reconnaissance</Action><Action>report_information</Action><Condition>check_for_actions_to_take</Condition></Sequence><Action>carry_out_task_accordingly</Action></Selector></BehaviorTree>

###

USER COMMAND: Safeguard valuable resources and prevent theft by enemies.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: safeguard_resources: Action node - Makes the agent use specialized behaviors and strategies to safeguard valuable resources (e.g. patrolling, setting traps). check_for_enemy_threats: Condition node - Checks for any enemy threats to the resources.
OUTPUT:
<BehaviorTree><Sequence><Action>check_for_enemy_threats</Action><Selector><Condition>is_threat_detected</Condition><Sequence><Action>safeguard_resources</Action><Action>take_appropriate_action</Action></Sequence></Selector><Action>continue_safeguarding</Action></Sequence></BehaviorTree>

###

USER COMMAND: Communicate with other agents in the swarm using a designated system.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: communicate_with_team: Action node - Makes the agent use designated communication behaviors and strategies to communicate with other agents in the swarm. check_for_new_information: Condition node - Checks for any new information received from other agents. update_strategy_accordingly: Action node - Updates the agent's behavior and strategy based on the received information.
OUTPUT:
<BehaviorTree><Selector><Sequence><Action>check_for_new_information</Action><Action>update_strategy_accordingly</Action></Sequence><Action>communicate_with_team</Action></MeetByBehaviorTree>

###

USER COMMAND: Maneuver through tight spaces to reach a target location.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: navigate_through_tight_spaces: Action node - Makes the agent use specialized behaviors and strategies to maneuver through tight spaces (e.g. crawling, squeezing). check_for_obstacles: Condition node - Checks for any obstacles in the tight space.
OUTPUT:
<BehaviorTree><Selector><Condition>check_for_obstacles</Condition><Sequence><Action>navigate_through_tight_spaces</Action><Action>reach_target_location</Action></Sequence></Selector></BehaviorTree>

###

USER COMMAND: Provide cover fire while other agents evacuate an injured teammate.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: provide_cover_fire: Action node - Makes the agent provide cover fire to distract enemies and protect other agents during an evacuation. check_for_teammate_needing_evac: Condition node - Checks for a teammate in need of evacuation. assist_teammate: Action node - Helps the injured teammate evacuate safely.
OUTPUT:
<BehaviorTree><Sequence><Condition>check_for_teammate_needing_evac</Condition><Selector><Action>provide_cover_fire</Action><Sequence><Action>assist_teammate</Action><Action>go_to_safety</Action></Sequence></Selector></Sequence></BehaviorTree>

###

USER COMMAND: Coordinate with other swarm agents to build a structure.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: coordinate_for_construction: Action node - Makes the agent coordinate with other agents to build a structure, assigning tasks and ensuring efficient completion. check_for_available_resources: Condition node - Checks for available resources for construction. collect_resources: Action node - Makes the agent collect resources if needed.
OUTPUT:
<BehaviorTree><Sequence><Action>check_for_available_resources</Action><Selector><Condition>resources_available</Condition><Sequence><Action>coordinate_for_construction</Action><Action>assign_tasks</Action><Action>collect_resources</Action></Sequence></Selector></Sequence></BehaviorTree>

###

USER COMMAND: Navigate through an obstacle course using collaborative effort.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: move_forward: Action node - Makes the agent move forward. turn_left: Action node - Makes the agent turn left. turn_right: Action node - Makes the agent turn right. avoid_obstacles: Condition node - Checks if there are any obstacles ahead. communicate_position: Action node - Allows agents to communicate their current position to each other for coordination.
OUTPUT:
<BehaviorTree><Sequence><Action>move_forward</Action><Condition>avoid_obstacles</Condition><Sequence><Action>communicate_position</Action><Selector><Action>turn_left</Action><Action>turn_right</Action></Selector></Sequence></Sequence></BehaviorTree>

###

USER COMMAND: Conduct a coordinated search and rescue mission in a disaster area.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: search_area: Subtree node - Represents a behavior tree for searching a specific area. check_victims: Action node - Checks for any victims in the vicinity. perform_rescue: Action node - Performs the necessary rescue actions. communicate_rescue_status: Action node - Allows agents to communicate the status of their rescue efforts to each other.
OUTPUT:
<BehaviorTree><Sequence><Action>search_area</Action><Sequence><Condition>check_victims</Condition><Condition>found_victim</Condition><Action>perform_rescue</Action></Sequence><Sequence><Action>communicate_rescue_status</Action><Selector><Action>move_to_next_area</Action><Action>continue_search</Action></Selector></Sequence></Sequence></BehaviorTree>

###

USER COMMAND: Distribute tasks evenly among a swarm of robots to complete before time runs out.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: find_task: Action node - Makes the agent find an available task. task_completed: Action node - Marks a task as completed. remaining_tasks: Condition node - Checks if there are still tasks to be completed.
OUTPUT:
<BehaviorTree><Sequence><Condition>remaining_tasks</Condition><Sequence><Action>find_task</Action><Action>task_completed</Action></Sequence></Sequence></BehaviorTree>

###

USER COMMAND: Use swarm of robots to build a structure using specific materials.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: find_material: Action node - Makes the agent find a specific material. bring_material: Action node - Brings the material to the construction site. build_structure: Action node - Constructs the structure. structure_complete: Condition node - Checks if the structure is complete.
OUTPUT:
<BehaviorTree><Sequence><Condition>structure_complete</Condition><Sequence><Action>find_material</Action><Action>bring_material</Action><Action>build_structure</Action></Sequence></Sequence></BehaviorTree>

###

USER COMMAND:  'Harvest ripe crops and deliver to designated storage area.'
INSTRUCTIONS: Use only the following behaviors to generate XML Behavior tree based on the user command: {harvest_crops: 'Action node: Harvest ripe crops from the field.
Returns: Always returns True, indicating the action was executed.', is_storage_area_designated: 'Condition node: Check if a storage area has been designated.
Returns: True if a storage area has been designated, otherwise False.', deliver_to_storage_area: 'Action node: Deliver harvested crops to the designated storage area.
Returns: Always returns True, indicating the action was executed.'} to construct a behavior tree in XML format to the following command.
OUTPUT:
<BehaviorTree><Sequence><Action>harvest_crops</Action><Selector><Sequence><Condition>is_storage_area_designated</Condition><Action>deliver_to_storage_area</Action></Sequence></Selector></Sequence>
</BehaviorTree>

###

USER COMMAND: Collect data from all sensors and send to main server for analysis.
INSTRUCTIONS: Use only the following behaviors to generate XML Behavior tree based on the user command: {collect_sensor_data: 'Action node: Collect data from all sensors.
Returns: Always returns True, indicating the action was executed.', send_data_to_server: 'Action node: Send collected data to the main server for analysis.
Returns: Always returns True, indicating the action was executed.'} to construct a behavior tree in XML format to the following command.
OUTPUT:
<BehaviorTree><Sequence><Action>collect_sensor_data</Action><Action>send_data_to_server</Action></Sequence>
</BehaviorTree>

###

USER COMMAND: Navigate to a specific GPS location, avoid obstacles, and engage target at location.
INSTRUCTIONS: Use only the following behaviors to generate XML Behavior tree based on the user command: {navigate_to_location: 'Action node: Navigate to a specific GPS location.
Returns: Always returns True, indicating the action was executed.', is_obstacle_present: 'Condition node: Check if an obstacle is present in the path.
Returns: True if an obstacle is present, otherwise False.', avoid_obstacle: 'Action node: Move around the obstacle.
Returns: Always returns True, indicating the action was executed.', engage_target: 'Action node: Engage the target at the specified location.
Returns: Always returns True, indicating the action was executed.'} to construct a behavior tree in XML format to the following command.
OUTPUT:
<BehaviorTree><Sequence><Action>navigate_to_location</Action><Selector><Sequence><Condition>is_obstacle_present</Condition><Action>avoid_obstacle</Action></Sequence></Selector><Action>engage_target</Action></Sequence>
</BehaviorTree>

###

USER COMMAND: Patrol designated area and report any suspicious activity.
INSTRUCTIONS: Use only the following behaviors to generate XML Behavior tree based on the user command: {patrol_area: 'Action node: Patrol the designated area.
Returns: Always returns True, indicating the action was executed.', is_suspicious_activity: 'Condition node: Check if suspicious activity is detected.
Returns: True if suspicious activity is detected, otherwise False.', report_activity: 'Action node: Report any suspicious activity to the main server.
Returns: Always returns True, indicating the action was executed.'} to construct a behavior tree in XML format to the following command.
OUTPUT:
<BehaviorTree><Sequence><Action>patrol_area</Action><Selector><Sequence><Condition>is_suspicious_activity</Condition><Action>report_activity</Action></Sequence></Selector></Sequence>
</BehaviorTree>

###

USER COMMAND: Inspect infrastructure for damages and perform necessary repairs.
INSTRUCTIONS: Use only the following behaviors to generate XML Behavior tree based on the user command: {inspect_infrastructure: 'Action node: Inspect the infrastructure for any damages.
Returns: Always returns True, indicating the action was executed.', is_damage_present: 'Condition node: Check if any damage is present in the infrastructure.
Returns: True if damage is present, otherwise False.', repair_damage: 'Action node: Perform necessary repairs to the damaged infrastructure.
Returns: Always returns True, indicating the action was executed.'} to construct a behavior tree in XML format to the following command.
OUTPUT:
<BehaviorTree><Sequence><Action>inspect_infrastructure</Action><Selector><Sequence><Condition>is_damage_present</Condition><Action>repair_damage</Action></Sequence></Selector></Sequence>
</BehaviorTree>

###

USER COMMAND: Retrieve and transport medical supplies to designated locations for distribution.
INSTRUCTIONS: Use only the following behaviors to generate XML Behavior tree based on the user command: {retrieve_supplies: 'Action node: Retrieve medical supplies from designated location.
Returns: Always returns True, indicating the action was executed.', transport_supplies: 'Action node: Transport the supplies to designated distribution locations.
Returns: Always returns True, indicating the action was executed.'} to construct a behavior tree in XML format to the following command.
OUTPUT:
<BehaviorTree><Sequence><Action>retrieve_supplies</Action><Action>transport_supplies</Action></Sequence>
</BehaviorTree>

###

USER COMMAND: Search and rescue mission to find and retrieve lost individuals.
INSTRUCTIONS: Use only the following behaviors to generate XML Behavior tree based on the user command: {search_area: 'Action node: Begin searching the designated search area.
Returns: Always returns True, indicating the action was executed.', is_individual_found: 'Condition node: Check if an individual is found in the search area.
Returns: True if an individual is found, otherwise False.', retrieve_individual: 'Action node: Retrieve the individual and return them to safety.
Returns: Always returns True, indicating the action was executed.'} to construct a behavior tree in XML format to the following command.
OUTPUT:
<BehaviorTree><Sequence><Action>search_area</Action><Selector><Sequence><Condition>is_individual_found</Condition><Action>retrieve_individual</Action></Sequence></Selector></Sequence>
</BehaviorTree>

###

USER COMMAND: Investigate reported anomaly and collect data for analysis.
INSTRUCTIONS: Use only the following behaviors to generate XML Behavior tree based on the user command: {investigate_anomaly: 'Action node: Investigate the reported anomaly and collect any necessary data.
Returns: Always returns True, indicating the action was executed.', analyze_data: 'Action node: Send collected data to the main server for analysis.
Returns: Always returns True, indicating the action was executed.'} to construct a behavior tree in XML format to the following command.
OUTPUT:
<BehaviorTree><Sequence><Action>investigate_anomaly</Action><Action>analyze_data</Action></Sequence>
</BehaviorTree>

###

USER COMMAND: Clean and maintain designated area.
INSTRUCTIONS: Use only the following behaviors to generate XML Behavior tree based on the user command: {clean_area: 'Action node: Begin cleaning the designated area.
Returns: Always returns True, indicating the action was executed.', maintain_area: 'Action node: Perform any necessary maintenance tasks to keep the area in good condition.
Returns: Always returns True, indicating the action was executed.'} to construct a behavior tree in XML format to the following command.
OUTPUT:
<BehaviorTree><Sequence><Action>clean_area</Action><Action>maintain_area</Action></Sequence>
</BehaviorTree>

###

USER COMMAND: Patrol designated area and mark potential hazards for future removal.
INSTRUCTIONS: Use only the following behaviors to generate XML Behavior tree based on the user command: {patrol_area: 'Action node: Patrol the designated area.
Returns: Always returns True, indicating the action was executed.', is_hazard_present: 'Condition node: Check if a potential hazard is present.
Returns: True if a hazard is present, otherwise False.', mark_hazard: 'Action node: Mark the location of the potential hazard for future removal.
Returns: Always returns True, indicating the action was executed.'} to construct a behavior tree in XML format to the following command.
OUTPUT:
<BehaviorTree><Sequence><Action>patrol_area</Action><Selector><Sequence><Condition>is_hazard_present</Condition><Action>mark_hazard</Action></Sequence></Selector></Sequence>
</BehaviorTree>

###

USER COMMAND: Transport heavy materials to designated construction site.
INSTRUCTIONS: Use only the following behaviors to generate XML Behavior tree based on the user command: {load_materials: 'Action node: Load heavy materials onto transport vehicle.
Returns: Always returns True, indicating the action was executed.', transport_materials: 'Action node: Transport materials to designated construction site.
Returns: Always returns True, indicating the action was executed.'} to construct a behavior tree in XML format to the following command.
OUTPUT:
<BehaviorTree><Sequence><Action>load_materials</Action><Action>transport_materials</Action></Sequence>
</BehaviorTree>

###

USER COMMAND: Survey designated area and map out topography.
INSTRUCTIONS: Use only the following behaviors to generate XML Behavior tree based on the user command: {survey_area: 'Action node: Begin surveying the designated area.
Returns: Always returns True, indicating the action was executed.', map_topography: 'Action node: Map out the topography of the area using collected data.
Returns: Always returns True, indicating the action was executed.'} to construct a behavior tree in XML format to the following command.
OUTPUT:
<BehaviorTree><Sequence><Action>survey_area</Action><Action>map_topography</Action></Sequence>
</BehaviorTree>

###

USER COMMAND: Inspect and repair damaged power lines in a specified area.
INSTRUCTIONS: Use only the following behaviors to generate XML Behavior tree based on the user command: {inspect_power_lines: 'Action node: Inspect the designated area for any damaged power lines.
Returns: Always returns True, indicating the action was executed.', is_damage_present: 'Condition node: Check if damage to power lines is present.
Returns: True if damage is present, otherwise False.', repair_lines: 'Action node: Repair any damaged power lines.
Returns: Always returns True, indicating the action was executed.'} to construct a behavior tree in XML format to the following command.
OUTPUT:
<BehaviorTree><Sequence><Action>inspect_power_lines</Action><Selector><Sequence><Condition>is_damage_present</Condition><Action>repair_lines</Action></Sequence></Selector></Sequence>
</BehaviorTree>

###

USER COMMAND: Monitor and track weather patterns to predict potential disasters.
INSTRUCTIONS: Use only the following behaviors to generate XML Behavior tree based on the user command: {monitor_weather: 'Action node: Monitor and track weather patterns.
Returns: Always returns True, indicating the action was executed.', track_patterns: 'Action node: Use collected data to track patterns and predict potential disasters.
Returns: Always returns True, indicating the action was executed.'} to construct a behavior tree in XML format to the following command.
OUTPUT:
<BehaviorTree><Sequence><Action>monitor_weather</Action><Action>track_patterns</Action></Sequence>
</BehaviorTree>

###

USER COMMAND: Search and retrieve lost equipment in a designated area.
INSTRUCTIONS: Use only the following behaviors to generate XML Behavior tree based on the user command: {search_area: 'Action node: Begin searching the designated area.
Returns: Always returns True, indicating the action was executed.', is_equipment_found: 'Condition node: Check if the lost equipment is found.
Returns: True if equipment is found, otherwise False.', retrieve_equipment: 'Action node: Retrieve the lost equipment.
Returns: Always returns True, indicating the action was executed.'} to construct a behavior tree in XML format to the following command.
OUTPUT:
<BehaviorTree><Sequence><Action>search_area</Action><Selector><Sequence><Condition>is_equipment_found</Condition><Action>retrieve_equipment</Action></Sequence></Selector></Sequence>
</BehaviorTree>

###

USER COMMAND: Monitor wildlife in a designated conservation area and report any anomalies.
INSTRUCTIONS: Use only the following behaviors to generate XML Behavior tree based on the user command: {monitor_wildlife: 'Action node: Monitor the designated conservation area for any wildlife activity.
Returns: Always returns True, indicating the action was executed.', is_anomaly_detected: 'Condition node: Check if any anomalies in wildlife behavior are detected.
Returns: True if an anomaly is detected, otherwise False.', report_anomaly: 'Action node: Report the anomaly to park rangers.
Returns: Always returns True, indicating the action was executed.'} to construct a behavior tree in XML format to the following command.
OUTPUT:
<BehaviorTree><Sequence><Action>monitor_wildlife</Action><Selector><Sequence><Condition>is_anomaly_detected</Condition><Action>report_anomaly</Action></Sequence></Selector></Sequence>
</BehaviorTree>

###

USER COMMAND: Find and collect all resources within a given area.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: find_resource: Condition node - Checks if there is a resource within a given area. collect_resource: Action node - Collects the resource at the agent's current location. move_to_resource: Action node - Moves the agent to the location of the nearest resource. search_area: Subtree node - Represents a behavior tree for searching the given area for resources.
OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>find_resource</Condition><Action>collect_resource</Action><Action>move_to_resource</Action></Sequence><Action>search_area</Action></Selector>
</BehaviorTree>

###

USER COMMAND: Navigate through a maze while avoiding obstacles.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: random_move: Action node - Makes the agent randomly move to an adjacent location. check_obstacle: Condition node - Checks if there is an obstacle in the agent's current location. move_around_obstacle: Action node - Makes the agent move around the obstacle to continue navigation. move_to_exit: Action node - Moves the agent to the exit of the maze. navigate_maze: Subtree node - Represents a behavior tree for navigating through the maze.
OUTPUT:
<BehaviorTree><Sequence><Action>move_to_exit</Action><Selector><Sequence><Condition>check_obstacle</Condition><Action>move_around_obstacle</Action></Sequence><Action>random_move</Action></Selector></Sequence>
</BehaviorTree>

###

USER COMMAND: Work together to carry a heavy object to a specified location.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: get_heavy_object: Action node - Retrieves the heavy object at the agent's current location. carry_heavy_object: Action node - Carries the heavy object to the specified location. proximity_check: Condition node - Checks if another agent is within a certain distance. coordinate_movement: Action node - Coordinates movement with another agent while carrying the heavy object. move_to_destination: Action node - Moves the agent to the specified destination. carry_object_together: Subtree node - Represents a behavior tree for coordinating and carrying the heavy object together.
OUTPUT:
<BehaviorTree><Sequence><Action>get_heavy_object</Action><Selector><Sequence><Condition>proximity_check</Condition><Action>coordinate_movement</Action></Sequence><Action>carry_heavy_object</Action></Selector><Action>move_to_destination</Action></Sequence>
</BehaviorTree>

###

USER COMMAND: Explore the environment and collect data.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: explore_area: Action node - Moves the agent to an unexplored area. collect_data: Action node - Collects data at the agent's current location. explore_and_collect: Subtree node - Represents a behavior tree for exploring and collecting data.
OUTPUT:
<BehaviorTree><Sequence><Action>explore_and_collect</Action><Action>explore_area</Action><Action>collect_data</Action></Sequence>
</BehaviorTree>

###

USER COMMAND: Follow a designated leader while maintaining a specific formation.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: follow_leader: Action node - Makes the agent follow the designated leader. maintain_formation: Action node - Maintains a specific formation with the leader. change_formation: Action node - Changes the formation if necessary. designated_leader: Condition node - Checks if the agent is the designated leader. form_formation: Subtree node - Represents a behavior tree for forming and maintaining the specific formation.
OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>designated_leader</Condition><Action>form_formation</Action></Sequence><Action>follow_leader</Action><Action>maintain_formation</Action><Action>change_formation</Action></Selector>
</BehaviorTree>

###

USER COMMAND: Perform a coordinated dance routine.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: synchronize_moves: Action node - Synchronizes the agent's moves with other dancers. follow_routine: Action node - Follows the designated dance routine. change_moves: Action node - Changes dance moves if necessary. learn_routine: Subtree node - Represents a behavior tree for learning and performing the coordinated dance routine.
OUTPUT:
<BehaviorTree><Selector><Sequence><Action>learn_routine</Action><Action>follow_routine</Action><Action>synchronize_moves</Action></Sequence><Action>change_moves</Action></Selector>
</BehaviorTree>

###

USER COMMAND: Work together to overcome an obstacle.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: get_object: Action node - Retrieves the object the agent needs help with. help_with_object: Action node - Assists the other agent in overcoming the obstacle. check_status: Condition node - Checks if the other agent has successfully overcome the obstacle. move_to_assist: Action node - Moves the agent to assist the other agent if necessary. overcome_obstacle: Subtree node - Represents a behavior tree for working together to overcome an obstacle.
OUTPUT:
<BehaviorTree><Selector><Sequence><Action>get_object</Action><Action>move_to_assist</Action><Action>help_with_object</Action></Sequence><Condition>check_status</Condition><Action>overcome_obstacle</Action></Selector>
</BehaviorTree>

###

USER COMMAND: Gather information about a targeted location and report back.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: scout_location: Action node - Moves the agent to the targeted location. gather_info: Action node - Gathers information about the location. return_info: Action node - Returns the information to the designated location. report_info: Subtree node - Represents a behavior tree for gathering and reporting information.
OUTPUT:
<BehaviorTree><Sequence><Action>report_info</Action><Action>gather_info</Action><Action>return_info</Action><Action>scout_location</Action></Sequence>
</BehaviorTree>

###

USER COMMAND: Find and retrieve a lost item.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: find_lost_item: Condition node - Checks if the lost item is within a certain radius. retrieve_item: Action node - Retrieves the lost item at the agent's current location. search_area: Subtree node - Represents a behavior tree for searching the designated area for the lost item.
OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>find_lost_item</Condition><Action>retrieve_item</Action></Sequence><Action>search_area</Action></Selector>
</BehaviorTree>

###

USER COMMAND: Work together to build a structure.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: get_materials: Action node - Retrieves the necessary materials for building the structure. build_structure: Action node - Builds the structure with the materials at the agent's current location. check_progress: Condition node - Checks if the structure is successfully being built. coordinate_building: Action node - Coordinates building with other agents involved. work_together: Subtree node - Represents a behavior tree for working together to build a structure.
OUTPUT:
<BehaviorTree><Selector><Sequence><Action>get_materials</Action><Action>coordinate_building</Action><Action>build_structure</Action></Sequence><Action>check_progress</Action><Action>work_together</Action></Selector>
</BehaviorTree>

###

USER COMMAND: Patrol a designated area and report any anomalies.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: patrol_area: Action node - Moves the agent to designated patrol points. report_anomaly: Action node - Reports any anomalies found at the agent's current location. receive_info: Action node - Receives information from other agents patrolling the area. analyze_info: Action node - Analyzes the received information to determine if an anomaly is present. anomaly_detection: Subtree node - Represents a behavior tree for patrolling and reporting anomalies.
OUTPUT:
<BehaviorTree><Sequence><Action>anomaly_detection</Action><Action>patrol_area</Action><Action>report_anomaly</Action></Sequence><Action>receive_info</Action><Action>analyze_info</Action></BehaviorTree>

###

USER COMMAND: Perform a coordinated rescue mission.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: find_victim: Condition node - Checks if there is a victim within a certain proximity. rescue_victim: Action node - Rescues the victim at the agent's current location. coordinate_rescue: Action node - Coordinates with other agents involved in the rescue mission. move_to_victim: Action node - Moves the agent to the victim's location. perform_rescue: Subtree node - Represents a behavior tree for performing a coordinated rescue mission.
OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>find_victim</Condition><Action>move_to_victim</Action><Action>coordinate_rescue</Action><Action>rescue_victim</Action></Sequence><Action>perform_rescue</Action></Selector>
</BehaviorTree>

###

USER COMMAND: Coordinate and execute a synchronized swarm attack.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: locate_target: Action node - Moves the agent to the designated target location. surround_target: Action node - Surrounds the target location with other agents. attack_target: Action node - Performs a coordinated swarm attack on the target. coordinate_attack: Subtree node - Represents a behavior tree for coordinating and executing a synchronized swarm attack.
OUTPUT:
<BehaviorTree><Selector><Sequence><Action>locate_target</Action><Action>surround_target</Action><Action>attack_target</Action></Sequence><Action>coordinate_attack</Action></Selector>
</BehaviorTree>

###

USER COMMAND: Navigate through a hazardous environment while avoiding danger.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: random_move: Action node - Moves the agent to a random location. check_danger: Condition node - Checks if there is a danger in the agent's current location. move_around_danger: Action node - Helps the agent avoid the danger by moving around it. move_to_safety: Action node - Moves the agent to a safe location. navigate_hazard: Subtree node - Represents a behavior tree for navigating through a hazardous environment while avoiding danger.
OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>check_danger</Condition><Action>move_around_danger</Action></Sequence><Action>random_move</Action><Action>move_to_safety</Action></Selector></BehaviorTree>

###

USER COMMAND: Protect and defend a designated area.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: patrol_area: Action node - Moves the agent to designated patrol points. defend_area: Action node - Defends the designated area from any threats. receive_info: Action node - Receives information from other agents patrolling the area. analyze_info: Action node - Analyzes the received information to determine if there is a threat. protect_area: Subtree node - Represents a behavior tree for patrolling and protecting a designated area.
OUTPUT:
<BehaviorTree><Sequence><Action>protect_area</Action><Action>patrol_area</Action><Action>defend_area</Action></Sequence><Action>receive_info</Action><Action>analyze_info</Action></BehaviorTree>

###

USER COMMAND: Find and destroy enemy targets.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: locate_target: Action node - Moves the agent to the designated target location. destroy_target: Action node - Destroys the designated target. check_status: Condition node - Checks if the target has been successfully destroyed. move_to_target: Action node - Moves the agent closer to the target if necessary. engage_target: Subtree node - Represents a behavior tree for locating and destroying enemy targets.
OUTPUT:
<BehaviorTree><Selector><Sequence><Action>locate_target</Action><Action>move_to_target</Action><Action>destroy_target</Action></Sequence><Action>check_status</Action><Action>engage_target</Action></Selector>
</BehaviorTree>

###

USER COMMAND: Work together to defend against a common threat.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: locate_threat: Action node - Moves the agent to the designated threat location. coordinate_defense: Action node - Coordinates with other agents to defend against the threat. defend_against_threat: Action node - Performs a coordinated defense against the threat. protect_all: Subtree node - Represents a behavior tree for protecting against a common threat.
OUTPUT:
<BehaviorTree><Selector><Sequence><Action>locate_threat</Action><Action>coordinate_defense</Action><Action>defend_against_threat</Action>

###

USER COMMAND: If the battery is low, go to the charging station. Otherwise, continue to explore the environment.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: is_battery_low: Condition node - Checks if the battery level is below a specified threshold. go_to_charging_station: Action node - Makes the agent navigate to the nearest charging station. explore_environment: Action node (same as before).
OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_battery_low</Condition><Action>go_to_charging_station</Action></Sequence><Action>explore_environment</Action></Selector></BehaviorTree>

###

USER COMMAND: Collect resources and bring them to the base.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: collect_resources: Action node - Makes the agent collect nearby resources. bring_to_base: Action node - Makes the agent navigate to the base and drop off gathered resources.
OUTPUT:
<BehaviorTree><Sequence><Action>collect_resources</Action><Action>bring_to_base</Action></Sequence></BehaviorTree>

###

USER COMMAND: If there is an obstacle, take a different path. Otherwise, continue towards the destination.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: is_obstacle_present: Condition node - Checks if there is an obstacle in the agent's path. take_different_path: Action node - Makes the agent navigate around the obstacle. move_towards_destination: Action node (same as before).
OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_obstacle_present</Condition><Action>take_different_path</Action></Sequence><Action>move_towards_destination</Action></Selector></BehaviorTree>

###

USER COMMAND: Pick up object, rotate 180 degrees, and place it at a specific location.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: pick_up_object: Action node - Makes the agent pick up a nearby object. rotate_180: Action node - Makes the agent turn 180 degrees. place_at_location: Action node - Makes the agent navigate to a specific location and place the object.
OUTPUT:
<BehaviorTree><Sequence><Action>pick_up_object</Action><Action>rotate_180</Action><Action>place_at_location</Action></Sequence></BehaviorTree>

###

USER COMMAND: Move to the nearest teammate and form a defensive formation.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: move_to_teammate: Action node - Makes the agent navigate to the nearest teammate. form_defensive_formation: Action node - Makes the agent position itself in a defensive formation with its teammate.
OUTPUT:
<BehaviorTree><Sequence><Action>move_to_teammate</Action><Action>form_defensive_formation</Action></Sequence></BehaviorTree>

###

USER COMMAND: If there are no nearby resources, explore the environment. Otherwise, collect the nearest resource.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: is_resource_nearby: Condition node - Checks if there is a nearby resource. explore_environment: Action node - Makes the agent explore the environment. collect_nearest_resource: Action node - Makes the agent collect the nearest resource.
OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_resource_nearby</Condition><Action>collect_nearest_resource</Action></Sequence><Action>explore_environment</Action></Selector></BehaviorTree>

###

USER COMMAND: Scan for enemy drones using infrared sensors and engage if detected.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: scan_for_enemies: Action node - Makes the agent use infrared sensors to scan for nearby enemies. engage_enemy: Action node - Makes the agent engage the enemy if detected.
OUTPUT:
<BehaviorTree><Sequence><Action>scan_for_enemies</Action><Action>engage_enemy</Action></Sequence></BehaviorTree>

###

USER COMMAND: Follow the leader and maintain a specific distance.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: follow_leader: Action node - Makes the agent follow the designated leader. maintain_distance: Action node - Makes the agent maintain a specific distance from the leader.
OUTPUT:
<BehaviorTree><Sequence><Action>follow_leader</Action><Action>maintain_distance</Action></Sequence></BehaviorTree>

###

USER COMMAND: Detect and avoid obstacles while navigating to a specific location.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: detect_obstacles: Action node - Makes the agent use sensors to detect obstacles in its path. avoid_obstacles: Action node - Makes the agent navigate around detected obstacles. navigate_to_location: Action node - Makes the agent navigate to a specified location.
OUTPUT:
<BehaviorTree><Sequence><Action>detect_obstacles</Action><Action>avoid_obstacles</Action><Action>navigate_to_location</Action></Sequence></BehaviorTree>

###

USER COMMAND: If there is a teammate nearby, coordinate movement and avoid collisions.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: is_teammate_nearby: Condition node - Checks if there is a teammate within a specified range. coordinate_movement: Action node - Makes the agent coordinate movement with its teammate to avoid collisions.
OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_teammate_nearby</Condition><Action>coordinate_movement</Action></Sequence><Action>move_independently</Action></Selector></BehaviorTree>

###

USER COMMAND: Search for and gather all resources within a specific area.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: search_for_resources: Action node - Makes the agent use sensors to search for resources within a specific area. gather_resources: Action node - Makes the agent gather any detected resources.
OUTPUT:
<BehaviorTree><Sequence><Action>search_for_resources</Action><Action>gather_resources</Action></Sequence></BehaviorTree>

###

USER COMMAND: Patrol a designated area and react to any detected intruders.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: patrol_area: Action node - Makes the agent move within a designated area. detect_intruders: Action node - Makes the agent use sensors to detect any intruders in its path. react_to_intruders: Action node - Makes the agent perform a defensive action upon detecting an intruder.
OUTPUT:
<BehaviorTree><Sequence><Action>patrol_area</Action><Action>detect_intruders</Action><Action>react_to_intruders</Action></Sequence></BehaviorTree>

###

USER COMMAND: If a teammate is under attack, provide backup support and defend them.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: is_teammate_under_attack: Condition node - Checks if a teammate is currently engaged in combat. provide_back_support: Action node - Makes the agent provide backup support to the teammate. defend_teammate: Action node - Makes the agent defend the teammate in danger.
OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_teammate_under_attack</Condition><Action>provide_back_support</Action></Sequence><Action>defend_teammate</Action></Selector></BehaviorTree>

###

USER COMMAND: Use swarm tactics to surround and capture a target object.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: surround_target: Action node - Makes the agent position itself strategically around the target object. capture_target: Action node - Makes the agent use its grasping mechanism to capture the target object.
OUTPUT:
<BehaviorTree><Sequence><Action>surround_target</Action><Action>capture_target</Action></Sequence></BehaviorTree>

###

USER COMMAND: Communicate with nearby agents and coordinate movement for a synchronized task.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: communicate_with_teammates: Action node - Makes the agent send and receive signals to communicate with nearby agents. coordinate_movement: Action node - Makes the agent coordinate movement with the other agents for a synchronized task.
OUTPUT:
<BehaviorTree><Sequence><Action>communicate_with_teammates</Action><Action>coordinate_movement</Action></Sequence></BehaviorTree>

###

USER COMMAND: If the environment changes, adapt and update the behavior tree accordingly.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: is_environment_changed: Condition node - Checks if there have been any updates in the environment. adapt_to_changes: Action node - Makes the agent adjust and update its behavior tree accordingly.
OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_environment_changed</Condition><Action>adapt_to_changes</Action></Sequence><Action>continue_with_original_tree</Action></Selector></BehaviorTree>

###

USER COMMAND: Perform a coordinated task with other agents to achieve a collective goal.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: perform_coordinated_task: Action node - Makes the agent collaborate with other agents to perform a specific task. achieve_collective_goal: Action node - Makes the agent work together with other agents to achieve a collective goal.
OUTPUT:
<BehaviorTree><Sequence><Action>perform_coordinated_task</Action><Action>achieve_collective_goal</Action></Sequence></BehaviorTree>

###

USER COMMAND: Patrol a specific area and report any suspicious activity.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: patrol_area: Subtree node - Represents a behavior tree for patrolling a designated area.
check_for_suspicious_activity: Action node - Scans the surroundings for any suspicious activity and reports if found.
OUTPUT:
<BehaviorTree><Sequence><Action>patrol_area</Action><Action>check_for_suspicious_activity</Action></Sequence></BehaviorTree>

###

USER COMMAND: Follow the leader robot while avoiding obstacles.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: follow_leader: Action node - Utilizes a leader-follower strategy to move in the same direction as the leader robot.
avoid_obstacles: Subtree node - Represents a behavior tree for obstacle avoidance.
OUTPUT:
<BehaviorTree><Sequence><Action>follow_leader</Action><Subtree>avoid_obstacles</Subtree></Sequence></BehaviorTree>

###

USER COMMAND: Scan the environment and report any hazards.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: scan_environment: Action node - Scans the surroundings for any hazards and reports if found.
report_hazards: Action node - Reports any detected hazards.
OUTPUT:
<BehaviorTree><Sequence><Action>scan_environment</Action><Action>report_hazards</Action></Sequence></BehaviorTree>

###

USER COMMAND: Collect resources and deposit them at a designated location.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: collect_resources: Subtree node - Represents a behavior tree for resource collection.
deposit_resources: Action node - Moves to the designated location and deposits collected resources.
OUTPUT:
<BehaviorTree><Sequence><Subtree>collect_resources</Subtree><Action>deposit_resources</Action></Sequence></BehaviorTree>

###

USER COMMAND: Coordinate movements with nearby robots to form a circle.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: coordinate_movements: Action node - Utilizes communication with nearby robots to form a coordinated circle movement.
OUTPUT:
<BehaviorTree><Sequence><Action>coordinate_movements</Action></Sequence></BehaviorTree>

###

USER COMMAND: perform a specific dance routine.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: execute_dance: Action node - Performs a predetermined dance routine.
OUTPUT:
<BehaviorTree><Sequence><Action>execute_dance</Action></Sequence></BehaviorTree>

###

USER COMMAND: Work together to stack objects in a specific order.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: stack_objects: Subtree node - Represents a behavior tree for coordinating and stacking objects in a specific order.
OUTPUT:
<BehaviorTree><Sequence><Subtree>stack_objects</Subtree></Sequence></BehaviorTree>

###

USER COMMAND: Communicate and perform synchronized movements with another robot.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: communicate: Action node - Sends and receives messages from another robot. perform_synchronized_movement: Subtree node - Represents a behavior tree for coordinating synchronized movements.
OUTPUT:
<BehaviorTree><Sequence><Action>communicate</Action><Subtree>perform_synchronized_movement</Subtree></Sequence></BehaviorTree>

###

USER COMMAND: Search and rescue a lost robot.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: search_for_lost_robot: Action node - Utilizes communication with other robots to search for the lost robot.
rescue_lost_robot: Action node - Executes a rescue procedure once the lost robot is found.
OUTPUT:
<BehaviorTree><Sequence><Action>search_for_lost_robot</Action><Action>rescue_lost_robot</Action></Sequence></BehaviorTree>

###

USER COMMAND: Form a line and move together to a designated location.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: form_line: Action node - Utilizes communication with nearby robots to form a line and move together.
move_to_designated_location: Action node - Moves to a specified location.
OUTPUT:
<BehaviorTree><Sequence><Action>form_line</Action><Action>move_to_designated_location</Action></Sequence></BehaviorTree>

###

USER COMMAND: Guard a specific area and alert nearby robots of any approaching threats.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: guard_area: Action node - Stays in a designated area and monitors for any approaching threats.
alert_nearby_robots: Action node - Sends an alert message to nearby robots if a threat is detected.
OUTPUT:
<BehaviorTree><Sequence><Action>guard_area</Action><Action>alert_nearby_robots</Action></Sequence></BehaviorTree>

###

USER COMMAND: Navigate through a maze to reach the end point.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: navigate_maze: Subtree node - Represents a behavior tree for navigating through a maze.
reach_end_point: Action node - Moves the agent to the designated end point.
OUTPUT:
<BehaviorTree><Sequence><Subtree>navigate_maze</Subtree><Action>reach_end_point</Action></Sequence></BehaviorTree>

###

USER COMMAND: Scan the environment for resources and collect them efficiently.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: scan_for_resources: Action node - Scans the surroundings for resources and updates the agent's knowledge.
collect_resources: Subtree node - Represents a behavior tree for efficient resource collection and management.
OUTPUT:
<BehaviorTree><Sequence><Action>scan_for_resources</Action><Subtree>collect_resources</Subtree></Sequence></BehaviorTree>

###

USER COMMAND: Find and retrieve an object from a specific location using a designated path.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: find_object: Action node - Utilizes communication and mapping to locate the object.
retrieve_object: Subtree node - Represents a behavior tree for retrieving the object using the designated path.
OUTPUT:
<BehaviorTree><Sequence><Action>find_object</Action><Subtree>retrieve_object</Subtree></Sequence></BehaviorTree>

###

USER COMMAND: Coordinate with other robots to form a pyramid structure.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: communicate: Action node - Communicates with other robots to establish the pyramid structure.
create_pyramid: Subtree node - Represents a behavior tree for coordinating movements to form the pyramid structure.
OUTPUT:
<BehaviorTree><Sequence><Action>communicate</Action><Subtree>create_pyramid</Subtree></Sequence></BehaviorTree>

###

USER COMMAND: Patrol a designated path and respond to environmental changes.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: patrol_path: Subtree node - Represents a behavior tree for patrolling a designated path.
respond_to_changes: Action node - Monitors the environment for any changes and responds accordingly.
OUTPUT:
<BehaviorTree><Sequence><Subtree>patrol_path</Subtree><Action>respond_to_changes</Action></Sequence></BehaviorTree>

###

USER COMMAND: Complete a series of tasks in a specific order.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: perform_tasks: Subtree node - Represents a behavior tree for completing a series of tasks in a specific order.
OUTPUT:
<BehaviorTree><Sequence><Subtree>perform_tasks</Subtree></Sequence></BehaviorTree>

###

USER COMMAND: Find and collect resources in a given area until a certain threshold is met.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: find_resources: Action node - Uses the agent's sensors to locate resources in the assigned area. collect_resources: Action node - Collects the resources found by the agent. check_resource_threshold: Condition node - Checks if the collected amount of resources meets the specified threshold. continue_collecting: Selector node - Continues to search and collect resources until the threshold is met.
OUTPUT:
<BehaviorTree><Selector><Sequence><Action>find_resources</Action><Action>collect_resources</Action></Sequence><Sequence><Condition>check_resource_threshold</Condition><Action>continue_collecting</Action></Sequence></Selector></BehaviorTree>

###

USER COMMAND: Form a defensive wall with surrounding swarm robots to protect a target location.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: swarm_defend: Action node - Commands the agent to form a defensive wall with other swarm robots. check_distance_to_target: Condition node - Checks the distance between the agent and the target location. move_closer_to_target: Action node - Moves the agent closer to the target location. continue_defending: Selector node - Continues to defend the target location until the distance is close enough.
OUTPUT:
<BehaviorTree><Selector><Sequence><Action>swarm_defend</Action></Sequence><Sequence><Condition>check_distance_to_target</Condition><Action>move_closer_to_target</Action><Action>continue_defending</Action></Sequence></Selector></BehaviorTree>

###

USER COMMAND: Coordinate with other robots to build a structure by carrying and placing materials in designated locations.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: coordinate_materials: Subtree node - Represents a behavior tree for coordinating with other robots to carry and place materials. carry_materials: Action node - Instructs the agent to carry materials to a designated location. place_materials: Action node - Instructs the agent to place the carried materials in a designated location.
OUTPUT:
<BehaviorTree><Sequence><Action>coordinate_materials</Action><Action>carry_materials</Action><Action>place_materials</Action></Sequence></BehaviorTree>

###

USER COMMAND: Follow a leader robot while avoiding obstacles in the environment.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: follow_leader: Action node - Instructs the agent to follow the leader robot in a predefined formation. avoid_obstacles: Action node - Uses the agent's sensors to detect and avoid obstacles in the environment.
OUTPUT:
<BehaviorTree><Selector><Sequence><Action>follow_leader</Action></Sequence><Action>avoid_obstacles</Action></Selector></BehaviorTree>

###

USER COMMAND: Collaboratively explore and map a new environment.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: explore: Action node - Commands the agent to explore the environment and map out new areas. update_map: Action node - Updates the map with any new information discovered by the agent.
OUTPUT:
<BehaviorTree><Sequence><Action>explore</Action><Action>update_map</Action></Sequence></BehaviorTree>

###

USER COMMAND: Work together to push a heavy object to a specific location.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: push_object: Action node - Instructs the agent to push the heavy object towards the target location. check_distance_to_object: Condition node - Checks the distance between the agent and the heavy object. move_closer_to_object: Action node - Moves the agent closer to the heavy object if necessary. continue_pushing: Selector node - Continues to push the object until it reaches the target location.
OUTPUT:
<BehaviorTree><Selector><Sequence><Action>push_object</Action></Sequence><Sequence><Condition>check_distance_to_object</Condition><Action>move_closer_to_object</Action><Action>continue_pushing</Action></Sequence></Selector></BehaviorTree>

###

USER COMMAND: Perform a coordinated dance with other robots for entertainment purposes.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: perform_dance: Action node - Commands the agent to perform a predefined dance routine. synchronize: Action node - Instructs the agent to synchronize movements with other robots for a coordinated dance.
OUTPUT:
<BehaviorTree><Sequence><Action>perform_dance</Action><Action>synchronize</Action></Sequence></BehaviorTree>

###

USER COMMAND: Find and repair any damaged robots within the swarm.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: find_damaged_robot: Action node - Instructs the agent to search for any damaged robots within the swarm. repair_robot: Action node - Commands the agent to perform repairs on the damaged robot. check_for_repair: Condition node - Checks if the damaged robot has been successfully repaired. continue_repair: Selector node - Continues to search and repair damaged robots until all have been fixed.
OUTPUT:
<BehaviorTree><Selector><Sequence><Action>find_damaged_robot</Action><Action>repair_robot</Action></Sequence><Sequence><Condition>check_for_repair</Condition><Action>continue_repair</Action></Sequence></Selector></BehaviorTree>

###

USER COMMAND: Use sensor data to identify and organize objects in the environment.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: identify_objects: Action node - Uses sensor data to identify and categorize objects in the environment. organize_objects: Action node - Commands the agent to organize the identified objects into groups based on their characteristics.
OUTPUT:
<BehaviorTree><Sequence><Action>identify_objects</Action><Action>organize_objects</Action></Sequence></BehaviorTree>

###

USER COMMAND: Coordinate with other robots to lift and transport a heavy object to a desired location.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: coordinate_lift: Subtree node - Represents a behavior tree for coordinating with other robots to lift and transport the heavy object. lift_object: Action node - Instructs the agent to lift the heavy object. transport_object: Action node - Commands the agent to move the lifted object to the desired location.
OUTPUT:
<BehaviorTree><Sequence><Action>coordinate_lift</Action><Action>lift_object</Action><Action>transport_object</Action></Sequence></BehaviorTree>

###

USER COMMAND: Use sensors to detect and avoid potential hazards in the environment.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: detect_hazards: Action node - Utilizes sensor data to detect potential hazards in the environment. avoid_hazards: Action node - Commands the agent to avoid the detected hazards and find a safe path.
OUTPUT:
<BehaviorTree><Selector><Sequence><Action>detect_hazards</Action><Action>avoid_hazards</Action></Sequence><Action>find_safe_path</Action></Selector></BehaviorTree>

###

USER COMMAND: Work together to construct a bridge using materials found in the environment.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: gather_materials: Action node - Commands the agent to gather materials from the environment. construct_bridge: Action node - Instructs the agent to work together with other robots to construct a bridge using the gathered materials.
OUTPUT:
<BehaviorTree><Sequence><Action>gather_materials</Action><Action>construct_bridge</Action></Sequence></BehaviorTree>

###

USER COMMAND: Detach from the swarm and explore a new area independently.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: detach_from_swarm: Action node - Instructs the agent to detach from the swarm and continue on its own. explore_area: Action node - Commands the agent to explore the new area and gather information.
OUTPUT:
<BehaviorTree><Sequence><Action>detach_from_swarm</Action><Action>explore_area</Action></Sequence></BehaviorTree>

###

USER COMMAND: Use sensors to identify and harvest ripe crops in a field.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: identify_crops: Action node - Uses sensor data to identify and locate ripe crops in the field. harvest_crops: Action node - Commands the agent to harvest the identified crops.
OUTPUT:
<BehaviorTree><Sequence><Action>identify_crops</Action><Action>harvest_crops</Action></Sequence></BehaviorTree>

###

USER COMMAND: Coordinate with other robots to form a protective barrier around a target object.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: coordinate_barrier: Subtree node - Represents a behavior tree for coordinating with other robots to form a protective barrier. form_barrier: Action node - Instructs the agent to form the barrier with other robots. protect_object: Action node - Commands the agent to keep the target object safe within the barrier.
OUTPUT:
<BehaviorTree><Sequence><Action>coordinate_barrier</Action><Action>form_barrier</Action><Action>protect_object</Action></Sequence></BehaviorTree>

###

USER COMMAND: Work together to save a trapped robot in a dangerous situation.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: locate_trapped_robot: Action node - Instructs the agent to search for and locate the trapped robot. rescue_robot: Action node - Commands the agent to work together with other robots to rescue the trapped robot. check_rescue_success: Condition node - Checks if the trapped robot has been successfully rescued. continue_rescue: Selector node - Continues to search and rescue trapped robots until all have been saved.
OUTPUT:
<BehaviorTree><Selector><Sequence><Action>locate_trapped_robot</Action><Action>rescue_robot</Action></Sequence><Sequence><Condition>check_rescue_success</Condition><Action>continue_rescue</Action></Sequence></Selector></BehaviorTree>

###

USER COMMAND: Use collected data to predict and avoid potential collisions with other robots in the environment.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: collect_data: Action node - Instructs the agent to collect data on other robots in the environment. predict_collisions: Action node - Uses the collected data to predict potential collisions with other robots. avoid_collisions: Action node - Commands the agent to change its course to avoid the predicted collisions.
OUTPUT:
<BehaviorTree><Sequence><Action>collect_data</Action><Action>predict_collisions</Action><Action>avoid_collisions</Action></Sequence></BehaviorTree>

###

USER COMMAND: generate behavior tree to 'Avoid obstacles while moving towards target.'
INSTRUCTIONS: Use only the following behaviors to generate XML Behavior tree based on the user command: {move_to_target: 'Action node: Move the agent to the target location.
Returns: Always returns True, indicating the action was executed.', avoid_obstacles: 'Action node: Avoid obstacles while moving.
Returns: Always returns True, indicating the action was executed.'} to construct a behavior tree in XML format to the following command.
OUTPUT:
<BehaviorTree><Sequence><Action>avoid_obstacles</Action><Action>move_to_target</Action></Sequence>
</BehaviorTree>

###

USER COMMAND: generate behavior tree to 'Gather resources, if low on energy, return to base to recharge.'
INSTRUCTIONS: Use only the following behaviors to generate XML Behavior tree based on the user command: {gather_resources: 'Action node: Gather resources in the environment.
Returns: Always returns True, indicating the action was executed.', low_energy: 'Condition node: Check if energy level is low.
Returns: True if energy level is low, otherwise False.', return_to_base: 'Action node: Return to the base to recharge.
Returns: Always returns True, indicating the action was executed.'} to construct a behavior tree in XML format to the following command.
OUTPUT:
<BehaviorTree><Sequence><Action>gather_resources</Action><Condition>low_energy</Condition><Action>return_to_base</Action></Sequence>
</BehaviorTree>

###

USER COMMAND: generate behavior tree to 'Move towards target, if obstacle in path, find alternate route to target.'
INSTRUCTIONS: Use only the following behaviors to generate XML Behavior tree based on the user command: {move_to_target: 'Action node: Move the agent to the target location.
Returns: Always returns True, indicating the action was executed.', is_obstacle_in_path: 'Condition node: Check if there is an obstacle in the path.
Returns: True if obstacle is present, otherwise False.', find_alternate_route: 'Action node: Find an alternate route to the target location.
Returns: Always returns True, indicating the action was executed.'} to construct a behavior tree in XML format to the following command.
OUTPUT:
<BehaviorTree><Sequence><Action>move_to_target</Action><Selector><Sequence><Condition>is_obstacle_in_path</Condition><Action>find_alternate_route</Action></Sequence></Selector></Sequence>
</BehaviorTree>

###

USER COMMAND: generate behavior tree to 'Collect data, if data collection complete, return to base and upload data.'
INSTRUCTIONS: Use only the following behaviors to generate XML Behavior tree based on the user command: {collect_data: 'Action node: Collect data from the environment.
Returns: Always returns True, indicating the action was executed.', data_collection_complete: 'Condition node: Check if data collection is complete.
Returns: True if collection is complete, otherwise False.', return_to_base: 'Action node: Return to the base to upload data.
Returns: Always returns True, indicating the action was executed.', upload_data: 'Action node: Upload collected data to a storage unit.
Returns: Always returns True, indicating the action was executed.'} to construct a behavior tree in XML format to the following command.
OUTPUT:
<BehaviorTree><Sequence><Action>collect_data</Action><Condition>data_collection_complete</Condition><Action>return_to_base</Action><Action>upload_data</Action></Sequence>
</BehaviorTree>

###

USER COMMAND: generate behavior tree to 'Explore unknown territory, if obstacle in path, avoid obstacle and continue exploring.'
INSTRUCTIONS: Use only the following behaviors to generate XML Behavior tree based on the user command: {explore_unknown_territory: 'Action node: Explore the unknown territory.
Returns: Always returns True, indicating the action was executed.', is_obstacle_in_path: 'Condition node: Check if there is an obstacle in the path.
Returns: True if obstacle is present, otherwise False.', avoid_obstacle: 'Action node: Avoid obstacle while continuing exploration.
Returns: Always returns True, indicating the action was executed.'} to construct a behavior tree in XML format to the following command.
OUTPUT:
<BehaviorTree><Sequence><Action>explore_unknown_territory</Action><Selector><Sequence><Condition>is_obstacle_in_path</Condition><Action>avoid_obstacle</Action></Sequence></Selector></Sequence>
</BehaviorTree>

###

USER COMMAND: generate behavior tree to 'Follow leader, maintain distance, and stay within designated area.'
INSTRUCTIONS: Use only the following behaviors to generate XML Behavior tree based on the user command: {follow_leader: 'Action node: Follow the designated leader.
Returns: Always returns True, indicating the action was executed.', maintain_distance: 'Action node: Maintain a safe distance from the leader.
Returns: Always returns True, indicating the action was executed.', stay_within_area: 'Condition node: Check if the agent is within the designated area.
Returns: True if within area, otherwise False.'} to construct a behavior tree in XML format to the following command.
OUTPUT:
<BehaviorTree><Sequence><Action>follow_leader</Action><Action>maintain_distance</Action><Condition>stay_within_area</Condition></Sequence>
</BehaviorTree>

###

USER COMMAND: generate behavior tree to 'Defend territory by patrolling and attacking intruders.'
INSTRUCTIONS: Use only the following behaviors to generate XML Behavior tree based on the user command: {defend_territory: 'Action node: Patrol and defend the territory.
Returns: Always returns True, indicating the action was executed.', detect_intruder: 'Condition node: Check if there is an intruder.
Returns: True if intruder is detected, otherwise False.', attack_intruder: 'Action node: Attack the intruder.
Returns: Always returns True, indicating the action was executed.'} to construct a behavior tree in XML format to the following command.
OUTPUT:
<BehaviorTree><Sequence><Action>defend_territory</Action><Selector><Sequence><Condition>detect_intruder</Condition><Action>attack_intruder</Action></Sequence></Selector></Sequence>
</BehaviorTree>

###

USER COMMAND: generate behavior tree to 'Group up, if separated from other robots, move towards the nearest robot and regroup.'
INSTRUCTIONS: Use only the following behaviors to generate XML Behavior tree based on the user command: {group_up: 'Action node: Move towards the nearest robot to regroup.
Returns: Always returns True, indicating the action was executed.', is_separated: 'Condition node: Check if the agent is separated from the group.
Returns: True if separated, otherwise False.', move_towards_robot: 'Action node: Move towards the nearest robot.
Returns: Always returns True, indicating the action was executed.'} to construct a behavior tree in XML format to the following command.
OUTPUT:
<BehaviorTree><Sequence><Action>group_up</Action><Selector><Sequence><Condition>is_separated</Condition><Action>move_towards_robot</Action></Sequence></Selector></Sequence>
</BehaviorTree>

###

USER COMMAND: generate behavior tree to 'Collect and deliver packages to designated locations.'
INSTRUCTIONS: Use only the following behaviors to generate XML Behavior tree based on the user command: {collect_package: 'Action node: Collect the desired package from the designated location.
Returns: Always returns True, indicating the action was executed.', deliver_package: 'Action node: Deliver the collected package to the designated destination.
Returns: Always returns True, indicating the action was executed.'} to construct a behavior tree in XML format to the following command.
OUTPUT:
<BehaviorTree><Sequence><Action>collect_package</Action><Action>deliver_package</Action></Sequence>
</BehaviorTree>

###

USER COMMAND: generate behavior tree to 'Search for survivors and provide aid as needed.'
INSTRUCTIONS: Use only the following behaviors to generate XML Behavior tree based on the user command: {search_for_survivors: 'Action node: Search the designated area for survivors.
Returns: Always returns True, indicating the action was executed.', provide_aid: 'Action node: Provide aid to any survivors found.
Returns: Always returns True, indicating the action was executed.'} to construct a behavior tree in XML format to the following command.
OUTPUT:
<BehaviorTree><Sequence><Action>search_for_survivors</Condition><Action>provide_aid</Action></Sequence>
</BehaviorTree>

###

USER COMMAND: generate behavior tree to 'Assemble and construct a structure using multiple robots.'
INSTRUCTIONS: Use only the following behaviors to generate XML Behavior tree based on the user command: {assemble_structure: 'Action node: Use multiple robots to assemble and construct a designated structure.
Returns: Always returns True, indicating the action was executed.', construct_structure: 'Action node: Use specific tools and materials to construct the designated structure.
Returns: Always returns True, indicating the action was executed.'} to construct a behavior tree in XML format to the following command.
OUTPUT:
<BehaviorTree><Sequence><Action>assemble_structure</Action><Action>construct_structure</Action></Sequence>
</BehaviorTree>

###

USER COMMAND: generate behavior tree to 'Locate and retrieve lost equipment in a designated area.'
INSTRUCTIONS: Use only the following behaviors to generate XML Behavior tree based on the user command: {locate_equipment: 'Action node: Search the designated area for lost equipment.
Returns: Always returns True, indicating the action was executed.', retrieve_equipment: 'Action node: Retrieve the lost equipment once located.
Returns: Always returns True, indicating the action was executed.'} to construct a behavior tree in XML format to the following command.
OUTPUT:
<BehaviorTree><Sequence><Action>locate_equipment</Action><Action>retrieve_equipment</Action></Sequence>
</BehaviorTree>

###

USER COMMAND: generate behavior tree to 'Follow assigned path, but avoid areas with high radiation levels.'
INSTRUCTIONS: Use only the following behaviors to generate XML Behavior tree based on the user command: {follow_assigned_path: 'Action node: Follow the assigned path.
Returns: Always returns True, indicating the action was executed.', high_radiation_levels: 'Condition node: Check if the agent is in an area with high radiation levels.
Returns: True if in high radiation area, otherwise False.', avoid_high_radiation: 'Action node: Avoid the high radiation area and find an alternative route.
Returns: Always returns True, indicating the action was executed.'} to construct a behavior tree in XML format to the following command.
OUTPUT:
<BehaviorTree><Sequence><Action>follow_assigned_path</Action><Selector><Sequence><Condition>high_radiation_levels</Condition><Action>avoid_high_radiation</Action></Sequence></Selector></Sequence>
</BehaviorTree>

###

USER COMMAND: generate behavior tree to 'Provide support and cover fire to a designated robot while it retrieves a target object.'
INSTRUCTIONS: Use only the following behaviors to generate XML Behavior tree based on the user command: {provide_support: 'Action node: Provide support and cover fire as needed.
Returns: Always returns True, indicating the action was executed.', retrieve_target: 'Action node: Retrieve the designated target object.
Returns: Always returns True, indicating the action was executed.'} to construct a behavior tree in XML format to the following command.
OUTPUT:
<BehaviorTree><Sequence><Action>provide_support</Action><Action>retrieve_target</Action></Sequence>
</BehaviorTree>

###

USER COMMAND: generate behavior tree to 'Perform a complex search and rescue mission in a disaster area.'
INSTRUCTIONS: Use only the following behaviors to generate XML Behavior tree based on the user command: {perform_search: 'Action node: Search the designated disaster area for survivors and any other relevant information.
Returns: Always returns True, indicating the action was executed.', provide_medical_aid: 'Action node: Provide necessary medical aid to survivors.
Returns: Always returns True, indicating the action was executed.', retrieve_supplies: 'Action node: Retrieve necessary supplies from designated locations.
Returns: Always returns True, indicating the action was executed.'} to construct a behavior tree in XML format to the following command.
OUTPUT:
<BehaviorTree><Sequence><Action>perform_search</Action><Action>provide_medical_aid</Action><Action>retrieve_supplies</Action></Sequence>
</BehaviorTree>

###

USER COMMAND: generate behavior tree to 'Navigate through a maze and retrieve designated artifacts.'
INSTRUCTIONS: Use only the following behaviors to generate XML Behavior tree based on the user command: {navigate_maze: 'Action node: Use predefined strategies to navigate through the maze.
Returns: Always returns True, indicating the action was executed.', retrieve_artifact: 'Action node: Retrieve the designated artifacts once reaching the end of the maze.
Returns: Always returns True, indicating the action was executed.'} to construct a behavior tree in XML format to the following command.
OUTPUT:
<BehaviorTree><Sequence><
###

USER COMMAND: Detect and collect all nearby resources.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: detect_resources: Action node - Scans the surroundings for resources. collect_resource: Action Node - Collects a resource if one is detected. check_inventory: Condition node - Checks if the robot's inventory is full. stop_collecting: Action node - Halts the collection process if the inventory is full.
OUTPUT:
<BehaviorTree><Sequence><Action>detect_resources</Action><Selector><Condition>check_inventory</Condition><Action>stop_collecting</Action></Selector><Action>collect_resource</Action></Sequence></BehaviorTree>

###

USER COMMAND: Follow another swarm robot in front while maintaining a safe distance.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: follow_robot: Action node - Moves towards the robot in front. check_distance: Condition node - Checks the distance between the current and front robot. adjust_distance: Action node - Adjusts the distance by slowing down or speeding up. maintain_distance: Subtree node - Represents a behavior tree for maintaining a safe distance.
OUTPUT:
<BehaviorTree><Sequence><Action>follow_robot</Action><Selector><Condition>check_distance</Condition><Action>adjust_distance</Action></Selector><Subtree>maintain_distance</Subtree></Sequence></BehaviorTree>

###

USER COMMAND: Patrol an area by moving in a circular pattern.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: move_forward: Action node (same as before). turn_right: Action node - Turns the robot 90 degrees to the right. check_area: Condition node - Checks if the entire area has been patrolled. reset_direction: Action node - Resets the direction of the circular pattern if the robot has completed a full circle. patrol_area: Subtree node - Represents a behavior tree for patrolling an area.
OUTPUT:
<BehaviorTree><Sequence><Action>move_forward</Action><Sequence><Action>turn_right</Action><Selector><Condition>check_area</Condition><Action>reset_direction</Action></Selector></Sequence><Subtree>patrol_area</Subtree></Sequence></BehaviorTree>

###

USER COMMAND: Avoid collisions with other robots while moving towards a target location.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: move_towards_target: Action node - Moves towards a specified target location. detect_obstacles: Action node - Scans for any obstacles in the path. avoid_collision: Action node - Adjusts the robot's trajectory to avoid collision. target_reached: Condition node - Checks if the target destination has been reached.
OUTPUT:
<BehaviorTree><Sequence><Selector><Condition>target_reached</Condition><Action>move_towards_target</Action></Selector><Selector><Action>detect_obstacles</Action><Action>avoid_collision</Action></Selector></Sequence></BehaviorTree>

###

USER COMMAND: Pick up and transport a heavy object to a specified location.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: detect_object: Action node - Scans the surroundings for a heavy object. pick_up: Action node - Lifts and carries the object. move_to_destination: Action node - Moves towards the target location. check_load: Condition node - Checks if the robot is carrying a heavy object. unload: Action node - Sets down the object at the destination.
OUTPUT:
<BehaviorTree><Sequence><Selector><Condition>check_load</Condition><Action>detect_object</Action><Action>pick_up</Action></Selector><Sequence><Action>move_to_destination</Action><Condition>check_load</Condition><Action>unload</Action></Sequence></Sequence></BehaviorTree>

###

USER COMMAND: Work together with other robots to push a large object.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: detect_object: Action node - Scans the surroundings for the large object. move_to_object: Action node - Moves towards the object. push_object: Action node - Pushes the object in coordination with other robots. coordinate: Subtree node - Represents a behavior tree for coordinating with other robots.
OUTPUT:
<BehaviorTree><Sequence><Action>detect_object</Action><Subtree>coordinate</Subtree><Sequence><Action>move_to_object</Action><Selector><Condition>check_position</Condition><Action>push_object</Action></Selector></Sequence></Sequence></BehaviorTree>

###

USER COMMAND: Search for and rescue a lost robot.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: detect_lost_robot: Action node - Scans the surroundings for a lost robot. move_to_robot: Action node - Moves towards the lost robot. check_status: Condition node - Checks the status of the lost robot (e.g. low battery). retrieve_robot: Action node - Rescues the lost robot and brings it back to a designated location.
OUTPUT:
<BehaviorTree><Sequence><Action>detect_lost_robot</Action><Sequence><Action>move_to_robot</Action><Condition>check_status</Condition><Action>retrieve_robot</Action></Sequence></Sequence></BehaviorTree>

###

USER COMMAND: Build a structure using building blocks.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: detect_building_blocks: Action node - Scans the surroundings for building blocks. move_to_block: Action node - Moves towards a building block. pick_up_block: Action node - Picks up a building block. check_inventory: Condition node - Checks the robot's inventory for available building blocks. build_structure: Action node - Constructs the desired structure. check_completion: Condition node - Checks if the structure is complete.
OUTPUT:
<BehaviorTree><Sequence><Action>detect_building_blocks</Action><Sequence><Action>move_to_block</Action><Action>pick_up_block</Action><Condition>check_inventory</Condition><Selector><Selector><Condition>check_completion</Condition><Action>build_structure</Action></Selector></Selector></Sequence></Sequence></BehaviorTree>

###

USER COMMAND: Cooperate with other robots to form a barrier around an area.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: detect_boundary: Action node - Scans for the boundaries of the designated area. move_to_boundary: Action node - Moves towards the boundary. form_barrier: Action node - Communicates and coordinates with other robots to form a barrier around the area. check_barrier: Condition node - Checks if the barrier is complete.
OUTPUT:
<BehaviorTree><Sequence><Action>detect_boundary</Action><Sequence><Action>move_to_boundary</Action><Condition>check_barrier</Condition><Action>form_barrier</Action></Sequence></Sequence></BehaviorTree>

###

USER COMMAND: Perform a coordinated dance routine with other robots.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: detect_music: Action node - Listens for the music to start. start_dance: Action node - Starts the dance routine. coordinate_dance: Action node - Communicates and coordinates with other robots to perform synchronized movements. end_dance: Action node - Ends the dance routine when the music stops.
OUTPUT:
<BehaviorTree><Sequence><Action>detect_music</Action><Action>start_dance</Action><Selector><Condition>check_music</Condition><Action>end_dance</Action><Action>coordinate_dance</Action></Selector></Sequence></BehaviorTree>

###

USER COMMAND: Navigate through a maze to reach the end point.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: detect_obstacles: Action node - Scans for obstacles in the path. move_towards_end: Action node - Moves towards the designated end point. find_path: Subtree node - Represents a behavior tree for path finding. check_path: Condition node - Checks if a valid path has been found.
OUTPUT:
<BehaviorTree><Sequence><Action>detect_obstacles</Action><Selector><Condition>check_path</Condition><Action>move_towards_end</Action><Subtree>find_path</Subtree></Selector></Sequence></BehaviorTree>

###

USER COMMAND: Scout and map out a new area for exploration.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: detect_unexplored_area: Action node - Scans the surroundings for unexplored areas. move_to_area: Action node - Moves towards the designated area. map_area: Action node - Maps the designated area and records any significant findings. check_map: Condition node - Checks if the area has been fully mapped.
OUTPUT:
<BehaviorTree><Sequence><Action>detect_unexplored_area</Action><Sequence><Action>move_to_area</Action><Condition>check_map</Condition><Action>map_area</Action></Sequence></Sequence></BehaviorTree>

###

USER COMMAND: Collaborate with other robots to transport a large object to a designated location.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: detect_large_object: Action node - Scans the surroundings for a large object. move_to_object: Action node - Moves towards the object. lift_object: Action node - Lifts the object in coordination with other robots. transport_object: Action node - Moves with the object towards the designated location. check_destination: Condition node - Checks if the designated location has been reached. lower_object: Action node - Lowers the object at the destination.
OUTPUT:
<BehaviorTree><Sequence><Action>detect_large_object</Action><Subtree>coordinate</Subtree><Sequence><Action>move_to_object</Action><Action>lift_object</Action></Sequence><Sequence><Action>transport_object</Action><Condition>check_destination</Condition><Action>lower_object</Action></Sequence></Sequence></BehaviorTree>

###

USER COMMAND: Work together with other robots to clean a designated area.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: detect_dirty_area: Action node - Scans the surroundings for a dirty area. move_to_area: Action node - Moves towards the designated area. clean_area: Action node - Cleans the designated area in coordination with other robots. check_cleanliness: Condition node - Checks if the area has been fully cleaned.
OUTPUT:
<BehaviorTree><Sequence><Action>detect_dirty_area</Action><Subtree>coordinate</Subtree><Sequence><Action>move_to_area</Action><Condition>check_cleanliness</Condition><Action>clean_area</Action></Sequence></Sequence></BehaviorTree>

###

USER COMMAND: Find and extinguish a fire in a building.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: detect_fire: Action node - Scans the surroundings for a fire. move_to_fire: Action node - Moves towards the fire. extinguish_fire: Action node - Extinguishes the fire using appropriate methods. check_emergency: Condition node - Checks for any potential emergency situations. evacuate: Action node - Evacuates the building.
OUTPUT:
<BehaviorTree><Sequence><Action>detect_fire</Action><Sequence><Action>move_to_fire</Action><Condition>check_emergency</Condition><Action>extinguish_fire</Action></Sequence><Action>evacuate</Action></Sequence></BehaviorTree>

###

USER COMMAND: Create a communication network with other robots for data transfer.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: detect_other_robots: Action node - Scans for other robots in the vicinity. connect_robot: Action node - Establishes a connection with another robot. transfer_data: Action node - Sends and receives data from other robots. check_data: Condition node - Checks if all data has been successfully transferred.
OUTPUT:
<BehaviorTree><Sequence><Action>detect_other_robots</Action><Selector><Action>connect_robot</Action><Selector><Condition>check_data</Condition><Action>transfer_data</Action></Selector></Selector></Sequence></BehaviorTree>

###

USER COMMAND: Team up with other robots to construct a large structure.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: detect_blueprint: Action node - Scans the surroundings for a blueprint of the structure. move_to_blueprint: Action node - Moves towards the blueprint. gather_materials: Action node - Collects the necessary materials for construction. build_structure: Action node - Constructs the structure in coordination with other robots. check_completion: Condition node - Checks if the structure has been completed.
OUTPUT:
<BehaviorTree><Sequence><Action>detect_blueprint</Action><Sequence><Action>move_to_blueprint</Action><Selector><Selector><Condition>check_completion</Condition><Action>build_structure</Action></Selector></Selector></Sequence><Action>gather_materials</Action></Sequence></Behavior
###

USER COMMAND: Patrol designated area and scan for any changes.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: patrol: Action node - Moves the agent around a designated area. scan: Action node - Scans the environment for changes.
OUTPUT:
<BehaviorTree><Sequence><Action>patrol</Action><Action>scan</Action></Sequence></BehaviorTree>

###

USER COMMAND: Collaboratively gather resources and return to designated location.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: gather_resources: Action node - Coordinates with other robots to gather resources. return_to_location: Action node - Returns to a designated location.
OUTPUT:
<BehaviorTree><Sequence><Action>gather_resources</Action><Action>return_to_location</Action></Sequence></BehaviorTree>

###

USER COMMAND: Avoid obstacles while moving towards the target location.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: avoid_obstacles: Condition node - Checks for obstacles in the environment. move_towards_target: Action node - Moves the agent towards a designated target location.
OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>avoid_obstacles</Condition><Action>move_towards_target</Action></Sequence></Selector></BehaviorTree>

###

USER COMMAND: Attack the enemy with the highest threat level.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: find_enemy: Action node - Scans the environment and locates the enemy with the highest threat level. attack_enemy: Action node - Attacks the designated enemy.
OUTPUT:
<BehaviorTree><Sequence><Action>find_enemy</Action><Action>attack_enemy</Action></Sequence></BehaviorTree>

###

USER COMMAND: Stay in formation with other robots and move towards a designated target.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: stay_in_formation: Condition node - Checks if the agent is in formation with other robots. move_towards_target: Action node - Moves the agent towards a designated target location.
OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>stay_in_formation</Condition><Action>move_towards_target</Action></Sequence></Selector></BehaviorTree>

###

USER COMMAND: Search for and rescue any injured robots in the area.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: search_for_injured: Action node - Scans the environment for any injured robots. rescue_injured: Action node - Coordinates with other robots to rescue the injured robot.
OUTPUT:
<BehaviorTree><Sequence><Action>search_for_injured</Action><Action>rescue_injured</Action></Sequence></BehaviorTree>

###

USER COMMAND: Defend the designated area from incoming threats.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: defend_area: Action node - Stays in the designated area and defends it from any incoming threats. scan_for_threats: Action node - Scans the environment for any potential threats.
OUTPUT:
<BehaviorTree><Sequence><Action>defend_area</Action><Action>scan_for_threats</Action></Sequence></BehaviorTree>

###

USER COMMAND: Coordinate with other robots to form a barrier and block enemy entry.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: form_barrier: Action node - Coordinates with other robots to form a physical barrier. block_enemy_entry: Action node - Prevents enemies from entering a designated area.
OUTPUT:
<BehaviorTree><Sequence><Action>form_barrier</Action><Action>block_enemy_entry</Action></Sequence></BehaviorTree>

###

USER COMMAND: Report back to the designated leader and receive new instructions.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: report_to_leader: Action node - Communicates with the designated leader. receive_instructions: Action node - Receives new instructions from the leader.
OUTPUT:
<BehaviorTree><Sequence><Action>report_to_leader</Action><Action>receive_instructions</Action></Sequence></BehaviorTree>

###

USER COMMAND: Repair damaged robots by gathering necessary resources and fixing the damage.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: gather_resources: Action node - Coordinates with other robots to gather necessary resources. repair_damage: Action node - Repairs damaged robots.
OUTPUT:
<BehaviorTree><Sequence><Action>gather_resources</Action><Action>repair_damage</Action></Sequence></BehaviorTree>

###

USER COMMAND: Scan for potential areas for resource collection and report findings to the designated leader.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: scan_for_resources: Action node - Scans the environment for potential resource collection areas. report_to_leader: Action node - Communicates with the designated leader to report findings.
OUTPUT:
<BehaviorTree><Sequence><Action>scan_for_resources</Action><Action>report_to_leader</Action></Sequence></BehaviorTree>

###

USER COMMAND: Follow the designated leader and assist in completing tasks.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: follow_leader: Action node - Follows the designated leader. assist_leader: Action node - Assists in completing tasks assigned by the leader.
OUTPUT:
<BehaviorTree><Sequence><Action>follow_leader</Action><Action>assist_leader</Action></Sequence></BehaviorTree>

###

USER COMMAND: Communicate with other robots and gather information about the surrounding environment.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: communicate: Action node - Communicates with other robots. gather_information: Action node - Gathers information about the surrounding environment.
OUTPUT:
<BehaviorTree><Sequence><Action>communicate</Action><Action>gather_information</Action></Sequence></BehaviorTree>

###

USER COMMAND: Use sensors to detect changes in the environment and adapt behaviors accordingly.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: use_sensors: Action node - Activates sensors to detect changes in the environment. adapt_behaviors: Action node - Modifies behaviors based on information from sensors.
OUTPUT:
<BehaviorTree><Sequence><Action>use_sensors</Action><Action>adapt_behaviors</Action></Sequence></BehaviorTree>

###

USER COMMAND: Coordinate with other robots to lift and transport heavy objects.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: coordinate_lifting: Action node - Communicates and coordinates with other robots to lift heavy objects. transport_object: Action node - Moves the lifted object to a designated location.
OUTPUT:
<BehaviorTree><Sequence><Action>coordinate_lifting</Action><Action>transport_object</Action></Sequence></BehaviorTree>

###

USER COMMAND: Search for and capture a designated target.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: search_for_target: Action node - Scans the environment for the designated target. capture_target: Action node - Coordinates with other robots to capture the target.
OUTPUT:
<BehaviorTree><Sequence><Action>search_for_target</Action><Action>capture_target</Action></Sequence></BehaviorTree>

###

USER COMMAND: Use collective decision making to determine the best course of action.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: collect_information: Action node - Collects information from other robots. make_decision: Action node - Uses the collected information to make a decision.
OUTPUT:
<BehaviorTree><Sequence><Action>collect_information</Action><Action>make_decision</Action></Sequence></BehaviorTree>

###

USER COMMAND: Navigate through a maze to reach the designated endpoint.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: navigate_maze: Action node - Utilizes mapping and path finding algorithms to navigate through a maze. reach_endpoint: Action node - Reaches the designated endpoint.
OUTPUT:
<BehaviorTree><Sequence><Action>navigate_maze</Action><Action>reach_endpoint</Action></Sequence></BehaviorTree>
###

USER COMMAND: Search for and collect resources. If resources are scarce, call for backup from a nearby robot.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: search_resources: Action node - Makes the agent search for resources. collect: Action node - Makes the agent collect resources. call_for_backup: Action node - Makes the agent call for backup from a nearby robot. is_resource_scarce: Condition node - Checks if the number of available resources is below a specific threshold.
OUTPUT:
<BehaviorTree><Selector><Sequence><Action>search_resources</Action><Action>collect</Action></Sequence><Sequence><Condition>is_resource_scarce</Condition><Action>call_for_backup</Action></Sequence></Selector></BehaviorTree>

###

USER COMMAND: Coordinate with other robots to build a new structure.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: coordinate: Action node - Makes the agent coordinate with other robots. build: Action node - Makes the agent participate in the building process. is_building_in_progress: Condition node - Checks if a building is already in progress.
OUTPUT:
<BehaviorTree><Selector><Sequence><Action>coordinate</Action><Action>build</Action></Sequence><Sequence><Condition>is_building_in_progress</Condition></Sequence></Selector></BehaviorTree>

###

USER COMMAND: Navigate through a maze and reach the designated end point.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: navigate_maze: Action node - Makes the agent navigate through the maze. reach_end_point: Action node - Makes the agent reach the designated end point. is_end_point_reached: Condition node - Checks if the agent has reached the end point.
OUTPUT:
<BehaviorTree><Selector><Sequence><Action>navigate_maze</Action><Action>reach_end_point</Action></Sequence><Condition>is_end_point_reached</Condition></Selector></BehaviorTree>

###

USER COMMAND: Gather data from different locations and transmit it to the main base.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: gather_data: Action node - Makes the agent gather data from different locations. transmit_data: Action node - Makes the agent transmit the gathered data to the main base. is_data_needed: Condition node - Checks if the main base requires the data.
OUTPUT:
<BehaviorTree><Selector><Sequence><Action>gather_data</Action><Action>transmit_data</Action></Sequence><Sequence><Condition>is_data_needed</Condition></Sequence></Selector></BehaviorTree>

###

USER COMMAND: Patrol a certain area and flag any suspicious activity.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: patrol: Action node - Makes the agent patrol a certain area. check_suspicious_activity: Action node - Makes the agent scan the area for any suspicious activity. flag_activity: Action node - Makes the agent flag the suspicious activity. is_suspicious_activity: Condition node - Checks if there is any suspicious activity in the area.
OUTPUT:
<BehaviorTree><Selector><Sequence><Action>patrol</Action><Action>check_suspicious_activity</Action><Action>flag_activity</Action></Sequence><Condition>is_suspicious_activity</Condition></Selector></BehaviorTree>

###

USER COMMAND: Work collaboratively with another robot to complete a specific task.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: collaborate: Action node - Makes the agent collaborate with another robot. complete_task: Action node - Makes the agent complete the assigned task. is_task_complete: Condition node - Checks if the task has been completed.
OUTPUT:
<BehaviorTree><Selector><Sequence><Action>collaborate</Action><Action>complete_task</Action></Sequence><Condition>is_task_complete</Condition></Selector></BehaviorTree>

###

USER COMMAND: Avoid obstacles while moving towards a specific location.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: move_to_location: Action node - Makes the agent move towards a specific location. avoid_obstacles: Action node - Makes the agent avoid any obstacles in its path. is_obstacle_present: Condition node - Checks if there is any obstacle in the agent's path.
OUTPUT:
<BehaviorTree><Selector><Sequence><Action>move_to_location</Action></Sequence><Sequence><Condition>is_obstacle_present</Condition><Action>avoid_obstacles</Action></Sequence></Selector></BehaviorTree>

###

USER COMMAND: Search for and rescue any injured team members.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: search: Action node - Makes the agent search for injured team members. rescue: Action node - Makes the agent rescue any injured team members found. is_injured: Condition node - Checks if there is an injured team member.
OUTPUT:
<BehaviorTree><Selector><Sequence><Action>search</Action><Action>rescue</Action></Sequence><Sequence><Condition>is_injured</Condition></Sequence></Selector></BehaviorTree>

###

USER COMMAND: Protect the main base from enemy attacks.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: protect: Action node - Makes the agent protect the main base. scout: Subtree node - Represents a behavior tree for scouting the surrounding area. attack: Action node - Makes the agent attack any enemies detected. is_enemy_detected: Condition node - Checks if there are any enemies in the area.
OUTPUT:
<BehaviorTree><Selector><Sequence><Action>protect</Action><Selector><Sequence><Action>scout</Action><Action>attack</Action></Sequence></Selector><Condition>is_enemy_detected</Condition></Selector></BehaviorTree>

###

USER COMMAND: Harvest resources and bring them to the designated storage area.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: harvest_resources: Action node - Makes the agent harvest resources from the environment. bring_to_storage: Action node - Makes the agent bring the harvested resources to the designated storage area. is_storage_full: Condition node - Checks if the designated storage area is full.
OUTPUT:
<BehaviorTree><Selector><Sequence><Action>harvest_resources</Action><Action>bring_to_storage</Action></Sequence><Sequence><Condition>is_storage_full</Condition></Sequence></Selector></BehaviorTree>

###

USER COMMAND: Explore a new area and map it out for future reference.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: explore_new_area: Action node - Makes the agent explore an uncharted area. map_area: Action node - Makes the agent map out the area for future reference. is_area_mapped: Condition node - Checks if the area has been fully mapped.
OUTPUT:
<BehaviorTree><Selector><Sequence><Action>explore_new_area</Action><Action>map_area</Action></Sequence><Condition>is_area_mapped</Condition></Selector></BehaviorTree>

###

USER COMMAND: Perform a coordinated attack with other robots on a specific target.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: coordinate_attack: Action node - Makes the agent coordinate with other robots for a synchronized attack. move_to_target: Action node - Makes the agent move towards the designated target. attack_target: Action node - Makes the agent attack the target. is_target_destroyed: Condition node - Checks if the target has been destroyed.
OUTPUT:
<BehaviorTree><Selector><Sequence><Action>coordinate_attack</Action><Action>move_to_target</Action><Action>attack_target</Action></Sequence><Condition>is_target_destroyed</Condition></Selector></BehaviorTree>

###

USER COMMAND: Search for and activate a hidden switch to open a secret passage.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: search_for_switch: Action node - Makes the agent search for a hidden switch. activate_switch: Action node - Makes the agent activate the switch when found. navigate_through_passage: Action node - Makes the agent navigate through the opened secret passage. is_switch_found: Condition node - Checks if the hidden switch has been found and activated.
OUTPUT:
<BehaviorTree><Selector><Sequence><Action>search_for_switch</Action><Action>activate_switch</Action></Sequence><Sequence><Condition>is_switch_found</Condition><Action>navigate_through_passage</Action></Sequence></Selector></BehaviorTree>

###

USER COMMAND: Gather supplies and distribute them equally among all team members.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: gather_supplies: Action node - Makes the agent gather supplies from the environment. distribute_supplies: Action node - Makes the agent distribute the gathered supplies among all team members. is_supplies_needed: Condition node - Checks if any team member is in need of supplies.
OUTPUT:
<BehaviorTree><Selector><Sequence><Action>gather_supplies</Action><Action>distribute_supplies</Action></Sequence><Sequence><Condition>is_supplies_needed</Condition></Sequence></Selector></BehaviorTree>

###

USER COMMAND: Escort a valuable package to a specific delivery location.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: escort: Action node - Makes the agent escort the valuable package to the designated delivery location. defend_package: Action node - Makes the agent defend the package from any potential threats. is_delivery_location_reached: Condition node - Checks if the agent has reached the designated delivery location.
OUTPUT:
<BehaviorTree><Selector><Sequence><Action>escort</Action><Action>defend_package</Action></Sequence><Condition>is_delivery_location_reached</Condition></Selector></BehaviorTree>

###

USER COMMAND: Activate all switches in a specific sequence to open a hidden door.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: activate_switches: Subtree node - Represents a behavior tree for activating all switches in a specific sequence. open_door: Action node - Makes the agent open the hidden door once all switches have been activated. is_all_switches_activated: Condition node - Checks if all switches in the sequence have been activated.
OUTPUT:
<BehaviorTree><Selector><Action>activate_switches</Action><Sequence><Condition>is_all_switches_activated</Condition><Action>open_door</Action></Sequence></Selector></BehaviorTree>

###

USER COMMAND: Work together to form a bridge and cross over a large gap.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: coordinate_bridge_building: Action node - Makes the agent coordinate with other robots to form a bridge. build_bridge: Action node - Makes the agent participate in building the bridge structure. cross_bridge: Action node - Makes the agent cross over the completed bridge. is_bridge_completed: Condition node - Checks if the bridge has been successfully built.
OUTPUT:
<BehaviorTree><Selector><Sequence><Action>coordinate_bridge_building</Action><Action>build_bridge</Action></Sequence><Sequence><Condition>is_bridge_completed</Condition><Action>cross_bridge</Action></Sequence></Selector></BehaviorTree>

###

USER COMMAND: Rest and recharge batteries before continuing with tasks.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: rest_and_recharge: Action node - Makes the agent rest and recharge its batteries. continue_task: Action node - Makes the agent continue with the previous task after recharging. is_battery_low: Condition node - Checks if the agent's battery level is low.
OUTPUT:
<BehaviorTree><Selector><Sequence><Action>rest_and_recharge</Action><Action>continue_task</Action></Sequence><Condition>is_battery_low</Condition></Selector></BehaviorTree>
###

USER COMMAND: Collect resources and return to base. If enemies are detected, retreat to base and regroup with teammates.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: collect_resources: Action node (same as before). return_to_base: Subtree node (same as before). retreat_to_base: Action node (same as before). regroup: Action node (same as before). detect_enemies: Condition node (same as before).
OUTPUT:
<BehaviorTree><Sequence><Action>collect_resources</Action><Action>return_to_base</Action><Selector><Sequence><Condition>detect_enemies</Condition><Sequence><Action>retreat_to_base</Action><Action>regroup</Action></Sequence></Sequence></Selector></Sequence></BehaviorTree>

###

USER COMMAND: Navigate through a maze. If a dead end is reached, turn around and try a different path.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: navigate_maze: Action node (same as before). turn_around: Action node (same as before). try_different_path: Action node (same as before). reached_dead_end: Condition node (same as before).
OUTPUT:
<BehaviorTree><Selector><Sequence><Action>navigate_maze</Action><Condition>reached_dead_end</Condition><Sequence><Action>turn_around</Action><Action>try_different_path</Action></Sequence></Selector></BehaviorTree>

###

USER COMMAND: Build a structure. If resource level is below a certain threshold, gather more resources before continuing building.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: build_structure: Action node (same as before). gather_resources: Subtree node (same as before). collect_resources: Action node (same as before). return_to_build_site: Subtree node (same as before). check_resource_level: Condition node (same as before).
OUTPUT:
<BehaviorTree><Sequence><Action>build_structure</Action><Selector><Sequence><Action>gather_resources</Action><Action>collect_resources</Action></Sequence><Sequence><Action>return_to_build_site</Action><Condition>check_resource_level</Condition></Sequence></Selector></Sequence></BehaviorTree>

###

USER COMMAND: Explore an unknown environment. If obstacles are detected, analyze them and find a way around.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: explore_environment: Action node (same as before). analyze_obstacles: Subtree node (same as before). find_way_around: Action node (same as before). detect_obstacles: Condition node (same as before).
OUTPUT:
<BehaviorTree><Sequence><Action>explore_environment</Action><Selector><Sequence><Action>analyze_obstacles</Action><Selector><Sequence><Action>find_way_around</Action><Action>analyze_obstacles</Action></Sequence><Action>explore_environment</Action></Selector></Sequence><Condition>detect_obstacles</Condition></Selector></Sequence></BehaviorTree>

###

USER COMMAND: Protect the queen bee at all costs. If injured, retreat to heal before resuming protection duties.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: protect_queen_bee: Action node (same as before). retreat_to_heal: Subtree node (same as before). heal_queen_bee: Action node (same as before). injured: Condition node (same as before).
OUTPUT:
<BehaviorTree><Sequence><Action>protect_queen_bee</Action><Selector><Sequence><Action>retreat_to_heal</Action><Action>heal_queen_bee</Action></Sequence><Condition>injured</Condition></Selector></Sequence></BehaviorTree>

###

USER COMMAND: Forage for food. If food is scarce, search for new sources of food.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: forage_food: Action node (same as before). search_for_food: Action node (same as before). no_food_available: Condition node (same as before).
OUTPUT:
<BehaviorTree><Sequence><Action>forage_food</Action><Selector><Sequence><Action>search_for_food</Action></Sequence><Condition>no_food_available</Condition></Selector></Sequence></BehaviorTree>

###

USER COMMAND: Clear fallen debris from the path. If debris is heavy, call for assistance.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: clear_debris: Action node (same as before). call_for_assistance: Action node (same as before). debris_is_heavy: Condition node (same as before).
OUTPUT:
<BehaviorTree><Sequence><Action>clear_debris</Action><Selector><Sequence><Action>call_for_assistance</Action></Sequence><Condition>debris_is_heavy</Condition></Selector></Sequence></BehaviorTree>

###

USER COMMAND: Search for a lost companion. If not found within a certain time frame, expand the search area.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: search_for_companion: Subtree node (same as before). expand_search_area: Action node (same as before). not_found_within_timeframe: Condition node (same as before).
OUTPUT:
<BehaviorTree><Sequence><Action>search_for_companion</Action><Selector><Sequence><Action>expand_search_area</Action></Sequence><Condition>not_found_within_timeframe</Condition></Selector></Sequence></BehaviorTree>

###

USER COMMAND: Gather a certain number of items. If the target number is changed, recalculate the number of items needed and adjust the gathering strategy accordingly.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: gather_items: Action node (same as before). recalculate_target: Action node (same as before). adjust_gathering_strategy: Action node (same as before). target_changed: Condition node (same as before).
OUTPUT:
<BehaviorTree><Sequence><Action>gather_items</Action><Selector><Sequence><Action>recalculate_target</Action><Action>adjust_gathering_strategy</Action></Sequence><Condition>target_changed</Condition></Selector></Sequence></BehaviorTree>

###

USER COMMAND: Defend the perimeter. If enemy attacks are increasing, call for reinforcements.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: defend_perimeter: Action node (same as before). call_reinforcements: Action node (same as before). enemy_attacks_increasing: Condition node (same as before).
OUTPUT:
<BehaviorTree><Sequence><Action>defend_perimeter</Action><Selector><Sequence><Action>call_reinforcements</Action></Sequence><Condition>enemy_attacks_increasing</Condition></Selector></Sequence></BehaviorTree>

###

USER COMMAND: Conduct a coordinated dance routine with other swarm robots. If any robot deviates from the routine, pause and realign before continuing.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: coordinated_dance: Action node (same as before). pause_and_realign: Action node (same as before). deviated_from_routine: Condition node (same as before).
OUTPUT:
<BehaviorTree><Sequence><Action>coordinated_dance</Action><Selector><Sequence><Action>pause_and_realign</Action></Sequence><Condition>deviated_from_routine</Condition></Selector></Sequence></BehaviorTree>

###

USER COMMAND: Navigate through a cave system. If stuck, use tools to dig through obstacles and continue on.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: navigate_cave: Action node (same as before). use_tools: Action node (same as before). dig_through_obstacles: Action node (same as before). stuck: Condition node (same as before).
OUTPUT:
<BehaviorTree><Selector><Sequence><Action>navigate_cave</Action></Sequence><Sequence><Action>use_tools</Action><Action>dig_through_obstacles</Action></Sequence><Condition>stuck</Condition></Selector></BehaviorTree>

###

USER COMMAND: Gather information about the environment. If necessary, communicate with other robots to gather more comprehensive data.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: gather_info: Action node (same as before). communicate: Action node (same as before). gather_comprehensive_info: Action node (same as before). more_info_needed: Condition node (same as before).
OUTPUT:
<BehaviorTree><Selector><Sequence><Action>gather_info</Action></Sequence><Sequence><Action>communicate</Action><Selector><Sequence><Action>gather_comprehensive_info</Action></Sequence></Selector></Sequence><Condition>more_info_needed</Condition></Selector></BehaviorTree>

###

USER COMMAND: Coordinate movements with other swarm robots to create a formation. If the formation is disrupted, reposition and continue.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: create_formation: Action node (same as before). reposition: Action node (same as before). formation_disrupted: Condition node (same as before).
OUTPUT:
<BehaviorTree><Selector><Sequence><Action>create_formation</Action></Sequence><Sequence><Action>reposition</Action></Sequence><Condition>formation_disrupted</Condition></Selector></BehaviorTree>

###

USER COMMAND: Assemble and disassemble parts to build a structure. If the structure design is changed, adjust the assembly process accordingly.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: assemble_structure: Action node (same as before). disassemble_parts: Action node (same as before). change_structure_design: Action node (same as before). design_changed: Condition node (same as before).
OUTPUT:
<BehaviorTree><Sequence><Action>assemble_structure</Action><Selector><Sequence><Action>change_structure_design</Action><Action>disassemble_parts</Action></Sequence><Condition>design_changed</Condition></Selector></Sequence></BehaviorTree>

###

USER COMMAND: Patrol an area and execute a specific action every few minutes. If the action is not needed, continue patrol.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: patrol_area: Subtree node (same as before). execute_action: Action node (same as before). check_for_action: Condition node (same as before).
OUTPUT:
<BehaviorTree><Selector><Sequence><Action>patrol_area</Action><Selector><Sequence><Action>execute_action</Action></Sequence><Condition>check_for_action</Condition></Selector></Sequence></Selector></BehaviorTree>

###

USER COMMAND: Follow a specific path while avoiding obstacles. If stuck, backtrack and try a different path.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: follow_path: Action node (same as before). avoid_obstacles: Subtree node (same as before). backtrack: Action node (same as before). stuck: Condition node (same as before).
OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Action>follow_path</Action><Selector><Sequence><Action>avoid_obstacles</Action></Sequence></Selector></Sequence><Sequence><Action>backtrack</Action></Sequence><Condition>stuck</Condition></Selector></Sequence></BehaviorTree>

###

USER COMMAND: Search and rescue a lost team member. If unable to locate within a certain timeframe, call for backup.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: search_and_rescue: Subtree node (same as before). call_for_backup: Action node (same as before). unable_to_locate: Condition node (same as before).
OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Action>search_and_rescue
###

USER COMMAND: If the obstacle is within a certain proximity, avoid it. Otherwise, continue straight.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: avoid_obstacle: Action node - Makes the agent move around the obstacle. is_obstacle_close: Condition node - Checks if the obstacle is within the designated proximity.
OUTPUT:
<BehaviorTree><Selector><Condition>is_obstacle_close</Condition><Action>avoid_obstacle</Action><Action>move_forward</Action></Selector></BehaviorTree>

###

USER COMMAND: If the destination is reachable, move towards it. Otherwise, wait until it becomes reachable.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: move_towards_destination: Action node - Makes the agent move towards the designated destination. is_destination_reachable: Condition node - Checks if the destination is currently reachable.
OUTPUT:
<BehaviorTree><Sequence><Condition>is_destination_reachable</Condition><Action>move_towards_destination</Action></Sequence></BehaviorTree>

###

USER COMMAND: If the battery level is low, return to the charging station. Otherwise, continue with the current task.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: return_to_charging_station: Action node - Makes the agent return to the designated charging station. is_battery_low: Condition node - Checks if the battery level is below a certain threshold.
OUTPUT:
<BehaviorTree><Selector><Condition>is_battery_low</Condition><Action>return_to_charging_station</Action><Action>continue_with_task</Action></Selector></BehaviorTree>

###

USER COMMAND: If there are any nearby objects, stop and gather information about them. Otherwise, continue with the current task.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: gather_information: Action node - Makes the agent stop and gather information about nearby objects. any_objects_nearby: Condition node - Checks if there are any objects within a certain proximity.
OUTPUT:
<BehaviorTree><Selector><Condition>any_objects_nearby</Condition><Action>gather_information</Action><Action>continue_with_task</Action></Selector></BehaviorTree>

###

USER COMMAND: If the communication link with other robots is lost, search for a new connection. Otherwise, continue with the current task.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: search_for_connection: Action node - Makes the agent search for a new communication link with other robots. communication_lost: Condition node - Checks if the current communication link with other robots is lost.
OUTPUT:
<BehaviorTree><Selector><Condition>communication_lost</Condition><Action>search_for_connection</Action><Action>continue_with_task</Action></Selector></BehaviorTree>

###

USER COMMAND: If the temperature rises beyond a certain threshold, move to a cooler location. Otherwise, continue with the current task.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: move_to_cooler_location: Action node - Makes the agent move to a location with a lower temperature. temperature_too_high: Condition node - Checks if the temperature has risen beyond a certain threshold.
OUTPUT:
<BehaviorTree><Selector><Condition>temperature_too_high</Condition><Action>move_to_cooler_location</Action><Action>continue_with_task</Action></Selector></BehaviorTree>

###

USER COMMAND: If the light intensity drops below a certain level, turn on the flashlight. Otherwise, continue with the current task.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: turn_on_flashlight: Action node - Turns on the agent's flashlight. light_intensity_low: Condition node - Checks if the light intensity has dropped below a certain level.
OUTPUT:
<BehaviorTree><Selector><Condition>light_intensity_low</Condition><Action>turn_on_flashlight</Action><Action>continue_with_task</Action></Selector></BehaviorTree>

###

USER COMMAND: If there is a potential threat nearby, send a warning signal to other robots. Otherwise, continue with the current task.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: send_warning_signal: Action node - Sends a warning signal to other robots. potential_threat_nearby: Condition node - Checks if there is a potential threat within a certain proximity.
OUTPUT:
<BehaviorTree><Selector><Condition>potential_threat_nearby</Condition><Action>send_warning_signal</Action><Action>continue_with_task</Action></Selector></BehaviorTree>

###

USER COMMAND: If there are too many obstacles in the way, switch to a different path. Otherwise, continue with the current task.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: switch_path: Action node - Switches to a different path to avoid too many obstacles. too_many_obstacles: Condition node - Checks if there are too many obstacles in the current path.
OUTPUT:
<BehaviorTree><Selector><Condition>too_many_obstacles</Condition><Action>switch_path</Action><Action>continue_with_task</Action></Selector></BehaviorTree>

###

USER COMMAND: If there are any injured team members, provide assistance. Otherwise, continue with the current task.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: provide_assistance: Action node - Provides assistance to an injured team member. any_injured_team_members: Condition node - Checks if there are any injured team members within a certain proximity.
OUTPUT:
<BehaviorTree><Selector><Condition>any_injured_team_members</Condition><Action>provide_assistance</Action><Action>continue_with_task</Action></Selector></BehaviorTree>

###

USER COMMAND: If the terrain is too steep, switch to a vehicle form for easier navigation. Otherwise, continue with the current task.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: switch_to_vehicle_form: Action node - Switches to a vehicle form for easier navigation. terrain_too_steep: Condition node - Checks if the terrain is too steep for the current form.
OUTPUT:
<BehaviorTree><Selector><Condition>terrain_too_steep</Condition><Action>switch_to_vehicle_form</Action><Action>continue_with_task</Action></Selector></BehaviorTree>

###

USER COMMAND: If the target object is within reach, pick it up. Otherwise, move towards it.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: pick_up_object: Action node - Picks up the target object. is_target_in_reach: Condition node - Checks if the target object is within reach.
OUTPUT:
<BehaviorTree><Selector><Condition>is_target_in_reach</Condition><Action>pick_up_object</Action><Action>move_towards_target_object</Action></Selector></BehaviorTree>

###

USER COMMAND: If the communication link with the base is lost, re-establish the connection. Otherwise, continue with the current task.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: re-establish_connection: Action node - Attempts to re-establish the communication link with the base. communication_with_base_lost: Condition node - Checks if the current communication link with the base is lost.
OUTPUT:
<BehaviorTree><Selector><Condition>communication_with_base_lost</Condition><Action>re-establish_connection</Action><Action>continue_with_task</Action></Selector></BehaviorTree>

###

USER COMMAND: If the target location is too far, switch to a flying form for faster transportation. Otherwise, continue with the current task.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: switch_to_flying_form: Action node - Switches to a flying form for faster transportation. target_location_too_far: Condition node - Checks if the target location is beyond a certain distance.
OUTPUT:
<BehaviorTree><Selector><Condition>target_location_too_far</Condition><Action>switch_to_flying_form</Action><Action>continue_with_task</Action></Selector></BehaviorTree>

###

USER COMMAND: If the water level is too high, switch to a boat form for easier navigation. Otherwise, continue with the current task.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: switch_to_boat_form: Action node - Switches to a boat form for easier navigation. water_level_too_high: Condition node - Checks if the water level is above a certain threshold.
OUTPUT:
<BehaviorTree><Selector><Condition>water_level_too_high</Condition><Action>switch_to_boat_form</Action><Action>continue_with_task</Action></Selector></BehaviorTree>

###

USER COMMAND: If the target location is too close to a danger zone, send a warning signal and wait for further instructions. Otherwise, continue with the current task.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: send_warning_signal: Action node - Sends a warning signal about the danger zone. is_target_near_danger_zone: Condition node - Checks if the target location is within a certain proximity to a danger zone.
OUTPUT:
<BehaviorTree><Selector><Condition>is_target_near_danger_zone</Condition><Action>send_warning_signal</Action><Action>wait_for_instructions</Action></Selector></BehaviorTree>

###

USER COMMAND: If there are any damaged objects in the environment, repair them. Otherwise, continue with the current task.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: repair_object: Action node - Repairs the damaged object. any_damaged_objects: Condition node - Checks if there are any damaged objects in the environment.
OUTPUT:
<BehaviorTree><Selector><Condition>any_damaged_objects</Condition><Action>repair_object</Action><Action>continue_with_task</Action></Selector></BehaviorTree>

###

USER COMMAND: If the team leader gives the "gather" command, switch to a formation and move towards the designated location. Otherwise, continue with the current task.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: switch_to_formation: Action node - Switches to a formation based on the team leader's instructions. gather_command_given: Condition node - Checks if the team leader has given the "gather" command.
OUTPUT:
<BehaviorTree><Selector><Condition>gather_command_given</Condition><Action>switch_to_formation</Action><Action>continue_with_task</Action></Selector></BehaviorTree>
###

USER COMMAND: Move towards the nearest food source and harvest it.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: move_to_food: Subtree node (same as before). harvest_food: Action node (same as before). on_food_detected: Event node - Triggers when a food source is detected in the environment.
OUTPUT:
<BehaviorTree>
  <Sequence>
    <Condition>on_food_detected</Condition>
    <Action>move_to_food</Action>
    <Action>harvest_food</Action>
  </Sequence>
</BehaviorTree>

###

USER COMMAND: Defend the swarm against enemy attacks. Use a combination of attack and coordinate behaviors.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: attack_enemies: Subtree node (same as before). coordinate_with_swarm: Action node (same as before). on_enemy_detected: Event node - Triggers when an enemy is detected in the environment.
OUTPUT:
<BehaviorTree>
  <Sequence>
    <Condition>on_enemy_detected</Condition>
    <Action>attack_enemies</Action>
    <Action>coordinate_with_swarm</Action>
  </Sequence>
</BehaviorTree>

###

USER COMMAND: Collect resources and deposit them in a designated location.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: collect_resources: Subtree node (same as before). deposit_resources: Action node (same as before). on_resource_detected: Event node - Triggers when a resource is detected in the environment.
OUTPUT:
<BehaviorTree>
  <Sequence>
    <Condition>on_resource_detected</Condition>
    <Action>collect_resources</Action>
    <Action>deposit_resources</Action>
  </Sequence>
</BehaviorTree>

###

USER COMMAND: Build a structure using available materials.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: collect_materials: Subtree node (same as before). build_structure: Action node (same as before). on_material_detected: Event node - Triggers when a material is detected in the environment.
OUTPUT:
<BehaviorTree>
  <Sequence>
    <Condition>on_material_detected</Condition>
    <Action>collect_materials</Action>
    <Action>build_structure</Action>
  </Sequence>
</BehaviorTree>

###

USER COMMAND: Navigate through a maze and find the exit.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: navigate_maze: Subtree node (same as before). on_exit_reached: Event node - Triggers when the exit is reached.
OUTPUT:
<BehaviorTree>
  <Sequence>
    <Condition>on_exit_reached</Condition>
    <Action>navigate_maze</Action>
  </Sequence>
</BehaviorTree>

###

USER COMMAND: Explore uncharted territory while avoiding obstacles.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: explore_territory: Subtree node (same as before). avoid_obstacles: Action node (same as before). on_obstacle_detected: Event node - Triggers when an obstacle is detected in the environment.
OUTPUT:
<BehaviorTree>
  <Sequence>
    <Condition>on_obstacle_detected</Condition>
    <Action>avoid_obstacles</Action>
    <Action>explore_territory</Action>
  </Sequence>
</BehaviorTree>

###

USER COMMAND: Coordinate movements with other swarm robots to form a specific shape.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: form_shape: Subtree node (same as before). coordinate_with_swarm: Action node (same as before). on_coordinate_command: Event node - Triggers when a coordinate command is received from another robot.
OUTPUT:
<BehaviorTree>
  <Sequence>
    <Condition>on_coordinate_command</Condition>
    <Action>form_shape</Action>
    <Action>coordinate_with_swarm</Action>
  </Sequence>
</BehaviorTree>

###

USER COMMAND: Deploy sensors in a specific area to gather data.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: deploy_sensors: Subtree node (same as before). gather_data: Action node (same as before). on_sensor_deployment: Event node - Triggers when a sensor is deployed in the designated area.
OUTPUT:
<BehaviorTree>
  <Sequence>
    <Condition>on_sensor_deployment</Condition>
    <Action>deploy_sensors</Action>
    <Action>gather_data</Action>
  </Sequence>
</BehaviorTree>

###

USER COMMAND: Search for and retrieve a specific object in the environment.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: search_object: Subtree node (same as before). retrieve_object: Action node (same as before). on_object_detected: Event node - Triggers when the designated object is detected in the environment.
OUTPUT:
<BehaviorTree>
  <Sequence>
    <Condition>on_object_detected</Condition>
    <Action>search_object</Action>
    <Action>retrieve_object</Action>
  </Sequence>
</BehaviorTree>

###

USER COMMAND: Defuse a bomb in a high-stress environment.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: approach_bomb: Subtree node (same as before). defuse_bomb: Action node (same as before). on_bomb_detected: Event node - Triggers when a bomb is detected in the environment.
OUTPUT:
<BehaviorTree>
  <Sequence>
    <Condition>on_bomb_detected</Condition>
    <Action>approach_bomb</Action>
    <Action>defuse_bomb</Action>
  </Sequence>
</BehaviorTree>

###

USER COMMAND: Create a formation and move as a group to a designated location.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: form_formation: Subtree node (same as before). move_as_group: Action node (same as before). on_formation_command: Event node - Triggers when a formation command is received from the leader robot.
OUTPUT:
<BehaviorTree>
  <Sequence>
    <Condition>on_formation_command</Condition>
    <Action>form_formation</Action>
    <Action>move_as_group</Action>
  </Sequence>
</BehaviorTree>

###

USER COMMAND: Perform a coordinated dance routine with other swarm robots.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: perform_dance: Subtree node (same as before). coordinate_with_swarm: Action node (same as before). on_dance_command: Event node - Triggers when a dance command is received from the leader robot.
OUTPUT:
<BehaviorTree>
  <Sequence>
    <Condition>on_dance_command</Condition>
    <Action>perform_dance</Action>
    <Action>coordinate_with_swarm</Action>
  </Sequence>
</BehaviorTree>

###

USER COMMAND: Gather information from multiple sources and use it to make a decision.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: gather_information: Subtree node (same as before). make_decision: Action node (same as before). on_information_collected: Event node - Triggers when all the necessary information has been gathered.
OUTPUT:
<BehaviorTree>
  <Sequence>
    <Condition>on_information_collected</Condition>
    <Action>gather_information</Action>
    <Action>make_decision</Action>
  </Sequence>
</BehaviorTree>

###

USER COMMAND: Carry out a coordinated rescue operation.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: perform_rescue: Subtree node (same as before). coordinate_with_swarm: Action node (same as before). on_rescue_call: Event node - Triggers when a rescue call is received from a trapped individual.
OUTPUT:
<BehaviorTree>
  <Sequence>
    <Condition>on_rescue_call</Condition>
    <Action>perform_rescue</Action>
    <Action>coordinate_with_swarm</Action>
  </Sequence>
</BehaviorTree>

###

USER COMMAND: Create a map of the surrounding environment.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: explore_area: Subtree node (same as before). map_environment: Action node (same as before). on_map_requested: Event node - Triggers when a map request is received from a user.
OUTPUT:
<BehaviorTree>
  <Sequence>
    <Condition>on_map_requested</Condition>
    <Action>explore_area</Action>
    <Action>map_environment</Action>
  </Sequence>
</BehaviorTree>

###

USER COMMAND: Perform a coordinated search and rescue mission with other swarm robots.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: search_area: Subtree node (same as before). coordinate_with_swarm: Action node (same as before). on_search_command: Event node - Triggers when a search command is received from the leader robot.
OUTPUT:
<BehaviorTree>
  <Sequence>
    <Condition>on_search_command</Condition>
    <Action>search_area</Action>
    <Action>coordinate_with_swarm</Action>
  </Sequence>
</BehaviorTree>

###

USER COMMAND: Collaboratively transport a heavy object to a designated location.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: approach_object: Subtree node (same as before). transport_object: Action node (same as before). on_object_detected: Event node - Triggers when an object is detected in the environment.
OUTPUT:
<BehaviorTree>
  <Sequence>
    <Condition>on_object_detected</Condition>
    <Action>approach_object</Action>
    <Action>transport_object</Action>
  </Sequence>
</BehaviorTree>

###

USER COMMAND: Navigate through a hazardous environment and report back findings.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: navigate_hazard: Subtree node (same as before). report_findings: Action node (same as before). on_endangerment_detected: Event node - Triggers when a hazardous situation is encountered.
OUTPUT:
<BehaviorTree>
  <Sequence>
    <Condition>on_endangerment_detected</Condition>
    <Action>navigate_hazard</Action>
    <Action>report_findings</Action>
  </Sequence>
</BehaviorTree>
###

USER COMMAND: Collect resources, deposit in assigned location, and return to base using shortest path.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: collect_resources: Action node - Directs the agent to collect resources based on its assigned role. deposit_location: Condition node - Checks if the agent has reached the designated deposit location. return_to_base: Action node - Commands the agent to return to the base using the shortest path available.
OUTPUT:
<BehaviorTree><Sequence><Selector><Action>collect_resources</Action><Sequence><Condition>deposit_location</Condition><Action>return_to_base</Action></Sequence></Selector></Sequence></BehaviorTree>

###

USER COMMAND: Follow a specific path while avoiding obstacles in real-time.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: follow_path: Action node - Guides the agent along a specified path while avoiding obstacles in real-time. check_obstacles: Condition node - Scans the environment for obstacles and returns True if any are detected.
OUTPUT:
<BehaviorTree><Sequence><Selector><Action>follow_path</Action><Condition>check_obstacles</Condition></Selector></Sequence></BehaviorTree>

###

USER COMMAND: Gather data from designated locations and return all data to base.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: gather_data: Action node - Commands the agent to collect data from designated locations. gather_complete: Condition node - Checks if all data has been gathered. return_to_base: Action node - Instructs the agent to return to the base.
OUTPUT:
<BehaviorTree><Sequence><Selector><Action>gather_data</Action><Sequence><Condition>gather_complete</Condition><Action>return_to_base</Action></Sequence></Selector></Sequence></BehaviorTree>

###

USER COMMAND: Search and locate a specific object in a specified area.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: search_area: Action node - Commands the agent to search a designated area. locate_object: Action node - Instructs the agent to locate the specific object and return its location.
OUTPUT:
<BehaviorTree><Sequence><Action>search_area</Action><Action>locate_object</Action></Sequence></BehaviorTree>

###

USER COMMAND: Avoid other robots while moving to a designated location.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: move_to_location: Action node - Commands the agent to move to the designated location. check_robots: Condition node - Scans the environment for other robots and returns True if any are detected.
OUTPUT:
<BehaviorTree><Sequence><Selector><Action>move_to_location</Action><Condition>check_robots</Condition></Selector></Sequence></BehaviorTree>

###

USER COMMAND: Form a perimeter with other robots to protect a designated area.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: move_to_position: Action node - Commands the agent to move to their designated position in the perimeter. form_perimeter: Action node - Instructs the agent to coordinate with other robots to form a protective perimeter around the designated area.
OUTPUT:
<BehaviorTree><Sequence><Action>move_to_position</Action><Action>form_perimeter</Action></Sequence></BehaviorTree>

###

USER COMMAND: Communicate with other robots to complete a predetermined task.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: communicate: Action node - Commands the agent to communicate with other robots to effectively complete a task. check_task_complete: Condition node - Checks if the predetermined task has been completed.
OUTPUT:
<BehaviorTree><Sequence><Selector><Action>communicate</Action><Condition>check_task_complete</Condition></Selector></Sequence></BehaviorTree>

###

USER COMMAND: Harvest crops and transport them to a specified location.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: harvest_crops: Action node - Directs the agent to harvest the designated crops. transport_crops: Action node - Instructs the agent to transport the harvested crops to a specified location.
OUTPUT:
<BehaviorTree><Sequence><Action>harvest_crops</Action><Action>transport_crops</Action></Sequence></BehaviorTree>

###

USER COMMAND: Detect and avoid hazardous materials in the environment.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: detect_hazards: Condition node - Scans the environment for hazardous materials and returns True if any are detected. avoid_hazards: Action node - Commands the agent to avoid the hazardous materials.
OUTPUT:
<BehaviorTree><Sequence><Selector><Condition>detect_hazards</Condition><Action>avoid_hazards</Action></Selector></Sequence></BehaviorTree>

###

USER COMMAND: Coordinate with other robots to build a structure.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: gather_materials: Action node - Directs the agent to gather the necessary materials for the structure. build_structure: Action node - Commands the agent to coordinate with other robots to build the designated structure.
OUTPUT:
<BehaviorTree><Sequence><Action>gather_materials</Action><Action>build_structure</Action></Sequence></BehaviorTree>

###

USER COMMAND: Locate and assist a lost robot in the environment.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: search_enviroment: Action node - Allows the agent to scan the environment to locate the lost robot. assist_robot: Action node - Commands the agent to assist the lost robot once located.
OUTPUT:
<BehaviorTree><Sequence><Action>search_environment</Action><Action>assist_robot</Action></Sequence></BehaviorTree>

###

USER COMMAND: Maintain communication and coordination within the swarm.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: communicate: Action node - Commands the agent to communicate with other robots within the swarm. coordinate_actions: Action node - Instructs the agent to coordinate their actions with other robots to ensure efficient completion of tasks.
OUTPUT:
<BehaviorTree><Sequence><Action>communicate</Action><Action>coordinate_actions</Action></Sequence></BehaviorTree>

###

USER COMMAND: Identify and locate the source of a signal.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: identify_signal: Action node - Commands the agent to identify the source of a designated signal. locate_source: Action node - Instructs the agent to locate the source once identified.
OUTPUT:
<BehaviorTree><Sequence><Action>identify_signal</Action><Action>locate_source</Action></Sequence></BehaviorTree>

###

USER COMMAND: Navigate through a maze and reach the end.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: navigate_maze: Action node - Guides the agent through the maze using a predefined path algorithm. reach_end: Condition node - Checks if the agent has reached the end of the maze.
OUTPUT:
<BehaviorTree><Sequence><Selector><Action>navigate_maze</Action><Condition>reach_end</Condition></Selector></Sequence></BehaviorTree>

###

USER COMMAND: Identify and retrieve a specific object from a cluttered environment.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: identify_object: Action node - Commands the agent to identify the specific object among the clutter. retrieve_object: Action node - Instructs the agent to retrieve the identified object from the environment.
OUTPUT:
<BehaviorTree><Sequence><Action>identify_object</Action><Action>retrieve_object</Action></Sequence></BehaviorTree>

###

USER COMMAND: Maintain energy levels by returning to a charging station.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: check_energy: Condition node - Checks the agent's energy levels and returns True if they are low. return_to_charging: Action node - Commands the agent to return to the charging station.
OUTPUT:
<BehaviorTree><Sequence><Selector><Condition>check_energy</Condition><Action>return_to_charging</Action></Selector></Sequence></BehaviorTree>

###

USER COMMAND: Clear a blocked pathway and continue on the designated path.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: check_obstacles: Condition node - Scans the environment for obstacles and returns True if any are detected. clear_path: Action node - Commands the agent to clear the path and continue on the designated route.
OUTPUT:
<BehaviorTree><Sequence><Selector><Condition>check_obstacles</Condition><Action>clear_path</Action></Selector></Sequence></BehaviorTree>

###

USER COMMAND: Collect samples from designated locations and return them to a research station.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: collect_samples: Action node - Directs the agent to collect samples from designated locations. return_to_station: Action node - Commands the agent to return to the research station with the collected samples.
OUTPUT:
<BehaviorTree><Sequence><Action>collect_samples</Action><Action>return_to_station</Action></Sequence></BehaviorTree>

###

USER COMMAND: Search for and collect resources until inventory is full, then return to base to drop off resources.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: search_for_resources: Action node (same as before). collect_resource: Action node (same as before). return_to_base: Action node (same as before). inventory_full: Condition node - checks if the agent's inventory is at maximum capacity.
OUTPUT:
<BehaviorTree><Sequence><Sequence><Condition>inventory_full</Condition><Sequence><Action>search_for_resources</Action><Action>collect_resource</Action></Sequence><Action>return_to_base</Action></Sequence></BehaviorTree>

###

USER COMMAND: Communicate with other robots in the swarm to perform a coordinated attack on a target.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: communicate: Action node - sends a message to other robots in the swarm. coordinate_attack: Action node - performs coordinated attack with other robots in the swarm. attack_target: Action node - attacks the designated target. receive_message: Condition node - checks if a message has been received from another robot.
OUTPUT:
<BehaviorTree><Sequence><Action>communicate</Action><Sequence><Condition>receive_message</Condition><Sequence><Action>coordinate_attack</Action><Action>attack_target</Action></Sequence></Sequence></BehaviorTree>

###

USER COMMAND: Navigate through a maze, avoiding obstacles and enemies.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: navigate_maze: Subtree node - uses move_to_target to navigate through the maze. avoid_obstacles: Condition node - checks for any obstacles in the agent's path. avoid_enemies: Condition node - checks for any enemy robots in the agent's path.
OUTPUT:
<BehaviorTree><Sequence><Action>navigate_maze</Action><Selector><Condition>avoid_obstacles</Condition><Condition>avoid_enemies</Condition></Selector></Sequence></BehaviorTree>

###

USER COMMAND: Work together with other robots to collectively lift and move a heavy object to a designated location.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: coordinate_lift: Action node - coordinates the lift with other robots. lift_object: Action node - lifts the heavy object. move_with_object: Action node - moves with the heavy object. designated_location: Condition node - checks if the robot has reached the designated location.
OUTPUT:
<BehaviorTree><Sequence><Action>coordinate_lift</Action><Sequence><Condition>designated_location</Condition><Action>lift_object</Action><Action>move_with_object</Action></Sequence></Sequence></BehaviorTree>

###

USER COMMAND: Go to a specific location and deposit a package, while avoiding any potential collisions.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: go_to_location: Subtree node - uses move_to_target to reach the designated location. deposit_package: Action node - deposits a package at the designated location. avoid_collisions: Condition node - checks for any nearby obstacles.
OUTPUT:
<BehaviorTree><Sequence><Action>go_to_location</Action><Sequence><Condition>avoid_collisions</Condition><Action>deposit_package</Action></Sequence></Sequence></BehaviorTree>

###

USER COMMAND: Perform a task while maintaining a safe distance from a designated target.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: maintain_safe_distance: Subtree node - contains actions to maintain a safe distance from the target. perform_task: Action node - performs the designated task. designated_target: Condition node - checks if the agent has reached the designated target.
OUTPUT:
<BehaviorTree><Sequence><Action>maintain_safe_distance</Action><Sequence><Condition>designated_target</Condition><Action>perform_task</Action></Sequence></Sequence></BehaviorTree>

###

USER COMMAND: Search for and rescue any stranded robots in the environment.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: search_for_stranded: Action node - searches for any stranded robots. coordinate_rescue: Action node - coordinates the rescue with other robots. rescue_robot: Action node - rescues the stranded robot. found_stranded: Condition node - checks if a stranded robot has been found.
OUTPUT:
<BehaviorTree><Sequence><Action>search_for_stranded</Action><Sequence><Condition>found_stranded</Condition><Sequence><Action>coordinate_rescue</Action><Action>rescue_robot</Action></Sequence></Sequence></BehaviorTree>

###

USER COMMAND: Work together with other robots to build a structure, assigning specific tasks to each robot.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: coordinate_tasks: Action node - coordinates tasks with other robots. assign_task: Action node - assigns a specific task to the designated robot. perform_task: Subtree node - contains actions to perform the assigned task.
OUTPUT:
<BehaviorTree><Sequence><Sequence><Action>coordinate_tasks</Action><Sequence><Action>assign_task</Action><Sequence><Condition>perform_task</Condition><Action>perform_task</Action></Sequence></Sequence></Sequence></Sequence></BehaviorTree>

###

USER COMMAND: Explore and map out a new environment, avoiding any potential hazards.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: explore_environment: Subtree node - contains actions to explore and map the environment using sensors and mapping algorithms. avoid_hazards: Condition node - checks for any potential hazards in the environment.
OUTPUT:
<BehaviorTree><Sequence><Action>explore_environment</Action><Sequence><Condition>avoid_hazards</Condition></Sequence></Sequence></BehaviorTree>

###

USER COMMAND: Continuously monitor and adjust the trajectory of the robot in order to maintain a specified altitude.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: monitor_altitude: Subtree node - uses sensors and autopilot systems to monitor and adjust the altitude. maintain_altitude: Action node - adjusts the trajectory to maintain the specified altitude. specified_altitude: Condition node - checks if the specified altitude has been reached.
OUTPUT:
<BehaviorTree><Sequence><Action>monitor_altitude</Action><Sequence><Condition>specified_altitude</Condition><Action>maintain_altitude</Action></Sequence></Sequence></BehaviorTree>

###

USER COMMAND: Work together with other robots to collectively transport a heavy object through a narrow space.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: coordinate_transport: Action node - coordinates the transport with other robots. transport_object: Action node - transports the heavy object. narrow_space: Condition node - checks if the robot has reached a narrow space and needs to coordinate with other robots.
OUTPUT:
<BehaviorTree><Sequence><Action>coordinate_transport</Action><Sequence><Condition>narrow_space</Condition><Action>transport_object</Action></Sequence></Sequence></BehaviorTree>

###

USER COMMAND: Defend a designated target from incoming attacks, while also attacking any nearby enemies.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: defend_target: Subtree node - contains actions to defend the designated target. attack_enemies: Action node - attacks any nearby enemies. incoming_attack: Condition node - checks for any incoming attacks from enemies.
OUTPUT:
<BehaviorTree><Sequence><Action>defend_target</Action><Sequence><Condition>incoming_attack</Condition><Action>attack_enemies</Action></Sequence></Sequence></BehaviorTree>

###

USER COMMAND: Coordinate with other robots to form a search grid and systematically search for a target object.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: coordinate_search: Action node - coordinates with other robots to form a search grid. search_grid: Subtree node - uses move_to_target to search the designated grid area. found_object: Condition node - checks if the target object has been found.
OUTPUT:
<BehaviorTree><Sequence><Action>coordinate_search</Action><Sequence><Condition>found_object</Condition><Action>search_grid</Action></Sequence></Sequence></BehaviorTree>

###

USER COMMAND: Utilize visual recognition to identify and track a designated target.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: identify_target: Subtree node - uses visual recognition algorithms to identify the designated target. track_target: Action node - tracks the movement of the target. designated_target: Condition node - checks if the designated target is still in the field of view.
OUTPUT:
<BehaviorTree><Sequence><Action>identify_target</Action><Sequence><Condition>designated_target</Condition><Action>track_target</Action></Sequence></Sequence></BehaviorTree>

###

USER COMMAND: Work together with other robots to form a coordinated defense against a swarm of incoming enemies.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: coordinate_defense: Action node - coordinates with other robots to form a defensive strategy. defend_against_swarm: Subtree node - contains actions to defend against a swarm of enemies. enemy_approaching: Condition node - checks for any nearby enemies.
OUTPUT:
<BehaviorTree><Sequence><Action>coordinate_defense</Action><Sequence><Condition>enemy_approaching</Condition><Action>defend_against_swarm</Action></Sequence></Sequence></BehaviorTree>

###

USER COMMAND: Use sensors and mapping algorithms to navigate through a dark and complex environment.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: navigate_dark: Subtree node - uses sensors and mapping algorithms to navigate through a dark environment. handle_obstacles: Condition node - checks for any obstacles in the agent's path. handle_complexity: Condition node - checks for any complex features in the environment.
OUTPUT:
<BehaviorTree><Sequence><Action>navigate_dark</Action><Sequence><Condition>handle_obstacles</Condition><Action>handle_complexity</Action></Sequence></Sequence></BehaviorTree>

###

USER COMMAND: Coordinate with other robots to triangulate the location of a target object using different sensor readings.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: coordinate_triangulation: Action node - coordinates with other robots to pool sensor readings. calculate_location: Action node - uses sensor readings to triangulate the location of the target object. designated_target: Condition node - checks if the calculated location is accurate enough to be considered the target's location.
OUTPUT:
<BehaviorTree><Sequence><Action>coordinate_triangulation</Action><Sequence><Condition>designated_target</Condition><Action>calculate_location</Action></Sequence></Sequence></BehaviorTree>

###

USER COMMAND: Use swarm intelligence to solve a maze, with each robot taking a different path and communicating with each other to find the exit.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: swarm_maze_solver: Subtree node - uses swarm intelligence to solve the maze. communicate_paths: Action node - each robot communicates their path to the others. choose_path: Action node - each robot selects the best path based on the communicated paths. found_exit: Condition node - checks if the exit has been found.
OUTPUT:
<BehaviorTree><Sequence><Action>swarm_maze_solver</Action><Sequence><Condition>found_exit</Condition><Sequence><Action>communicate_paths</Action><Action>choose_path</Action></Sequence></Sequence></Sequence></BehaviorTree>

###

USER COMMAND: 'Gather all nearby objects and return to the starting point.'
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command:
{gather_objects: 'Action node: Gather all nearby objects into a designated location.
Returns: True if all objects are gathered, False if objects are not gathered.', is_object_nearby: 'Condition node: Check if there are any objects nearby.
Returns: True if objects are nearby, otherwise False.', return_to_start: 'Action node: Return to the starting point from current location.
Returns: True if agent successfully returns to the starting point, otherwise False.'} to construct a behavior tree in XML format to the following command.
OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Action>gather_objects</Action><Condition>is_object_nearby</Condition></Sequence><Action>return_to_start</Action></Selector></Sequence>
</BehaviorTree>

###

USER COMMAND: 'Perform random movements until a specific task is completed.'
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command:
{perform_random_movements: 'Action node: Perform a series of random movements.
Returns: True if task is completed, False if task is not completed.', is_task_completed: 'Condition node: Check if the specific task has been completed.
Returns: True if task is completed, otherwise False.'} to construct a behavior tree in XML format to the following command.
OUTPUT:
<BehaviorTree><Sequence><Action>perform_random_movements</Action><Condition>is_task_completed</Condition></Sequence></BehaviorTree>

###

USER COMMAND: 'Avoid obstacles while reaching a designated goal.'
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command:
{avoid_obstacles: 'Action node: Use obstacle avoidance algorithms to navigate around obstacles.
Returns: True if agent successfully avoids obstacles, False if agent collides with obstacles.', is_goal_reached: 'Condition node: Check if the designated goal has been reached.
Returns: True if goal is reached, otherwise False.', reach_goal: 'Action node: Move towards the designated goal.
Returns: True if agent successfully reaches goal, False if agent fails to reach goal.'} to construct a behavior tree in XML format to the following command.
OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Action>avoid_obstacles</Action><Condition>is_goal_reached</Condition></Sequence><Action>reach_goal</Action></Selector></Sequence>
</BehaviorTree>

###

USER COMMAND: 'Patrol a designated area while avoiding collisions with other agents.'
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command:
{patrol_area: 'Action node: Patrol a designated area.
Returns: True if patrol is completed successfully, False if agent is unable to complete patrol.', avoid_collisions: 'Action node: Use collision avoidance algorithms to avoid collisions with other agents.
Returns: True if agent successfully avoids collisions, False if agent collides with other agents.'} to construct a behavior tree in XML format to the following command.
OUTPUT:
<BehaviorTree><Sequence><Action>patrol_area</Action><Selector><Sequence><Action>avoid_collisions</Action><Condition>is_collision_detected</Condition></Sequence></Selector></Sequence>
</BehaviorTree>

###

USER COMMAND: 'Search for a specific object and retrieve it.'
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command:
{search_object: 'Action node: Search the area for a specific object.
Returns: True if object is found, False if object is not found.', retrieve_object: 'Action node: Retrieve the specific object.
Returns: True if object is retrieved, False if object retrieval fails.'} to construct a behavior tree in XML format to the following command.
OUTPUT:
<BehaviorTree><Sequence><Action>search_object</Action><Action>retrieve_object</Action></Sequence></BehaviorTree>

###

USER COMMAND: 'Follow a designated leader while maintaining a specified distance.'
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command:
{follow_leader: 'Action node: Follow the designated leader.
Returns: True if agent successfully follows the leader, False if agent fails to follow the leader.', maintain_distance: 'Action node: Maintain a specified distance from the leader.
Returns: True if agent maintains distance, False if agent gets too close or too far from the leader.'} to construct a behavior tree in XML format to the following command.
OUTPUT:
<BehaviorTree><Sequence><Action>follow_leader</Action><Action>maintain_distance</Action></Sequence></BehaviorTree>

###

USER COMMAND: 'Coordinate actions with neighboring agents to build a structure.'
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command:
{coordinate_actions: 'Action node: Communicate and coordinate with neighboring agents to build a structure.
Returns: True if structure is successfully built, False if coordination fails.', build_structure: 'Action node: Use designated tools and materials to build the structure.
Returns: True if structure is successfully built, False if building process fails.'} to construct a behavior tree in XML format to the following command.
OUTPUT:
<BehaviorTree><Sequence><Action>coordinate_actions</Action><Action>build_structure</Action></Sequence></BehaviorTree>

###

USER COMMAND: 'Escape from a dangerous situation.'
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command:
{find_escape_route: 'Action node: Use mapping and path planning algorithms to find an escape route.
Returns: True if escape route is found, False if no escape route is available.', follow_escape_route: 'Action node: Follow the designated escape route.
Returns: True if agent successfully escapes, False if agent fails to follow the escape route.'} to construct a behavior tree in XML format to the following command.
OUTPUT:
<BehaviorTree><Sequence><Action>find_escape_route</Action><Action>follow_escape_route</Action></Sequence></BehaviorTree>

###

USER COMMAND: 'Monitor energy levels and recharge when necessary.'
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command:
{check_energy_levels: 'Condition node: Check the energy levels of the agent.
Returns: True if energy levels are below a certain threshold, False if energy levels are above the threshold.', recharge: 'Action node: Return to a designated charging station and recharge.
Returns: True if charging is successful, False if charging fails.'} to construct a behavior tree in XML format to the following command.
OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>check_energy_levels</Condition><Action>recharge</Action></Sequence><Action>continue_patrol</Action></Selector></BehaviorTree>

###

USER COMMAND: 'Collect and transport objects to a specified location.'
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command:
{collect_objects: 'Action node: Collect objects located in the surrounding area.
Returns: True if all objects are collected, False if collection process fails.', transport_objects: 'Action node: Transport collected objects to a specified location.
Returns: True if all objects are successfully transported, False if transport process fails.'} to construct a behavior tree in XML format to the following command.
OUTPUT:
<BehaviorTree><Sequence><Action>collect_objects</Action><Action>transport_objects</Action></Sequence></BehaviorTree>

###

USER COMMAND: 'Cooperate with other agents to navigate through a maze.'
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command:
{communicate_with_teammates: 'Action node: Use communication protocols to send and receive information from other agents.
Returns: True if successful communication is established, False if communication fails.', navigate_maze: 'Action node: Use mapping and path planning algorithms to navigate through the maze.
Returns: True if agent successfully reaches the designated end point, False if agent gets lost or stuck.'} to construct a behavior tree in XML format to the following command.
OUTPUT:
<BehaviorTree><Sequence><Action>communicate_with_teammates</Action><Action>navigate_maze</Action></Sequence></BehaviorTree>

###

USER COMMAND: 'Respond to external stimuli and take appropriate action.'
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command:
{check_external_stimuli: 'Condition node: Check for any external stimuli, such as sound or light.
Returns: True if stimuli is detected, False if no stimuli is present.', respond_to_stimuli: 'Action node: Take appropriate action based on the type of stimuli detected.
Returns: True if agent successfully responds, False if response fails.'} to construct a behavior tree in XML format to the following command.
OUTPUT:
<BehaviorTree><Sequence><Condition>check_external_stimuli</Condition><Action>respond_to_stimuli</Action></Sequence></BehaviorTree>

###

USER COMMAND: 'Divide and conquer a large task with multiple agents.'
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command:
{divide_task: 'Action node: Divide a large task into smaller sub-tasks.
Returns: True if task is successfully divided, False if division process fails.', delegate_sub_tasks: 'Action node: Assign each sub-task to a different agent and coordinate their efforts.
Returns: True if all sub-tasks are completed, False if any sub-task fails.'} to construct a behavior tree in XML format to the following command.
OUTPUT:
<BehaviorTree><Sequence><Action>divide_task</Action><Action>delegate_sub_tasks</Action></Sequence></BehaviorTree>

###

USER COMMAND: 'Perform designated tasks based on priority level.'
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command:
{check_priority_level: 'Condition node: Check the priority level of the designated task.
Returns: True if priority level is high, False if priority level is low.', perform_high_priority: 'Action node: Perform the designated task with high priority level.
Returns: True if task is completed, False if task fails.', perform_low_priority: 'Action node: Perform the designated task with low priority level.
Returns: True if task is completed, False if task fails.'} to construct a behavior tree in XML format to the following command.
OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>check_priority_level</Condition><Action>perform_high_priority</Action></Sequence><Action>perform_low_priority</Action></Selector></BehaviorTree>

###

USER COMMAND: 'Respond to power outages and continue operations.'
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command:
{check_power_status: 'Condition node: Check the power status.
Returns: True if power is still available, False if power outage is detected.', continue_operations: 'Action node: Continue operations using alternative power sources.
Returns: True if operations can be continued, False if operations are halted.'} to construct a behavior tree in XML format to the following command.
OUTPUT:
<BehaviorTree><Sequence><Condition>check_power_status</Condition><Action>continue_operations</Action></Sequence></BehaviorTree>

###

USER COMMAND: 'Stick together as a group while exploring an unknown environment.'
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command:
{follow_designated_leader: 'Action node: Follow the designated leader at all times.
Returns: True if agent successfully follows the leader, False if agent fails to follow the leader.', explore_unknown_area: 'Action node: Use mapping and exploration algorithms to explore the unknown environment.
Returns: True if agent successfully explores the designated area, False if exploration fails.'} to construct a behavior tree in XML format to the following command.
OUTPUT:
<BehaviorTree><Sequence><Action>follow_designated_leader</Action><Action>explore_unknown_area</Action></Sequence></BehaviorTree>

###

USER COMMAND: 'Load and unload cargo from a designated location.'
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command:
{load_cargo: 'Action node: Load cargo from a designated area.
Returns: True if all cargo is successfully loaded, False if loading process fails.', deliver_to_destination: 'Action node: Move to the designated destination and unload cargo.
Returns: True if all cargo is successfully delivered, False if delivery process fails.'} to construct a behavior tree in XML format to the following command.
OUTPUT:
<BehaviorTree><Sequence><Action>load_cargo</Action><Action>deliver_to_destination</Action></Sequence></BehaviorTree>

###

USER COMMAND: 'Follow designated paths while avoiding obstacles and other agents.'
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command:
{follow_path: 'Action node: Follow designated paths using mapping and path planning algorithms.
Returns: True if agent successfully follows the designated path, False if agent gets lost or stuck.', avoid_obstacles: 'Action node:
###

USER COMMAND: Navigate to the specified coordinate, avoiding obstacles along the way.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: goto_coordinate: Action node (same as before). avoid_obstacles: Subtree node - Uses a combination of actions and conditions to steer the agent away from obstacles. check_obstacle: Condition node - Checks if the agent is currently facing an obstacle.
OUTPUT:
<BehaviorTree><Sequence><Action>goto_coordinate</Action><Sequence><Condition>check_obstacle</Condition><Action>avoid_obstacles</Action></Sequence></Sequence></BehaviorTree>

###

USER COMMAND: Collect all the objects within a designated area and bring them to a specific location.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: collect_objects: Action node - Instructs the agent to pick up an object at its current location. navigate_to_location: Action node - Instructs the agent to move to a specific location. check_area: Condition node - Checks if the agent is within the designated area. empty_inventory: Action node - Empties the agent's inventory once it has reached the designated location.
OUTPUT:
<BehaviorTree><Sequence><Sequence><Condition>check_area</Condition><Sequence><Action>collect_objects</Action><Action>navigate_to_location</Action></Sequence><Action>empty_inventory</Action></Sequence></BehaviorTree>

###

USER COMMAND: If robots are in close proximity, group up and move together towards a common destination.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: group_up: Subtree node - Uses a combination of actions and conditions to bring the agents together. check_proximity: Condition node - Checks if the agents are within a certain distance from each other. move_together: Action node - Instructs the agents to move towards a specified destination together.
OUTPUT:
<BehaviorTree><Sequence><Sequence><Condition>check_proximity</Condition><Sequence><Action>group_up</Action><Action>move_together</Action></Sequence></Sequence></BehaviorTree>

###

USER COMMAND: Search for a specific object in the environment and return to the starting point once found.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: search_for_object: Action node - Instructs the agent to scan the environment for a specific object. get_starting_point: Function node - Retrieves the starting point of the agent in the environment. return_to_start: Action node - Instructs the agent to move back to the retrieved starting point.
OUTPUT:
<BehaviorTree><Sequence><Action>search_for_object</Action><Action>return_to_start</Action></Sequence></BehaviorTree>

###

USER COMMAND: Follow a designated leader robot, staying within a certain distance from it.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: follow_leader: Action node - Instructs the agent to follow another designated agent. keep_distance: Subtree node - Uses a combination of actions and conditions to maintain a set distance from the leader robot. check_leader_distance: Condition node - Checks the distance between the agent and the leader robot.
OUTPUT:
<BehaviorTree><Sequence><Action>follow_leader</Action><Sequence><Condition>check_leader_distance</Condition><Action>keep_distance</Action></Sequence></Sequence></BehaviorTree>

###

USER COMMAND: Swarm the area and communicate any identified obstacles to each other.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: swarm_area: Action node - Instructs the agent to move around the designated area. communicate_obstacles: Action node - Instructs the agents to share information about any obstacles they encounter with each other. identify_obstacles: Subtree node - Uses a combination of actions and conditions to identify any obstacles in the environment.
OUTPUT:
<BehaviorTree><Sequence><Selector><Action>swarm_area</Action><Action>communicate_obstacles</Action></Selector><Action>identify_obstacles</Action></Sequence></BehaviorTree>

###

USER COMMAND: Divide into two teams and compete in a capture the flag game.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: divide_into_teams: Subtree node - Uses a combination of actions and conditions to divide the agents into two teams. compete: Subtree node - Uses actions and conditions to execute the capture the flag game rules. check_flag_location: Condition node - Checks the current location of the flag.
OUTPUT:
<BehaviorTree><Sequence><Action>divide_into_teams</Action><Action>compete</Action><Sequence><Condition>check_flag_location</Condition><Action>compete</Action></Sequence></Sequence></BehaviorTree>

###

USER COMMAND: Form a circle formation and rotate while facing outwards, scanning for any incoming threats.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: form_circle: Action node - Instructs the agents to move to specific positions in a circular formation. rotate: Action node - Instructs the agents to rotate together in a circular motion. scan_for_threats: Action node - Instructs the agents to scan the environment for any potential threats.
OUTPUT:
<BehaviorTree><Sequence><Action>form_circle</Action><Sequence><Action>rotate</Action><Action>scan_for_threats</Action></Sequence></Sequence></BehaviorTree>

###

USER COMMAND: Move to a designated location and perform a synchronized dance routine.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: move_to_location: Action node - Instructs the agents to move to the designated location. synchronize_dance: Subtree node - Uses a combination of actions and conditions to coordinate a dance routine. check_if_dancing: Condition node - Checks if the agents are currently performing the dance routine.
OUTPUT:
<BehaviorTree><Sequence><Action>move_to_location</Action><Sequence><Condition>check_if_dancing</Condition><Action>synchronize_dance</Action></Sequence></Sequence></BehaviorTree>

###

USER COMMAND: Distribute resources evenly among the swarm robots.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: distribute_resources: Subtree node - Uses a combination of actions and conditions to evenly distribute resources among the agents. check_resource_levels: Condition node - Checks the current resource levels of the agents. request_resource: Action node - Instructs the agents to request additional resources if needed.
OUTPUT:
<BehaviorTree><Sequence><Sequence><Condition>check_resource_levels</Condition><Sequence><Action>distribute_resources</Action><Action>request_resource</Action></Sequence></Sequence></BehaviorTree>

###

USER COMMAND: Work together to build a structure using available materials in the environment.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: gather_materials: Action node - Instructs the agents to collect materials from the environment. coordinate_building: Subtree node - Uses a combination of actions and conditions to coordinate the building process. check_if_building: Condition node - Checks if the agents are currently working on building the structure.
OUTPUT:
<BehaviorTree><Sequence><Action>gather_materials</Action><Sequence><Condition>check_if_building</Condition><Action>coordinate_building</Action></Sequence></BehaviorTree>

###

USER COMMAND: Use communication and swarm intelligence to collectively solve a puzzle.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: communicate: Subtree node - Uses actions and conditions to facilitate communication among the agents. swarm_intelligence: Subtree node - Utilizes the collective intelligence of the swarm to solve the puzzle. check_puzzle_solved: Condition node - Checks if the puzzle has been successfully solved.
14.OUTPUT:
<BehaviorTree><Selector><Sequence><Action>communicate</Action><Action>swarm_intelligence</Action></Sequence><Condition>check_puzzle_solved</Condition></Selector></BehaviorTree>

###

USER COMMAND: Follow a designated path while avoiding red traffic lights and stopping at green traffic lights.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: follow_path: Subtree node - Uses actions and conditions to guide the agents along a designated path. check_red_light: Condition node - Checks if the agent is currently facing a red traffic light. stay_at_green: Action node - Instructs the agent to remain stationary until the traffic light turns green.
OUTPUT:
<BehaviorTree><Sequence><Action>follow_path</Action><Sequence><Condition>check_red_light</Condition><Action>stay_at_green</Action></Sequence></Sequence></BehaviorTree>

###

USER COMMAND: Respond to a distress signal and provide assistance.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: receive_distress_signal: Action node - Instructs the agent to listen for a distress signal. navigate_to_distress: Action node - Instructs the agent to move to the location of the distress signal. provide_assistance: Action node - Instructs the agent to provide the necessary assistance at the location.
OUTPUT:
<BehaviorTree><Sequence><Action>receive_distress_signal</Action><Action>navigate_to_distress</Action><Action>provide_assistance</Action></Sequence></BehaviorTree>

###

USER COMMAND: Conduct a coordinated search and rescue mission.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: search_area: Subtree node - Uses actions and conditions to systematically search the designated area. communicate_status: Action node - Instructs the agents to share their search status with each other. perform_rescue: Action node - Instructs the agent to rescue any individuals that are found during the search.
OUTPUT:
<BehaviorTree><Sequence><Action>search_area</Action><Selector><Action>communicate_status</Action><Action>perform_rescue</Action></Selector></Sequence></BehaviorTree>

###

USER COMMAND: Work together to push a large obstacle out of the way.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: approach_obstacle: Action node - Instructs the agents to move towards the obstacle. coordinate_push: Subtree node - Uses actions and conditions to coordinate the pushing process. check_if_moving: Condition node - Checks if the agents are currently pushing the obstacle.
OUTPUT:
<BehaviorTree><Sequence><Action>approach_obstacle</Action><Sequence><Condition>check_if_moving</Condition><Action>coordinate_push</Action></Sequence></Sequence></BehaviorTree>

###

USER COMMAND: Syncronize movement to spell out a word or phrase.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: move_to_location: Action node - Instructs the agents to move to specific locations to form the desired word or phrase. synchronize: Subtree node - Uses actions and conditions to coordinate the movements of the agents. check_if_spelling: Condition node - Checks if the agents are currently spelling out the desired word or phrase.
OUTPUT:
<BehaviorTree><Sequence><Sequence><Condition>check_if_spelling</Condition><Selector><Action>move_to_location</Action><Action>synchronize</Action></Selector></Sequence></Sequence></BehaviorTree>

###

USER COMMAND: Use swarm strategies to efficiently collect and store resources.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: swarm_collection: Subtree node - Uses a combination of actions and conditions to coordinate the collection of resources. store_resources: Action node - Instructs the agent to bring the collected resources to a designated storage location. check_storage_capacity: Condition node - Checks if the designated storage location has enough capacity for additional resources.
OUTPUT:
<BehaviorTree><Sequence><Sequence><Condition>check_storage_capacity</Condition><Selector><Action>swarm_collection</Action><Action>store_resources</Action></Selector></Sequence></Sequence></BehaviorTree>
###

USER COMMAND: Collect resources from multiple locations and bring them back to base.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: collect_resources: Subtree node - Represents a behavior tree for collecting resources from multiple locations. bring_to_base: Action node - Makes the agent bring collected resources back to base. is_resource_full: Condition node - Checks if the agent's resource inventory is full.
OUTPUT:
<BehaviorTree><Selector><Sequence><Action>collect_resources</Action><Selector><Sequence><Condition>is_resource_full</Condition><Action>bring_to_base</Action></Sequence></Selector></Sequence></BehaviorTree>

###

USER COMMAND: Explore the environment and avoid obstacles.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: explore: Action node - Makes the agent explore the environment. avoid_obstacles: Subtree node - Represents a behavior tree for avoiding obstacles. is_obstacle_detected: Condition node - Checks if the agent has detected an obstacle.
OUTPUT:
<BehaviorTree><Sequence><Action>explore</Action><Selector><Sequence><Condition>is_obstacle_detected</Condition><Action>avoid_obstacles</Action></Sequence></Selector></Sequence></BehaviorTree>

###

USER COMMAND: Form a defensive line with other robots to protect a target location.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: form_defensive_line: Subtree node - Represents a behavior tree for forming a defensive line. protect_target: Action node - Makes the agent protect the designated target location. is_target_under_attack: Condition node - Checks if the target location is under attack.
OUTPUT:
<BehaviorTree><Sequence><Action>form_defensive_line</Action><Action>protect_target</Action><Condition>is_target_under_attack</Condition></Sequence></BehaviorTree>

###

USER COMMAND: Gather and collect resources in a designated area, deposit them at a storage location, and then return to continue gathering.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: gather_resources: Action node - Makes the agent gather resources in a designated area. deposit_resources: Action node - Makes the agent deposit resources at a storage location. return_to_gathering: Subtree node - Represents a behavior tree for returning to gather resources. is_resource_empty: Condition node - Checks if the agent's resource inventory is empty.
OUTPUT:
<BehaviorTree><Sequence><Action>gather_resources</Action><Sequence><Selector><Condition>is_resource_empty</Condition><Action>return_to_gathering</Action></Selector><Action>deposit_resources</Action></Sequence></Sequence></BehaviorTree>

###

USER COMMAND: Work together with other robots to move a heavy object.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: coordinate_movement: Subtree node - Represents a behavior tree for coordinating movement with other robots. move_object: Action node - Makes the agent move the designated heavy object. is_object_moving: Condition node - Checks if the object is currently being moved.
OUTPUT:
<BehaviorTree><Sequence><Action>coordinate_movement</Action><Selector><Sequence><Condition>is_object_moving</Condition><Action>move_object</Action></Sequence></Selector></Sequence></BehaviorTree>

###

USER COMMAND: Divide and conquer - split up into smaller groups and complete multiple tasks simultaneously.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: divide_and_conquer: Subtree node - Represents a behavior tree for dividing and conquering. complete_task: Action node - Makes the agent complete a designated task. is_task_completed: Condition node - Checks if the task has been completed.
OUTPUT:
<BehaviorTree><Selector><Sequence><Action>divide_and_conquer</Action><Selector><Sequence><Condition>is_task_completed</Condition><Action>complete_task</Action></Sequence></Selector></Sequence></BehaviorTree>

###

USER COMMAND: Follow a designated leader while keeping a set distance between robots.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: follow_leader: Action node - Makes the agent follow a designated leader. keep_distance: Action node - Makes the agent maintain a set distance between robots. is_leader_moving: Condition node - Checks if the leader is currently moving.
OUTPUT:
<BehaviorTree><Sequence><Action>follow_leader</Action><Selector><Sequence><Condition>is_leader_moving</Condition><Action>keep_distance</Action></Sequence></Selector></Sequence></BehaviorTree>

###

USER COMMAND: Search and rescue - navigate through a maze and find and carry a target to a designated location.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: rescue: Subtree node - Represents a behavior tree for searching and rescuing. carry_target: Action node - Makes the agent carry the designated target. navigate_maze: Action node - Makes the agent navigate through a maze. is_target_found: Condition node - Checks if the target has been found.
OUTPUT:
<BehaviorTree><Sequence><Action>rescue</Action><Sequence><Selector><Condition>is_target_found</Condition><Action>carry_target</Action></Selector><Action>navigate_maze</Action></Sequence></Sequence></BehaviorTree>

###

USER COMMAND: Assemble and build a structure using pre-defined modules.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: assemble_structure: Subtree node - Represents a behavior tree for assembling and building a structure. construct_module: Action node - Makes the agent construct a pre-defined module. is_module_built: Condition node - Checks if the module has been successfully built.
OUTPUT:
<BehaviorTree><Sequence><Action>assemble_structure</Action><Selector><Sequence><Condition>is_module_built</Condition><Action>construct_module</Action></Sequence></Selector></Sequence></BehaviorTree>

###

USER COMMAND: Defend against multiple simultaneous attacks from different directions.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: defend: Subtree node - Represents a behavior tree for defending against multiple simultaneous attacks. orientate_and_attack: Action node - Makes the agent orientate and attack enemies in a specific direction. is_attack_detected: Condition node - Checks if an attack has been detected.
OUTPUT:
<BehaviorTree><Selector><Sequence><Action>defend</Action><Selector><Sequence><Condition>is_attack_detected</Condition><Action>orientate_and_attack</Action></Sequence></Selector></Sequence></BehaviorTree>

###

USER COMMAND: Collaboratively map out and explore a new environment.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: map_exploration: Subtree node - Represents a behavior tree for mapping and exploring a new environment. explore_area: Action node - Makes the agent explore a specific area. is_map_complete: Condition node - Checks if the map has been fully explored.
OUTPUT:
<BehaviorTree><Sequence><Action>map_exploration</Action><Selector><Sequence><Condition>is_map_complete</Condition><Action>explore_area</Action></Sequence></Selector></Sequence></BehaviorTree>

###

USER COMMAND: Coordinate movements to quickly transport an injured robot back to base for repairs.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: transport_injured_robot: Subtree node - Represents a behavior tree for coordinating movements to transport an injured robot back to base. repair_robot: Action node - Makes the agent repair the injured robot upon reaching the base. is_injured: Condition node - Checks if the injured robot is in need of transport.
OUTPUT:
<BehaviorTree><Sequence><Action>transport_injured_robot</Action><Selector><Sequence><Condition>is_injured</Condition><Action>repair_robot</Action></Sequence></Selector></Sequence></BehaviorTree>

###

USER COMMAND: Use swarm intelligence to find and retrieve a buried object.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: retrieve_object: Subtree node - Represents a behavior tree for finding and retrieving a buried object using swarm intelligence. dig_and_uncover: Action node - Makes the agent dig and uncover the buried object. is_object_found: Condition node - Checks if the object has been successfully found.
OUTPUT:
<BehaviorTree><Sequence><Action>retrieve_object</Action><Selector><Sequence><Condition>is_object_found</Condition><Action>dig_and_uncover</Action></Sequence></Selector></Sequence></BehaviorTree>

###

USER COMMAND: Cooperatively build a structure while avoiding collisions and maintaining a steady pace.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: build_structure: Subtree node - Represents a behavior tree for cooperatively building a structure while avoiding collisions and maintaining a steady pace. construct_module: Action node - Makes the agent construct a designated module. avoid_collisions: Action node - Makes the agent avoid collisions with other robots. maintain_pace: Action node - Makes the agent maintain a steady pace. is_module_built: Condition node - Checks if the module has been successfully built.
OUTPUT:
<BehaviorTree><Sequence><Action>build_structure</Action><Selector><Sequence><Condition>is_module_built</Condition><Action>construct_module</Action></Sequence><Sequence><Action>avoid_collisions</Action><Action>maintain_pace</Action></Sequence></Selector></Sequence></BehaviorTree>

###

USER COMMAND: Use swarm communication to navigate through a maze and reach a designated exit.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: navigate_maze: Subtree node - Represents a behavior tree for using swarm communication to navigate through a maze and reach a designated exit. communicate: Action node - Makes the agent communicate with other robots to determine the best path. navigate_exit: Action node - Makes the agent navigate towards the designated exit. is_exit_reached: Condition node - Checks if the designated exit has been reached.
OUTPUT:
<BehaviorTree><Sequence><Action>navigate_maze</Action><Selector><Sequence><Condition>is_exit_reached</Condition><Action>navigate_exit</Action></Sequence><Sequence><Action>communicate</Action><Action>navigate_exit</Action></Sequence></Selector></Sequence></BehaviorTree>

###

USER COMMAND: Use swarm coordination to lift and transport a heavy object to a designated location.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: transport_object: Subtree node - Represents a behavior tree for using swarm coordination to lift and transport a heavy object to a designated location. lift_object: Action node - Makes the agent lift the designated heavy object. is_object_lifted: Condition node - Checks if the object has been successfully lifted.
OUTPUT:
<BehaviorTree><Sequence><Action>transport_object</Action><Selector><Sequence><Condition>is_object_lifted</Condition><Action>lift_object</Action></Sequence><Sequence><Action>transport_object</Action><Action>lift_object</Action></Sequence></Selector></Sequence></BehaviorTree>

###

USER COMMAND: Utilize swarm intelligence to search for and repair a damaged area.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: repair_damaged_area: Subtree node - Represents a behavior tree for utilizing swarm intelligence to search for and repair a damaged area. search_area: Action node - Makes the agent search a designated area for signs of damage. repair_damage: Action node - Makes the agent repair any identified damage. is_area_repaired: Condition node - Checks if the designated area has been successfully repaired.
OUTPUT:
<BehaviorTree><Sequence><Action>repair_damaged_area</Action><Selector><Sequence><Condition>is_area_repaired</Condition><Action>repair_damage</Action></Sequence><Sequence><Action>search_area</Action><Action>repair_damage</Action></Sequence></Selector></Sequence></BehaviorTree>

###

USER COMMAND: Use swarm coordination to push a large object off a designated platform.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: push_object: Subtree node - Represents a behavior tree for using swarm coordination to push a large object off a designated platform. move_closer: Action node - Makes the agent move closer to the designated platform. is_object_on_platform: Condition node - Checks if the large object is on the designated platform.
OUTPUT:
<BehaviorTree><Sequence><Action>push_object</Action><Selector><Sequence><Condition>is_object_on_platform</Condition><Action>move_c
###

USER COMMAND: Avoid other swarm robots while completing the assigned task.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: avoid_other_robots: Condition node - Checks if other robots are within a specified distance. move_away: Action node - Moves the agent away from other robots. complete_task: Action node - Performs the assigned task.
OUTPUT:
<BehaviorTree><Sequence><Condition>avoid_other_robots</Condition><Action>move_away</Action></Sequence><Action>complete_task</Action></Sequence>

###

USER COMMAND: Follow the leader swarm robot, but stop if the leader stops for more than 5 seconds.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: follow_leader: Action node - Makes the agent follow another robot. leader_stopped: Condition node - Checks if the leader has stopped moving. stop: Action node - Stops the agent's movement. wait: Action node - Waits for a specified amount of time. restart_movement: Action node - Restarts the agent's movement after waiting.
OUTPUT:
<BehaviorTree><Selector><Sequence><Action>follow_leader</Action><Condition>leader_stopped</Condition><Action>stop</Action><Action>wait(5 seconds)</Action></Sequence><Action>restart_movement</Action></Selector></BehaviorTree>

###

USER COMMAND: Guard a certain area and attack any intruders that approach.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: guard_area: Action node - Makes the agent stay in a specific area. detect_intruders: Condition node - Checks if any intruders are within the guarded area. attack_intruder: Subtree node - Represents a behavior tree for attacking an intruder.
OUTPUT:
<BehaviorTree><Sequence><Action>guard_area</Action><Selector><Condition>detect_intruders</Condition><Action>attack_intruder</Action></Selector></Sequence></BehaviorTree>

###

USER COMMAND: Coordinate with other robots to form a wall and prevent objects from passing through.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: coordinate_with_others: Action node - Makes the agent coordinate with other robots. form_wall: Action node - Positions the agent to form a wall with other robots. prevent_passing: Condition node - Checks if any objects are trying to pass through the wall. block_object: Subtree node - Represents a behavior tree for blocking objects.
OUTPUT:
<BehaviorTree><Selector><Sequence><Action>coordinate_with_others</Action><Action>form_wall</Action><Condition>prevent_passing</Condition><Action>block_object</Action></Sequence></Selector></BehaviorTree>

###

USER COMMAND: Search a designated area for a specific object and retrieve it.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: search_area: Action node - Makes the agent search the designated area. detect_object: Condition node - Checks if the specific object has been found. retrieve_object: Action node - Retrieves the object.
OUTPUT:
<BehaviorTree><Selector><Sequence><Action>search_area</Action><Condition>detect_object</Condition><Action>retrieve_object</Action></Sequence></Selector></BehaviorTree>

###

USER COMMAND: Follow the swarm behavior and protect the queen.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: follow_swarm: Action node - Makes the agent follow swarm behavior. protect_queen: Action node - Positions the agent to protect the queen.
OUTPUT:
<BehaviorTree><Action>follow_swarm</Action><Action>protect_queen</Action></BehaviorTree>

###

USER COMMAND: Perform a coordinated dance routine with other robots.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: synchronized_movement: Condition node - Checks if other robots are in sync for the dance routine. perform_dance: Action node - Performs the designated dance routine.
OUTPUT:
<BehaviorTree><Sequence><Condition>synchronized_movement</Condition><Action>perform_dance</Action></Sequence></BehaviorTree>

###

USER COMMAND: Detect and extinguish fires in a designated area.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: detect_fire: Condition node - Checks if any fires are present in the designated area. extinguish_fire: Action node - Extinguishes the fire.
OUTPUT:
<BehaviorTree><Selector><Condition>detect_fire</Condition><Action>extinguish_fire</Action></Selector></BehaviorTree>

###

USER COMMAND: Repair and maintain a designated area.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: maintain_area: Action node - Makes the agent maintain the designated area. check_repairs: Condition node - Checks if any repairs are needed in the area. perform_repair: Action node - Performs any necessary repairs in the area.
OUTPUT:
<BehaviorTree><Selector><Sequence><Action>maintain_area</Action><Condition>check_repairs</Condition><Action>perform_repair</Action></Sequence></Selector></BehaviorTree>

###

USER COMMAND: Collaborate with other robots to build a designated structure.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: coordinate_with_others: Action node - Makes the agent collaborate with other robots. build_structure: Action node - Positions the agent to build the designated structure.
OUTPUT:
<BehaviorTree><Action>coordinate_with_others</Action><Action>build_structure</Action></BehaviorTree>

###

USER COMMAND: Collect and transport resources to a designated location.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: collect_resources: Action node - Makes the agent collect resources. transport_resources: Action node - Positions the agent to transport resources to a designated location.
OUTPUT:
<BehaviorTree><Action>collect_resources</Action><Action>transport_resources</Action></BehaviorTree>

###

USER COMMAND: Follow the designated path and detect any deviations from it.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: follow_path: Action node - Makes the agent follow the designated path. detect_deviations: Condition node - Checks if the agent has deviated from the path. correct_path: Action node - Corrects the agent's course to follow the designated path again.
OUTPUT:
<BehaviorTree><Selector><Sequence><Action>follow_path</Action><Condition>detect_deviations</Condition><Action>correct_path</Action></Sequence></Selector></BehaviorTree>

###

USER COMMAND: Scan the designated area for any suspicious objects and dispose of them.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: scan_area: Action node - Makes the agent scan the designated area. detect_suspicious: Condition node - Checks if any suspicious objects are present. dispose_object: Action node - Disposes of the object.
OUTPUT:
<BehaviorTree><Selector><Sequence><Action>scan_area</Action><Condition>detect_suspicious</Condition><Action>dispose_object</Action></Sequence></Selector></BehaviorTree>

###

USER COMMAND: Coordinate with other robots to gather information and analyze it.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: coordinate_with_others: Action node - Makes the agent coordinate with other robots. gather_information: Action node - Gathers information from the surroundings. analyze_data: Action node - Analyzes the gathered information.
OUTPUT:
<BehaviorTree><Selector><Action>coordinate_with_others</Action><Sequence><Action>gather_information</Action><Action>analyze_data</Action></Sequence></Selector></BehaviorTree>

###

USER COMMAND: Detect any suspicious behavior from other robots and report it to a designated location.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: detect_suspicious_behavior: Condition node - Checks for any suspicious behavior from other robots. report_location: Action node - Reports the location of the suspicious behavior to a designated location.
OUTPUT:
<BehaviorTree><Selector><Condition>detect_suspicious_behavior</Condition><Action>report_location</Action></Selector></BehaviorTree>

###

USER COMMAND: Protect a designated object from any harm.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: protect_object: Action node - Makes the agent protect the designated object. detect_harm: Condition node - Checks for any potential harm to the object. prevent_damage: Action node - Performs actions to prevent harm to the object.
OUTPUT:
<BehaviorTree><Selector><Sequence><Action>protect_object</Action><Condition>detect_harm</Condition><Action>prevent_damage</Action></Sequence></Selector></BehaviorTree>

###

USER COMMAND: Work together with other robots to move a heavy object to a designated location.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: coordinate_with_others: Action node - Makes the agent coordinate with other robots. move_object: Action node - Moves the heavy object. designate_location: Action node - Positions the agent to take the object to the designated location.
OUTPUT:
<BehaviorTree><Action>coordinate_with_others</Action><Sequence><Action>move_object</Action><Action>designate_location</Action></Sequence></BehaviorTree>

###

USER COMMAND: Collect data from designated locations and transmit it to a central hub.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: collect_data: Action node - Makes the agent collect data from designated locations. transmit_data: Action node - Sends the collected data to a central hub.
OUTPUT:
<BehaviorTree><Action>collect_data</Action><Action>transmit_data</Action></BehaviorTree></BehaviorTree>

###

USER COMMAND: Evacuate area in case of emergency.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: {'verify_emergency': 'Condition node: Check if there is an emergency situation in the current area.
Returns: True if there is an emergency, False otherwise.', 'send_signal_for_evacuation': 'Action node: Send a signal to all robots in the area to evacuate.
Returns: True if the signal was successfully sent, False otherwise.', 'move_to_safe_location': 'Action node: Move to a safe location away from the emergency.
Returns: True if the robot successfully moved to a safe location, False otherwise.', 'wait_for_all_clear': 'Action node: Wait for a signal from other robots that the area is safe to return.
Returns: True once the area is deemed safe by other robots.'}
OUTPUT:
<BehaviorTree><Sequence><Condition>verify_emergency</Condition><Action>send_signal_for_evacuation</Action><Action>move_to_safe_location</Action><Action>wait_for_all_clear</Action></Sequence>
</BehaviorTree>

###

USER COMMAND: Utilize swarm strategy to forage for resources.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: {'locate_resource_patch': 'Action node: Use sensors to locate a patch of resources.
Returns: True if a resource patch is found, False otherwise.', 'communicate_located_patch': 'Action node: Communicate the location of the resource patch to other robots in the swarm.
Returns: True if the location was successfully communicated, False otherwise.', 'gather_resources': 'Action node: Gather resources from the patch.
Returns: True once the resource gathering is complete.', 'return_to_base': 'Action node: Return the gathered resources to the base.
Returns: True once the resources have been returned.'}
OUTPUT:
<BehaviorTree><Sequence><Action>locate_resource_patch</Action><Action>communicate_located_patch</Action><Selector><Sequence><Condition>resource_patch_found</Condition><Action>gather_resources</Action></Sequence><Action>return_to_base</Action></Selector></Sequence>
</BehaviorTree>

###

USER COMMAND: Utilize coordinated movement to navigate an obstacle course.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: {'move_forward': 'Action node: Move the robot forward.
Returns: True if the robot successfully moved forward, False otherwise.', 'turn_left': 'Action node: Turn the robot left.
Returns: True if the robot successfully turned left, False otherwise.', 'turn_right': 'Action node: Turn the robot right.
Returns: True if the robot successfully turned right, False otherwise.', 'detect_obstacle': 'Condition node: Check if there is an obstacle in front of the robot.
Returns: True if an obstacle is detected, False otherwise.'}
OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>detect_obstacle</Condition><Action>turn_left</Action></Sequence><Sequence><Condition>detect_obstacle</Condition><Action>turn_right</Action></Sequence></Selector><Action>move_forward</Action></Sequence>
</BehaviorTree>

###

USER COMMAND: Conduct a coordinated search using a grid pattern.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: {'move_to_next_grid': 'Action node: Move the robot to the next grid location.
Returns: True if the robot successfully moved to the next location, False otherwise.', 'scan_grid_area': 'Action node: Scan the current grid location for any targets.
Returns: True if a target is found, False otherwise.', 'mark_grid_searched': 'Action node: Mark the current grid location as searched.
Returns: Always returns True.', 'is_search_complete': 'Condition node: Check if the entire grid has been fully searched.
Returns: True if the search is complete, False otherwise.', 'is_target_found': 'Condition node: Check if a target has been detected in the current grid location.
Returns: True if a target is detected, False otherwise.'}
OUTPUT:
<BehaviorTree><Sequence><Condition>is_search_complete</Condition><Sequence><Action>move_to_next_grid</Action><Action>scan_grid_area</Action><Selector><Sequence><Condition>is_target_found</Condition><Action>call_for_backup</Action></Sequence><Action>mark_grid_searched</Action></Selector></Sequence></Sequence>
</BehaviorTree>

###

USER COMMAND: Use swarm tactics to defend against a predator.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: {'locate_predator': 'Condition node: Check if there is a predator nearby.
Returns: True if a predator is detected, False otherwise.', 'send_warning_signal': 'Action node: Send a warning signal to other robots in the swarm.
Returns: True if the signal was successfully sent, False otherwise.', 'surround_predator': 'Action node: Coordinate with other robots to surround the predator and prevent it from advancing.
Returns: True once the predator is surrounded.', 'attack_predator': 'Action node: Use swarm attack tactics to overpower the predator.
Returns: True once the predator is defeated.'}
OUTPUT:
<BehaviorTree><Sequence><Condition>locate_predator</Condition><Action>send_warning_signal</Action><Selector><Sequence><Condition>predator_surrounded</Condition><Action>attack_predator</Action></Sequence><Action>surround_predator</Action></Selector></Sequence>
</BehaviorTree>

###

USER COMMAND: Utilize collective decision-making to choose the best path.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: {'check_possible_paths': 'Action node: Check all possible paths to the destination.
Returns: True if all paths have been checked, False otherwise.', 'evaluate_path_options': 'Action node: Evaluate each path based on factors such as distance, safety, etc.
Returns: True if all paths have been evaluated, False otherwise.', 'choose_best_path': 'Action node: Choose the best path based on the evaluation.
Returns: True once the best path has been chosen.'}
OUTPUT:
<BehaviorTree><Sequence><Action>check_possible_paths</Action><Action>evaluate_path_options</Action><Action>choose_best_path</Action></Sequence>
</BehaviorTree>

###

USER COMMAND: Use adaptive behavior based on environment changes.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: {'monitor_environment': 'Action node: Continuously monitor the environment for changes.
Returns: True if a change is detected, False otherwise.', 'analyze_environment': 'Action node: Analyze the changes in the environment and adapt behavior accordingly.
Returns: True once the analysis is complete.', 'execute_adaptive_behavior': 'Action node: Execute the adapted behavior.
Returns: True once the behavior has been executed.'}
OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>environment_changed</Condition><Action>analyze_environment</Action></Sequence><Sequence><Condition>environment_changed</Condition><Action>execute_adaptive_behavior</Action></Sequence></Selector><Action>monitor_environment</Action></Sequence>
</BehaviorTree>

###

USER COMMAND: Use swarm tactics to efficiently gather resources from a large area.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: {'divide_area': 'Action node: Divide the large area into smaller sections for efficient resource gathering.
Returns: True once the area is divided.', 'assign_sections': 'Action node: Assign sections to different robots in the swarm.
Returns: True once all sections are assigned.', 'gather_resources': 'Action node: Gather resources from the assigned section.
Returns: True once the section's resources have been gathered.', 'return_to_base': 'Action node: Return the gathered resources to the base.
Returns: True once the resources have been returned.'}
OUTPUT:
<BehaviorTree><Sequence><Action>divide_area</Action><Action>assign_sections</Action><Selector><Sequence><Condition>all_sections_assigned</Condition><Action>gather_resources</Action></Sequence><Action>return_to_base</Action></Selector></Sequence>
</BehaviorTree>

###

USER COMMAND: Use swarm coordination to form a protective barrier around an important target.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: {'locate_target': 'Condition node: Check if the target is in danger.
Returns: True if the target is in danger, False otherwise.', 'send_warning_signal': 'Action node: Send a warning signal to other robots in the swarm.
Returns: True if the signal was successfully sent, False otherwise.', 'protect_target': 'Action node: Coordinate with other robots to form a protective barrier around the target.
Returns: True once the barrier is formed.', 'patrol_surrounding_area': 'Action node: Monitor and patrol the surrounding area to ensure no threats enter.
Returns: True once the area is deemed safe.'}
OUTPUT:
<BehaviorTree><Sequence><Condition>locate_target</Condition><Action>send_warning_signal</Action><Selector><Sequence><Condition>barrier_formed</Condition><Action>patrol_surrounding_area</Action></Sequence><Action>protect_target</Action></Selector></Sequence>
</BehaviorTree>

###

USER COMMAND: Use collective decision-making to choose the strongest robot for a specific task.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: {'list_available_robots': 'Action node: List all available robots for the specific task.
Returns: True once all robots are listed.', 'evaluate_robot_strength': 'Action node: Evaluate each robot's strength based on factors like size, weight, etc.
Returns: True once all robots are evaluated.', 'choose_strongest_robot': 'Action node: Choose the strongest robot for the task.
Returns: True once the strongest robot is chosen for the task.'}
OUTPUT:
<BehaviorTree><Sequence><Action>list_available_robots</Action><Action>evaluate_robot_strength</Action><Action>choose_strongest_robot</Action></Sequence>
</BehaviorTree>

###

USER COMMAND: Use swarm cooperation to lift a heavy object off the ground.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: {'assign_roles': 'Action node: Assign roles to robots in the swarm, such as lifting, stabilizing, etc.
Returns: True once all roles are assigned.', 'lift_object': 'Action node: Coordinate with other robots to lift the object off the ground.
Returns: True once the object is lifted.', 'stabilize_object': 'Action node: Coordinate with other robots to stabilize the object while it is being lifted.
Returns: True once the object is stabilized.'}
OUTPUT:
<BehaviorTree><Sequence><Action>assign_roles</Action><Action>lift_object</Action><Selector><Sequence><Condition>object_lifted</Condition><Action>stabilize_object</Action></Sequence><Action>lower_object</Action></Selector></Sequence>
</BehaviorTree>

###

USER COMMAND: Use coordinated movement to build a structure.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: {'move_to_work_site': 'Action node: Move to the designated site for construction.
Returns: True once the robot arrives at the work site.', 'gather_materials': 'Action node: Gather necessary materials for construction.
Returns: True once all materials are gathered.', 'build_structure': 'Action node: Coordinate with other robots to build the structure.
Returns: True once the structure is built.'}
OUTPUT:
<BehaviorTree><Sequence><Action>move_to_work_site</Action><Action>gather_materials</Action><Action>build_structure</Action></Sequence>
</BehaviorTree>

###

USER COMMAND: Use swarm tactics to overcome a maze.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: {'move_forward': 'Action node: Move the robot forward.
Returns: True if the robot successfully moved forward, False otherwise.', 'turn_left': 'Action node: Turn the robot left.
Returns: True if the robot successfully turned left, False otherwise.', 'turn_right': 'Action node: Turn the robot right.
Returns: True if the robot successfully turned right, False otherwise.', 'detect_wall': 'Condition node: Check if there is a wall in front of the robot.
Returns: True if a wall is detected, False otherwise.'}
OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>detect_wall</Condition><Action>turn_left</Action></Sequence><Sequence><Condition>detect_wall</Condition><Action>turn_right</Action></Sequence></Selector><Action>move_forward</Action></Sequence>
</BehaviorTree>

###

USER COMMAND: Use collective decision-making to determine the best path for exploring a new environment.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: {'explore_next_section': 'Action node: Move on to the next unexplored section of the environment.
Returns: True once the next section has been explored.', 'check_area': 'Action node: Use sensors to gather information about the current section.
Returns: True once the information has been collected.', 'evaluate_path_options': 'Action node: Evaluate each path for exploration based on factors such as distance, terrain, etc.
Returns
###

USER COMMAND: Guide the swarm through a narrow passage while avoiding obstacles.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: move_forward: Action node (same as before). check_obstacles: Condition node - Checks for obstacles in front of the agent. avoid_obstacle: Action node - Makes the agent steer away from the obstacle. set_target_angle: Action node - Sets the target angle for the agent to move towards.
OUTPUT:
<BehaviorTree><Sequence><Condition>check_obstacles</Condition><Action>avoid_obstacle</Action><Action>set_target_angle</Action><Action>move_forward</Action></Sequence></BehaviorTree>

###

USER COMMAND: Collect and deliver a set of items to a specified location.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: collect_items: Action node - Makes the agent collect items within its vicinity. get_delivery_location: Blackboard key selector - Retrieves the delivery location stored on the blackboard. go_to_location: Action node (same as before). deliver_items: Action node - Makes the agent deliver the collected items at the specified location.
OUTPUT:
<BehaviorTree><Sequence><Action>collect_items</Action><Action>get_delivery_location</Action><Action>go_to_location</Action><Action>deliver_items</Action></Sequence></BehaviorTree>

###

USER COMMAND: Follow a designated leader while maintaining a specific distance.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: follow_leader: Action node - Makes the agent follow the designated leader. get_leader_location: Blackboard key selector - Retrieves the current location of the leader stored on the blackboard. set_follow_distance: Action node - Sets the desired distance between the agent and the leader.
OUTPUT:
<BehaviorTree><Sequence><Action>get_leader_location</Action><Action>set_follow_distance</Action><Action>follow_leader</Action></Sequence></BehaviorTree>

###

USER COMMAND: Defend the home base from incoming enemy attacks.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: get_enemy_location: Blackboard key selector - Retrieves the current location of enemies stored on the blackboard. set_defend_area: Action node - Sets the designated area to defend. attack: Action node (same as before). check_enemy_proximity: Condition node - Checks if enemies are within a certain proximity to the home base.
OUTPUT:
<BehaviorTree><Sequence><Action>get_enemy_location</Action><Action>set_defend_area</Action><Condition>check_enemy_proximity</Condition><Action>attack</Action></Sequence></BehaviorTree>

###

USER COMMAND: Collaboratively push a heavy object to a specified location.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: get_pushing_strength: Action node - Retrieves the agent's pushing strength from the blackboard. calculate_pushing_force: Function node - Calculates the required force to move the object based on its weight and the agent's strength. push_object: Action node - Applies the calculated force to the object. get_destination: Blackboard key selector - Retrieves the target location for the object.
OUTPUT:
<BehaviorTree><Sequence><Action>get_pushing_strength</Action><Function>calculate_pushing_force</Function><Action>push_object</Action><Action>get_destination</Action></Sequence></BehaviorTree>

###

USER COMMAND: Survey the surrounding area and report back any potential hazards.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: scan_environment: Action node - Makes the agent scan its surroundings. get_hazard_info: Function node - Retrieves information about potential hazards from the agent's sensors and stores it on the blackboard. report_hazards: Action node - Makes the agent report the stored information to the designated location.
OUTPUT:
<BehaviorTree><Sequence><Action>scan_environment</Action><Function>get_hazard_info</Function><Action>report_hazards</Action></Sequence></BehaviorTree>

###

USER COMMAND: Identify and retrieve a specific item from a cluttered environment.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: scan_environment: Action node - Makes the agent scan its surroundings. get_item_location: Function node - Retrieves the location of the specified item from the agent's sensors and stores it on the blackboard. go_to_location: Action node (same as before). pick_up_item: Action node - Makes the agent pick up the specified item.
OUTPUT:
<BehaviorTree><Sequence><Action>scan_environment</Action><Function>get_item_location</Function><Action>go_to_location</Action><Action>pick_up_item</Action></Sequence></BehaviorTree>

###

USER COMMAND: Coordinate and perform a synchronized movement with other robots.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: get_self_location: Function node - Retrieves the agent's current location. get_leader_location: Blackboard key selector - Retrieves the designated leader's location. set_destination: Action node - Sets the designated destination for the synchronized movement. move_to_location: Action node - Moves the agent towards the set destination.
OUTPUT:
<BehaviorTree><Sequence><Action>get_self_location</Action><Action>get_leader_location</Action><Action>set_destination</Action><Action>move_to_location</Action></Sequence></BehaviorTree>

###

USER COMMAND: Construct a tower using multiple agents to distribute the weight.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: set_building_area: Action node - Sets the designated area for the tower to be built. get_agent_strength: Action node - Retrieves the agent's strength from the blackboard. calculate_building_height: Function node - Calculates the height of each layer of the tower based on the agents' combined strength. stack_blocks: Action node - Makes the agents stack blocks on top of each other until the desired height is reached.
OUTPUT:
<BehaviorTree><Sequence><Action>set_building_area</Action><Action>get_agent_strength</Action><Function>calculate_building_height</Function><Action>stack_blocks</Action></Sequence></BehaviorTree>

###

USER COMMAND: Navigate through a maze to find the designated exit point.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: explore: Action node - Moves the agent towards unexplored areas. set_target_exit: Action node - Sets the designated exit point for the agent. get_current_location: Function node - Retrieves the agent's current location. calculate_distance_to_exit: Function node - Calculates the distance between the agent's current location and the designated exit point. set_next_move: Action node - Sets the desired direction for the agent to move towards.
OUTPUT:
<BehaviorTree><Sequence><Action>explore</Action><Action>set_target_exit</Action><Function>get_current_location</Function><Function>calculate_distance_to_exit</Function><Action>set_next_move</Action></Sequence></BehaviorTree>

###

USER COMMAND: Cooperatively carry a heavy object together to a specified location.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: get_agent_strength: Action node - Retrieves the agent's strength from the blackboard. calculate_carrying_capacity: Function node - Calculates the combined carrying capacity of all agents involved. check_weight: Condition node - Checks if the object's weight is within the calculated carrying capacity. carry_object: Action node - Makes the agents carry the object together. go_to_location: Action node (same as before).
OUTPUT:
<BehaviorTree><Sequence><Action>get_agent_strength</Action><Function>calculate_carrying_capacity</Function><Condition>check_weight</Condition><Action>carry_object</Action><Action>go_to_location</Action></Sequence></BehaviorTree>

###

USER COMMAND: Communicate and synchronize tasks between multiple robots.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: send_task: Action node - Makes the agent send a designated task to another robot. receive_task: Action node - Makes the agent receive a task from another robot. execute_task: Action node (same as before). task_complete: Condition node - Checks if the received task has been completed. task_failed: Condition node - Checks if the received task has failed.
OUTPUT:
<BehaviorTree><Sequence><Selector><Action>send_task</Action><Action>receive_task</Action></Selector><Condition>task_complete</Condition><Condition>task_failed</Condition><Action>execute_task</Action></Sequence></BehaviorTree>

###

USER COMMAND: Search and rescue a trapped individual in a simulated disaster area.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: move_to_location: Action node - Moves the agent towards the designated search area. scan_environment: Action node - Makes the agent scan its surroundings for the trapped individual. identify_trapped_person: Condition node - Checks if the agent has identified the trapped individual. rescue_person: Action node - Makes the agent rescue the trapped individual.
OUTPUT:
<BehaviorTree><Sequence><Action>move_to_location</Action><Action>scan_environment</Action><Condition>identify_trapped_person</Condition><Action>rescue_person</Action></Sequence></BehaviorTree>

###

USER COMMAND: Navigate through a difficult terrain while carrying a fragile object without dropping it.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: get_current_location: Function node - Retrieves the agent's current location. calculate_distance_to_destination: Function node - Calculates the remaining distance to the target destination. check_terrain: Condition node - Checks for difficult terrain in front of the agent. avoid_terrain: Action node - Makes the agent avoid the difficult terrain. hold_object: Action node - Makes the agent hold onto the fragile object.
OUTPUT:
<BehaviorTree><Sequence><Function>get_current_location</Function><Function>calculate_distance_to_destination</Function><Condition>check_terrain</Condition><Action>avoid_terrain</Action><Action>hold_object</Action></Sequence></BehaviorTree>

###

USER COMMAND: Harvest resources from a designated area and bring them back to the base.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: move_to_location: Action node - Moves the agent towards the designated harvesting area. harvest_resources: Action node - Makes the agent harvest resources within its vicinity. return_to_base: Action node - Makes the agent return to the base. drop_off_resources: Action node - Makes the agent drop off the harvested resources at the base.
OUTPUT:
<BehaviorTree><Sequence><Action>move_to_location</Action><Action>harvest_resources</Action><Action>return_to_base</Action><Action>drop_off_resources</Action></Sequence></BehaviorTree>

###

USER COMMAND: Move in a specific formation while avoiding collisions with other robots.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: set_formation: Action node - Sets the desired formation for the agents to move in. get_self_location: Function node - Retrieves the agent's current location. calculate_spacing: Function node - Calculates the required spacing between agents to avoid collisions. move_in_formation: Action node - Makes the agents move in the designated formation.
OUTPUT:
<BehaviorTree><Sequence><Action>set_formation</Action><Function>get_self_location</Function><Function>calculate_spacing</Function><Action>move_in_formation</Action></Sequence></BehaviorTree>

###

USER COMMAND: Spread out and explore a large unknown area.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: start_spreading: Action node - Initiates the spreading out behavior. move_forward: Action node (same as before). get_current_location: Function node - Retrieves the agent's current location. calculate_distance_travelled: Function node - Calculates the distance travelled by the agent since starting to spread out. set_new_target: Action node - Sets a new target location for the agent to move towards.
OUTPUT:
<BehaviorTree><Sequence><Action>start_spreading</Action><Action>move_forward</Action><Function>get_current_location</Function><Function>calculate_distance_travelled</Function><Action>set_new_target</Action></Sequence></BehaviorTree>

###

USER COMMAND: Act as a swarm to defend against a larger enemy force.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: get_enemy_force: Function node - Retrieves information about the enemy force from the agent's sensors. calculate_enemy_strength: Function node - Calculates the combined strength of the enemy force. check_enemy_proximity: Condition node - Checks if the enemy force is within a certain proximity. swarm_attack: Action node - Makes the agents coordinate and attack the
###

USER COMMAND: Deliver the package to the specified location.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: navigate_to: Action node- Guides the agent to the specified location. is_at_destination: Condition node - Checks if the agent has reached the destination. deliver_package: Action node - Performs the task of delivering the package.
OUTPUT:
<BehaviorTree><Sequence><Action>navigate_to</Action><Selector><Condition>is_at_destination</Condition><Action>deliver_package</Action></Selector></Sequence></BehaviorTree>

###

USER COMMAND: Collect all the scattered objects in the room.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: scan_room: Action node - Scans the room for scattered objects. pick_up: Action node - Picks up the objects found. is_room_empty: Condition node - Checks if the room is empty of objects.
OUTPUT:
<BehaviorTree><Sequence><Action>scan_room</Action><Selector><Condition>is_room_empty</Condition><Action>pick_up</Action></Selector></Sequence></BehaviorTree>

###

USER COMMAND: Retrieve the designated item from the storage unit.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: navigate_to_storage: Action node - Guides the agent to the storage unit. search_storage: Action node - Searches for the designated item. retrieve_item: Action node - Retrieves the item. is_item_retrieved: Condition node - Checks if the item has been retrieved.
OUTPUT:
<BehaviorTree><Sequence><Action>navigate_to_storage</Action><Sequence><Action>search_storage</Action><Action>retrieve_item</Action></Sequence><Condition>is_item_retrieved</Condition></Sequence></BehaviorTree>

###

USER COMMAND: Maintain a constant distance from the object in front of the robot.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: measure_distance: Action node - Measures the distance from the object in front. adjust_distance: Action node - Adjusts the robot's speed accordingly. is_distance_optimal: Condition node - Checks if the distance is the desired distance.
OUTPUT:
<BehaviorTree><Selector><Sequence><Action>measure_distance</Action><Action>adjust_distance</Action></Sequence><Condition>is_distance_optimal</Condition></Selector></BehaviorTree>

###

USER COMMAND: Clear the path for other robots to pass through.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: detect_obstacle: Action node - Detects if there is an obstacle in the path. remove_obstacle: Action node - Removes the obstacle. is_path_clear: Condition node - Checks if the path is clear.
OUTPUT:
<BehaviorTree><Selector><Sequence><Action>detect_obstacle</Action><Action>remove_obstacle</Action></Sequence><Condition>is_path_clear</Condition></Selector></BehaviorTree>

###

USER COMMAND: Work together with other robots to complete a task.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: communicate: Action node - Allows the agent to communicate with other robots. assign_task: Action node - Assigns specific tasks to each robot. is_task_completed: Condition node - Checks if the task has been completed by all robots.
OUTPUT:
<BehaviorTree><Sequence><Action>communicate</Action><Selector><Action>assign_task</Action><Condition>is_task_completed</Condition></Selector></Sequence></BehaviorTree>

###

USER COMMAND: Investigate and report any potential hazards in the environment.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: scan_environment: Action node - Scans the environment for potential hazards. report_hazard: Action node - Reports any hazards found. is_hazard_present: Condition node - Checks if there are any hazards present.
OUTPUT:
<BehaviorTree><Sequence><Action>scan_environment</Action><Selector><Action>report_hazard</Action><Condition>is_hazard_present</Condition></Selector></Sequence></BehaviorTree>

###

USER COMMAND: Explore the surrounding area and create a map of the environment.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: move_forward: Action node - Moves the agent forward. turn_left: Action node - Turns the agent left by 90 degrees. turn_right: Action node - Turns the agent right by 90 degrees. create_map: Action node - Creates a map of the environment. is_map_complete: Condition node - Checks if the map is complete.
OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Action>move_forward</Action><Action>turn_left</Action><Action>create_map</Action></Sequence><Selector><Action>turn_right</Action><Action>create_map</Action></Selector></Sequence><Condition>is_map_complete</Condition></BehaviorTree>

###

USER COMMAND: Make coordinated movements to form a specific shape as a group.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: communicate: Action node - Allows the agent to communicate with other robots. form_shape: Action node - Guides the agent to move to form a specific shape. is_shape_formed: Condition node - Checks if the shape has been formed.
OUTPUT:
<BehaviorTree><Sequence><Action>communicate</Action><Selector><Action>form_shape</Action><Condition>is_shape_formed</Condition></Selector></Sequence></BehaviorTree>

###

USER COMMAND: Repair any malfunctions in the robot.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: detect_malfunction: Action node - Detects any malfunctions in the robot. fix_malfunction: Action node - Fixes the malfunction. is_robot_functional: Condition node - Checks if the robot is functional.
OUTPUT:
<BehaviorTree><Selector><Sequence><Action>detect_malfunction</Action><Action>fix_malfunction</Action></Sequence><Condition>is_robot_functional</Condition></Selector></BehaviorTree>

###

USER COMMAND: Identify and retrieve the specified object from a cluttered environment.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: scan_environment: Action node - Scans the environment for the specified object. navigate_to_object: Action node - Guides the agent to the location of the object. retrieve_object: Action node - Picks up the object. is_object_retrieved: Condition node - Checks if the object has been retrieved.
OUTPUT:
<BehaviorTree><Sequence><Action>scan_environment</Action><Sequence><Action>navigate_to_object</Action><Action>retrieve_object</Action></Sequence><Condition>is_object_retrieved</Condition></Sequence></BehaviorTree>

###

USER COMMAND: Build a structure using materials provided in the environment.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: collect_material: Action node - Collects the materials needed for the structure. navigate_to_location: Action node - Guides the agent to the desired location for the structure. build_structure: Action node - Constructs the structure using the collected materials. is_structure_complete: Condition node - Checks if the structure is complete.
OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Action>collect_material</Action><Action>build_structure</Action></Sequence><Selector><Action>navigate_to_location</Action><Condition>is_structure_complete</Condition></Selector></Sequence></BehaviorTree>

###

USER COMMAND: Protect a specified area from intruders.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: scan_area: Action node - Scans the specified area for any intruders. sound_alarm: Action node - Activates an alarm if an intruder is detected. is_area_secure: Condition node - Checks if the area is free of intruders.
OUTPUT:
<BehaviorTree><Sequence><Action>scan_area</Action><Selector><Action>sound_alarm</Action><Condition>is_area_secure</Condition></Selector></Sequence></BehaviorTree>

###

USER COMMAND: Follow a moving target and keep a safe distance.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: track_target: Action node - Tracks the movements of the target. maintain_distance: Action node - Adjusts the robot's speed to keep a safe distance from the target. is_target_safe: Condition node - Checks if the target is safe to follow.
OUTPUT:
<BehaviorTree><Sequence><Action>track_target</Action><Selector><Action>maintain_distance</Action><Condition>is_target_safe</Condition></Selector></Sequence></BehaviorTree>

###

USER COMMAND: Collect data from different points and return to base.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: collect_data: Action node - Collects data from each designated point. return_to_base: Action node - Guides the agent to the base to store the collected data. store_data: Action node - Stores the collected data at the base. is_data_stored: Condition node - Checks if the data has been stored.
OUTPUT:
<BehaviorTree><Sequence><Action>collect_data</Action><Sequence><Action>return_to_base</Action><Action>store_data</Action></Sequence><Condition>is_data_stored</Condition></Sequence></BehaviorTree>

###

USER COMMAND: Coordinate with other robots to extinguish a fire.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: communicate: Action node - Allows the agent to communicate with other robots. detect_fire: Action node - Detects the fire in the environment. extinguish_fire: Action node - Activates a fire extinguisher to put out the fire. is_fire_extinguished: Condition node - Checks if the fire has been extinguished.
OUTPUT:
<BehaviorTree><Sequence><Action>communicate</Action><Selector><Sequence><Action>detect_fire</Action><Action>extinguish_fire</Action></Sequence><Condition>is_fire_extinguished</Condition></Selector></Sequence></BehaviorTree>

###

USER COMMAND: Work together to lift and move an object to a designated location.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: communicate: Action node - Allows the agent to communicate with other robots. lift_object: Action node - Lifts the object with the help of other robots. move_object: Action node - Moves the object to the designated location. is_object_moved: Condition node - Checks if the object has been moved.
OUTPUT:
<BehaviorTree><Sequence><Action>communicate</Action><Selector><Sequence><Action>lift_object</Action><Action>move_object</Action></Sequence><Condition>is_object_moved</Condition></Selector></Sequence></BehaviorTree>

###

USER COMMAND: Search for and rescue a trapped individual.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: scan_environment: Action node - Scans the environment for the trapped individual. navigate_to_location: Action node - Guides the agent to the location of the trapped individual. free_individual: Action node - Frees the trapped individual. is_individual_rescued: Condition node - Checks if the individual has been rescued.
OUTPUT:
<BehaviorTree><Selector><Sequence><Action>scan_environment</Action><Selector><Action>navigate_to_location</Action><Condition>is_individual_rescued</Condition></Selector></Sequence><Action>free_individual</Action></Selector></BehaviorTree>
###

USER COMMAND: Move towards the nearest robot in the swarm and form a triangle formation.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: find_nearest_robot: Action node - Finds the nearest robot in the swarm. move_to_target: Action node - Moves towards a target, in this case the nearest robot. form_triangle_formation: Action node - Coordinates with other robots to form a triangle formation.
OUTPUT:
<BehaviorTree><Sequence><Action>find_nearest_robot</Action><Action>move_to_target</Action><Action>form_triangle_formation</Action></Sequence></BehaviorTree>

###

USER COMMAND: Continuously monitor battery levels and charge if levels fall below a certain threshold.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: monitor_battery: Action node - Monitors the current battery level. is_battery_low: Condition node - Checks if the battery level falls below a predefined threshold. charge_battery: Action node - Activates the charging process.
OUTPUT:
<BehaviorTree><Sequence><Action>monitor_battery</Action><Condition>is_battery_low</Condition><Action>charge_battery</Action></Sequence></BehaviorTree>

###

USER COMMAND: Prioritize collecting resources over defending against enemies.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: collect_resource: Action node - Collects a nearby resource. defend_against_enemy: Action node - Defends against a nearby enemy. get_resource_priority: Function node - Calculates the priority for collecting resources. get_enemy_threat: Function node (same as before). utility_score: Function node (same as before).
OUTPUT:
<BehaviorTree><Sequence><Action>get_resource_priority</Action><Condition>greater_than enemy_threat</Condition><Action>collect_resource</Action></Sequence><Action>defend_against_enemy</Action></BehaviorTree>

###

USER COMMAND: Locate and retrieve a specific item from a designated location in the environment.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: locate_item: Action node - Scans the environment to locate the designated item. move_to_location: Action node - Moves towards the designated location. retrieve_item: Action node - Retrieves the item once it has been located.
OUTPUT:
<BehaviorTree><Sequence><Action>locate_item</Action><Action>move_to_location</Action><Action>retrieve_item</Action></Sequence></BehaviorTree>

###

USER COMMAND: Check the current time and perform an action depending on whether it is morning or evening.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: check_time: Action node - Retrieves the current time from the environment. is_morning: Condition node - Checks if it is currently morning. is_evening: Condition node - Checks if it is currently evening. perform_morning_action: Action node - Performs an action suitable for the morning. perform_evening_action: Action node - Performs an action suitable for the evening.
OUTPUT:
<BehaviorTree><Sequence><Action>check_time</Action><Condition>is_morning</Condition><Action>perform_morning_action</Action></Sequence><Sequence><Condition>is_evening</Condition><Action>perform_evening_action</Action></Sequence></BehaviorTree>

###

USER COMMAND: Follow the movement of the leader robot in the swarm and maintain a certain distance from it.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: follow_leader: Action node - Follows the movement of the leader robot. maintain_distance: Action node - Adjusts the robot's position to maintain a certain distance from the leader.
OUTPUT:
<BehaviorTree><Sequence><Action>follow_leader</Action><Action>maintain_distance</Action></Sequence></BehaviorTree>

###

USER COMMAND: Detect and avoid obstacles while navigating towards a specific location.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: detect_obstacles: Action node - Scans the environment for obstacles. avoid_obstacles: Action node - Performs maneuvers to avoid obstacles. move_to_location: Action node - Moves towards the designated location.
OUTPUT:
<BehaviorTree><Sequence><Action>detect_obstacles</Action><Action>avoid_obstacles</Action><Action>move_to_location</Action></Sequence></BehaviorTree>

###

USER COMMAND: Coordinate with other robots in the swarm to perform a complex task together.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: communicate_with_swarm: Action node - Establishes communication with other robots in the swarm. perform_task: Action node - Performs a specific task as part of the collective effort. share_progress: Action node - Shares progress and important information with the other robots.
OUTPUT:
<BehaviorTree><Sequence><Action>communicate_with_swarm</Action><Action>perform_task</Action><Action>share_progress</Action></Sequence></BehaviorTree>

###

USER COMMAND: Prioritize exploring unknown areas of the environment over repeated visits to already explored areas.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: explore_unknown_areas: Action node - Explores unknown areas of the environment. check_visited_status: Condition node - Checks if the current location has been visited before. revisit_area: Action node - Revisits an already explored area.
OUTPUT:
<BehaviorTree><Sequence><Action>explore_unknown_areas</Action><Condition>not_visited</Condition><Action>revisit_area</Action></Sequence></BehaviorTree>

###

USER COMMAND: Avoid the path of a moving object while navigating towards a specific location.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: detect_moving_object: Action node - Uses sensors to detect a moving object. avoid_object: Action node - Performs maneuvers to avoid the object. move_to_location: Action node - Moves towards the designated location.
OUTPUT:
<BehaviorTree><Sequence><Action>detect_moving_object</Action><Action>avoid_object</Action><Action>move_to_location</Action></Sequence></BehaviorTree>

###

USER COMMAND: Scan the environment for a designated color and perform a specific action if it is detected.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: scan_color: Action node - Scans the environment for a designated color. check_color_detected: Condition node - Checks if the designated color was detected. perform_color_action: Action node - Performs a specific action if the color is detected.
OUTPUT:
<BehaviorTree><Sequence><Action>scan_color</Action><Condition>check_color_detected</Condition><Action>perform_color_action</Action></Sequence></BehaviorTree>

###

USER COMMAND: Respond to external stimuli, such as a loud sound or a bright light, by changing behavior.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: detect_stimulus: Action node - Uses sensors to detect external stimuli. respond_to_sound: Action node - Reacts to a loud sound. respond_to_light: Action node - Reacts to a bright light.
OUTPUT:
<BehaviorTree><Sequence><Action>detect_stimulus</Action><Condition>sound_detected</Condition><Action>respond_to_sound</Action></Sequence><Sequence><Condition>light_detected</Condition><Action>respond_to_light</Action></Sequence></BehaviorTree>

###

USER COMMAND: Continuously monitor the state of a designated object and perform actions depending on its status.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: monitor_object: Action node - Monitors the state of the designated object. is_object_damaged: Condition node - Checks if the object is damaged. is_object_moved: Condition node - Checks if the object has been moved. repair_object: Action node - Performs actions to repair the object. relocate_object: Action node - Moves the object back to its designated location.
OUTPUT:
<BehaviorTree><Selector><Sequence><Action>monitor_object</Action><Condition>is_object_damaged</Condition><Action>repair_object</Action></Sequence><Sequence><Condition>is_object_moved</Condition><Action>relocate_object</Action></Sequence></Selector></BehaviorTree>

###

USER COMMAND: Follow a specific path in the environment while avoiding obstacles.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: follow_path: Action node - Follows a specific path in the environment. detect_obstacles: Action node - Scans the environment for obstacles. avoid_obstacles: Action node - Performs maneuvers to avoid obstacles.
OUTPUT:
<BehaviorTree><Sequence><Action>follow_path</Action><Selector><Sequence><Action>detect_obstacles</Action><Action>avoid_obstacles</Action></Sequence></Selector></Sequence></BehaviorTree>

###

USER COMMAND: Cooperate with other robots to transport a heavy object to a designated location.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: communicate_with_swarm: Action node - Establishes communication with other robots. transport_object: Action node - Coordinates with other robots to transport the heavy object. move_to_location: Action node - Moves towards the designated location.
OUTPUT:
<BehaviorTree><Sequence><Action>communicate_with_swarm</Action><Action>transport_object</Action></Sequence><Action>move_to_location</Action></BehaviorTree>

###

USER COMMAND: Enter a low-power mode to save energy when battery levels are below a certain threshold.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: monitor_battery: Action node (same as before). is_battery_low: Condition node (same as before). enter_low_power_mode: Action node - Puts the robot into a low-power mode.
OUTPUT:
<BehaviorTree><Sequence><Action>monitor_battery</Action><Condition>is_battery_low</Condition><Action>enter_low_power_mode</Action></Sequence></BehaviorTree>

###

USER COMMAND: Continuously monitor for changes in the environment and react accordingly.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: scan_environment: Action node - Scans the environment for changes. react_to_changes: Action node - Performs specific actions depending on the changes detected.
OUTPUT:
<BehaviorTree><Sequence><Action>scan_environment</Action><Action>react_to_changes</Action></Sequence></BehaviorTree>

###

USER COMMAND: Explore the environment while periodically checking in with the other robots in the swarm.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: explore: Action node (same as before). check_in: Action node - Communicates with other robots in the swarm. get_swarm_position: Function node - Retrieves the current position of the swarm. return_to_swarm: Action node - Returns to the designated location of the swarm.
OUTPUT:
<BehaviorTree><Sequence><Action>explore</Action><Selector><Sequence><Action>check_in</Action><Condition>not_at_swarm_position</Condition><Action>return_to_swarm</Action></Sequence></Selector></Sequence></BehaviorTree>

###

USER COMMAND: Detect an obstacle, stop and wait for further instructions.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: detect_obstacle: Condition node - Checks if an obstacle is detected. stop: Action node - Stops the robot's movement. wait_for_instructions: Action node - Temporarily pauses the behavior tree. The subtree node for this task should loop until a new command is received.
OUTPUT:
<BehaviorTree><Selector><Condition>detect_obstacle</Condition><Sequence><Action>stop</Action><Action>wait_for_instructions</Action></Sequence></Selector></BehaviorTree>

###

USER COMMAND: Patrol the area and report back every 5 minutes.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: patrol_area: Subtree node - Represents a behavior tree for patrolling an area. report_back: Action node - Sends a report back to the starting location. The subtree node for this task should loop with a set timer of 5 minutes.
OUTPUT:
<BehaviorTree><Sequence><Action>patrol_area</Action><Action>report_back</Action></Sequence></BehaviorTree>

###

USER COMMAND: Follow a specified path while avoiding obstacles.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: follow_path: Action node - Executes predefined coordinates to follow a specified path. avoid_obstacles: Condition node - Checks for obstacles and redirects the robot accordingly.
OUTPUT:
<BehaviorTree><Sequence><Action>follow_path</Action><Condition>avoid_obstacles</Condition></Sequence></BehaviorTree>

###

USER COMMAND: Retrieve an item from a specific location and transport it to another designated location.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: retrieve_item: Subtree node - Represents a behavior tree for retrieving an item from a specific location. transport_item: Subtree node - Represents a behavior tree for transporting an item to a designated location.
OUTPUT:
<BehaviorTree><Sequence><Action>retrieve_item</Action><Action>transport_item</Action></Sequence></BehaviorTree>

###

USER COMMAND: Collect resources from various locations and return to a base.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: collect_resource: Subtree node - Represents a behavior tree for collecting resources from various locations. return_to_base: Subtree node - Represents a behavior tree for returning to a designated base location.
OUTPUT:
<BehaviorTree><Sequence><Action>collect_resource</Action><Action>return_to_base</Action></Sequence></BehaviorTree>

###

USER COMMAND: Divide into smaller groups and explore different areas.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: divide_into_groups: Subtree node - Represents a behavior tree for dividing the swarm into smaller groups. explore_area: Subtree node - Represents a behavior tree for exploring a designated area.
OUTPUT:
<BehaviorTree><Sequence><Action>divide_into_groups</Action><Action>explore_area</Action></Sequence></BehaviorTree>

###

USER COMMAND: Gather information from a specific location and share it with the rest of the swarm.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: gather_info: Subtree node - Represents a behavior tree for gathering information from a specific location. share_info: Action node - Shares the collected information with the rest of the swarm.
OUTPUT:
<BehaviorTree><Sequence><Action>gather_info</Action><Action>share_info</Action></Sequence></BehaviorTree>

###

USER COMMAND: Follow a designated leader and adjust movement accordingly.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: follow_leader: Subtree node - Represents a behavior tree for following a designated leader. adjust_movement: Action node - Adjusts the movement of the robots based on the leader's movements.
OUTPUT:
<BehaviorTree><Sequence><Action>follow_leader</Action><Action>adjust_movement</Action></Sequence></BehaviorTree>

###

USER COMMAND: Search and rescue a lost member of the swarm.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: search_for_lost: Subtree node - Represents a behavior tree for searching for a lost member of the swarm. rescue: Action node - Executes the rescue mission once the lost member is found.
OUTPUT:
<BehaviorTree><Sequence><Action>search_for_lost</Action><Action>rescue</Action></Sequence></BehaviorTree>

###

USER COMMAND: Communicate with a non-responsive member of the swarm.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: communicate: Subtree node - Represents a behavior tree for communication with a non-responsive member of the swarm. retry: Action node - Resends the communication if no response is received.
OUTPUT:
<BehaviorTree><Sequence><Action>communicate</Action><Action>retry</Action></Sequence></BehaviorTree>

###

USER COMMAND: Navigate through a predefined maze.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: navigate_maze: Action node - Executes predefined actions to navigate through a maze. check_finished: Condition node - Checks if the maze has been successfully completed.
OUTPUT:
<BehaviorTree><Sequence><Action>navigate_maze</Action><Condition>check_finished</Condition></Sequence></BehaviorTree>

###

USER COMMAND: Protect a designated area from external threats.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: secure_area: Subtree node - Represents a behavior tree for securing a designated area. monitor: Action node - Monitors for external threats.
OUTPUT:
<BehaviorTree><Selector><Action>secure_area</Action><Action>monitor</Action></Selector></BehaviorTree>

###

USER COMMAND: Build a structure using collective efforts of the swarm.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: collect_materials: Subtree node - Represents a behavior tree for collecting materials for building. construct: Subtree node - Represents a behavior tree for constructing a structure using the materials collected.
OUTPUT:
<BehaviorTree><Sequence><Action>collect_materials</Action><Action>construct</Action></Sequence></BehaviorTree>

###

USER COMMAND: Retrieve a specific object from a hard-to-reach location.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: navigate_difficult_terrain: Action node - Executes predefined actions to navigate through difficult terrain. retrieve_object: Subtree node - Represents a behavior tree for retrieving a specific object from a hard-to-reach location.
OUTPUT:
<BehaviorTree><Sequence><Action>navigate_difficult_terrain</Action><Action>retrieve_object</Action></Sequence></BehaviorTree>

###

USER COMMAND: Perform a coordinated dance routine.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: synchronize_movement: Action node - Coordinates the movement of the robots for the dance routine. follow_sequence: Subtree node - Represents a behavior tree for following a predefined dance sequence.
OUTPUT:
<BehaviorTree><Sequence><Action>synchronize_movement</Action><Action>follow_sequence</Action></Sequence></BehaviorTree>

###

USER COMMAND: Search and gather food resources.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: search_for_food: Subtree node - Represents a behavior tree for searching for food resources. gather_food: Action node - Executes actions to gather the food once it is found.
OUTPUT:
<BehaviorTree><Sequence><Action>search_for_food</Action><Action>gather_food</Action></Sequence></BehaviorTree>

###

USER COMMAND: Cooperate to move a heavy object.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: coordinate_movement: Action node - Coordinates the movement of multiple robots to move a heavy object. apply_force: Subtree node - Represents a behavior tree for applying force to the object.
OUTPUT:
<BehaviorTree><Sequence><Action>coordinate_movement</Action><Action>apply_force</Action></Sequence></BehaviorTree>

###

USER COMMAND: Monitor environmental conditions and report back.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: check_environment: Condition node - Checks for any changes in environmental conditions. report_back: Action node - Sends a report back to the starting location.
OUTPUT:
<BehaviorTree><Sequence><Condition>check_environment</Condition><Action>report_back</Action></Sequence></BehaviorTree>

###


USER COMMAND: Collect resources until inventory is full. If an enemy is spotted, drop resources and attack it.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: collect_resources: Action node - Makes the agent collect nearby resources. check_inventory: Condition node - Checks if the inventory is full. drop_resources: Action node - Makes the agent drop all resources. is_enemy_near: Condition node (same as before). attack: Action node (same as before).
OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Action>collect_resources</Action><Condition>check_inventory</Condition></Sequence><Selector><Condition>is_enemy_near</Condition><Sequence><Action>drop_resources</Action><Action>attack</Action></Sequence></Selector></Sequence></BehaviorTree>

###

USER COMMAND: Follow the leader robot and perform a formation. If the leader moves too far, catch up and resume formation.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: follow_leader: Action node - Makes the agent follow the leader robot. maintain_distance: Condition node - Checks if the distance between the leader and follower is within a certain range. catch_up: Action node - Makes the agent move faster to catch up with the leader. perform_formation: Action node - Makes the agent move in formation with the leader.
OUTPUT:
<BehaviorTree><Selector><Sequence><Action>follow_leader</Action><Condition>maintain_distance</Condition><Action>perform_formation</Action></Sequence><Sequence><Action>follow_leader</Action><Condition>not maintain_distance</Condition><Action>catch_up</Action><Action>perform_formation</Action></Sequence></Selector></BehaviorTree>

###

USER COMMAND: When in danger, activate shield. If shield has been active for more than 5 seconds, deactivate it.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: danger_detected: Condition node - Checks if the agent is in danger. activate_shield: Action node - Activates the agent's shield. shield_active_timer: Condition node - Checks if the shield has been active for 5 seconds. deactivate_shield: Action node - Deactivates the agent's shield.
OUTPUT:
<BehaviorTree><Sequence><Condition>danger_detected</Condition><Sequence><Action>activate_shield</Action><Condition>shield_active_timer</Condition><Action>deactivate_shield</Action></Sequence></Sequence></BehaviorTree>

###

USER COMMAND: Patrol a designated area. If an enemy is spotted, pursue and attack it.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: patrol: Action node - Makes the agent patrol a designated area. is_enemy_near: Condition node - Checks if an enemy is spotted. pursue: Action node - Makes the agent pursue the enemy. attack: Action node - Makes the agent attack the enemy.
OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_enemy_near</Condition><Sequence><Action>pursue</Action><Action>attack</Action></Sequence></Sequence><Action>patrol</Action></Selector></BehaviorTree>

###

USER COMMAND: Deliver resources to a designated location. If resources are not collected within 2 minutes, abandon and search for more.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: deliver_resources: Action node - Makes the agent deliver resources to the designated location. resources_collected_timer: Condition node - Checks if resources have been collected within 2 minutes. abandon_delivery: Action node - Abandons the delivery and starts searching for more resources.
OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Action>deliver_resources</Action><Condition>resources_collected_timer</Condition></Sequence><Action>abandon_delivery</Action></Selector></Sequence></BehaviorTree>

###

USER COMMAND: Investigate a suspicious noise. If nothing is found, return to previous task.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: investigate_noise: Action node - Makes the agent move towards the suspicious noise. is_noise_found: Condition node - Checks if the agent has found the source of the noise. return_to_previous_task: Action node - Makes the agent return to its previous task.
OUTPUT:
<BehaviorTree><Selector><Sequence><Action>investigate_noise</Action><Condition>is_noise_found</Condition></Sequence><Action>return_to_previous_task</Action></Selector></BehaviorTree>

###

USER COMMAND: Create a supply chain with other robots to transport resources. If the chain is broken, regroup and repair.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: create_supply_chain: Action node - Makes the agent create a supply chain with other robots. is_in_chain: Condition node - Checks if the agent is currently in a supply chain. regroup: Action node - Makes the agent regroup with other members of the supply chain. repair: Action node - Makes the agent repair any broken links in the supply chain.
OUTPUT:
<BehaviorTree><Selector><Sequence><Action>create_supply_chain</Action><Condition>is_in_chain</Condition></Sequence><Sequence><Action>regroup</Action><Action>repair</Action></Sequence></Selector></BehaviorTree>

###

USER COMMAND: Gather information from the environment and share it with the rest of the swarm. If new information is received, update current knowledge.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: gather_information: Action node - Makes the agent gather information from the environment. share_information: Action node - Makes the agent share its knowledge with the rest of the swarm. is_new_information_received: Condition node - Checks if the agent has received new information. update_knowledge: Action node - Updates the agent's current knowledge with the new information.
OUTPUT:
<BehaviorTree><Selector><Sequence><Action>gather_information</Action><Condition>is_new_information_received</Condition><Action>update_knowledge</Action></Sequence><Action>share_information</Action></Selector></BehaviorTree>

###

USER COMMAND: Perform a synchronized dance routine with other robots. If someone makes a mistake, restart from the beginning.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: perform_dance_routine: Action node - Makes the agent perform the synchronized dance routine. is_everyone_in_position: Condition node - Checks if all robots are in their correct positions for the routine. restart: Action node - Restarts the dance routine from the beginning.
OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Action>perform_dance_routine</Action><Condition>is_everyone_in_position</Condition></Sequence><Action>restart</Action></Selector></Sequence></BehaviorTree>

###

USER COMMAND: Search for a specific object and retrieve it. If the object is not found within 5 minutes, return to the starting point and try again.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: search_object: Action node - Makes the agent search for the specific object. is_object_found: Condition node - Checks if the agent has found the object. return_to_start: Action node - Makes the agent return to the starting point. try_again_timer: Condition node - Checks if 5 minutes have passed since the last attempt.
OUTPUT:
<BehaviorTree><Selector><Sequence><Action>search_object</Action><Condition>is_object_found</Condition></Sequence><Sequence><Condition>try_again_timer</Condition><Action>return_to_start</Action><Action>search_object</Action></Sequence></Selector></BehaviorTree>

###

USER COMMAND: Follow a predetermined path while avoiding obstacles. If the path is blocked, find an alternative and continue.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: follow_path: Action node - Makes the agent follow a predetermined path. is_path_blocked: Condition node - Checks if the path is blocked by an obstacle. find_alternative_path: Action node - Makes the agent find an alternative path. continue_on_alternative: Action node - Makes the agent continue following the alternative path.
OUTPUT:
<BehaviorTree><Selector><Sequence><Action>follow_path</Action><Condition>is_path_blocked</Condition><Sequence><Action>find_alternative_path</Action><Action>continue_on_alternative</Action></Sequence></Sequence></Selector></BehaviorTree>

###

USER COMMAND: Coordinate with other robots to form a barrier and defend a specific area. If the barrier is broken, reinforce and resume defense.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: form_barrier: Action node - Makes the agent coordinate with other robots to form a barrier. is_barrier_broken: Condition node - Checks if the barrier has been broken. reinforce_barrier: Action node - Makes the agent reinforce the barrier. defend_area: Action node - Makes the agent defend the specific area.
OUTPUT:
<BehaviorTree><Selector><Sequence><Action>form_barrier</Action><Condition>is_barrier_broken</Condition><Action>reinforce_barrier</Action></Sequence><Action>defend_area</Action></Selector></BehaviorTree>

###

USER COMMAND: Exchange resources with other robots to maintain balanced inventories. If no resources are needed, continue with current task.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: exchange_resources: Action node - Makes the agent exchange resources with other robots. is_resource_needed: Condition node - Checks if the agent is in need of any resources. continue_task: Action node - Makes the agent continue with its current task.
OUTPUT:
<BehaviorTree><Selector><Sequence><Action>exchange_resources</Action><Condition>is_resource_needed</Condition></Sequence><Action>continue_task</Action></Selector></BehaviorTree>

###

USER COMMAND: Perform a rescue mission by locating and retrieving a trapped individual. If the individual cannot be found, continue searching.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: rescue_mission: Action node - Makes the agent perform a rescue mission. is_individual_found: Condition node - Checks if the trapped individual has been located. continue_search: Action node - Makes the agent continue searching for the individual.
OUTPUT:
<BehaviorTree><Selector><Sequence><Action>rescue_mission</Action><Condition>is_individual_found</Condition></Sequence><Action>continue_search</Action></Selector></BehaviorTree>

###

USER COMMAND: Compete with other robots in a race. If a shortcut is available, take it for a chance to win.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: compete_in_race: Action node - Makes the agent compete in the race. is_shortcut_available: Condition node - Checks if a shortcut is available. take_shortcut: Action node - Makes the agent take the shortcut.
OUTPUT:
<BehaviorTree><Selector><Sequence><Action>compete_in_race</Action><Condition>is_shortcut_available</Condition></Sequence><Action>take_shortcut</Action></Selector></BehaviorTree>

###

USER COMMAND: Navigate through a maze and reach the designated end point. If the correct path is not taken, backtrack and try again.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: navigate_maze: Action node - Makes the agent navigate through the maze. is_wrong_path_taken: Condition node - Checks if the wrong path was taken. backtrack: Action node - Makes the agent backtrack and try again.
OUTPUT:
<BehaviorTree><Selector><Sequence><Action>navigate_maze</Action><Condition>is_wrong_path_taken</Condition><Action>backtrack</Action><Action>navigate_maze</Action></Sequence></Selector></BehaviorTree>

###

USER COMMAND: Use the swarm's collective intelligence to make an informed decision on the best course of action. If the decision is not successful, reassess and try again.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: collective_decision_making: Action node

###

USER COMMAND: Create a behavior tree to efficiently distribute resources among a swarm of robots.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: distribute_resources: Action node - Distribute the available resources among the swarm of robots. get_robot_count: Function node - Calculates the number of robots in the swarm. get_resource_amount: Function node - Calculates the amount of resources available. calculate_distribution: Function node - Calculates the distribution of resources among the robots.
OUTPUT:
<BehaviorTree><Sequence><Selector><Condition>greater_than resource_amount</Condition><Action>distribute_resources</Action></Selector><Action>calculate_distribution</Action></Sequence></BehaviorTree>

###

USER COMMAND: Create a behavior tree to efficiently coordinate a swarm of robots to locate a predefined target location.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: move_towards_target: Action node - Move the robot towards the target location. check_target_reached: Condition node - Check if the target location has been reached. coordinate_movement: Function node - Determines the direction and speed of movement for the swarm of robots.
OUTPUT:
<BehaviorTree><Sequence><Condition>not target_reached</Condition><Action>move_towards_target</Action></Sequence></BehaviorTree>

###

USER COMMAND: Generate a behavior tree for a robot swarm to gather and transport resources to a central location.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: gather_resources: Action node - Gather resources from the environment. transport_resources: Action node - Transport resources to the designated central location. enough_resources: Condition node - Check if the required amount of resources has been gathered.
OUTPUT:
<BehaviorTree><Sequence><Condition>not enough_resources</Condition><Selector><Sequence><Action>gather_resources</Action><Action>transport_resources</Action></Sequence><Action>return_to_central_location</Action></Selector></Sequence></BehaviorTree>

###

USER COMMAND: Create a behavior tree for robots to work together in a coordinated manner to build a structure.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: build_structure: Action node - Construct the designated structure. get_required_materials: Function node - Calculate the materials needed for the structure. coordinate_tasks: Function node - Coordinate the tasks of individual robots to efficiently complete the building process.
OUTPUT:
<BehaviorTree><Sequence><Condition>not structure_built</Condition><Action>wait_for_materials</Action><Action>get_required_materials</Action></Sequence></BehaviorTree>

###

USER COMMAND: Generate a behavior tree to coordinate a swarm of robots to surround and contain a target.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: move_towards_target: Action node - Move the robots towards the target. check_target_contained: Condition node - Check if the target has been surrounded and contained. surround_target: Action node - Strategically surround the target.
OUTPUT:
<BehaviorTree><Sequence><Condition>not target_contained</Condition><Selector><Sequence><Action>move_towards_target</Action><Action>surround_target</Action></Sequence><Action>wait_for_instructions</Action></Selector></Sequence></BehaviorTree>

###

USER COMMAND: Develop a behavior tree to coordinate robots to perform a rescue mission in a hazardous environment.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: rescue_victims: Action node - Locate and rescue any trapped victims in the hazardous environment. navigate_hazardous_area: Action node - Navigate through the hazardous environment. check_safe_exit: Condition node - Check if there is a safe exit available for the rescued victims.
OUTPUT:
<BehaviorTree><Sequence><Condition>not safe_exit_found</Condition><Selector><Sequence><Action>rescue_victims</Action><Action>navigate_hazardous_area</Action></Sequence><Action>wait_for_instructions</Action></Selector></Sequence></BehaviorTree>

###

USER COMMAND: Create a behavior tree to coordinate a swarm of robots to efficiently harvest and plant crops in a designated area.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: harvest_crops: Action node - Harvest the crops in the designated area. plant_crops: Action node - Plant new crops in the designated area. check_crop_growth: Condition node - Check the progress of crop growth.
OUTPUT:
<BehaviorTree><Sequence><Condition>not crops_grown</Condition><Selector><Sequence><Action>harvest_crops</Action><Action>plant_crops</Action></Sequence><Action>wait_for_instructions</Action></Selector></Sequence></BehaviorTree>

###

USER COMMAND: Generate a behavior tree to coordinate robots to perform a search and rescue mission for a missing person in a large area.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: search_area: Action node - Systematically search the designated area for the missing person. rescue_person: Action node - Locate and rescue the missing person. check_rescue_complete: Condition node - Check if the rescue mission has been successfully completed.
OUTPUT:
<BehaviorTree><Sequence><Condition>not rescue_complete</Condition><Selector><Sequence><Action>search_area</Action><Action>rescue_person</Action></Sequence><Action>wait_for_instructions</Action></Selector></Sequence></BehaviorTree>

###

USER COMMAND: Create a behavior tree to coordinate swarm robots to collect and analyze environmental data.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: collect_data: Action node - Gather environmental data from various sensors. analyze_data: Action node - Process and analyze the collected data. check_data_accuracy: Condition node - Check if the data collected is accurate and reliable.
OUTPUT:
<BehaviorTree><Sequence><Condition>not data_analyzed</Condition><Selector><Sequence><Action>collect_data</Action><Action>analyze_data</Action></Sequence><Action>wait_for_instructions</Action></Selector></Sequence></BehaviorTree>

###

USER COMMAND: Generate a behavior tree to coordinate robots to work together to construct a bridge over a gap.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: create_bridge: Action node - Assemble the bridge pieces to construct a bridge over the gap. check_bridge_complete: Condition node - Check if the bridge has been successfully assembled. navigate_to_next_building_site: Action node - Move to the next designated building site.
OUTPUT:
<BehaviorTree><Sequence><Condition>not bridge_complete</Condition><Selector><Sequence><Action>create_bridge</Action><Action>navigate_to_next_building_site</Action></Sequence><Action>wait_for_instructions</Action></Selector></Sequence></BehaviorTree>

###

USER COMMAND: Develop a behavior tree to coordinate robots to efficiently sort and transport different types of objects to different designated locations.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: sort_objects: Action node - Use sensors and algorithms to sort the objects into different categories. transport_objects: Action node - Transport the sorted objects to their designated locations. check_all_objects_sorted: Condition node - Check if all objects have been successfully sorted.
OUTPUT:
<BehaviorTree><Sequence><Condition>not all_objects_sorted</Condition><Selector><Sequence><Action>sort_objects</Action><Action>transport_objects</Action></Sequence><Action>wait_for_instructions</Action></Selector></Sequence></BehaviorTree>

###

USER COMMAND: Create a behavior tree to coordinate swarm robots to efficiently construct a protective barrier around a designated area.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: construct_barrier: Action node - Strategically place barrier pieces to form a protective barrier. check_barrier_complete: Condition node - Check if the barrier is fully constructed. navigate_to_next_barrier_site: Action node - Move to the next designated barrier construction site.
OUTPUT:
<BehaviorTree><Sequence><Condition>not barrier_complete</Condition><Selector><Sequence><Action>construct_barrier</Action><Action>navigate_to_next_barrier_site</Action></Sequence><Action>wait_for_instructions</Action></Selector></Sequence></BehaviorTree>

###

USER COMMAND: Generate a behavior tree to coordinate robots to effectively extinguish a fire in a designated area.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: locate_fire: Action node - Use sensors to locate the source of the fire. extinguish_fire: Action node - Use water or other means to extinguish the fire. check_fire_extinguished: Condition node - Check if the fire has been fully extinguished.
OUTPUT:
<BehaviorTree><Sequence><Condition>not fire_extinguished</Condition><Selector><Sequence><Action>locate_fire</Action><Action>extinguish_fire</Action></Sequence><Action>wait_for_instructions</Action></Selector></Sequence></BehaviorTree>

###

USER COMMAND: Develop a behavior tree to coordinate robots to effectively navigate through a maze and reach the designated exit.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: navigate_through_maze: Action node - Systematically explore the maze to find the exit. check_exit_reached: Condition node - Check if the exit has been successfully reached. ensure_path_is_clear: Action node - Use sensors to ensure the path to the exit is clear.
OUTPUT:
<BehaviorTree><Sequence><Condition>not exit_reached</Condition><Selector><Sequence><Action>navigate_through_maze</Action><Action>ensure_path_is_clear</Action></Sequence><Action>wait_for_instructions</Action></Selector></Sequence></BehaviorTree>

###

USER COMMAND: Create a behavior tree to coordinate swarm robots to efficiently construct a structure in an underwater environment.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: build_structure: Action node - Assemble and construct the designated structure using specialized underwater tools. check_structure_complete: Condition node - Check if the structure has been successfully built. navigate_to_next_building_site: Action node - Move to the next designated building site.
OUTPUT:
<BehaviorTree><Sequence><Condition>not structure_complete</Condition><Selector><Sequence><Action>build_structure</Action><Action>navigate_to_next_building_site</Action></Sequence><Action>wait_for_instructions</Action></Selector></Sequence></BehaviorTree>

###

USER COMMAND: Generate a behavior tree to coordinate robots to efficiently transport and assemble parts to build a large-scale structure.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: transport_parts: Action node - Transport the designated parts to the construction site. assemble_structure: Action node - Assemble the parts to construct the structure. check_structure_complete: Condition node - Check if the structure has been fully assembled.
OUTPUT:
<BehaviorTree><Sequence><Condition>not structure_complete</Condition><Selector><Sequence><Action>transport_parts</Action><Action>assemble_structure</Action></Sequence><Action>wait_for_instructions</Action></Selector></Sequence></BehaviorTree>

###

USER COMMAND: Develop a behavior tree to coordinate swarm robots to effectively track and herd a group of animals.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: track_animals: Action node - Use sensors to track the animals and their movements. herd_animals: Action node - Strategically guide the animals towards a designated location. check_herd_complete: Condition node - Check if all animals have been successfully herded to the designated location.
OUTPUT:
<BehaviorTree><Sequence><Condition>not herd_complete</Condition><Selector><Sequence><Action>track_animals</Action><Action>herd_animals</Action></Sequence><Action>wait_for_instructions</Action></Selector></Sequence></BehaviorTree>

###

USER COMMAND: Create a behavior tree to coordinate swarm robots to efficiently perform maintenance work on a large-scale structure.
INSTRUCTIONS: Use the following behaviors to generate XML Behavior tree based on the user command: perform_maintenance: Action node - Use specialized tools to perform maintenance work on the designated areas of the structure. check_maintenance_complete: Condition node - Check if the maintenance work has been successfully completed. move_to_next_maintenance_site: Action node - Move to the next designated maintenance site.
OUTPUT:
<BehaviorTree><Sequence><Condition>not maintenance

###