 
###
3.// INSTRUCTIONS: Use only the following behaviors {'collect_resources': 'Action: Collect nearby resources. Returns True if resources are collected, False otherwise.', 'drop_off_resources': 'Subtree node: Represents a behavior tree for dropping off resources.', 'idle': 'Action: Pause and wait for instructions. Returns True if idle, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 10 units. Returns True if the target is within 10 units of distance, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3.// USER COMMAND: Collect resources until target is reached, then drop off resources and go idle.
3.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>collect_resources</Action><Condition>is_target_reached</Condition><Action>drop_off_resources</Action></Sequence><Action>idle</Action></Selector></BehaviorTree>
 
###
4.// INSTRUCTIONS: Use only the following behaviors {'move_to_target': 'Action: Move towards a specified target location. Returns True once the target is reached.', 'is_target_reached': 'Condition: Check if target is within 5 units. Returns True if the target is within 5 units of distance, False otherwise.', 'scan_for_enemy': 'Action: Scan the area for enemies. Returns True if enemies are detected, False otherwise.', 'attack': 'Action: Attack enemies. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Move to a specified location, scan for enemies, and attack if enemies are detected.
4.// OUTPUT:
<BehaviorTree><Sequence><Action>move_to_target</Action><Condition>is_target_reached</Condition><Sequence><Action>scan_for_enemy</Action><Action>attack</Action></Sequence></Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'collect_items': 'Subtree node: Represents a behavior tree for collecting items and avoiding obstacles.', 'give_items': 'Subtree node: Represents a behavior tree for giving items to other robots.', 'is_target_in_range': 'Condition: Check if the target is within range. Returns True if the target is within range, False otherwise.', 'follow_path': 'Action: Follow a predefined path. Returns True once the path is completed.', 'detect_obstacle': 'Condition: Check for obstacles ahead. Returns True if an obstacle is detected, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Follow a path, collect items, and give items to other robots only if target is in range and there are no obstacles ahead.
5.// OUTPUT:
<BehaviorTree><Sequence><Action>follow_path</Action><Action>collect_items</Action><Condition>is_target_in_range</Condition><Condition>detect_obstacle</Condition><Action>give_items</Action></Sequence></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'navigate_tight_spaces': 'Action: Navigate through tight spaces while avoiding obstacles. Returns True once the space is navigated.', 'detect_target': 'Condition: Check for nearby targets. Returns True if a target is detected, False otherwise.', 'follow_path': 'Action: Follow a predefined path. Returns True once the path is completed.', 'is_obstacle_detected': 'Condition: Check for obstacles in current path. Returns True if an obstacle is detected, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Navigate through tight spaces and follow a predefined path, while checking for obstacles and detecting any nearby targets.
6.// OUTPUT:
<BehaviorTree><Sequence><Action>navigate_tight_spaces</Action><Action>follow_path</Action><Condition>is_obstacle_detected</Condition><Condition>detect_target</Condition></Sequence></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'avoid_threat': 'Action: Avoid potential threats based on detected enemy signals. Always returns True.', 'detect_target': 'Condition: Check for nearby targets. Returns True if a target is detected, False otherwise.', 'follow_path': 'Action: Follow a predefined path. Returns True once the path is completed.', 'detect_change_in_light': 'Condition: Check for changes in light intensity. Returns True if a significant change is detected, False otherwise.', 'gather_info': 'Subtree node: Represents a behavior tree for gathering information and relaying it to other robots.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: Follow a predefined path, while gathering information and avoiding potential threats based on enemy signals and changes in light intensity. Avoiding threats takes priority.
7.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>follow_path</Action><Action>gather_info</Action></Sequence><Sequence><Condition>detect_target</Condition><Condition>detect_change_in_light</Condition><Action>avoid_threat</Action></Sequence></Selector></BehaviorTree>
###
3.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Returns True if specified duration is met, False otherwise.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'detect_color': 'Condition: Check for color in a specific area. Returns True if the specified color is detected, False otherwise.', 'detect_object': 'Condition: Check for the presence of an object in the environment. Returns True if an object is detected, False otherwise.', 'get_closer_to_object': 'Action: Move closer to the detected object. Returns True if the agent successfully gets closer, False otherwise.', 'interact_with_object': 'Action: Interact with the detected object. Returns True if interaction is successful, False otherwise.', 'is_object_in_location': 'Condition: Check if the object is in the specified location. Returns True if the object is in the specified location, False otherwise.', 'navigate_to_location': 'Action: Navigate to a specified location. Returns True if the agent reaches the location, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3.// USER COMMAND: generate behavior tree to 'Search for a specific colored object, get closer to it, and interact with it when within 10 units of distance. Once interaction is complete, navigate back to the starting location and freeze movement.'Output only the XML behavior tree without extra text.
3.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>detect_color</Condition> <Condition>detect_object</Condition> <Action>get_closer_to_object</Action> </Sequence> <Selector> <Sequence> <Condition>is_object_in_location</Condition> <Action>interact_with_object</Action> <Action>navigate_to_location</Action> <Action>task_completed</Action> </Sequence> <Action>continue_movement_agent</Action> </Selector> </Selector> </BehaviorTree>

###
4.// INSTRUCTIONS: Use only the following behaviors {'is_enemy_detected': 'Condition: Check for enemy presence in the surroundings. Returns True if an enemy is detected, False otherwise.', 'attack_enemy': 'Action: Attack the detected enemy. Returns True if the attack is successful, False otherwise.', 'is_action_successful': 'Condition: Check if the preceding action was successful. Returns True if the action was successful, False otherwise.', 'retreat': 'Action: Retreat from the enemy. Returns True if the agent successfully retreats, False otherwise.', 'defend_area': 'Action: Defend a designated area against enemy attacks. Returns True if the area is successfully defended, False otherwise.', 'get_closer_to_enemy': 'Action: Move closer to the detected enemy. Returns True if the agent successfully gets closer, False otherwise.', 'stop_movement': 'Action: Stop all agent movements. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'If an enemy is detected, move closer to it and attack it. If the attack is unsuccessful, retreat and defend a designated area.'Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>is_enemy_detected</Condition> <Action>get_closer_to_enemy</Action> <Action>attack_enemy</Action> <Selector> <Sequence> <Condition>is_action_successful</Condition> <Action>stop_movement</Action> </Sequence> <Action>retreat</Action> </Selector> </Sequence> <Selector> <Sequence> <Condition>is_enemy_detected</Condition> <Action>defend_area</Action> </Sequence> <Action>stop_movement</Action> </Selector> </Selector> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Returns True if specified duration is met, False otherwise.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'detect_object': 'Condition: Check for the presence of an object in the environment. Returns True if an object is detected, False otherwise.', 'go_to_next_object': 'Action: Move to the next detected object. Returns True if the agent successfully moves to the next object, False otherwise.', 'is_object_within_distance': 'Condition: Check if the object is within a specified distance. Returns True if the object is within the specified distance, False otherwise.', 'collect_object': 'Action: Collect the object. Returns True if the object is successfully collected, False otherwise.', 'deposit_object': 'Action: Deposit the collected objects. Returns True if all objects are successfully deposited, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Detect and collect objects within a specified distance, move to the next object when within 5 units of distance. Once all objects are collected, deposit them and freeze movement.'Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>detect_object</Condition> <Action>collect_object</Action> </Sequence> <Selector> <Sequence> <Condition>is_object_within_distance</Condition> <Action>go_to_next_object</Action> </Sequence> <Action>continue_movement_agent</Action> </Selector> </Selector> <Sequence> <Action>deposit_object</Action> <Action>task_completed</Action> </Sequence> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'detect_injured_agent': 'Condition: Check for an injured agent in the environment. Returns True if an injured agent is detected, False otherwise.', 'heal_agent': 'Action: Heal the injured agent. Returns True if healing is successful, False otherwise.', 'is_action_successful': 'Condition: Check if the preceding action was successful. Returns True if the action was successful, False otherwise.', 'retreat': 'Action: Retreat from the enemy. Returns True if the agent successfully retreats, False otherwise.', 'escort_agent': 'Action: Escort the injured agent to a designated location. Returns True if escort is successful, False otherwise.', 'is_agent_healed': 'Condition: Check if the injured agent is healed. Returns True if the injured agent is healed, False otherwise.', 'get_closer_to_agent': 'Action: Move closer to the detected injured agent. Returns True if the agent successfully gets closer, False otherwise.', 'stop_movement': 'Action: Stop all agent movements. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to ' 
###
3.// INSTRUCTIONS: Use only the following behaviors {'change_color_to_blue': 'Action: Change agent's color to blue. Returns True.', 'follow_leader': 'Action: Follow the designated leader. Always returns True.', 'gather_food': 'Action: Move towards food source and gather. Returns True if food is gathered successfully, False otherwise.', 'is_food_source_detected': 'Condition: Check if food source is within 10 units. Returns True if food source is detected within 10 units, False otherwise.', 'is_leader_in_position': 'Condition: Check if leader is in position at the designated location. Returns True if leader is in position, False otherwise.', 'is_leader_reachable': 'Condition: Check if leader is within 20 units. Returns True if leader is within 20 units, False otherwise.', 'move_to_food_source': 'Action: Move towards food source. Always returns True.', 'move_to_leader': 'Action: Move towards designated leader. Returns True if leader is reached successfully, False otherwise.', 'return_to_nest': 'Action: Return to the nest. Returns True if agent reaches the nest successfully, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3.// USER COMMAND: generate behavior tree to 'follow the designated leader, move towards food source, and return to nest.'Output only the XML behavior tree without extra text.
3.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Action>move_to_leader</Action> <Condition>is_leader_reachable</Condition> <Condition>is_leader_in_position</Condition> <Action>follow_leader</Action> </Sequence> <Selector> <Action>move_to_food_source</Action> <Condition>is_food_source_detected</Condition> <Condition>gather_food</Condition> </Selector> <Action>return_to_nest</Action> </Selector> </BehaviorTree>

###
4.// INSTRUCTIONS: Use only the following behaviors {'check_temperature': 'Action: Check the temperature of the environment. Returns True if temperature is within optimal range, False otherwise.', 'collect_data': 'Action: Collect data from sensors. Always returns True.', 'cool_environment': 'Action: Activate cooling system to bring down the temperature. Returns True if temperature is successfully lowered, False otherwise.', 'find_optimal_position': 'Action: Move around to find the optimal position for data collection. Returns True if optimal position is found, False otherwise.', 'is_ambient_light_sufficient': 'Condition: Check if ambient light is within optimal range. Returns True if ambient light is in optimal range, False otherwise.', 'is_data_collected': 'Condition: Check if data is successfully collected. Returns True if data is collected, False otherwise.', 'is_temperature_optimal': 'Condition: Check if temperature is within optimal range. Returns True if temperature is within optimal range, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'check the temperature, move around to find optimal position, and collect data.'Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>is_ambient_light_sufficient</Condition> <Sequence> <Action>check_temperature</Action> <Condition>is_temperature_optimal</Condition> <Action>collect_data</Action> <Condition>is_data_collected</Condition> </Sequence> </Sequence> <Action>find_optimal_position</Action> </Selector> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'avoid_collision': 'Action: Move to avoid collision with surrounding objects. Always returns True.', 'check_status': 'Action: Check the status of the agent. Returns True if agent is functioning properly, False if repair is needed.', 'detect_obstacles': 'Action: Use sensors to detect obstacles. Returns True if obstacle is detected, False otherwise.', 'move_to_destination': 'Action: Move towards designated destination. Returns True if destination is reached successfully, False otherwise.', 'navigate_obstacle': 'Action: Navigate around the obstacle. Returns True if the agent successfully navigates around the obstacle, False otherwise.', 'repair': 'Action: Repair any damage to the agent. Returns True if repair is successful, False otherwise.', 'stop_movement': 'Action: Stop agent's movement. Returns False.', 'check_battery': 'Action: Check battery level. Returns True if battery level is sufficient, False otherwise.', 'charge_battery': 'Action: Charge agent's battery. Returns True if battery is successfully charged, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'navigate around obstacles, move to designated destination, and check battery level.'Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>check_battery</Condition> <Condition>charge_battery</Condition> </Sequence> <Sequence> <Action>detect_obstacles</Action> <Condition>is_obstacle_detected</Condition> <Action>navigate_obstacle</Action> <Condition>avoid_collision</Condition> </Sequence> <Sequence> <Action>move_to_destination</Action> <Condition>is_destination_reached</Condition> </Sequence> </Selector> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'detect_intruder': 'Action: Use sensors to detect any intruders. Returns True if an intruder is detected, False otherwise.', 'form_defensive_position': 'Action: Form a defensive position with other agents. Returns True if the defensive position is successfully formed, False otherwise.', 'move_to_intruder': 'Action: Move towards the detected intruder. Returns True if intruder is reached, False otherwise.', 'neutralize_intruder': 'Action: Take action to neutralize the intruder. Returns True if intruder is successfully neutralized, False otherwise.', 'secure_area': 'Action: Secure the area and prevent intruders from entering. Returns True if area is secured, False otherwise.', 'set_patrol_route': 'Action: Set a patrol route for the agents. Returns True if patrol route is successfully set, False otherwise.', 'is_defensive_position_formed': 'Condition: Check if a defensive position has been formed with other agents. Returns True if defensive position is formed, False otherwise.', 'is_intruder_found': 'Condition: Check if an intruder has been detected. Returns True if an intruder is found, False otherwise.', 'is_patrol_route_set': 'Condition: Check if patrol route has been set. Returns True if patrol route is set, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'detect intruders,
###
3.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3.// USER COMMAND: generate behavior tree to 'Change agent color to green then avoid obstacles' Output only the XML behavior tree without extra text.
3.// OUTPUT:
<BehaviorTree> <Sequence> <Action>change_color_to_green</Action> <Action>avoid_obstacle</Action> </Sequence> </BehaviorTree>

###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Avoid obstacles and check if target is reached' Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>is_obstacle_detected</Condition> <Action>avoid_obstacle</Action> </Sequence> <Sequence> <Condition>is_target_reached</Condition> <Action>task_completed</Action> </Sequence> </Selector> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Move randomly until target is detected then continue movement and check if target is reached' Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree> <Sequence> <Action>wander</Action> <Condition>is_target_detected</Condition> <Action>continue_movement_agent</Action> <Condition>is_target_reached</Condition> <Action>task_completed</Action> </Sequence> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 
###
4.// INSTRUCTIONS: Use only the following behaviors {'detect_enemy': 'Action: Use sensors to detect enemy robots in the area. Always returns True.', 'track_enemy': 'Action: Follow the closest enemy robot within 10 units. Always returns True.', 'fire_at_enemy': 'Action: Fire projectiles at the enemy until they are destroyed. Always returns True.', 'is_enemy_detected': 'Condition: Check if an enemy robot is detected within 20 units. Returns True if an enemy is detected, False otherwise.', 'within_shooting_range': 'Condition: Check if an enemy robot is within 5 units. Returns True if within range, False otherwise.', 'enemies_left': 'Condition: Check if there are still enemy robots remaining. Returns True if there are enemies left, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Target and eliminate all enemy robots within the designated area.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>detect_enemy</Action><Condition>is_enemy_detected</Condition><Sequence><Action>track_enemy</Action><Action>fire_at_enemy</Action></Sequence><Condition>within_shooting_range</Condition></Sequence><Sequence><Condition>enemies_left</Condition><Action>detect_enemy</Action><Condition>is_enemy_detected</Condition><Sequence><Action>track_enemy</Action><Action>fire_at_enemy</Action></Sequence><Condition>within_shooting_range</Condition></Sequence><TaskCompleted>true</True></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'get_food': 'Subtree node: Represents a behavior tree for finding and collecting food sources.', 'deposit_food': 'Action: Deposit food collected in the storage area. Always returns True.', 'move_to_food_source': 'Action: Move towards the closest food source. Always returns True.', 'eat_food': 'Action: Eat the collected food to restore energy. Always returns True.', 'is_food_available': 'Condition: Check if there is food available in the environment. Returns True if food source is detected, False otherwise.', 'is_hungry': 'Condition: Check if energy level falls below a certain threshold. Returns True if energy is low, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Forage for and collect food sources. If energy is low, eat food or deposit food in storage to replenish.
5.// OUTPUT:
<BehaviorTree><Selector><Condition>is_food_available</Condition><Subtree>get_food</Subtree><Condition>is_hungry</Condition><Selector><Sequence><Condition>is_food_available</Condition><Action>move_to_food_source</Action><Action>eat_food</Action></Sequence><Sequence><Condition>is_food_available</Condition><Action>move_to_food_source</Action><Action>deposit_food</Action></Sequence></Selector></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'random_walk': 'Action: Move randomly within the specified boundary. Always returns True.', 'obstacle_avoidance': 'Action: Use sensors to detect obstacles and avoid collisions. Always returns True.', 'change_color': 'Action: Change the agent's color to red. Always returns True.', 'enter_building': 'Action: Enter the designated building. Always returns True.', 'exit_building': 'Action: Exit the building. Always returns True.', 'in_building': 'Condition: Check if the agent is inside a building. Returns True if inside, False otherwise.', 'building_detected': 'Condition: Check if a building is detected within the boundary. Returns True if a building is detected, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Explore the environment within a specified boundary, avoiding obstacles and entering buildings along the way.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>in_building</Condition><Action>exit_building</Action><Sequence><Condition>building_detected</Condition><Action>enter_building</Action><Action>change_color</Action></Sequence></Sequence><Sequence><Condition>is_obstacle_detected</Condition><Action>obstacle_avoidance</Action><Action>change_color</Action></Sequence><Action>random_walk</Action></Selector></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'follow_leader': 'Action: Follow the designated leader robot. Always returns True.', 'avoid_collision': 'Action: Use sensors to detect obstacles and avoid collisions. Always returns True.', 'form_shape': 'Action: Form a specific shape with the leader and other robots. Always returns True.', 'update_position': 'Action: Continuously update the agent's position based on sensor readings. Always returns True.', 'is_leader_detected': 'Condition: Check if the designated leader robot is detected. Returns True if detected, False otherwise.', 'is_in_formation': 'Condition: Check if the agent is in the specified shape with the leader and other robots. Returns True if in formation, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: Follow the designated leader robot and form a triangle shape with two other robots.
7.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_leader_detected</Condition><Action>follow_leader</Action><Condition>is_in_formation</Condition><Sequence><Condition>is_leader_detected</Condition><Action>form_shape</Action><Condition>is_in_formation</Condition></Sequence></Sequence><Sequence><Condition>is_obstacle_detected</Condition><Action>avoid_collision</Action></Sequence><Action>update_position</Action></Selector></BehaviorTree> 
###
4.// INSTRUCTIONS: Use only the following behaviors {'open_door': 'Action: Attempt to open the door in front of the agent. Returns True if the door is successfully opened, False otherwise.', 'close_door': 'Action: Attempt to close the door in front of the agent. Returns True if the door is successfully closed, False otherwise.', 'check_door_status': 'Condition: Checks if the door in front of the agent is already open or closed. Returns True if the door is open, False if it is closed.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Go through the door if it is open, otherwise open the door and then go through it.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>check_door_status</Condition><Action>go_through_door</Action></Sequence><Sequence><Action>open_door</Action><Action>go_through_door</Action></Sequence></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'sense_environment': 'Action: Use sensors to detect the surrounding environment. Always returns True.', 'calculate_path': 'Action: Calculate the shortest path to the given destination. Always returns True.', 'obstacle_detected': 'Condition: Checks if an obstacle is detected in the path. Returns True if an obstacle is present, False otherwise.', 'path_clear': 'Condition: Checks if the path to the destination is clear. Returns True if the path is clear, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Sense the environment, calculate the path, and only move if the path is clear. If an obstacle is detected, recalculate the path.
5.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Action>sense_environment</Action></Sequence><Action>calculate_path</Action></Sequence><Selector><Condition>obstacle_detected</Condition><Sequence><Action>calculate_path</Action><Selector><Condition>path_clear</Condition><Action>move_to_destination</Action></Selector></Sequence></Selector></Sequence></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'identify_anomaly': 'Action: Use sensors to identify any anomalies in the surroundings. Always returns True.', 'fix_anomaly': 'Action: Attempt to fix the detected anomaly. Returns True if the anomaly is successfully fixed, False otherwise.', 'wait': 'Action: Stay in place and wait for further instructions. Always returns True.', 'is_anomaly_fixed': 'Condition: Checks if the anomaly has been successfully fixed. Returns True if the anomaly is fixed, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: If an anomaly is detected, attempt to fix it. If it can't be fixed, wait for further instructions.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>identify_anomaly</Action><Sequence><Action>fix_anomaly</Action><Action>restore_normal_operations</Action></Sequence></Sequence><Action>wait</Action></Selector></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'greet_person': 'Action: Approach a person and greet them upon recognizing their face. Always returns True.', 'detect_person': 'Action: Use sensors to detect a person's presence. Always returns True.', 'is_person_present': 'Condition: Checks if a person has been detected. Returns True if a person is present, False otherwise.', 'gesture_friendliness': 'Action: Perform a friendly gesture towards the person. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: If a person is detected, approach them and perform a friendly gesture to greet them.
7.// OUTPUT:
<BehaviorTree><Selector><Condition>is_person_present</Condition><Sequence><Action>detect_person</Action><Selector><Condition>is_person_present</Condition><Sequence><Action>greet_person</Action><Action>gesture_friendliness</Action></Sequence></Selector></Sequence></Selector></BehaviorTree>
###
4.// INSTRUCTIONS: Use only the following behaviors {'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'follow_path': 'Action: Follow a predefined path. Always returns True.', 'move_to_point_a': 'Action: Move to point A. Always returns True.', 'move_to_point_b': 'Action: Move to point B. Always returns True.', 'detect_target': 'Action: Detect a target within the environment. Returns True if a target is detected, False otherwise.', 'collect_target': 'Action: Collect the target object if it is within reach. Returns True if the target is collected, False otherwise.', 'is_target_collected': 'Condition: Check if the target object has been collected. Returns True if the target is collected, False otherwise.', 'is_at_point_a': 'Condition: Check if the robot is at point A. Returns True if at point A, False otherwise.', 'is_at_point_b': 'Condition: Check if the robot is at point B. Returns True if at point B, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Collect the target object and deliver it to either point A or point B, depending on which point has less obstacles in the way.'. Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>detect_target</Condition><Action>collect_target</Action><Selector><Sequence><Condition>is_obstacle_detected</Condition><Action>move_to_point_a</Action></Sequence><Sequence><Condition>is_at_point_a</Condition><Action>move_to_point_b</Action></Sequence></Selector></Sequence><Sequence><Condition>is_target_collected</Condition><Selector><Sequence><Condition>is_obstacle_detected</Condition><Action>move_to_point_b</Action></Sequence><Sequence><Condition>is_at_point_b</Condition><Action>move_to_point_a</Action></Sequence></Selector></Sequence><Sequence><Condition>is_obstacle_detected</Condition><Action>avoid_obstacle</Action></Sequence></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'randomly_move': 'Action: Move randomly within the environment. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'rotate_clockwise': 'Action: Rotate the robot in a clockwise direction. Always returns True.', 'rotate_counterclockwise': 'Action: Rotate the robot in a counterclockwise direction. Always returns True.', 'detect_obstacle_front': 'Condition: Check if there is an obstacle directly in front of the robot. Returns True if an obstacle is detected, False otherwise.', 'detect_obstacle_right': 'Condition: Check if there is an obstacle to the right of the robot. Returns True if an obstacle is detected, False otherwise.', 'detect_obstacle_left': 'Condition: Check if there is an obstacle to the left of the robot. Returns True if an obstacle is detected, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Explore the environment and map out obstacles, while avoiding them and changing color to green.'. Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>detect_obstacle_front</Condition><Sequence><Action>rotate_counterclockwise</Action><Action>randomly_move</Action></Sequence></Sequence><Sequence><Condition>detect_obstacle_right</Condition><Action>rotate_counterclockwise</Action></Sequence><Sequence><Condition>detect_obstacle_left</Condition><Action>rotate_clockwise</Action></Sequence><Action>randomly_move</Action></Selector><Action>change_color_to_green</Action></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'follow_leader': 'Action: Follow the leader robot in the swarm. Returns True if following correctly, False otherwise.', 'change_color_to_red': "Action: Change agent's color to red. Always returns True.", 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_blue': "Action: Change agent's color to blue. Always returns True.", 'detect_group_alignment': 'Condition: Check if the robot is aligned with the rest of the group. Returns True if aligned, False otherwise.', 'detect_group_separation': 'Condition: Check if the robot is too far away from the rest of the group. Returns True if too far away, False otherwise.', 'detect_group_cohesion': 'Condition: Check if the robot is close enough to the rest of the group. Returns True if close enough, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'As part of a swarm, maintain alignment, separation and cohesion with the other robots while changing color to indicate status.'. Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>detect_group_cohesion</Condition><Sequence><Condition>detect_group_alignment</Condition><Action>follow_leader</Action></Sequence></Sequence><Sequence><Condition>detect_group_separation</Condition><Action>avoid_obstacle</Action></Sequence><Selector><Sequence><Action>change_color_to_red</Action></Sequence><Sequence><Action>change_color_to_blue</Action></Sequence></Selector></Selector><Action>change_color_to_green</Action></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'goto_coordinate': 'Action: Go to a specified coordinate within the environment. Returns True if successfully reached, False otherwise.', 'detect_obstacle_nearby': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'detect_object_nearby': 'Condition: Check for objects nearby. Returns True if an object is detected, False otherwise.', 'detect_object_ahead': 'Condition: Check for objects directly ahead. Returns True if an object is detected, False otherwise.', 'pick_up_object': 'Action: Pick up the object within reach. Returns True if successful, False otherwise.', 'drop_object': 'Action: Drop the held object. Returns True if successful, False otherwise.', 'is_object_held': 'Condition: Check if the robot is currently holding an object. Returns True if object is held, False otherwise.'}, to construct behavior tree in XML format to the following command.
###
3.// INSTRUCTIONS: Use only the following behaviors {'detect_target': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'get_direction_to_target': 'Condition: Get the direction to the target. Returns the direction in degrees.', 'move_towards_target': 'Action: Move towards the target based on given direction and speed. Always returns True.', 'stop_movement': 'Action: Stop movement. Always returns True.', 'spin_around': 'Action: Spin in a circle. Always returns True.', 'set_target': 'Action: Set a new target location within the environment. Always returns True.', 'is_target_reached': 'Condition: Check if the target is within 5 units. Returns True if the target is within 5 units of distance, False otherwise.', 'wait': 'Action: Wait for 3 seconds. Always return True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3.// USER COMMAND: generate behavior tree to 'Search for the target, move towards it, and stop when within 5 units. If target is still not reached after 3 seconds, spin around and set a new target.' Output only the XML behavior tree without extra text.
3.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>detect_target</Condition><Selector><Sequence><Condition>get_direction_to_target</Condition><Action>move_towards_target</Action><Condition>is_target_reached</Condition><Action>stop_movement</Action></Sequence><Sequence><Action>wait</Action><Action>spin_around</Action><Action>set_target</Action></Sequence></Selector></Sequence><Action>task_completed</Action></Selector></BehaviorTree>

###
4.// INSTRUCTIONS: Use only the following behaviors {'get_direction_to_nest': 'Condition: Get the direction to the nest. Returns the direction in degrees.', 'move_towards_nest': 'Action: Move towards the nest based on given direction and speed. Always returns True.', 'stop_movement': 'Action: Stop movement. Always returns True.', 'randomly_rotate_around': 'Action: Rotate in a random direction. Always returns True.', 'is_at_nest': 'Condition: Check if the agent is at the nest. Returns True if the agent is at the nest, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Return to the nest, but if the nest cannot be found, rotate randomly until nest is located.' Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>get_direction_to_nest</Condition><Action>move_towards_nest</Action><Condition>is_at_nest</Condition><Action>stop_movement</Action></Sequence><Action>randomly_rotate_around</Action></Selector><Action>task_completed</Action></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'detect_target': 'Condition: Check if target is within 10 units. Returns True if the target is within 10 units of distance, False otherwise.', 'get_direction_to_target': 'Condition: Get the direction to the target. Returns the direction in degrees.', 'move_towards_target': 'Action: Move towards the target based on given direction and speed. Always returns True.', 'stop_movement': 'Action: Stop movement. Always returns True.', 'get_direction_to_nest': 'Condition: Get the direction to the nest. Returns the direction in degrees.', 'move_towards_nest': 'Action: Move towards the nest based on given direction and speed. Always returns True.', 'grab_target': 'Action: Grab the target object if it is within reach. Always returns True.', 'drop_target': 'Action: Drop the target object at the designated drop-off location. Always returns True.', 'is_target_grabbed': 'Condition: Check if the target object has been grabbed. Returns True if the target is grabbed, False otherwise.', 'is_at_dropoff': 'Condition: Check if the robot is at the designated drop-off location. Returns True if at the drop-off location, False otherwise.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Search for the target, if target is within reach, grab it and return to nest. If target is not reachable, move towards nest and drop any grabbed target.' Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>detect_target</Condition><Selector><Sequence><Condition>get_direction_to_target</Condition><Action>move_towards_target</Action><Action>grab_target</Action><Condition>is_at_dropoff</Condition><Action>drop_target</Action></Sequence><Sequence><Condition>get_direction_to_nest</Condition><Action>move_towards_nest</Action><Action>drop_target</Action></Sequence></Selector></Sequence><Selector><Sequence><Condition>is_target_grabbed</Condition><Selector><Sequence><Condition>is_at_dropoff</Condition><Action>drop_target</Action></Sequence><Action>stop_movement</Action></Selector></Sequence><Sequence><Condition>is_agent_in_nest</Condition><Action>stop_movement</Action></Sequence></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'detect_target': 'Condition: Check if target is within 10 units. Returns True if the target is within 10 units of distance, False otherwise.', 'get_direction_to_target': 'Condition: Get the direction to the target. Returns the direction in degrees.', 'move_towards_target': 'Action: Move towards the target based on given direction and speed. Always returns True.', 'stop_movement': 'Action: Stop movement. Always returns True.', 'randomly_rotate_around': 'Action: Rotate in a random direction. Always returns True.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'form_line': 'Action: Form a vertical line at the center. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Move towards target, but if target is not found after 5 seconds, form a line and rotate randomly until target is found.' Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>detect_target</Condition><Selector><Sequence><Condition>get_direction_to_target 
###
4.// INSTRUCTIONS: Use only the following behaviors {'create_formation': 'Action: Create a formation with other agents in the environment. Always returns True.', 'switch_formation': 'Action: Switch to a different formation. Always returns True.', 'move_to_leader': 'Action: Move closer to the designated leader. Always returns True.', 'is_leader_active': 'Condition: Check if the leader agent is active and able to lead the formation. Returns True if the leader is active, False otherwise.', 'is_formation_completed': 'Condition: Check if the current formation is completed. Returns True if formation is completed, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Create a formation with 5 robots, switch to a different formation, and move closer to the designated leader.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>create_formation</Action><Action>switch_formation</Action></Sequence><Selector><Sequence><Condition>is_leader_active</Condition><Action>move_to_leader</Action></Sequence><Sequence><Condition>is_formation_completed</Condition><Action>end_formation</Action></Sequence></Selector></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'explore_area': 'Action: Explore and map out the assigned area. Always returns True.', 'analyze_map': 'Action: Analyze the mapped data and identify potential resources. Always returns True.', 'collect_resource': 'Action: Collect resources in the designated area. Always returns True.', 'dump_resources': 'Action: Dump collected resources in a designated location. Always returns True.', 'is_resource_available': 'Condition: Check if resources are available in the current area. Returns True if resources are present, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Explore the assigned area, analyze mapped data and collect resources if they are available. Dump the collected resources at a designated location.
5.// OUTPUT:
<BehaviorTree><Sequence><Action>explore_area</Action><Action>analyze_map</Action><Action>collect_resource</Action><Sequence><Condition>is_resource_available</Condition><Action>dump_resources</Action></Sequence></Sequence></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'travel_to_dest': 'Subtree node: Represents a behavior tree for traveling to a designated location.', 'collect_sample': 'Action: Collect a sample of the environment for analysis. Always returns True.', 'analyze_sample': 'Action: Analyze the collected sample. Always returns True.', 'identify_pattern': 'Action: Identify any patterns in the analyzed data. Always returns True.', 'is_sample_collected': 'Condition: Check if a sample has been collected. Returns True if a sample is present, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Travel to a designated location and collect and analyze a sample of the environment. Identify any patterns in the analyzed data.
6.// OUTPUT:
<BehaviorTree><Sequence><Action>travel_to_dest</Action><Action>collect_sample</Action><Sequence><Condition>is_sample_collected</Condition><Sequence><Action>analyze_sample</Action><Action>identify_pattern</Action></Sequence></Sequence></Sequence></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'wait_for_signal': 'Action: Wait for a signal from the designated leader. Always returns True.', 'follow_leader': 'Action: Follow the designated leader. Always returns True.', 'perform_task': 'Action: Perform a specific task assigned by the leader. Always returns True.', 'is_task_complete': 'Condition: Check if the assigned task is completed. Returns True if task is completed, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: Wait for a signal from the leader and follow their instructions to perform a task.
7.// OUTPUT:
<BehaviorTree><Sequence><Action>wait_for_signal</Action><Selector><Sequence><Condition>is_task_complete</Condition><Action>end_task</Action></Sequence><Action>follow_leader</Action><Action>perform_task</Action></Selector></Sequence></BehaviorTree> 
###
3.// INSTRUCTIONS: Use only the following behaviors {'move_towards_target': 'Action: Move towards the specified target. Always returns True.', 'search_random_area': 'Action: Search for a specific object in a random area within a given range. Always returns True.', 'locate_target': 'Subtree node: Uses a behavior tree to locate a specific target.', 'is_obstacle_present': 'Condition: Checks if an obstacle is present in the current path. Returns True if an obstacle is detected, False otherwise.', 'is_target_reached': 'Condition: Checks if the target is within a certain distance. Returns True if the target is reached, False otherwise.'}, to construct behavior tree in XML format to perform the following command. If the available behaviors do not fit with the user command, say (Sorry, I can't do the task)
3.// USER COMMAND: Search and retrieve a specific object within 10 meters from the robot's current position.
3.// OUTPUT:
<BehaviorTree><Sequence><Action>search_random_area</Action><Selector><Sequence><Subtree>locate_target</Subtree><Action>move_towards_target</Action></Sequence><Action>task_completed</Action></Selector></Sequence></BehaviorTree>
 
###
4.// INSTRUCTIONS: Use only the following behaviors {'perform_predefined_task': 'Action: Perform a predefined task. Always returns True.', 'communicate_with_other_robots': 'Action: Communicate with other robots to receive and send information. Always returns True.', 'check_environment': 'Subtree node: Uses a behavior tree to check the environment for potential threats.', 'is_task_completed': 'Condition: Checks if a task has been successfully completed. Returns True if the task is completed, False otherwise.'}, to construct behavior tree in XML format to perform the following command. If the available behaviors do not fit with the user command, say (Sorry, I can't do the task)
4.// USER COMMAND: Coordinate with other robots to perform a synchronized action and check if the task is completed.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>communicate_with_other_robots</Action><Subtree>check_environment</Subtree><Condition>is_task_completed</Condition><Action>perform_predefined_task</Action></Sequence></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'find_water_source': 'Action: Find a water source in the environment and move towards it. Returns True if the water source is found, False otherwise.', 'collect_water': 'Action: Once the water source is found, collect water from it. Returns True if successful, False otherwise.', 'is_water_storage_full': 'Condition: Checks if the water storage is full. Returns True if full, False otherwise.', 'store_water': 'Action: Store the collected water in the water storage. Returns True if successful, False otherwise.', 'is_target_reached': 'Condition: Checks if the target is within a specific distance. Returns True if the target is reached, False otherwise.', 'move_randomly': 'Action: Move randomly in the environment. Always returns True.'}, to construct behavior tree in XML format to perform the following command. If the available behaviors do not fit with the user command, say (Sorry, I can't do the task)
5.// USER COMMAND: Find and collect water, and store it in the water storage until full, then return to the starting position.
5.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Action>find_water_source</Action><Selector><Sequence><Condition>is_target_reached</Condition><Action>collect_water</Action><Sequence><Condition>is_water_storage_full</Condition></Sequence></Selector></Sequence><Action>move_randomly</Action></Selector><Selector><Sequence><Condition>is_target_reached</Condition><Action>store_water</Action></Sequence><Action>move_randomly</Action></Selector></Sequence></BehaviorTree>
 
###
6.// INSTRUCTIONS: Use only the following behaviors {'scan_environment': 'Action: Scan the environment for potential hazards. Returns True if safe, False if hazards are detected.', 'move_safely': 'Action: Move to a safe location. Returns True if successful, False otherwise.', 'communicate_with_other_robots': 'Action: Communicate with other robots to receive and send information. Always returns True.', 'is_target_detected': 'Condition: Checks if the target is within a specific range. Returns True if the target is detected, False otherwise.', 'is_target_reached': 'Condition: Checks if the target is reached. Returns True if the target is within a specific distance, False otherwise.', 'is_obstacle_present': 'Condition: Checks for obstacles in the current path. Returns True if an obstacle is present, False otherwise.'}, to construct behavior tree in XML format to perform the following command. If the available behaviors do not fit with the user command, say (Sorry, I can't do the task)
6.// USER COMMAND: Scan the environment for hazards, move to a safe location, communicate with other robots, and locate and move towards a specific target.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>scan_environment</Action><Selector><Sequence><Condition>is_target_detected</Condition><Action>move_to_safe_location<Subtree>communicate_with_other_robots</Subtree><Action>move_towards_target</Action></Sequence></Selector></Sequence><Selector><Sequence><Condition>is_target_reached</Condition><Action>move_to_safe_location</Action></Sequence><Action>move_towards_target</Action><Action>move_safely</Action><Action>move_randomly</Action></Selector></BehaviorTree>
 
###
7.// INSTRUCTIONS: Use only the following behaviors {'harvest_resource': 'Action: Harvest a resource in the environment. Returns True if successful, False otherwise.', 'move_towards_resource': 'Action: Move towards a resource in the environment. Returns True if successful, False otherwise.', 'is_resource_available': 'Condition: Checks if the resource is available in the current location. Returns True if available, False otherwise.', 'is_resource_empty': 'Condition: Checks if the resource is empty. Returns True if empty, False otherwise.', 'return_to_start': 'Action: Return to the starting position. Always returns True.'}, to construct behavior tree in XML format to perform the following command. If the available behaviors do not fit with the user command, say (Sorry, I can't do the task)
7.// USER COMMAND: Harvest a resource, and if it is empty, move to a different resource and repeat until all available resources are exhausted. Then return to the starting position.
7.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>harvest_resource</Action><Selector><Sequence><Condition>is_resource_empty</Condition><Action>move_towards_resource</Action></Sequence><Sequence><Condition>is_resource_empty</Condition><Selector><Action><move_randomly</Action><Selector><Sequence><Condition>is_resource_empty</Condition><Action>move_towards_resource</Action><Action>harvest_resource</Action></Sequence></Selector></Selector></Sequence><Action>move_randomly</Action></Selector></Sequence><Action
###
4.// INSTRUCTIONS: Use only the following behaviors {'send_signal': "Action: Send a signal to other robots. Always returns True.", 'wait_for_signal': 'Condition: Wait for a signal from another robot. Returns True when a signal is received, False otherwise.', 'search_area': 'Action: Search the designated area for a specific target. Returns True when the target is found, False otherwise.', 'is_target_reached': 'Condition: Check if the target is within reach. Returns True if the target is within reach, False otherwise.', 'move_to_target': 'Action: Move towards the designated target. Returns True when the target is reached, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Search for and reach the designated target while coordinating with other robots.'
4.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>wait_for_signal</Condition> <Action>send_signal</Action> </Sequence> <Action>search_area</Action></Selector> <Action>move_to_target</Action> </Sequence> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'rotate_left': 'Action: Rotate the robot 90 degrees to the left. Returns True when rotation is completed.', 'rotate_right': 'Action: Rotate the robot 90 degrees to the right. Returns True when rotation is completed.', 'move_forward_10': 'Action: Move the robot forward by 10 units. Returns True when movement is completed.', 'move_backward_5': 'Action: Move the robot backward by 5 units. Return True when movement is completed.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Rotate left and then move forward 10 units.'
5.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Action>rotate_left</Action> <Action>rotate_left</Action> <Action>rotate_left</Action> </Sequence> <Action>move_forward_10</Action> </Selector> </Sequence> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'move_to_center': 'Action: Move the robot towards the center of the swarm. Returns True when the robot reaches the center.', 'form_triangle': 'Action: Form a triangle shape with two other robots. Returns True when the triangle is formed.', 'is_center_reached': 'Condition: Check if the robot has reached the center of the swarm. Returns True if the center is reached, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Move to the center of the swarm and form a triangle with two other robots.'
6.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Action>move_to_center</Action> <Condition>is_center_reached</Condition> </Sequence> <Action>form_triangle</Action> </Selector> </BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'move_to_target': 'Action: Move towards the designated target. Returns True when the robot reaches the target.', 'avoid_obstacle': 'Action: Avoid detected obstacles. Returns True when the obstacle is avoided.', 'is_path_clear': 'Condition: Check if the path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if the target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if the target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: generate behavior tree to 'Move towards the designated target while avoiding obstacles.'
7.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>is_path_clear</Condition> <Action>move_to_target</Action> </Sequence> <Sequence> <Condition>is_target_detected</Condition> <Action>avoid_obstacle</Action> </Sequence> </Selector> </BehaviorTree> 
###
4.// INSTRUCTIONS: Use only the following behaviors {'wait': 'Action: Pause for a specified amount of time. Always returns True.', 'move_to_point': 'Action: Move the robot to a specified point. Always returns True.', 'take_picture': 'Action: Take a picture with the onboard camera. Always returns True.', 'store_picture': 'Action: Store the captured picture in memory. Always returns True.', 'is_object_detected': 'Condition: Check if a particular object is detected in the picture. Returns True if the object is detected, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Generate behavior tree to 'take picture of a red object, move to next point, take picture of a blue object, store the pictures'
4.// OUTPUT:
<BehaviorTree> <Sequence> <Action>take_picture</Action> <Selector> <Sequence> <Condition>is_object_detected</Condition> <Action>move_to_next_point</Action> </Sequence> <Sequence> <Action>take_picture</Action> <Selector> <Sequence> <Condition>is_object_detected</Condition> <Action>store_picture</Action> </Sequence> </Selector> </Sequence> </Selector> </Sequence> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'follow_leader': 'Action: Follow the leader robot in a formation. Always returns True.', 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_red': "Action: Change agent's color to red. Always returns True.", 'is_leader_detected': 'Condition: Check if the leader robot is within a certain distance. Returns True if the leader robot is detected, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Generate behavior tree to 'follow the leader and change color to red when the leader is within 10 units'
5.// OUTPUT:
<BehaviorTree> <Sequence> <Condition>is_leader_detected</Condition> <Selector> <Sequence> <Action>follow_leader</Action> <Selector> <Sequence> <Condition>is_leader_detected</Condition> <Action>change_color_to_red</Action> </Sequence> </Selector> </Sequence> </Selector> </Sequence> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Perform a sequence of actions: change color to green, continue movement, form line, avoid obstacles'
6.// OUTPUT:
<BehaviorTree> <Sequence> <Action>change_color_to_green</Action> <Sequence> <Action>continue_movement_agent</Action> <Sequence> <Action>form_line</Action> <Sequence> <Action>avoid_obstacle</Action> </Sequence> </Sequence> </Sequence> </Sequence> </BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'make_sound': 'Action: Make a sound to communicate with other robots. Always returns True.', 'perform_dance': 'Action: Perform a pre-programmed dance sequence. Always returns True.', 'is_dance_complete': 'Condition: Check if the dance sequence is complete. Returns True if the dance is complete, False otherwise.', 'is_leader_nearby': 'Condition: Check if the leader robot is detected within a certain distance. Returns True if the leader is detected, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: generate behavior tree to 'make a sound to call for help, then perform a dance if the leader robot is not nearby'
7.// OUTPUT:
<BehaviorTree> <Sequence> <Action>make_sound</Action> <Selector> <Sequence> <Condition>is_leader_nearby</Condition> </Sequence> <Sequence> <Action>perform_dance</Action> <Selector> <Sequence> <Condition>is_dance_complete</Condition> </Sequence> </Selector> </Sequence> </Selector> </Sequence> </BehaviorTree> 
###
3.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_blue': "Action: Change agent's color to blue. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'detect_object': 'Action: Use sensors to detect nearby objects. Returns True if an object is detected, False otherwise.', 'grasp_object': 'Action: Use arm to grasp a detected object. Returns True if object is successfully grasped, False otherwise.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_object_grasped': 'Condition: Check if an object is successfully grasped. Returns True if object is grasped, False otherwise.', 'is_object_nearby': 'Condition: Check if an object is detected nearby. Returns True if an object is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3.// USER COMMAND: generate behavior tree to 'Locate and pick up a blue object and bring it back to the nest'. Output only the XML behavior tree without extra text.
3.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>is_object_nearby</Condition><Action>grasp_object</Action><Condition>is_object_grasped</Condition></Sequence><Action>detect_object</Action></Selector><Sequence><Condition>is_object_grasped</Condition><Action>change_color_to_blue</Action></Sequence><Sequence><Condition>is_agent_in_nest</Condition><Action>agent_movement_freeze</Action><Action>task_completed</Action></Sequence></Sequence></BehaviorTree>

###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'check_battery_level': 'Condition: Check the battery level of the agent. Returns True if battery level is above 50%, False if below 50%.', 'check_connection_status': 'Condition: Check the connection status with other agents. Returns True if connection is established, False otherwise.', 'connect_with_agent': 'Action: Establish connection with a nearby agent. Returns True if connection is successfully established, False otherwise.', 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'recharge_battery': 'Action: Recharge the agent's battery. Returns True if battery is successfully charged, False otherwise.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Connect with a nearby agent, check battery level and recharge if below 50%, then continue movement towards target'.Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>check_connection_status</Condition><Action>continue_movement_agent</Action></Sequence><Sequence><Condition>check_battery_level</Condition><Action>recharge_battery</Action></Sequence><Sequence><Condition>is_agent_in_nest</Condition><Action>agent_movement_freeze</Action><Action>task_completed</Action></Sequence></Selector><Sequence><Selector><Condition>is_path_clear</Condition><Condition>is_target_reached</Condition><Action>connect_with_agent</Action></Selector></Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'collect_food': 'Action: Use agents' sensors to search for food and collect it. Returns True if food is successfully collected, False otherwise.', 'distribute_food': 'Action: Distribute collected food among nearby agents. Returns True if food is successfully distributed, False otherwise.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_food_collected': 'Condition: Check if food is successfully collected. Returns True if food is collected, False otherwise.', 'is_food_nearby': 'Condition: Check if food is detected nearby. Returns True if food is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Search for food, collect it, and distribute among other agents until all food is collected'.Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_food_nearby</Condition><Action>collect_food</Action><Condition>is_food_collected</Condition></Sequence><Action>distribute_food</Action></Selector><Action>wander</Action></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_direction': 'Action: Change the agent's movement direction. Returns True if direction is changed, False otherwise.', 'collect_object': 'Action: Use agent's sensors to search for objects and collect them. Returns True if object is successfully collected, False otherwise.', 'drop_object': 'Action: Release the collected object. Returns True if object is successfully dropped, False otherwise.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_object_collected': 'Condition: Check if an object is successfully collected. Returns 
###
3.// INSTRUCTIONS: Use only the following behaviors {'find_object': "Action: Search for specified object in the environment. Returns True if object found, False otherwise.", 'pick_up_object': "Action: Robot picks up the found object. Always returns True.", 'avoid_obstacles': "Action: Robot avoids obstacles while searching. Always returns True.", 'return_to_start': "Subtree node: Returns the robot to its starting position.", 'object_detected': "Condition: Checks if object is detected within 10 units. Returns True if object is detected, False otherwise.", 'near_starting_position': "Condition: Checks if robot is within 5 units of starting position. Returns True if the robot is near starting position, False otherwise.", 'at_nest': "Condition: Checks if robot is at the nest. Returns True if the robot is at the nest, False otherwise."}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3.// USER COMMAND: Find and retrieve an object, then return to the starting position within the nest.
3.// OUTPUT:
<BehaviorTree><Sequence><Sequence><Action>find_object</Action><Sequence><Condition>object_detected</Condition><Action>pick_up_object</Action></Sequence></Sequence><Sequence><Action>avoid_obstacles</Action><Action>return_to_start</Action></Sequence><Condition>near_starting_position</Condition><Condition>at_nest</Condition></Sequence></BehaviorTree>
 
###
4.// INSTRUCTIONS: Use only the following behaviors {'communicate_with_neighbors': "Action: Transmit information to nearby robots. Always returns True.", 'random_movement': 'Action: Move randomly within the environment. Always returns True.', 'interact_with_environment': 'Action: Interact with the environment, such as collecting data or resources. Always returns True.', 'follow_leader': 'Action: Follow the designated leader robot. Always returns True.', 'replicate': 'Subtree node: Utilizes a behavior tree for replication process.', 'is_leader': "Condition: Checks if robot is designated as leader. Returns True if the robot is the leader, False otherwise.", 'resource_available': 'Condition: Checks if there is a resource available in the environment. Returns True if resource is available, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Communicate with neighbors, follow designated leader, and replicate if a resource is available.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>communicate_with_neighbors</Action><Trigger>is_leader</Trigger></Sequence><Sequence><Action>follow_leader</Action><Subtree>replicate</Subtree></Sequence><Condition>resource_available</Condition></Selector></BehaviorTree>
 
###
5.// INSTRUCTIONS: Use only the following behaviors {'dig_tunnel': 'Action: Robot digs a tunnel in the designated direction. Always returns True.', 'is_tunnel_complete': 'Condition: Checks if tunnel is complete. Returns True if the tunnel is complete, False otherwise.', 'obstacle_detected': 'Condition: Checks if obstacle is detected in the designated direction. Returns True if obstacle is detected, False otherwise.', 'obstacle_cleared': 'Action: Clears obstacle in designated direction. Always returns True.', 'move_forward': 'Action: Robot moves forward in the designated direction. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Dig a tunnel in the designated direction while avoiding obstacles.
5.// OUTPUT:
<BehaviorTree><Sequence><Action>dig_tunnel</Action><Condition>is_tunnel_complete</Condition><Selector><Condition>obstacle_detected</Condition><Action>obstacle_cleared</Action></Selector><Action>move_forward</Action></Sequence></BehaviorTree>
 
###
6.// INSTRUCTIONS: Use only the following behaviors {'recruit_team_members': 'Action: Identify and recruit potential team members. Always returns True.', 'team_member_available': 'Condition: Checks if a team member is available to join. Returns True if a team member is available, False otherwise.', 'assess_obstacles': 'Action: Analyze the environment and assess potential obstacles. Always returns True.', 'create_strategy': 'Action: Create a strategy based on the analyzed environment. Always returns True.', 'follow_leader': 'Action: Follow the designated leader robot. Always returns True.', 'is_leader': 'Condition: Checks if robot is designated as leader. Returns True if the robot is the leader, False otherwise.', 'coordinate_with_team': 'Subtree node: Utilizes a behavior tree for coordination and communication within the team.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Recruit team members, assess potential obstacles, create a strategy, and coordinate with team members while following the designated leader.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>recruit_team_members</Action><Condition>team_member_available</Condition></Sequence><Sequence><Action>assess_obstacles</Action><Action>create_strategy</Action><Subtree>coordinate_with_team</Subtree></Sequence><Sequence><Action>follow_leader</Action><Trigger>is_leader</Trigger></Sequence></Selector></BehaviorTree>
 
###
7.// INSTRUCTIONS: Use only the following behaviors {'queue_actions': 'Action: Allows for queuing of actions for later execution. Always returns True.', 'pick_up_resource': 'Action: Robot picks up a nearby available resource. Always returns True.', 'deposit_resource': 'Action: Deposits resource at designated location. Always returns True.', 'collect_resource': 'Subtree node: Represents a behavior tree for collecting resources.', 'is_resource_available': 'Condition: Checks if a resource is available within 10 units. Returns True if a resource is available, False otherwise.', 'at_deposit_location': 'Condition: Checks if robot is at designated deposit location. Returns True if robot is at the location, False otherwise.', 'hold_resource': 'Action: Informs another robot to hold the resource while the current robot moves to designated location. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: Collect a nearby resource, deposit it at a designated location, and inform another robot to hold the resource while moving.
7.// OUTPUT:
<BehaviorTree><Sequence><Action>queue_actions<!--(pick_up_resource, deposit_resource)-->queue_actions</Action><Subtree>collect_resource</Subtree><Condition>is_resource_available</Condition><Sequence><Action>deposit_resource</Action><Condition>at_deposit_location</Condition><Action>hold_resource</Action></Sequence></Sequence></BehaviorTree>Note: This task showcases the use of both Sequence and Selector nodes to handle different paths and decision points. It also utilizes conditions to check for certain events and actions to perform tasks.

###
3.// INSTRUCTIONS: Use only the following behaviors {'search_for_food': 'Subtree node: Represents a behavior tree for finding food.', 'go_to_nest': 'Subtree node: Represents a behavior tree for returning to the nest.', 'eat_food': 'Action: Makes the agent eat the food. Always returns True.', 'on_low_fuel': "Event: Triggers when the agent's fuel level falls below a threshold. Returns True if fuel is low, False otherwise."}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3.// USER COMMAND: Search for food while maintaining fuel levels. If low fuel event is triggered, go to nest and eat food before resuming search.
3.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>on_low_fuel</Condition><Action>go_to_nest</Action><Action>eat_food</Action><Action>task_completed</Action></Sequence><Action>search_for_food</Action></Selector><Condition>on_low_fuel</Condition><Action>go_to_nest</Action><Action>eat_food</Action><Action>task_completed</Action></Sequence></BehaviorTree>
Note: This task includes a loop to continuously search for food while maintaining fuel levels. It also utilizes conditions to check for low fuel and change behavior accordingly.

###
4.// INSTRUCTIONS: Use only the following behaviors {'scan_surroundings': 'Action: Scan the surroundings for potential threats. Always returns True.', 'charge': 'Action: Recharge energy from nearby sources. Always returns True.', 'on_low_energy': 'Event: Triggers when energy levels fall below a certain threshold. Returns True if energy is low, False otherwise.', 'form_v_formation': 'Action: Form a V-formation with other robots. Always returns True.', 'is_enemy_detected': 'Condition: Check if an enemy is detected nearby. Returns True if an enemy is detected, False otherwise.', 'is_in_v_formation': 'Condition: Check if currently in V-formation. Returns True if in V-formation, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Scan surroundings and form V-formation with other robots. If enemy is detected, break formation and charge, then resume formation.
4.// OUTPUT:
<BehaviorTree><Sequence><Action>scan_surroundings</Action><Condition>is_enemy_detected</Condition><Sequence><Action>break_formation</Action><Action>charge</Action><Action>form_v_formation</Action></Sequence></Sequence></BehaviorTree>
Note: This task showcases the use of conditions to check for threats and actions to react accordingly. It also utilizes a mix of Sequence and Selector nodes to handle different paths.

###
5.// INSTRUCTIONS: Use only the following behaviors {'detect_signs': 'Action: Use sensors to detect signs in the environment. Always returns True.', 'process_signs': 'Action: Process detected signs and make decisions. Always returns True.', 'move_forward': 'Action: Move forward in the direction of decision. Always returns True.', 'twist': 'Action: Twist and change direction. Always returns True.', 'is_obstacle_detected': 'Condition: Check for obstacles ahead. Returns True if an obstacle is detected, False otherwise.', 'is_target_reached': 'Condition: Check if target is reached. Returns True if the target is reached, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Use sensors to detect signs, process them, and move in the direction indicated. If obstacle is detected, twist and change direction.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>detect_signs</Action><Action>process_signs</Action><Condition>is_target_reached</Condition><Action>move_forward</Action></Sequence><Sequence><Condition>is_obstacle_detected</Condition><Action>twist</Action><Action>move_forward</Action></Sequence></Selector></BehaviorTree>
Note: This task utilizes a mix of Sequence and Selector nodes to handle both successful and unsuccessful paths. It also includes conditions to check for obstacles and target reached.

###
6.// INSTRUCTIONS: Use only the following behaviors {'get_data': 'Action: Collect data from the environment. Always returns True.', 'analyze_data': 'Action: Analyze collected data and make decisions. Always returns True.', 'move_to_location': 'Action: Move to a specified location. Always returns True.', 'is_data_collected': 'Condition: Check if data has been collected. Returns True if data is collected, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_target_reached': 'Condition: Check if target location is reached. Returns True if the target location is reached, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Collect data, analyze it, and move to specified location. If obstacle is detected or target is not reached, restart the task.
6.// OUTPUT:
<BehaviorTree><Sequence><Action>get_data</Action><Action>analyze_data</Action><Selector><Sequence><Condition>is_target_reached</Condition><Action>task_completed</Action></Sequence><Sequence><Condition>is_obstacle_detected</Condition></Condition><Action>move_to_location</Action></Sequence></Selector><Action>move_to_location</Action></Sequence></BehaviorTree>
Note: This task includes a loop to restart the task if necessary. It also utilizes conditions to check for successful or unsuccessful outcomes.

###
7.// INSTRUCTIONS: Use only the following behaviors {'cluster': 'Subtree node: Represents a behavior tree for forming a cluster with other robots.', 'communicate': 'Action: Communicate with other robots in the cluster. Always returns True.', 'navigate_path': 'Action: Navigate through a designated path. Always returns True.', 'check_distance_to_target': 'Condition: Check current distance to target. Returns True if target is within a certain distance, False otherwise.', 'is_cluster_formed': 'Condition: Check if currently in a cluster. Returns True if in a cluster, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: Form a cluster with other robots, communicate, and navigate through designated path. If target is within reaching distance, signal task completion.
7.// OUTPUT:
<
###
4.// INSTRUCTIONS: Use only the following behaviors {'search': 'Action: Search for a specific object. Always returns True.', 'identify_object': 'Function: Use sensors to identify the specified object. Returns True if object is identified, False otherwise.', 'move_to_object': 'Action: Move towards the identified object. Returns True once object is reached.', 'grab_object': 'Action: Grab the identified object. Returns True when object is successfully grabbed.', 'lift_object': 'Action: Lift the grabbed object. Returns True when object is lifted.', 'carry_object': 'Action: Carry the lifted object. Returns True while carrying the object.', 'release_object': 'Action: Release the carried object. Returns True once object is released.', 'is_object_in_range': 'Condition: Check for object within 10 units. Returns True if object is within 10 units of distance, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Pickup the blue ball, carry it to the red box, and release it.Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree><Sequence><Action>search</Action><Sequence><Condition>is_object_in_range</Condition><Sequence><Action>identify_object</Action><Sequence><Condition>is_object_in_range</Condition><Sequence><Action>grab_object</Action><Action>lift_object</Action><Action>carry_object</Action><Action>move_to_object</Action><Sequence><Condition>is_object_in_range</Condition><Action>release_object</Action></Sequence></Sequence></Sequence></Sequence></Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'collect_resource': 'Action: Collect nearby resources. Always returns True.', 'deposit_resource': 'Action: Deposit collected resources. Always returns True.', 'is_robot_full': 'Condition: Check if robot's carrying capacity is full. Returns True if full, False otherwise.', 'is_resource_available': 'Condition: Check for available resources nearby. Returns True if resources are available, False otherwise.', 'is_deposit_available': 'Condition: Check for available deposit location. Returns True if a deposit location is available, False otherwise.', 'is_deposit_reached': 'Condition: Check if robot has reached the deposit location. Returns True if deposit location is within 5 units of distance, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Go collect resources, deposit them, and repeat until robot is full.Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Action>collect_resource</Action> <Condition>is_resource_available</Condition> </Sequence> <Sequence> <Condition>is_robot_full</Condition> <Action>deposit_resource</Action> </Sequence> </Selector> <Condition>is_deposit_available</Condition> <Sequence> <Condition>is_deposit_reached</Condition> <Task>repeat</Task> </Sequence> </Sequence> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'search': 'Action: Move around and search for objects. Returns True once an object is found.', 'identify_object': 'Function: Use sensors to identify the specified object. Returns True if object is identified, False otherwise.', 'move_to_object': 'Action: Move towards the identified object. Returns True once object is reached.', 'pick_up_object': 'Action: Pick up the identified object. Returns True if object is successfully picked up.', 'scan_environment': 'Action: Use sensors to scan the environment for objects. Returns True once scan is complete.', 'navigate_to_base': 'Action: Navigate back to the home base. Returns True once robot has reached the base.', 'return_object': 'Action: Return the picked up object to base. Returns True once object is returned.', 'is_object_in_range': 'Condition: Check for object within 20 units. Returns True if object is within 20 units of distance, False otherwise.', 'is_scanning_complete': 'Condition: Check if scan of environment is complete. Returns True if scan is complete, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Find and pick up the red ball, scan environment, navigate back to base, and return the ball to the base.Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Action>search</Action> <Sequence> <Condition>is_object_in_range</Condition> <Sequence> <Action>identify_object</Action> <Action>pick_up_object</Action> <Sequence> <Action>scan_environment</Action> <Condition>is_scanning_complete</Condition> </Sequence> <Action>navigate_to_base</Action> <Sequence> <Condition>is_returned</Condition> <Action>return_object</Action> </Sequence> </Sequence> </Sequence> </Selector> </BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'search': 'Action: Search for a specific object. Always returns True.', 'identify_object': 'Function: Use sensors to identify the specified object. Returns True if object is identified, False otherwise.', 'move_to_object': 'Action: Move towards the identified object. Returns True once object is reached.', 'grab_object': 'Action: Grab the identified object. Returns True when object is successfully grabbed.', 'lift_object': 'Action: Lift the grabbed object. Returns True when object is lifted.', 'carry_object': 'Action: Carry the lifted object. Returns True while carrying the object.', 'release_object': 'Action: Release the carried object. Returns True once object is released.', 'is_object_in_range': 'Condition: Check for object within 20 units. Returns True if object is within 20 units of distance, False otherwise.', 'is_all_geo_objects_collected': 'Condition: Check if all geometric objects have been collected. Returns True if all objects are collected, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: Go search for objects, collect all geometric objects, and return them to the base.Output only the XML behavior tree without extra text.
7.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Action>search</Action> <Sequence> <Condition>is_object_in_range</Condition> <Sequence> <Action>identify_object</Action> <Action>grab_object</Action> <Action>move_to_object</Action> <Action>lift_object</Action> <Action>carry_object</Action> <Action>return_object</Action> <Condition>is_all_geo_objects_collected</Condition> </Sequence> </Sequence> </Selector> </BehaviorTree> 
###
3.// INSTRUCTIONS: Use only the following behaviors {'move_to_target': "Action: Move towards the designated target. Always returns True.", 'identify_object': 'Action: Use sensors to identify the object in front. Returns True if object is a box, False if object is a wall.', 'pick_up_object': "Action: Pick up the identified box object. Returns True if successful, False if object cannot be picked up.", 'drop_object': 'Action: Drop the currently held object. Always returns True.', 'is_target_reached': 'Condition: Check if the target destination has been reached. Returns True if destination is reached, False otherwise.', 'is_object_in_front': 'Condition: Check if an object is detected in front. Returns True if an object is detected, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3.// USER COMMAND: Move to the designated target, identify and pick up the object, then return to the starting point and drop the object
3.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>is_target_reached</Condition><Selector><Sequence><Condition>is_object_in_front</Condition><Action>identify_object</Action><Action>pick_up_object</Action></Sequence><Action>move_to_target</Action></Selector><Action>drop_object</Action></Sequence><Sequence><Condition>is_target_reached</Condition><Action>move_to_starting_point</Action></Sequence></Selector></Sequence></BehaviorTree>

###
4.// INSTRUCTIONS: Use only the following behaviors {'move_to_nearest_exit': "Action: Move to the nearest exit within the building. Always returns True.", 'scan_for_fire': 'Action: Use sensors to scan for fire in the current area. Returns True if fire is detected, False otherwise.', 'extinguish_fire': "Action: Use available tools to extinguish the fire. Returns True if successful, False if fire continues.", 'is_exit_reached': 'Condition: Check if the nearest exit has been reached. Returns True if exit is reached, False otherwise.', 'is_fire_detected': 'Condition: Check if a fire has been detected in the current area. Returns True if fire is detected, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Navigate through the building to the nearest exit while extinguishing any fires along the way
4.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>is_exit_reached</Condition><Selector><Sequence><Condition>is_fire_detected</Condition><Action>extinguish_fire</Action></Sequence><Action>move_to_nearest_exit</Action></Selector></Sequence><Action>continue_movement</Action></Selector></Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'move_to_nest': "Action: Move back to the nest for recharging. Always returns True.", 'search_for_food': 'Action: Use sensors to search for nearby food sources. Returns True if food is found, False otherwise.', 'collect_food': "Action: Collect the found food and bring it back to the nest. Returns True if successful, False if food cannot be collected.", 'is_nest_reached': 'Condition: Check if the nest has been reached. Returns True if nest is reached, False otherwise.', 'is_food_found': 'Condition: Check if a food source has been detected. Returns True if food is found, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Search for and collect food sources, then return to the nest and recharge
5.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>is_nest_reached</Condition><Selector><Sequence><Condition>is_food_found</Condition><Action>collect_food</Action></Sequence><Action>move_to_nest</Action></Selector></Sequence><Action>recharge</Action></Selector></Sequence></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'scan_for_objects': 'Action: Use sensors to scan the environment for any objects. Returns True if objects are detected, False otherwise.', 'pick_up_object': "Action: Pick up the detected object. Returns True if successful, False if object cannot be picked up.", 'drop_object': 'Action: Drop the currently held object. Always returns True.', 'is_object_detected': 'Condition: Check if an object has been detected in the current area. Returns True if object is detected, False otherwise.', 'is_object_picked_up': 'Condition: Check if an object has been successfully picked up. Returns True if object is picked up, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Search for and pick up any objects within the environment
6.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>is_object_picked_up</Condition><Selector><Sequence><Condition>is_object_detected</Condition><Action>pick_up_object</Action></Sequence><Action>scan_for_objects</Action></Selector></Sequence><Action>drop_object</Action></Selector></Sequence></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'move_to_target': "Action: Move towards the designated target. Always returns True.", 'identify_target': 'Action: Use sensors to identify the target in front. Returns True if target is detected, False otherwise.', 'collect_target': "Action: Collect the identified target. Returns True if successful, False if target cannot be collected.", 'drop_target': 'Action: Drop the currently held target. Always returns True.', 'is_target_reached': 'Condition: Check if the target destination has been reached. Returns True if destination is reached, False otherwise.', 'is_target_collected': 'Condition: Check if the target has been successfully collected. Returns True if target is collected, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: Move to the designated target, identify and collect it, then return to the starting point and drop the target
7.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>is_target_collected</Condition><Selector><Sequence><Condition>is_target_detected</Condition><Action>collect_target</Action></Sequence><Action>move_to_target</Action></Selector></Sequence><Action>drop_target</Action></Selector></Sequence></BehaviorTree>    
###
3.// INSTRUCTIONS: Use only the following behaviors {'pick_up_object': 'Action: Move to an object and pick it up using a robot arm. Always returns True.', 'detect_fire': 'Condition: Check if there is a fire in the vicinity. Returns True if fire is detected, False otherwise.', 'extinguish_fire': 'Action: Use a fire extinguisher to put out the fire. Always returns True.', 'navigate_to_point': 'Action: Move to a designated point in the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3.// USER COMMAND: Save the object from the fire and navigate it safely to a designated point.
3.// OUTPUT:
<BehaviorTree><Sequence><Condition>detect_fire</Condition><Sequence><Action>pick_up_object</Action><Action>extinguish_fire</Action><Action>navigate_to_point</Action></Sequence></Sequence></BehaviorTree>

###
4.// INSTRUCTIONS: Use only the following behaviors {'gather_resources': 'Subtree node: Represents a behavior tree for collecting resources.', 'craft_item': 'Action: Use the gathered resources to craft an item. Always returns True.', 'is_inventory_full': 'Condition: Check if the robot's inventory is full. Returns True if inventory is full, False otherwise.', 'explore_area': 'Action: Move to an unexplored area of the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Gather resources until inventory is full, then explore new areas and craft an item using the collected resources.
4.// OUTPUT:
<BehaviorTree><Sequence><Sequence><Action>gather_resources</Action><Condition>is_inventory_full</Condition></Sequence><Selector><Sequence><Action>explore_area</Action><Action>gather_resources</Action></Sequence><Action>craft_item</Action></Selector></Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'follow_target': 'Action: Follow the designated target using sensors. Always returns True.', 'avoid_obstacles': 'Condition: Check if there are any obstacles in the robot's path. Returns True if obstacles are detected, False otherwise.', 'move_to_safety': 'Action: Move away from any potential danger to a safe location. Always returns True.', 'search_for_target': 'Condition: Check if the robot has lost its designated target. Returns True if target is not in sight, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Follow and stay close to the designated target, while actively avoiding obstacles and moving to safety if needed. Search for the target if it is no longer in sight.
5.// OUTPUT:
<BehaviorTree><Sequence><Action>follow_target</Action><Condition>avoid_obstacles</Condition><Selector><Sequence><Action>move_to_safety</Action><Action>follow_target</Action></Sequence><Condition>search_for_target</Condition></Selector></Sequence></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'find_victim': 'Action: Search for and locate a victim in need of assistance using sensors. Always returns True.', 'carry_victim': 'Action: Use a stretcher to carefully carry the victim and bring them to safety. Always returns True.', 'is_victim_safe': 'Condition: Check if the victim has been safely brought to a designated rescue zone. Returns True if victim is safe, False otherwise.', 'navigate_rescue_zone': 'Action: Move to a designated rescue zone in the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Find and rescue a victim in need of assistance, ensuring their safe transport to a designated rescue zone.
6.// OUTPUT:
<BehaviorTree><Sequence><Action>find_victim</Action><Action>carry_victim</Action><Condition>is_victim_safe</Condition><Action>navigate_rescue_zone</Action></Sequence></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'identify_target': 'Action: Use sensors to identify a designated target in the environment. Always returns True.', 'get_weapon': 'Action: Move to and retrieve a designated weapon in the environment. Always returns True.', 'attack_target': 'Action: Use the acquired weapon to attack the designated target. Always returns True.', 'is_target_dead': 'Condition: Check if the designated target has been eliminated. Returns True if target is dead, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: Identify a target, retrieve a weapon, and eliminate the target until it is confirmed dead.
7.// OUTPUT:
<BehaviorTree><Sequence><Action>identify_target</Action><Action>get_weapon</Action><Sequence><Action>attack_target</Action><Condition>is_target_dead</Condition><Action>get_weapon</Action></Sequence></Sequence></BehaviorTree> 
###
4.// INSTRUCTIONS: Use only the following behaviors {'attack_nearby_enemies': 'Action: Attack and eliminate nearby enemies. Always returns True.', 'ignore_known_enemies': 'Action: Ignore known enemies and continue with task. Always returns True.', 'health_check': 'Condition: Check agent's health. Returns True if health is above 50%, False otherwise.', 'scout_target': 'Action: Scout and collect information on the target. Always returns True.', 'is_target_reachable': 'Condition: Check if the target is within reach. Returns True if the target is within a certain distance, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: If agent's health is above 50%, scout for the target and attack nearby enemies. Otherwise, ignore known enemies and continue with task.
4.// OUTPUT:
<BehaviorTree><Sequence><Condition>health_check</Condition><Action>scout_target</Action><Action>attack_nearby_enemies</Action></Sequence><Action>ignore_known_enemies</Action></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'follow_path': 'Action: Follow the predefined path. Always returns True.', 'find_resource': 'Action: Find the nearest resource. Always returns True.', 'collect_resource': 'Action: Collect the resource. Returns True if resource is successfully collected, False otherwise.', 'is_path_clear': 'Condition: Check if the path is clear of obstacles. Returns True if the path is clear, False otherwise.', 'is_resource_available': 'Condition: Check if there is an available resource in the environment. Returns True if there is an available resource, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Follow a predefined path and collect resources along the way if they are available.
5.// OUTPUT:
<BehaviorTree><Sequence><Action>follow_path</Action><Selector><Condition>is_resource_available</Condition><Sequence><Action>find_resource</Action><Condition>is_path_clear</Condition><Action>collect_resource</Action></Sequence></Selector></Sequence></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'move_to_position': 'Action: Move to the specified position. Returns True if position is reached, False otherwise.', 'search_nearby': 'Action: Search for nearby objects. Always returns True.', 'found_enemy': 'Event: Triggers when an enemy is found. Returns True if enemy is found, False otherwise.', 'is_enemy_health_below_threshold': 'Condition: Check if the enemy's health is below a certain threshold. Returns True if health is below threshold, False otherwise.', 'escape': 'Action: Escape from nearby enemies. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Move to a specific position and search for nearby enemies. If an enemy is found with low health, escape from the enemy.
6.// OUTPUT:
<BehaviorTree><Sequence><Action>move_to_position</Action><Action>search_nearby</Action><Trigger>found_enemy</Trigger><Condition>is_enemy_health_below_threshold</Condition><Action>escape</Action></Sequence></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'identify_food_source': 'Action: Identify the nearest food source. Always returns True.', 'gather_food': 'Action: Gather the food and bring it back to the nest. Returns True if food is successfully gathered, False otherwise.', 'is_food_source_available': 'Condition: Check if there is a food source within a certain range. Returns True if there is a food source, False otherwise.', 'is_nest_reachable': 'Condition: Check if the nest is within reach. Returns True if the nest is within a certain distance, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: Identify the nearest food source and gather it back to the nest.
7.// OUTPUT:
<BehaviorTree><Sequence><Action>identify_food_source</Action><Selector><Condition>is_food_source_available</Condition><Action>gather_food</Action><Condition>is_nest_reachable</Condition></Selector></Sequence></BehaviorTree>###
3.// INSTRUCTIONS: Use only the following behaviors {'scan_surroundings': 'Action: Scan the environment using sensors to detect any potential obstacles or targets. Always returns True.', 'move_towards_target': 'Action: Move towards a target location. Always returns True.', 'gather_resource': 'Action: Gather resources from the environment. Always returns True.', 'return_to_nest': 'Action: Return to the nest location. Always returns True.', 'is_resource_available': 'Condition: Check if there are resources available in the environment. Returns True if resources are available, False otherwise.', 'is_target_reached': 'Condition: Check if the robot has reached the target location. Returns True if the target is reached, False otherwise.', 'is_nest_reached': 'Condition: Check if the robot has reached the nest location. Returns True if the nest is reached, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3.// USER COMMAND: Generate behavior tree for a swarm of robots to gather resources from different locations and bring them back to the nest
3.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_resource_available</Condition><Selector><Sequence><Action>scan_surroundings</Action><Action>move_towards_target</Action></Sequence><Action>gather_resource</Action></Selector></Sequence><Sequence><Condition>is_target_reached</Condition><Selector><Sequence><Condition>is_nest_reached</Condition><Action>return_to_nest</Action></Sequence><Action>wander</Action></Selector></Sequence></Selector></BehaviorTree>
###
4.// INSTRUCTIONS: Use only the following behaviors {'scan_area': 'Action: Scan the surrounding area for potential targets or obstacles. Always returns True.', 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'follow_path': 'Action: Follow a predefined path towards a given location. Always returns True.', 'attack_target': 'Action: Attack a target if it is within range. Always returns True.', 'is_obstacle_detected': 'Condition: Check if an obstacle is detected in the environment. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if the path ahead is clear. Returns True if the path is clear, False otherwise.', 'is_target_in_range': 'Condition: Check if the target is within attack range. Returns True if the target is within range, False otherwise.', 'is_target_defeated': 'Condition: Check if the target has been defeated. Returns True if the target is defeated, False otherwise.', 'is_area_explored': 'Condition: Check if the current area has been fully explored. Returns True if the area is explored, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Generate behavior tree for a robot to explore an unknown area and defeat any enemies in its path
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_area_explored</Condition><Selector><Action>scan_area</Action><Selector><Sequence><Condition>is_obstacle_detected</Condition><Action>avoid_obstacle</Action></Sequence><Selector><Sequence><Condition>is_path_clear</Condition><Action>follow_path</Action></Sequence><Action>wander</Action></Selector></Selector></Selector></Sequence><Sequence><Condition>is_target_in_range</Condition><Selector><Sequence><Condition>is_target_defeated</Condition><Action>wander</Action></Sequence><Action>attack_target</Action></Selector></Sequence></Selector></BehaviorTree>
###
5.// INSTRUCTIONS: Use only the following behaviors {'free_will_movement': 'Action: Move freely within the environment. Always returns True.', 'detect_food': 'Action: Use sensors to detect nearby sources of food. Always returns True.', 'eat_food': "Action: Eat the detected food source. Always returns True.", 'collect_food': "Action: Collect the eaten food and bring it back to the nest. Always returns True.", 'is_food_nearby': 'Condition: Check if there is food available in the vicinity. Returns True if food is detected, False otherwise.', 'is_nest_reached': 'Condition: Check if the robot has reached the nest location. Returns True if the nest is reached, False otherwise.', 'is_food_in_storage': 'Condition: Check if there is food stored in the robot. Returns True if food is stored, False otherwise.', 'is_hungry': 'Condition: Check if the robot is hungry and needs to eat. Returns True if the robot is hungry, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Generate behavior tree for a swarm of robots to gather and collect food sources.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_food_nearby</Condition><Selector><Action>detect_food</Action><Action>eat_food</Action></Selector></Sequence><Sequence><Condition>is_nest_reached</Condition><Selector><Sequence><Condition>is_food_in_storage</Condition><Action>collect_food</Action></Sequence><Selector><Condition>is_hungry</Condition><Action>free_will_movement</Action></Selector></Selector></Sequence></Selector></BehaviorTree>
###
6.// INSTRUCTIONS: Use only the following behaviors {'search_for_target': 'Action: Search for potential targets using sensors. Always returns True.', 'move_towards_target': 'Action: Move towards a target location. Always returns True.', 'collect_resource': 'Action: Collect resources from the environment. Always returns True.', 'return_to_nest': 'Action: Return to the nest location. Always returns True.', 'is_resource_available': 'Condition: Check if there are resources available in the environment. Returns True if resources are available, False otherwise.', 'is_target_in_range': 'Condition: Check if the target is within reach. Returns True if the target is within reach, False otherwise.', 'is_nest_reached': 'Condition: Check if the robot has reached the nest location. Returns True if the nest is reached, False otherwise.'} to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Generate behavior tree for a swarm of robots to search for targets and collect resources, then return to the nest
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_resource_available</Condition><Selector><Sequence><Action>search_for_target</Action><Action>move_towards_target</Action></Sequence><Action>collect_resource</Action></Selector></Sequence><Sequence><Condition>is_target_in_range</Condition><Selector><Sequence><Condition>is_nest_reached</Condition><Action>return_to_nest</Action></Sequence><Action>wander</Action></Selector></Sequence></Selector></Behavior// Note: The 'wait' action is used as a placeholder, since the user command does not specify what action should be taken after reporting the intruder.

###
3.// INSTRUCTIONS: Use only the following behaviors {'find_target': 'Action: Search the environment for the designated target. Always returns True.', 'move_towards_target': 'Action: Move towards the target once it is found. Always returns True.', 'report_target': 'Action: Send a signal indicating the target has been located. Always returns True.', 'is_target_reached': 'Condition: Check if the robot has reached the designated target. Returns True if the target is reached, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3.// USER COMMAND: Generate behavior tree for a robot to locate and approach a target in the environment
3.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_target_reached</Condition><Selector><Sequence><Action>find_target</Action><Action>move_towards_target</Action><Selector><Action>report_target</Action><Action>wait</Action></Selector></Sequence></Selector></Sequence></BehaviorTree>
// Note: The 'wait' action is used as a placeholder, since the user command does not specify what action should be taken after reporting the target.

###
4.// INSTRUCTIONS: Use only the following behaviors {'identify_object': 'Action: Use sensors to identify the object placed in front of the robot. Always returns True.', 'move_to_object': 'Action: Move towards the identified object. Always returns True.', 'pickup_object': 'Action: Attempt to pick up the object. Returns True if successful, False if failed.', 'is_object_in_reach': 'Condition: Check if the object is within the robot's reach. Returns True if the object is close enough, False otherwise.', 'has_object': 'Condition: Check if the robot is currently holding an object. Returns True if an object is held, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Generate behavior tree for a robot to identify, approach and pick up an object
4.// OUTPUT:
<BehaviorTree><Sequence><Condition>has_object</Condition><Selector><Sequence><Action>identify_object</Action><Action>move_to_object</Action><Selector><Sequence><Condition>is_object_in_reach</Condition><Action>pickup_object</Action><Action>wait</Action></Sequence><Action>wait</Action></Selector></Sequence></Selector></Sequence></BehaviorTree>
//Note: The 'wait' action is used as a placeholder, since the user command does not specify what action should be taken after picking up the object.

###
5.// INSTRUCTIONS: Use only the following behaviors {'navigate_to_destination': 'Action: Use GPS and map data to navigate to the specified destination. Always returns True.', 'detect_landmarks': 'Action: Use sensors to detect any landmarks in the robot's surroundings. Returns a list of detected landmarks.', 'identify_safe_route': 'Action: Analyze the detected landmarks to identify the safest route to the destination. Returns a list of waypoints for the safe route.', 'follow_route': 'Action: Follow the specified route, navigating around obstacles if necessary. Always returns True.', 'is_destination_reached': 'Condition: Check if the robot has reached the designated destination. Returns True if destination is reached, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Generate behavior tree for a robot to navigate to a specific location while avoiding obstacles and taking the safest route.
5.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_destination_reached</Condition><Selector><Sequence><Action>navigate_to_destination</Action><Selector><Sequence><Action>detect_landmarks</Action><Action>identify_safe_route</Action><Action>follow_route</Action></Sequence><Action>wander</Action></Selector></Sequence></Selector></Sequence></BehaviorTree>
// Note: The 'wander' action is used as a placeholder, as the user command does not specify what action should be taken if an obstacle is detected or the safe route cannot be determined.

###
6.// INSTRUCTIONS: Use only the following behaviors {'detect_intruders': 'Action: Use sensors to detect any intruders in the robot's surroundings. Returns a list of detected intruders.', 'classify_intruder': 'Action: Analyze the detected intruders to determine if they are a threat or not. Returns a list of classified intruders.', 'identify_target': 'Action: Based on the classified intruders, identify the target for the robot to approach. Returns a list of identified targets.', 'move_towards_target': 'Action: Move towards the identified target. Always returns True.', 'push_target': 'Action: Once in close proximity, push the target to the designated area. Returns True if successful, False if failed.', 'is_target_in_reach': 'Condition: Check if the target is within the robot's reach. Returns True if the target is close enough, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Generate behavior tree for a robot to detect, classify, and push a target to a designated area.
6.// OUTPUT:
<BehaviorTree><Sequence><Selector><Condition>is_target_in_reach</Condition><Selector><Sequence><Action>detect_intruders</Action><Action>classify_intruder</Action><Selector><Sequence><Condition>is_target_in_reach</Condition><Action>identify_target</Action><Selector><Sequence><Condition>is_target_in_reach</Condition><Action>move_towards_target</Action><Selector><Sequence><Condition>is_target_in_reach</Condition><Action>push_target</Action><Action>wait</Action></Sequence><Action>wait</Action></Selector></Sequence></Selector></Sequence></Selector></Sequence><Action>wander</Action></Selector></Sequence></BehaviorTree>
// Note: The 'wait' action is used as a placeholder, since the user command does not specify what action should be taken after pushing the target.

###
7.// INSTRUCTIONS: Use only the following behaviors {'locate_victim': 'Action: Use sensors and victim recognition to locate any victims in the vicinity. Returns a list of located victims.', 'administer_first_aid': 'Action: Once a victim is located, administer first aid to stabilize their condition. Returns True if successful, False if failed.', 'find_evacuation_point': 'Action: Based on the stabilized victim, find the nearest evacuation point. Returns a list of identified evacuation points.', 'move_to_evacuation': 'Action: Move towards the designated evacuation point 
###
4.// INSTRUCTIONS: Use only the following behaviors {'move_to_outpost': 'Action: Move the robot to the nearest designated outpost location. Always returns True.', 'gather_resources': 'Action: Use certain tools to gather resources found at the outpost location. Always returns True.', 'refuel_robot': 'Action: Refill the robot's energy reserves using the collected resources. Always returns True.', 'is_resources_available': 'Condition: Check if there are resources available at the current outpost location. Returns True if there are resources, False otherwise.', 'is_robot_fully_charged': 'Condition: Check if the robot's energy level is full and does not need to refuel. Returns True if the energy level is full, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Generate behavior tree for a robot to automatically gather and use resources at designated outpost locations
4.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_resources_available</Condition><Selector><Action>move_to_outpost</Action><Action>gather_resources</Action></Selector></Sequence><Sequence><Condition>is_robot_fully_charged</Condition><Action>refuel_robot</Action></Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'start_following': 'Action: Begin following the designated leader robot. Always returns True.', 'stop_following': 'Action: Stop following the designated leader robot. Always returns True.', 'is_leader_in_range': 'Condition: Check if the designated leader robot is within range for communication and following. Returns True if the leader is within range, False otherwise.', 'is_leader_stuck': 'Condition: Check if the designated leader robot has stopped moving or is stuck in place. Returns True if the leader is stuck, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Generate behavior tree for a robot to follow and assist the designated leader robot
5.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_leader_in_range</Condition><Selector><Action>start_following</Action><Condition>is_leader_stuck</Condition></Selector></Sequence><Condition>is_leader_in_range</Condition><Selector><Action>stop_following</Action><Action>wait</Action></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'analyze_environment': 'Action: Use advanced sensors and algorithms to analyze the surrounding environment and identify potential hazards or obstacles. Always returns True.', 'evade_obstacle': 'Action: Utilize the robot's navigation capabilities to find an alternative path and evade obstacles. Always returns True.', 'take_shelter': 'Action: If hazardous conditions are detected, move the robot to a safe location for shelter. Always returns True.', 'is_obstacle_detected': 'Condition: Check if any potential obstacles or hazards are detected in the current environment. Returns True if an obstacle is detected, False otherwise.', 'is_shelter_available': 'Condition: Check if a safe shelter location has been designated. Returns True if a shelter is available, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Generate behavior tree for a robot to autonomously navigate and find shelter in a hazardous environment
6.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_obstacle_detected</Condition><Selector><Action>analyze_environment</Action><Action>evade_obstacle</Action></Selector></Sequence><Sequence><Condition>is_shelter_available</Condition><Action>take_shelter</Action></Sequence></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'move_to_recharge_station': 'Action: Move the robot to the nearest designated recharge station for battery replenishment. Always returns True.', 'recharge_battery': 'Action: Use the charging equipment at the recharge station to refill the robot's battery. Always returns True.', 'is_battery_low': 'Condition: Check if the robot's battery level has dropped below a certain threshold. Returns True if the battery is low, False otherwise.', 'is_recharge_station_available': 'Condition: Check if there is a designated recharge station within range for the robot to access. Returns True if a recharge station is available, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: Generate behavior tree for a robot to autonomously monitor and recharge its battery level
7.// OUTPUT:
<BehaviorTree><Condition>is_battery_low</Condition><Selector><Condition>is_recharge_station_available</Condition><Sequence><Action>move_to_recharge_station</Action><Action>recharge_battery</Action></Sequence><Action>wait</Action></Selector></BehaviorTree> 
###
4.// INSTRUCTIONS: Use only the following behaviors {'collect_resources': 'Action: Collect available resources in the environment. Returns True if resources are successfully collected, False otherwise.', 'return_to_base': 'Action: Return to base with collected resources. Always returns True.', 'is_resource_available': 'Condition: Check if there are resources in the immediate environment. Returns True if there are resources, False otherwise.', 'is_base_reachable': 'Condition: Check if the base is within reach. Returns True if the base is reachable, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Send a team of robots to collect resources and return them to base, ensuring that the base is reachable.
4.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_resource_available</Condition><Selector><Sequence><Condition>is_base_reachable</Condition><Selector><Action>collect_resources</Action><Action>return_to_base</Action></Selector></Sequence><Action>return_to_base</Action></Selector></Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'move_to_nearest_exit': 'Action: Move the robot to the nearest exit. Returns True if successfully reached an exit, False otherwise.', 'use_fire_extinguisher': 'Action: Use fire extinguisher to put out fire in the immediate environment. Returns True if fire is extinguished, False otherwise.', 'is_fire_detected': 'Condition: Check for fire in the vicinity. Returns True if fire is detected, False otherwise.', 'is_path_blocked': 'Condition: Check if the path in the current direction is blocked or unsafe. Returns True if the path is blocked, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: In the event of a fire, evacuate the building by moving to the nearest exit using the fire extinguisher to clear a safe path.
5.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_fire_detected</Condition><Sequence><Condition>is_path_blocked</Condition><Sequence><Action>use_fire_extinguisher</Action><Selector><Action>move_to_nearest_exit</Action><Action>use_fire_extinguisher</Action></Selector></Sequence></Sequence><Action>move_to_nearest_exit</Action></Sequence></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'form_circle': 'Action: Form a circular formation with other robots. Returns True when formation is complete, False otherwise.', 'move_to_target': 'Action: Move towards the designated target. Returns True if the target is reached within a set time limit, False otherwise.', 'identify_target': 'Subtree node: Handles the task of identifying a specific target within the environment.', 'is_circle_formed': 'Condition: Check if a circular formation with other robots has been formed. Returns True if formation is complete, False otherwise.', 'is_target_identified': 'Condition: Check if a specific target has been identified within the environment. Returns True if the target is identified, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Work together with other robots to identify and form a circle around a designated target within the environment.
6.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_target_identified</Condition><Selector><Sequence><Condition>is_circle_formed</Condition><Action>move_to_target</Action></Sequence><Sequence><Action>identify_target</Action><Selector><Action>form_circle</Action><Action>move_to_target</Action></Selector></Sequence></Selector></Sequence></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'detect_intruder': 'Condition: Check for intruders in the surrounding area. Returns True if an intruder is detected, False otherwise.', 'attack_intruder': 'Action: Attack the intruder. Returns True if the intruder is successfully taken down, False otherwise.', 'guard_master': 'Action: Guard the master and prevent any intruders from getting close. Always returns True.', 'cease_attack': 'Action: Stop attacking and remain in place. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: If an intruder is detected, attack them until they are neutralized. Once the master is safe, cease attack and guard the master.
7.// OUTPUT:
<BehaviorTree><Sequence><Condition>detect_intruder</Condition><Sequence><Selector><Condition>guard_master</Condition><Selector><Action>attack_intruder</Action><Action>cease_attack</Action></Selector></Sequence><Action>guard_master</Action></Selector></Sequence></BehaviorTree>
###
4.// INSTRUCTIONS: Use only the following behaviors {'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'pick_up_resource': 'Action: Pick up the nearest resource. Always returns True.', 'is_resource_picked_up': 'Condition: Check if a resource has been picked up. Returns True if a resource has been picked up, False otherwise.', 'drop_resource': 'Action: Drop the resource at the designated location. Always returns True.', 'is_at_dropoff': 'Condition: Check if the robot is at the designated drop-off location. Returns True if at the drop-off location, False otherwise.'}, and include at least one Sequence and one Selector node, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Collect resources and deliver them to the designated drop-off location, while avoiding obstacles.
4.// OUTPUT:
<BehaviorTree><Sequence><Action>pick_up_resource</Action><Selector><Sequence><Condition>is_resource_picked_up</Condition><Action>drop_resource</Action></Sequence><Sequence><Action>avoid_obstacle</Action><Action>continue_movement_agent</Action></Sequence></Selector></Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'explore': 'Action: Explore for resources. Always returns True.', 'get_resource_urgency': 'Function: Calculates the urgency of acquiring resources. Returns a score based on urgency.', 'select_target_direction': 'Action: Select the direction with the highest utility score. Returns the chosen direction.', 'move_to_target_direction': 'Action: Move towards the chosen direction. Always returns True.', 'is_target_within_reach': 'Condition: Check if the target is within reach. Returns True if the target is within reach, False otherwise.'}, and include at least one Sequence and one Selector node, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Gather resources with the highest urgency first, while avoiding obstacles and moving towards the chosen direction.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>get_resource_urgency</Action><Selector><Sequence><Action>select_target_direction</Action><Sequence><Condition>is_target_within_reach</Condition><Action>move_to_target_direction</Action></Sequence></Selector></Sequence><Sequence><Action>avoid_obstacle</Action><Action>continue_movement_agent</Action></Sequence></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'grab_nearest_resource': 'Action: Grab the nearest resource. Always returns True.', 'drop_resource': 'Action: Drop the resource at the nearest drop-off location. Always returns True.', 'is_target_picked_up': 'Condition: Check if the target object has been picked up. Returns True if the target is picked up, False otherwise.', 'is_at_dropoff': 'Condition: Check if the robot is at the designated drop-off location. Returns True if at the drop-off location, False otherwise.', 'select_target_direction': 'Action: Select the direction with the highest utility score. Returns the chosen direction.', 'move_to_target_direction': 'Action: Move towards the chosen direction. Always returns True.', 'is_target_within_reach': 'Condition: Check if the target is within reach. Returns True if the target is within reach, False otherwise.'}, and include at least one Sequence and one Selector node, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Collect resources and deliver them to the nearest drop-off location, while maximizing efficiency by choosing the direction with the highest utility score.
6.// OUTPUT:
<BehaviorTree><Sequence><Action>grab_nearest_resource</Action><Selector><Sequence><Condition>is_target_picked_up</Condition><Action>drop_resource</Action></Sequence><Sequence><Action>select_target_direction</Action><Sequence><Condition>is_target_within_reach</Condition><Action>move_to_target_direction</Action></Sequence></Selector></Sequence><Sequence><Condition>is_at_dropoff</Condition><Action>move_to_target_direction</Action></Sequence></Selector></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'attack': 'Action: Attack nearby enemies. Always returns True.', 'retreat': 'Action: Retreat from enemies. Always returns True.', 'count_enemies': 'Function: Counts the number of enemies within range. Returns the number of enemies detected.', 'switch_to_defensive_mode': 'Action: Switch to a defensive mode when outnumbered by enemies. Returns True if in defensive mode, False otherwise.', 'switch_to_aggressive_mode': 'Action: Switch to an aggressive mode when outnumbering enemies. Returns True if in aggressive mode, False otherwise.', 'is_in_defensive_mode': 'Condition: Check if currently in defensive mode. Returns True if in defensive mode, False otherwise.', 'is_in_aggressive_mode': 'Condition: Check if currently in aggressive mode. Returns True if in aggressive mode, False otherwise.'}, and include at least one Sequence and one Selector node, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: Engage in combat and switch between defensive and aggressive modes based on number of enemies present.
7.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>attack</Action><Selector><Sequence><Function>count_enemies</Function><Sequence><Condition>is_in_defensive_mode</Condition><Selector><Sequence><Condition>switch_to_aggressive_mode</Condition><Action>attack</Action></Sequence><Condition>is_in_aggressive_mode</Condition><Selector><Sequence><Condition>switch_to_defensive_mode</Condition><Action>retreat</Action></Sequence><Condition>is_in_defensive_mode</Condition><Action>attack</Action></Selector></Sequence></Sequence></Selector></Sequence><Selector><Sequence><Function>count_enemies</Function><Sequence><Condition>is_in_defensive_mode</Condition><Selector><Sequence><Condition>switch_to_aggressive_mode</Condition><Action>retreat</Action></Sequence><Condition>is_in_aggressive_mode</Condition><Selector><Sequence><Condition>switch_to_defensive_mode</Condition><Action>attack</Action></Sequence><Condition>is_in_defensive_mode</Condition><Action>retreat</Action></Selector></Sequence></Sequence></Selector></Sequence></Selector></BehaviorTree>###
4.// INSTRUCTIONS: Use only the following behaviors {'defend_base': 'Subtree node: Represents a behavior tree for defending the base from incoming enemies.', 'follow_command': 'Action: Follow the given command from the base command center. Always returns True.', 'attack_enemy': 'Action: Attack the nearest enemy within range. Always returns True.', 'look_around': 'Action: Perform a 360-degree scan using sensors to detect any potential threats. Always returns True.', 'base_under_attack': "Event: Triggers when the base is under attack from incoming enemies. Returns True if the base is under attack, False otherwise."}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Construct behavior tree for a robot to defend the base by following commands from the base command center and attacking any enemy threats.
4.// OUTPUT:
<BehaviorTree><Selector><Trigger>base_under_attack</Trigger><Sequence><Action>defend_base</Action><Selector><Action>follow_command</Action><Action>look_around</Action><Selector><Action>attack_enemy</Action><Action>wait</Action></Selector></Sequence></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'search_for_resources': 'Subtree node: Represents a behavior tree for searching and collecting resources.', 'return_to_base': 'Action: Return to the base with collected resources. Always returns True.', 'pick_up_resource': 'Action: Pick up the nearest available resource. Always returns True.', 'drop_off_resource': 'Action: Drop off collected resource at the designated location in the base. Always returns True.', 'has_resource': 'Condition: Check if the robot is currently carrying a resource. Returns True if the robot has a resource, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Generate behavior tree for a robot to search for and collect resources, and return them to the designated location in the base.
5.// OUTPUT:
<BehaviorTree><Sequence><Condition>has_resource</Condition><Selector><Sequence><Action>return_to_base</Action><Action>drop_off_resource</Action></Sequence><Sequence><Action>search_for_resources</Action><Action>pick_up_resource</Action></Sequence></Selector></Sequence></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'assemble_structure': 'Action: Assemble the designated structure using collected components. Always returns True.', 'collect_components': 'Subtree node: Represents a behavior tree for collecting components needed for the designated structure.', 'find_structure_location': 'Action: Use sensors to find a suitable location for the structure. Always returns True.', 'get_component': 'Action: Pick up the nearest available component. Always returns True.', 'return_to_base': 'Action: Return to the base with all collected components. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Generate behavior tree for a robot to find a suitable location, collect components, and assemble a designated structure using those components.
6.// OUTPUT:
<BehaviorTree><Sequence><Condition>finished_assembling</Condition><Sequence><Action>return_to_base</Action><Sequence><Action>collect_components</Action><Selector><Sequence><Action>find_structure_location</Action><Action>get_component</Action></Sequence><Action>assemble_structure</Action></Selector></Sequence></Sequence></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'scan_target': 'Action: Scan the target using sensors to gather information. Always returns True.', 'consider_options': 'Action: Analyze the gathered information and consider various options for approach and attack. Always returns True.', 'select_action': 'Action: Select the best course of action from the considered options. Always returns True.', 'execute_action': 'Action: Execute the chosen action, such as launching an attack. Always returns True.', 'target_reached': 'Condition: Check if the target has been reached by the robot. Returns True if the target is reached, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: Generate behavior tree for a robot to scan and analyze a target, select the best approach, and execute an attack.
7.// OUTPUT:
<BehaviorTree><Sequence><Selector><Condition>target_reached</Condition><Sequence><Action>scan_target</Action><Action>consider_options</Action><Sequence><Action>select_action</Action><Action>execute_action</Action></Sequence></Sequence></Selector></Sequence></BehaviorTree>###
4.// INSTRUCTIONS: Use only the following behaviors {'identify_target': 'Action: Identify the target based on a specific color. Always returns True.', 'move_to_target': 'Action: Move towards the identified target. Always returns True.', 'chase_target': 'Action: Chase and follow the target until it gets within a specific distance. Always returns True.', 'collect_resource': 'Action: Collect the resource from the target location. Returns True if successful, False if not., 'is_target_identified': 'Condition: Check if the target has been identified. Returns True if the target is identified, False otherwise.', 'is_at_target_location': 'Condition: Check if the agent has reached the target location. Returns True if the agent is at the target location, False if not.', 'is_resource_available': 'Condition: Check if the resource is still available at the target location. Returns True if the resource is still available, False otherwise.', 'is_resource_collected': 'Condition: Check if the resource is collected by the agent. Returns True if the resource is successfully collected, False otherwise.', 'is_target_lost': 'Condition: Check if the identified target is lost. Returns True if the target is lost, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Generate behavior tree to 'Identify and chase a resource, collect the resource once reached'
4.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>is_target_identified</Condition><Selector><Sequence><Action>move_to_target</Action><Condition>is_at_target_location</Condition><Action>chase_target</Action><Condition>is_resource_available</Condition><Selector><Action>collect_resource</Action><Action>wait</Action></Selector></Selector></Sequence></Selector><Action>wait</Action></Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'detect_enemy': 'Action: Detect enemies within the radius. Returns True if enemies are detected, False otherwise.', 'strafe_around_enemy': 'Action: Move around the detected enemies in a strafe pattern. Always returns True.','shoot_enemy': 'Action: Shoot at the detected enemy. Returns True if successful, False otherwise.', 'is_ammo_available': 'Condition: Check if the agent has enough ammo. Returns True if there is enough ammo, False otherwise.', 'is_enemy_killed': 'Condition: Check if the enemy has been killed. Returns True if the enemy is killed, False otherwise.', 'is_enemy_detected': 'Condition: Check if an enemy is detected. Returns True if there is an enemy within the radius, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Generate behavior tree to 'Detect and engage enemies, use strafing tactic to avoid enemy fire'
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_enemy_detected</Condition><Sequence><Condition>is_ammo_available</Condition><Action>shoot_enemy</Action><Condition>is_enemy_killed</Condition></Sequence><Action>strafe_around_enemy</Action></Sequence><Action>wander</Action></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'detect_food_source': 'Action: Detect the nearest food source. Returns True if a food source is detected, False otherwise.', 'find_path_to_food_source': 'Action: Find the shortest path to the detected food source. Returns True if a path is found, False otherwise.', 'move_to_food_source': 'Action: Move towards the food source. Returns True if successful, False if not.', 'eat_food': 'Action: Consume the food source. Returns True if successfully consumed, False if not.', 'is_food_source_consumed': 'Condition: Check if the food source is fully consumed. Returns True if the food source is fully consumed, False otherwise.', 'is_food_detected': 'Condition: Check if a food source is detected in the environment. Returns True if a food source is detected, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Generate behavior tree to 'Find, move towards, and consume food source'
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_food_detected</Condition><Sequence><Action>detect_food_source</Action><Action>find_path_to_food_source</Action><Action>move_to_food_source</Action><Selector><Action>eat_food</Action><Action>wait</Action></Selector></Sequence></Sequence><Action>wander</Action></Selector></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'detect_nest': 'Action: Detect the location of the nest. Returns True if the nest is detected, False otherwise.', 'find_path_to_nest': 'Action: Find the shortest path to the nest. Returns True if a path is found, False otherwise.', 'move_to_nest': 'Action: Move towards the nest. Returns True if successful, False if not.', 'lay_egg': 'Action: Lay an egg at the nest. Returns True if successfully laid, False if not.', 'is_nest_full': 'Condition: Check if the nest is full and cannot hold any more eggs. Returns True if the nest is full, False otherwise.', 'is_nest_detected': 'Condition: Check if the nest is detected in the environment. Returns True if the nest is detected, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: Generate behavior tree to 'Find and lay an egg at the nest'
7.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_nest_detected</Condition><Sequence><Action>detect_nest</Action><Action>find_path_to_nest</Action><Action>move_to_nest</Action><Selector><Action>lay_egg</Action><Action>wait</Action></Selector></Sequence></Sequence><Action>wander</Action></Selector></BehaviorTree>
###
3.// INSTRUCTIONS: Use only the following behaviors {'follow_leader': 'Action: Follow the designated leader robot. Always returns True.', 'communicate_location': 'Action: Communicate current location to other robots. Always returns True.', 'move_to_waypoint': 'Action: Move to a specific waypoint. Always returns True.', 'is_far_from_leader': 'Condition: Check if the robot has strayed too far from the leader. Returns True if the robot is far from the leader, False otherwise.', 'reached_waypoint': 'Condition: Check if the robot has reached the designated waypoint. Returns True if the waypoint is reached, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3.// USER COMMAND: Create a behavior tree for a swarm of robots to follow a designated leader and communicate with each other
3.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_far_from_leader</Condition><Action>follow_leader</Action></Sequence><Sequence><Condition>is_at_waypoint</Condition><Action>communicate_location</Action></Sequence><Selector><Sequence><Condition>is_at_waypoint</Condition><Action>move_to_waypoint</Action></Sequence><Action>wander</Action><Action>communicate_location</Action></Selector></Selector></BehaviorTree>

###
4.// INSTRUCTIONS: Use only the following behaviors {'graze': 'Action: Move the robot towards a food source and begin grazing. Always returns True.', 'find_food': 'Action: Search for the nearest food source using sensors. Always returns True.', 'eat': 'Action: Consume food until fully satisfied. Returns True when fully satisfied, False otherwise.', 'is_hungry': 'Condition: Check if the robot is feeling hungry. Returns True if the robot is hungry, False otherwise.', 'is_full': 'Condition: Check if the robot is fully satisfied. Returns True if the robot is full, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Create a behavior tree for a robot in a simulated animal ecosystem to find and consume food
4.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_hungry</Condition><Selector><Sequence><Condition>is_at_food_source</Condition><Action>eat</Action></Sequence><Selector><Sequence><Action>find_food</Action><Action>move_to_food_source</Action></Sequence><Action>wander</Action></Selector></Selector></Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'move_to_target': 'Action: Move towards a designated target location. Always returns True.', 'scan_for_danger': 'Action: Use sensors to continuously scan for any potential danger in the environment. Always returns True.', 'avoid_threat': 'Action: Take evasive action to avoid a detected threat. Returns True when threat is successfully avoided, False otherwise.', 'is_target_reached': 'Condition: Check if the robot has reached the designated target location. Returns True if the target is reached, False otherwise.', 'is_threat_detected': 'Condition: Check if a potential threat is detected in the environment. Returns True if a threat is detected, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Create a behavior tree for a robot in a hazardous environment to reach a safe location
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_threat_detected</Condition><Action>avoid_threat</Action></Sequence><Selector><Sequence><Condition>is_target_reached</Condition><Action>scan_for_danger</Action></Sequence><Action>wander</Action><Action>move_to_target</Action></Selector></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'gather_supplies': 'Action: Collect necessary supplies from designated locations. Returns True when all supplies are gathered, False otherwise.', 'deliver_supplies': 'Action: Delivery collected supplies to specified locations. Returns True when all supplies are delivered, False otherwise.', 'is_supplies_full': 'Condition: Check if the robot's inventory is full. Returns True if inventory is full, False otherwise.', 'is_supplies_empty': 'Condition: Check if the robot's inventory is empty. Returns True if inventory is empty, False otherwise.', 'is_delivery_location_reached': 'Condition: Check if the robot has reached the specified delivery location. Returns True if location is reached, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Create a behavior tree for a swarm of robots to gather and deliver supplies to designated locations
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_supplies_full</Condition><Action>deliver_supplies</Action></Sequence><Sequence><Condition>is_delivery_location_reached</Condition><Action>gather_supplies</Action></Sequence><Selector><Sequence><Condition>is_supplies_empty</Condition><Action>wander</Action></Sequence><Action>move_to_delivery_location</Action></Selector></Selector></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'is_at_intersection': 'Condition: Check if the robot is at an intersection in the environment. Returns True if at an intersection, False otherwise.','turn_left': 'Action: Turn the robot 90 degrees to the left. Always returns True.', 'turn_right': 'Action: Turn the robot 90 degrees to the right. Always returns True.', 'move_forward': 'Action: Move the robot forward. Always returns True.', 'choose_random_path': 'Action: Randomly choose a direction at an intersection to continue moving. Returns True after choosing a direction and moving.',}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: Create a behavior tree for a robot exploring a maze-like environment using only randomized decisions at intersections
7.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_at_intersection</Condition><Selector><Sequence><Action>choose_random_path</Action><Choice><Sequence><Action>turn_left</Action><Action>move_forward</Action></Sequence><Sequence><Action>turn_right</Action><Action>move_forward</Action></Sequence></Choice></Selector></Sequence><Sequence><Condition>is_at_dead_end</Condition><Action>turn_back</Action></Sequence><Action>wander</Action></Selector></BehaviorTree> 
###
3.// INSTRUCTIONS: Use only the following behaviors {'move_to_point': 'Action: Move the robot to a specific point in the environment. Always returns True.', 'measure_distance': 'Action: Use distance sensors to measure the distance between the robot and a specific point. Always returns True.', 'charge_battery': 'Action: If the battery is low, move to a charging station and charge the battery. Always returns True.', 'check_battery_level': 'Condition: Check the current battery level. Returns True if the battery level is below 90%, False otherwise.', 'navigate_to_target': 'Action: Use sensors and algorithms to navigate to a specified target location. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3.// USER COMMAND: Create a behavior tree for a robot to navigate to a specific location and charge its battery if necessary.
3.// OUTPUT:
<BehaviorTree><Sequence><Condition>check_battery_level</Condition><Selector><Sequence><Action>move_to_point</Action><Action>measure_distance</Action></Sequence><Action>navigate_to_target</Action></Selector><Condition>check_battery_level</Condition><Action>charge_battery</Action></Sequence></BehaviorTree>

###
4.// INSTRUCTIONS: Use only the following behaviors {'move_forward': 'Action: Move the robot one step forward in the current direction. Always returns True.', 'move_backward': 'Action: Move the robot one step backward in the current direction. Always returns True.', 'turn_left': 'Action: Turn the robot 90 degrees to the left. Always returns True.', 'turn_right': 'Action: Turn the robot 90 degrees to the right. Always returns True.', 'turn_around': 'Action: Turn the robot 180 degrees. Always returns True.', 'detect_obstacle': 'Condition: Check for obstacles in front of the robot. Returns True if an obstacle is detected, False otherwise.', 'detect_object': 'Condition: Check for an object within 5 units of distance. Returns True if an object is detected, False otherwise.', 'pick_up_object': 'Action: Pick up an object within 1 unit of distance. Always returns True.', 'drop_object': 'Action: Drop the currently held object. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Create a behavior tree for a robot to collect objects in a specific area, avoiding obstacles.
4.// OUTPUT:
<BehaviorTree><Sequence><Condition>detect_object</Condition><Selector><Sequence><Condition>detect_obstacle</Condition><Selector><Action>turn_left</Action><Action>turn_right</Action></Selector></Sequence><Sequence><Action>move_forward</Action><Condition>detect_object</Condition><Action>pick_up_object</Action></Sequence></Selector></Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'move_forward': 'Action: Move the robot one step forward in the current direction. Always returns True.', 'move_backward': 'Action: Move the robot one step backward in the current direction. Always returns True.', 'turn_left': 'Action: Turn the robot 90 degrees to the left. Always returns True.', 'turn_right': 'Action: Turn the robot 90 degrees to the right. Always returns True.', 'detect_target': 'Condition: Check for a target within 10 units of distance. Returns True if a target is detected, False otherwise.', 'detect_intruder': 'Condition: Check for an intruder within 15 units of distance. Returns True if an intruder is detected, False otherwise.', 'escape_intruder': 'Action: Move the robot away from the detected intruder. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Create a behavior tree for a robot to patrol an area and move away from intruders if detected.
5.// OUTPUT:
<BehaviorTree><Sequence><Selector><Condition>detect_target</Condition><Sequence><Condition>detect_intruder</Condition><Action>escape_intruder</Action></Sequence><Selector><Action>turn_left</Action><Action>turn_right</Action></Selector><Condition>detect_target</Condition><Action>move_forward</Action></Selector></Sequence></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'random_turn': 'Action: Turn the robot a random amount between 30 and 60 degrees. Always returns True.', 'move_forward': 'Action: Move the robot one step forward in the current direction. Always returns True.', 'detect_object': 'Condition: Check for an object within 3 units of distance. Returns True if an object is detected, False otherwise.', 'pick_up_object': 'Action: Pick up an object within 1 unit of distance. Always returns True.', 'drop_object': 'Action: Drop the currently held object. Always returns True.', 'return_to_base': 'Action: Navigate back to the base station. Returns True when the robot reaches the base station.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Create a behavior tree for a robot to forage for objects and return them to the base station.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>detect_object</Condition><Selector><Action>pick_up_object</Action><Sequence><Action>random_turn</Action><Action>random_turn</Action></Sequence></Selector><Sequence><Action>move_forward</Action><Condition>detect_object</Condition><Action>drop_object</Action></Sequence></Selector><Action>return_to_base</Action></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'move_forward': 'Action: Move the robot one step forward in the current direction. Always returns True.', 'move_backward': 'Action: Move the robot one step backward in the current direction. Always returns True.', 'move_left': 'Action: Move the robot one step to the left. Always returns True.', 'move_right': 'Action: Move the robot one step to the right. Always returns True.', 'detect_obstacle': 'Condition: Check for obstacles in front of the robot. Returns True if an obstacle is detected, False otherwise.', 'detect_object': 'Condition: Check for an object within 3 units of distance. Returns True if an object is detected, False otherwise.', 'navigate_to_target': 'Action: Use sensors and algorithms to navigate to a specified target location. Always returns True.', 'locate_target': 'Action: Use sensors to locate a specified target within 20 units of distance. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: Create a behavior tree for 
###
4.// INSTRUCTIONS: Use only the following behaviors {'set_destination': 'Action: Set a new destination for the swarm. Always returns True.', 'move_towards_destination': 'Action: Move towards the current destination. Always returns True.', 'check_proximity_to_neighbor': 'Condition: Check the distance to the nearest neighbor. Returns True if the distance is within 5 units, False otherwise.', 'check_proximity_to_obstacle': 'Condition: Check the distance to the nearest obstacle. Returns True if the distance is within 2 units, False otherwise.', 'check_proximity_to_target': 'Condition: Check the distance to the target. Returns True if the distance is within 3 units, False otherwise.', 'follow_leader': 'Condition: Check if the swarm is following a designated leader. Returns True if the swarm is following a leader, False otherwise.', 'wait': 'Action: Remain in place and do nothing. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Generate behavior tree for a swarm to follow a designated leader and avoid obstacles while moving towards a target.Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree><Sequence><Condition>follow_leader</Condition><Selector><Sequence><Condition>check_proximity_to_obstacle</Condition><Action>wait</Action></Sequence><Selector><Condition>check_proximity_to_target</Condition><Sequence><Condition>check_proximity_to_neighbor</Condition><Other><Action>set_destination</Action><Action>move_towards_destination</Action></Other></Sequence></Selector></Selector></Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'collect_food': 'Action: Collect food item and add it to the agent's inventory. Returns True if food is successfully collected, False otherwise.', 'drop_food': 'Action: Drop one food item from the agent's inventory. Returns True if food is dropped, False otherwise.', 'consume_food': 'Action: Consume one food item from the agent's inventory. Returns True if food is consumed, False otherwise.', 'is_food_available': 'Condition: Check if there is food available at the current location. Returns True if there is food, False otherwise.', 'is_inventory_full': 'Condition: Check if the agent's inventory is full. Returns True if the inventory is full, False otherwise.', 'is_hungry': 'Condition: Check if the agent's hunger level is below a certain threshold. Returns True if the agent is hungry, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Generate behavior tree for an agent to collect food while maintaining a consistent hunger level and managing inventory space.Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_hungry</Condition><Selector><Sequence><Condition>is_food_available</Condition><Action>collect_food</Action></Sequence><Sequence><Condition>is_inventory_full</Condition><Action>drop_food</Action></Sequence><Action>consume_food</Action></Selector></Sequence></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'search_for_enemy': 'Action: Search designated area for enemy robots. Always returns True.', 'attack_enemy': 'Action: Attack the enemy robot. Returns True if the attack is successful, False otherwise.', 'is_enemy_detected': 'Condition: Check if an enemy is detected within the designated search area. Returns True if an enemy is detected, False otherwise.', 'is_target_destroyed': 'Condition: Check if the designated enemy has been destroyed. Returns True if the enemy is destroyed, False otherwise.', 'is_teammate_injured': 'Condition: Check if any teammate is injured and in need of assistance. Returns True if a teammate is injured, False otherwise.', 'heal_teammate': 'Action: Provide first aid to an injured teammate. Returns True if aid is successfully provided, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Generate behavior tree for a team of robots to search for and attack an enemy robot while also providing assistance to injured teammates.Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree><Sequence><Selector><Condition>is_enemy_detected</Condition><Action>search_for_enemy</Action><Sequence><Condition>is_target_destroyed</Condition><Other><Sequence><Condition>is_teammate_injured</Condition><Action>heal_teammate</Action></Sequence><Action>attack_enemy</Action></Other></Sequence></Selector></Sequence></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'gather_resource': 'Action: Gather a resource from the environment. Returns True if a resource is successfully gathered, False otherwise.', 'deposit_resource': 'Action: Deposit one resource into the designated storage area. Returns True if a resource is deposited, False otherwise.', 'is_resource_available': 'Condition: Check if there is a resource available at the current location. Returns True if there is a resource, False otherwise.', 'is_storage_full': 'Condition: Check if the designated storage area is full. Returns True if the storage area is full, False otherwise.', 'is_gathering_complete': 'Condition: Check if all designated resources have been gathered. Returns True if the gathering is complete, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: Generate behavior tree for a team of robots to gather resources and deposit them into a designated storage area until all resources have been collected.Output only the XML behavior tree without extra text.
7.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>is_resource_available</Condition><Other><Action>gather_resource</Action><Action>deposit_resource</Action></Other></Sequence><Sequence><Condition>is_storage_full</Condition><Action>deposit_resource</Action></Sequence></Selector><Sequence><Condition>is_gathering_complete</Condition><Action>deposit_resource</Action></Sequence></BehaviorTree> 
###
4.// INSTRUCTIONS: Use only the following behaviors {'move_to_highest_altitude': 'Action: Move to the highest altitude available. Always returns True.', 'is_enemy_in_sight': 'Condition: Check if an enemy is within 40 units. Returns True if an enemy is within 40 units of distance, False otherwise.', 'launch_missile': 'Action: Launch a missile towards the nearest enemy. Always returns True.', 'is_resource_in_sight': 'Condition: Check if a resource is within 30 units. Returns True if a resource is within 30 units of distance, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Use swarm robots to defend territory against enemies and collect resources.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>move_to_highest_altitude</Action><Sequence><Condition>is_enemy_in_sight</Condition><Action>launch_missile</Action></Sequence></Sequence><Sequence><Condition>is_resource_in_sight</Condition><Action>collect_resource</Action><Action>bring_resource_to_base</Action></Sequence></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'recharge': 'Action: Recharge the robot using available energy source. Returns True if successfully recharged, False otherwise.', 'inspect_environment': 'Action: Inspect the environment for potential hazards. Returns True if no hazards are found, False otherwise.', 'is_hazard_detected': 'Condition: Check for hazards in the environment. Returns True if any hazards are detected, False otherwise.', 'follow_path': 'Action: Follow a designated path towards a specific location. Returns True if successfully followed, False otherwise.', 'is_at_destination': 'Condition: Check if robot has reached the designated destination. Returns True if at destination, False otherwise.', 'detect_signs_life': 'Action: Use detection sensors to search for signs of life in the environment. Returns True if signs of life are detected, False otherwise.', 'is_signs_life_detected': 'Condition: Check for signs of life in the environment. Returns True if signs of life are detected, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Use swarm robots to perform a search and rescue mission, including inspecting the environment for hazards and detecting signs of life.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>inspect_environment</Action><Sequence><Condition>is_hazard_detected</Condition><Action>recharge</Action></Sequence></Sequence><Sequence><Action>follow_path</Action><Sequence><Condition>is_at_destination</Condition><Action>detect_signs_life</Action><Condition>is_signs_life_detected</Condition></Sequence></Sequence></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'select_leader': 'Function: Choose a leader agent from the swarm. Returns the ID of the selected leader.', 'execute_leader_commands': 'Action: Execute commands given by the leader agent. Returns True if commands are successfully executed, False otherwise.', 'wait_for_leader': 'Action: Pause current actions and wait for further commands from the leader agent. Returns True when new commands are received from the leader.', 'is_leader_reached': 'Condition: Check if the leader agent has reached a designated location. Returns True if the leader has reached, False otherwise.', 'get_distances_from_target': 'Function: Calculates the distances of each agent from a designated target. Returns a list of distances.', 'leader_path_planning': 'Action: Plan a path for the leader agent to reach the target location. Returns True if a path is successfully planned, False otherwise.', 'send_distances_to_leader': 'Action: Send the distances of each agent to the leader agent. Returns True if distances are successfully sent, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Use swarm robots to assist a leader agent in reaching a designated target location.
6.// OUTPUT:
<BehaviorTree><Sequence><Action>select_leader</Action><Selector><Sequence><Condition>is_leader_reached</Condition><Action>execute_leader_commands</Action></Sequence><Sequence><Condition>is_leader_reached</Condition><Action>wait_for_leader</Action></Sequence></Selector><Sequence><Selector><Condition>leader_path_planning</Condition><Selector><Action>get_distances_from_target</Action><Sequence><Condition>send_distances_to_leader</Condition><Action>wait_for_leader</Action></Sequence></Selector></Sequence></Sequence></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'move_towards_info': 'Action: Move towards an information source to collect data. Returns True if successfully moved towards information, False otherwise.', 'transfer_data': 'Action: Transfer collected data to designated storage. Returns True if data is successfully transferred, False otherwise.', 'is_in_range_of_info': 'Condition: Check if robot is within range of information source. Returns True if within range, False otherwise.', 'detect_unknown_info': 'Action: Use sensors to detect unknown information in the environment. Returns True if unknown information is detected, False otherwise.', 'is_unknown_info_detected': 'Condition: Check if unknown information is detected. Returns True if unknown information is detected, False otherwise.', 'analyze_data': 'Action: Analyze collected data to extract patterns and useful information. Returns True if data is successfully analyzed, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: Use swarm robots to gather and analyze unknown information from the environment.
7.// OUTPUT:
<BehaviorTree><Sequence><Action>move_towards_info</Action><Selector><Condition>is_in_range_of_info</Condition><Sequence><Action>detect_unknown_info</Action><Action>transfer_data</Action><Action>analyze_data</Action></Sequence></Selector></Sequence></BehaviorTree>
###
4.// INSTRUCTIONS: Use only the following behaviors {'follow_path': 'Action: Follow predefined path. Always returns True.', 'is_obstacle_near': 'Condition: Check if obstacle is within 5 units. Returns True if obstacle is within 5 units of distance, False otherwise.', 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'is_path_complete': 'Condition: Check if path is complete. Returns True if the predefined path has been completed, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Traverse through a predefined path while avoiding obstacles. If path is completed, signal task completion.
4.// OUTPUT:
<BehaviorTree><Sequence><Action>follow_path</Action><Selector><Sequence><Condition>is_obstacle_near</Condition><Action>avoid_obstacle</Action></Sequence></Selector></Sequence><Condition>is_path_complete</Condition><Action>task_completed</Action></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'collect_resource': 'Action: Attempt to collect resource. Returns False if no resource is found, True if a resource is collected.', 'deposit_resource': 'Action: Deposit resource into designated deposit location. Returns True if resource is deposited successfully, False otherwise.', 'is_resource_full': 'Condition: Check if resource storage is full. Returns True if storage is full, False otherwise.', 'is_near_deposit': 'Condition: Check if agent is within range of deposit location. Returns True if agent is within range, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Collect resources from various locations and deposit them into the designated deposit location. If storage is full, return home and deposit resources.
5.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Action>collect_resource</Action><Action>deposit_resource</Action><Selector><Sequence><Condition>is_resource_full</Condition><Action>task_completed</Action></Sequence><Sequence><Condition>is_near_deposit</Condition><Action>deposit_resource</Action></Sequence></Selector></Sequence></Selector></Sequence></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'is_path_blocked': 'Condition: Check if path ahead is blocked. Returns True if obstacles are present, False otherwise.', 'detect_target': 'Subtree node: Represents a behavior tree for detecting target within a certain radius and direction.', 'move_to_target': 'Action: Move towards the target. Returns False if target is not detected, True if target is reached.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Detect target, move towards it and avoid obstacles in the way. If target is lost, repeat the process.
6.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>is_path_blocked</Condition><Selector><Sequence><Action>detect_target</Action><Sequence><Condition>is_target_detected</Condition><Action>move_to_target</Action></Sequence></Selector></Sequence><Action>avoid_obstacle</Action></Selector></Sequence></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_stop': "Action: Stop agent's movement. Always returns True.", 'random_rotate': "Action: Rotate agent randomly. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'group_movement': 'Action: Move with the group towards a designated target location. Returns False if target is lost, True if target is reached.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: Stop agent's movement, rotate randomly and then resume movement. If agent loses sight of group, attempt to move towards a designated target location with the group.
7.// OUTPUT:
<BehaviorTree><Sequence><Action>agent_movement_stop</Action><Action>random_rotate</Action><Action>continue_movement_agent</Action><Selector><Sequence><Action>group_movement</Action><Selector><Sequence><Condition>is_target_detected</Condition><Action>task_completed</Action></Sequence><Sequence><Condition>is_path_blocked</Condition><Selector><Sequence><Action>continue_movement_agent</Action><Action>move_to_target</Action></Sequence><Action>group_movement</Action></Selector></Sequence></Selector></Sequence></Selector></BehaviorTree>                      
##
4.// INSTRUCTIONS: Use only the following behaviors {'move_to_next_checkpoint': 'Action: Move the robot to the next checkpoint. Always returns True.', 'collect_resource': 'Action: Collect a resource from the current checkpoint. Returns True if the resource is successfully collected, False if no resource is present or the robot does not have enough space.', 'deposit_resource': 'Action: Deposit collected resources at the designated location. Returns True if the resources are successfully deposited, False otherwise.', 'is_resource_available': 'Condition: Check if a resource is available at the current checkpoint. Returns True if a resource is present, False otherwise.', 'is_resource_limit_reached': 'Condition: Check if the robot has reached its storage capacity for resources. Returns True if the limit is reached, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Generate behavior tree for a robot to collect and deposit resources in a designated location
4.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>is_resource_available</Condition><Action>collect_resource</Action></Sequence><Sequence><Condition>is_resource_limit_reached</Condition><Action>move_to_next_checkpoint</Action></Sequence></Selector><Sequence><Condition>is_resource_limit_reached</Condition><Action>deposit_resource</Action></Sequence></Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'move_to_target': 'Action: Move the robot towards the designated target. Always returns True.', 'collect_sample': 'Action: Collect a sample from the target area. Returns True if a sample is successfully collected, False otherwise.', 'analyze_sample': 'Action: Analyze the collected sample using onboard sensors. Returns True if the analysis is successful, False otherwise.', 'is_target_reachable': 'Condition: Check if the target is within the robot's reachable distance. Returns True if the target is reachable, False otherwise.', 'is_target_sampled': 'Condition: Check if a sample has already been collected from the target area. Returns True if the target has been sampled, False otherwise.', 'is_sample_analysis_complete': 'Condition: Check if the analysis of the collected sample is complete. Returns True if the analysis is complete, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Generate behavior tree for a robot to collect and analyze samples from a designated target.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_target_reachable</Condition><Selector><Sequence><Action>move_to_target</Action><Action>collect_sample</Action></Sequence><Selector><Condition>is_sample_analysis_complete</Condition><Action>analyze_sample</Action></Selector></Selector></Sequence><Sequence><Condition>is_target_reachable</Condition><Action>move_to_target</Action></Sequence></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'switch_to_autopilot': 'Action: Switch the robot into autopilot mode. Returns True if the switch is successful, False otherwise.', 'autopilot_to_checkpoint': 'Action: Utilize the autopilot function to move the robot to the designated checkpoint. Returns True if the checkpoint is reached, False otherwise.', 'manual_pilot_to_target': 'Action: Control the robot manually to move towards a designated target. Returns True if the target is reached, False otherwise.', 'is_target_reachable': 'Condition: Check if the target is within the robot's reachable distance. Returns True if the target is reachable, False otherwise.', 'is_checkpoint_reached': 'Condition: Check if a designated checkpoint has been reached. Returns True if the checkpoint is reached, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Generate behavior tree for a robot to switch between autopilot and manual control to reach designated targets and checkpoints.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_target_reachable</Condition><Selector><Sequence><Action>switch_to_autopilot</Action><Action>autopilot_to_checkpoint</Action></Sequence><Selector><Action>manual_pilot_to_target</Action></Selector></Selector></Sequence></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'avoid_collision': 'Action: Use sensors and movement to avoid collisions with other robots. Returns True if collision is avoided, False otherwise.', 'coordinate_with_other_robots': 'Action: Coordinate actions and share information with other robots in the swarm. Returns True if coordination is successful, False otherwise.', 'perform_task_in_sequence': 'Action: Perform a specific task in a predetermined sequence with other robots. Returns True if all robots successfully complete the task, False otherwise.', 'is_task_completed': 'Condition: Check if the current task has been completed by the swarm of robots. Returns True if the task is completed, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: Generate behavior tree for a swarm of robots to collaborate and perform a task together.
7.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_task_completed</Condition><Sequence><Action>coordinate_with_other_robots</Action><Action>perform_task_in_sequence</Action></Sequence></Sequence></BehaviorTree>
###
3.// INSTRUCTIONS: Use only the following behaviors {'wait_for_time': 'Subtree node: Represents a behavior tree for waiting for a specific amount of time.', 'do_task': 'Subtree node: Represents a behavior tree for performing a task.', 'is_object_detected': 'Condition: Checks if object is detected by sensors. Returns True if object is detected, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3.// USER COMMAND: Wait for 5 minutes, then perform a task if object is detected.
3.// OUTPUT:
<BehaviorTree><Sequence><Action><wait_for_time>5 minutes</wait_for_time></Action><Sequence><Condition>is_object_detected</Condition><Action>do_task</Action></Sequence></Sequence></BehaviorTree>

###
4.// INSTRUCTIONS: Use only the following behaviors {'scan_surroundings': 'Subtree node: Represents a behavior tree for scanning the surroundings.', 'request_help': 'Action: Sends a request for help to other agents. Always returns True.', 'is_resource_needed': 'Condition: Checks if a certain resource is needed. Returns True if resource is needed, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Scan surroundings and request help if a specific resource is needed.
4.// OUTPUT:
<BehaviorTree><Sequence><Action>scan_surroundings</Action><Sequence><Condition>is_resource_needed</Condition><Action>request_help</Action></Sequence></Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'collect_food': 'Action: Collect food items in the environment. Always returns True.', 'deposit_food': 'Action: Deposit food items in the nest. Returns True if food is successfully deposited, False otherwise.', 'is_food_low': 'Condition: Checks if food supply is low. Returns True if food supply is low, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Collect food items until food supply is low, then deposit food in the nest.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>collect_food</Action><Condition>is_food_low</Condition><Action>deposit_food</Action></Sequence><Action>collect_food</Action></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'move_to_point': "Action: Move to a specific point in the environment. Returns True if successfully reached the point, False otherwise.", 'check_battery': "Condition: Checks the battery level. Returns True if battery is above a specific threshold, False if battery is below the threshold."}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Move to a designated location, but check for battery level first and recharge if necessary.
6.// OUTPUT:
<BehaviorTree><Sequence><Condition>check_battery</Condition><Action>move_to_point</Action></Sequence><Action>recharge</Action></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'search_area': 'Subtree node: Represents a behavior tree for searching a designated area.', 'build_structure': 'Action: Build a structure at the designated location. Returns True if successfully built, False otherwise.', 'is_structure_complete': 'Condition: Checks if the structure is complete. Returns True if the structure is complete, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: Search designated area and build a structure if it is not already complete.
7.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>search_area</Action><Condition>is_structure_complete</Condition><Action>build_structure</Action></Sequence><Action>search_area</Action></Selector></BehaviorTree> 
###
4.// INSTRUCTIONS: Use only the following behaviors {'ask_for_help': 'Action: Send a call for help signal. Always returns True.', 'look_around': 'Action: Use sensors to scan the environment and look for any potential threats. Always returns True.', 'evade_threat': 'Subtree node: Represents a behavior tree for evading a potential threat.', 'join_forces': 'Action: Join forces with other nearby robots to form a group. Always returns True.', 'is_help_received': 'Condition: Check if help has been received. Returns True if help is received, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Scan environment for potential threats, and send a call for help. Join forces with other robots if help is received.
4.// OUTPUT:
<BehaviorTree><Sequence><Action>look_around</Action><Selector><Sequence><Action>ask_for_help</Action><Condition>is_help_received</Condition><Action>join_forces</Action></Sequence><Sequence><Action>wait</Action></Sequence></Selector></Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'navigate_to_goal': 'Action: Navigate to a designated goal location. Always returns True.', 'clear_obstacles': "Action: Use sensors to detect and navigate around any obstacles. Always returns True.", 'pick_up_item': 'Action: Pick up a designated item or object at the current location. Always returns True.', 'is_at_goal': 'Condition: Check if the robot has reached the goal location. Returns True if the robot has reached the goal, False otherwise.', 'is_item_picked_up': 'Condition: Check if the designated item has been picked up. Returns True if the item is picked up, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Navigate to a specific location while avoiding obstacles and picking up a designated item along the way.
5.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Action>navigate_to_goal</Action><Condition>is_at_goal</Condition></Sequence><Selector><Sequence><Action>clear_obstacles</Action><Action>pick_up_item</Action></Sequence><Sequence><Action>wait</Action></Sequence></Selector></Sequence></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'collect_resources': 'Action: Use sensors to locate and collect resources in the environment. Always returns True.', 'build_structure': 'Action: Use collected resources to build a designated structure. Always returns True.', 'protect_structure': 'Subtree node: Represents a behavior tree for protecting the built structure.', 'is_resources_full': 'Condition: Check if the robot has collected enough resources. Returns True if resources are full, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Find and collect resources, then use them to build a designated structure and protect it.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>collect_resources</Action><Condition>is_resources_full</Condition><Action>build_structure</Action><Selector><Sequence><Condition>protect_structure</Condition></Sequence><Sequence><Action>wait</Action></Sequence></Selector></Sequence></Selector></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'calculate_path': 'Action: Use algorithms to calculate an optimal path to the designated location. Always returns True.', 'follow_path': 'Action: Follow the calculated path to the goal location. Always returns True.', 'is_at_goal': 'Condition: Check if the robot has reached the designated location. Returns True if the goal is reached, False otherwise.', 'is_path_blocked': 'Condition: Check if the calculated path is blocked by obstacles. Returns True if the path is blocked, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: Calculate an optimal path to a designated location and follow it while avoiding any obstacles.
7.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>calculate_path</Action><Condition>is_path_blocked</Condition><Action>follow_path</Action><Condition>is_at_goal</Condition></Sequence><Sequence><Action>wait</Action></Sequence></Selector></BehaviorTree>
###
3.// INSTRUCTIONS: Use only the following behaviors {'move_to_target': 'Action: Move towards the designated target. Returns True once target is reached.', 'charge_battery': 'Action: Charge the robot's battery. Always returns True.', 'check_battery_level': 'Condition: Check the current battery level. Returns True if battery is above 20%, False if below.', 'scan_environment': 'Action: Scan the surrounding environment for obstacles and targets. Always returns True.', 'wait': 'Action: Pause and wait for further instructions. Always returns True.', 'navigate_to_charge_station': 'Action: Navigate to the nearest charging station. Returns True once charging station is reached.', 'is_station_reached': 'Condition: Check if the charging station has been reached. Returns True if the robot has arrived at the charging station, False otherwise.', 'is_target_visible': 'Condition: Check if the designated target is within the robot's vision. Returns True if the target is within the robot's field of view, False otherwise.', 'is_obstacle_detected': 'Condition: Check if an obstacle is detected within the robot's range. Returns True if an obstacle is detected, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3.// USER COMMAND: Generate a behavior tree to navigate towards the designated target, while checking battery levels and avoiding obstacles. If battery is low, navigate to the nearest charging station.
3.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>is_target_visible</Condition> <Action>move_to_target</Action> </Sequence> <Selector> <Sequence> <Condition>check_battery_level</Condition> <Selector> <Sequence> <Condition>is_station_reached</Condition> <Action>charge_battery</Action> <Action>wait</Action> </Sequence> <Action>navigate_to_charge_station</Action> </Selector> </Sequence> <Sequence> <Condition>is_obstacle_detected</Condition> <Action>wait</Action> </Sequence> </Selector> <Action>scan_environment</Action> </Sequence> </BehaviorTree>

###
4.// INSTRUCTIONS: Use only the following behaviors {'move_away_from_obstacle': 'Action: Move away from detected obstacles. Always returns True.', 'rotate_clockwise': 'Action: Rotate the robot clockwise. Always returns True.', 'rotate_counterclockwise': 'Action: Rotate the robot counterclockwise. Always returns True.', 'dismantle_structure': 'Action: Dismantle the targeted structure. Always returns True.', 'build_structure': 'Action: Build the designated structure using available materials. Always returns True.', 'identify_structure': 'Action: Identify and locate the designated structure. Always returns True.', 'is_structure_built': 'Condition: Check if the targeted structure has been fully built. Returns True if the structure is built, False otherwise.', 'is_structure_damaged': 'Condition: Check if the targeted structure has been damaged. Returns True if damage is detected, False otherwise.', 'is_goal_reached': 'Condition: Check if robot has reached the designated goal. Returns True if goal is reached, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Generate a behavior tree to locate, dismantle, and build a new structure while avoiding obstacles and ensuring previous structure is fully dismantled.
4.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>is_structure_damaged</Condition> <Action>dismantle_structure</Action> </Sequence> <Sequence> <Condition>is_goal_reached</Condition> <Selector> <Sequence> <Condition>is_structure_built</Condition> <Action>build_structure</Action> </Sequence> <Action>identify_structure</Action> </Selector> </Sequence> </Selector> <Action>move_away_from_obstacle</Action> </Sequence> <Selector> <Sequence> <Condition>is_obstacle_detected</Condition> <Action>rotate_counterclockwise</Action> </Sequence> <Action>rotate_clockwise</Action></Selector> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'move_towards_food': 'Action: Move towards the food source. Returns True once food is reached.', 'search_for_food': 'Action: Search for nearby food sources. Always returns True.', 'collect_food': 'Action: Collect food from the designated source. Always returns True.', 'drop_food': 'Action: Drop food at the designated location. Always returns True.', 'check_food_level': 'Condition: Check the current food level. Returns True if food is above 50%, False if below.', 'is_food_available': 'Condition: Check if there is still food remaining at the designated source. Returns True if food is still available, False otherwise.', 'is_food_stored': 'Condition: Check if the food has been successfully stored at the designated location. Returns True if food is stored, False otherwise.', 'is_obstacle_detected': 'Condition: Check if any obstacles are detected in the robot's path. Returns True if an obstacle is detected, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Generate a behavior tree to gather food from a designated source and store it at a designated location while avoiding obstacles and maintaining food levels above 50%.
5.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>is_food_available</Condition> <Selector> <Sequence> <Condition>is_food_stored</Condition> <Action>drop_food</Action> </Sequence> <Action>collect_food</Action> </Selector> </Sequence> <Selector> <Sequence> <Condition>is_obstacle_detected</Condition> <Action>search_for_food</Action> </Sequence> <Action>move_towards_food</Action> </Selector> </Selector> <Selector> <Sequence> <Condition>check_food_level</Condition> <Action>collect_food</Action> </Sequence> <Action>wait</Action> </Selector> </Sequence> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'scan_for_enemies': 'Action: Scan the environment for potential enemies. Always returns True.', 'attack_enemy': 'Action: Attack the targeted enemy. Returns True once enemy is defeated.', 'retreat': 'Action: Retreat to safety. Returns True once in safe location.', 'move_towards_shelter': 'Action: Move towards the designated shelter location. Returns True once shelter is reached.', 'is_enemy_detected': 'Condition: Check if any enemies are detected within the robot's range. Returns True if an enemy is detected, False otherwise.', 'is_in_shelter': 'Condition: Check if robot has arrived at the designated shelter location. Returns True if in shelter, False otherwise.', 'is_in_danger': 'Condition: 
###
4.// INSTRUCTIONS: Use only the following behaviors {'move_to_area_a': 'Action: Move the robot to area A. Returns True if the robot successfully reaches area A, False otherwise.', 'search_area_for_target': 'Action: Search the current area for the designated target. Returns True if the target is found, False otherwise.', 'stop_searching': 'Action: Stop searching and return to home base. Always returns True.', 'is_target_found': 'Condition: Check if the designated target is found in the current area. Returns True if the target is found, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Move to area A and search for specific target, if not found return to home base.
4.// OUTPUT:
<BehaviorTree><Sequence><Action>move_to_area_a</Action><Selector><Sequence><Condition>is_target_found</Condition><Action>carry_out_mission</Action></Sequence><Sequence><Action>search_area_for_target</Action><Action>stop_searching</Action></Sequence></Selector></Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'move_towards_light': 'Action: Move towards the light source. Returns True if the robot successfully moves towards the light, False otherwise.', 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_yellow': 'Action: Change the robot's color to yellow. Returns True if the color is successfully changed to yellow, False otherwise.', 'is_light_detected': 'Condition: Check if the light source is detected. Returns True if the light source is detected, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_target_reached': 'Condition: Check if the light source is reached. Returns True if the robot reaches the light source, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Navigate towards the light source while avoiding obstacles, and change color to yellow when reached.
5.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_target_reached</Condition><Action>change_color_to_yellow</Action></Sequence><Selector><Sequence><Condition>is_light_detected</Condition><Action>move_towards_light</Action></Sequence><Sequence><Condition>is_obstacle_detected</Condition><Action>avoid_obstacle</Action></Sequence></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'move_to_base': 'Action: Move the robot back to base. Returns True if the robot successfully reaches the base, False otherwise.', 'collect_resource': 'Action: Collect a resource and bring it back to base. Returns True if the resource is successfully collected and brought back to base, False otherwise.', 'is_resource_detected': 'Condition: Check if a resource is detected in the current area. Returns True if a resource is detected, False otherwise.', 'is_base_reached': 'Condition: Check if the robot has reached the base. Returns True if the robot reaches the base, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Collect a resource and bring it back to base, avoiding any obstacles.
6.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_resource_detected</Condition><Selector><Sequence><Action>collect_resource</Action><Condition>is_base_reached</Condition></Sequence><Sequence><Condition>is_obstacle_detected</Condition><Action>avoid_obstacle</Action></Sequence></Selector></Sequence><Action>move_to_base</Action></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'start_cleaning_task': 'Action: Start cleaning the designated area. Returns True if the cleaning task is successfully initiated, False otherwise.', 'continue_cleaning_task': 'Action: Continue cleaning the designated area. Returns True if the cleaning task is successfully continued, False otherwise.', 'stop_cleaning_task': 'Action: Stop cleaning and return to home base. After completion always returns True.', 'is_area_cleaned': 'Condition: Check if the designated area has been fully cleaned. Returns True if the area is clean, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_fuel_running_low': 'Condition: Check if the robot's fuel is running low. Returns True if fuel is below 10%, False otherwise.', 'is_battery_running_low': 'Condition: Check if the robot's battery is running low. Returns True if battery is below 10%, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: Start cleaning the designated area, avoid obstacles and return to base when fuel or battery is low.
7.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_area_cleaned</Condition><Action>stop_cleaning_task</Action></Sequence><Sequence><Condition>is_battery_running_low</Condition><Action>stop_cleaning_task</Action></Sequence><Sequence><Condition>is_fuel_running_low</Condition><Action>stop_cleaning_task</Action></Sequence><Sequence><Condition>is_obstacle_detected</Condition><Action>continue_cleaning_task</Action></Sequence></Selector><Action>start_cleaning_task</Action></BehaviorTree>3.// INSTRUCTIONS: Use only the following behaviors {'search_for_water': "Action: Search for water sources within the area. Always returns True.", 'pick_up_water': 'Action: Pick up water from the nearest available source. Always returns True.', 'dispense_water': 'Action: Dispense water to target location. Always returns True.', 'follow_path': 'Action: Follow the specified path to reach a target location. Always returns True.', 'is_water_available': 'Condition: Check if water source is available. Returns True if water is present, False otherwise.', 'is_full_tank': 'Condition: Check if tank is full. Returns True if tank is full, False otherwise.', 'is_target_reached': 'Condition: Check if target location has been reached. Returns True if target is reached, False otherwise.', 'has_water': 'Condition: Check if robot has water in its tank. Returns True if tank is not empty, False if tank is empty.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3.// USER COMMAND: generate behavior tree to fill the tank with water and then dispense it at the target location.
3.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_full_tank</Condition><Sequence><Condition>is_water_available</Condition><Selector><Action>follow_path</Action><Action>search_for_water</Action></Selector></Sequence><Action>pick_up_water</Action></Sequence><Sequence><Condition>has_water</Condition><Selector><Action>follow_path</Action><Action>dispense_water</Action></Selector></Sequence></BehaviorTree>

###
4.// INSTRUCTIONS: Use only the following behaviors {'move_forward': 'Action: Move the robot one step forward in the current direction. Always returns True.', 'turn_left': 'Action: Turn the robot 90 degrees to the left. Always returns True.', 'turn_right': 'Action: Turn the robot 90 degrees to the right. Always returns True.', 'search_for_food': "Action: Search for food sources within the area. Always returns True.", 'eat_food': 'Action: Consume the food found at the current location. Always returns True.', 'is_path_blocked': 'Condition: Check if the path in the current direction is blocked or impassable. Returns True if the path is blocked, False otherwise.', 'is_food_available': 'Condition: Check if food source is available. Returns True if food is present, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree for a robot to navigate an obstacle course and find and eat food along the way
4.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_food_available</Condition><Sequence><Condition>is_path_blocked</Condition><Selector><Action>turn_left</Action><Action>turn_right</Action></Selector></Sequence><Action>move_forward</Action><Action>eat_food</Action></Sequence><Sequence><Condition>is_food_available</Condition><Sequence><Condition>is_path_blocked</Condition><Selector><Action>turn_left</Action><Action>turn_right</Action></Selector></Sequence><Action>move_forward</Action><Action>eat_food</Action></Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'drop_bomb': 'Action: Drop a bomb at the current location. Always returns True.', 'is_enemy_nearby': 'Condition: Check if there are enemies within a 10 unit radius. Returns True if enemies are present, False otherwise.', 'evade_enemy': 'Action: Evade nearby enemies by moving to a safe distance. Always returns True.', 'detect_enemy': 'Action: Use sensors to detect nearby enemies. Always returns True.', 'is_safe_location': 'Condition: Check if the current location is safe from enemies. Returns True if the location is safe, False otherwise.', 'detect_friend': 'Action: Use sensors to detect nearby friends. Always returns True.', 'is_friend_nearby': 'Condition: Check if there are friends within a 15 unit radius. Returns True if friends are present, False otherwise.', 'call_for_help': 'Action: Send a distress signal to nearby friends. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree for a swarm of robots to strategically maneuver and neutralize nearby enemies
5.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_enemy_nearby</Condition><Selector><Selector><Condition>is_safe_location</Condition><Action>drop_bomb</Action></Selector><Action>evade_enemy</Action></Selector></Sequence><Sequence><Condition>is_friend_nearby</Condition><Action>detect_friend</Action></Sequence><Sequence><Condition>is_enemy_nearby</Condition><Selector><Selector><Condition>is_safe_location</Condition><Action>drop_bomb</Action></Selector><Action>call_for_help</Action></Selector></Sequence></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'attack_enemy': 'Action: Attack an enemy in the vicinity. Always returns True.', 'is_enemy_visible': 'Condition: Check if there is an enemy in the line of sight. Returns True if an enemy is visible, False otherwise.', 'is_weapon_ready': 'Condition: Check if the robot's weapon is charged and ready to use. Returns True if weapon is ready, False otherwise.', 'reload_weapon': 'Action: Recharge the weapon for future attacks. Always returns True.', 'is_injured': 'Condition: Check if the robot is injured. Returns True if the robot's health is below 50%, False otherwise.', 'heal_injury': 'Action: Use medical supplies to heal injuries. Always returns True.', 'is_base_reached': 'Condition: Check if the robot has reached the base. Returns True if the base is reached, False otherwise.', 'return_to_base': 'Action: Navigate back to the base for rest and repairs. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree for a combat robot to engage in battle, retreat for repairs when injured, and return to base for rest
6.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_enemy_visible</Condition><Selector><Selector><Condition>is_weapon_ready</Condition><Action>attack_enemy</Action></Selector><Action>reload_weapon</Action></Selector></Sequence>, <Sequence><Condition>is_injured</Condition><Selector><Selector><Condition>is_base_reached</Condition><Action>heal_injury</Action></Selector><Action>return_to_base</Action></Selector></Sequence></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'gather_resources': 'Action: Search for and gather resources within the  
###
4.// INSTRUCTIONS: Use only the following behaviors {'collect_resource': 'Action: Collect nearby resources. Returns True if resources are found, False otherwise.', 'drop_off_resource': 'Action: Drop off collected resources. Always returns True.', 'is_resource_available': 'Condition: Check if resources are available nearby. Returns True if resources are within a specified radius, False otherwise.', 'is_space_available': 'Condition: Check if there is space available to drop off resources. Returns True if space is available, False otherwise.', 'navigate_to_resource': 'Action: Navigate to the nearest available resource. Returns True if successfully navigated, False otherwise.', 'navigate_to_drop_off': 'Action: Navigate to designated drop off point. Returns True if successfully navigated, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Design a behavior tree for a robot to collect resources and deliver them to a designated drop off point.
4.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_resource_available</Condition><Selector><Sequence><Action>navigate_to_resource</Action><Action>collect_resource</Action></Sequence><Sequence><Condition>is_space_available</Condition><Selector><Action>move_left</Action><Action>move_right</Action></Selector></Sequence></Selector></Sequence><Sequence><Action>navigate_to_drop_off</Action><Action>drop_off_resource</Action></Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'identify_target': 'Action: Scan the surrounding area and identify target to pursue. Returns True if target is identified, False otherwise.', 'move_to_target': 'Action: Move closer to the identified target. Returns True if successfully moved, False otherwise.', 'attack_target': 'Action: Attack the target. Returns True if attack is successful, False otherwise.', 'is_target_in_range': 'Condition: Check if the target is within attack range. Returns True if the target is within range, False otherwise.', 'is_target_lost': 'Condition: Check if the target is no longer detected. Returns True if the target is lost, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Create a behavior tree for a robot to scan for a target, move closer to it, and attack it if within range.
5.// OUTPUT:
<BehaviorTree><Sequence><Action>identify_target</Action><Selector><Sequence><Condition>is_target_lost</Condition><Selector><Action>turn_left</Action><Action>turn_right</Action></Selector></Sequence><Sequence><Condition>is_target_in_range</Condition><Selector><Action>move_to_target</Action><Action>attack_target</Action></Selector></Sequence></Selector></Sequence></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'pick_up_item': 'Action: Pick up items in the vicinity. Returns True if item is picked up, False otherwise.', 'drop_item': 'Action: Drop any items currently being carried. Returns True if items are successfully dropped, False otherwise.', 'sort_items': 'Action: Sort the carried items based on their weight. Returns True if sorted, False otherwise.', 'is_target_reachable': 'Condition: Check if target is reachable without obstacles. Returns True if target is reachable, False otherwise.', 'is_holding_item': 'Condition: Check if robot is currently holding an item. Returns True if holding an item, False otherwise.', 'is_items_sorted': 'Condition: Check if carried items are sorted by weight. Returns True if items are sorted, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Generate behavior tree for a robot to pick up items, sort them, and deliver them to a specific target.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_items_sorted</Condition><Selector><Action>drop_item</Action><Selector><Condition>greater_than_target_weight</Condition><Action>move_left</Action><Action>move_right</Action></Selector></Selector></Sequence><Action>pick_up_item</Action><Sequence><Condition>is_holding_item</Condition><Sequence><Condition>is_target_reachable</Condition><Selector><Action>move_to_target</Action></Selector></Sequence></Sequence><Action>sort_items</Action></Selector></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'jump': 'Action: Make the robot jump. Returns True if successfully jumped, False otherwise.', 'crouch': 'Action: Crouch the robot. Returns True if successfully crouched, False otherwise.', 'run': 'Action: Run with full speed. Returns True if successfully ran, False otherwise.', 'front_flip': 'Action: Perform a front flip. Returns True if successfully flipped, False otherwise.', 'is_obstacle_ahead': 'Condition: Check if there is an obstacle ahead. Returns True if obstacle is detected, False otherwise.', 'is_area_safe': 'Condition: Check if the area is safe for the robot to move. Returns True if the area is safe, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: Build a behavior tree for a robot to perform a front flip if the area is safe and there is no obstacle ahead, otherwise simply run.
7.// OUTPUT:
<BehaviorTree><Selector><Condition>is_area_safe</Condition><Sequence><Condition>is_obstacle_ahead</Condition><Sequence><Action>jump</Action><Action>front_flip</Action></Sequence><Action>run</Action></Selector></BehaviorTree>###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Navigate to target while avoiding obstacles and perform random actions along the way.'Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>is_target_detected</Condition> <Selector> <Sequence> <Condition>is_target_reached</Condition> <Action>task_completed</Action> </Sequence> <Action>avoid_obstacle</Action> </Selector> </Sequence> <Action>wander</Action> </Selector> </BehaviorTree>
###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Inspect surroundings and change color to green if obstacles are present and white otherwise.'Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Selector> <Sequence> <Action>inspect_surroundings</Action> <Sequence> <Condition>is_obstacle_detected</Condition> <Action>change_color_to_green</Action> </Sequence> </Selector> <Action>change_color_to_white</Action> <Action>continue_movement_agent</Action> </Sequence> <Action>wander</Action> </Selector> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Navigate to target while avoiding obstacles and maintaining a distance of 10 units from other agents.'Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>is_target_detected</Condition> <Selector> <Sequence> <Condition>is_target_reached</Condition> <Action>task_completed</Action> </Sequence> <Action>avoid_obstacle</Action> </Selector> </Sequence> <Selector> <Condition>is_agent_in_nest</Condition> <Action>###
3.// INSTRUCTIONS: Use only the following behaviors{'land': 'Action: Land the drone at the designated location. Returns True if the drone has landed successfully, False otherwise.',
'ascend': 'Action: Makes the drone ascend until it reaches a designated height. Returns True once the desired height is reached, False if any obstacles are detected.',
'guide_to_target': 'Action: Fly the drone towards the target location using GPS coordinates. Returns True if the drone has reached the target within a specified radius, False otherwise.',
'is_destination_reachable': 'Condition:  Checks if the target destination is reachable based on current battery level and distance. Returns True if the destination is reachable, False otherwise.',
'is_battery_low': 'Condition: Checks if the drone's battery is below a specific threshold. Returns True if battery is low, False otherwise.'.}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3.// USER COMMAND: Fly the drone to a designated location, land, and recharge once battery is low.
3.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Action>guide_to_target</Action><Action>land</Action></Sequence><Sequence><Condition>is_battery_low</Condition><Action>ascend</Action></Sequence></Selector><Selector><Action>ascend</Action><Action>guide_to_target</Action></Selector></Sequence></BehaviorTree> 
###
4.// INSTRUCTIONS: Use only the following behaviors{'detect_intruder': 'Condition: Checks for any intruders in the area. Returns True if there are any intruders, False otherwise.',
'monitor_surroundings': 'Action: Monitor the surroundings for any suspicious activity. Always returns True.',
'investigate': 'Action: Investigate any suspicious activity. Returns True if no evidence of intrusion is found, False otherwise.',
'call_for_back_up': 'Action: Call for back up when faced with a threat. Returns True once back up has arrived, False if no back up is available.',
'run': 'Action: Run away from the danger. Always returns False.'.}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: If an intruder is detected, monitor surroundings and investigate. If still under threat, call for back up.
4.// OUTPUT:
<BehaviorTree><Selector><Condition>detect_intruder</Condition><Sequence><Action>monitor_surroundings</Action><Sequence><Condition>detect_intruder</Condition><Action>investigate</Action></Sequence></Selector><Sequence><Condition>detect_intruder</Condition><Action>call_for_back_up</Action></Sequence></Selector></BehaviorTree>
###
5.// INSTRUCTIONS: Use only the following behaviors{'navigate': 'Action: Navigate to a specified location using GPS coordinates. Returns True once the destination is reached, False otherwise.',
'obstacle_detected': 'Condition: Checks for any obstacles in the path. Returns True if an obstacle is detected, False otherwise.',
'recover_from_collision': 'Action: Recovers from a collision by backing up and adjusting direction. Returns True once the agent has recovered successfully, False if collision persists.',
'initialize_sensors': 'Action: Initializes all sensors used for navigation. Always returns True.',
'shut_down': 'Action: Shuts down the agent if needed. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5. // USER COMMAND: Navigate to a designated location, but if an obstacle is detected, recover from collision and continue moving to the destination.
5.// OUTPUT:
<BehaviorTree><Sequence><Action>initialize_sensors</Action><Selector><Sequence><Condition>obstacle_detected</Condition><Action>recover_from_collision</Action><Action>navigate</Action></Sequence><Sequence><Condition>obstacle_detected</Condition><Action>shut_down</Action></Sequence></Selector></Sequence></BehaviorTree> 
###
6.// INSTRUCTIONS: Use only the following behaviors{'detect_medicine': 'Condition: Checks for the presence of medicine. Returns True if medicine is detected, False otherwise.',
'collect_medicine': 'Subtree node: Represents a behavior tree for collecting medicine.',
'is_inventory_full': 'Condition: Checks if the agent's inventory is full. Returns True if inventory is full, False otherwise.',
'return_to_base': 'Action: Returns to base with collected medicine. Returns True once the agent is back at base, False if unable to return.',
'consolidate_inventory': 'Action: Consolidates the inventory by transferring collected goods to the base inventory. Returns True once the inventory is consolidated, False if unable to complete.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Search for medicine, collect and fill inventory, return to base, and consolidate inventory.
6.// OUTPUT:
<BehaviorTree><Sequence><Condition>detect_medicine</Condition><Action>collect_medicine</Action><Sequence><Condition>is_inventory_full</Condition><Action>return_to_base</Action><Action>consolidate_inventory</Action></Sequence></Sequence></BehaviorTree>
###
7.// INSTRUCTIONS: Use only the following behaviors{'detect_fire': 'Condition: Checks for the presence of fire. Returns True if fire is detected, False otherwise.',
'put_out_fire': 'Subtree node: Represents a behavior tree for putting out fire.',
'is_fire_out': 'Condition: Checks if the fire is completely put out. Returns True if fire is out, False otherwise.',
'report_to_base': 'Action: Reports the status of the fire to the base. Returns True once the report is sent, False if unable to report.',
'is_agent_near': 'Condition: Checks if the agent is near the site of the fire. Returns True if agent is near, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: If fire is detected, put out fire, report status to base, and return to base for further instructions. If the agent is near the site of the fire, prioritize putting out the fire.
7.// OUTPUT:
<BehaviorTree><Selector><Condition>detect_fire</Condition><Sequence><Action>put_out_fire</Action><Selector><Sequence><Condition>is_fire_out</Condition><Action>report_to_base</Action></Sequence><Sequence><Condition>is_agent_near</Condition><Action>put_out_fire</Action></Sequence></Selector></Sequence></Selector></BehaviorTree> 
###
4.// INSTRUCTIONS: Use only the following behaviors {'move_to_next_checkpoint': 'Action: Move the robot to the next designated checkpoint. Always returns True.', 'scan_for_targets': 'Action: Scan the current area for any targets using sensors. Always returns True.', 'is_target_detected': 'Condition: Check if a target has been detected in the current area. Returns True if a target is detected, False otherwise.', 'is_checkpoint_reached': 'Condition: Check if the robot has reached the designated checkpoint. Returns True if the checkpoint is reached, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Generate behavior tree for a robot to patrol and scan designated checkpoints
4.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>is_checkpoint_reached</Condition><Action>scan_for_targets</Action></Sequence><Action>move_to_next_checkpoint</Action></Selector></Sequence>
 
###
5.// INSTRUCTIONS: Use only the following behaviors {'move_to_next_checkpoint': 'Action: Move the robot to the next designated checkpoint. Always returns True.', 'scan_for_targets': 'Action: Scan the current area for any targets using sensors. Always returns True.', 'grapple_target': 'Action: Use a grappling hook mechanism to capture and retrieve target. Always returns True.', 'is_checkpoint_reached': 'Condition: Check if the robot has reached the designated checkpoint. Returns True if the checkpoint is reached, False otherwise.', 'is_target_in_range': 'Condition: Check if the target is within range for grappling. Returns True if the target is within range, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Generate behavior tree for a robot to patrol and retrieve targets using a grappling hook mechanism.
5.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>is_checkpoint_reached</Condition><Action>scan_for_targets</Action><Selector><Sequence><Condition>is_target_in_range</Condition><Action>grapple_target</Action></Sequence></Selector></Sequence><Action>move_to_next_checkpoint</Action></Selector></Sequence></BehaviorTree>
 
###
6.// INSTRUCTIONS: Use only the following behaviors {'move_to_next_location': 'Action: Move the robot to the next designated location. Always returns True.', 'scan_for_seeds': 'Action: Scan the current area for any seeds using sensors. Always returns True.', 'collect_seed': 'Action: Use a suction mechanism to collect and store seed in container. Always returns True.', 'drop_off_seeds': 'Action: Drop off collected seeds at designated location. Always returns True.', 'is_seed_detected': 'Condition: Check if a seed has been detected in the current area. Returns True if a seed is detected, False otherwise.', 'is_location_reached': 'Condition: Check if the robot has reached the designated location. Returns True if the location is reached, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Generate behavior tree for a robot to navigate and collect seeds from multiple locations and drop them off at a central location.
6.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>is_location_reached</Condition><Action>scan_for_seeds</Action><Selector><Sequence><Condition>is_seed_detected</Condition><Action>collect_seed</Action></Sequence></Selector></Sequence><Action>move_to_next_location</Action></Selector><Action>drop_off_seeds</Action></Sequence> 
 
###
7.// INSTRUCTIONS: Use only the following behaviors {'move_to_next_location': 'Action: Move the robot to the next designated location. Always returns True.', 'scan_for_targets': 'Action: Scan the current area for any targets using sensors. Always returns True.', 'use_tool': 'Action: Use a designated tool to perform a specific task. Always returns True.', 'is_location_reached': 'Condition: Check if the robot has reached the designated location. Returns True if the location is reached, False otherwise.', 'is_target_detected': 'Condition: Check if a target has been detected in the current area. Returns True if a target is detected, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: Generate behavior tree for a robot to navigate to a specific location and use a designated tool to perform a task based on detected targets.
7.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>is_location_reached</Condition><Action>scan_for_targets</Action><Selector><Sequence><Condition>is_target_detected</Condition><Action>use_tool</Action></Sequence></Selector></Sequence><Action>move_to_next_location</Action></Selector></BehaviorTree>###
3.// INSTRUCTIONS: Use only the following behaviors {'move_left': 'Action: Move agent left. Always returns True.','move_right': 'Action: Move agent right. Always returns True.', 'is_close_to_wall': 'Condition: Checks if agent is close to a wall. Returns True if agent is close to a wall, False otherwise.', 'is_high_enemy_presence': 'Condition: Checks if there are a high number of enemies nearby. Returns True if there are a high number of enemies nearby, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3.// USER COMMAND: Navigate through a maze while avoiding walls and areas with a high concentration of enemies.
3.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_close_to_wall</Condition><Sequence><Action>move_right</Action><Action>move_left</Action></Sequence></Sequence><Action>move_right</Action></Selector></BehaviorTree>
###
4.// INSTRUCTIONS: Use only the following behaviors {'pick_up_item': 'Action: Pick up an item. Always returns True.', 'is_item_in_range': 'Condition: Checks if item is within picking up range. Returns True if item is within range, False otherwise.', 'is_inventory_full': 'Condition: Checks if inventory is full. Returns True if inventory is full, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Pick up items until inventory is full, then return to a designated location.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_inventory_full</Condition><Action>return_to_designated_location</Action></Sequence><Sequence><Condition>is_item_in_range</Condition><Action>pick_up_item</Action></Sequence></Selector></BehaviorTree>
###
5.// INSTRUCTIONS: Use only the following behaviors {'move_one_step_forward': 'Action: Move one step forward in designated direction. Always returns True.', 'is_at_beacon': 'Condition: Checks if agent is at designated beacon location. Returns True if agent is at beacon, False otherwise.', 'is_different_color': 'Condition: Checks if agent's color is different than designated color. Returns True if agent's color is different, False otherwise.', 'change_color': 'Action: Change agent's color to designated color. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Follow a designated path by changing color at specific beacons.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_at_beacon</Condition><Action>change_color</Action></Sequence><Sequence><Condition>is_different_color</Condition><Action>move_one_step_forward</Action></Sequence></Selector></BehaviorTree>
###
6.// INSTRUCTIONS: Use only the following behaviors {'collect_resources': 'Subtree node: Represents a behavior tree for collecting resources.', 'attack_enemies': 'Action: Attack enemies. Always returns True.', 'check_resources': 'Condition: Checks if there are enough resources for building task. Returns True if enough resources are available, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Check if there are enough resources for building, if not, collect resources then check again. If there are enough resources, then attack enemies.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>check_resources</Condition><Action>attack_enemies</Action></Sequence><Sequence><Action>collect_resources</Action><Condition>check_resources</Condition><Action>attack_enemies</Action></Sequence></Selector></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'scout': 'Action: Move around and scan for potential targets. Always returns True.', 'attack': 'Action: Attack enemies. Always returns True.', 'is_target_detected': 'Condition: Checks if a target is detected. Returns True if a target is detected, False otherwise.', 'is_weapons_down': 'Condition: Checks if weapons are currently down. Returns True if weapons are down, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: Keep weapons down unless a target is detected. Once a target is detected, move towards it and attack.
7.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_target_detected</Condition><Action>attack</Action></Sequence><Sequence><Condition>is_weapons_down</Condition><Action>scout</Action></Sequence></Selector></BehaviorTree> 
###
3.// INSTRUCTIONS: Use only the following behaviors {'check_status': 'Action: Check the robot's current status. Always returns True.', 'move_towards_food': "Action: Move towards the nearest source of food. Always returns True.", 'move_randomly': "Action: Move randomlt. Always returns True.", 'search_for_food': "Action: Search for food using a specific pattern. Always returns True.", 'deposit_food': 'Action: Deposit food at the nest. Always returns True.', 'is_food_found': 'Condition: Check if food is detected within a certain distance. Returns True if food is detected, False otherwise.', 'is_food_deposited': 'Condition: Check if food is successfully deposited. Returns True if food is deposited, False otherwise.', 'is_robot_hungry': 'Condition: Check if robot is hungry. Returns True if robot has low energy, False otherwise.', 'is_nest_reached': 'Condition: Check if robot has reached the nest. Returns True if robot has reached the nest, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task).
3.// USER COMMAND: generate behavior tree to 'Find food, move towards food and deposit it at the nest if the robot is hungry, otherwise move randomly and periodically check the robot's status.' Output only the XML behavior tree without extra text.
3.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>is_robot_hungry</Condition> <Selector> <Sequence> <Condition>is_food_found</Condition> <Action>move_towards_food</Action> <Action>deposit_food</Action> <Action>task_completed</Action> </Sequence> <Action>search_for_food</Action> </Selector> </Sequence> <Sequence> <Condition>is_nest_reached</Condition> <Action>deposit_food</Action> <Action>task_completed</Action> </Sequence> </Selector> <Action>move_randomly</Action> <Action>check_status</Action> </Sequence> </BehaviorTree>

###
4.// INSTRUCTIONS: Use only the following behaviors {'move_to_headquarters': "Action: Move towards the designated headquarters. Always returns True.", 'stop_moving': "Action: Stop the robot's movement. Always returns True.", 'repair': "Action: Repair any damaged parts of the robot. Always returns True.", 'load_supplies': "Action: Load essential supplies into the robot. Always returns True.", 'unload_supplies': 'Action: Unload supplies at the designated location. Always returns True.', 'is_obstacle_detected': 'Condition: Check for obstacles in the robot's path. Returns True if an obstacle is detected, False otherwise.', 'are_supplies_loaded': 'Condition: Check if essential supplies are successfully loaded. Returns True if supplies are loaded, False otherwise.', 'are_supplies_unloaded': 'Condition: Check if essential supplies are successfully unloaded. Returns True if supplies are unloaded, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task).
4.// USER COMMAND: generate behavior tree to 'Repair any damaged parts, load essential supplies, and move to designated headquarters. If an obstacle is detected, stop movement and unload supplies.'Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>is_obstacle_detected</Condition> <Action>stop_moving</Action> <Action>unload_supplies</Action> <Action>task_completed</Action> </Sequence> <Sequence> <Condition>are_supplies_loaded</Condition> <Action>move_to_headquarters</Action> <Action>repair</Action> <Action>task_completed</Action> </Sequence> <Sequence> <Condition>are_supplies_unloaded</Condition> <Action>load_supplies</Action> <Action>task_completed</Action> </Sequence> </Selector> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'move_to_target': "Action: Move towards the designated target location. Always returns True.", 'stop_moving': "Action: Stop the robot's movement. Always returns True.", 'collect_data': "Action: Collect data from the environment. Always returns True.", 'analyze_data': "Action: Analyze collected data. Always returns True.", 'is_target_detected': 'Condition: Check if the target location is within a certain distance. Returns True if target is detected, False otherwise.', 'is_data_collected': 'Condition: Check if data has been successfully collected. Returns True if data is collected, False otherwise.', 'is_data_analyzed': 'Condition: Check if data has been successfully analyzed. Returns True if data is analyzed, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task).
5.// USER COMMAND: generate behavior tree to 'Collect data from the environment and move to the target location. If data is collected, analyze it and stop movement.'Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>is_data_collected</Condition> <Action>analyze_data</Action> <Action>stop_moving</Action> <Action>task_completed</Action> </Sequence> <Selector> <Condition>is_target_detected</Condition> <Action>move_to_target</Action> <Action>collect_data</Action> </Selector> </Sequence> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'wait': "Action: Pause the robot's movement for a specific amount of time. Always returns True.", 'move_randomly': "Action: Move randomly within the environment. Always returns True.", 'is_target_in_range': 'Condition: Check if the target is within a certain distance. Returns True if target is in range, False otherwise.', 'is_path_blocked': 'Condition: Check if path ahead is blocked. Returns True if an obstacle is detected ahead, False if path is clear.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task).
6.// USER COMMAND: generate behavior tree to 'Wait for the target to come in range, then move randomly and repeat until the path ahead is blocked. Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>is_path_blocked</Condition> <Action>move_randomly</Action> <Action>task_completed</Action> </Sequence> <Selector> <Condition>is_target_in_range</Condition> <Action>wait</Action> <Action>move_randomly</Action> </Selector> </Selector> </BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'head_to_designated_point': "Action: Move towards designated point. Always returns True
###
4.// INSTRUCTIONS: Use only the following behaviors {'pick_up_object': 'Action: Pick up an object using a gripper mechanism. Always returns True.', 'put_down_object': 'Action: Put down an object at a designated location. Always returns True.', 'rotate_left': 'Action: Rotate the robot 90 degrees to the left. Always returns True.', 'rotate_right': 'Action: Rotate the robot 90 degrees to the right. Always returns True.', 'move_forward': 'Action: Move the robot forward in a straight line. Always returns True.', 'move_backward': 'Action: Move the robot backwards in a straight line. Always returns True.','is_object_held': 'Condition: Check if an object is currently held by the robot. Returns True if an object is held, False otherwise.', 'is_object_at_location': 'Condition: Check if an object is at the designated location. Returns True if object is at location, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Generate behavior tree for a robot to pick up an object, rotate it, and put it down at a specific location.
4.// OUTPUT:
<BehaviorTree> <Sequence><Selector><Action>pick_up_object</Action> <Selector> <Sequence><Action>rotate_left</Action><Action>rotate_right</Action> </Sequence><Sequence><Action>move_forward</Action><Action>move_backward</Action><Selector><Condition>is_object_held</Condition><Action>put_down_object</Action></Selector></Sequence></Selector></Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'sense_object_distance': 'Action: Use sensors to sense the distance from an object. Always returns True.', 'sense_object_color': 'Action: Use sensors to sense the color of an object. Always returns True.', 'turn_left': 'Action: Turn the robot left. Always returns True.', 'turn_right': 'Action: Turn the robot right. Always returns True.', 'move_forward': 'Action: Move the robot forward in a straight line. Always returns True.', 'stop': 'Action: Stop all movement. Always returns True.','is_object_nearby': 'Condition: Check if an object is within a certain distance. Returns True if an object is detected, False otherwise.', 'is_object_red': 'Condition: Check if an object is red. Returns True if an object is red, False otherwise.', 'is_object_green': 'Condition: Check if an object is green. Returns True if an object is green, False otherwise.', 'is_object_blue': 'Condition: Check if an object is blue. Returns True if an object is blue, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Generate behavior tree for a robot to sense an object and determine its color, then move towards it and stop.
5.// OUTPUT:
<BehaviorTree><Sequence><Selector><Action>sense_object_distance</Action><Selector><Sequence><Condition>is_object_nearby</Condition><Action>sense_object_color</Action><Selector><Condition>is_object_red</Condition><Action>stop</Action></Selector></Sequence><Sequence><Condition>is_object_green</Condition><Action>move_forward</Action><Selector><Condition>is_object_blue</Condition><Action>stop</Action></Selector></Sequence></Selector></Sequence></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'detect_fallen_teammate': 'Action: Use sensors to detect if a teammate has fallen. Always returns True.', 'lift_teammate': 'Action: Use an arm mechanism to lift the fallen teammate. Always returns True.', 'carry_teammate': 'Action: Move the robot while carrying the teammate. Always returns True.', 'move_forward': 'Action: Move the robot forward in a straight line. Always returns True.', 'move_backward': 'Action: Move the robot backwards in a straight line. Always returns True.', 'is_teammate_on_board': 'Condition: Check if the teammate is safely on board. Returns True if teammate is on board, False otherwise.', 'is_team_reunited': 'Condition: Check if all team members are together. Returns True if all team members are accounted for, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Generate behavior tree for a robot to detect a fallen teammate, lift them and carry them to reunite with the rest of the team.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_teammate_on_board</Condition><Action>move_backward</Action></Sequence><Sequence><Selector><Condition>detect_fallen_teammate</Condition><Action>lift_teammate</Action><Selector><Condition>is_team_reunited</Condition><Action>move_forward</Action></Selector></Sequence><Action>carry_teammate</Action></Selector></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'sweep_floor': 'Action: Use a sweeper mechanism to sweep debris from the floor. Always returns True.', 'empty_bin': 'Action: Use a dumping mechanism to empty the bin. Always returns True.', 'move_to_next_section': 'Action: Move the robot to the next section for cleaning. Always returns True.', 'is_bin_full': 'Condition: Check if the bin is full. Returns True if the bin is full, False otherwise.', 'is_floor_clean': 'Condition: Check if the floor is completely cleaned. Returns True if the floor is clean, False otherwise.', 'is_next_section_reached': 'Condition: Check if the robot has reached the next section for cleaning. Returns True if the next section is reached, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: Generate behavior tree for a robot to sweep and clean the floor, emptying the bin when full and moving to the next section for cleaning.
7.// OUTPUT:
<BehaviorTree><Sequence><Selector><Condition>is_floor_clean</Condition><Action>empty_bin</Action></Selector><Sequence><Selector><Condition>is_bin_full</Condition><Action>move_to_next_section</Action></Selector><Sequence><Selector><Condition>is_next_section_reached</Condition><Action>sweep_floor</Action></Selector><Action>empty_bin</Action></Sequence></Sequence></Sequence></BehaviorTree>
###
4.// INSTRUCTIONS: Use only the following behaviors {'choose_random_direction': 'Action: Choose a random direction to move in. Always returns True.', 'move_forward': 'Action: Move the robot forward one unit. Always returns True.', 'move_backward': 'Action: Move the robot backward one unit. Always returns True.', 'move_left': 'Action: Move the robot left one unit. Always returns True.', 'move_right': 'Action: Move the robot right one unit. Always returns True.', 'is_at_obstacle': 'Condition: Check if the robot is facing an obstacle. Returns True if facing an obstacle, False otherwise.', 'is_at_target': 'Condition: Check if the robot is at the designated target location. Returns True if at the target location, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Navigate to a specific target coordinate, avoiding obstacles along the way'. Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree> <Sequence> <Condition>is_at_obstacle</Condition> <Action>choose_random_direction</Action> </Sequence> <Selector> <Sequence> <Action>move_forward</Action> <Sequence> <Condition>is_at_obstacle</Condition> <Action>choose_random_direction</Action> </Sequence> </Sequence> <Selector> <Condition>is_at_target</Condition> <Action>task_completed</Action> </Selector> </Selector> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'detect_candle': 'Condition: Check for the presence of a candle. Returns True if candle is detected, False otherwise.', 'move_towards_candle': 'Action: Move towards the detected candle. Always returns True.', 'check_flame': 'Condition: Check if the candle has been lit. Returns True if candle is lit, False otherwise.', 'light_candle': 'Action: Light the candle using a flame. Always returns True.', 'extinguish_candle': 'Action: Extinguish the candle using a designated extinguisher. Always returns True.', 'return_to_start': 'Action: Return to the starting point. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Light all the candles in a designated area, then return to the starting point'. Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>detect_candle</Condition> <Action>move_towards_candle</Action> </Sequence> <Selector> <Condition>detect_candle</Condition> <Action>check_flame</Action> </Selector> <Sequence> <Condition>detect_candle</Condition> <Selector> <Action>light_candle</Action> <Action>extinguish_candle</Action> </Selector> </Sequence> <Selector> <Condition>detect_candle</Condition> <Action>move_towards_candle</Action> </Selector> <Selector> <Condition>detect_candle</Condition> <Action>return_to_start</Action> </Selector> </Selector> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'start_timer': 'Action: Start a countdown timer for a specified amount of time. Always returns True.', 'wait_timer_complete': 'Condition: Wait for the timer to complete. Returns True when the timer is done, False otherwise.', 'display_message': 'Action: Display a message to the user. Always returns True.', 'detect_object': 'Condition: Check for the presence of a specific object. Returns True if object is detected, False otherwise.', 'pick_up_object': 'Action: Pick up the detected object. Always returns True.', 'drop_object': 'Action: Drop the object at a designated location. Always returns True.', 'is_at_designated_location': 'Condition: Check if the robot is at the designated drop-off location. Returns True if at the designated location, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Collect 5 objects and drop them off at a designated location while displaying a message to the user'.Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree> <Sequence> <Action>start_timer</Action> <Selector> <Condition>wait_timer_complete</Condition> <Action>display_message</Action> </Selector> </Sequence> <Sequence> <Condition>detect_object</Condition> <Action>pick_up_object</Action> </Sequence> <Selector> <Condition>detect_object</Condition> <Action>display_message</Action> </Selector> <Sequence> <Condition>detect_object</Condition> <Selector> <Action>pick_up_object</Action> <Action>check_flame</Action> </Selector> </Sequence> <Sequence> <Condition>detect_object</Condition> <Action>pick_up_object</Action> <Action>drop_object</Action> </Sequence> <Selector> <Condition>is_at_designated_location</Condition> <Action>display_message</Action> </Selector> </BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'detect_checkpoints': 'Action: Detect all designated checkpoints in the environment. Always returns True.', 'navigate_to_checkpoint': 'Action: Move towards the designated checkpoint. Always returns True.', 'pass_through_checkpoint': 'Action: Pass through the designated checkpoint. Always returns True.', 'is_all_checkpoints_passed': 'Condition: Check if all designated checkpoints have been passed. Returns True if all checkpoints are passed, False otherwise.', 'is_at_start': 'Condition: Check if the robot is at the starting point. Returns True if at the start, False otherwise.'}, to construct behavior tree in XML format to the following command.If the available behaviors do not fit with the user command say (Sorry, I can't do the task).
7.// USER COMMAND: generate behavior tree to 'Complete a designated course by passing through all checkpoints and returning to the starting point'. Output only the XML behavior tree without extra text.
7.// OUTPUT:
<BehaviorTree> <Selector> <Action>detect_checkpoints</Action> <Selector> <Action>navigate_to_checkpoint</Action> <Sequence> <Condition>pass_through_checkpoint</Condition> <Action>detect_checkpoints</Action> </Sequence> <Selector> <Action>pass_through_checkpoint</Action> <Action>is_at_start</Action> <Selector> <Condition>is_all_checkpoints_passed</Condition> <Action>task_completed</Action> </Selector> </Selector> </Selector> </BehaviorTree> 
###
4.// INSTRUCTIONS: Use only the following behaviors {'move_away_from_agent': 'Action: Move away from the nearest agent. Always returns True.', 'listen_for_sounds': 'Action: Listen for sounds and detect their origin. Always returns True.', 'scan_environment': 'Action: Use sensors to scan the environment for any anomalies. Always returns True.', 'detect_obstacles': 'Action: Detect any obstacles in the path ahead. Always returns True.', 'detect_targets': 'Action: Detect the nearest target and its distance. Always returns True.', 'change_color_to_red': "Action: Change agent's color to red. Always returns True.", 'is_agent_detected': 'Condition: Check if another agent is detected. Returns True if another agent is detected, False otherwise.', 'is_sound_detected': 'Condition: Check if a sound is detected. Returns True if a sound is detected, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Move away from other agents and scan the environment for any obstacles or suspicious activity.
4.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>is_agent_detected</Condition> <Action>move_away_from_agent</Action> </Sequence> <Action>scan_environment</Action> </Selector> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'hover_above_location': "Action: Hover above a specific location. Always returns True.", 'scan_environment': 'Action: Use sensors to scan the environment for any anomalies. Always returns True.', 'chase_target': 'Subtree node: Represents a behavior tree for chasing a target.', 'attack_target': 'Action: Attack the target if within range. Always returns True.', 'change_color_to_blue': "Action: Change agent's color to blue. Always returns True.", 'is_enemy_detected': 'Action: Check if an enemy is detected within 30 units. Returns True if an enemy is detected, False otherwise.', 'is_obstacle_detected': 'Action: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_target_in_range': 'Action: Check if the target is within attack range. Returns True if the target is within range, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Hover above a specific location, scan for any anomalies, and attack any enemies within range.
5.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Action>hover_above_location</Action> <Action>scan_environment</Action> <Selector> <Sequence> <Condition>is_enemy_detected</Condition> <Action>attack_target</Action> <Action>change_color_to_blue</Action> </Sequence> </Selector> </Sequence> </Selector> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'move_towards_target': 'Action: Move towards the nearest target. Always returns True.', 'scan_environment': 'Action: Use sensors to scan the environment for any anomalies. Always returns True.', 'follow_agent': 'Action: Follow the nearest agent within 10 units of distance. Always returns True.', 'change_color_to_purple': "Action: Change agent's color to purple. Always returns True.", 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_agent_detected': 'Action: Check if another agent is detected. Returns True if another agent is detected, False otherwise.', 'is_obstacle_detected': 'Action: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_agent_within_range': 'Action: Check if another agent is within 10 units of distance. Returns True if another agent is within range, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Move towards the nearest target while scanning for enemies and following other agents within range.
6.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Action>move_towards_target</Action> <Action>scan_environment</Action> <Sequence> <Condition>is_agent_detected</Condition> <Action>follow_agent</Action> <Action>change_color_to_purple</Action> </Sequence> </Selector> </BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'explore_environment': "Action: Explore the environment by moving in a random direction. Always returns True.", 'check_battery_level': 'Action: Continuously checks the battery level. Always returns True.', 'return_to_base': 'Action: Return to the base when battery is low. Always returns True.', 'change_color_to_yellow': "Action: Change agent's color to yellow. Always returns True.", 'is_battery_low': 'Condition: Check if the battery level is below 20%. Returns True if battery is low, False otherwise.', 'is_in_base': 'Condition: Check if the agent is in the base. Returns True if the agent is in the base, False otherwise.', 'is_at_target': 'Condition: Check if the agent has reached its target location. Returns True if the agent is at its target, False otherwise.', 'is_out_of_battery': 'Condition: Check if the battery level is at 0%. Returns True if battery is empty, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: Explore the environment while monitoring battery level. If low, return to base and change color to yellow.
7.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Action>explore_environment</Action> <Action>check_battery_level</Action> <Selector> <Sequence> <Condition>is_battery_low</Condition> <Action>return_to_base</Action> <Action>change_color_to_yellow</Action> </Sequence> </Selector> </Sequence> </Selector> </BehaviorTree> 
###
3.// INSTRUCTIONS: Use only the following behaviors {'scout_security_cams': 'Action: Moves the robot to scout for security cameras and updates knowledge base accordingly. Returns True.', 'detour_path': 'Action: Executes a detour path to avoid obstacles or enemy presence. Always returns True.', 'enemy_detected': 'Event: Triggers when enemies are detected by any sensor. Returns True if enemies are detected, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3.// USER COMMAND: Scout the area for security cameras. If enemies are detected, execute a detour path to avoid them.
3.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>scout_security_cams</Action><Trigger>enemy_detected</Trigger><Action>detour_path</Action></Sequence></Selector></BehaviorTree>

###
4.// INSTRUCTIONS: Use only the following behaviors {'retrieve_object': 'Subtree node: Represents a behavior tree for retrieving an object.', 'open_door': 'Action: Makes the agent open a door if it is in front of them. If the door is locked, returns False and reports the issue. Otherwise, returns True and updates knowledge base.', 'has_key': 'Condition: Checks if the agent has a key in their inventory. Returns True if key is present, False otherwise.', 'found_key': 'Event: Triggers when the agent finds a key. Updates knowledge base and returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Retrieve the object and use it to open the door. If there is a locked door and the agent has a key, use the key to open it.
4.// OUTPUT:
<BehaviorTree><Sequence><Action>retrieve_object</Action><Action>open_door</Action><Condition>has_key</Condition><Trigger>found_key</Trigger><Action>open_door</Action></Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'pick_up_item': 'Subtree node: Represents a behavior tree for picking up an item and storing it in inventory.', 'drop_item': 'Action: Makes the agent drop the stored item in front of them. If there is no item in inventory, returns False and reports the issue. Otherwise, returns True and updates knowledge base.', 'item_detected': 'Event: Triggers when an item is detected nearby. Stores the item in inventory and returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Pick up any nearby items and drop them in front of the agent. If there are no items nearby, report the inability to complete the task.
5.// OUTPUT:
<BehaviorTree><Sequence><Action>pick_up_item</Action><Trigger>item_detected</Trigger><Action>drop_item</Action></Sequence></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'communicate_with_robot': 'Action: Instructs the agent to communicate with another robot within range. Returns True if communication is successful, False otherwise.', 'follow_path': 'Subtree node: Dynamic behavior tree that continuously instructs the agent to move along a predetermined path.', 'check_battery_level': 'Condition: Checks the battery level and returns True if it falls below a specific threshold, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Follow a predetermined path while monitoring battery level. If the battery falls below a certain threshold, communicate with another robot for assistance.
6.// OUTPUT:
<BehaviorTree><Sequence><Action>follow_path</Action><Condition>check_battery_level</Condition><Action>communicate_with_robot</Action></Sequence></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'gather_resources': 'Subtree node: Represents a behavior tree for gathering resources such as energy or materials.', 'refuel_vehicle': 'Action: Makes the agent use a fuel source to refuel a vehicle. Returns True on success, False otherwise.', 'has_materials': 'Condition: Checks if the agent has enough materials in their inventory. Returns True if enough materials are present, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: Gather resources and use them to refuel the vehicle. If the agent does not have enough materials, report the inability to complete the task.
7.// OUTPUT:
<BehaviorTree><Sequence><Action>gather_resources</Action><Condition>has_materials</Condition><Action>refuel_vehicle</Action></Sequence></BehaviorTree>
###
3.// INSTRUCTIONS: Use only the following behaviors {'find_target_location': 'Action: Search for a specific location. Returns True if the location is found and False otherwise.', 'navigate_to_target': 'Action: Move robot towards the target location. Returns True if robot reaches the location and False otherwise.', 'collect_sample': 'Action: Collect a sample from the target location. Always returns True.', 'send_data': 'Action: Send collected data to a base station. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3.// USER COMMAND: Conduct a geological survey by finding a target location, navigating towards it, collecting a sample, and sending the data to a base station.
3.// OUTPUT:
<BehaviorTree><Sequence><Action>find_target_location</Action><Action>navigate_to_target</Action><Action>collect_sample</Action><Action>send_data</Action></Sequence></BehaviorTree>

###
4.// INSTRUCTIONS: Use only the following behaviors {'wait_for_signal': 'Condition: Check if a specific signal has been received. Returns True if the signal is received, False otherwise.', 'perform_task_1': 'Action: Perform task 1. Always returns True.', 'perform_task_2': 'Action: Perform task 2. Always returns True.', 'perform_task_3': 'Action: Perform task 3. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Wait for a signal before performing different tasks sequentially - task 1, task 2, task 3, and repeat.
4.// OUTPUT:
<BehaviorTree><Sequence><Condition>wait_for_signal</Condition><Selector><Action>perform_task_1</Action><Action>perform_task_2</Action><Action>perform_task_3</Action><Action>repeat_sequence</Action></Selector></Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'scan_for_danger': 'Action: Scan the surrounding area for potential dangers. Always returns True.', 'evade': 'Action: Move away from any detected danger. Always returns True.', 'wait_for_safe_location': 'Condition: Check if robot has reached a safe location. Returns True if the location is safe, False otherwise.', 'emergency_shutoff': 'Action: Activate emergency shut off in case of imminent danger. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Implement a safety protocol for the robot by continuously scanning for danger and taking appropriate actions to evade or shut down.
5.// OUTPUT:
<BehaviorTree><Sequence><Action>scan_for_danger</Action><Selector><Sequence><Action>evade</Action><Condition>wait_for_safe_location</Condition></Sequence><Action>emergency_shutoff</Action></Selector></Sequence></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'search_for_water_source': 'Action: Search for a water source. Returns True if a source is found, False otherwise.', 'store_water': 'Action: Store collected water in a designated container. Always returns True.', 'check_water_level': 'Condition: Check if the water container is full. Returns True if full, False otherwise.', 'purify_water': 'Action: Use purification system to purify stored water. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Find and purify water for a desert exploration mission, ensuring that the water container is always kept full.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>search_for_water_source</Action><Action>store_water</Action><Condition>check_water_level</Condition><Action>purify_water</Action></Sequence><Action>repeat_sequence</Action></Selector></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'find_storage_bin': 'Action: Search for a designated storage bin. Returns True if the bin is found and False otherwise.', 'store_items': 'Action: Store collected items in the storage bin. Always returns True.', 'wait_for_capacity': 'Condition: Check if the storage bin has reached its capacity. Returns True if full, False otherwise.', 'return_to_base': 'Action: Return to base once storage bin is full. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: Gather and store resources in a designated storage bin, returning to base when the bin is full.
7.// OUTPUT:
<BehaviorTree><Sequence><Action>find_storage_bin</Action><Selector><Sequence><Action>store_items</Action><Condition>wait_for_capacity</Condition></Sequence><Action>return_to_base</Action></Selector></Sequence></BehaviorTree>###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Returns True if the robot is still within the specified path, False otherwise.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_nearby': 'Condition: Check if another agent is within 10 units of distance. Returns True if another agent is nearby, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Avoid obstacles while searching for other agents, then try to form a line with them.'
Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_obstacle_detected</Condition><Action>avoid_obstacle</Action></Sequence><Selector><Condition>is_agent_nearby</Condition><Action>change_color_to_green</Action></Selector></Selector><Action>wander</Action></BehaviorTree>
 
###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Returns True if the agent is within the specified area, False otherwise.', 'avoid_obstacle': 'Action: Avoid detected obstacles. Returns True if the obstacle is successfully avoided, False otherwise.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_circle': 'Action: Form a circular shape with other agents. Returns True if a circle is formed, False otherwise.', 'is_agent_nearby': 'Condition: Check if another agent is within 10 units of distance. Returns True if another agent is nearby, False otherwise.', 'within_area': 'Condition: Check if the agent is within a specified area. Returns True if the agent is in the area, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Coordinate with other agents to form a circle in a specific area, then reach the target and signal task completion.'
Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>is_agent_nearby</Condition> <Action>form_circle</Action> </Sequence> <Action>continue_movement_agent</Action> </Selector> <Sequence> <Condition>within_area</Condition> <Action>change_color_to_green</Action> </Sequence> <Selector> <Condition>is_target_reached</Condition> <Action>change_color_to_white</Action> <Action>freeze_movement_agent</Action> </Selector> <Action>wander</Action> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'detect_obstacle': 'Action: Use sensors to detect nearby obstacles. Always returns True.', 'move_towards_target': 'Action: Move towards the specified target.', 'move_away_from_obstacles': 'Action: Move away from detected obstacles.', 'move_in_circle': 'Action: Move in a circular pattern around the target.', 'is_target_detected': 'Condition: Check if the target is within the agent's range. Returns True if the target is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Move towards the target while avoiding obstacles and constantly detecting for new obstacles.'
Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Selector><Condition>is_path_clear</Condition><Action>detect_obstacle</Action></Selector><Sequence><Condition>is_obstacle_detected</Condition><Action>avoid_obstacle</Action></Sequence></Sequence><Sequence><Condition>is_target_detected</Condition><Action>move_towards_target</Action><Action>move_away_from_obstacles</Action></Sequence><Action>wander</Action></Selector></BehaviorTree>
 
###
7.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Returns True if the obstacle is successfully avoided, False otherwise.', 'follow_path': 'Action: Follow a predefined path to reach the target.', 'turn_left': 'Action: Turn the robot 90 degrees to the left and continue following the path.', 'turn_right': 'Action: Turn the
###
4.// INSTRUCTIONS: Use only the following behaviors {'fill_water_tank': 'Action: Fill the robot's water tank. Always returns True.', 'water_plants': 'Action: Water nearby plants. Always returns True.', 'check_soil_moisture': 'Condition: Check the soil moisture level. Returns True if moisture level is low, False otherwise.', 'check_water_tank': 'Condition: Check if the water tank is below 50% full. Returns True if water level is low, False otherwise.', 'is_plant_in_range': 'Condition: Check if there are plants within a 5-meter radius. Returns True if there are plants nearby, False otherwise.', 'navigate_to_plants': 'Action: Move towards the nearest plants. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Water plants in a garden by filling the water tank and navigating to plants.
4.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>check_soil_moisture</Condition><Action>water_plants</Action></Sequence><Condition>is_plant_in_range</Condition><Selector><Action>fill_water_tank</Action><Sequence><Selector><Condition>check_water_tank</Condition><Action>navigate_to_plants</Action></Selector><Sequence><Action>water_plants</Action><Action>navigate_to_plants</Action></Sequence></Selector></Sequence></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'send_signal': 'Action: Send a signal to other robots within communication range. Returns True if the signal is successfully sent, False otherwise.', 'detect_movement': 'Condition: Check if any movement is detected within a 10-meter radius. Returns True if movement is detected, False otherwise.', 'scan_surroundings': 'Action: Scan the surroundings for any potential threats. Returns True if no threats are detected, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Coordinate with other robots to detect and avoid any potential threats.
5.// OUTPUT:
<BehaviorTree><Sequence><Condition>detect_movement</Condition><Action>send_signal</Action></Sequence><Selector><Action>scan_surroundings</Action><Sequence><Action>send_signal</Action><Action>avoid_threats</Action></Sequence></Selector><Condition>is_group_attacked</Condition><Selector><Action>send_alert_signal</Action><Action>evade_threats</Action></Selector><Action>task_completed</Action></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'collect_nectar': 'Action: Collect nectar from flowers. Always returns True.', 'return_to_hive': 'Action: Return to the hive with collected nectar. Returns True if nectar is successfully delivered, False otherwise.', 'lay_eggs': 'Action: Lay eggs in an organized pattern within the hive. Always returns True.', 'detect_flowers': 'Condition: Check for nearby flowers. Returns True if flowers are detected within a 10-meter radius, False otherwise.', 'is_nectar_full': 'Condition: Check if the nectar storage is full. Returns True if nectar storage is full, False otherwise.', 'is_eggs_full': 'Condition: Check if the egg storage is full. Returns True if egg storage is full, False otherwise.', 'enter_hive': 'Action: Enter the hive. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Optimize nectar collection and egg laying within the hive.
6.// OUTPUT:
<BehaviorTree><Selector><Condition>is_nectar_full</Condition><Condition>is_eggs_full</Condition><Sequence><Condition>detect_flowers</Condition><Action>collect_nectar</Action></Sequence><Selector><Action>enter_hive</Action><Sequence><Action>lay_eggs</Action><Condition>is_eggs_full</Condition></Sequence></Selector><Sequence><Action>return_to_hive</Action></Sequence></Selector></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'move_towards_light': 'Action: Move towards the nearest source of light. Always returns True.', 'light_detected': 'Condition: Check if light is detected within the robot's sensors. Returns True if light is detected, False otherwise.', 'detect_obstacle': 'Condition: Check for obstacles ahead. Returns True if an obstacle is detected, False otherwise.', 'is_robot_facing_light': 'Function: Measures the angle between the robot's direction and the source of light. Returns a score based on the angle.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: Follow the source of light while avoiding any obstacles.
7.// OUTPUT:
<BehaviorTree><Selector><Condition>detect_obstacle</Condition><Sequence><Condition>is_robot_facing_light</Condition><Action>move_towards_light</Action></Sequence><Sequence><Condition>light_detected</Condition><Selector><Condition>is_robot_facing_light</Condition><Action>move_towards_light</Action></Selector></Sequence><Condition>is_robot_facing_light</Condition><Selector><Action>avoid_obstacle</Action><Sequence><Condition>light_detected</Condition><Action>move_towards_light</Action></Sequence></Selector></Selector></BehaviorTree>
###
3.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'detect_intruders': 'Condition: Check for intruders or enemies in the vicinity. Returns True if an intruder is detected, False otherwise.', 'escape': 'Action: Move away from the location of the detected intruder. Always returns True.', 'is_at_target': 'Condition: Check if the agent has reached the designated target location. Returns True if the agent has reached its target, False otherwise.', 'move_towards_target': 'Action: Move towards the designated target location. Always returns True.', 'notify_team': "Action: Notify the rest of the team about the location of the detected intruder. Always returns True.", 'search_area': 'Action: Search the surrounding area for potential threats or intruders. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3.// USER COMMAND: generate behavior tree to 'Protect the designated area by detecting and escaping from any intruders while notifying the team.' Output only the XML behavior tree without extra text.
3.// OUTPUT:
<BehaviorTree><Sequence><Condition>detect_intruders</Condition><Action>escape</Action><Action>notify_team</Action></Sequence><Sequence><Condition>is_at_target</Condition><Action>move_towards_target</Action></Sequence><Action>search_area</Action></BehaviorTree>


###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_collision': 'Action: Avoid collisions with other robots in the swarm. Always returns True.', 'broadcast_location': 'Action: Broadcast the agent's current location to the rest of the swarm. Always returns True.', 'cluster': 'Action: Gather with nearby robots to form a cluster for collective decision-making. Always returns True.', 'is_cluster_formed': 'Condition: Check if a cluster has been formed with nearby robots. Returns True if a cluster is formed, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'move_to_target': 'Action: Move towards a designated target location. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Navigate through complex obstacles and stay together as a swarm while moving towards a target location.' Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_obstacle_detected</Condition><Action>avoid_collision</Action></Sequence><Sequence><Condition>is_path_clear</Condition><Action>move_to_target</Action></Sequence></Selector><Sequence><Condition>is_cluster_formed</Condition><Action>cluster</Action><Action>broadcast_location</Action></Sequence></BehaviorTree>


###
5.// INSTRUCTIONS: Use only the following behaviors {'execute_synchronized_moves': 'Action: Execute coordinated movements with other robots in the swarm. Always returns True.', 'form_circle': 'Action: Form a circular formation with nearby robots for increased coverage and coordination. Always returns True.', 'is_circle_formed': 'Condition: Check if a circular formation has been formed with nearby robots. Returns True if a circle is formed, False otherwise.', 'move_towards_point': 'Action: Move towards a designated point in the environment. Always returns True.', 'survey_environment': 'Action: Utilize sensors to survey the surrounding environment for potential threats or obstacles. Always returns True.', 'take_shelter': 'Action: Move towards a designated safe location for shelter. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Coordinate movements and form a circle while navigating towards a designated safe location with intermittent environment surveys.' Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_circle_formed</Condition><Action>execute_synchronized_moves</Action><Action>form_circle</Action></Sequence><Sequence><Condition>is_circle_formed</Condition><Action>survey_environment</Action><Action>take_shelter</Action></Sequence></Selector><Action>move_towards_point</Action></BehaviorTree>


###
6.// INSTRUCTIONS: Use only the following behaviors {'detect_light': 'Condition: Check for presence of light in the environment. Returns True if light is detected, False otherwise.', 'follow_light': 'Action: Move towards the source of light for navigation. Always returns True.', 'get_brighter': 'Action: Move towards the brighter side of the environment. Always returns True.', 'move_to_nest': 'Action: Move towards the designated nest location for shelter. Always returns True.', 'sense_danger': 'Action: Utilize sensors to sense any potential danger in the environment. Always returns True.', 'take_cover': 'Action: Move towards a designated safe location for cover. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Navigate towards a source of light while avoiding danger and seeking shelter in a designated nest.' Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>detect_light</Condition><Action>follow_light</Action><Sequence><Condition>sense_danger</Condition><Action>take_cover</Action></Sequence><Sequence><Condition>is_target_detected</Condition><Action>get_brighter</Action><Action>move_to_nest</Action></Sequence></Sequence></Selector></BehaviorTree>


###
7.// INSTRUCTIONS: Use only the following behaviors {'end_task': 'Action: Signal the end of the current task and allow the robot to rest. Always returns True.', 'forage': 'Action: Utilize sensors to forage for resources or food in the environment. Always returns True.', 'move_to_resource': 'Action: Move towards a designated resource location. Always returns True.', 'sense_threat': 'Action: Utilize sensors to sense any potential threats in the environment. Always returns True.', 'take_action': 'Action: Take action based on the sensor readings, such as avoiding danger or gathering resources. Always returns True.', 'unload_resources': 'Action: Unload any gathered resources at the designated location. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: generate behavior tree to 'For<BehaviorTree><Sequence><Action>wander</Action><Condition>is_target_detected</Condition><Action>continue_movement_agent</Action><Condition>is_target_reached</Condition><Action>change_color_to_green</Action><Condition>is_agent_in_nest</Condition><Action>task_completed</Action></Sequence></BehaviorTree>

###
4.// INSTRUCTIONS: Use only the following behaviors {'initialize_system': "Action: Initialize the system with required parameters and functions. Always returns True.", 'check_environment': 'Condition: Check the environment for any potential hazards. Returns True if hazards are present, False otherwise.', 'get_agent_distances': 'Function: Measure the distances between agents. Returns a list of distances between all agents.', 'get_target_distance': 'Function: Measure the distance between the agent and the target. Returns the distance between the agent and the target.', 'log_data': 'Action: Log relevant data for future analysis. Always returns True.', 'move_to_target': 'Action: Move towards the target. Always returns True.', 'search_for_target': 'Action: Randomly search for the target within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Create behavior tree to guide a group of agents to search for and reach a target location. The target should be within 10 units of distance and agents should not collide with each other.
4.// OUTPUT:
<BehaviorTree><Sequence><Action>initialize_system</Action><Condition>check_environment</Condition><Action>log_data</Action><Selector><Sequence><Action>move_to_target</Action><Condition>get_target_distance</Condition></Sequence><Sequence><Action>search_for_target</Action><Condition>get_agent_distances</Condition></Sequence></Selector></Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'explore_for_food': 'Action: Explore the environment for potential food sources. Always returns True.', 'follow_scent_trail': 'Action: Follow a scent trail towards a nearby food source. Always returns True.', 'get_hunger_level': 'Function: Measure the agent's hunger level. Returns a score representing their level of hunger.', 'eat': 'Action: Eat and consume any available food source. Always returns True.', 'is_food_in_sight': 'Condition: Check if there is food within the agent's sight range. Returns True if food is detected, False otherwise.', 'is_feeding_successful': 'Condition: Check if food was successfully consumed. Returns True if hunger level decreases, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Create behavior tree to guide an agent to search for and consume food, ensuring successful feeding.
5.// OUTPUT:
<BehaviorTree><Sequence><Action>explore_for_food</Action><Condition>is_food_in_sight</Condition><Action>follow_scent_trail</Action><Condition>is_feeding_successful</Condition><Action>eat</Action><Condition>get_hunger_level</Condition></Sequence></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'get_distance_to_objective': 'Function: Measure the distance between the agent and its objective. Returns the distance to the objective in meters.', 'is_objective_reached': 'Condition: Check if the agent has reached its objective. Returns True if the distance to the objective is less than 1 meter, False otherwise.', 'move_to_objective': 'Action: Move towards the objective at a constant speed. Always returns True.', 'search_for_objective': 'Action: Randomly search for the objective within the environment. Always returns True.', 'turn_towards_objective': 'Action: Turn towards the objective based on its relative position. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Create behavior tree to guide an agent towards a specific objective, ensuring that it is reached within 1 meter of distance.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_objective_reached</Condition><Action>turn_towards_objective</Action></Sequence><Sequence><Action>move_to_objective</Action><Condition>get_distance_to_objective</Condition></Sequence><Action>search_for_objective</Action></Selector></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'get_distance_to_obstacle': 'Function: Measure the distance between the agent and the nearest obstacle. Returns the distance to the nearest obstacle in meters.', 'is_obstacle_in_range': 'Condition: Check if there is an obstacle within the agent's range. Returns True if an obstacle is detected, False otherwise.', 'move_around_obstacle': 'Action: Move around the detected obstacle in a random direction. Always returns True.', 'search_for_obstacle': 'Action: Randomly search for obstacles within the environment. Always returns True.', 'stop_movement': 'Action: Stop the agent's movement completely. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: Create behavior tree for an agent to navigate through a cluttered environment, avoiding obstacles and reaching the target location.
7.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>search_for_obstacle</Action><Condition>is_obstacle_in_range</Condition><Action>move_around_obstacle</Action><Condition>get_distance_to_obstacle</Condition></Sequence><Sequence><Condition>is_obstacle_in_range</Condition><Action>stop_movement</Action></Sequence></Selector></BehaviorTree> 
###
4.// INSTRUCTIONS: Use only the following behaviors {'gather_resources': 'Action: Gather resources from the environment. Always returns True.', 'return_to_base': 'Action: Return to the base with gathered resources. Always returns True.', 'is_base_full': 'Condition: Check if the base is full of resources. Returns True if the base is full, False otherwise.', 'has_enough_resources': 'Condition: Check if the agent has enough resources to return to base. Returns True if there are enough resources, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Gather resources until the base is full, then return to base.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>gather_resources</Action><Condition>has_enough_resources</Condition><Action>return_to_base</Action></Sequence><Condition>is_base_full</Condition></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'move_to_next_target': 'Action: Move the robot to the next target location. Always returns True.', 'scan_for_targets': 'Action: Scan the current area for potential targets. Always returns True.', 'attack_target': 'Action: Attack the nearest enemy target. Always returns True.', 'is_target_found': 'Condition: Check if a target is detected in the current area. Returns True if a target is found, False otherwise.', 'is_enemies_near': 'Condition: Check for enemies nearby. Returns True if enemies are detected within a certain radius, False otherwise.', 'is_attack_ready': 'Condition: Check if the robot's weapons are reloaded and ready to attack. Returns True if weapons are ready, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Scout the area for enemy targets and attack if they are within range. Otherwise, continue scanning for targets.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>scan_for_targets</Action><Sequence><Condition>is_target_found</Condition><Condition>is_enemies_near</Condition><Condition>is_attack_ready</Condition><Action>attack_target</Action></Sequence></Sequence><Action>move_to_next_target</Action></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'pick_up_object': 'Action: Pick up the nearest object. Always returns True.', 'find_objective': 'Action: Find the objective location. Always returns True.', 'reach_objective': 'Action: Move towards the objective location. Always returns True.', 'is_objective_reached': 'Condition: Check if the objective location has been reached. Returns True if the location is reached, False otherwise.', 'is_objective_visible': 'Condition: Check if the objective is within the agent's line of sight. Returns True if the objective is visible, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Pick up an object and move towards the objective location. If the object is not visible, find the objective location first.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>pick_up_object</Action><Condition>is_objective_visible</Condition><Action>reach_objective</Action><Condition>is_objective_reached</Condition></Sequence><Action>find_objective</Action></Selector></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'explore_area': 'Action: Explore the designated search area. Always returns True.', 'return_to_start': 'Action: Return to the starting position. Always returns True.', 'is_area_explored': 'Condition: Check if the entire search area has been explored. Returns True if the area is fully explored, False otherwise.', 'is_obstacle_present': 'Condition: Check for obstacles in the area. Returns True if an obstacle is detected, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: Explore the designated search area while avoiding any obstacles. If the area is fully explored, return to the starting position.
7.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>explore_area</Action><Sequence><Condition>is_area_explored</Condition><Condition>is_obstacle_present</Condition><Action>return_to_start</Action></Sequence></Sequence></Selector></BehaviorTree>  
###
4.// INSTRUCTIONS: Use only the following behaviors {'move_forward': 'Action: Move one step forward. Always returns True.', 'turn_left': 'Action: Turn the robot to the left. Always returns True.', 'turn_right': 'Action: Turn the robot to the right. Always returns True.', 'jump': 'Action: Make the robot jump. Always returns True.', 'collect_item': 'Action: Pick up and collect the item. Always returns True.', 'drop_item': 'Action: Drop and put down the item. Always returns True.', 'is_item_in_sight': 'Condition: Check if an item is in the robot's field of view. Returns True if an item is detected, False otherwise.', 'is_item_collected': 'Condition: Check if the item is currently being carried by the robot. Returns True if the item is being carried, False otherwise.', 'is_obstacle_detected': 'Condition: Check if an obstacle is detected nearby. Returns True if an obstacle is detected, False otherwise.', 'is_goal_reached': 'Condition: Check if the goal location has been reached. Returns True if the goal is reached, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Create a behavior tree to navigate through a maze, avoid obstacles, collect items and reach the end goal.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>move_forward</Action></Sequence><Sequence><Condition>is_obstacle_detected</Condition><Selector><Action>turn_left</Action><Action>turn_right</Action></Selector></Sequence><Sequence><Condition>is_item_in_sight</Condition><Action>collect_item</Action></Sequence><Condition>is_goal_reached</Condition></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'change_direction_to_west': 'Action: Change the robot's direction to west. Always returns True.', 'change_direction_to_east': 'Action: Change the robot's direction to east. Always returns True.', 'continue_movement': 'Action: Continue moving in the current direction. Always returns True.', 'wait': 'Action: Wait for a specified amount of time. Always returns True.', 'is_color_green': 'Condition: Check if the robot's color is green. Returns True if the color is green, False otherwise.', 'is_color_red': 'Condition: Check if the robot's color is red. Returns True if the color is red, False otherwise.', 'is_color_blue': 'Condition: Check if the robot's color is blue. Returns True if the color is blue, False otherwise.', 'is_moving': 'Condition: Check if the robot is currently moving. Returns True if the robot is moving, False otherwise.', 'is_stopped': 'Condition: Check if the robot is currently stopped. Returns True if the robot is stopped, False otherwise.', 'is_wall_in_front': 'Condition: Check for a wall in front of the robot. Returns True if a wall is detected, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Generate a behavior tree to move east, wait for 5 seconds, then check if robot's color is green and continue moving if it is, otherwise wait for 10 seconds and then continue moving.
5.// OUTPUT:
<BehaviorTree><Sequence><Action>change_direction_to_east</Action><Action>wait</Action><Sequence><Condition>is_color_green</Condition><Action>continue_movement</Action></Sequence><Action>wait</Action><Action>continue_movement</Action></Sequence></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'search_for_food': 'Action: Search for food in the surrounding area. Always returns True.', 'eat_food': 'Action: Consume food. Always returns True.', 'is_hungry': 'Condition: Check if hunger level is below a certain threshold. Returns True if hunger level is below the threshold, False otherwise.', 'is_food_found': 'Condition: Check if food is detected in the surrounding area. Returns True if food is detected, False otherwise.', 'is_food_consumed': 'Condition: Check if food is currently being consumed. Returns True if food is being consumed, False otherwise.', 'is_full': 'Condition: Check if hunger level is at maximum. Returns True if hunger level is at maximum, False otherwise.', 'move_to_nest': 'Action: Move towards the designated nest location. Always returns True.', 'return_to_nest': 'Action: Return to the designated nest location. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Create a behavior tree for a swarm of foraging robots, which search for food and bring it back to the nest.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_hungry</Condition><Sequence><Action>search_for_food</Action><Sequence><Condition>is_food_found</Condition><Action>eat_food</Action></Sequence></Sequence></Sequence><Action>move_to_nest</Action><Condition>is_full</Condition><Action>return_to_nest</Action></Selector></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'move_forward': 'Action: Move one step forward. Always returns True.', 'jump': 'Action: Make the robot jump. Always returns True.', 'collect_item': 'Action: Pick up and collect the item. Always returns True.', 'drop_item': 'Action: Drop and put down the item. Always returns True.', 'is_item_in_sight': 'Condition: Check if an item is in the robot's field of view. Returns True if an item is detected, False otherwise.', 'is_item_collected': 'Condition: Check if the item is currently being carried by the robot. Returns True if the item is being carried, False otherwise.', 'is_obstacle_detected': 'Condition: Check if an obstacle is detected nearby. Returns True if an obstacle is detected, False otherwise.', 'is_goal_reached': 'Condition: Check if the goal location has been reached. Returns True if the goal is reached, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: Create a behavior tree to navigate through a maze, avoid obstacles, collect all items and reach the end goal.
7.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>move_forward</Action></Sequence><Sequence><Condition>is_obstacle_detected</Condition><Selector><Action>jump</Action></Selector></Sequence><Sequence><Condition>is_item_in_sight</Condition><Action>collect_item</Action></Sequence><Condition>is_item_collected</Condition><Action>drop_item</Action><Condition>is_goal_re
###
4.// INSTRUCTIONS: Use only the following behaviors {'search_food': 'Subtree node: Represents a behavior tree for finding food sources.', 'eat_food': 'Action: Makes the agent eat the found food source. Always returns True.', 'multiply': 'Action: Makes the agent multiply and create a new swarm. Always returns True.', 'is_hungry': 'Condition: Checks if the agent is hungry. Returns True if hungry, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Search for food sources. When found, eat the food and then multiply to create a new swarm.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_hungry</Condition><Subtree>search_food</Subtree><Action>eat_food</Action><Action>multiply</Action></Sequence><Action>search_food</Action></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'collect_resource': 'Subtree node: Represents a behavior tree for collecting resources.', 'build_structure': 'Subtree node: Represents a behavior tree for building structures.', 'is_resource_available': 'Condition: Checks if a resource is available in the environment. Returns True if available, False otherwise.', 'is_structure_needed': 'Condition: Checks if a structure needs to be built. Returns True if needed, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Collect resources and build structures as needed.
5.// OUTPUT:
<BehaviorTree><Selector><Condition>is_structure_needed</Condition><Subtree>build_structure</Subtree><Sequence><Condition>is_resource_available</Condition><Subtree>collect_resource</Subtree></Sequence></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'follow_leader': 'Subtree node: Represents a behavior tree for following the leader robot.', 'cluster_formation': 'Subtree node: Represents a behavior tree for forming a cluster around the leader robot.', 'communicate_with_leader': 'Action: Makes the agent communicate with the leader robot. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Follow the leader robot and form a cluster around it. Communicate with the leader if necessary.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>follow_leader</Action><Action>communicate_with_leader</Action></Sequence><Subtree>cluster_formation</Subtree></Selector></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'detect_enemy': 'Subtree node: Represents a behavior tree for detecting enemy robots.', 'attack_enemy': 'Action: Makes the agent attack the enemy robot. Always returns True.', 'retreat': 'Action: Makes the agent retreat and regroup with the rest of the swarm. Always returns True.', 'is_enemy_detected': 'Condition: Checks if an enemy robot is detected. Returns True if detected, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: Detect and attack enemy robots, but retreat and regroup if the enemy is too strong.
7.// OUTPUT:
<BehaviorTree><Selector><Condition>is_enemy_detected</Condition><Action>attack_enemy</Action><Action>retreat</Action><Subtree>detect_enemy</Subtree></Selector></BehaviorTree>
###
3.// INSTRUCTIONS: Use only the following behaviors {'detect_light_source': 'Action: Detect and locate the nearest light source. Always returns True.', 'is_light_source_detected': 'Condition: Check if light source is detected within 20 units. Returns True if light source is detected within 20 units of distance, False otherwise.', 'follow_light_source': 'Action: Move towards the light source. Always returns True.', 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_at_light_source': 'Condition: Check if agent is at the light source. Returns True if agent is within 5 units of the light source, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3.// USER COMMAND: generate behavior tree to 'Search for and approach the nearest light source, avoiding obstacles along the way, until reaching the light source and freezing movement.'Output only the XML behavior tree without extra text.
3.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>is_light_source_detected</Condition> <Selector> <Sequence> <Condition>is_at_light_source</Condition> <Action>task_completed</Action> </Sequence> <Action>follow_light_source</Action> </Selector> </Sequence> <Action>wander</Action> </Selector> <Selector> <Sequence> <Condition>is_obstacle_detected</Condition> <Action>avoid_obstacle</Action> </Sequence> <Action>wander</Action> </Selector> </Sequence> </BehaviorTree>

###
4.// INSTRUCTIONS: Use only the following behaviors {'detect_object': 'Action: Detect and locate the nearest object. Always returns True.', 'is_object_detected': 'Condition: Check if any object is detected within 20 units. Returns True if object is detected within 20 units of distance, False otherwise.', 'pick_up_object': 'Action: Pick up the object. Returns True if successful, False if object cannot be picked up.', 'drop_object': 'Action: Drop the object. Always returns True.', 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Search for and pick up the nearest object, then navigate around obstacles and drop the object at a specific location.'Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>is_object_detected</Condition> <Selector> <Sequence> <Condition>pick_up_object</Condition> <Action>drop_object</Action> </Sequence> <Action>pick_up_object</Action> </Selector> </Sequence> <Action>avoid_obstacle</Action> </Selector>
###
5.// INSTRUCTIONS: Use only the following behaviors {'detect_friend': 'Action: Detect and locate the nearest friend robot. Always returns True.', 'is_friend_detected': 'Condition: Check if any friend robots are detected within 20 units. Returns True if a friend robot is detected within 20 units of distance, False otherwise.', 'greet_friend': 'Action: Greet the friend robot. Always returns True.', 'wait_for_response': 'Condition: Wait for response from the friend robot. Returns True if response is received, False otherwise.', 'move_closer_to_friend': 'Action: Move closer to the friend robot. Always returns True.', 'dance': 'Action: Perform a dance routine. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Detect and approach a friend robot, greet them and wait for a response, then move closer and dance together.'Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>is_friend_detected</Condition> <Selector> <Sequence> <Action>greet_friend</Action> <Condition>wait_for_response</Condition> <Action>move_closer_to_friend</Action> <Action>dance</Action> </Sequence> <Action>dance</Action> </Selector> </Sequence> <Action>detect_friend</Action> </Selector> <Action>move_closer_to_friend</Action> </Sequence> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'form_triangle': 'Action: Form an equilateral triangle with two other robots. Returns True if successful, False if not enough robots are in the vicinity.', 'move_to_next_position': 'Action: Move to the next designated position. Returns True if successful, False if the designated position cannot be reached.', 'is_at_designated_position': 'Condition: Check if agent is at the designated position. Returns True if agent is at the designated position, False otherwise.', 'move_towards_center': 'Action: Move towards the center of the triangle. Always returns True.', 'is_triangle_formed': 'Condition: Check if an equilateral triangle is formed. Returns True if the triangle is formed, False otherwise.', 'wait_for_signal': 'Condition: Wait for signal from other robots. Returns True if signal is received, False otherwise.', 'signal_completion': 'Action: Signal completion to other robots. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Gather with two other robots to form an equilateral triangle, then move towards the center of the triangle and wait for a completion signal from the other robots.'Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Action>form_triangle</Action> <Condition>is_triangle_formed</Condition> <Action>move_towards_center</Action> </Sequence> <Selector> <Sequence> <Condition>wait_for_signal</Condition> <Action>signal_completion</Action> </Sequence> <Action>wander</Action> </Selector> </Sequence> </BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'detect_enemy': 'Action: Detect and locate the nearest enemy robot. Returns True if an enemy robot is detected within 20 units, False otherwise.', 'is_enemy_detected': 'Condition: Check if any enemy robots are detected within 20 units. Returns True if an enemy robot is detected, False otherwise.', 'attack_enemy': ' 
###
3.// INSTRUCTIONS: Use only the following behaviors {'move_forward': 'Action: Move the robot one step forward in the current direction. Always returns True.', 'turn_left': 'Action: Turn the robot 90 degrees to the left. Always returns True.', 'turn_right': 'Action: Turn the robot 90 degrees to the right. Always returns True.', 'move_to_target': 'Action: Move towards the specified target coordinates. Returns True when target is reached, False otherwise.', 'is_target_reached': 'Condition: Check if the target coordinates have been reached. Returns True if the target is reached, False otherwise.', 'search_for_target': 'Action: Move randomly while searching for the specified target coordinates. Returns True when target is found, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3.// USER COMMAND: Move robot to (15, 10) while avoiding obstacles
3.// OUTPUT:
<BehaviorTree><Sequence><Selector><Condition>is_target_reached</Condition><Action>move_to_target (15,10)</Action></Selector><Selector><Condition>is_obstacle_detected</Condition><Action>turn_left</Action><Action>turn_right</Action><Action>move_forward</Action></Selector></Sequence></BehaviorTree>

###
4.// INSTRUCTIONS: Use only the following behaviors {'move_forward': 'Action: Move the robot one step forward in the current direction. Always returns True.', 'turn_around': 'Action: Turn the robot 180 degrees. Always returns True.', 'check_battery_level': 'Condition: Check the remaining battery level. Returns True if battery level is above 25%, False otherwise.', 'charge_battery': 'Action: Find and dock at the nearest charging station. Returns True when battery is fully charged and robot is undocked.', 'print_message': 'Action: Print a message to the console. Returns True after printing the specified message.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: 'If the battery level is low (below 25%), charge the battery at the nearest station. Otherwise, continue moving forward.'
4.// OUTPUT:
<BehaviorTree><Sequence><Selector><Condition>check_battery_level</Condition><Selector><Action>charge_battery</Action><Sequence><Action>print_message "Battery level is below 25%. Charging..."</Action><Action>charge_battery</Action></Sequence></Selector></Selector><Action>move_forward</Action></Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'move_forward': 'Action: Move the robot one step forward in the current direction. Always returns True.', 'rotate_to_face_target': 'Action: Turn the robot to face the specified target coordinates. Always returns True.', 'move_to_target': 'Action: Move towards the specified target coordinates. Returns True when target is reached, False otherwise.', 'wait_for_target_reached': 'Condition: Check if the target coordinates have been reached. Returns True if the target is reached, False otherwise.', 'search_for_target': 'Action: Move randomly while searching for the specified target coordinates. Returns True when target is found, False otherwise.', 'detect_obstacle': 'Condition: Check for obstacles in the current direction of movement. Returns True if an obstacle is detected, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Move the robot to (5, 10) and rotate to face the target when reached, while avoiding obstacles along the way
5.// OUTPUT:
<BehaviorTree><Sequence><Selector><Condition>wait_for_target_reached</Condition><Selector><Action>move_to_target (5,10)</Action><Action>rotate_to_face_target (5,10)</Action></Selector></Selector><Selector><Condition>detect_obstacle</Condition><Action>move_forward</Action></Selector></Sequence></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'move_forward': 'Action: Move the robot one step forward in the current direction. Always returns True.', 'move_backward': 'Action: Move the robot one step backward in the current direction. Returns True if successful, False otherwise.', 'rotate_left': 'Action: Rotate the robot 90 degrees to the left. Returns True if successful, False otherwise.', 'rotate_right': 'Action: Rotate the robot 90 degrees to the right. Returns True if successful, False otherwise.', 'check_temperature': 'Condition: Check the current temperature. Returns True if temperature is within the safe range, False otherwise.', 'activate_heat_source': 'Action: Turn on a heat source to warm up the robot. Returns True when the temperature is within the safe range.', 'print_message': 'Action: Print a message to the console. Returns True after printing the specified message.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: 'If temperature is below 40 degrees, activate heat source. Otherwise, move forward. If movement is unsuccessful, rotate 90 degrees to the right and try moving backward.'
6.// OUTPUT:
<BehaviorTree><Sequence><Selector><Condition>check_temperature</Condition><Selector><Action>activate_heat_source</Action><Sequence><Action>print_message "Temperature is below 40 degrees. Activating heat source..."</Action><Action>activate_heat_source</Action></Sequence></Selector></Selector><Selector><Sequence><Action>rotate_right</Action><Condition>move_backward</Condition></Sequence><Action>move_forward</Action></Selector></Sequence></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'move_forward': 'Action: Move the robot one step forward in the current direction. Always returns True.', 'rotate_to_face_target': 'Action: Turn the robot to face the specified target coordinates. Always returns True.', 'move_to_target': 'Action: Move towards the specified target coordinates. Returns True when target is reached, False otherwise.', 'wait_for_target_reached': 'Condition: Check if the target coordinates have been reached. Returns True if the target is reached, False otherwise.', 'search_for_target': 'Action: Move randomly while searching for the specified target coordinates. Returns True when target is found, False otherwise.', 'detect_obstacle': 'Condition: Check for obstacles in the current direction of movement. Returns True if an obstacle is detected, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: Move the robot to (0, 0) while avoiding obstacles. If target is not reached within 10 steps, print a message and wander until target is reached or 50 steps have passed.
7.// OUTPUT:
<BehaviorTree><Selector><Sequence><###
4.// INSTRUCTIONS: Use only the following behaviors {'search_for_minerals': 'Action: Move towards mineral deposits. Returns True if mineral is within a certain distance, False otherwise.', 'mine_minerals': 'Action: Mine minerals once within range. Always returns True.', 'is_bag_full': 'Condition: Checks if the agent's mineral bag is full. Returns True if it is full, False otherwise.', 'deposit_minerals': 'Action: Return to base and deposit mineral bag. Always returns True.', 'is_enemy_detected': 'Condition: Checks if there are enemies within a specified range. Returns True if enemies are detected, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Send the agent to search for minerals. If an enemy is detected, drop off minerals and attack the enemy. If bag is full, return to base and deposit minerals.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>search_for_minerals</Action><Selector><Sequence><Condition>is_enemy_detected</Condition><Action>deposit_minerals</Action><Action>attack</Action></Sequence></Selector><Sequence><Condition>is_bag_full</Condition><Action>deposit_minerals</Action></Sequence></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'search_for_food': 'Action: Move towards food sources. Returns True if food is within a certain distance, False otherwise.', 'eat_food': 'Action: Consume food once within range. Always returns True.', 'is_hungry': 'Condition: Checks if the agent is hungry. Returns True if agent is hungry, False otherwise.', 'sleep': 'Action: Make the agent sleep to regain energy. Always returns True.', 'is_energy_low': 'Condition: Checks if the agent's energy level is low. Returns True if energy level is low, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Search for food and eat it. If energy is low, sleep to regain energy.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>search_for_food</Action><Sequence><Condition>is_hungry</Condition><Action>eat_food</Action></Sequence></Sequence></Selector><Selector><Sequence><Condition>is_energy_low</Condition><Action>sleep</Action></Sequence></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'search_fo
###
3.// INSTRUCTIONS: Use only the following behaviors {'follow_leader': 'Action: Follow the leader robot. Always returns True.','move_forward': 'Action: Move forward 5 units. Returns True if successful, False otherwise.', 'move_backward': 'Action: Move backward 5 units. Returns True if successful, False otherwise.', 'turn_left': 'Action: Turn left 45 degrees. Returns True if successful, False otherwise.', 'turn_right': 'Action: Turn right 45 degrees. Returns True if successful, False otherwise.', 'is_leader_reached': 'Condition: Check if the leader robot is within 10 units. Returns True if the leader robot is within 10 units of distance, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles ahead. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'start_task': 'Action: Start the assigned task. Always returns True.', 'finish_task': 'Action: Finish the assigned task. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3.// USER COMMAND: Generate behavior tree to follow the assigned leader robot, avoid obstacles, and complete a given task.
3.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_leader_reached</Condition><Action>start_task</Action><Selector><Sequence><Condition>is_obstacle_detected</Condition><Sequence><Condition>is_path_clear</Condition><Selector><Sequence><Action>move_forward</Action></Sequence><Action>turn_left</Action><Sequence><Condition>is_path_clear</Condition><Selector><Sequence><Action>move_forward</Action></Sequence><Action>turn_right</Action></Selector></Sequence></Selector></Sequence><Action>avoid_obstacle</Action></Sequence></Selector><Action>finish_task</Action></Sequence></BehaviorTree>

###
4.// INSTRUCTIONS: Use only the following behaviors {'move_to_goal': 'Action: Move to the designated goal location. Returns True if successful, False otherwise.', 'send_signal': 'Action: Send a signal to the leader robot. Always returns True.', 'replenish_energy': 'Action: Replenish the robot's energy level. Always returns True.', 'is_energy_low': 'Condition: Check if the robot's energy level is below 30%. Returns True if energy is low, False otherwise.', 'is_leader_reached': 'Condition: Check if the leader robot is within 10 units. Returns True if the leader robot is within 10 units of distance, False otherwise.', 'is_goal_reached': 'Condition: Check if the designated goal location is within 10 units. Returns True if the goal is reached, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Generate behavior tree for a robot to assist the leader robot, reach the designated goal, and conserve energy.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_leader_reached</Condition><Action>replenish_energy</Action></Sequence><Sequence><Condition>is_energy_low</Condition><Sequence><Condition>is_leader_reached</Condition><Selector><Sequence><Condition>is_energy_low</Condition><Selector><Sequence><Condition>is_goal_reached</Condition><Action>move_to_goal</Action><Action>send_signal</Action></Sequence><Action>send_signal</Action></Selector></Sequence><Action>replenish_energy</Action></Selector></Sequence><Action>move_to_goal</Action></Sequence></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'go_to_charger': 'Action: Navigate to the nearest charging station. Returns True if successful, False otherwise.', 'charge_battery': 'Action: Charge the robot's battery. Returns True if successful, False otherwise.', 'is_battery_low': 'Condition: Check if the robot's battery is below 50%. Returns True if battery is low, False otherwise.', 'scan_environment': 'Action: Scan the environment for any nearby resources. Always returns True.', 'collect_resource': 'Action: Collect the nearest resource. Returns True if successful, False otherwise.', 'is_resource_collected': 'Condition: Check if a resource has been collected. Returns True if a resource has been collected, False otherwise.', 'is_charging_complete': 'Condition: Check if the battery is fully charged. Returns True if charging is complete, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Generate behavior tree for a robot to automatically search for and collect resources while also keeping its battery charged.
5.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_battery_low</Condition><Selector><Sequence><Condition>is_charging_complete</Condition><Action>go_to_charger</Acti###
3.// INSTRUCTIONS: Use only the following behaviors {'collect_resource': 'Action: Move to and collect the specified resource. Always returns True.', 'deposit_resource': 'Action: Move to and deposit the collected resource at a designated location. Always returns True.', 'is_resource_available': 'Condition: Check if the specified resource is currently available in the environment. Returns True if available, False otherwise.', 'is_robot_full': 'Condition: Check if the robot has reached its maximum carrying capacity for resources. Returns True if full, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3.// USER COMMAND: Send a swarm of robots to collect and deposit resources from different locations until they reach their carrying capacity.
3.// OUTPUT:
<BehaviorTree><Selector><Sequence><Trigger>resource_sent</Trigger><Loop><Selector><Sequence><Condition>is_resource_available</Condition><Action>collect_resource</Action></Sequence><Selector><Sequence><Condition>is_robot_full</Condition><Action>deposit_resource</Action></Sequence><Action>move_to_next_location</Action></Selector></Loop></Sequence></Selector></BehaviorTree>

###
4.// INSTRUCTIONS: Use only the following behaviors {'take_cover': 'Action: Takes cover from enemy fire behind a nearby obstacle. Always returns True.', 'attack_enemy': 'Action: Engages and attacks the nearest enemy. Always returns True.', 'detect_enemy': 'Condition: Check if an enemy is present within a certain range. Returns True if an enemy is detected, False otherwise.', 'is_player_injured': 'Condition: Check if the player's health has fallen below the danger threshold. Returns True if player is injured, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: In a combat scenario, prioritize taking cover and engaging enemies while also checking on the player's health and providing support if needed.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_player_injured</Condition><Action>provide_medical_aid</Action></Sequence><Sequence><Condition>detect_enemy</Condition><Selector><Sequence><Condition>is_enemy_in_range</Condition><Action>take_cover</Action></Sequence><Selector><Sequence><Condition>is_enemy_in_range</Condition><Action>attack_enemy</Action></Sequence><Action>move_to_player</Action></Selector></Sequence></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'identify_target': 'Action: Identify the main target to eliminate. Always returns True.', 'check_surroundings': 'Action: Uses sensors to check the surroundings for potential threats. Always returns True.', 'move_to_position': 'Action: Moves to a specific position. Always returns True.', 'is_target_dead': 'Condition: Check if the specified target is confirmed to be dead. Returns True if dead, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Assemble a team of robots for a stealth mission to identify and eliminate a specific target, while constantly checking the surroundings for potential threats.
5.// OUTPUT:
<BehaviorTree><Sequence><Action>move_to_position</Action><Action>check_surroundings</Action><Selector><Sequence><Action>identify_target</Action><Condition>is_target_dead</Condition><Action>abort_mission</Action></Sequence><Action>eliminate_target</Action></Selector></Sequence></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'search_and_rescue': 'Subtree node: Represents a behavior tree for searching and rescuing trapped individuals.', 'extinguish_fire': 'Action: Uses a fire extinguisher to put out a fire. Always returns True.', 'navigate_to_location': 'Action: Move to a specified location. Always returns True.', 'is_person_safe': 'Condition: Check if the trapped individual has been successfully rescued to safety. Returns True if safe, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Send a swarm of robots to navigate through a burning building, search for and rescue trapped individuals, and extinguish fires along the way.
6.// OUTPUT:
<BehaviorTree><Sequence><Action>navigate_to_location</Action><Selector><Sequence><Condition>found_fire</Condition><Action>extinguish_fire</Action></Sequence><Loop><Selector><Sequence><Condition>is_person_safe</Condition><Action>return_to_base</Action></Sequence><Action>search_and_rescue</Action></Loop></Selector></Sequence></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'locate_object': 'Action: Use sensors to locate the designated object. Always returns True.', 'move_to_object': 'Action: Move to the specified object. Always returns True.', 'collect_object': 'Action: Collect the designated object. Always returns True.', 'is_object_in_range': 'Condition: Check if the object is within the designated range. Returns True if in range, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: In an exploration scenario, identify and collect a specific object while ensuring it is within a designated range.
7.// OUTPUT:
<BehaviorTree><Sequence><Action>locate_object</Action><Selector><Sequence><Action>move_to_object</Action><Condition>is_object_in_range</Condition><Action>collect_object</Action></Sequence><Action>move_to_next_location</Action></Selector></Sequence></BehaviorTree> 
###
4.// INSTRUCTIONS: Use only the following behaviors {'identify_danger': 'Action: Use sensors to identify potential dangers in the environment. Always returns True.', 'avoid_danger': 'Action: Move away from any identified dangers while maintaining formation. Always returns True.', 'gather_energy': 'Action: Use sensors to detect and collect energy sources while avoiding dangers. Always returns True.', 'recruit_new_member': 'Action: Send a signal to nearby robots to join the formation. Always returns True.', 'is_formation_active': 'Condition: Check if the formation is actively recruiting new members. Returns True if actively recruiting, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Create a behavior tree for a swarm of robots to explore and gather energy while avoiding potential dangers and recruiting new members.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>gather_energy</Action><Selector><Sequence><Action>identify_danger</Action><Action>avoid_danger</Action></Sequence></Selector></Sequence><Sequence><Condition>is_formation_active</Condition><Action>recruit_new_member</Action></Sequence></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'find_important_object': 'Action: Use sensors to search the environment for a specific important object. Returns True when the object is found.', 'calculate_path': 'Action: Compute the best path to reach the identified object. Always returns True.', 'is_path_blocked': 'Condition: Check if the calculated path is blocked by an obstacle. Returns True if the path is blocked, False otherwise.', 'move_along_path': 'Action: Move the robot along the calculated path towards the object. Returns True when the object is reached.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Create a behavior tree for a robot to find a specific important object and navigate to it, avoiding obstacles along the way.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>find_important_object</Action><Selector><Sequence><Condition>is_path_blocked</Condition><Action>calculate_path</Action><Action>move_along_path</Action></Sequence></Selector></Sequence></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'sort_garbage': 'Action: Use sensors to sort and collect garbage into separate bins based on type. Returns True when all garbage has been sorted.', 'navigate_to_bin': 'Action: Use sensors and path-planning to navigate to the nearest bin. Always returns True.', 'is_bin_full': 'Condition: Check if the current bin is full. Returns True if the bin is full, False otherwise.', 'empty_bin': 'Action: Use sensors and mechanism to empty a full bin. Returns True when the bin is emptied.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Assemble a behavior tree for a swarm of robots to collectively sort and empty garbage into bins, while ensuring bins are not overflowing.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>sort_garbage</Action></Sequence><Sequence><Action>navigate_to_bin</Action><Selector><Sequence><Condition>is_bin_full</Condition><Action>empty_bin</Action><Action>wait</Action></Sequence></Selector></Sequence></Selector></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'identify_target': 'Action: Use sensors to identify potential targets in the environment. Returns True when a target is found.', 'plan_attack': 'Action: Compute the best strategy and path for attacking the identified target. Always returns True.', 'is_path_blocked': 'Condition: Check if the calculated attack path is blocked by an obstacle. Returns True if the path is blocked, False otherwise.', 'move_to_target': 'Action: Move the robot along the calculated attack path towards the target. Returns True when the target is reached.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: Create a behavior tree for a swarm of robots to identify and attack specific targets while navigating obstacles.
7.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>identify_target</Action><Selector><Sequence><Condition>is_path_blocked</Condition><Action>plan_attack</Action><Action>move_to_target</Action></Sequence></Selector></Sequence></Selector></BehaviorTree>###
3.// INSTRUCTIONS: Use only the following behaviors {'move_to_target': 'Action: Move towards a designated target location. Returns True on successful arrival.', 'scan_for_object': 'Action: Use sensors to scan for the specific object. Returns True if the object is detected, False otherwise.', 'pick_up_object': 'Action: Pick up the detected object and hold onto it. Returns True after successful pickup.', 'drop_object': 'Action: Drop the currently held object. Returns True after successful drop.', 'is_object_detected': 'Condition: Check if the object of interest is detected by the sensors. Returns True if the object is detected, False otherwise.', 'is_at_target': 'Condition: Check if the agent has reached the designated target location. Returns True if the target is reached, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3.// USER COMMAND: Generate behavior tree for a robot to collect and drop off a specific object at a designated location.
3.// OUTPUT:
<BehaviorTree><Sequence><Action>move_to_target</Action><Sequence><Selector><Sequence><Condition>is_object_detected</Condition><Action>pick_up_object</Action></Sequence><Action>drop_object</Action></Selector><Condition>is_at_target</Condition></Sequence></Sequence></BehaviorTree>
###
4.// INSTRUCTIONS: Use only the following behaviors {'navigate_to_person': 'Action: Navigate towards a person identified by name. Returns True when the person is reached.', 'perform_medical_check': 'Action: Perform a medical check on the person. Returns True if the check is completed successfully.', 'call_for_assistance': 'Action: Call for assistance from other robots. Returns True after assistance is requested.', 'is_person_identified': 'Condition: Check if the person's name has been confirmed by human input. Returns True if the person is identified, False otherwise.', 'is_injured': 'Condition: Check if the person is injured and requires medical attention. Returns True if the person is injured, False otherwise.', 'has_medical_supplies': 'Condition: Check if the robot has necessary medical supplies. Returns True if supplies are available, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Generate behavior tree for a robot to assist a person in need.
4.// OUTPUT:
<BehaviorTree><Sequence><Sequence><Selector><Condition>is_person_identified</Condition><Sequence><Condition>is_injured</Condition><Selector><Sequence><Condition>has_medical_supplies</Condition><Action>perform_medical_check</Action></Sequence><Action>call_for_assistance</Action></Selector></Sequence></Selector><Action>navigate_to_person</Action></Sequence></Sequence></BehaviorTree>
###
5.// INSTRUCTIONS: Use only the following behaviors {'establish_connection': 'Action: Connect with other nearby robots in the swarm. Returns True after successful connection.', 'share_information': 'Action: Share relevant information with connected robots. Returns True after information is shared.', 'analyze_environment': 'Action: Use sensors to gather data about the environment. Returns True after successful analysis.', 'is_in_group': 'Condition: Check if the robot is currently connected to other robots. Returns True if in a group, False otherwise.', 'has_relevant_information': 'Condition: Check if the robot has relevant information about the environment. Returns True if information is available, False otherwise.', 'is_external_communication_possible': 'Condition: Check if external communication is possible. Returns True if communication is possible, False otherwise.', 'is_information_shared': 'Condition: Check if information has been shared with connected robots. Returns True after sharing is completed.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Generate behavior tree for a robot to gather and share information about the environment with other robots.
5.// OUTPUT:
<BehaviorTree><Sequence><Action>analyze_environment</Action><Sequence><Selector><Sequence><Selector><Condition>is_external_communication_possible</Condition><Action>establish_connection</Action></Selector><Condition>is_in_group</Condition></Sequence><Condition>has_relevant_information</Condition></Selector><Sequence><Condition>is_in_group</Condition><Selector><Sequence><Condition>has_relevant_information</Condition><Action>share_information</Action></Sequence></Selector><Action>analyze_environment</Action></Sequence></Sequence></BehaviorTree>
###
6.// INSTRUCTIONS: Use only the following behaviors {'navigate_to_resource': 'Action: Move towards the specified resource location. Returns True on successful arrival.', 'collect_resource': 'Action: Collect the resource at the current location. Returns True after successful collection.', 'return_to_base': 'Action: Return to base with the collected resources. Returns True on successful arrival.', 'is_resource_available': 'Condition: Check if the specified resource is available at the current location. Returns True if the resource is available, False otherwise.', 'is_resource_collected': 'Condition: Check if the resource has been successfully collected. Returns True after collection is completed.', 'is_base_reached': 'Condition: Check if the robot has reached the base. Returns True if the base is reached, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Generate behavior tree for a robot to collect and deliver a specific resource to a base location.
6.// OUTPUT:
<BehaviorTree><Sequence><Action>navigate_to_resource</Action><Selector><Sequence><Condition>is_resource_available</Condition><Action>collect_resource</Action></Sequence><Action>return_to_base</Action></Selector><Condition>is_resource_collected</Condition><Condition>is_base_reached</Condition></Sequence></BehaviorTree>
###
7.// INSTRUCTIONS: Use only the following behaviors {'find_closest_target': 'Action: Search for the closest target within a given range. Returns True if a target is found, False otherwise.', 'follow_target': 'Action: Follow the target while maintaining a safe distance. Returns True as long as the target is followed.', 'avoid_obstacles': 'Action: Avoid detected obstacles while following the target. Returns True as long as no obstacles are present.', 'is_target_reached': 'Condition: Check if the target is reached. Returns True when the target is reached, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles in the path. Returns True if an obstacle is detected, False otherwise.', 'is_target_lost': 'Condition: Check if the target is lost. Returns True when the target is lost, False otherwise.'}, to construct behavior tree in XML format to the following command.
 If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: Generate behavior tree for a robot to follow and approach a moving target.
7.// OUTPUT:

###
3.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'check_battery': 'Condition: Check battery level. Returns True if battery level is above 50%, False otherwise.', 'move_to_recharge': 'Action: Move to the closest charging station. Always returns True.', 'collect_sample': 'Action: Collect a sample from the environment. Always returns True.', 'process_sample': 'Action: Process collected sample. Always returns True.', 'share_data': 'Action: Share data with other robots in the swarm. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task).
3.// USER COMMAND: generate behavior tree to 'Collect a sample, process it, and share data with other robots if battery level is high enough.' Output only the XML behavior tree without extra text.
3.// OUTPUT:
<BehaviorTree><Sequence><Condition>check_battery</Condition><Sequence><Action>collect_sample</Action><Action>process_sample</Action><Action>share_data</Action></Sequence><Action>move_to_recharge</Action></Sequence></BehaviorTree>

###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'deposit_food': 'Action: Deposit collected food into the nest. Always returns True.', 'collect_food': 'Action: Collect food from the environment. Always returns True.', 'find_food_source': 'Action: Move towards the closest food source. Always returns True.', 'is_food_available': 'Condition: Check if food is available in the environment. Returns True if food is present, False otherwise.', 'is_nest_full': 'Condition: Check if the nest is full. Returns True if the nest is full, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task).
4.// USER COMMAND: generate behavior tree to 'Gather food from the environment and deposit it into the nest until the nest is full.' Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_nest_full</Condition><Action>agent_movement_freeze</Action></Sequence><Selector><Sequence><Condition>is_food_available</Condition><Action>collect_food</Action><Action>deposit_food</Action></Sequence><Selector><Action>find_food_source</Action><Action>avoid_obstacle</Action></Selector></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'build_structure': 'Action: Construct a designated structure using available materials. Returns True when structure is complete.', 'collect_building_materials': 'Action: Collect building materials from the environment. Always returns True.', 'drop_off_materials': 'Action: Drop off collected materials at designated location. Returns True if materials are dropped off successfully, False otherwise.', 'move_to_designated_location': 'Action: Move to the designated location based on the given coordinates. Always returns True.', 'is_material_available': 'Condition: Check if building materials are available. Returns True if materials are present, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task).
5.// USER COMMAND: generate behavior tree to 'Collect building materials, move to the designated location, and construct a designated structure using the collected materials.' Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>is_material_available</Condition><Sequence><Action>collect_building_materials</Action><Action>drop_off_materials</Action></Sequence></Sequence><Selector><Action>move_to_designated_location</Action><Action>avoid_obstacle</Action></Selector></Selector><Sequence><Condition>is_material_available</Condition><Action>build_structure</Action></Sequence></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'find_path': 'Action: Use pathfinding algorithm to find the shortest path to a designated location. Returns True when the path is found.', 'move_to_designated_location': 'Action: Move to the designated location based on the given coordinates. Returns True if destination is reached, False otherwise.', 'is_target_reached': 'Condition: Check if the target location is reached. Returns True if destination is reached, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task).
6.// USER COMMAND: generate behavior tree to 'Find the shortest path to a designated location and move there.' Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree><Sequence><Action>find_path</Action><Sequence><Condition>is_target_reached</Condition><Action>agent_movement_freeze</Action></Sequence></Sequence><Sequence><Condition>is_target_reached</Condition><Action>move_to_designated_location</Action></Sequence></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'check_temperature': 'Condition: Check environment temperature. Returns True if temperature is within desired range, False otherwise.', 'cool_down': 'Action: Use cooling mechanism to reduce temperature. Always returns True.', 'heat_up': 'Action: Use heating mechanism to increase temperature. Always returns True.', 'move_to_shelter': 'Action: Move to designated shelter location. Returns True when shelter is reached.', 'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True."}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task).
7.// USER COMMAND: generate behavior tree to 'Maintain the environment temperature by cooling or heating as needed, and move to shelter if necessary.' Output only the XML behavior tree without extra text.
7.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>check_temperature</Condition><Action>agent_movement_freeze</Action></Sequence><Selector><Sequence><Action>heat_up</Action><Action>cool_down</Action></Sequence><Action>move_to_shelter</Action></Selector></Selector></BehaviorTree> 
###
4.// INSTRUCTIONS: Use only the following behaviors {'return_to_base': 'Action: Return to base for refueling. Always returns True.', 'collect_resource': 'Action: Collect nearby resources. Always returns True.', 'drop_off_resource': 'Action: Drop off collected resources at the base. Always returns True.', 'is_resource_available': 'Condition: Check if a resource is available nearby. Returns True if a resource is nearby, False otherwise.', 'is_base_reached': 'Condition: Check if the robot has reached the base. Returns True if the robot is at the base, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree for a robot to collect resources and return to base when full
4.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_resource_available</Condition><Selector><Sequence><Action>collect_resource</Action><Selector><Sequence><Condition>is_base_reached</Condition><Action>drop_off_resource</Action><Action>wait</Action></Sequence></Selector></Sequence><Selector><Condition>is_base_reached</Condition><Action>return_to_base</Action></Selector></Selector></Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'search_object': 'Action: Search for a specific object in the environment. Returns True if the object is found, False otherwise.', 'grab_object': 'Action: Grab the object once it is found. Returns True if successfully grabbed, False otherwise.', 'unlock_door': 'Action: Unlock a door using the appropriate key. Returns True if the door is successfully unlocked, False otherwise.', 'is_object_held': 'Condition: Check if the robot is currently holding an object. Returns True if an object is held, False otherwise.', 'is_object_found': 'Condition: Check if the object being searched for is found. Returns True if the object is found, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree for a robot to search for a key, unlock a door, and carry the object to a designated location
5.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_object_found</Condition><Selector><Sequence><Action>search_object</Action><Action>grab_object</Action><Action>unlock_door</Action></Sequence></Selector><Selector><Condition>is_object_held</Condition><Action>move_to_designated_location</Action></Selector></Sequence></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'observe_behavior': "Action: Observe and record the behavior of nearby robots. Always returns True.", 'share_observation': 'Action: Share the observed information with other robots. Always returns True.', 'coordinate_movement': 'Action: Coordinate movement with nearby robots. Always returns True.', 'is_neighbor_malfunctioning': 'Condition: Check if a nearby robot is malfunctioning. Returns True if a nearby robot is experiencing issues, False otherwise.', 'is_neighbor_observing': 'Condition: Check if a nearby robot is currently observing behavior. Returns True if a nearby robot is observing, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree for a robot to monitor nearby robots and coordinate movement based on observed behavior
6.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_neighbor_malfunctioning</Condition><Selector><Sequence><Action>observe_behavior</Action><Selector><Sequence><Condition>is_neighbor_observing</Condition><Action>share_observation</Action><Action>coordinate_movement</Action></Sequence></Selector></Sequence></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'sense_terrain': 'Action: Use sensors to map and interpret the surrounding terrain. Always returns True.', 'move_to_high_ground': 'Action: Move to higher ground for better visibility. Returns True if successfully moved, False otherwise.', 'mark_danger_zone': 'Action: Mark areas with potential danger. Returns True if successfully marked, False otherwise.', 'is_slope_too_steep': 'Condition: Check if the slope is too steep for safe movement. Returns True if slope is too steep, False otherwise.', 'has_danger_zone': 'Condition: Check if there are marked danger zones nearby. Returns True if danger zones are present, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: Generate behavior tree for a robot to navigate through difficult terrain and mark potential danger zones
7.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_slope_too_steep</Condition><Selector><Sequence><Action>sense_terrain</Action><Action>move_to_high_ground</Action></Sequence></Selector></Sequence><Selector><Condition>has_danger_zone</Condition><Action>mark_danger_zone</Action></Selector><Action>continue_movement</Action></Selector></BehaviorTree>
###
3.// INSTRUCTIONS: Use only the following behaviors {'is_home' :'Condition: Check if the robot is at home base. Returns True if the robot is at home base, False otherwise.', 'set_waypoints': 'Action: Set the patrol waypoints for the robot to follow. Always returns True.', 'fly_to_next_waypoint': 'Action: Fly the drone to the next patrol waypoint. Always returns True.', 'scan_for_fire': 'Action: Use thermal imaging to scan for any signs of fire in the area. Returns True if fire is detected, False otherwise.', 'extinguish_fire': 'Action: Use water spray to extinguish any detected fires. Always returns True.', 'is_complete': 'Condition: Check if the entire area has been patrolled and no more fires are detected. Returns True if complete, False otherwise.', 'hover': 'Action: Hover in place while awaiting further instructions. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3.// USER COMMAND: Create a behavior tree for a drone to patrol and extinguish any fires in the area
3.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_complete</Condition><Sequence><Condition>is_home</Condition><Sequence><Action>set_waypoints</Action><Sequence><Condition>is_home</Condition><Action>hover</Action></Sequence></Sequence></Sequence></Sequence><Sequence><Condition>is_home</Condition><Action>fly_to_next_waypoint</Action><Sequence><Action>scan_for_fire</Action><Selector><Action>extinguish_fire</Action><Action>hover</Action></Selector></Sequence></Sequence></BehaviorTree>

###
4.// INSTRUCTIONS: Use only the following behaviors {'detect_target': 'Condition: Check if a target object is within range to be detected by the robot. Returns True if target is detected, False otherwise.', 'collect_target': 'Action: Collect the target object if within reach. Always returns True.', 'analyze_environment': 'Action: Use sensors to analyze the environment and gather data for further decision-making. Always returns True.', 'move_to_nearest_obstacle': 'Action: Move the robot towards the nearest detected obstacle. Always returns True.', 'destroy_obstacle': 'Action: Use tools to destroy the detected obstacle. Always returns True.', 'is_obstacle_destroyed': 'Condition: Check if the obstacle has been successfully destroyed. Returns True if destroyed, False otherwise.', 'is_collected_target': 'Condition: Check if the target object has been collected. Returns True if collected, False otherwise.', 'drop_collected_target': 'Action: Drop the collected target object at a designated location. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Generate a behavior tree for a robot to detect, collect, and analyze target objects while destroying any obstacles in the way
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>detect_target</Condition><Action>collect_target</Action><Action>analyze_environment</Action><Selector><Sequence><Condition>is_obstacle_destroyed</Condition><Selector><Action>move_to_nearest_obstacle</Action><Action>destroy_obstacle</Action></Selector></Sequence><Sequence><Condition>is_collected_target</Condition><Action>drop_collected_target</Action></Sequence></Selector></Sequence><Action>wander</Action></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'detect_intruders': 'Condition: Check for any intruders using sensors. Returns True if intruder is detected, False otherwise.', 'approach_intruder': 'Action: Move the robot towards the detected intruder. Always returns True.', 'capture_intruder': 'Action: Capture and restrain the intruder using nets or other tools. Always returns True.', 'call_for_reinforcements': 'Action: Send a signal to call for reinforcements from other robots. Always returns True.', 'escort_intruder_to_exit': 'Action: Guide the intruder to the designated exit location for removal. Always returns True.', 'is_intruder_restrained': 'Condition: Check if the intruder has been successfully restrained. Returns True if restrained, False otherwise.', 'is_at_exit': 'Condition: Check if the robot is at the designated exit location. Returns True if at the exit location, False otherwise.', 'is_reinforcements_arrived': 'Condition: Check if reinforcements have arrived. Returns True if arrived, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Create a behavior tree for a security robot to detect, capture, and escort any intruders to the designated exit location.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>detect_intruders</Condition><Selector><Sequence><Condition>is_intruder_restrained</Condition><Action>escort_intruder_to_exit</Action></Sequence><Selector><Action>approach_intruder</Action><Action>capture_intruder</Action></Selector></Selector></Sequence><Sequence><Condition>is_at_exit</Condition><Action>call_for_reinforcements</Action><Selector><Condition>is_reinforcements_arrived</Condition><Sequence><Action>wander</Action></Sequence></Selector></Sequence></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'detect_pollution': 'Condition: Check for any signs of pollution in the environment using sensors. Returns True if pollution is detected, False otherwise.', 'analyze_pollution': 'Action: Use data gathered from sensors to analyze the extent and severity of pollution. Always returns True.', 'alert_nearby_agents': 'Action: Send an alert signal to nearby agents to notify them of the pollution. Always returns True.', 'deploy_cleaning_tools': 'Action: Deploy cleaning tools or robots to start cleaning the pollution. Always returns True.', 'wait_for_cleaning': 'Action: Wait for the cleaning process to be completed before moving on to the next step. Always returns True.', 'is_pollution_cleared': 'Condition: Check if the pollution has been successfully cleared. Returns True if cleared, False otherwise.', 'is_agent_informed': 'Condition: Check if nearby agents have been informed of the pollution. Returns True if informed, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Generate a behavior tree for a pollution control robot to detect, analyze, and alert other robots about pollution in the environment.
6.// OUTPUT:
<BehaviorTree><Sequence><Condition>detect_pollution</Condition><Action>analyze_pollution</Action><Selector><Action>alert_nearby_agents</Action><Selector><Action>deploy_cleaning_tools</Action><Action>wait_for_cleaning</Action></Selector></Sequence></Sequence><Action>wander</Action></BehaviorTree>

 
###
4.// INSTRUCTIONS: Use only the following behaviors {'encircle_target': "Action: Move around the target in a circular motion, maintaining a certain distance from the target. Always returns True.", 'follow_path': "Action: Follow a predetermined path set by the user. Always returns True.", 'is_at_target_location': 'Condition: Check if the agent is at the designated target location. Returns True if at the target location, False otherwise.', 'is_path_blocked': 'Condition: Check if the path in the current direction is blocked or impassable. Returns True if the path is blocked, False otherwise.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'move_forward': 'Action: Move the robot one step forward in the current direction. Returns True if movement is successful, False otherwise.', 'rotate_left': 'Action: Rotate the agent to the left 90 degrees. Always returns True.', 'rotate_right': 'Action: Rotate the agent to the right 90 degrees. Always returns True.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.', 'move_to_random_location': 'Action: Move to a randomly generated location within the environment. Returns True if movement is successful, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Explore the entire environment by moving along a predetermined path'
4.// OUTPUT:
<BehaviorTree><Sequence><Action>move_to_random_location</Action><Condition>is_at_target_location</Condition></Sequence><Action>encircle_target</Action><Selector><Sequence><Condition>is_path_blocked</Condition><Selector><Action>rotate_left</Action><Action>rotate_right</Action></Selector></Sequence><Sequence><Condition>is_target_detected</Condition><Sequence><Action>move_forward</Action><Action>task_completed</Action></Sequence></Selector></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'follow_leader': 'Action: Follow the designated leader robot. Always returns True.', 'is_leader_active': 'Condition: Check if the designated leader robot is active and within range. Returns True if the leader is active, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'move_forward': 'Action: Move the robot one step forward in the current direction. Returns True if movement is successful, False otherwise.', 'rotate_left': 'Action: Rotate the robot to the left 90 degrees. Always returns True.', 'rotate_right': 'Action: Rotate the robot to the right 90 degrees. Always returns True.', 'scan_environment': 'Action: Use sensors to scan the environment for obstacles and other robots. Returns True if the scan is successful, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.', 'move_to_random_location': 'Action: Move to a randomly generated location within the environment. Returns True if movement is successful, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Follow the designated leader robot and scan the environment for obstacles and other robots'
5.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_leader_active</Condition><Action>follow_leader</Action></Sequence><Sequence><Condition>is_path_clear</Condition><Selector><Action>rotate_left</Action><Action>rotate_right</Action></Selector></Sequence><Sequence><Condition>scan_environment</Condition><Selector><Action>move_to_random_location</Action><Action>task_completed</Action></Selector></Sequence></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'drop_pheromone': 'Action: Drop a pheromone trail at the current location. Returns True if successful, False otherwise.', 'find_pheromone': 'Action: Follow the pheromone trail to reach a designated target location. Returns True if successful, False otherwise.', 'is_at_target_location': 'Condition: Check if the agent is at the designated target location. Returns True if at the target location, False otherwise.', 'is_pheromone_present': 'Condition: Check if a pheromone trail is present at the current location. Returns True if a pheromone trail is present, False otherwise.', 'is_pheromone_trail_complete': 'Condition: Check if the pheromone trail has reached a certain length or destination. Returns True if the trail is complete, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'move_forward': 'Action: Move the robot one step forward in the current direction. Returns True if movement is successful, False otherwise.', 'rotate_left': 'Action: Rotate the robot to the left 90 degrees. Always returns True.', 'rotate_right': 'Action: Rotate the robot to the right 90 degrees. Always returns True.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.', 'move_to_random_location': 'Action: Move to a randomly generated location within the environment. Returns True if movement is successful, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Follow the pheromone trail to a designated target location and drop a new pheromone trail every 10 steps'
6.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_path_clear</Condition><Selector><Action>rotate_left</Action><Action>rotate_right</Action></Selector></Sequence><Selector><Condition>is_pheromone_present</Condition><Selector><Sequence><Condition>is_pheromone_trail_complete</Condition><Action>find_pheromone</Action></Sequence><Sequence><Condition>is_at_target_location</Condition><Action>task_completed</Action></Sequence></Selector></Selector><Sequence><Action>move_forward</Action><Selector><Condition>is_pheromone_present</Condition><Action>drop_pheromone</Action></Selector></Sequence></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'collect_resource': 'Action: Collect resource from a specified location. Returns True if successful, False otherwise.', 'deposit_resource': 'Action: Deposit collected resources at a designated location. Returns True if successful, False otherwise.', 'is_resource_available': 'Condition: Check if there are enough
###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'change_color_to_blue': "Action: Change agent's color to blue. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'create_circle': 'Action: Create a circle with a radius of 10 units. Always returns True.', 'is_agent_at_left_edge': 'Condition: Check if the agent is at the left edge of the environment. Returns True if at left edge, False otherwise.', 'is_agent_at_right_edge': 'Condition: Check if the agent is at the right edge of the environment. Returns True if at right edge, False otherwise.', 'is_circle_created': 'Condition: Check if a circle with radius 10 has been created. Returns True if circle is created, False otherwise.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'perform_dance_move': 'Action: Perform a dance move. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Form a circle around the target, change color to blue, and perform a dance move when target is reached.'Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree> <Sequence> <Condition>is_target_detected</Condition> <Selector> <Sequence> <Action>create_circle</Action> <Action>change_color_to_blue</Action> <Condition>is_target_reached</Condition> <Action>perform_dance_move</Action> </Sequence> <Sequence> <Condition>is_agent_at_left_edge</Condition> <Action>change_color_to_blue</Action> <Action>continue_movement_agent</Action> </Sequence> <Sequence> <Condition>is_agent_at_right_edge</Condition> <Action>change_color_to_blue</Action> <Action>continue_movement_agent</Action> </Sequence> </Selector> </Sequence> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_red': "Action: Change agent's color to red. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'is_blue_agent_detected': 'Condition: Check if a blue agent is detected within 15 units. Returns True if blue agent is detected, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_red_agent_detected': 'Condition: Check if a red agent is detected within 15 units. Returns True if red agent is detected, False otherwise.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'perform_dance_move': 'Action: Perform a dance move. Always returns True.', 'rotate_right_90_degree': 'Action: Rotate 90 degrees to the right. Always returns True.', 'scan_environment': 'Action: Scan the environment for other agents and obstacles. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Scan environment and avoid obstacles, change color to red when a blue agent is detected, rotate 90 degrees to the right when a red agent is detected, and perform a dance move when target is reached.'Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Action>scan_environment</Action> <Action>avoid_obstacle</Action> <Condition>is_blue_agent_detected</Condition> <Action>change_color_to_red</Action> <Condition>is_target_detected</Condition> <Action>perform_dance_move</Action> </Sequence> <Sequence> <Action>scan_environment</Action> <Action>avoid_obstacle</Action> <Condition>is_red_agent_detected</Condition> <Action>rotate_right_90_degree</Action> </Sequence> <Action>wander</Action> </Selector> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'change_color_to_blue': "Action: Change agent's color to blue. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'follow_target': 'Action: Follow the target that has been detected within 15 units. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_blue_agent_detected': 'Condition: Check if a blue agent is detected within 20 units. Returns True if blue agent is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_lost': 'Condition: Check if the target has been lost. Returns True if the target is no longer detected, False otherwise.', 'is_blue_agent_lost': 'Condition: Check if blue agent is lost within 20 units. Returns True if blue agent is no longer detected, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Follow a target, change color to blue, and return to the nest if target is lost or a blue agent is lost.'Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>is_target_detected</Condition> <Action>follow_target</Action> <Action>change_color_to_blue</Action> <Action>continue_movement_agent</Action> <Condition>is_target_lost</Condition> <Condition>is_agent_in_nest</Condition> </Sequence> <Condition>is_blue_agent_detected</Condition> <Condition>is_blue_agent_lost</Condition> <Action>change_color_to_blue</Action> <Condition>is_target_lost</Condition> <Condition>is_agent_in_nest</Condition> </Sequence> <Action>wander</Action> </Selector> </BehaviorTree>

###
7.// INSTRUCTIONS 
###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'explore': 'Subtree node: Explores the environment by moving randomly.', 'follow_leader': 'Subtree node: Follows the movements of the leader agent.', 'gather_dropped_items': 'Subtree node: Gathers items dropped by other agents and brings them back to the nest.', 'navigate_to_food': 'Subtree node: Finds and reaches a food source.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_food_detected': 'Condition: Check if food is detected. Returns True if food is within range, False otherwise.', 'is_leader_nearby': 'Condition: Check for nearby leader agent. Returns True if a leader agent is within range, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Explore the environment by following the leader and gathering any dropped items, while also checking for nearby food sources and returning to the nest if the agent is low on energy.
4.// OUTPUT:
<BehaviorTree> <Sequence> <Action>follow_leader</Action> <Selector> <Sequence> <Condition>is_leader_nearby</Condition> <Action>gather_dropped_items</Action> </Sequence> <Sequence> <Condition>is_agent_in_nest</Condition> <Selector> <Sequence> <Condition>is_food_detected</Condition> <Action>navigate_to_food</Action> <Action>follow_leader</Action> </Sequence> </Selector> </Sequence> </Selector> <Selector> <Sequence> <Condition>is_agent_in_nest</Condition> <Action>explore</Action> </Sequence> </Selector> </Sequence> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_red': "Action: Change agent's color to red. Always returns True.", 'find_target': "Action: Move towards the target's location. Returns True if agent is within 10 units of the target, False otherwise.", 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'is_target_lost': 'Condition: Check if target is not within 30 units. Returns True if the target is not within 30 units of distance, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Move towards the target's location, changing color to green until the target is reached, or change color to red if the target is lost and return to the nest.
5.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>is_target_lost</Condition> <Action>change_color_to_red</Action> <Action>agent_movement_freeze</Action> </Sequence> <Sequence> <Condition>is_agent_in_nest</Condition> <Action>find_target</Action> <Sequence> <Condition>is_target_reached</Condition> <Action>change_color_to_green</Action> <Action>agent_movement_freeze</Action> </Sequence> </Sequence> </Selector> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'set_destination': 'Action: Move towards a designated destination. Returns True if agent is within 10 units of the destination, False otherwise.', 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'is_destination_reached': 'Condition: Check if destination is within 10 units. Returns True if the agent is within 10 units of the destination, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Move towards a designated destination, changing color to green until the destination is reached, while avoiding any detected obstacles.
6.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>is_obstacle_detected</Condition> <Action>avoid_obstacle</Action> </Sequence> <Sequence> <Condition>is_destination_reached</Condition> <Action>change_color_to_green</Action> <Action>agent_movement_freeze</Action> </Sequence> <Sequence> <Action>set_destination</Action> </Sequence> </Selector> </BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'send_signal': 'Action: Sends a signal to other agents within a 20 unit range. Always returns True.', 'form_circle': 'Action: Form a circle with other agents within a 10 unit radius. Always returns True.', 'gather_resource': 'Action: Gather a resource within a 10 unit radius. Always returns True.', 'is_other_agents_nearby': 'Condition: Check for nearby agents. Returns True if other agents are within a 20 unit range, False otherwise.', 'is_resource_available': 'Condition: Check for available resource within a 10 unit radius. Returns True if resource is available, False otherwise.', 'is_agent_in_circle': 'Condition: Check if agent is surrounded by other agents in a circle formation. Returns True if surrounded, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: Send a signal to nearby agents, form a circle with other agents, and gather resources within a 10 unit radius, then freeze movement.
7.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>is_other_agents_nearby</Condition> <Action>send_signal</Action> </Sequence> <Sequence> <Condition>is_agent_in_circle</Condition> <Action>gather_resource</Action> </Sequence> </Selector> <Sequence> <Condition>is_resource_available</Condition> <Action>form_circle</Action> </Sequence> <Action>agent_movement_freeze</Action> </Sequence> </BehaviorTree>
###
4.// INSTRUCTIONS: Use only the following behaviors {'detect_neighbor': 'Condition: Check if a nearby robot is part of the same swarm. Returns True if a swarm member is detected, False otherwise.', 'form_circle': 'Action: Form a circle with nearby swarm members. Always returns True.', 'move_randomly': 'Action: Move randomly within the environment. Always returns True.', 'signal_swarm_members': 'Action: Send a signal to other swarm members. Always returns True.', 'stop_movement': 'Action: Stop movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: If a swarm member is detected, form a circle with them and send a signal to all swarm members, otherwise stop movement.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>detect_neighbor</Condition><Action>form_circle</Action><Action>signal_swarm_members</Action></Sequence><Action>stop_movement</Action></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'detect_path': 'Condition: Check if there is a clear path ahead. Returns True if the path is clear, False otherwise.', 'communicate_position': 'Action: Send current position to other robots. Always returns True.', 'wait_for_other_robots': 'Action: Wait for communication from other robots. Always returns True.', 'move_forward': 'Action: Move forward in a straight line. Always returns True.', 'turn_left': 'Action: Turn left. Always returns True.', 'turn_right': 'Action: Turn right. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Communicate current position, then move forward until an obstacle is detected. If an obstacle is detected, turn left and continue moving.
5.// OUTPUT:
<BehaviorTree><Sequence><Action>communicate_position</Action><Selector><Sequence><Condition>detect_path</Condition><Action>move_forward</Action></Sequence><Action>detect_path</Action><Selector><Sequence><Action>turn_left</Action><Action>move_forward</Action></Sequence><Action>turn_right</Action><Action>move_forward</Action></Selector></Sequence></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'detect_hazard': 'Condition: Check for hazards in the environment. Returns True if a hazard is detected, False otherwise.', 'navigate_around_hazard': 'Action: Move around a detected hazard. Always returns True.', 'set_target_destination': 'Action: Set a target destination to navigate towards. Always returns True.', 'reach_target_destination': 'Condition: Check if the target destination has been reached. Returns True if the target is within a certain range, False otherwise.', 'return_to_origin': 'Action: Return to the starting point if the target cannot be reached. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Set a target destination, navigate towards it, and if unable to reach, return to the starting point.
6.// OUTPUT:
<BehaviorTree><Sequence><Action>set_target_destination</Action><Selector><Sequence><Condition>detect_hazard</Condition><Action>navigate_around_hazard</Action><Condition>reach_target_destination</Condition></Sequence><Action>return_to_origin</Action><Condition>reach_target_destination</Condition></Selector></Sequence></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'detect_friend': 'Condition: Check for friendly robots nearby. Returns True if a friendly robot is detected, False otherwise.', 'wait_for_friend': 'Action: Wait for communication from a friendly robot. Always returns True.', 'move_towards_friend': 'Action: Move towards a friendly robot. Always returns True.', 'move_randomly': 'Action: Move randomly within the environment. Always returns True.', 'grab_resource': 'Action: Grab a resource from the environment. Always returns True.', 'drop_resource': 'Action: Drop a carried resource. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: If a friendly robot is detected, wait for communication, then move towards them and grab a resource if available. If no friendly robot is detected, continue moving randomly.
7.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>detect_friend</Condition><Action>wait_for_friend</Action><Action>move_towards_friend</Action><Selector><Sequence><Action>grab_resource</Action><Action>drop_resource</Action></Sequence><Action>continue_moving_randomly</Action></Selector></Sequence></Selector></BehaviorTree> 
### 
3.// INSTRUCTIONS: Use only the following behaviors {'go_to_location': 'Action: Move agent to specified location. Always returns True.', 'is_location_reached': 'Condition: Checks if agent has reached specified location. Returns True if location is reached, False otherwise.', 'avoid_collision': 'Action: Avoid collisions with other agents. Always returns True.', 'switch_to_silent_mode': 'Action: Switch to silent mode to minimize detection. Always returns True.', 'detect_enemy': 'Condition: Check for enemy in sight. Returns True if enemy is in sight, False otherwise.', 'is_enemy_alive': 'Condition: Check if enemy is still alive. Returns True if enemy is still alive, False otherwise', 'attack_enemy': 'Action: Attack the enemy. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3.// USER COMMAND: Move to a designated location, switch to silent mode, detect and attack enemy, and avoid collisions with other agents.
3.// OUTPUT:
<BehaviorTree><Sequence><Action>go_to_location</Action><Action>switch_to_silent_mode</Action><Sequence><Condition>detect_enemy</Condition><Sequence><Condition>is_enemy_alive</Condition><Action>attack_enemy</Action></Sequence></Sequence><Action>avoid_collision</Action></Sequence></BehaviorTree>

### 
4.// INSTRUCTIONS: Use only the following behaviors {'move_to_target': 'Action: Move towards target location. Always returns True.', 'is_on_path': 'Condition: Checks if agent is on a designated path. Returns True if on path, False otherwise.', 'detect_collisions': 'Condition: Checks for collisions with other agents. Returns True if collision is detected, False otherwise.', 'stop_motion': 'Action: Stop agent's movement. Always returns True.', 'gather_resources': 'Action: Gather nearby resources. Always returns True.', 'build_structure': 'Action: Build a designated structure. Always returns True.', 'is_structure_complete': 'Condition: Checks if designated structure is complete. Returns True if complete, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Move towards designated location, gather resources, build structure and stop movement once structure is complete.
4.// OUTPUT:
<BehaviorTree><Sequence><Action>move_to_target</Action><Action>gather_resources</Action><Sequence><Action>build_structure</Action><Condition>is_structure_complete</Condition></Sequence><Action>stop_motion</Action></Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'send_message': 'Action: Send a message to other agents. Always returns True.', 'is_message_received': 'Condition: Check if a message has been received. Returns True if message has been received, False otherwise.', 'identify_target': 'Action: Identify an enemy target. Always returns True.', 'track_target': 'Action: Track the identified target. Always returns True.', 'engage_target': 'Action: Engage the target in battle. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Send message to other agents, identify and track target, and engage target in battle.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Sequence><Action>send_message</Action><Condition>is_message_received</Condition></Sequence><Sequence><Action>identify_target</Action><Action>track_target</Action><Action>engage_target</Action></Sequence></Sequence><Action>say(Sorry, I can't do the task)</Action></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'search_for_food': 'Subtree node: Represents a behavior tree for searching and collecting food resources.', 'is_hungry': 'Condition: Checks if agent's hunger level is low. Returns True if hungry, False otherwise.', 'is_thirsty': 'Condition: Checks if agent's thirst level is low. Returns True if thirsty, False otherwise.', 'drink_water': 'Action: Drink nearby water source. Always returns True.', 'eat_food': 'Action: Eat nearby food source. Always returns True.', 'find_shelter': 'Action: Move towards designated shelter location. Always returns True.', 'is_shelter_reached': 'Condition: Checks if agent has reached designated shelter. Returns True if shelter is reached, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: If agent is hungry, search for food and eat. If agent is thirsty, drink water. If agent is tired, move towards designated shelter location.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_hungry</Condition><Sequence><Action>search_for_food</Action><Action>eat_food</Action></Sequence></Sequence><Condition>is_thirsty</Condition><Action>drink_water</Action></Sequence><Sequence><Condition>is_tired</Condition><Sequence><Action>find_shelter</Action><Condition>is_shelter_reached</Condition></Sequence></Sequence></Selector></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'collect_resource': 'Action: Collect nearby resources. Always returns True.', 'build_structure': 'Action: Build a designated structure. Always returns True.', 'is_inventory_full': 'Condition: Checks if agent's inventory is full. Returns True if full, False otherwise.', 'move_to_target': 'Action: Move towards designated location. Always returns True.', 'is_in_combat': 'Condition: Checks if agent is in combat. Returns True if in combat, False otherwise.', 'attack_enemy': 'Action: Attack the enemy. Always returns True.', 'heal': 'Action: Use first aid kit to heal any wounded agents. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: Collect resources, build structure, and heal wounded agents while in combat.
7.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Action>collect_resource</Action><Sequence><Action>build_structure</Action><Condition>is_inventory_full</Condition></Sequence></Sequence><Action>say(Sorry, I can't do the task)</Action></Selector><Condition>is_in_combat</Condition><Selector><Sequence><Action>attack_enemy</Action><Action>heal</Action></Sequence><Action>say(Sorry, I can't do the task)</Action></Selector></Sequence></BehaviorTree>                            
###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'follow_path': 'Subtree node: Continuously follows a designated path.', 'random_movement': 'Action: Moves randomly in the environment. Always returns True.', 'in_radius': 'Event: Triggers when another agent is within the specified radius. Returns True if an agent is within radius, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Continuously follow a designated path while avoiding obstacles. If another agent is within a 10-unit radius, freeze movement and change color to green.
4.// OUTPUT:
<BehaviorTree><Sequence><Subtree>follow_path</Subtree><Selector><Condition>is_obstacle_detected</Condition><Action>avoid_obstacle</Action></Selector></Sequence><Trigger>in_radius</Trigger><Sequence><Action>agent_movement_freeze</Action><Action>change_color_to_green</Action></Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'change_direction': 'Action: Change the robot's movement direction randomly. Always returns True.', 'navigate_obstacle': 'Subtree node: Represents a behavior tree for navigating obstacles.', 'detect_target': 'Event: Triggers when a target is detected within the robot's field of view. Returns True if a target is detected, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Continuously navigate the environment, changing direction randomly if no target is detected. When a target is detected, stop and wait for further instructions.
5.// OUTPUT:
<BehaviorTree><Sequence><Subtree>navigate_obstacle</Subtree><Condition>is_target_detected</Condition><Sequence><Action>change_direction</Action><Trigger>detect_target</Trigger><Action>agent_movement_freeze</Action></Sequence></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'communicate': 'Action: Sends a message to other robots in the swarm. Returns True if message is successfully sent, False otherwise.', 'receive_message': 'Action: Receives a message from other robots in the swarm. Returns True if message is successfully received, False otherwise.', 'distribute_task': 'Subtree node: Assigns a specific task to a designated number of robots from the swarm.', 'collect_data': 'Subtree node: Represents a behavior tree for performing data collection.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Assign 5 robots to collect data and send a message to the rest of the swarm when the data collection is complete.
6.// OUTPUT:
<BehaviorTree><Subtree>distribute_task</Subtree><Subtree>collect_data</Subtree><Validation><Sequence><Subtree>communicate</Subtree><Subtree>receive_message</Subtree></Sequence></Validation></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'search_target': 'Event: Triggers when a target is detected within the robot's field of view. Returns True if a target is detected, False otherwise.', 'attack_target': 'Action: Initiates attack on the detected target. Returns True if attack is successful, False otherwise.', 'is_health_low': 'Condition: Checks if the robot's health is below a specified threshold. Returns True if health is low, False otherwise.', 'navigate_to_safe_area': 'Subtree node: Represents a behavior tree for finding and moving to a safe area in the environment.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: Continuously search for a target, attacking it if found, but also regularly checking for low health and moving to a safe area if health is low.
7.//OUTPUT:
<BehaviorTree><Sequence><Event>search_target</Event><Action>attack_target</Action></Sequence><Selector><Condition>is_health_low</Condition><Subtree>navigate_to_safe_area</Subtree></Selector></BehaviorTree>

 ###
4.// INSTRUCTIONS: Use only the following behaviors {'gather': 'Action: Gather necessary resources. Always returns True.', 'build': 'Action: Build a structure. Always returns True.', 'deposit': 'Action: Deposit resources into storage. Always returns True.', 'is_inventory_full': 'Condition: Check if inventory is full. Returns True if inventory is full, False otherwise.', 'is_resource_available': 'Condition: Check if any resources are available in the environment. Returns True if resources are available, False otherwise.', 'is_storage_full': 'Condition: Check if storage is full. Returns True if storage is full, False otherwise.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: gather resources, build a structure, and deposit remaining resources into storage if inventory is full.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_resource_available</Condition><Sequence><Action>gather</Action><Condition>is_inventory_full</Condition><Sequence><Action>build</Action><Condition>is_storage_full</Condition><Action>deposit</Action></Sequence></Sequence></Sequence><Action>wander</Action></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'detect_enemy_nearby': 'Condition: Check if an enemy is within 10 units. Returns True if an enemy is detected, False otherwise.', 'attack': 'Action: Attack enemies. Always returns True.', 'move_to_start_position': 'Action: Move to designated starting position. Always returns True.', 'is_at_start_position': 'Condition: Check if robot is at designated starting position. Returns True if at starting position, False otherwise.', 'is_selected': 'Condition: Check if robot is currently selected. Returns True if robot is selected, False otherwise.', 'teleport': 'Action: Teleport to a random location. Always returns True.', 'is_teleport_available': 'Condition: Check if teleport ability is available. Returns True if available, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: if enemy detected, attack. Otherwise, teleport to a random location.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>detect_enemy_nearby</Condition><Action>attack</Action></Sequence><Sequence><Condition>is_teleport_available</Condition><Action>teleport</Action></Sequence></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'move_to_position': 'Action: Move to designated position. Always returns True.', 'is_target_in_range': 'Condition: Check if target is within 25 units. Returns True if target is within range, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'gather_resource': 'Action: Gather nearest resource. Always returns True.', 'is_resource_available': 'Condition: Check if any resources are available in the environment. Returns True if resources are available, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: move to target position without colliding with obstacles, gather resources if available or continue moving to position.
6.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_target_in_range</Condition><Sequence><Condition>is_obstacle_detected</Condition><Action>avoid_obstacle</Action></Sequence><Sequence><Condition>is_resource_available</Condition><Action>gather_resource</Action></Sequence><Action>move_to_position</Action></Sequence></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'patrol': 'Action: Patrol designated area. Always returns True.', 'notify_leader': 'Action: Notify leader of any detected enemies. Always returns True.', 'evade': 'Action: Evade from enemy attacks. Always returns True.', 'is_enemy_detected': 'Condition: Check if an enemy is detected. Returns True if enemy is detected, False otherwise.', 'is_at_designated_location': 'Condition: Check if robot is at designated area. Returns True if at designated area, False otherwise.', 'is_leader_present': 'Condition: Check for presence of leader. Returns True if leader is present, False otherwise.', 'search': 'Action: Search for any enemies. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: if leader is present, patrol designated area. If no leader is present, evade enemy attacks and notify leader of any detected enemies, then continue searching.
7.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_leader_present</Condition><Action>patrol</Action></Sequence><Sequence><Condition>is_enemy_detected</Condition><Action>evade</Action><Action>notify_leader</Action></Sequence></Selector><Action>search</Action></BehaviorTree>###
3.// INSTRUCTIONS: Use only the following behaviors {'collect_resources': 'Action: Collect any available resources in the current area and add them to the robot's inventory. Returns True if resources are successfully collected, False otherwise.', 'deposit_resources': 'Action: Deposit all resources from the robot's inventory into a designated storage area. Returns True if resources are successfully deposited, False otherwise.', 'has_inventory_space': 'Condition: Check if the robot has enough space in its inventory to collect more resources. Returns True if there is space, False otherwise.', 'is_storage_full': 'Condition: Check if the designated storage area is full and cannot accept any more resources. Returns True if the storage is full, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3.// USER COMMAND: Generate behavior tree for a robot to gather and deposit resources in a resource collection game
3.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_storage_full</Condition><Selector><Sequence><Condition>has_inventory_space</Condition><Selector><Sequence><Condition>collect_resources</Condition><Action>deposit_resources</Action></Sequence><Action>move_to_next_area</Action></Selector></Sequence><Action>game_over</Action></Selector></Sequence></BehaviorTree>

###
4.// INSTRUCTIONS: Use only the following behaviors {'recharge_battery': 'Action: Recharge the robot's battery for a designated amount of time. Returns True if the battery is fully charged, False otherwise.', 'navigate_to_recharge_station': 'Action: Navigate the robot to the nearest recharge station. Returns True if the robot reaches the station, False otherwise.', 'is_battery_low': 'Condition: Check if the robot's battery is below a certain threshold. Returns True if the battery is low, False otherwise.', 'is_at_recharge_station': 'Condition: Check if the robot is currently at a recharge station. Returns True if the robot is at the station, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Generate behavior tree for a robot to autonomously manage its battery life while performing tasks
4.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_battery_low</Condition><Selector><Sequence><Condition>is_at_recharge_station</Condition><Sequence><Action>recharge_battery</Action><Action>update_battery_level</Action></Sequence><Action>navigate_to_recharge_station</Action></Selector></Sequence><Action>complete_task</Action></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'follow_leader': 'Action: Follow designated leader robot and maintain a safe distance. Returns True as long as the leader is in range.', 'avoid_obstacles': 'Action: Use sensors to detect and avoid any obstacles in the robot's path. Returns True after successfully navigating around the obstacle.', 'wait_for_instructions': 'Condition: Check if the robot has received new instructions from the leader. Returns True if new instructions have been received, False otherwise.', 'leader_at_destination': 'Condition: Check if the leader robot has reached the designated destination. Returns True if the leader is at the destination, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Generate behavior tree for a swarm of robots to follow the designated leader and coordinate their movements
5.// OUTPUT:
<BehaviorTree><Sequence><Condition>leader_at_destination</Condition><Selector><Sequence><Condition>wait_for_instructions</Condition><Selector><Sequence><Condition>avoid_obstacles</Condition><Action>follow_leader</Action></Sequence><Action>navigate_to_leader</Action></Selector></Sequence></Selector></Sequence></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'detect_enemy': 'Action: Use sensors to detect any enemy presence in the area. Returns True if an enemy is detected, False otherwise.', 'engage_enemy': 'Action: Engage the detected enemy by moving towards them and attacking. Returns True after successfully engaging the enemy.', 'retreat': 'Action: Retreat back to a safe location in case of enemy attack. Returns True if the robot reaches the safe location, False otherwise.', 'is_squad_in_position': 'Condition: Check if all robots in the squad are in position and ready to engage. Returns True if all robots are in position, False otherwise.', 'is_enemy_engaged': 'Condition: Check if the enemy has been successfully engaged. Returns True if the enemy is engaged, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Generate behavior tree for a squad of robots to engage and defeat enemy forces
6.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_squad_in_position</Condition><Selector><Sequence><Condition>is_enemy_engaged</Condition><Selector><Sequence><Condition>detect_enemy</Condition><Action>engage_enemy</Action></Sequence><Action>retreat</Action></Selector></Sequence><Action>call_for_back_up</Action></Selector></Sequence></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'find_food': 'Action: Use sensors to find the nearest food source. Returns True if a food source is detected, False otherwise.', 'eat_food': 'Action: Consume the food source found. Returns True after successfully consuming the food.', 'track_food_level': 'Condition: Check the robot's food level. Returns True if the food level is above a certain threshold, False otherwise.', 'track_distance_to_food': 'Condition: Check the distance to the nearest food source. Returns True if the food source is within range, False otherwise.', 'is_hungry': 'Condition: Check if the robot's food level is critically low. Returns True if the robot is hungry, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: Generate behavior tree for a robot to autonomously find and consume food to maintain its energy level
7.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_hungry</Condition><Selector><Sequence><Condition>track_distance_to_food</Condition><Selector><Sequence><Condition>track_food_level</Condition><Selector><Sequence><Condition>find_food</Condition><Action>eat_food</Action></Sequence><Action>navigate_to_food</Action></Selector></Sequence><Action>forage_for_food</Action></Selector></Sequence></Selector></Sequence></BehaviorTree>
###
3.// INSTRUCTIONS: Use only the following behaviors {'move_forward': 'Action: Move forward 1 unit. Always returns True.', 'move_backward': 'Action: Move backward 1 unit. Always returns True.', 'turn_left': 'Action: Turn left 90 degrees. Always returns True.', 'turn_right': 'Action: Turn right 90 degrees. Always returns True.', 'is_obstacle_ahead': 'Condition: Check if an obstacle is detected ahead. Returns True if an obstacle is detected, False otherwise.', 'is_target_reached': 'Condition: Check if the target is reached. Returns True if the target is within 1 unit of distance, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3.// USER COMMAND: Generate behavior tree for a robot to navigate through a maze and reach the target.
3.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_obstacle_ahead</Condition><Sequence><Selector><Action>move_forward</Action><Selector><Action>turn_left</Action><Action>turn_right</Action></Selector></Selector><Condition>is_target_reached</Condition></Sequence></Sequence></BehaviorTree>

###
4.// INSTRUCTIONS: Use only the following behaviors {'collect_resource': 'Action: Collect a resource from the environment. Always returns True.', 'drop_resource': 'Action: Drop a collected resource. Always returns True.', 'is_nest_reached': 'Condition: Check if the robot has reached the nest. Returns True if the robot is in the nest, False otherwise.', 'is_resource_present': 'Condition: Check if a resource is present in the environment. Returns True if a resource is detected, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Generate behavior tree for a robot to collect resources and bring them back to the nest.
4.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_resource_present</Condition><Sequence><Action>collect_resource</Action><Condition>is_nest_reached</Condition><Action>drop_resource</Action></Sequence></Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'move_towards_target': 'Action: Move towards the designated target location. Always returns True.', 'move_away_from_obstacle': 'Action: Move away from an obstacle. Always returns True.', 'is_obstacle_detected': 'Condition: Check if an obstacle is detected in front of the robot. Returns True if an obstacle is detected, False otherwise.', 'is_target_reached': 'Condition: Check if the target location is reached. Returns True if the target location is within 1 unit of distance, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Generate behavior tree for a robot to navigate through a cluttered area and reach the designated target location.
5.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_obstacle_detected</Condition><Sequence><Selector><Action>move_towards_target</Action><Selector><Action>move_away_from_obstacle</Action><Action>wander</Action></Selector></Selector><Condition>is_target_reached</Condition></Sequence></Sequence></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'move_to_nearest_food': 'Action: Move to the nearest food source. Always returns True.', 'gather_food': 'Action: Gather food from the food source. Always returns True.', 'is_roaming': 'Condition: Check if the robot is just roaming around. Returns True if the robot is moving without a specific target, False otherwise.', 'is_food_available': 'Condition: Check if there is food available in the environment. Returns True if there is food, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Generate behavior tree for a robot to scavenge for food in the environment.
6.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_roaming</Condition><Sequence><Condition>is_food_available</Condition><Sequence><Action>move_to_nearest_food</Action><Action>gather_food</Action></Sequence><Action>wander</Action></Sequence></Sequence></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'communicate_with_teammate': "Action: Send a message to a teammate. Always returns True.", 'is_team_member_ready': 'Condition: Check if a team member is ready to collaborate. Returns True if the team member is ready, False otherwise.', 'is_task_completed': 'Condition: Check if the team has completed the given task. Returns True if the task is completed, False otherwise.', 'work_together': 'Action: Work together with team member to complete a task. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: Generate behavior tree for a swarm of robots to collaborate and complete a given task.
7.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_task_completed</Condition><Sequence><Condition>is_team_member_ready</Condition><Action>work_together</Action><Action>communicate_with_teammate</Action></Sequence></Sequence><Action>wander</Action></Selector></BehaviorTree>
###
3.// INSTRUCTIONS: Use only the following behaviors {'gather_resources': 'Action: Gather resources in the designated area. Returns True when enough resources are collected.', 'build_structure': 'Action: Use gathered resources to build a designated structure. Returns True when complete.', 'has_resources': 'Condition: Checks if the robot has enough resources to perform a task. Returns True if enough resources are available, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3.// USER COMMAND: Build a shelter for the swarm using gathered resources.
3.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>has_resources</Condition><Action>gather_resources</Action></Sequence><Action>build_structure</Action><Sequence><Condition>has_resources</Condition><Action>gather_resources</Action></Sequence><Action>build_structure</Action><Sequence><Condition>has_resources</Condition><Action>gather_resources</Action></Sequence><Action>build_structure</Action></Selector></Sequence></BehaviorTree>

###
4.// INSTRUCTIONS: Use only the following behaviors {'pick_target': 'Action: Pick a target for the swarm to attack. Returns True when a target is selected.', 'move_to_target': 'Action: Move the swarm to the selected target. Returns True when the target is reached.', 'attack': 'Action: Attack the target. Returns True when the target is destroyed.', 'has_target': 'Condition: Checks if the swarm has a target to attack. Returns True if a target is selected, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Coordinate a swarm attack on an enemy base.
4.// OUTPUT:
<BehaviorTree><Sequence><Action>pick_target</Action><Action>move_to_target</Action><Sequence><Condition>has_target</Condition><Action>attack</Action></Sequence></Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'build_base': 'Action: Build a base for the swarm using gathered resources. Returns True when the base is complete.', 'gather_resources': 'Action: Explore and gather resources. Returns True when enough resources are collected.', 'move_to_resource': 'Action: Move the swarm to a resource-rich area. Returns True when the area is reached.', 'has_enough_resources': 'Condition: Checks if the swarm has enough resources to build a base. Returns True if enough resources are available, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Establish a base for the swarm in a resource-rich location.
5.// OUTPUT:
<BehaviorTree><Sequence><Condition>has_enough_resources</Condition><Action>build_base</Action></Sequence><Sequence><Action>move_to_resource</Action><Action>gather_resources</Action></Sequence><Action>build_base</Action></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'detect_intruder': 'Function: Use sensors to detect unauthorized intruders in the swarm\'s territory. Returns True if an intruder is detected, False otherwise.', 'scout_area': 'Action: Send out scouting drones to explore the designated area. Returns True when the area has been scouted.', 'defend_swarm': 'Action: Deploy defense mechanisms to protect the swarm against intruders. Returns True when the swarm is safe.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Ensure the swarm's territory is secure and protected from intruders.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>detect_intruder</Action><Sequence><Condition>is_intruder_detected</Condition><Selector><Sequence><Action>scout_area</Action><Sequence><Condition>is_intruder_detected</Condition><Action>defend_swarm</Action></Sequence></Selector></Sequence></Sequence></Selector></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'navigate_to_goal': 'Action: Use sensors and path planning algorithms to navigate to the designated goal. Returns True when the goal is reached.', 'avoid_obstacles': 'Function: Use sensors to detect and avoid any obstacles in the path. Returns True when the path is clear.', 'collect_data': 'Action: Collect data from the environment using sensors and process it for further use. Returns True when the data is collected.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: Navigate through a complex environment and collect data for further analysis.
7.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Action>avoid_obstacles</Action><Action>collect_data</Action></Sequence><Sequence><Condition>is_goal_reached</Condition><Action>collect_data</Action></Sequence><Selector><Sequence><Action>navigate_to_goal</Action><Action>avoid_obstacles</Action></Sequence></Selector></Selector></Sequence></BehaviorTree>
###
3.// INSTRUCTIONS: Use only the following behaviors {'is_agent_lost': 'Condition: Check if agent is lost. Returns True if the agent is unable to detect the environment, False otherwise.', 'is_agent_returned_to_start': 'Condition: Check if agent has reached the starting position. Returns True if the agent has returned to the starting position, False otherwise.', 'is_at_resource': 'Condition: Check if agent is at a resource location. Returns True if the agent is at a resource location, False otherwise.', 'collect_resource': 'Action: Collect resource from current location. Returns True after resource is collected.', 'return_to_start': 'Action: Return to starting position. Returns True after reaching starting position.', 'is_check_point_reached': 'Condition: Check if a specific checkpoint is reached. Returns True if the checkpoint index matches the current location index, False otherwise.', 'move_to_checkpoint': 'Action: Move to the specified checkpoint. Returns True after reaching checkpoint.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3.// USER COMMAND: generate behavior tree to 'Collect resources at 5 different locations and return to starting position'.Output only the XML behavior tree without extra text.
3.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>is_at_resource</Condition> <Action>collect_resource</Action> </Sequence> <Action>move_to_checkpoint</Action> </Selector> <Selector> <Sequence> <Condition>is_check_point_reached</Condition> <Action>return_to_start</Action> </Sequence> <Action>move_to_checkpoint</Action> </Selector> </Sequence> </BehaviorTree>

###
4.// INSTRUCTIONS: Use only the following behaviors {'is_in_crowded_area': 'Condition: Check if agent is in crowded area. Returns True if the number of agents nearby exceeds a certain threshold, False otherwise.', 'move_to_safe_area': 'Action: Move to a safe area with less agents nearby. Returns True after reaching the safe area.', 'deposit_collected_resources': 'Action: Deposit all collected resources at a designated location. Returns True after all resources are deposited.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Avoid crowded areas and deposit resources at the designated location'.Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>is_in_crowded_area</Condition> <Action>move_to_safe_area</Action> </Sequence> <Action>move_to_designated_location</Action> <Sequence> <Condition>is_at_resource</Condition> <Action>deposit_collected_resources</Action> </Sequence> </Selector> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'count_adjacent_agents': 'Condition: Count the number of adjacent agents within a specific radius. Returns True after counting.', 'is_adjacent_active': 'Condition: Check if there are active agents nearby. Returns True if there are active agents within the specified radius, False otherwise.', 'communicate_with_adjacent_agents': 'Action: Send and receive messages from nearby agents. Returns True after successful communication.', 'coordinate_movement': 'Action: Coordinate movement with adjacent agents. Returns True after successfully coordinating.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Communicate and coordinate with adjacent agents to achieve a common goal'. Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree> <Sequence> <Condition>is_adjacent_active</Condition> <Action>communicate_with_adjacent_agents</Action> </Sequence> <Action>coordinate_movement</Action> <Sequence> <Condition>count_adjacent_agents</Condition> <Action>communicate_with_adjacent_agents</Action> </Sequence> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'is_nearby_agent_down': 'Condition: Check if an adjacent agent is down and needs assistance. Returns True if a downed agent is detected, False otherwise.', 'send_assistance_signal': 'Action: Send a signal to nearby agents for assistance. Returns True after signal is sent.', 'coordinate_rescue_operation': 'Action: Coordinate rescue operation with nearby agents. Returns True after successfully coordinating.', 'is_rescue_successful': 'Condition: Check if the rescue operation was successful. Returns True if the downed agent has been rescued, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Coordinate and execute a rescue operation to save a downed agent'. Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree> <Sequence> <Condition>is_nearby_agent_down</Condition> <Action>send_assistance_signal</Action> </Sequence> <Action>coordinate_rescue_operation</Action> <Sequence> <Condition>is_rescue_successful</Condition> <Action>task_completed</Action> </Sequence> </BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'is_water_detected': 'Condition: Check if water is detected in the environment. Returns True if water is detected, False otherwise.', 'is_agent_fully_filled': 'Condition: Check if the agent's water tank is full. Returns True if the water tank is full, False otherwise.', 'detect_dangerous_predators': 'Condition: Check for any dangerous predators nearby. Returns True if predators are detected, False otherwise.', 'avoid_dangerous_predators': 'Action: Avoid any dangerous predators detected. Returns True after successfully avoiding predators.', 'water_plants': 'Action: Water the surrounding plants using the agent's water tank. Returns True after watering plants.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: generate behavior tree to 'Detect and avoid dangerous predators while watering plants using available water'. Output only the XML behavior tree without extra text.
7.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>detect_dangerous_predators</Condition> <Action>avoid_dangerous_predators</Action> </Sequence> <Action>move_to_plants</Action> <Sequence> <Condition>is_water_detected</Condition> <Action>water_plants</Action> </Sequence> <Selector> <Condition>is_agent_fully_filled</Condition> <Action>task_completed</Action> <Action>water_plants</Action> </Selector> </Enumeration> </BehaviorTree> 
###
3.// INSTRUCTIONS: Use only the following behaviors {'dig_hole': 'Action: Dig a hole to bury food. Always returns True.', 'cover_hole': 'Action: Cover the hole with dirt. Always returns True.', 'is_food_available': 'Condition: Check if there is food available in the surroundings. Returns True if food is detected, False otherwise.', 'is_hole_dug': 'Condition: Check if a hole has already been dug. Returns True if a hole is present, False otherwise.', 'is_hole_covered': 'Condition: Check if the hole has been covered. Returns True if the hole is covered, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3.// USER COMMAND: Design a behavior tree for a swarm of robots to collect food and store it by digging and covering holes.
3.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_food_available</Condition><Sequence><Condition>is_hole_dug</Condition><Selector><Sequence><Condition>is_hole_covered</Condition><Action>dig_hole</Action></Sequence><Action>cover_hole</Action></Selector></Sequence></Sequence><Action>move_to_food_source</Action></Selector></BehaviorTree>

###
4.// INSTRUCTIONS: Use only the following behaviors {'scan_environment': 'Action: Scan the environment for potential resources. Always returns True.', 'collect_resource': 'Action: Collect the resource from the designated location. Always returns True.', 'is_resource_reachable': 'Condition: Check if the designated resource is reachable. Returns True if reachable, False otherwise.', 'is_resource_collected': 'Condition: Check if the designated resource has been collected. Returns True if collected, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Create a behavior tree for a swarm of robots to scan and collect resources from designated locations.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>scan_environment</Action><Condition>is_resource_reachable</Condition><Action>collect_resource</Action></Sequence><Sequence><Condition>not_reachable</Condition><Action>move_to_next_designated_location</Action></Sequence><Action>stop_moving</Action></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'explore_terrain': 'Action: Explore unknown terrain. Always returns True.', 'map_surroundings': 'Action: Map the surroundings using sensors and create a map of the area. Always returns True.', 'is_map_complete': 'Condition: Check if the map of the surroundings is complete. Returns True if the map is complete, False otherwise.', 'navigate_to_marker': 'Action: Use the mapped markers to navigate through the terrain. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Use a swarm of robots to explore unknown terrain and create a complete map of the surroundings.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>explore_terrain</Action><Condition>is_map_complete</Condition><Action>map_surroundings</Action></Sequence><Action>navigate_to_marker</Action></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'analyze_environment': 'Action: Use sensors to analyze the environment for potential hazards. Always returns True.', 'avoid_hazard': 'Action: Move away from the detected hazard. Always returns True.', 'is_hazard_detected': 'Condition: Check if there is a hazard detected in the environment. Returns True if hazard is detected, False otherwise.', 'is_at_safe_location': 'Condition: Check if the robot is at a safe location, away from any detected hazards. Returns True if at a safe location, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Design a behavior tree for a swarm of robots to analyze and avoid potential hazards in the environment.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_hazard_detected</Condition><Selector><Sequence><Action>avoid_hazard</Action><Condition>not_at_safe_location</Condition></Sequence><Action>move_to_safe_location</Action></Selector></Sequence><Action>analyze_environment</Action></Selector></BehaviorTree>

###
7.// INSTRUCTIONS: // INSTRUCTIONS: Use only the following behaviors {'request_help': 'Action: Send a request for help to nearby robots. Always returns True.', 'follow_leader': 'Action: Follow the designated leader and perform tasks as directed. Always returns True.', 'is_leader_available': 'Condition: Check if the designated leader robot is available. Returns True if leader is available, False otherwise.', 'is_task_complete': 'Condition: Check if the assigned task has been completed. Returns True if task is completed, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: Create a behavior tree for a swarm of robots to request help and follow a designated leader to complete tasks.
7.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_leader_available</Condition><Action>follow_leader</Action></Sequence><Action>request_help</Action></Selector><Action>perform_assigned_task</Action></BehaviorTree> 
###
4.// INSTRUCTIONS: Use only the following behaviors {'random_direction': 'Action: Choose a random direction for the agent to move. Always returns True.', 'avoid_collision': 'Condition: Check for potential collisions with other agents. Returns True if a collision is possible, False otherwise.', 'social_gathering': 'Action: Move towards a group of agents within a certain distance for social gathering. Always returns True.', 'back_to_nest': 'Action: Navigate back to the nest. Always returns True.', 'distance_from_nest': 'Condition: Check the distance of the agent from the nest. Returns True if the agent is within 10 units from the nest, False otherwise.', 'explore_new_area': 'Action: Move towards unexplored areas of the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Navigate back to the nest while avoiding potential collisions and gathering with other agents on the way.
4.// OUTPUT:
<BehaviorTree><Sequence><Condition>avoid_collision</Condition><Sequence><Action>social_gathering</Action><Condition>distance_from_nest</Condition></Sequence><Action>back_to_nest</Action></Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'explore': 'Subtree node: Represents a behavior tree for exploring the environment.', 'deliver_package': 'Subtree node: Represents a behavior tree for delivering packages. Returns True when package is delivered, False otherwise.', 'wait_for_delivery': 'Action: Wait for delivery to be completed before resuming exploration. Returns True when delivery is completed, False otherwise.', 'near_delivery_location': 'Condition: Check if the agent is near the delivery location. Returns True if within 5 units of distance, False otherwise.', 'collect_package': 'Action: Collect the package for delivery. Returns True when the package is collected, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Explore the environment while also delivering a package.
5.// OUTPUT:
<BehaviorTree><Action>explore</Action><Trigger>deliver_package</Trigger><Sequence><Action>wait_for_delivery</Action><Trigger>near_delivery_location</Trigger><Action>collect_package</Action></Sequence></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'allocate_task_to_agent': "Action: Allocate a specific task to a designated agent. Returns True when task is successfully allocated, False otherwise.", 'task_completed': 'Condition: Check if allocated task is completed by the designated agent. Returns True if completed, False otherwise.', 'change_agent_destination': 'Action: Change agent's destination to a designated location. Returns True when destination is updated, False otherwise.', 'on_agent_arrival': "Event: Triggers when the designated agent arrives at its destination. Returns True if destination is reached, False otherwise.", 'wait_for_designated_agent': 'Action: Wait for the designated agent to arrive at its destination before resuming. Returns True when agent arrives, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Assign a task to agentX, change agentX's destination, and wait for agentX to arrive before resuming.
6.// OUTPUT:
<BehaviorTree><Action>allocate_task_to_agentX</Action><Action>change_agent_destination</Action><Trigger>on_agent_arrival</Trigger><Action>wait_for_designated_agentX</Action><Sequence><Condition>task_completed</Condition><Action>task_completed</Action></Sequence></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'gather_food': 'Action: Gather food from a designated location. Returns True when food is successfully collected, False otherwise.', 'drop_food': 'Action: Drop food at a designated location. Returns True when food is successfully dropped, False otherwise.', 'food_inventory': 'Condition: Check the current amount of food in the agent's inventory. Returns True if food is available, False otherwise.', 'distribute_food': 'Action: Distribute food among multiple agents at a designated location. Returns True when food is successfully distributed, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: Gather food from locationA, drop it off at locationB, and distribute it among other agents at locationC.
7.// OUTPUT:
<BehaviorTree><Action>gather_food_from_locationA</Action><Condition>food_inventory</Condition><Action>drop_food_at_locationB</Action><Action>distribute_food_at_locationC</Action></BehaviorTree>###
3.// INSTRUCTIONS: Use only the following behaviors {'is_agent_stuck': 'Condition: Check if agent is stuck at a particular point. Returns True if stuck, False otherwise.', 'change_color_to_yellow': "Action: Change agent's color to yellow. Always returns True.", 'is_random_event_detected': 'Condition: Check if a random event has occurred in the environment. Returns True if event has occurred, False otherwise.', 'return_to_nest': 'Action: Return to the nest. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.', 'explore': 'Action: Move towards an unexplored area within the environment. Always returns True.', 'is_area_explored': 'Condition: Check if current area is explored. Returns True if area is explored, False otherwise.', 'drop_food_pheromones': "Action: Drop food pheromones in the current location. Always returns True.", 'pickup_food_pheromones': "Action: Pick up food pheromones in the current location. Always returns True."}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3.// USER COMMAND: generate behavior tree to 'explore the environment until a random event is detected, then return to the nest and drop food pheromones along the way'
3.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_random_event_detected</Condition><Sequence><Condition>is_area_explored</Condition><Action>explore</Action></Sequence></Sequence><Sequence><Condition>is_area_explored</Condition><Action>wander</Action></Sequence><Sequence><Condition>is_agent_stuck</Condition><Action>return_to_nest</Action><Sequence><Condition>is_agent_stuck</Condition><Action>return_to_nest</Action></Sequence></Sequence><Action>change_color_to_yellow</Action><Action>drop_food_pheromones</Action><Action>change_color_to_yellow</Action><Action>drop_food_pheromones</Action></BehaviorTree>

###
4.// INSTRUCTIONS: Use only the following behaviors {'is_agent_in_collision': 'Condition: Check if the agent is in collision with another agent. Returns True if in collision, False otherwise.', 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_blue': "Action: Change agent's color to blue. Always returns True.", 'is_target_in_sight': 'Condition: Check if the target is in the line of sight. Returns True if target is visible, False otherwise.', 'follow_target': 'Action: Follow the target. Always returns True.', 'stop_following': 'Action: Stop following the target and return to the previous task. Always returns True.', 'is_at_checkpoint': 'Condition: Check if the agent has arrived at a designated checkpoint. Returns True if at checkpoint, False otherwise.', 'move_to_checkpoint': 'Action: Move towards a designated checkpoint. Always returns True.', 'start_search_pattern': 'Action: Begin a predetermined search pattern. Always returns True.', 'end_search_pattern': 'Action: End the current search pattern and return to the previous task. Always returns True.', 'is_obstacle_nearby': 'Condition: Check for obstacles within 10 units. Returns True if obstacle is detected, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'follow target, but if agent is in collision, perform a search pattern and continue following target when obstacle is no longer detected'
4.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_target_in_sight</Condition><Sequence><Condition>is_agent_in_collision</Condition><Action>start_search_pattern</Action><Sequence><Condition>is_obstacle_nearby</Condition><Action>avoid_obstacle</Action></Sequence><Action>end_search_pattern</Action><Sequence><Condition>is_obstacle_nearby</Condition><Action>follow_target</Action></Sequence></Sequence></Sequence><Sequence><Condition>is_at_checkpoint</Condition><Action>move_to_checkpoint</Action></Sequence><Action>change_color_to_blue</Action><Sequence><Condition>is_at_checkpoint</Condition><Action>stop_following</Action></Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'is_agent_in_reset_mode': 'Condition: Check if the agent is in reset mode. Returns True if in reset mode, False otherwise.', 'reset_agent': 'Action: Reset the agent to its starting position and color. Always returns True.', 'is_agent_on_fire': 'Condition: Check if the agent is on fire. Returns True if on fire, False otherwise.', 'put_out_fire': 'Action: Put out the fire on the agent. Always returns True.', 'escape': 'Action: Move towards the designated escape location. Always returns True.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'drop_water_pheromones': 'Action: Drop water pheromones in the current location. Always returns True.', 'pickup_water_pheromones': 'Action: Pick up water pheromones in the current location. Always retruns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'if agent is in reset mode, put out any fire and then escape to the designated location while avoiding obstacles'
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_agent_on_fire</Condition><Action>put_out_fire</Action><Sequence><Condition>is_obstacle_detected</Condition><Action>drop_water_pheromones</Action></Sequence><Action>continue_to_escape</Action></Sequence><Sequence><Condition>is_agent_on_fire</Condition><Action>escape</Action></Sequence><Sequence><Condition>is_agent_in_reset_mode</Condition><Action>reset_agent</Action></Sequence><Action>avoid_obstacle</Action><Action>drop_water_pheromones</Action></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'is_nest_nearby': 'Condition: Check if nest is within 10 units. Returns True if nest is nearby, False otherwise.', 'return_to_nest': 'Action: Return to the nest. Always returns True.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'deposit_food': 'Action: Deposit any collected food at the nest. Always returns True.', 'pickup_food': 'Action: Pick up any available food in the current location. Always returns True.', 'carry_food': 'Action: Carry the food towards the nest. Always
###
3.// INSTRUCTIONS: Use only the following behaviors {'follow_leader': 'Action: Follow the designated leader robot by adjusting speed and direction. Always returns True.', 'avoid_collisions': 'Action: Use sensors and obstacle avoidance algorithms to avoid collisions with other robots. Always returns True.', 'stay_in_formation': 'Action: Maintain a specific formation with the leader robot. Always returns True.', 'change_formation': 'Action: Change formation to adapt to changing environment or obstacles. Always returns True.', 'is_leader_detected': 'Condition: Check if the leader robot is detected in the current formation. Returns True if the leader is detected, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3.// USER COMMAND: Generate behavior tree for a swarm of robots to follow and maintain formation with a designated leader
3.// OUTPUT:
<BehaviorTree><Selector><Condition>is_leader_detected</Condition><Sequence><Action>follow_leader</Action><Action>avoid_collisions</Action><Selector><Sequence><Action>stay_in_formation</Action><Action>change_formation</Action></Sequence><Action>wait</Action></Selector></Sequence></Selector></BehaviorTree>

###
4.// INSTRUCTIONS: Use only the following behaviors {'collect_samples': 'Action: Use specialized tools to collect samples from different areas. Always returns True.', 'analyze_samples': 'Action: Analyze the collected samples to determine potential sources of contamination. Always returns True.', 'is_samples_collected': 'Condition: Check if a sufficient amount of samples have been collected. Returns True if enough samples have been collected, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Generate behavior tree for a robot to collect and analyze samples in a contaminated environment
4.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_samples_collected</Condition><Selector><Sequence><Action>collect_samples</Action><Action>analyze_samples</Action></Sequence><Action>wait</Action></Selector></Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'navigate_maze': 'Action: Use sensors and mapping algorithms to navigate through a maze. Always returns True.', 'avoid_dead_ends': 'Action: Detect and avoid dead ends in the maze. Always returns True.', 'pick_up_items': 'Action: Use specialized tools to pick up items in the maze. Always returns True.', 'is_exit_reached': 'Condition: Check if the robot has reached the end of the maze and the exit. Returns True if the exit is reached, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Generate behavior tree for a robot to navigate a maze and collect items along the way
5.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_exit_reached</Condition><Selector><Sequence><Action>navigate_maze</Action><Action>avoid_dead_ends</Action><Selector><Action>pick_up_items</Action><Action>wait</Action></Selector></Sequence><Action>wait</Action></Selector></Sequence></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'map_terrain': 'Action: Use sensors and mapping algorithms to create a map of the terrain. Always returns True.', 'identify_obstacles': 'Action: Analyze the mapped terrain to identify any obstacles. Always returns True.', 'calculate_shortest_path': 'Action: Use mapping data to calculate the shortest path from starting point to destination. Always returns True.', 'follow_path': 'Action: Follow the calculated path by adjusting speed and direction. Always returns True.', 'is_destination_reached': 'Condition: Check if the robot has reached the designated destination. Returns True if the destination is reached, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Generate behavior tree for a robot to map and navigate through a complex terrain to reach a designated destination
6.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_destination_reached</Condition><Selector><Sequence><Action>map_terrain</Action><Action>identify_obstacles</Action><Action>calculate_shortest_path</Action><Action>follow_path</Action></Sequence><Action>wait</Action></Selector></Sequence></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'identify_targets': 'Action: Scan the environment for potential targets using sensors and mapping data. Always returns True.', 'determine_best_target': 'Action: Analyze the identified targets to determine the best one to prioritize. Always returns True.', 'attack_target': 'Action: Use specialized weapons to attack the selected target. Always returns True.', 'is_target_destroyed': 'Condition: Check if the designated target has been destroyed. Returns True if the target is destroyed, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: Generate behavior tree for a robot to identify and attack targets in a combat scenario
7.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_target_destroyed</Condition><Selector><Sequence><Action>identify_targets</Action><Action>determine_best_target</Action><Action>attack_target</Action></Sequence><Action>wait</Action></Selector></Sequence></BehaviorTree> 
###
3.// INSTRUCTIONS: Use only the following behaviors {'gather_object': 'Action: Move towards and gather the nearest object. Returns False if no objects are nearby.', 'drop_object': 'Action: Drop the collected object. Returns True upon successful drop.', 'build_structure': 'Action: Collect necessary materials and build a structure. Returns False if not enough materials are collected.', 'search_location': 'Action: Search for a specific location indicated by coordinates. Always returns True.', 'is_object_in_range': 'Condition: Checks if there are any objects within a designated range. Returns True if an object is nearby, False otherwise.', 'is_object_collected': 'Condition: Checks if the robot is currently carrying an object. Returns True if an object is being carried, False otherwise.', 'is_structure_built': 'Condition: Checks if the designated structure has been successfully built. Returns True if the structure is built, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task).
3.// USER COMMAND: Create a behavior tree to guide robots in gathering materials and building a designated structure at specific coordinates.
3.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_structure_built</Condition><Action>search_location</Action><Action>build_structure</Action></Sequence><Sequence><Condition>is_object_collected</Condition><Action>drop_object</Action></Sequence><Sequence><Condition>is_object_in_range</Condition><Action>gather_object</Action><Action>move_to_structure</Action></Sequence><Action>wander</Action></BehaviorTree>

###
4.// INSTRUCTIONS: Use only the following behaviors {'send_signal': 'Action: Send a signal to other robots within a designated range. Always returns True.', 'receive_signal': 'Action: Receive and acknowledge the signal sent by another robot. Returns True upon successful reception.', 'search_kill_zone': 'Action: Search for a designated "kill zone" within the environment. Returns False if no kill zone is detected.', 'neutralize_target': 'Action: Neutralize the target within the designated kill zone. Returns False if the target cannot be neutralized.', 'is_target_neutralized': 'Condition: Checks if the designated target has been successfully neutralized. Returns True if the target is neutralized, False otherwise.', 'is_kill_zone_detected': 'Condition: Checks if a designated kill zone is present within the environment. Returns True if a kill zone is detected, False otherwise.', 'is_signal_received': 'Condition: Checks if a signal has been successfully received from another robot. Returns True if a signal is received, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task).
4.// USER COMMAND: Construct a behavior tree for a swarm of robots to coordinate and neutralize a designated target within a kill zone.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_target_neutralized</Condition><Action>reform_formation</Action></Sequence><Sequence><Condition>is_kill_zone_detected</Condition><Action>search_kill_zone</Action><Selector><Sequence><Condition>is_signal_received</Condition><Action>receive_signal</Action></Sequence><Action>send_signal</Action></Selector></Sequence><Sequence><Condition>is_target_detected</Condition><Action>neutralize_target</Action></Sequence></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'calculate_distance': 'Action: Calculate the distance between two designated points. Always returns True.', 'move_to_point': 'Action: Move towards the designated point. Returns True once point is reached with an accuracy of 1 unit.', 'rotate_robot': 'Action: Rotate the robot by a specified angle. Returns True once the robot has rotated to the designated angle.', 'is_distance_calculated': 'Condition: Checks if the distance between designated points has been successfully calculated. Returns True if the distance is calculated, False otherwise.', 'is_point_reached': 'Condition: Checks if the robot has successfully reached the designated point. Returns True if the robot has reached the point, False otherwise.', 'is_rotation_complete': 'Condition: Checks if the robot has successfully rotated to the designated angle. Returns True if the robot's angle is within 1 degree of the designated angle, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task).
5.// USER COMMAND: Create a behavior tree to guide a single robot to navigate through a series of designated points, calculate the distance and rotate to a specific angle.
5.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_rotation_complete</Condition><Action>rotate_robot</Action></Sequence><Sequence><Condition>is_point_reached</Condition><Action>move_to_point</Action></Sequence><Sequence><Condition>is_distance_calculated</Condition><Action>calculate_distance</Action></Sequence><Action>wander</Action></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'detect_nest': 'Action: Detect and locate the nest within the environment. Returns True upon successful detection.', 'return_to_nest': 'Action: Return to the nest and enter it. Returns True upon successful return and entry.', 'forage': 'Action: Forage for food in the environment. Returns False if no food is found.', 'is_nest_detected': 'Condition: Checks if the nest has been detected within the environment. Returns True if the nest is detected, False otherwise.', 'is_at_nest': 'Condition: Checks if the robot is currently located at the nest. Returns True if the robot is at the nest, False otherwise.', 'is_food_found': 'Condition: Checks if food has been successfully foraged in the environment. Returns True if food is found, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task).
6.// USER COMMAND: Design a behavior tree for swarm robots to forage for food and return to the nest once food is found.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_food_found</Condition><Action>return_to_nest</Action></Sequence><Sequence><Condition>is_nest_detected</Condition><Action>detect_nest</Action></Sequence></Selector><Sequence><Condition>is_at_nest</Condition><Action>forage</Action></Sequence><Action>wander</Action></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'collect_resource': 'Action: Collect the nearest resource. Returns False if no resources are available in the environment.', 'deposit_resource': 'Action: Deposit the collected resource. Returns True upon successful deposit.', 'generate_resource': 'Action: Simulate the generation of resources in the environment. Always returns True.', 'is_resource_available': 'Condition: Checks if there are resources present in the environment. Returns True if resources are available, False otherwise.', 'is_resource_deposited': 'Condition
###
3.// INSTRUCTIONS: Use only the following behaviors {'detect_target': 'Condition: Detect the target within the environment. Returns True if target is detected, False otherwise.', 'evade_obstacle': 'Action: Evade detected obstacles. Always returns True.', 'form_circle': 'Action: Form a circle with nearby agents. Always returns True.', 'move_towards_target': 'Action: Move towards the detected target. Always returns True.', 'switch_to_hunting_mode': 'Action: Switch the agent to hunting mode. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3.// USER COMMAND: When the target is detected, switch to hunting mode and form a circle with nearby agents while moving towards the target.
3.// OUTPUT:
<BehaviorTree><Sequence><Selector><Action>switch_to_hunting_mode</Action><Condition>detect_target</Condition></Selector><Sequence><Action>move_towards_target</Action><Action>form_circle</Action></Sequence></Sequence></BehaviorTree>

###
4.// INSTRUCTIONS: Use only the following behaviors {'identify_landmarks': 'Subtree node: Traverse the environment and identify all landmarks present.', 'avoid_collision': 'Action: Avoid colliding with other robots. Always returns True.', 'is_landmark_detected': 'Condition: Check if a landmark is detected within the environment. Returns True if a landmark is detected, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Traverse the environment and avoid collisions with other robots, while identifying landmarks.
4.// OUTPUT:
<BehaviorTree><Sequence><Action>identify_landmarks</Action><Action>avoid_collision</Action><Condition>is_landmark_detected</Condition></Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'follow_path': 'Action: Follow a predefined path. Always returns True.', 'check_battery_level': 'Condition: Check the battery level of the agent. Returns True if battery level is above 50%, False otherwise.', 'recharge_battery': 'Subtree node: Represent a behavior tree for recharging agent's battery.', 'is_moving': 'Condition: Check if the agent is currently moving. Returns True if the agent is moving, False otherwise.', 'stop_movement': 'Action: Stop the agent's movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Continuously follow a predefined path, but pause if the battery level falls below 50%, and resume once recharged.
5.// OUTPUT:
<BehaviorTree><Sequence><Action>follow_path</Action><Selector><Condition>check_battery_level</Condition><Sequence><IsFalse>is_moving</IsFalse><Action>stop_movement</Action></Sequence><Sequence><IsTrue>is_moving</IsTrue><Action>recharge_battery</Action></Sequence></Selector></Sequence></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'collect_resources': 'Action: Collect resources in a specific location. Returns True once resources collected.', 'deposit_resources': 'Action: Deposit collected resources at a designated location. Returns True once resources deposited.', 'seek_new_resource': 'Subtree node: Represent a behavior tree for finding new resource locations.', 'has_resources': 'Condition: Check if the agent currently has collected resources. Returns True if resources are present, False otherwise.', 'is_depositing': 'Condition: Check if the agent is currently depositing resources. Returns True if the agent is depositing, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Continuously collect resources and deposit them at a designated location, while seeking new resource locations when empty.
6.// OUTPUT:
<BehaviorTree><Sequence><Action>collect_resources</Action><Selector><Condition>has_resources</Condition><Sequence><IsFalse>is_depositing</IsFalse><Action>deposit_resources</Action></Sequence><Sequence><IsTrue>is_depositing</IsTrue><Action>seek_new_resource</Action></Sequence></Selector></Sequence></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'detect_danger': 'Condition: Detect danger within the environment. Returns True if danger is detected, False otherwise.', 'flee_from_danger': 'Subtree node: Represent a behavior tree for fleeing from a detected danger.', 'is_fleeing': 'Condition: Check if the agent is currently fleeing from danger. Returns True if the agent is fleeing, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: If danger is detected, flee from danger and continue fleeing until safe.
7.// OUTPUT:
<BehaviorTree><Selector><Condition>detect_danger</Condition><Sequence><IsFalse>is_fleeing</IsFalse><Action>flee_from_danger</Action></Sequence><IsTrue>is_fleeing</IsTrue></Selector></BehaviorTree>
###
3.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3.// USER COMMAND: generate behavior tree to 'Move towards target then avoid obstacle' Output only the XML behavior tree without extra text.
3.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Action>is_target_detected</Action> <Conditional>is_target_reached</Conditional> <Conditional>is_path_clear</Conditional> <Action>continue_movement_agent</Action> </Sequence> <Sequence> <Action>wander</Action> <Conditional>is_obstacle_detected</Conditional> <Action>avoid_obstacle</Action> </Sequence> </Selector> </BehaviorTree>

###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Move agent closer to target and form a line' Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree> <Sequence> <Action>is_target_detected</Action> <Conditional>is_agent_in_nest</Conditional> <Action>change_color_to_green</Action> <Action>move_to_target</Action> <Action>form_line</Action> </Sequence> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Move towards target and change color to green when target is reached' Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree> <Sequence> <Action>is_target_detected</Action> <Conditional>is_target_reached</Conditional> <Action>change_color_to_green</Action> <Action>continue_movement_agent</Action> </Sequence> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent'sNote: 'greater_than_enemy_threat' is a placeholder for a condition that compares the scores of enemy threat and resource urgency, and returns True if the threat level is higher than the urgency score.

###
4.// INSTRUCTIONS: Use only the following behaviors {'collect_food': 'Action: Collect food source. Always returns True.', 'count_food_stocks': 'Function: Counts the current food stock. Returns an integer value.', 'lay_eggs': 'Action: Lay eggs when food stock reaches a certain threshold. Always returns True.', 'on_low_food': "Event: Triggers when food stock reaches a low threshold. Returns True if food stock is low, False otherwise."}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Continuously collect food and lay eggs when food stock is low.
4.// OUTPUT:
<BehaviorTree><Sequence><Action>collect_food</Action><Event>on_low_food</Event><Sequence><Function>count_food_stocks</Function><Condition>less_than_threshold</Condition><Action>lay_eggs</Action></Sequence></Sequence></BehaviorTree>
Note: 'less_than_threshold' is a placeholder for a condition that compares the food stock count to a predefined threshold value and returns True if the food stock is below the threshold.

###
5.// INSTRUCTIONS: Use only the following behaviors {'search_and_destroy': 'Action: Search for enemy targets and attack. Always returns True.', 'detect_new_targets': 'Function: Detect and prioritize new enemy targets. Returns a list of target coordinates.', 'reach_target': 'Action: Move towards the target. Always returns True.', 'detect_obstacles': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Search for new enemy targets and avoid obstacles while attacking.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>search_and_destroy</Action></Sequence><Sequence><Function>detect_new_targets</Function><Action>reach_target</Action></Sequence><Sequence><Condition>detect_obstacles</Condition><Action>avoid_obstacle</Action></Sequence></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'align_to_north': 'Action: Align robot to face north. Always returns True.', 'find_path_to_target': 'Action: Calculate the shortest path to target. Always returns True.', 'obtain_resource': 'Action: Obtain resource from the designated location. Returns True once resource is obtained.', 'is_resource_available': 'Condition: Check if there is a resource available at the designated location. Returns True if resource is available, False otherwise.', 'is_agent_near_nest': 'Condition: Check if the agent is within a certain distance from the nest. Returns True if agent is near the nest, False otherwise.', 'return_to_nest': 'Action: Return to the nest. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: When near the nest, align to north. If resource is available, obtain and return it to the nest. Otherwise, find the shortest path to the target.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_agent_towards_nest</Condition><Action>align_to_north</Action></Sequence><Sequence><Condition>is_resource_available</Condition><Action>obtain_resource</Action><Action>return_to_nest</Action></Sequence><Action>find_path_to_target</Action></Selector></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'gather_resources': 'Subtree node: Assign robots to gather designated resources.', 'build_repairs': 'Subtree node: Assign robots to build and repair structures.', 'calculate_resource_need': 'Function: Calculates the resources needed to complete a task. Returns a list of resources.', 'inventory_management': 'Subtree node: Assign robots to manage inventory.', 'send_robots_to_job': 'Action: Sends robots to assigned job. Always returns True.', 'is_robot_available': 'Condition: Check if there are available robots for the task. Returns True if there are available robots, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: Assign robots to gather resources and manage inventory. Once enough resources are accumulated, send robots to build and repair structures.
7.// OUTPUT:
<BehaviorTree><Selector><Sequence><Function>calculate_resource_need</Function><Action>gather_resources</Action></Sequence><Sequence><Function>inventory_management</Function><Action>send_robots_to_job</Action></Sequence><Sequence><Condition>is_robot_available</Condition><Action>build_repairs</Action></Sequence></Selector></BehaviorTree>###
3.// INSTRUCTIONS: Use only the following behaviors {'navigate_to_goal': "Subtree node: Represents a behavior tree for navigating to a target location.", 'detect_obstacles': 'Action: Detect obstacles in the robot’s path. Always returns True.', 'avoid_collision': "Action: Steer the robot to avoid obstacles. Always returns True.", 'go_to_precise_location': "Action: Move robot to a precise location with coordinate input. Always returns True.", 'is_close_to_target': "Condition: Check if robot is within 5 units of the target. Returns True if the robot is within 5 units, False otherwise.", 'is_obstacle_present': "Condition: Check if obstacles are present in the robot's path. Returns True if an obstacle is detected, False otherwise.", 'is_robot_available': "Condition: Check if the robot is available for a new task. Returns True if the robot is not currently performing a task, False otherwise."}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3.// USER COMMAND: If obstacles are present, avoid collision. If robot is available, go to coordinate (5,3).
3.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_obstacle_present</Condition><Action>detect_obstacles</Action><Action>avoid_collision</Action></Sequence><Condition>is_robot_available</Condition><Sequence><Action>go_to_precise_location</Action><Condition>is_close_to_target</Condition></Sequence></Selector></BehaviorTree>

###
4.// INSTRUCTIONS: Use only the following behaviors {'identify_target': "Condition: Check if target is identified. Returns True if the target is identified, False otherwise.", 'scan_environment': 'Action: Scan the environment for potential targets. Always returns True.', 'move_to_target': "Action: Move towards target. Always returns True.", 'attack_target': "Action: Perform an attack on the target. Always returns True.", 'is_agent_alive': "Condition: Check if agent is alive. Returns True if the agent is still functional, False otherwise."}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: If target is not identified, scan environment. If agent is still alive, move to target and attack.
4.// OUTPUT:
<BehaviorTree><Selector><Condition>identify_target</Condition><Action>attack_target</Action><Sequence><Action>scan_environment</Action><Condition>is_agent_alive</Condition><Action>move_to_target</Action><Action>attack_target</Action></Sequence></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'communicate_with_swarm': "Action: Communicate with other swarm robots. Always returns True.", 'move_in_formation': 'Action: Move in a precise formation with other swarm robots. Always returns True.', 'refuel': "Subtree node: Represents a behavior tree for finding fuel and refueling the robot.", 'check_fuel_level': "Condition: Check if fuel level is below a specific threshold. Returns True if fuel is low, False otherwise.", 'check_communication_range': "Condition: Check if other robots are within communication range. Returns True if other robots are in range, False otherwise."}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: If fuel level is low, find fuel and refuel. Otherwise, communicate with other swarm robots in range and move in formation.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>check_fuel_level</Condition><Subtree>refuel</Subtree></Sequence><Sequence><Condition>check_communication_range</Condition><Action>communicate_with_swarm</Action><Action>move_in_formation</Action></Sequence></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'analyze_environment': 'Action: Analyze the environment for potential prey. Always returns True.', 'hunt_prey': 'Action: Move towards prey and attack. Always returns True.', 'collect_food': 'Action: Collect and store food in the robot. Always returns True.', 'return_to_nest': 'Action: Move back to the nest. Always returns True.', 'is_hungry': "Condition: Check if the robot's food storage is below a specific level. Returns True if robot is hungry, False otherwise.", 'is_prey_nearby': "Condition: Check if prey is within 10 units. Returns True if prey is within 10 units of distance, False otherwise."}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)"
6.// USER COMMAND: If robot is hungry, analyze environment for prey. If prey is within range, hunt and collect food. Return to nest when food storage is full.
6.// OUTPUT:
<BehaviorTree><Selector><Condition>is_hungry</Condition><Action>analyze_environment</Action><Sequence><Condition>is_prey_nearby</Condition><Action>hunt_prey</Action><Action>collect_food</Action><Condition>is_hungry</Condition></Sequence><Action>return_to_nest</Action></Selector></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'gather_resources': 'Action: Gather resources from the environment. Always returns True.', 'build_structure': 'Action: Use gathered resources to build a structure. Always returns True.', 'is_resource_available': "Condition: Check if resources are available in the environment. Returns True if resources are present, False otherwise.", 'is_structure_built': "Condition: Check if the structure is successfully built. Returns True if structure is built, False otherwise.", 'continue_task': 'Action: Continue with current task. Always returns True.', 'explore_environment': 'Action: Move around and explore the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)"
7.// USER COMMAND: If resources are available, gather them and build a structure. Continue task if structure is not successful. Otherwise, explore the environment.
7.// OUTPUT:
<BehaviorTree><Selector><Condition>is_resource_available</Condition><Sequence><Action>gather_resources</Action><Action>build_structure</Action></Sequence><Sequence><Condition>is_structure_built</Condition><Action>continue_task</Action></Sequence><Action>explore_environment</Action></Selector></BehaviorTree>###
3.// INSTRUCTIONS: Use only the following behaviors {'scan_surroundings': 'Action: Use sensors to scan the robot\'s surroundings and gather relevant data. Always returns True.', 'is_object_identified': 'Condition: Check if a specific object or feature has been identified in the scanned surroundings. Returns True if the object is identified, False otherwise.', 'pick_up_object': 'Action: Pick up the identified object or feature. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3.// USER COMMAND: Scan the surroundings for objects and pick up any identified objects.
3.// OUTPUT:
<BehaviorTree><Sequence><Action>scan_surroundings</Action><Condition>is_object_identified</Condition><Action>pick_up_object</Action></Sequence></BehaviorTree>
###
4.// INSTRUCTIONS: Use only the following behaviors {'detect_enemy': 'Action: Use sensors to detect and locate enemies. Always returns True.', 'calculate_distance': 'Action: Calculate the distance between the robot and the nearest enemy. Always returns True.', 'is_in_range': 'Condition: Check if the robot is within range to attack the enemy. Returns True if in range, False otherwise.', 'move_to_enemy': 'Action: Move towards the nearest enemy. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Create a behavior tree for a robot to engage in combat with enemies.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>detect_enemy</Action><Action>calculate_distance</Action><Condition>is_in_range</Condition></Sequence><Action>move_to_enemy</Action></Selector></BehaviorTree>
###
5.// INSTRUCTIONS: Use only the following behaviors {'navigate_to_location': 'Action: Navigate the robot to a specified location. Returns True when the robot reaches the destination.', 'mark_visited': 'Action: Mark the current location as visited. Always returns True.', 'is_target_reached': 'Condition: Check if the robot has reached its target destination. Returns True if the robot is at the target location, False otherwise.', 'generate_path': 'Action: Calculate a path from the current location to the target destination. Returns True when a path is generated.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Navigate the robot from its current location to a specified target location, while marking each visited location as the robot moves.
5.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_target_reached</Condition><Selector><Action>generate_path</Action><Selector><Action>navigate_to_location</Action><Action>mark_visited</Action></Selector></Selector></Sequence></BehaviorTree>
###
6.// INSTRUCTIONS: Use only the following behaviors {'detect_obstacle': 'Action: Use sensors to detect and avoid obstacles in the robot\'s path. Always returns True.', 'calculate_avoidance_route': 'Action: Calculate an alternate route to avoid the detected obstacles. Returns True when an alternate route is found.', 'move_to_destination': 'Action: Move towards the desired destination. Returns True when the robot reaches the destination.', 'is_destination_reached': 'Condition: Check if the robot has reached the final destination. Returns True if the robot is at the target location, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Design a behavior tree for navigating a robot to a specified destination while avoiding obstacles.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>detect_obstacle</Action><Action>calculate_avoidance_route</Action></Sequence><Selector><Action>move_to_destination</Action><Condition>is_destination_reached</Condition></Selector></Selector></BehaviorTree>
###
7.// INSTRUCTIONS: Use only the following behaviors {'detect_object': 'Action: Use sensors to detect and locate a specific object. Always returns True.', 'move_to_object': 'Action: Move towards the detected object. Returns True when the object is within range.', 'pick_up_object': 'Action: Pick up the detected object. Returns True when the object is successfully picked up.', 'drop_object': 'Action: Drop the object at a specific location. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: Create a behavior tree for a robot to locate, pick up, and drop off a specified object.
7.// OUTPUT:
<BehaviorTree><Sequence><Action>detect_object</Action><Action>move_to_object</Action><Action>pick_up_object</Action><Action>drop_object</Action></Sequence></BehaviorTree>
###
4.// INSTRUCTIONS: Use only the following behaviors {'detect_intruders': 'Action: Use sensors to detect any intruders in the area. Always returns True.', 'initiate_alarm': 'Action: Initiate an alarm to alert other robots. Always returns True.', 'move_to_intercept': 'Action: Move to intercept the intruder. Always returns True.', 'is_intruder_detected': 'Condition: Check if an intruder has been detected. Returns True if an intruder is detected, False otherwise.', 'is_intruder_in_range': 'Condition: Check if the intruder is within 10 units. Returns True if the intruder is within 10 units of distance, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree for a robot to intercept and capture an intruder
4.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>is_intruder_detected</Condition><Action>move_to_intercept</Action></Sequence><Action>detect_intruders</Action><Action>initiate_alarm</Action></Selector><Condition>is_intruder_in_range</Condition></Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'wait_for_instruction': 'Action: Wait for further instruction from the user. Always returns True.', 'proceed_to_exit': 'Action: Move towards the designated exit. Always returns True.', 'unlock_door': 'Action: Use a key to unlock a door. Always returns True.', 'is_rescue_complete': 'Condition: Check if all trapped individuals have been rescued. Returns True if all individuals have been rescued, False otherwise.', 'is_exit_locked': 'Condition: Check if the designated exit is locked. Returns True if the exit is locked, False otherwise.', 'is_key_found': 'Condition: Check if a key has been found in the current area. Returns True if a key is found, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree for a robot to assist in a building evacuation
5.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_rescue_complete</Condition><Selector><Sequence><Condition>is_exit_locked</Condition><Selector><Sequence><Condition>is_key_found</Condition><Action>unlock_door</Action></Sequence><Action>wait_for_instruction</Action></Selector></Sequence></Selector><Action>proceed_to_exit</Action></Sequence></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'navigate_to_destination': 'Action: Use sensors and mapping to navigate to a specified destination. Always returns True.', 'follow_person': 'Action: Use sensors to follow a designated person. Always returns True.', 'is_person_detected': 'Condition: Check if a person has been detected. Returns True if a person is detected, False otherwise.', 'is_destination_reached': 'Condition: Check if the destination has been reached. Returns True if the robot has reached the destination, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree for a robot to escort a person to a specified location
6.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_destination_reached</Condition><Selector><Sequence><Condition>is_person_detected</Condition><Action>follow_person</Action></Sequence><Action>navigate_to_destination</Action></Selector></Sequence></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'collect_sample': 'Action: Use sensors to collect a sample from the environment. Always returns True.', 'analyze_sample': 'Action: Analyze the collected sample. Always returns True.', 'store_sample': 'Action: Store the sample in a designated storage container. Always returns True.', 'is_storage_full': 'Condition: Check if the designated storage container is full. Returns True if the container is full, False otherwise.', 'is_sample_collected': 'Condition: Check if a sample has been collected. Returns True if a sample has been collected, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: generate behavior tree for a robot to collect and store environmental samples
7.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_storage_full</Condition><Selector><Sequence><Condition>is_sample_collected</Condition><Action>collect_sample</Action><Action>analyze_sample</Action><Action>store_sample</Action></Sequence><Action>collect_sample</Action></Selector></Sequence></BehaviorTree>
###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'detect_danger': 'Condition: Check if there is a potential danger in the environment. Returns True if a danger is detected, False otherwise.', 'react_to_danger': 'Action: Respond to the detected danger by performing appropriate actions. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Explore the environment and react to any potential danger detected'. Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_target_detected</Condition><Selector><Sequence><Condition>detect_danger</Condition><Action>react_to_danger</Action></Sequence><Action>wander</Action></Selector></Sequence><Action>wander</Action></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'deposit_food': 'Action: Deposit food payload in the designated location. Returns True if successfully deposited, False otherwise.', 'pick_up_food': 'Action: Pick up food payload if available within reach. Returns True if successfully picked up, False otherwise.', 'is_food_available': 'Condition: Check if there is food payload available in the environment. Returns True if food is available, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Navigate to areas with available food payload, pick it up and deposit it in the designated location'. Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_food_available</Condition><Selector><Sequence><Condition>is_target_reached</Condition><Action>pick_up_food</Action></Sequence><Sequence><Condition>is_target_detected</Condition><Action>agent_movement_freeze</Action></Sequence></Selector><Action>continue_movement_agent</Action><Action>deposit_food</Action></Sequence></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'deposit_food': 'Action: Deposit food payload in the designated location. Returns True if successfully deposited, False otherwise.', 'pick_up_food': 'Action: Pick up food payload if available within reach. Returns True if successfully picked up, False otherwise.', 'is_food_available': 'Condition: Check if there is food payload available in the environment. Returns True if food is available, False otherwise.', 'is_food_deposited': 'Condition: Check if food payload has been successfully deposited. Returns True if food is deposited, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Collect food from multiple sources and deposit it at the designated location. Once all food is collected, return home and change color to white'. Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>is_food_available</Condition><Selector><Sequence><Condition>is_target_reached</Condition><Action>pick_up_food</Action></Sequence><Sequence><Condition>is_target_detected</Condition><Action>continue_movement_agent</Action></Sequence></Selector><Action>wander</Action></Sequence><Action>continue_movement_agent</Action><Action>deposit_food</Action><Action>continue_movement_agent</Action></Sequence><Sequence><Condition>is_food_deposited</Condition><Action>change_color_to_white</Action></Sequence></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_circle': 'Action: Form a circle with other robots. Always returns True.', 'is_circle_formed': 'Condition: Check if a circle is formed with other robots. Returns True if a circle is formed, False otherwise.', 'perform_task_1': 'Action: Perform task 1 with other robots in the circle. Returns True if task is completed, False otherwise.', 'perform_task_2': 'Action: Perform task 2 with other robots in the circle. Returns True if task is completed, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: generate behavior tree to 'Collaboratively perform Task 1 with other robots in a circle. If Task 1 cannot be completed, perform Task 2'. Output only the XML behavior tree without extra text.
7.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>is_circle_formed</Condition><Action>perform_task_1</Action></Sequence><Action>form_circle</Action></Selector><Sequence><Condition>task_completed</Condition><Action>perform_task_2</Action###
3.// INSTRUCTIONS: Use only the following behaviors {'drone_scan': 'Subtree node: Represents a behavior tree for scanning an area with the drone.', 'detect_obstacle': 'Action: Attempts to detect if any obstacles are nearby. Will return True if an obstacle is detected, False otherwise.', 'move_forward': 'Action: Moves the drone forward a certain distance. Always returns True.', 'is_obstacle_detected': 'Condition: Check if an obstacle is within a certain distance. Returns True if an obstacle is detected, False otherwise.', 'is_target_reached': 'Condition: Check if the drone has reached the specified target. Returns True if the target has been reached, False otherwise.', 'return_to_base': 'Action: Returns the drone to its original starting position. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3.// USER COMMAND: Where are the obstacles? Move the drone forward, scan the area, and return to base if any obstacle is detected.
3.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Action>move_forward</Action> <Action>drone_scan</Action> </Sequence> <Condition>is_obstacle_detected</Condition> <Action>return_to_base</Action> </Selector> </BehaviorTree>
###
4.// INSTRUCTIONS: Use only the following behaviors {'detect_human': 'Condition: Checks if a human is within a certain distance. Returns True if a human is detected, False otherwise.', 'detect_object': 'Condition: Checks if an object is within the field of view. Returns True if an object is detected, False otherwise.', 'follow_human': 'Action: Follows the detected human target. Always returns True.', 'fetch_object': 'Action: Attempts to fetch the detected object. Always returns True.', 'scan_surroundings': 'Action: Scans the surroundings for any potential targets. Always returns True.', 'is_object_in_grasp': 'Condition: Checks if the robot is currently holding an object. Returns True if the robot is holding an object, False otherwise.', 'is_human_closer_than_object': 'Condition: Checks if a detected human is closer than any object. Returns True if a human is closer than an object, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Follow the human if they are closer than any object, and pick up the object if within grasp range. Otherwise, scan the surroundings for any potential targets.
4.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>is_human_closer_than_object</Condition> <Action>follow_human</Action> <Sequence> <Condition>detect_object</Condition> <Action>fetch_object</Action> </Sequence> <Action>scan_surroundings</Action> </Selector> </BehaviorTree>
###
5.// INSTRUCTIONS: Use only the following behaviors {'detect_landmark': 'Condition: Checks if a landmark is within a specified range. Returns True if a landmark is detected, False otherwise.', 'move_towards_landmark': 'Action: Moves the robot towards the detected landmark. Always returns True.', 'detect_powerup': 'Condition: Checks if a powerup is within the visible range. Returns True if a powerup is detected, False otherwise.', 'pickup_powerup': 'Action: Picks up the detected powerup. Always returns True.', 'scan_surroundings': 'Action: Scans the surroundings for any potential targets. Always returns True.', 'is_landmark_reached': 'Condition: Checks if the robot has reached the specified landmark. Returns True if the landmark has been reached, False otherwise.', 'see_wall': 'Condition: Checks if a wall is within the robot's view. Returns True if a wall is detected, False otherwise.', 'avoid_wall': 'Action: Attempts to avoid the detected wall. Always returns True.', 'follow_path': 'Action: Follows a predefined path. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: If a landmark is within range, move towards it and pick up any powerups along the way. Otherwise, scan surroundings for potential targets and avoid walls.
5.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>detect_landmark</Condition> <Action>move_towards_landmark</Action> <Condition>detect_powerup</Condition> <Action>pickup_powerup</Action> </Sequence> <Action>scan_surroundings</Action> <Sequence> <Condition>see_wall</Condition> <Action>avoid_wall</Action> </Sequence> </Selector> </BehaviorTree>
###
6.// INSTRUCTIONS: Use only the following behaviors {'detect_obstacle': 'Condition: Checks if any obstacles are within a certain distance. Returns True if an obstacle is detected, False otherwise.', 'detect_human': 'Condition: Checks if a human is within a specified distance. Returns True if a human is detected, False otherwise.', 'move_away_from_obstacle': 'Action: Moves the robot away from the detected obstacle. Always returns True.', 'approach_human': 'Action: Approaches the detected human. Always returns True.', 'wait': 'Action: Waits for a specified amount of time. Always returns True.', 'random_tips': 'Action: Offers random tips to the user for a set amount of time. Always returns True.', 'is_human_interacted_with': 'Condition: Checks if the human has interacted with the robot. Returns True if the interaction has occurred, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: If an obstacle is detected, move away from it. Otherwise, approach the human and wait for them to interact with the robot. If no interaction occurs, offer random tips for 30 seconds.
6.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>detect_obstacle</Condition> <Action>move_away_from_obstacle</Action> <Selector> <Condition>detect_human</Condition> <Sequence> <Action>approach_human</Action> <Condition>is_human_interacted_with</Condition> <Action>wait</Action> </Sequence> <Action>random_tips</Action> </Selector> </Sequence> </BehaviorTree>
###
7.// INSTRUCTIONS: Use only the following behaviors {'detect_object': 'Condition: Checks if an object is within a specified range. Returns True if an object is detected, False otherwise.', 'move_towards_object': 'Action: Moves the robot towards the detected object. Always returns True.', 'pickup_object': 'Action: Picks up the detected object. Always returns True.', 'detect_human': 'Condition: Checks if a human is within a specified distance. Returns True if a human is detected, False
###
4.// INSTRUCTIONS: Use only the following behaviors {'check_battery_level': 'Condition: Check the current battery level. Returns True if the battery level is above 20%, False otherwise.', 'go_to_charging_station': 'Action: Move the robot to the designated charging station. Always returns True.', 'is_dirt_detected': 'Condition: Check if dirt is detected on the floor. Returns True if dirt is detected, False otherwise.', 'clean_floor': 'Action: Use the robot's cleaning mechanism to clean the floor. Always returns True.', 'navigate_home': 'Action: Return the robot to its designated home location. Always returns True.', 'is_home_reached': 'Condition: Check if the robot has reached its designated home location. Returns True if home is reached, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree for a cleaning robot to navigate to a designated charging station and return home when needed
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>check_battery_level</Condition><Sequence><Condition>is_dirt_detected</Condition><Selector><Action>clean_floor</Action><Sequence><Condition>is_home_reached</Condition><Action>navigate_home</Action></Sequence></Selector></Sequence><Action>go_to_charging_station</Action></Sequence></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: use only the following behaviors {'detect_temperature': 'Condition: Check the temperature in the environment. Returns True if the temperature is below freezing, False otherwise.', 'is_humidity_high': 'Condition: Check the humidity in the environment. Returns True if the humidity is above 70%, False otherwise.', 'adjust_furnace': 'Action: Adjust the furnace settings to maintain a comfortable temperature. Always returns True.', 'turn_on_humidifier': 'Action: Turn on the humidifier to reduce humidity levels. Always returns True.', 'turn_on_air_conditioner': 'Action: Turn on the air conditioner to cool down the environment. Always returns True.', 'is_air_quality_poor': 'Condition: Check the air quality in the environment. Returns True if the air quality is unhealthy, False otherwise.', 'purify_air': 'Action: Use the air purifier to improve air quality. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree for a smart home system to ensure a comfortable and healthy environment for its occupants
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>detect_temperature</Condition><Selector><Sequence><Condition>is_humidity_high</Condition><Action>turn_on_humidifier</Action></Sequence><Sequence><Condition>is_air_quality_poor</Condition><Action>purify_air</Action></Sequence></Selector></Sequence><Action>adjust_furnace</Action></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: use only the following behaviors {'perform_scan': "Action: Perform a scan of the environment with the robot's range sensor. Always returns True.", 'detect_obstacles': 'Condition: Check for obstacles within the robot's sensing range. Returns True if any obstacles are detected, False otherwise.', 'move_until_obstacle': 'Action: Move the robot until an obstacle is detected. Returns True if an obstacle is detected and stops the robot.', 'move_to_target': 'Action: Move the robot to the designated target location. Always returns True.', 'reach_target': 'Condition: Check if the robot has reached the designated target location. Returns True if the target is reached, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree for a robot to autonomously navigate an obstacle course and reach a target location
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>perform_scan</Action><Sequence><Condition>detect_obstacles</Condition><Action>move_until_obstacle</Action></Sequence></Sequence><Sequence><Condition>reach_target</Condition><Action>move_to_target</Action></Sequence></Selector></BehaviorTree>

###
7.// INSTRUCTIONS: use only the following behaviors {'detect_intruders': 'Condition: Check for any intruders in the environment. Returns True if an intruder is detected, False otherwise.', 'alert_team': 'Action: Alert the rest of the team about the detected intruder. Always returns True.', 'track_intruder': 'Action: Track the intruder's movement and location. Always returns True.', 'surround_intruder': 'Action: Surround the intruder with multiple robots to contain them. Always returns True.', 'capture_intruder': 'Action: Capture the intruder and immobilize them until further instructions. Always returns True.', 'call_for_assistance': 'Action: Send a distress signal for additional assistance from other team members. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: generate behavior tree for a team of swarm robots to detect and contain an intruder in their territory
7.// OUTPUT:
<BehaviorTree><Sequence><Condition>detect_intruders</Condition><Selector><Action>alert_team</Action><Sequence><Action>track_intruder</Action><Action>surround_intruder</Action><Action>capture_intruder</Action><Action>call_for_assistance</Action></Sequence></Selector></Sequence></BehaviorTree> 
###
3.// INSTRUCTIONS: Use only the following behaviors {'move_towards_player': "Action: Move towards the player's current location. Always returns True.", 'attack_player': 'Action: Attack the player. Returns True only if the player is within attack range.', 'is_player_nearby': 'Condition: Check if the player is within a certain distance. Returns True if the player is within the given distance, False otherwise.', 'is_player_distracted': 'Condition: Check if the player is distracted by an object or action. Returns True if the player is distracted, False otherwise.', 'is_player_attacking': 'Condition: Check if the player is in attack mode. Returns True if the player is attacking, False otherwise.', 'is_player_defending': 'Condition: Check if the player is in defend mode. Returns True if the player is defending, False otherwise.', 'is_weapon_equipped': 'Condition: Check if the player has a weapon equipped. Returns True if a weapon is equipped, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3.// USER COMMAND: Continuously assess the player's actions and react accordingly for self-defense.
3.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_player_nearby</Condition><Action>move_towards_player</Action><Condition>is_weapon_equipped</Condition><Action>attack_player</Action></Sequence><Sequence><Condition>is_player_distracted</Condition><Condition>is_player_attacking</Condition><Action>attack_player</Action></Sequence><Action>defend</Action></Selector></BehaviorTree>

###
4.// INSTRUCTIONS: Use only the following behaviors {'undock': 'Action: Undock from the charging station. Always returns True.', 'navigate_to_point': 'Action: Move robot to given coordinates. Returns True if coordinates are within reach, False otherwise.', 'charge_battery': 'Action: Charge robot's battery at the charging station. Returns True once fully charged.', 'check_battery_level': 'Condition: Check the robot's current battery level. Returns True if battery is below a certain threshold, False otherwise.'} to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Charge robot's battery to full capacity and continue with the current task.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>check_battery_level</Condition><Action>navigate_to_point</Action><Action>charge_battery</Action></Sequence><Action>perform_task</Action></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'search_area': 'Action: Scan a specific area for relevant objects. Returns True if objects are found, False otherwise.', 'gather_objects': 'Action: Gather all relevant objects found in the specified area. Returns True once all objects have been collected.', 'return_to_base': 'Action: Return to base with all gathered objects. Always returns True.', 'is_object_gathered': 'Condition: Check if a specific object has been gathered. Returns True if the object has been collected, False otherwise.', 'inventory_check': 'Condition: Check the robot's inventory for a specific item. Returns True if the item is present, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Search for a specific object in a designated area and bring it back to base.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>search_area</Action><Condition>is_object_found</Condition><Action>gather_objects</Action><Condition>inventory_check</Condition><Sequence><Action>return_to_base</Action></Sequence></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'scout_target_area': 'Action: Scout a designated area for potential targets. Returns True if a target is found, False otherwise.', 'identify_target': 'Action: Identify the type of the target. Returns True once the target has been identified.', 'engage_target': 'Action: Engage the target. Returns True if the target is successfully taken down.', 'check_enemy_count': 'Condition: Check the number of remaining enemies in the area. Returns True if the enemy count is below a certain threshold, False otherwise.', 'check_area_cleared': 'Condition: Check if the designated area has been cleared of all enemies. Returns True if the area is clear, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Scout a designated area for potential targets, identify the type of target, and engage it.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>scout_target_area</Action><Condition>is_target_found</Condition><Action>identify_target</Action><Condition>is_enemy_count_low</Condition><Action>engage_target</Action><Condition>check_area_cleared</Condition><Action>continue_task</Action></Sequence><Action>report_failure</Action></Selector></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'wait_for_command': 'Action: Wait for a command from the user. Returns True once a command is received.', 'check_command_validity': 'Condition: Check if the received command is valid and recognized. Returns True if the command is valid, False otherwise.', 'execute_command': 'Action: Carry out the given command. Returns True if the command is executed successfully, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: Accept a user command, check its validity, and execute it.
7.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>wait_for_command</Action><Condition>check_command_validity</Condition><Action>execute_command</Action></Sequence><Action>report_invalid_command</Action></Selector></BehaviorTree>
###
4.// INSTRUCTIONS: Use only the following behaviors {'scan_environment': 'Subtree node: Represents a behavior tree for scanning the environment for potential targets.', 'evade_enemy': 'Action: Move away from detected enemy. Returns True if successful, False otherwise.', 'attack_target': 'Action: Attack a nearby target. Returns True if successful, False otherwise.', 'is_target_detected': 'Condition: Check if a target is within range. Returns True if a target is detected, False otherwise.', 'is_enemy_detected': 'Condition: Check if an enemy is within range. Returns True if an enemy is detected, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Scan the environment, evade any enemies, and attack any nearby targets.
4.// OUTPUT:
<BehaviorTree> <Sequence> <Action>scan_environment</Action> <Selector> <Sequence> <Condition>is_enemy_detected</Condition> <Action>evade_enemy</Action> </Sequence> <Sequence> <Condition>is_target_detected</Condition> <Action>attack_target</Action> </Sequence> </Selector> </Sequence> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'follow_leader': 'Action: Follow the designated leader using a set distance. Always returns True.', 'move_to_position': 'Action: Move to a specific position using coordinates. Always returns True.', 'recharge': 'Action: Refill the robot's energy. Returns True if successful, False otherwise.', 'is_low_energy': 'Condition: Check if the robot's energy is below a certain threshold. Returns True if energy is low, False otherwise.', 'is_position_reached': 'Condition: Check if the robot has reached the designated position. Returns True if position is reached, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Have the robot follow a designated leader and refill energy if low, then move to a specific position.
5.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Selector> <Condition>is_low_energy</Condition> <Action>recharge</Action> <Action>follow_leader</Action> </Selector> <Sequence> <Condition>is_position_reached</Condition> <Action>move_to_position</Action> <Action>agent_movement_freeze</Action> <Action>task_completed</Action> </Sequence> </Selector> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'collect_resources': 'Action: Collect resources from the environment. Returns True if resources are collected, False otherwise.', 'distribute_resources': 'Action: Distribute collected resources to designated locations. Returns True if successful, False otherwise.', 'is_resource_available': 'Condition: Check if resources are available in the environment. Returns True if resources are present, False otherwise.', 'is_resource_distributed': 'Condition: Check if all resources have been distributed. Returns True if all resources are distributed, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Search for and collect resources, then distribute them to designated locations until all resources are used.
6.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Selector> <Condition>is_resource_available</Condition> <Action>collect_resources</Action> </Selector> <Sequence> <Condition>is_resource_distributed</Condition> <Action>distribute_resources</Action> </Sequence> </Selector> </BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'explore_area': 'Action: Explore a designated area using predefined paths. Returns True if successful, False otherwise.', 'map_area': 'Action: Map the explored area using sensors. Returns True if successful, False otherwise.', 'is_area_explored': 'Condition: Check if the designated area has been fully explored. Returns True if explored, False otherwise.', 'is_area_mapped': 'Condition: Check if the designated area has been fully mapped. Returns True if mapped, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: Explore a designated area using predefined paths and map the area until it is fully explored and mapped.
7.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Selector> <Condition>is_area_explored</Condition> <Action>explore_area</Action> </Selector> <Sequence> <Condition>is_area_mapped</Condition> <Action>map_area</Action> </Sequence> </Selector> </BehaviorTree> 
###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'move to next waypoint if target not reached, otherwise turn left.'Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>is_target_reached</Condition> <Action>turn_left</Action> </Sequence> <Sequence> <Condition>!is_target_reached</Condition> <Action>move_forward</Action> </Sequence> </Selector> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'form a line at the center, move if not in nest, wander if in nest.'Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>!is_agent_in_nest</Condition> <Action>move_forward</Action> </Sequence> <Sequence> <Condition>is_agent_in_nest</Condition> <Action>wander</Action> </Sequence> <Action>form_line</Action> </Selector> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'check for obstacles, avoid them if present, otherwise form a line.'Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>is_obstacle_detected</Condition> <Action>avoid_obstacle</Action> </Sequence> <Sequence> <Condition>!is_obstacle_detected</Condition> <Action>form_line</Action> </Sequence> </Selector> </BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.',
3.// INSTRUCTIONS: Use only the following behaviors {'detect_target': 'Action: Use sensors to detect the nearest target. Always returns True.', 'move_towards_target': 'Action: Move towards the detected target. Always returns True.', 'attack_target': 'Action: Initiate attack on the detected target. Returns True if the target is successfully attacked, False otherwise.', 'is_target_reached': 'Condition: Check if the target is within 5 units. Returns True if the target is within 5 units of distance, False otherwise.', 'is_enemy_seen': 'Condition: Check if an enemy is within the field of view. Returns True if an enemy is seen, False otherwise.', 'is_power_low': 'Condition: Check if the robot's power level is low. Returns True if power level is less than 20%, False otherwise.', 'recharge': 'Action: Initiate recharge of power. Returns True if the robot's power level is fully recharged, False otherwise.', 'patrol_area': 'Action: Move within a designated patrol area. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3.// USER COMMAND: Generate a behavior tree for a single robot to patrol a designated area while detecting and attacking any enemies within its field of view and recharging when low on power.
3.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_power_low</Condition><Action>recharge</Action></Sequence><Selector><Sequence><Condition>is_enemy_seen</Condition><Action>attack_target</Action></Sequence><Action>patrol_area</Action></Selector></Selector></BehaviorTree>

4.// INSTRUCTIONS: Use only the following behaviors {'detect_food_source': 'Action: Use sensors to detect the nearest food source. Always returns True.', 'move_towards_food': 'Action: Move towards the detected food source. Always returns True.', 'collect_food': 'Action: Collect the food from the source. Returns True if food is successfully collected, False otherwise.', 'is_food_available': 'Condition: Check if food is available at the current location. Returns True if food is available, False otherwise.', 'is_food_collected': 'Condition: Check if the robot has successfully collected food. Returns True if food is successfully collected, False otherwise.', 'is_obstacle_ahead': 'Condition: Check if there is an obstacle blocking the path ahead. Returns True if an obstacle is detected, False otherwise.', 'avoid_obstacle': 'Action: Avoid detected obstacles to continue moving. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Generate a behavior tree for a single robot to forage for food while avoiding obstacles and collecting any available food.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_food_available</Condition><Selector><Sequence><Condition>is_food_collected</Condition><Action>wander</Action></Sequence><Sequence><Condition>is_obstacle_ahead</Condition><Action>avoid_obstacle</Action></Sequence><Action>move_towards_food</Action></Selector></Sequence><Selector><Sequence><Condition>is_food_available</Condition><Action>collect_food</Action></Sequence><Action>detect_food_source</Action></Selector></Selector></BehaviorTree>

5.// INSTRUCTIONS: Use only the following behaviors {'detect_target': 'Action: Use sensors to detect the nearest target. Always returns True.', 'move_towards_target': 'Action: Move towards the detected target. Always returns True.', 'attack_target': 'Action: Initiate attack on the detected target. Returns True if the target is successfully attacked, False otherwise.', 'escape': 'Action: Flee from the detected target. Always returns True.', 'is_target_reached': 'Condition: Check if the target is within 10 units. Returns True if the target is within 10 units of distance, False otherwise.', 'is_enemy_seen': 'Condition: Check if an enemy is within the field of view. Returns True if an enemy is seen, False otherwise.', 'is_low_health': 'Condition: Check if the robot's health is low. Returns True if health is less than 50%, False otherwise.', 'heal': 'Action: Initiate healing process. Returns True if the robot's health is fully restored, False otherwise.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Generate a behavior tree for a single robot to engage and attack enemies while also healing itself when low on health.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_low_health</Condition><Action>heal</Action></Sequence><Selector><Sequence><Condition>is_enemy_seen</Condition><Action>attack_target</Action></Sequence><Action>wander</Action></Selector></Selector></BehaviorTree>

6.// INSTRUCTIONS: Use only the following behaviors {'explore': 'Action: Move to an unexplored area within the environment. Always returns True.', 'detect_obstacle': 'Action: Use sensors to detect obstacles nearby. Always returns True.', 'avoid_obstacle': 'Action: Avoid detected obstacles to continue moving. Always returns True.', 'is_obstacle_detected': 'Condition: Check if an obstacle is detected nearby. Returns True if an obstacle is detected, False otherwise.', 'is_area_explored': 'Condition: Check if the current area has been fully explored. Returns True if the area is fully explored, False otherwise.', 'is_target_detected': 'Condition: Check if a target object is detected within 20 units. Returns True if a target is detected, False otherwise.', 'collect_object': 'Action: Collect the target object. Returns True if the object is successfully collected, False otherwise.', 'navigate_path': 'Action: Navigate to a specific location. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Generate a behavior tree for a single robot to explore and navigate towards a specific target object while avoiding obstacles and checking for fully explored areas.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_obstacle_detected</Condition><Selector><Sequence><Condition>is_area_explored</Condition><Action>explore</Action></Sequence><Action>navigate_path</Action></Selector></Sequence><Selector><Sequence><Condition>is_target_detected</Condition><Selector><Sequence><Condition>is_obstacle_detected</Condition><Action>avoid_obstacle</Action></Sequence><Action>collect_object</Action></Selector></Sequence><Action>detect_obstacle</Action></Selector></Selector></BehaviorTree>

7.// INSTRUCTIONS: Use only the following behaviors {'detect 
###
4.// INSTRUCTIONS: Use only the following behaviors {'drone_movement_freeze': 'Action: Freeze drone movement. Always returns True.', 'find_target': 'Action: Use sensors to locate and identify a target. Always returns True.', 'capture_target': 'Action: Capture the target once it is located. Always returns True.', 'release_target': 'Action: Release the captured target. Always returns True.', 'is_target_captured': 'Condition: Check if a target has been successfully captured. Returns True if a target is currently captured, False otherwise.', 'is_target_identified': 'Condition: Check if a target has been successfully identified. Returns True if a target has been identified, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Generate behavior tree for a drone to locate and capture a target
4.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Action>find_target</Action><Condition>is_target_identified</Condition><Action>capture_target</Action></Sequence><Action>wander</Action></Selector><Sequence><Condition>is_target_captured</Condition><Action>release_target</Action></Sequence></Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'move_to_next_cell': 'Action: Move to the next unvisited cell on the grid. Always returns True.', 'scan_grid': 'Action: Scan the current cell for any resources or threats using sensors. Always returns True.', 'mark_cell_visited': 'Action: Mark the current cell as visited so it is not revisited. Always returns True.', 'is_grid_explored': 'Condition: Check if the entire grid has been fully explored. Returns True if the grid is fully explored, False otherwise.', 'is_resource_detected': 'Condition: Check if there is a resource present in the current cell. Returns True if a resource is detected, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Generate behavior tree for a robot to explore and collect resources in a grid-based environment
5.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_grid_explored</Condition><Selector><Sequence><Action>move_to_next_cell</Action><Action>scan_grid</Action><Selector><Sequence><Condition>is_resource_detected</Condition><Action>collect_resource</Action></Sequence><Action>mark_cell_visited</Action></Selector></Sequence></Selector></Sequence></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'move_to_target': 'Action: Move towards the target location using sensors. Always returns True.', 'evaluate_distance_to_target': 'Action: Get and store the distance to the target location. Always returns True.', 'is_target_reached': 'Condition: Check if the target location has been reached. Returns True if the robot is within a certain distance from the target, False otherwise.', 'is_robot_stuck': 'Condition: Check if the robot is stuck in one place. Returns True if the robot has not moved in the past 5 seconds, False otherwise.', 'is_target_unreachable': 'Condition: Check if the target is unreachable due to obstacles or errors. Returns True if the target is unreachable, False otherwise.', 'restart_navigation': 'Action: Restart the navigation process. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Generate behavior tree for a robot to navigate to a target location and restart if it gets stuck or encounters errors
6.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_target_reached</Condition><Selector><Sequence><Action>evaluate_distance_to_target</Action><Action>move_to_target</Action></Sequence><Selector><Sequence><Condition>is_robot_stuck</Condition><Action>restart_navigation</Action></Sequence><Sequence><Condition>is_target_unreachable</Condition><Action>call_for_assistance</Action></Sequence></Selector></Selector></Sequence></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'detect_friendlies': 'Action: Use sensors to detect nearby friendly robots. Always returns True.', 'form_group': 'Action: Form a group with the detected friendly robots. Always returns True.', 'move_as_group': 'Action: Move as a group towards a designated location. Always returns True.', 'is_group_complete': 'Condition: Check if the group has successfully formed and is moving towards the designated location. Returns True if the group is complete, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: Generate behavior tree for a swarm of robots to form a group and move towards a designated location
7.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_group_complete</Condition><Selector><Sequence><Action>detect_friendlies</Action><Condition>is_safe_to_approach</Condition><Action>form_group</Action><Action>move_as_group</Action></Sequence><Action>wait</Action></Selector></Sequence></BehaviorTree>###
3.// INSTRUCTIONS: Use only the following behaviors {'collect_resource': 'Action: Move to and collect nearby resources. Always returns True.', 'is_inventory_empty': 'Condition: Checks if agent's inventory is empty. Returns True if inventory is empty, False otherwise.', 'return_to_base': 'Action: Move to and deposit collected resources at base. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3.// USER COMMAND: If inventory is empty, collect resources and return to base. Otherwise, keep exploring and collecting resources.
3.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_inventory_empty</Condition><Action>collect_resource</Action><Action>return_to_base</Action></Sequence><Action>wander</Action></Selector></BehaviorTree>

###
4.// INSTRUCTIONS: Use only the following behaviors {'find_key': 'Action: Move towards and pick up the key. Returns True if key is picked up, False otherwise.', 'unlock_door': 'Action: Use the key to unlock the door. Returns True if door is successfully unlocked, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Find key and use it to unlock the door.
4.// OUTPUT:
<BehaviorTree><Sequence><Action>find_key</Action><Action>unlock_door</Action></Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'follow_leader': 'Action: Align to and follow the position and heading of the leader. Always returns True.', 'is_leader_detected': 'Condition: Checks if leader is within a certain distance. Returns True if leader is detected, False otherwise.', 'random_movement': 'Action: Move to a random location within a certain radius. Returns True if movement is successful, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Follow the leader if within 10 units, otherwise move randomly within a 50 unit radius.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_leader_detected</Condition><Action>follow_leader</Action></Sequence><Sequence><Action>random_movement</Action><Condition>is_in_radius_50</Condition></Sequence></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'detect_intruder': 'Action: Scan the environment for intruders. Returns True if an intruder is detected, False otherwise.', 'alert_team': 'Action: Send signal to alert the rest of the team. Returns True if signal is successfully sent, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: If an intruder is detected, send a signal to alert the rest of the team and attack the intruder.
6.// OUTPUT:
<BehaviorTree><Sequence><Action>detect_intruder</Action><Sequence><Action>alert_team</Action><Action>attack_intruder</Action></Sequence></Sequence></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'detect_fire': 'Condition: Checks if fire is detected within a certain distance. Returns True if fire is detected, False otherwise.', 'extinguish_fire': 'Action: Move towards and extinguish the fire. Returns True if fire is successfully extinguished, False otherwise.', 'escape': 'Action: Find the nearest exit and escape. Returns True if escape is successful, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: If fire is detected, extinguish it and escape. Otherwise, continue moving towards the exit.
7.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>detect_fire</Condition><Action>extinguish_fire</Action><Action>escape</Action></Sequence><Action>move_towards_exit</Action></Selector></BehaviorTree>
###
3.// INSTRUCTIONS: Use only the following behaviors {'navigate_to_location': 'Action: Navigate the robot to a specified location. Always returns True.', 'collect_item': 'Action: Collect an item from the environment. Always returns True.', 'drop_item': 'Action: Drop the collected item at a designated location. Always returns True.', 'is_item_available': 'Condition: Check if there is an item available at the specified location. Returns True if an item is available, False otherwise.', 'is_robot_loaded': 'Condition: Check if the robot is currently carrying an item. Returns True if the robot is loaded, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task).
3.// USER COMMAND: Construct behavior tree for a robot to navigate to a location, collect an available item, and drop it off at a designated location.
3.// OUTPUT:
<BehaviorTree><Sequence><Action>navigate_to_location</Action><Selector><Sequence><Condition>is_item_available</Condition><Action>collect_item</Action></Sequence><Action>wait</Action></Selector><Action>drop_item</Action></Sequence></BehaviorTree>

###
4.// INSTRUCTIONS: Use only the following behaviors {'follow_leader': 'Action: Follow the designated leader robot. Always returns True.', 'keep_distance_from_leader': 'Action: Keep a designated distance from the leader robot. Always returns True.', 'change_formation': 'Action: Change formation based on the leader's movement. Always returns True.', 'is_leader_destination_reached': 'Condition: Check if the leader has reached the designated destination. Returns True if the leader has reached the destination, False otherwise.', 'is_swarm_formation_changed': 'Condition: Check if there has been a change in the swarm formation. Returns True if the formation has changed, False otherwise.', 'is_leader_within_reach': 'Condition: Check if the leader is within a designated distance. Returns True if the leader is within reach, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task).
4.// USER COMMAND: Create behavior tree for a swarm of robots to follow and maintain distance from the leader robot while changing formation as the leader moves towards a designated location.
4.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_leader_destination_reached</Condition><Selector><Sequence><Condition>is_swarm_formation_changed</Condition><Action>change_formation</Action></Sequence><Action>wait</Action></Selector><Condition>is_leader_within_reach</Condition><Selector><Sequence><Action>follow_leader</Action><Action>keep_distance_from_leader</Action></Sequence><Action>wait</Action></Selector></Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'detect_hazards': 'Action: Use sensors to detect potential hazards in the environment. Always returns True.', 'avoid_hazard': 'Action: Change course to avoid the detected hazard. Always returns True.', 'send_warning_signal': 'Action: Send a warning signal to other robots about the detected hazard. Always returns True.', 'is_hazard_nearby': 'Condition: Check if there is a potential hazard nearby. Returns True if a hazard is detected, False otherwise.', 'is_hazard_avoided': 'Condition: Check if the robot has successfully avoided the hazard. Returns True if the hazard is avoided, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task).
5.// USER COMMAND: Construct behavior tree for a robot to detect, avoid, and warn others about potential hazards in the environment.
5.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_hazard_nearby</Condition><Selector><Sequence><Action>detect_hazards</Action><Action>avoid_hazard</Action></Sequence><Action>wait</Action></Selector><Condition>is_hazard_avoided</Condition><Action>send_warning_signal</Action></Sequence></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'stabilize_flight': 'Action: Stabilize the drone's flight. Always returns True.', 'change_altitude': 'Action: Change the drone's altitude based on user input. Always returns True.', 'take_off': 'Action: Initiate take-off sequence. Always returns True.', 'land': 'Action: Initiate landing sequence. Always returns True.', 'is_flight_stable': 'Condition: Check if the flight is stable. Returns True if the drone is stable, False otherwise.', 'is_altitude_changed': 'Condition: Check if the drone's altitude has been changed. Returns True if the altitude has changed, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task).
6.// USER COMMAND: Create behavior tree for a drone to take-off, maintain stability during flight, change altitude as needed, and initiate landing sequence.
6.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Action>take_off</Action><Condition>is_flight_stable</Condition></Sequence><Action>wait</Action></Selector><Condition>is_altitude_changed</Condition><Selector><Sequence><Action>change_altitude</Action><Condition>is_flight_stable</Condition></Sequence><Action>wait</Action></Selector><Action>land</Action></Sequence></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'explore_environment': 'Action: Explore the given environment. Always returns True.', 'recover_lost_teammate': 'Action: Navigate to the location of a lost teammate. Always returns True.', 'search_for_missing_item': 'Action: Scan the environment to find a missing item. Always returns True.', 'return_to_base': 'Action: Return to the designated base location. Always returns True.', 'is_teammate_found': 'Condition: Check if the lost teammate has been found. Returns True if the teammate is located, False otherwise.', 'is_item_found': 'Condition: Check if the missing item has been found. Returns True if the item is located, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task).
7.// USER COMMAND: Generate behavior tree to explore the environment, search for a missing teammate, and return to base once the teammate is found.
7.// OUTPUT:
<BehaviorTree><Sequence><Action>explore_environment</Action><Condition>is_teammate_found</Condition><Selector><Sequence><Action>recover_lost_teammate</Action><Action>return_to_base</Action></Sequence><Action>wait</Action></Selector></Sequence></BehaviorTree> 
###
3.// INSTRUCTIONS: Use only the following behaviors {'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'is_food_detected': 'Condition: Check for food within 2 units. Returns True if food is detected within 2 units of distance, False otherwise.', 'is_hungry': 'Condition: Check if agent is hungry. Returns True if the hunger level is above 50%, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'pick_up_food': 'Action: Pick up nearby food. Returns True if food is successfully picked up, False otherwise.', 'release_food': 'Action: Release held food. Returns True if food is released, False otherwise.', 'return_to_nest': 'Action: Return to the nest. Returns True if agent reaches the nest, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3.// USER COMMAND: generate behavior tree to 'Pick up food if hungry, avoid obstacles, and return to the nest.'Output only the XML behavior tree without extra text.
3.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>is_hungry</Condition> <Selector> <Condition>is_food_detected</Condition> <Action>pick_up_food</Action> </Selector> <Action>release_food</Action> </Sequence> <Action>avoid_obstacle</Action> </Selector> <Action>return_to_nest</Action> </Sequence> </BehaviorTree>

###
4.// INSTRUCTIONS: Use only the following behaviors {'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'drop_pheromones': 'Action: Drop pheromones at the current location. Returns True if successful, False otherwise.', 'follow_pheromones': 'Action: Follow pheromones towards the target. Returns True if successful, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 5 units. Returns True if the target is within 5 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Drop pheromones and follow them if target is not reached, otherwise, change color to green.'Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Action>drop_pheromones</Action> <Sequence> <Condition>is_target_detected</Condition> <Action>follow_pheromones</Action> </Sequence> </Selector> <Sequence> <Condition>is_target_reached</Condition> <Action>change_color_to_green</Action> </Sequence> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'absorb_light': 'Action: Absorb light at the current location. Returns True if successful, False otherwise.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'is_light_available': 'Condition: Check if light source is within 5 units. Returns True if light source is within 5 units of distance, False otherwise.', 'is_light_absorbed': 'Condition: Check if light is absorbed. Returns True if light is absorbed, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_reached': 'Condition: Check if target is within 10 units. Returns True if the target is within 10 units of distance, False otherwise.', 'move_towards_target': 'Action: Move towards the target location. Returns True if successful, False otherwise.', 'wait': 'Action: Wait until light is absorbed. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Absorb light, change color to green, and move towards the target if light is absorbed, otherwise, wait.'Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Action>absorb_light</Action> <Selector> <Condition>is_target_reached</Condition> <Sequence> <Action>change_color_to_green</Action> <Action>move_towards_target</Action> </Sequence> </Selector> <Action>wait</Action> </Sequence> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'activate_sensor': 'Action: Activate sensor for 5 seconds. Returns True if sensor is successfully activated, False otherwise.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'deactivate_sensor': 'Action: Deactivate sensor. Returns True if sensor is successfully deactivated, False otherwise.', 'is_sensor_active': 'Condition: Check if sensor is active. Returns True if sensor is active, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'w
###
4.// INSTRUCTIONS: Use only the following behaviors {'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.', 'detect_nest': 'Action: Use sensors to detect the location of the nest. Returns True when the nest is detected, False otherwise.', 'go_to_nest': 'Action: Move towards the detected nest location. Returns True once the robot reaches the nest.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Locate the nest, form a line, and return to the nest' Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>detect_nest</Condition><Action>form_line</Action><Action>task_completed</Action></Sequence><Sequence><Condition>is_target_detected</Condition><Action>go_to_nest</Action></Sequence><Action>wander</Action></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_blue': "Action: Change agent's color to blue. Always returns True.", 'change_color_to_red': "Action: Change agent's color to red. Always returns True.", 'form_circle': 'Action: Form a circle with the other robots. Always returns True.', 'is_agent_in_circle': 'Condition: Check if the agent is in the circle formation. Returns True if the agent is in the circle, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Avoid obstacles and form a circle with other robots, while avoiding red targets and going to the blue target' Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>is_obstacle_detected</Condition> <Action>avoid_obstacle</Action> </Sequence> <Selector> <Sequence> <Condition>is_target_detected</Condition> <Action>change_color_to_blue</Action> </Sequence> <Action>wander</Action> </Selector> </Sequence> <Sequence> <Condition>is_path_clear</Condition> <Action>wander</Action> </Sequence> <Sequence> <Condition>is_target_detected</Condition> <Action>change_color_to_red</Action> <Action>task_completed</Action> </Sequence> <Sequence> <Condition>is_agent_in_circle</Condition> <Action>agent_movement_freeze</Action> </Sequence> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'charge_battery': 'Action: Recharge the robot's battery. Always returns True.', 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'detect_wall': 'Condition: Check for the presence of a wall. Returns True if a wall is detected, False otherwise.', 'go_to_point': 'Action: Move to a specified point. Returns True once the robot reaches the point.', 'is_battery_low': 'Condition: Check if the robot's battery level is below 20%. Returns True if the battery is low, False otherwise.', 'is_battery_charging': 'Condition: Check if the robot's battery is currently charging. Returns True if the battery is charging, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_wall_nearby': 'Condition: Check if a wall is within 10 units. Returns True if a wall is within 10 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Avoid obstacles and find a charging station when battery is low, then return to previous location' Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>is_battery_low</Condition> <Selector> <Sequence> <Condition>detect_wall</Condition> <Sequence> <Condition>is_wall_nearby</Condition> <Action>avoid_obstacle</Action> <Action>wander</Action> </Sequence> <Action>go_to_point</Action> <Selector> <Condition>is_battery_charging</Condition> <Selector> <Sequence> <Condition>is_path_clear</Condition> <Action>w 
###
4.// INSTRUCTIONS: Use only the following behaviors {'choose_closest_target': 'Action: Choose the closest target based on location and assign it to the agent. Returns True if a target is selected, False otherwise.', 'backup_target_selection': 'Action: Select a backup target in case the primary target is no longer available. Returns True if a backup target is selected, False otherwise.', 'move_to_target': 'Subtree node: Represents a behavior tree for moving towards a selected target.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Move towards the closest target, if not available, move towards backup target.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>choose_closest_target</Action><Action>move_to_target</Action></Sequence><Sequence><Action>backup_target_selection</Action><Action>move_to_target</Action></Sequence></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'get_info_from_sensor': 'Action: Retrieve information from the robot's sensor. Returns True if the information is successfully retrieved, False otherwise.', 'process_info': 'Action: Process the information retrieved from the sensor. Returns True if the information is successfully processed, False otherwise.', 'use_predicted_data': 'Action: Use predicted data to make decisions. Returns True if the predicted data is used, False otherwise.', 'is_task_complete': 'Condition: Checks if the task has been successfully completed. Returns True if the task is complete, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Process sensor data and make decisions based on that data until the task is complete.
5.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_task_complete</Condition><Action>get_info_from_sensor</Action><Action>process_info</Action><Action>use_predicted_data</Action></Sequence></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'find_resources': 'Action: Search for nearby resources. Always returns True.', 'collect_resource': 'Action: Collect the resource at the current location. Always returns True.', 'return_to_base': 'Action: Return to the base and deposit collected resources. Always returns True.', 'is_resource_available': 'Condition: Check if a resource is available at the current location. Returns True if a resource is available, False otherwise.', 'is_inventory_full': 'Condition: Check if the robot's inventory is full. Returns True if the inventory is full, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: If a resource is available, collect it and return to base. Otherwise, keep searching for resources until the inventory is full, then return to base to deposit them.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_resource_available</Condition><Sequence><Action>find_resources</Action><Action>collect_resource</Action><Action>return_to_base</Action></Sequence></Sequence><Sequence><Condition>is_inventory_full</Condition><Sequence><Action>find_resources</Action><Action>return_to_base</Action></Sequence></Sequence></Selector></BehaviorTree>
 
###
7.// INSTRUCTIONS: Use only the following behaviors {'change_trajectory': 'Action: Change the robot's trajectory to avoid obstacles. Always returns True.', 'check_battery_level': 'Condition: Check the robot's battery level. Returns True if the battery level is above 50%, False otherwise.', 'charge_battery': 'Action: Charge the robot's battery. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: While the battery level is above 50%, continue changing trajectory to avoid obstacles. If the battery level falls below 50%, stop avoiding obstacles and charge the battery.
7.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>check_battery_level</Condition><Sequence><Action>change_trajectory</Action><Action>wait</Action></Sequence></Sequence><Sequence><Condition>check_battery_level</Condition><Sequence><Action>charge_battery</Action><Action>wait</Action></Sequence></Sequence></Selector></BehaviorTree>
###
3.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'turn_left': 'Action: Turn agent 90 degrees to the left. Always returns True.', 'turn_right': 'Action: Turn agent 90 degrees to the right. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3.// USER COMMAND: generate behavior tree to 'Move forward, avoid obstacles, and turn 90 degrees to the left if obstacles are present, turn 180 degrees if line is not formed, turn 90 degrees to the right when target is detected, and change color to green when target is reached.'Output only the XML behavior tree without extra text.
3.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Action>continue_movement_agent</Action> <Sequence> <Condition>is_obstacle_detected</Condition> <Action>avoid_obstacle</Action> <Selector> <Action>turn_left</Action> <Sequence> <Condition>is_line_formed</Condition> <Action>task_completed</Action> </Sequence> </Selector> <Action>turn_right</Action> </Sequence> <Condition>is_target_detected</Condition> <Action>change_color_to_green</Action> <Action>task_completed</Action> </Selector> <Action>turn_right</Action> <Action>turn_right</Action> </Sequence> </BehaviorTree>

###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_purple': "Action: Change agent's color to purple. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'move_to_position': 'Action: Move to a specific position in the environment. Returns True when reached, False if obstacles are encountered on the way.', 'is_color_purple': 'Condition: Check if agent's color is purple. Returns True if color is purple, False otherwise.', 'is_color_red': 'Condition: Check if agent's color is red. Returns True if color is red, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Move to position (5,3), change color to purple, continue moving, change color to green when target is detected, and return to the starting position.'Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Action>move_to_position</Action> <Action>change_color_to_purple</Action> <Action>continue_movement_agent</Action> <Condition>is_target_detected</Condition> <Action>change_color_to_green</Action> <Action>task_completed</Action> </Sequence> <Action>move_to_position</Action> <Action>change_color_to_green</Action> <Action>continue_movement_agent</Action> <Action>task_completed</Action> </Selector> <Action>move_to_position</Action> </Sequence> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'form_circle': 'Action: Form a circle with other agents. Always returns True.', 'is_agent_in_circle': 'Condition: Check if agent is in a circle formation. Returns True if agent is in a circle formation with others, False otherwise.', 'is_circle_complete': 'Condition: Check if the circle is complete. Returns True if all agents have formed a complete circle, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'travel_to_position': 'Action: Travel to a specific position in the environment as a group. Returns True when all agents have reached the position, False if obstacles are encountered on the way.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Form a circle with other agents, travel to position (10,5) together, and change color to white when line is formed.'Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Selector> <Condition>is_circle_complete</Condition> <Action>change_color_to_white</Action> <Action>agent_movement_freeze</Action> </Selector4.// INSTRUCTIONS: Use only the following behaviors {'turn_90_degrees_left': 'Action: Turn 90 degrees left while maintaining formation. Always returns True.', 'turn_90_degrees_right': 'Action: Turn 90 degrees right while maintaining formation. Always returns True.', 'move_forward': 'Action: Move one step forward while maintaining formation. Always returns True.', 'is_obstacle_ahead': 'Condition: Check if there is an obstacle blocking the path ahead for the formation. Returns True if an obstacle is detected, False otherwise.', 'is_formation_broken': 'Condition: Check if the formation has become misaligned or broken. Returns True if the formation is broken, False otherwise.', 'is_target_reached': 'Condition: Check if the target destination has been reached. Returns True if the destination is reached, False otherwise.', 'halt_movement': 'Action: Stop the formation from moving forward. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Move the swarm of robots to a specified location, avoiding obstacles and maintaining formation.
4.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>is_obstacle_ahead</Condition><Selector><Sequence><Condition>is_formation_broken</Condition><Action>turn_90_degrees_left</Action><Action>turn_90_degrees_right</Action></Sequence><Action>move_forward</Action></Selector></Sequence><Action>halt_movement</Action></Selector></Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'gather_resource': 'Action: Move to and gather a resource. Always returns True.', 'return_to_base': 'Action: Return to base after gathering resources. Always returns True.', 'deposit_resource': 'Action: Deposit gathered resource at base. Always returns True.', 'is_resource_available': 'Condition: Check if there is a resource available at the current location. Returns True if a resource is available, False otherwise.', 'is_base_reached': 'Condition: Check if the agent has reached the base. Returns True if the base is reached, False otherwise.', 'has_resource': 'Condition: Check if the agent is currently carrying a resource. Returns True if the agent has a resource, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Gather resources while avoiding obstacles and return to base to deposit them.
5.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>is_resource_available</Condition><Action>gather_resource</Action></Sequence><Action>avoid_obstacles</Action></Selector><Condition>has_resource</Condition><Sequence><Condition>is_base_reached</Condition><Action>deposit_resource</Action></Sequence><Action>return_to_base</Action></Sequence></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'move_towards_food': 'Action: Move towards the closest food source. Always returns True.', 'eat_food': 'Action: Consume the food at the current location. Always returns True.', 'drop_off_food': 'Action: Drop off any gathered food at the designated location. Always returns True.', 'is_at_food_source': 'Condition: Check if the agent is currently at a food source. Returns True if at a food source, False otherwise.', 'is_carried_food_empty': 'Condition: Check if the agent's carried food is empty. Returns True if empty, False otherwise.', 'is_food_available': 'Condition: Check if there is food available at the current location. Returns True if food is available, False otherwise.', 'is_food_depleted': 'Condition: Check if the current food source has been depleted. Returns True if depleted, False otherwise.' }, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Collect food from multiple sources and drop them off at a designated location.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_at_food_source</Condition><Condition>is_food_depleted</Condition><Action>move_towards_food</Action></Sequence><Action>move_forward</Action></Selector><Sequence><Condition>is_food_available</Condition><Selector><Sequence><Condition>is_carried_food_empty</Condition><Action>eat_food</Action></Sequence><Action>drop_off_food</Action></Selector></Sequence></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'roam': 'Action: Move randomly within the environment. Always returns True.', 'follow_leader': 'Action: Follow the designated leader. Always returns True.', 'reform_formation': 'Action: Reform the formation if it becomes broken or misaligned. Always returns True.', 'is_leader_nearby': 'Condition: Check if the designated leader is within a certain range. Returns True if leader is nearby, False otherwise.', 'is_formation_broken': 'Condition: Check if the formation has become misaligned or broken. Returns True if the formation is broken, False otherwise.', 'at_leader_destination': 'Condition: Check if the agent has reached the designated leader\'s destination. Returns True if at destination, False otherwise.', 'leader_movement': 'Action: Follow the leader\'s movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: Have the swarm of robots follow a designated leader and reform formation if necessary.
7.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>is_leader_nearby</Condition><Selector><Condition>is_formation_broken</Condition><Action>reform_formation</Action><Condition>at_leader_destination</Condition><Action>follow_leader</Action></Selector></Sequence><Action>roam</Action></Selector></Sequence></BehaviorTree> 
###
4.// INSTRUCTIONS: Use only the following behaviors {'collect_water': 'Action: Collect water from nearby sources. Always returns True.', 'deliver_water': 'Action: Deliver collected water to the designated location. Always returns True.', 'check_resource_level': 'Condition: Check if the robot has enough resources. Returns True if the robot has enough resources, False otherwise.', 'find_resource': 'Action: Make the robot find and collect a specific resource. Always returns True.', 'scan_resources': 'Action: Scan the environment to identify potential resources. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command, say (Sorry, I can't do the task)
4.// USER COMMAND: Collect enough resources to deliver and ensure resource levels stay above a certain threshold.
4.// OUTPUT:
<BehaviorTree><Sequence><Condition>check_resource_level</Condition><Action>deliver_water</Action><Sequence><Action>find_resource</Action><Action>scan_resources</Action></Sequence><Action>collect_water</Action></Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'observe_environment': 'Action: Collect data about the environment using sensors. Always returns True.', 'process_data': 'Action: Process the collected data and make decisions. Always returns True.', 'navigate_to_location': 'Action: Make the robot navigate to a specific location. Returns True when the location is reached.', 'construct_map': 'Action: Use the collected data to construct a map of the environment. Always returns True.', 'patrol': 'Action: Patrol the area and gather more data. Always returns True.', 'reach_home': 'Condition: Check if the robot is at its designated home. Returns True if the robot is at home, False otherwise.', 'is_new_data_available': 'Condition: Check if new data has been collected. Returns True if new data is available, False otherwise.', 'is_map_constructed': 'Condition: Check if the map of the environment has been constructed. Returns True if the map is complete, False otherwise.', 'is_task_completed': 'Event: Triggered when the robot completes the designated task. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command, say (Sorry, I can't do the task)
5.// USER COMMAND: Navigate through the environment, collecting and processing data to construct a map and return home.
5.// OUTPUT:
<BehaviorTree><Sequence><Action>observe_environment</Action><Sequence><Condition>is_new_data_available</Condition><Action>process_data</Action></Sequence><Sequence><Condition>is_map_constructed</Condition><Action>navigate_to_location</Action></Sequence><Sequence><Condition>reach_home</Condition><Event>is_task_completed</Event></Sequence><Action>construct_map</Action></Sequence><Action>patrol</Action></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'report_status': 'Action: Report the agent's status and current location. Returns True when the report is completed.', 'wait': 'Action: Wait for a designated amount of time. Always returns True.', 'scout_area': 'Action: Scout the designated area and collect data. Always returns True.', 'repair': 'Action: Use collected resources to repair any damages. Always returns True.', 'build_structure': 'Action: Build a designated structure using collected resources. Returns True when the structure is completed.', 'gather_resources': 'Action: Gather resources from nearby sources. Always returns True.', 'has_enough_resources': 'Condition: Check if the agent has enough resources for designated tasks. Returns True if enough resources are available, False otherwise.', 'is_area_explored': 'Condition: Check if the designated area has been fully explored. Returns True if the area is explored, False otherwise.', 'is_structure_built': 'Condition: Check if the designated structure has been built. Returns True if the structure is built, False otherwise.', 'is_agent_damaged': 'Condition: Check if the agent has sustained damage. Returns True if the agent is damaged, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command, say (Sorry, I can't do the task)
6.// USER COMMAND: Repair any damages, build a shelter, and gather enough resources to survive.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_agent_damaged</Condition><Action>repair</Action></Sequence><Sequence><Action>build_structure</Action><Sequence><Condition>is_structure_built</Condition><Action>gather_resources</Action></Sequence><Action>wait</Action></Sequence><Action>report_status</Action><Sequence><Condition>has_enough_resources</Condition><Event>is_area_explored</Event></Sequence><Action>scout_area</Action></Selector></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'initialize': 'Subtree node: Initializes the swarm robots and assigns roles to each robot.', 'coordinate_targets': 'Subtree node: Coordinates the targets among swarm robots to achieve a common goal.', 'execute_task': 'Action: Execute the designated task. Returns True when the task is completed.', 'update_position': 'Action: Update the robot's position based on its movements. Always returns True.', 'send_messages': 'Action: Send messages to other swarm robots to communicate and coordinate. Always returns True.', 'is_ready': 'Condition: Check if all robots are ready to start their tasks. Returns True if all robots are ready, False otherwise.', 'is_task_completed': 'Condition: Check if the designated task is completed by all robots. Returns True if all robots have completed the task, False otherwise.', 'is_synchronizing': 'Condition: Check if the robots are currently synchronizing their movements and tasks. Returns True if synchronizing, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command, say (Sorry, I can't do the task)
7.// USER COMMAND: Coordinate the movement and tasks of multiple swarm robots to complete a complex search and rescue mission.
7.// OUTPUT:
<BehaviorTree><Sequence><Action>initialize</Action><Sequence><Condition>is_ready</Condition><Action>execute_task</Action></Sequence><Sequence><Condition>is_task_completed</Condition><Event>is_synchronizing</Event></Sequence></Sequence><Action>update_position</Action><Trigger>is_synchronizing</Trigger><Sequence><Condition>is_synchronizing</Condition><Action>send_messages</Action></Sequence><Sequence><Condition>is_synchronizing</Condition><Trigger>is_task_completed</Trigger></Sequence><Action>coordinate_targets</Action></BehaviorTree>
###
3.// INSTRUCTIONS: Use only the following behaviors {'move_to_position': 'Action: Move agent to a specific position. Always returns True.', 'search_for_food': 'Subtree node: Represents a behavior tree for finding food.', 'is_hungry': 'Condition: Check if the agent is hungry. Returns True if agent is hungry, False otherwise.', 'eat_food': 'Action: Make agent eat food. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3.// USER COMMAND: Find food and eat if hungry. Otherwise, move to a specific position.
3.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_hungry</Condition><Action>search_for_food</Action><Action>eat_food</Action></Sequence><Action>move_to_position</Action></Selector></BehaviorTree>

###
4.// INSTRUCTIONS: Use only the following behaviors {'explore_area': 'Subtree node: Represents a behavior tree for exploring the environment.', 'is_safe_to_move': 'Condition: Check if it is safe to move. Returns True if it is safe, False otherwise.', 'is_target_detected': 'Condition: Check if target is within 10 units. Returns True if the target is within 10 units of distance, False otherwise.', 'chase_target': 'Action: Follow and chase target. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: If target is detected, chase target. Otherwise, explore the area if it is safe to move.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_target_detected</Condition><Action>chase_target</Action></Sequence><Sequence><Condition>is_safe_to_move</Condition><Action>explore_area</Action></Sequence></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'move_to_object': 'Action: Move agent to the nearest object. Always returns True.', 'gather_objects': 'Subtree node: Represents a behavior tree for gathering objects.', 'check_inventory_full': 'Condition: Check if inventory is full. Returns True if inventory is full, False otherwise.', 'deposit_objects': 'Action: Deposit gathered objects. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Gather objects until inventory is full and then deposit them.
5.// OUTPUT:
<BehaviorTree><Sequence><Condition>check_inventory_full</Condition><Action>deposit_objects</Action></Sequence><Action>move_to_object</Action><Action>gather_objects</Action></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'pick_up_target': 'Action: Pick up target object. Always returns True.', 'detect_target': 'Subtree node: Represents a behavior tree for detecting target objects.', 'is_inventory_full': 'Condition: Check if inventory is full. Returns True if inventory is full, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Pick up target object until inventory is full. Output final inventory count.
6.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_inventory_full</Condition><Action>detect_target</Action></Sequence><Action>pick_up_target</Action></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'move_to_object': 'Action: Move agent to the target object. Always returns True.', 'detect_target': 'Subtree node: Represents a behavior tree for detecting target objects.', 'is_hungry': 'Condition: Check if the agent is hungry. Returns True if agent is hungry, False otherwise.', 'eat_food': 'Action: Make agent eat food. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: If target is detected, move to target and eat if hungry.
7.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_target_detected</Condition><Action>detect_target</Action><Action>move_to_object</Action><Action>eat_food</Action></Sequence></Selector></BehaviorTree>###
3.// INSTRUCTIONS: Use only the following behaviors {'search_object': 'Subtree node: Represents a behavior tree for searching for a specific object.', 'pick_up_object': 'Action: Picks up the object if it is found. Always returns True.', 'go_to_location': 'Action: Moves the robot to the specified location. Always returns True.', 'check_battery': 'Action: Checks the battery level. Always returns True.', 'is_battery_low': 'Condition: Checks if the battery is below a specific threshold. Returns True if battery is low, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3.// USER COMMAND: Search for a key in the room and pick it up if found. If battery is low, go to charging station before continuing search.
3.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>search_object</Action><Sequence><Condition>has_object_found</Condition><Action>pick_up_object</Action></Sequence></Sequence><Sequence><Action>check_battery</Action><Condition>is_battery_low</Condition><Action>go_to_location</Action></Sequence></Selector></BehaviorTree>
###
4.// INSTRUCTIONS: Use only the following behaviors {'detect_enemy': 'Condition: Checks if an enemy is in range. Returns True if an enemy is detected, False otherwise.', 'hide': 'Action: Makes the robot hide in a safe location. Always returns True.', 'get_weapon': 'Action: Moves to a nearby weapon and picks it up. Always returns True.', 'attack': 'Action: Fires weapons at the enemy. Always returns True.', 'scan_surroundings': 'Action: Scans the surroundings for any potential threats. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: If an enemy is detected, hide and scan surroundings. If no enemy is detected, go to a nearby weapon and start attacking.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>detect_enemy</Condition><Sequence><Action>hide</Action><Action>scan_surroundings</Action></Sequence></Sequence><Sequence><Action>get_weapon</Action><Sequence><Condition>has_weapon_found</Condition><Action>attack</Action></Sequence></Sequence></Selector></BehaviorTree>
###
5.// INSTRUCTIONS: Use only the following behaviors {'detect_object': 'Condition: Checks if a specific object is in range. Returns True if the object is detected, False otherwise.', 'grab': 'Action: Makes the robot grab the object and store it. Always returns True.', 'move_towards_location': 'Action: Moves the robot towards the specified location. Always returns True.', 'check_inventory': 'Action: Checks the robot\'s inventory for a specific item. Returns True if the item is found, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: If a key is detected, grab it and move towards the door. If the key is not in inventory, continue searching for it.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>detect_object</Condition><Action>grab</Action><Action>move_towards_location</Action></Sequence><Sequence><Action>check_inventory</Action><Condition>has_key_found</Condition></Sequence></Selector></BehaviorTree>
###
6.// INSTRUCTIONS: Use only the following behaviors {'explore': 'Subtree node: Represents a behavior tree for exploring a specific area.', 'collect_item': 'Action: Collects a specific item if found. Always returns True.', 'navigate_to_location': 'Action: Navigates the robot to a specified location. Always returns True.', 'check_status': 'Action: Checks the robot\'s status. Always returns True.', 'is_status_okay': 'Condition: Checks if the robot\'s status is okay. Returns True if status is okay, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Explore the area and collect any valuable items. If robot status drops below a certain level, navigate to a designated recharge point.
6.// OUTPUT:
<BehaviorTree><Selector><Action>explore</Action><Sequence><Condition>is_status_okay</Condition><Action>collect_item</Action></Sequence><Sequence><Action>check_status</Action><Sequence><Condition>is_status_low</Condition><Action>navigate_to_location</Action></Sequence></Sequence></Selector></BehaviorTree>
###
7.// INSTRUCTIONS: Use only the following behaviors {'detect_target': 'Condition: Checks if a specific target is within range. Returns True if target is detected, False otherwise.', 'shoot': 'Action: Fires at the target. Always returns True.', 'reload': 'Action: Reloads the weapon. Always returns True.', 'find_cover': 'Action: Moves to a nearby cover for protection. Always returns True.', 'avoid_obstacles': 'Action: Navigates around any obstacles in the way. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: If a specific target is in range, shoot at it. If ammo runs low, find cover and reload. Continue avoiding obstacles while attacking.
7.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>detect_target</Condition><Action>shoot</Action></Sequence><Sequence><Condition>is_ammo_low</Condition><Action>find_cover</Action><Action>reload</Action></Sequence></Selector><Action>avoid_obstacles</Action></BehaviorTree>
###
4.// INSTRUCTIONS: Use only the following behaviors {'guard_nest': 'Action: Stay near the nest and defend it from intruders. Always returns True.', 'patrol_area': 'Action: Patrol a designated area to look for potential threats. Always returns True.', 'report_status': "Action: Report current status and location to other swarm robots. Always returns True.", 'is_intruder_detected': 'Condition: Check if an intruder or foreign object is detected near the nest. Returns True if an intruder is detected, False otherwise.', 'is_back_up_needed': 'Condition: Check if a nearby robot is requesting back-up support. Returns True if back-up is needed, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Generate behavior tree for a swarm of robots to protect their nest from intruders and cooperate to respond to back-up requests.
4.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>is_intruder_detected</Condition><Action>guard_nest</Action></Sequence><Selector><Condition>is_back_up_needed</Condition><Action>patrol_area</Action></Selector></Selector><Action>report_status</Action></Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'act_distance_sense': "Action: Use distance sensors to determine the surroundings of the robot. Always returns True.", 'act_light_sense': 'Action: Use light sensors to detect light intensity and direction. Always returns True.', 'act_noise_sense': "Action: Use sound sensors to listen for noises and detect their direction. Always returns True.", 'move_random': 'Action: Move in a random direction for a set distance. Always returns True.', 'replicate': 'Action: Create a duplicate of the robot using available materials. Always returns True.', 'is_resource_available': 'Condition: Check if there are enough resources nearby to replicate. Returns True if resources are available, False otherwise.', 'is_robot_in_darkness': 'Condition: Check if the robot is in a dark environment. Returns True if the light intensity is below a certain threshold, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Generate behavior tree for a swarm of robots to search for resources and replicate when necessary in an unknown, possibly dark environment.
5.// OUTPUT:
<BehaviorTree><Sequence><Selector><Condition>is_robot_in_darkness</Condition><Action>act_light_sense</Action></Selector><Action>act_distance_sense</Action><Selector><Sequence><Condition>is_resource_available</Condition><Action>move_random</Action><Action>replicate</Action></Sequence></Selector></Sequence></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'detect_neighbor_distances': "Action: Use sensors to detect the distances of nearby robots. Always returns True.", 'signal_speed_increase': 'Action: Send a signal to increase the robot's speed. Always returns True.', 'signal_speed_decrease': 'Action: Send a signal to decrease the robot's speed. Always returns True.', 'maintain_safe_distance': 'Action: Maintain a safe distance from nearby robots. Always returns True.', 'is_neighbor_too_close': 'Condition: Check if a nearby robot is too close. Returns True if a robot is within a specified distance, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Generate behavior tree for a swarm of robots to maintain a safe distance from each other while moving together.
6.// OUTPUT:
<BehaviorTree><Sequence><Selector><Condition>is_neighbor_too_close</Condition><Action>signal_speed_decrease</Action></Selector><Action>detect_neighbor_distances</Action><Selector><Condition>is_neighbor_too_close</Condition><Selector><Action>signal_speed_decrease</Action><Action>signal_speed_increase</Action></Selector></Selector></Sequence><Action>maintain_safe_distance</Action></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'first_robot_move': 'Action: First robot moves to predetermined location. Always returns True.', 'adjust_spacing': 'Action: Adjust spacing between robots. Always returns True.', 'set_direction': 'Action: Set direction for the next robot in line. Always returns True.', 'move_to_position': 'Action: Move to designated position in a line. Always returns True.', 'is_robot_at_end': 'Condition: Check if a robot has reached the end of the line. Returns True if at the end, False otherwise.', 'is_spacing_correct': 'Condition: Check if the spacing between robots is within a predetermined range. Returns True if spacing is correct, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: Generate behavior tree for a swarm of robots to form a line and move together in a specific direction.
7.// OUTPUT:
<BehaviorTree><Sequence><Action>first_robot_move</Action><Sequence><Condition>is_spacing_correct</Condition><Selector><Sequence><Condition>is_robot_at_end</Condition><Action>set_direction</Action><Action>first_robot_move</Action></Sequence><Action>move_to_position</Action></Selector><Action>adjust_spacing</Action></Sequence></Sequence></BehaviorTree> 
###
3.// INSTRUCTIONS: Use only the following behaviors {'whistle': 'Action: Emit a loud whistle sound. Always returns True.', 'stand_still': 'Action: Stand still and do not move. Always returns True.', 'collect_food': 'Action: Collect food resources and store them in a designated storage area. Returns True when resources are collected.', 'return_to_nest': 'Action: Return to the designated nest area. Returns True once the agent is within the nest area.', 'is_food_available': 'Condition: Check if there is food available nearby. Returns True if food is available, False otherwise.', 'is_storage_full': 'Condition: Check if the designated storage area is full. Returns True if the storage is full, False otherwise.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3.// USER COMMAND: Search for and collect food resources, return to designated storage area, and emit a loud whistle once the storage is full.
3.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_food_available</Condition><Action>collect_food</Action><Action>task_completed</Action></Sequence><Condition>is_storage_full</Condition><Action>return_to_nest</Action><Action>whistle</Action></Selector></BehaviorTree>

###
4.// INSTRUCTIONS: Use only the following behaviors {'move_forward': 'Action: Move the robot one step forward in the current direction. Always returns True.', 'rotate_left': 'Action: Rotate the robot left by 90 degrees. Always returns True.', 'rotate_right': 'Action: Rotate the robot right by 90 degrees. Always returns True.', 'move_backward': 'Action: Move the robot one step backward in the current direction. Always returns True.', 'is_goal_reached': 'Condition: Check if the goal position is reached. Returns True if the goal is reached, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Move forward until an obstacle is detected, rotate left, and then continue moving forward until the goal is reached.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_obstacle_detected</Condition><Action>move_backward</Action><Action>rotate_left</Action><Action>task_completed</Action></Sequence><Action>move_forward</Action></Selector><Sequence><Condition>is_goal_reached</Condition><Action>task_completed</Action></Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'move_forward': 'Action: Move the robot one step forward in the current direction. Always returns True.', 'rotate_left': 'Action: Rotate the robot left by 90 degrees. Always returns True.', 'rotate_right': 'Action: Rotate the robot right by 90 degrees. Always returns True.', 'move_backward': 'Action: Move the robot one step backward in the current direction. Always returns True.', 'is_agent_nearby': 'Condition: Check if another agent is within a 10-unit radius. Returns True if another agent is nearby, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Move forward until an obstacle or another agent is detected, then rotate right and continue moving forward.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_obstacle_detected</Condition><Action>move_backward</Action><Action>rotate_right</Action><Action>task_completed</Action></Sequence><Sequence><Condition>is_agent_nearby</Condition><Action>rotate_right</Action><Action>task_completed</Action></Sequence></Selector><Action>move_forward</Action></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'whistle': 'Action: Emit a loud whistle sound. Always returns True.', 'stand_still': 'Action: Stand still and do not move. Always returns True.', 'follow_leader': 'Action: Follow the leader agent in a designated direction. Always returns True.', 'change_direction': 'Action: Change direction by rotating the agent left or right. Always returns True.', 'is_leader_nearby': 'Condition: Check if the leader agent is within a 20-unit radius. Returns True if the leader agent is nearby, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Follow the leader agent until an obstacle is detected, then change direction and continue following the leader.
6.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_leader_nearby</Condition><Action>follow_leader</Action></Sequence><Selector><Sequence><Condition>is_obstacle_detected</Condition><Action>change_direction</Action><Action>task_completed</Action></Sequence><Action>follow_leader</Action></Selector></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'move_forward': 'Action: Move the robot one step forward in the current direction. Always returns True.', 'rotate_left': 'Action: Rotate the robot left by 90 degrees. Always returns True.', 'rotate_right': 'Action: Rotate the robot right by 90 degrees. Always returns True.', 'move_backward': 'Action: Move the robot one step backward in the current direction. Always returns True.', 'is_destination_reached': 'Condition: Check if the destination is reached. Returns True if the destination is reached, False otherwise.', 'is_colliding_with_obstacle': 'Condition: Check if the robot is currently colliding with an obstacle. Returns True if collision is detected, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: Move forward until reaching the destination, while avoiding any obstacles along the way.
7.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_colliding_with_obstacle</Condition><Action>rotate_left</Action><Action>move_backward</Action><Action>task_completed</Action></Sequence><Action>move_forward</Action><Condition>is_destination_reached</Condition></BehaviorTree> 
###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_red': "Action: Change agent's color to red. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_square': 'Action: Form a square shape with other robots at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_square_formed': 'Condition: Check if a square shape is formed with other robots at the center. Returns True if the shape is formed, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Form a square with other robots and change color to red when target is reached'. Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_target_reached</Condition><Sequence><Action>form_square</Action><Action>change_color_to_red</Action><Action>task_completed</Action></Sequence></Sequence><Action>wander</Action></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'collect_resource': 'Action: Collect resources from the surrounding area. Always returns True.', 'deposit_resource': 'Action: Deposit collected resources at the designated location. Always returns True.', 'drop_resource': "Action: Drop a specific resource that has been collected. Always returns True.", 'is_resource_available': 'Condition: Check if resources are available in the surrounding area. Returns True if resources are present, False otherwise.', 'is_resource_full': 'Condition: Check if the resource container is full. Returns True if the container is full, False otherwise.', 'is_resource_route_complete': 'Condition: Check if all designated resource locations have been successfully collected from and deposited at. Returns True if all locations are completed, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Collect resources from surrounding area and deposit at designated locations until all locations are complete'. Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_resource_available</Condition><Sequence><Action>collect_resource</Action><Selector><Condition>is_resource_full</Condition><Action>deposit_resource</Action><Selector><Condition>is_resource_route_complete</Condition><Action>task_completed</Action><Action>drop_resource</Action></Selector></Selector></Sequence></Sequence><Action>wander</Action></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'consume_energy': 'Action: Consume energy while moving or performing tasks. Always returns True.', 'is_energy_low': 'Condition: Check if the agent's energy level is low. Returns True if energy is below 30%, False otherwise.', 'is_energy_level_normal': 'Condition: Check if the agent's energy level is normal. Returns True if energy is above 50%, False otherwise.', 'is_energy_full': 'Condition: Check if the agent's energy level is full. Returns True if energy is at maximum capacity, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Maintain energy level while performing tasks and recharge when energy is low'. Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_energy_full</Condition><Selector><Sequence><Condition>is_energy_low</Condition><Action>consume_energy</Action><Action>wait_at_recharge_station</Action></Sequence><Action>perform_tasks</Action></Selector></Sequence></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'build_structure': 'Action: Construct a structure using available resources. Always returns True.', 'collect_resource': 'Action: Collect resources from the surrounding area. Always returns True.', 'deposit_resource': 'Action: Deposit collected resources at the designated location. Always returns True.', 'is_resource_available': 'Condition: Check if resources are available in the surrounding area. Returns True if resources are present, False otherwise.', 'is_structure_complete': 'Condition: Check if the structure has been fully constructed. Returns True if the structure is complete, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: generate behavior tree to 'Gather resources and build a structure'. Output only the XML behavior tree without extra text.
7.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_resource_available</Condition><Sequence><Action>collect_resource</Action><Selector><Condition>is_structure_complete</Condition><Action>build_structure</Action><Selector><Action>deposit_resource</Action><Action>wander</Action></Selector></Selector></Sequence></Sequence><Selector><Condition>is_structure_complete</Condition><Action>task_completed</Action><Action>wander</Action></Selector></BehaviorTree> 
###
3.//INSTRUCTIONS: Use only the following behaviors {'scan_surroundings': 'Action: Scans the surroundings for enemies, returns True if there are enemies detected and False otherwise.', 'move_to_target': 'Action: Moves the robot to its designated target location. Always returns True.', 'engage_enemy': 'Action: Engages with the enemy, either by attacking or taking defensive measures. Always returns True.', 'is_task_complete': 'Condition: Checks if the current task is complete. Returns True if task is complete, False otherwise.'},
to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3.//USER COMMAND: Complete a mission to take down a specific target enemy while avoiding detection from other enemies in the area.
3.//OUTPUT:
<BehaviorTree><Sequence><Action>scan_surroundings</Action><Selector><Sequence><Action>is_task_complete</Action><Action>move_to_target</Action></Sequence><Sequence><Action>engage_enemy</Action><Action>move_to_target</Action></Sequence></Selector></Sequence></BehaviorTree>

###
4.//INSTRUCTIONS: Use only the following behaviors {'explore_area': 'Subtree node: Represents a behavior tree for exploring an uncharted area.', 'investigate_suspicious_object': 'Action: Investigate a suspicious object or area. Always returns True.', 'open_door': 'Action: Attempts to open a closed door. Returns True if successful, False otherwise.', 'is_item_needed': 'Condition: Checks the agent's inventory to see if a specific item is needed. Returns True if item is needed, False otherwise.'},
to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.//USER COMMAND: Explore a mysterious dungeon, investigate strange objects, and find the key to unlock a hidden room.
4.//OUTPUT:
<BehaviorTree><Action>explore_area</Action><Sequence><Action>investigate_suspicious_object</Action><Sequence><Condition>is_item_needed</Condition><Selector><Action>open_door</Action><Action>investigate_suspicious_object</Action></Selector></Sequence></BehaviorTree>

###
5.//INSTRUCTIONS: Use only the following behaviors {'build_structure': 'Subtree node: Represents a behavior tree for constructing a structure or building.', 'gather_resources': 'Subtree node: Represents a behavior tree for gathering resources or materials.', 'defend_base': 'Subtree node: Represents a behavior tree for defending the home base or structure.', 'has_enough_resources': 'Condition: Checks if the agent has enough resources to build a structure. Returns True if enough resources are available, False otherwise.'},
to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.//USER COMMAND: Construct a base, gather necessary resources, and defend against potential threats.
5.//OUTPUT:
<BehaviorTree><Sequence><Action>gather_resources</Action><Selector><Sequence><Condition>has_enough_resources</Condition><Action>build_structure</Action></Sequence><Action>defend_base</Action></Selector></Sequence></BehaviorTree>

###
6.//INSTRUCTIONS:Use only the following behaviors {'detect_target': 'Action: Searches and detects the nearest target for the robot to track. Returns True if target is detected, False otherwise.', 'track_target': 'Action: Follows and tracks the target, either by moving towards it or maintaining a certain distance. Always returns True.', 'neutralize_target': 'Action: Engages with the target and eliminates it. Returns True if successful, False otherwise.', 'needs_reload': 'Condition: Checks if the robot's ammunition is low and needs to be reloaded. Returns True if reload is needed, False otherwise.'},
to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.//USER COMMAND: Carry out a sniper mission by tracking and eliminating a high priority target, ensuring to reload when needed.
6.//OUTPUT:
<BehaviorTree><Sequence><Action>detect_target</Action><Sequence><Action>needs_reload</Action><Action>reload_ammo</Action></Sequence><Action>track_target</Action><Selector><Sequence><Action>needs_reload</Action><Action>reload_ammo</Action></Sequence><Action>neutralize_target</Action></Selector></Sequence></BehaviorTree>

###
7.//INSTRUCTIONS:Use only the following behaviors {'collect_specimen': 'Action: Collects a specimen or sample from the environment. Returns True if successful, False otherwise.', 'analyze_specimen': 'Action: Analyzes the collected specimen. Returns True if results are obtained, False otherwise.', 'store_specimen': 'Action: Safely stores the specimen in a designated storage container. Returns True if successful, False otherwise.', 'has_space': 'Condition: Checks if the storage container has enough space for a new specimen. Returns True if space is available, False otherwise.'}, 
to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.//USER COMMAND: Conduct a scientific survey by collecting, analyzing, and storing various specimens found in the area.
7.//OUTPUT:
<BehaviorTree><Sequence><Action>collect_specimen</Action><Selector><Sequence><Action>has_space</Action><Action>analyze_specimen</Action></Sequence><Action>store_specimen</Action></Selector></Sequence></BehaviorTree>
###
4.// INSTRUCTIONS: Use only the following behaviors {'move_to_target': 'Action: Move towards a specific target location. Returns True when target is reached.', 'search_for_target': 'Action: Search the environment for a given target location. Returns True when target is found.', 'check_battery_level': 'Condition: Checks the remaining battery level. Returns True if battery level is above 50%, False otherwise.', 'check_distance_to_target': 'Condition: Checks the distance to the target location. Returns True if within 20 units, False otherwise.', 'charge_battery': 'Action: Charge the battery. Returns True when fully charged.', 'wait_for_charge': 'Action: Wait until the battery is charged. Returns True when ready to resume tasks.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Search for a target location, move towards it and assess the battery level. If battery level is low, charge and wait for it to be fully charged before resuming tasks.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>search_for_target</Action><Action>move_to_target</Action><Condition>check_battery_level</Condition></Sequence><Sequence><Action>charge_battery</Action><Action>wait_for_charge</Action></Sequence></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'scout_area': 'Action: Scout the area for potential threats. Returns True when area is scouted.', 'move_to_nest': 'Action: Move towards the nest location. Returns True when nest is reached.', 'check_for_threats': 'Condition: Checks for any detected threats. Returns True if threats are detected, False otherwise.', 'collect_resources': 'Action: Collect resources. Returns True when resources are successfully collected.', 'is_nest_full': 'Condition: Checks if the nest is full. Returns True if the nest is full, False otherwise.', 'return_to_nest': 'Action: Return to the nest. Returns True when the agent has reached the nest.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Scout the area for potential threats, collect resources and return to the nest. If the nest is full, move to the nest location.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>scout_area</Action><Condition>check_for_threats</Condition></Sequence><Sequence><Action>collect_resources</Action><Condition>return_to_nest</Condition></Sequence><Sequence><Condition>is_nest_full</Condition><Action>move_to_nest</Action></Sequence></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'form_circle': 'Action: Form a circle formation with other agents. Returns True when formation is completed.', 'check_circle_status': 'Condition: Checks the status of circle formation. Returns True if formation is complete, False otherwise.', 'protect_circle': 'Action: Protect the circle formation from outside threats. Returns True when threats are neutralized.', 'hold_position': 'Action: Hold current position. Returns True when position is maintained.', 'is_low_battery': 'Condition: Checks for low battery level. Returns True if battery level is below 30%, False otherwise.', 'charge_battery': 'Action: Charge the battery. Returns True when fully charged.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Form a circle formation with other agents, protect the formation from outside threats, hold current position and recharge the battery when it is low.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>form_circle</Action><Condition>check_circle_status</Condition></Sequence><Sequence><Action>protect_circle</Action><Condition>hold_position</Condition></Sequence><Sequence><Condition>is_low_battery</Condition><Action>charge_battery</Action></Sequence></Selector></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'move_to_target': 'Action: Move towards a specific target location. Returns True when target is reached.', 'search_for_target': 'Action: Search the environment for a given target location. Returns True when target is found.', 'check_battery_level': 'Condition: Checks the remaining battery level. Returns True if battery level is above 50%, False otherwise.', 'check_distance_to_target': 'Condition: Checks the distance to the target location. Returns True if within 20 units, False otherwise.', 'charge_battery': 'Action: Charge the battery. Returns True when fully charged.', 'wait_for_charge': 'Action: Wait until the battery is charged. Returns True when ready to resume tasks.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: Move to a specific target location, but check battery level first. If battery is low, recharge and wait for it to be fully charged before resuming target movement.
7.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>check_battery_level</Condition><Action>move_to_target</Action><Condition>check_distance_to_target</Condition></Sequence><Sequence><Action>charge_battery</Action><Action>wait_for_charge</Action></Sequence></Selector></BehaviorTree>###
4.// INSTRUCTIONS: Use only the following behaviors {'get_nearest_resource': 'Subtree node: Represents a behavior tree for collecting nearest resource item, if any.', 'collect_resource': 'Action: Collect resource item and store it. Returns True if successful, False otherwise.', 'is_resource_inventory_full':'Condition: Checks if the resource inventory is full. Returns True if the inventory is full, False otherwise.', 'recharge_energy': 'Action: Recharges energy level. Always returns True.', 'is_energy_low': 'Condition: Checks if the energy level is below a specific threshold. Returns True if energy level is low, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Collect nearby resources while keeping track of energy level. If energy drops below a threshold, recharge energy.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>get_nearest_resource</Action><Selector><Sequence><Action>collect_resource</Action><Selector><Sequence><Condition>is_resource_inventory_full</Condition><Action>recharge_energy</Action></Sequence></Selector></Sequence></Selector></Sequence><Action>recharge_energy</Action></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'navigate_to_next_waypoint': 'Subtree node: Represents a behavior tree for navigating to the next waypoint.', 'is_obstacle_present': 'Condition: Checks if an obstacle is present in the current path. Returns True if obstacle is present, False otherwise.', 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'is_reached_destination': 'Condition: Checks if the agent has reached the final destination. Returns True if destination is reached, False otherwise.', 'gather_data': 'Action: Gather data at the current waypoint. Returns True if successful, False otherwise.', 'analyze_data': 'Action: Analyze the data collected. Returns True if successful, False otherwise.', 'info_confirmed': 'Condition: Checks if the analyzed data is confirmed. Returns True if data is confirmed, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Traverse a set of waypoints and gather and analyze data at each waypoint. Stop at the final destination if the analyzed data is confirmed.
5.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Action>gather_data</Action><Sequence><Action>navigate_to_next_waypoint</Action><Selector><Sequence><Condition>is_obstacle_present</Condition><Action>avoid_obstacle</Action></Sequence></Selector></Sequence></Selector><Selector><Sequence><Action>analyze_data</Action><Condition>info_confirmed</Condition></Sequence><Condition>is_reached_destination</Condition></Selector></Sequence></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'start_antenna_scan': 'Action: Turn on the antenna and scan the environment for signals. Always returns True.', 'connect_to_signal': 'Action: Connect to the strongest available signal. Returns True if successfully connected, False otherwise.', 'analysis_result_found': 'Condition: Checks if any valuable information was found in the connected signal. Returns True if information is found, False otherwise.', 'extract_data': 'Action: Extract data from the connected signal. Returns True if successful, False otherwise.', 'is_data_valid': 'Condition: Checks if the extracted data is valid. Returns True if data is valid, False otherwise.', 'store_data': 'Action: Store the valid data in a designated location. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Scan the environment for signals and connect to the strongest one. Extract and store any valid data found.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>start_antenna_scan</Action><Selector><Sequence><Action>connect_to_signal</Action></Sequence></Selector></Sequence><Selector><Sequence><Action>extract_data</Action><Condition>is_data_valid</Condition><Action>store_data</Action></Sequence><Condition>analysis_result_found</Condition></Selector></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'search_for_target': 'Subtree node: Represents a behavior tree for detecting and tracking a target.', 'identify_target': 'Action: Use advanced sensors to identify the target. Returns True if target is identified, False otherwise.', 'is_target_valid': 'Condition: Checks if the identified target is valid. Returns True if target is valid, False otherwise.', 'target_spotted': 'Condition: Checks if the target is within the robot's line of sight. Returns True if target is spotted, False otherwise.', 'track_target': 'Action: Continuously track the target using sensors. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: Use advanced sensors to search for and track a designated target. End behavior tree once the target is in sight and identified as valid.
7.// OUTPUT:
<BehaviorTree><Sequence><Action>identify_target</Action><Selector><Sequence><Action>search_for_target</Action></Sequence></Selector></Sequence><Selector><Sequence><Action>track_target</Action><Condition>target_spotted</Condition><Condition>is_target_valid</Condition></Sequence></Selector></BehaviorTree>###
4.// INSTRUCTIONS: Use only the following behaviors {'is_target_detected': 'Condition: Check if target is within range. Returns True if the target is within range, False otherwise.', 'is_enemy_detected': 'Condition: Check if enemy is within range. Returns True if the enemy is within range, False otherwise.', 'is_formation_maintained': 'Condition: Check if formation is maintained. Returns True if formation is maintained, False otherwise.', 'move_to_formation_point': 'Action: Move to designated formation point. Always returns True.', 'attack_target': 'Action: Attack the target if within range. Always returns True.', 'flee_enemy': 'Action: Flee from enemy if within range. Always returns True.', 'protect_formation': 'Subtree node: Represents a behavior tree for protecting the current formation.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Assemble in formation and maintain it while protecting against enemies and attacking the target if it is within range.
4.// OUTPUT:
<BehaviorTree><Sequence><Action>move_to_formation_point</Action><Condition>is_formation_maintained</Condition><Action>protect_formation</Action><Selector><Sequence><Condition>is_enemy_detected</Condition><Action>flee_enemy</Action></Sequence><Sequence><Condition>is_target_detected</Condition><Action>attack_target</Action></Sequence></Selector></Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'is_destroyed_building_detected': 'Condition: Check if a destroyed building is detected. Returns True if a destroyed building is detected, False otherwise.', 'is_cleaning_completed': 'Condition: Check if all debris has been cleared. Returns True if all debris has been cleared, False otherwise.', 'is_robot_at_base': 'Condition: Check if the robot is at the designated base. Returns True if at the base, False otherwise.', 'get_debris': 'Action: Collect debris if within reach. Always returns True.', 'drop_debris': 'Action: Drop collected debris at the designated location. Always returns True.', 'clean_up': 'Subtree node: Represents a behavior tree for cleaning up debris.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Start cleaning up a destroyed building, drop debris at the designated location, and return to the base when finished.
5.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_destroyed_building_detected</Condition><Action>get_debris</Action><Selector><Sequence><Condition>is_robot_at_base</Condition><Action>clean_up</Action></Sequence><Sequence><Action>drop_debris</Action><Condition>is_cleaning_completed</Condition></Sequence></Selector></Sequence></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'pick_up_object': 'Action: Pick up the object if it is within reach. Always returns True.', 'drop_object_at_bin': 'Action: Drop the object at the designated bin. Always returns True.', 'is_object_picked_up': 'Condition: Check if the object has been successfully picked up. Returns True if the object is picked up, False otherwise.', 'is_at_bin': 'Condition: Check if the robot is at the designated bin. Returns True if at the bin, False otherwise.', 'is_battery_low': 'Condition: Check if battery level is below a specific threshold. Returns True if battery level is below the threshold, False otherwise.', 'get_battery_pack': 'Action: Get a battery pack if available. Always returns True.', 'recharge_battery': 'Action: Use the battery pack to recharge the robot. Always returns True.', 'navigate_to_charging_station': 'Action: Navigate to the nearest charging station. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Pick up an object, drop it at the designated bin, and recharge at the charging station when battery is low.
6.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_object_picked_up</Condition><Action>drop_object_at_bin</Action><Selector><Sequence><Condition>is_battery_low</Condition><Action>get_battery_pack</Action><Action>recharge_battery</Action></Sequence><Action>navigate_to_charging_station</Action></Selector></Sequence></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'move_to_target': 'Action: Move towards the designated target until within reach. Always returns True.', 'gather_resource': 'Action: Gather the resource if it is within reach. Always returns True.', 'deposit_resource': 'Action: Deposit the gathered resource at the designated location. Always returns True.', 'is_at_deposit_point': 'Condition: Check if the robot is at the designated deposit point. Returns True if at the deposit point, False otherwise.', 'is_resource_available': 'Condition: Check if the resource is available. Returns True if the resource is available, False otherwise.', 'is_resource_full': 'Condition: Check if the robot's resource capacity is full. Returns True if the capacity is full, False otherwise.', 'search_for_resource': 'Action: Search the environment for available resources. Always returns True.', 'reproduce': 'Action: Reproduce and create a new robot. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: Move towards a resource, gather it, and deposit it at the designated location. When resource is full, search for new available resources and reproduce.
7.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Action>move_to_target</Action><Condition>is_resource_available</Condition><Action>gather_resource</Action><Action>deposit_resource</Action><Condition>is_resource_full</Condition></Sequence><Sequence><Action>search_for_resource</Action><Condition>is_at_deposit_point</Condition><Action>reproduce</Action></Sequence></Selector></Sequence></BehaviorTree> (Note: The specific functionality of the functions 'get_resource_urgency', 'get_enemy_threat', and 'utility_score' are not mentioned, but they will be implemented in the actual LMM model)

###
4.// INSTRUCTIONS: Use only the following behaviors {'find_exit': 'Action: Find the nearest exit. Always returns True.', 'get_map': 'Action: Request a map of the environment. Always returns True.', 'travel_to_location': 'Action: Move towards a specific location. Always returns True.', 'is_map_received': 'Condition: Check if a map of the environment was received. Returns True if map is received, False otherwise.', 'is_at_exit': 'Condition: Check if the robot is at the designated exit location. Returns True if at the exit location, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Navigate to the nearest exit by avoiding obstacles and using a map of the environment.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>get_map</Action><Condition>is_map_received</Condition><Action>travel_to_location</Action></Sequence><Sequence><Action>find_exit</Action><Sequence><Condition>is_at_exit</Condition><Action>task_completed</Action></Sequence><Sequence><Condition>is_obstacle_detected</Condition><Action>avoid_obstacle</Action></Sequence></Sequence></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'scan_surroundings': 'Action: Use sensors to scan the surroundings. Always returns True.', 'analyze_data': 'Action: Analyze the data received from the sensors. Always returns True.', 'is_enemy_detected': 'Condition: Check if an enemy is detected by the sensors. Returns True if an enemy is detected, False otherwise.', 'attack': 'Action: Perform an attack on the detected enemy. Always returns True.', 'is_critical_object_detected': 'Condition: Check if a critical object is detected by the sensors. Returns True if a critical object is detected, False otherwise.', 'perform_rescue': 'Action: Perform a rescue mission on the detected critical object. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Scan the surroundings and respond by either attacking enemies or performing a rescue mission on critical objects.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>scan_surroundings</Action><Action>analyze_data</Action><Sequence><Condition>is_enemy_detected</Condition><Action>attack</Action></Sequence><Sequence><Condition>is_critical_object_detected</Condition><Action>perform_rescue</Action></Sequence></Sequence></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'search': 'Action: Search for the lost object. Always returns True.', 'identify_object': 'Action: Identify the lost object. Always returns True.', 'grab_object': 'Action: Grab the lost object when found. Always returns True.', 'is_object_found': 'Condition: Check if the lost object is found. Returns True if the object is found, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Search for a lost object and grab it when found.
6.// OUTPUT:
<BehaviorTree><Sequence><Action>search</Action><Action>identify_object</Action><Sequence><Condition>is_object_found</Condition><Action>grab_object</Action></Sequence></Sequence></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'patrol': 'Action: Patrol the designated area. Returns True if there are no threats detected, False otherwise.', 'engage_threat': 'Subtree node: Represents a behavior tree for engaging a detected threat.', 'is_threat_detected': 'Condition: Check for threats within the designated area. Returns True if a threat is detected, False otherwise.', 'escape': 'Action: Perform an escape maneuver to evade a threat. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: Patrol an area and engage any detected threats. If a threat is too strong, escape and continue patrolling.
7.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>patrol</Action><Sequence><Condition>is_threat_detected</Condition><Action>engage_threat</Action></Sequence></Sequence><Sequence><Condition>is_threat_detected</Condition><Action>escape</Action><Action>patrol</Action></Sequence></Selector></BehaviorTree> 
###
3.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'change_color_to_blue': "Action: Change agent's color to blue. Always returns True.", 'change_color_to_yellow': "Action: Change agent's color to Yellow. Always returns True.",  'form_triangle': 'Action: Form a triangle with three agents. Always returns True.', 'is_agent_in_triangle': 'Condition: Check if agent is positioned within a triangle formation. Returns True if all three agents are within a 5 unit radius of each other, False otherwise.', 'is_agent_outside_triangle': 'Condition: Check if agent is outside of a formed triangle. Returns True if the agent is outside of a formed triangle formation, False otherwise.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'travel_to_point_A': 'Action: Move towards point A. Always returns True.', 'travel_to_point_B': 'Action: Move towards point B. Always returns True.', 'travel_to_point_C': 'Action: Move towards point C. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3.// USER COMMAND: generate behavior tree to 'Form a triangle, change color to blue, and then move to a specific point within the triangle and freeze movement.' Output only the XML behavior tree without extra text.
3.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>is_agent_in_triangle</Condition> <Action>change_color_to_blue</Action> <Selector> <Sequence> <Condition>is_agent_outside_triangle</Condition> <Action>form_triangle</Action> </Sequence> <Sequence> <Condition>travel_to_point_A</Condition> <Action>agent_movement_freeze</Action> </Sequence> <Sequence> <Condition>travel_to_point_B</Condition> <Action>agent_movement_freeze</Action> </Sequence> <Sequence> <Condition>travel_to_point_C</Condition> <Action>agent_movement_freeze</Action> </Sequence> </Selector> </Seqeunce> <Sequence> <Condition>is_agent_in_nest</Condition> <Action>task_completed</Action> </Sequence> </Selector> </BehaviorTree>

###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'change_color_to_blue': "Action: Change agent's color to blue. Always returns True.", 'change_color_to_yellow': "Action: Change agent's color to yellow. Always returns True.", 'random_movement': 'Action: Move randomly within the environment. Always returns True.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_agent_in_grid': 'Condition: Check if agent is within a predefined grid. Returns True if the agent is within the grid, False otherwise.', 'is_agent_in_space': 'Condition: Check if agent is in a specific space. Returns True if the agent is in the space, False otherwise.', 'return_to_nest': 'Action: Move towards the nest. Always returns True.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Explore the environment by moving in a grid pattern, change color to blue if an obstacle is detected, return to the nest, change color to yellow, and freeze movement.' Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>is_obstacle_detected</Condition> <Action>change_color_to_blue</Action> </Sequence> <Action>random_movement</Action> </Selector> <Sequence> <Condition>is_agent_in_grid</Condition> <Selector> <Sequence> <Selector> <Sequence> <Condition>is_agent_in_space</Condition> <Action>agent_movement_freeze</Action> </Sequence> </Selector> </Sequence> </Selector> <Sequence> <Condition>return_to_nest</Condition> <Action>change_color_to_yellow</Action> <Action>task_completed</Action> </Sequence> </Sequence> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'change_color_to_blue': "Action: Change agent's color to blue. Always returns True.", 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_yellow': "Action: Change agent's color to yellow. Always returns True.", 'move_forward': 'Action: Move forward 1 unit. Always returns True.', 'move_backward': 'Action: Move backward 1 unit. Always returns True.', 'rotate_left': 'Action: Rotate agent left. Always returns True.', 'rotate_right': 'Action: Rotate agent right. Always returns True.', 'is_ball_detected': 'Condition: Check if a ball is detected within 10 units. Returns True if a ball is detected, False otherwise.', 'is_ball_picked_up': 'Condition: Check if a picked up ball is within agent's grasp. Returns True if a ball is in the agent's grasp, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Navigate towards the ball, pick it up, rotate 180 degrees, and move to the goal while avoiding obstacles.' Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>is_ball_detected</Condition> <Selector> <Sequence> <Condition>is_ball_picked_up</Condition> <Action>rotate_180</Action> </Sequence> <Sequence> <Action>move_forward</Action> <Action>move_backward</Action> </Sequence> </Selector> <Action>change_color_to_yellow</Action> <Action>task_completed</Action> </Sequence> <Sequence> <Condition>is_obstacle_detected</Condition> <Selector> <Sequence> <Action>rotate_left</Action> </Sequence> <Action>rotate_right</Action> </Sequence> </Selector> </BehaviorTree>

###
 
###
3.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_red': "Action: Change agent's color to red. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'follow_path': 'Action: Follow a predefined path. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_near_obstacles': 'Condition: Check for obstacles within 10 units. Returns True if any obstacles are detected within 10 units, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3.// USER COMMAND: generate behavior tree to 'Follow a predefined path, avoid obstacles, and change color to white once target is reached'. Output only the XML behavior tree without extra text.
3.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>follow_path</Action><Condition>is_near_obstacles</Condition></Sequence><Action>avoid_obstacle</Action></Selector><Sequence><Condition>is_target_detected</Condition><Action>change_color_to_white</Action></Sequence></BehaviorTree>

###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'deposit_resource': 'Action: Deposit collected resources at the designated location. Returns True once the resources are deposited.', 'detect_resource': 'Condition: Check for available resources. Returns True if resources are detected, False otherwise.', 'is_agent_full': 'Condition: Check if agent has reached maximum resource capacity. Returns True if agent is full, False otherwise.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_resource_deposited': 'Condition: Check if resources have been successfully deposited. Returns True if resources are deposited, False otherwise.', 'move_towards_resource': 'Action: Move towards the nearest available resources. Returns True once the agent reaches the resources.', 'pick_resource': 'Action: Pick up the detected resource. Returns True once the resource is picked up.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Collect resources, deposit resources, and repeat until agent is full'. Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree><Sequence><Condition>detect_resource</Condition><RepeatWhile count="5"><Sequence><Action>move_towards_resource</Action><Condition>is_agent_full</Condition></Sequence></RepeatWhile></Sequence><Action>deposit_resource</Action></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_red': "Action: Change agent's color to red. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_near_obstacles': 'Condition: Check for obstacles within 10 units. Returns True if any obstacles are detected within 10 units, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_obstacle_noticed': 'Condition: Check if obstacles have been avoided for at least 10 seconds. Returns True if no obstacles are detected for 10 seconds, False otherwise.', 'move_away_from_obstacle': 'Action: Move away from detected obstacle. Returns True once the agent has moved away.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Avoid obstacles for 10 seconds and then change color to green'. Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_near_obstacles</Condition><RepeatUntilFailure><Action>move_away_from_obstacle</Action></RepeatUntilFailure><Condition>is_obstacle_noticed</Condition></Sequence><Action>change_color_to_green</Action></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color
###
3.// INSTRUCTIONS: Use only the following behaviors {'collect_resource': 'Action: Collect a resource in the environment. Always returns True.', 'return_to_base': 'Action: Return to the base with the collected resource. Always returns True.', 'is_resource_at_base': 'Condition: Check if a resource has been deposited at the base. Returns True if a resource is present, False otherwise.', 'is_resource_nearby': 'Condition: Check if a resource is nearby. Returns True if a resource is within a certain range, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3.// USER COMMAND: Generate behavior tree to collect resources and return them to the base
3.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_resource_nearby</Condition><Action>collect_resource</Action><Selector><Sequence><Condition>is_resource_at_base</Condition><Action>return_to_base</Action></Sequence></Selector></Sequence></BehaviorTree>

###
4.// INSTRUCTIONS: Use only the following behaviors {'detect_other_robots': 'Action: Use sensors to detect other robots in the vicinity. Always returns True.', 'coordinate_movement': 'Action: Coordinate movement with other robots by sharing information. Always returns True.', 'perform_task': 'Action: Perform a specific task assigned by the swarm leader. Always returns True.', 'is_swarm_leader': 'Condition: Check if the robot is the designated swarm leader. Returns True if it is the leader, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Generate behavior tree for swarm robots to collaborate and perform a complex task
4.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_swarm_leader</Condition><Action>detect_other_robots</Action><Selector><Sequence><Condition>is_swarm_leader</Condition><Action>coordinate_movement</Action><Action>perform_task</Action></Sequence></Selector></Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'identify_target': 'Action: Use sensors to identify a specific target object. Always returns True.', 'follow_target': 'Action: Follow the identified target object. Always returns True.', 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'stop_all_movement': 'Action: Stop all movement and wait for further instructions. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Generate behavior tree for a robot to identify and follow a target object while avoiding obstacles
5.// OUTPUT:
<BehaviorTree><Sequence><Action>identify_target</Action><Action>follow_target</Action></Sequence><Selector><Sequence><Action>avoid_obstacle</Action><Action>stop_all_movement</Action></Sequence></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'go_to_recharge_station': 'Action: Move to the designated recharge station. Always returns True.', 'recharge': 'Action: Recharge the robot at the designated recharge station. Always returns True.', 'is_battery_low': 'Condition: Check if the robot's battery level is below a certain threshold. Returns True if battery level is low, False otherwise.', 'has_completed_mission': 'Condition: Check if the robot has completed its assigned mission. Returns True if the mission is complete, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Generate behavior tree for a robot to complete a mission and recharge when necessary
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>has_completed_mission</Condition><Action>go_to_recharge_station</Action><Action>recharge</Action></Sequence><Sequence><Condition>is_battery_low</Condition><Action>go_to_recharge_station</Action><Action>recharge</Action></Sequence><Action>wander</Action></Selector></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'detect_target': 'Action: Use sensors to detect the target object. Always returns True.', 'navigate_to_target': 'Action: Navigate to the location of the target object. Always returns True.', 'return_to_origin': 'Action: Return to the original location after completing the task. Always returns True.', 'follow_leader': 'Action: Follow the designated leader of the swarm. Always returns True.', 'is_task_completed': 'Condition: Check if the task assigned by the leader is completed. Returns True if the task is completed, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: Generate behavior tree for swarm robots to follow the leader and complete a task
7.// OUTPUT:
<BehaviorTree><Sequence><Action>detect_target</Action><Action>navigate_to_target</Action></Sequence><Selector><Sequence><Action>follow_leader</Action><Sequence><Condition>is_task_completed</Condition><Action>return_to_origin</Action></Sequence></Selector></BehaviorTree>
This task requires a specialized set of behaviors and conditions to search for a specific target and turn 90 degrees upon finding it. The output behavior tree will utilize the following behaviors: 'agent_movement_freeze', 'avoid_obstacle', 'change_color_to_green', 'change_color_to_white', 'continue_movement_agent', 'form_line', 'is_agent_in_nest', 'is_line_formed', 'is_obstacle_detected', 'is_path_clear', 'is_target_detected', 'is_target_reached', 'task_completed', 'wander'

<BehaviorTree>
    <Selector>
        <Sequence>
            <Action>change_color_to_white</Action>
            <Action>continue_movement_agent</Action>
        </Sequence>
        <Sequence>
            <Condition>is_target_detected</Condition>
            <Action>change_color_to_green</Action>
            <Action>task_completed</Action>
            <Action>agent_movement_freeze</Action>
        </Sequence>
        <Sequence>
            <Condition>is_obstacle_detected</Condition>
            <Action>avoid_obstacle</Action>
            <Action>wander</Action>
        </Sequence>
        <Sequence>
            <Condition>is_path_clear</Condition>
            <Action>form_line</Action>
            <Action>wander</Action>
        </Sequence>
        <Sequence>
            <Condition>is_target_reached</Condition>
            <Action>wander</Action>
        </Sequence>
    </Selector>
</BehaviorTree> 
###
3.// INSTRUCTIONS: Use only the following behaviors {'controller_malfunction': "Condition: Check if a controller malfunction is detected. Returns True if it is detected, False otherwise.", 'detect_fire': 'Condition: Check for fire in the environment. Returns True if fire is detected, False otherwise.', 'extinguish_fire': "Action: Extinguish fire. Always returns True.", 'move_away_from_fire': "Action: Move away from the fire. Always returns True.", 'move_towards_controller': "Action: Move towards the controller. Always returns True.", 'move_towards_fire': "Action: Move towards the fire. Always returns True.", 'critical_battery': 'Condition: Check if battery level is below 20%. Returns True if battery level is below 20%, False otherwise.', 'recharge_battery': "Action: Recharge battery. Always returns True.", 'take_cover': 'Action: Take cover under a nearby obstacle. Always returns True.', 'wait_for_rescue': 'Action: Wait for rescue by staying in place. Always returns True.', 'self_repair': 'Action: Initiate self-repair process. Always returns True.', 'update_location': 'Action: Update agent location. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3.// USER COMMAND: generate behavior tree to 'Detect fire, move towards the fire, and extinguish the fire.'Output only the XML behavior tree without extra text.
3.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Condition>detect_fire</Condition> <Sequence> <Condition>controller_malfunction</Condition> <Action>take_cover</Action> </Sequence> </Selector> <Selector> <Condition>controller_malfunction</Condition> <Sequence> <Action>move_towards_controller</Action> <Condition>critical_battery</Condition> <Action>recharge_battery</Action> </Sequence> </Selector> <Selector> <Sequence> <Condition>critical_battery</Condition> <Action>self_repair</Action> <Condition>controller_malfunction</Condition> </Sequence> <Sequence> <Condition>controller_malfunction</Condition> <Condition>critical_battery</Condition> </Sequence> </Selector> <Action>update_location</Action> <Action>move_towards_fire</Action> <Action>extinguish_fire</Action> <Condition>controller_malfunction</Condition> </Sequence> </BehaviorTree>
 
###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_blue': "Action: Change agent's color to blue. Always returns True.", 'change_color_to_red': "Action: Change agent's color to red. Always returns True.", 'change_color_to_yellow': "Action: Change agent's color to yellow. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Change color to red, form a vertical line, then change color to yellow.'Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Action>form_line</Action> <Sequence> <Condition>is_line_formed</Condition> <Action>change_color_to_yellow</Action> </Sequence> </Sequence> <Action>change_color_to_red</Action> </Selector> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_blue': "Action: Change agent's color to blue. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'detect_friend': 'Condition: Check if a friend is detected in the environment. Returns True if a friend is within 10 units, False otherwise.', 'detect_enemy': 'Condition: Check if an enemy is detected in the environment. Returns True if an enemy is within 10 units, False otherwise.', 'follow_friend': "Action: Follow a nearby friend. Always returns True.", 'follow_path': 'Action: Follow a pre-defined path. Always returns True.', 'move_away_from_enemy': "Action: Move away from the enemy. Always returns True.", 'protect_friend': 'Action: Protect a nearby friend by staying close. Always returns True.', 'stop_following_friend': 'Action: Stop following the friend. Always returns True.', 'stop_following_path': 'Action: Stop following the pre-defined path. Always returns True.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'If a friend is detected, follow friend. If enemy detected, move away.'Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree> <Sequence> <Condition>detect_friend</Condition> <Action>follow_friend</Action> </Sequence> <Sequence> <Condition>detect_enemy</Condition> <Action>move_away_from_enemy</Action> </Sequence> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'change_color_to_red': "Action: Change agent 
###
4.// INSTRUCTIONS: Use only the following behaviors {'approach_target': 'Action: Move towards the target at a predefined speed. Always returns True.', 'reach_target': 'Action: Stop movement once the target is reached. Always returns True.', 'detect_collision': 'Condition: Check for potential collisions with other robots. Returns True if a collision is detected, False otherwise.', 'is_near_target': 'Condition: Check if the robot is within a specified distance to the target. Returns True if the robot is within the specified distance, False otherwise.', 'obstacle_avoidance': 'Subtree node: Represents a behavior tree for avoiding obstacles.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Move towards a target while avoiding obstacles and stop once the target is reached.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>approach_target</Action><Selector><Sequence><Condition>detect_collision</Condition><Action>obstacle_avoidance</Action></Sequence><Condition>is_near_target</Condition><Action>reach_target</Action></Selector></Sequence><Action>reach_target</Action></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'roaming_mode': 'Action: Switch the robot to roaming mode, where it moves randomly within the environment. Always returns True.','search_gate': 'Subtree node: Represents a behavior tree for searching and approaching a gate.', 'wait_for_signal': 'Action: Stop and wait for a signal from another robot. Always returns True.', 'send_signal': 'Action: Send a signal to a designated robot. Always returns True.', 'is_signal_received': 'Condition: Check if a signal has been received from another robot. Returns True if a signal is received, False otherwise.', 'is_at_gate': 'Condition: Check if the robot has reached the designated gate. Returns True if the robot has reached the gate, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Have the robot roam around and search for a designated gate, then send a signal once reached.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>roaming_mode</Action><Selector><Sequence><Condition>is_signal_received</Condition><Action>send_signal</Action></Sequence><Action>wait_for_signal</Action></Selector></Sequence><Sequence><Condition>is_at_gate</Condition><Action>send_signal</Action></Sequence><Action>search_gate</Action></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'move_towards_point': 'Action: Move towards a designated point at a predefined speed. Always returns True.', 'reach_point': 'Action: Stop movement once the point is reached. Always returns True.', 'detect_obstacle': 'Condition: Check for obstacles in the designated direction and distance. Returns True if an obstacle is detected, False otherwise.', 'move_around_obstacle': 'Action: Move around the obstacle in a specified direction and distance. Always returns True.', 'check_battery': 'Action: Check the robot's battery level. Always returns True.', 'recharge_battery': 'Action: Recharge the robot's battery. Always returns True.', 'low_battery_threshold': 'Condition: Check if the battery is below a specified threshold. Returns True if the battery is below the threshold, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Move from point A to point B while avoiding obstacles and ensuring battery levels are above a threshold.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>move_towards_point</Action><Selector><Sequence><Condition>detect_obstacle</Condition><Action>move_around_obstacle</Action></Sequence><Condition>low_battery_threshold</Condition><Action>check_battery</Action></Selector><Condition>low_battery_threshold</Condition><Action>recharge_battery</Action></Sequence><Action>reach_point</Action></Selector></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'idle': 'Action: Keep the robot stationary. Always returns True.', 'patrol_mode': 'Action: Switch the robot to patrol mode, where it moves between predefined locations in a cycle. Always returns True.', 'move_to_checkpoint': "Action: Move to a designated checkpoint. Always returns True.", 'is_at_checkpoint': 'Condition: Check if the robot is at the designated checkpoint. Returns True if the robot is at the checkpoint, False otherwise.', 'perform_task': 'Subtree node: Represents a behavior tree for performing a specific task.', 'is_task_completed': 'Condition: Check if the task is completed. Returns True if the task is completed, False otherwise.', 'check_distance': 'Action: Check the distance between the robot and a designated point. Always returns True.', 'is_within_range': 'Condition: Check if the distance between the robot and a designated point is within a specified range. Returns True if within range, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: Keep patrolling between checkpoint A and B, and perform a task at each checkpoint.
7.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>patrol_mode</Action><Selector><Sequence><Condition>is_at_checkpoint</Condition><Subtree>perform_task</Subtree></Sequence><Action>move_to_checkpoint</Action></Selector></Sequence><Sequence><Condition>is_task_completed</Condition><Action>check_distance</Action><Selector><Sequence><Condition>is_within_range</Condition><Action>perform_task</Action></Sequence><Action>idle</Action></Selector></Sequence></Selector></BehaviorTree>  
###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'is_food_detected': 'Condition: Check if there is food nearby. Returns True if food is detected, False otherwise.', 'eat_food': 'Action: Consume the food if it is within reach. Always returns True.', 'is_full': 'Condition: Check if the robot is full and doesn't need to eat anymore. Returns True if the robot is full, False otherwise.', 'is_hungry': 'Condition: Check if the robot is hungry and needs to eat. Returns True if the robot is hungry, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Forage for food, eat until full, then return to the nest, change color to white, and freeze movement.' Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>is_target_detected</Condition><Action>eat_food</Action></Sequence><Condition>is_hungry</Condition><Action>change_color_to_green</Action></Selector><Selector><Sequence><Condition>is_agent_in_nest</Condition><Action>change_color_to_white</Action><Action>agent_movement_freeze</Action></Sequence><Condition>is_full</Condition><Action>task_completed</Action></Selector></Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'is_enemy_detected': 'Condition: Check if an enemy is detected. Returns True if an enemy is detected, False otherwise.', 'attack_enemy': 'Action: Attack the enemy if it is within reach. Always returns True.', 'flee': 'Action: Flee from the detected enemy. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Patrol the environment and attack any detected enemies, otherwise continue patrolling.'Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_enemy_detected</Condition><Action>attack_enemy</Action><Action>continue_movement_agent</Action></Sequence><Selector><Sequence><Condition>is_path_blocked</Condition><Action>turn_left</Action><Action>update_map</Action></Sequence><Action>continue_movement_agent</Action></Selector><Action>wander</Action></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.', 'follow': 'Action: Follow another robot within sight and maintain a certain distance from it. Always returns True.', 'is_leader_detected': 'Condition: Check if a leader robot is within sight. Returns True if a leader is detected, False otherwise.', 'follow_leader': 'Action: Follow the detected leader robot and maintain a certain distance from it. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Follow a designated leader robot while avoiding obstacles and maintaining a safe distance from the leader' Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_leader_detected</Condition><Action>follow_leader</Action><Action>continue_movement_agent</Action></Sequence><Selector><Sequence><Condition>is_obstacle_detected</Condition><Action>avoid_obstacle</Action><Action>update_map</Action></Sequence><Action>wander</Action></Selector></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement.
###
3.// INSTRUCTIONS: Use only the following behaviors {'navigate_to_goal': 'Action: Move towards a designated goal location. Always returns True.', 'is_goal_reached': 'Condition: Check if the goal location has been reached. Returns True if the goal is reached, False otherwise.', 'has_priority_point': 'Condition: Check if the robot has a designated priority point. Returns True if a priority point is assigned, False otherwise.', 'check_battery_level': 'Function: Checks the battery level of the robot. Returns current level as a percentage.', 'move_to_priority_point': 'Action: Move to the designated priority point. Always returns True.', 'collect_resource': 'Action: Collect the resource at the current location. Returns True if the resource is successfully collected, False otherwise.', 'deposit_resource': 'Action: Deposit the collected resource at the designated location. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3.// USER COMMAND: Create a behavior tree to navigate to a goal location, but prioritize collecting resources if the battery level is below 50% and a priority point is assigned.
3.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>has_priority_point</Condition><Action>move_to_priority_point</Action></Sequence><Sequence><Condition>check_battery_level</Condition><Action>greater_than_value</Action><Action>navigate_to_goal</Action></Sequence><Sequence><Condition>check_battery_level</Condition><Constant>50%</Constant><Action>less_than_value</Action><Sequence><Condition>has_priority_point</Condition><Action>move_to_priority_point</Action></Sequence><Action>collect_resource</Action></Sequence></Selector></BehaviorTree>

###
4.// INSTRUCTIONS: Use only the following behaviors {'assign_leader': 'Action: Designates the robot as the leader of the swarm. Returns True if successfully assigned, False otherwise.', 'is_leader': 'Condition: Checks if the robot is the leader of the swarm. Returns True if the robot is the leader, False otherwise, 'follow_leader': 'Action: Follows the leader of the swarm. Always returns True.', 'scan_area': 'Action: Scans the surrounding area for potential threats. Always returns True.', 'communicate_leader_position': 'Action: Communicates the current position of the leader to other swarm robots. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Create a behavior tree that assigns leader status to the first robot in the swarm, then scans the area for potential threats while the rest of the swarm follows the leader.
4.// OUTPUT:
<BehaviorTree><Sequence><Action>assign_leader</Action><Condition>is_leader</Condition></Sequence><Sequence><Condition>is_leader</Condition><Selector><Sequence><Action>communicate_leader_position</Action><Action>scan_area</Action></Sequence><Action>follow_leader</Action></Selector></Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'find_hiding_place': 'Action: Search for a hiding place. Always returns True.', 'is_hiding_place_found': 'Condition: Checks if a hiding place has been found. Returns True if a hiding place has been found, False otherwise.', 'hide_in_place': 'Action: Moves to and hides in the designated hiding place. Always returns True.', 'flee_from_enemies': 'Action: Flee from enemies by moving in the opposite direction. Always returns True.', 'is_enemy_nearby': 'Condition: Checks if there are enemies nearby. Returns True if enemies are within a specified range, False otherwise.', 'enter_nest': 'Action: Enter the designated nest location. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Create a behavior tree for a robot in hiding mode - if enemies are detected, flee and return to the designated nest. Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_enemy_nearby</Condition><Action>flee_from_enemies</Action><Action>enter_nest</Action></Sequence><Sequence><Condition>is_enemy_nearby</Condition><Action>find_hiding_place</Action><Action>hide_in_place</Action></Sequence></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'calculate_distance_to_point': 'Function: Calculates the distance between the robot and a designated point. Returns the distance in meters.', 'move_to_point': 'Action: Moves towards the designated point. Always returns True.', 'is_point_reached': 'Condition: Checks if the designated point has been reached. Returns True if the point is reached, False otherwise.', 'move_to_random_point': 'Action: Moves to a random location within a specified range. Always returns True.', 'is_obstacle_detected': 'Condition: Checks for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Generate a behavior tree to move to a designated point, but if there are obstacles in the way, move to a random point within a specified range. The robot should avoid obstacles along the way.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_obstacle_detected</Condition><Action>avoid_obstacle</Action></Sequence><Sequence><Condition>move_to_random_point</Condition><Sequence><Condition>calculate_distance_to_point</Condition><Constant>range</Constant><Action>less_than_value</Action><Action>move_to_point</Action></Sequence></Sequence></Selector></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'move_to_point': 'Action: Moves towards the designated point. Always returns True.', 'is_point_reached': 'Condition: Checks if the designated point has been reached. Returns True if the point is reached, False otherwise.', 'wait_until': 'Action: Waits until a specific condition is met before proceeding. Can be paired with any condition.', 'has_resource': 'Condition: Checks if the robot is carrying a resource. Returns True if a resource is being carried, False otherwise.', 'deposit_resource': 'Action: Deposits any carried resources at the designated location. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: Create a behavior tree for a robot that moves to a designated point and waits until it has a resource before depositing it. Output only the XML behavior tree without extra text.
7.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>move_to 
###
3.// INSTRUCTIONS: Use only the following behaviors {'move_to_target': 'Action: Move towards the designated target based on given coordinates. Always returns True.', 'avoid_obstacles': 'Action: Use sensors to avoid obstacles in the environment. Always returns True.', 'collect_resource': 'Action: Collect the designated resource from the environment. Always returns True', 'is_target_reached': 'Condition: Check if the target has been reached. Returns True if the target coordinates have been reached, False otherwise.', 'is_resource_collected': 'Condition: Check if the designated resource has been collected. Returns True if the resource has been successfully collected, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3.// USER COMMAND: Generate behavior tree for a robot to collect resources and bring them back to base
3.// OUTPUT:
<BehaviorTree> <Sequence> <Condition>is_target_reached</Condition> <Selector> <Sequence> <Action>move_to_target</Action> <Action>collect_resource</Action> <Condition>is_resource_collected</Condition> <Action>move_to_target</Action> </Sequence> <Action>avoid_obstacles</Action> </Selector> </Sequence> </BehaviorTree>

###
4.// INSTRUCTIONS: Use only the following behaviors {'follow_command': 'Action: Follow the given command. Always returns True.', 'perform_taskA': 'Action: Perform taskA. Always returns True.', 'perform_taskB': 'Action: Perform taskB. Always returns True.', 'perform_taskC': 'Action: Perform taskC. Always returns True.', 'is_taskA_done': 'Condition: Check if taskA has been completed. Returns True if taskA has been completed, False otherwise.', 'is_taskB_done': 'Condition: Check if taskB has been completed. Returns True if taskB has been completed, False otherwise.', 'is_taskC_done': 'Condition: Check if taskC has been completed. Returns True if taskC has been completed, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Generate behavior tree to complete tasks A, B, and C in sequence
4.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Action>perform_taskA</Action> <Condition>is_taskA_done</Condition> <Action>follow_command</Action> </Sequence> <Sequence> <Action>perform_taskB</Action> <Condition>is_taskB_done</Condition> <Action>follow_command</Action> </Sequence> <Sequence> <Action>perform_taskC</Action> <Condition>is_taskC_done</Condition> <Action>follow_command</Action> </Sequence> </Selector> </Sequence> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'move_to_dest': 'Action: Move to the specified destination. Always returns True.', 'retrieve_item': 'Action: Retrieve the specified item from the environment. Always returns True.', 'place_item': 'Action: Place the retrieved item in a designated location. Always returns True.', 'is_item_retrieved': 'Condition: Check if the specified item has been successfully retrieved. Returns True if the item has been retrieved, False otherwise.', 'is_destination_reached': 'Condition: Check if the destination coordinates have been reached by the robot. Returns True if the destination has been reached, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Generate behavior tree for a robot to retrieve an item and place it in a specific location
5.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Action>retrieve_item</Action> <Condition>is_item_retrieved</Condition> <Action>place_item</Action> </Sequence> <Action>move_to_dest</Action> <Condition>is_destination_reached</Condition> </Selector> </Sequence> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'move_to_node': 'Action: Move towards the specified node in the environment. Always returns True.', 'scan_for_obstacles': 'Action: Use sensors to scan the environment for any obstacles. Always returns True.', 'avoid_collision': 'Action: Avoid any potential collisions with other robots. Always returns True.', 'is_node_reached': 'Condition: Check if the specified node has been reached by the robot. Returns True if the node has been reached, False if the robot is still in transit.', 'is_obstacle_detected': 'Condition: Check if any obstacles are present in the robot's path. Returns True if an obstacle is detected, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Generate behavior tree for a robot to navigate to a specific node while avoiding obstacles and collisions
6.// OUTPUT:
<BehaviorTree> <Sequence> <Condition>is_node_reached</Condition> <Selector> <Sequence> <Action>move_to_node</Action> <Action>scan_for_obstacles</Action> <Condition>is_obstacle_detected</Condition> <Action>avoid_collision</Action> </Sequence> <Action>move_to_node</Action> </Selector> </Sequence> </BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'follow_path': 'Action: Follow a predefined path in the environment. Always returns True.', 'pick_up_item': 'Action: Pick up the specified item located on the path. Always returns True.', 'drop_item': 'Action: Drop the picked up item at the designated location. Always returns True.', 'is_item_picked_up': 'Condition: Check if the specified item has been picked up by the robot. Returns True if the item has been picked up, False otherwise.', 'is_item_dropped': 'Condition: Check if the picked up item has been successfully dropped at the designated location. Returns True if the item has been successfully dropped, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Generate behavior tree for a robot to follow a path and pick up and drop items along the way
5.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Action>pick_up_item</Action> <Condition>is_item_picked_up</Condition> <Action>follow_path</Action> <Action>drop_item</Action> <Condition>is_item_dropped</Condition> </Sequence> <Action>follow_path</Action> </Selector> </Sequence> </BehaviorTree>
###
4.// INSTRUCTIONS: Use only the following behaviors {'search_for_food': 'Action: Search for food sources within a certain area. Always returns True.', 'return_to_nest': 'Action: Return to the nest. Always returns True.', 'pickup_food': 'Action: Pick up food on the ground. Returns True if food is successfully picked up, False otherwise.', 'drop_food': 'Action: Drop the food being carried. Always returns True.', 'is_food_nearby': 'Condition: Check if there is food within a certain range. Returns True if food is detected, False otherwise.', 'is_nest_reached': 'Condition: Check if the robot has reached the nest. Returns True if the robot is at the nest, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Create a behavior tree for a swarm of foraging robots to search for and retrieve food while returning to the nest once food is acquired.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_food_nearby</Condition><Action>pickup_food</Action></Sequence><Sequence><Condition>is_food_nearby</Condition><Sequence><Action>search_for_food</Action><Condition>is_nest_reached</Condition><Action>return_to_nest</Action></Sequence></Sequence></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'explore': 'Subtree node: Represents a behavior tree for exploration.', 'move_towards_random_node': 'Action: Move towards a randomly selected node. Always returns True.', 'avoid_collisions': 'Action: Avoid collisions with other robots. Always returns True.', 'is_node_unexplored': 'Condition: Check if the current node has not been explored. Returns True if the node is unexplored, False otherwise.', 'is_node_explored': 'Condition: Check if the current node has been explored. Returns True if the node is explored, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Create a behavior tree for a swarm of exploration robots to efficiently cover the entire area without running into each other and avoiding previously explored nodes.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_node_unexplored</Condition><Action>move_towards_current_node</Action></Sequence><Sequence><Condition>is_node_explored</Condition><Action>choose_new_random_node</Action></Sequence></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'notify_nearest_robot': 'Action: Notify the nearest robot of detected obstacle or danger. Returns True if a notification was successfully sent, False otherwise.', 'respond_to_notification': 'Action: Respond to a notification from another robot by taking the appropriate action. Always returns True.', 'spread_out': 'Action: Spread out to cover a larger area. Always returns True.', 'join_formation': 'Action: Join a nearby formation. Always returns True.', 'is_notification_received': 'Condition: Check if a notification has been received from another robot. Returns True if a notification is received, False otherwise.', 'is_formation_full': 'Condition: Check if the robot's current formation is at maximum capacity. Returns True if the formation is full, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Create a behavior tree for swarm robots to effectively communicate and coordinate with each other when faced with obstacles or danger while maintaining formation.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_notification_received</Condition><Action>respond_to_notification</Action></Sequence><Sequence><Condition>is_formation_full</Condition><Selector><Sequence><Condition>is_formation_full</Condition><Action>spread_out</Action></Sequence><Action>notify_nearest_robot</Action></Selector></Sequence><Action>join_formation</Action></Selector></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'move_towards_center': 'Action: Move towards the center of the swarm. Always returns True.', 'keep_distance': 'Action: Maintain a desired distance from other robots. Always returns True.', 'form_circle': 'Action: Form a circle with other robots. Always returns True.', 'breach_circle': 'Action: Break formation and disperse from the circle. Always returns True.', 'is_desired_distance_met': 'Condition: Check if the desired distance from other robots is being maintained. Returns True if distance is met, False otherwise.', 'is_circle_formed': 'Condition: Check if a circle formation has been successfully formed with other robots. Returns True if the circle is formed, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: Create a behavior tree for swarm robots to maintain a circular formation while keeping a desired distance from each other.
7.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_circle_formed</Condition><Selector><Sequence><Action>form_circle</Action><Condition>is_desired_distance_met</Condition><Action>keep_distance</Action></Sequence><Action>move_towards_center</Action></Selector></Sequence><Action>breach_circle</Action></Selector></BehaviorTree> 
3.// INSTRUCTIONS: Use only the following behaviors {'perform_dance': 'Action: Perform a pre-programmed dance routine. Always returns True.', 'move_forward': 'Action: Move 5 units forward. Always returns True.', 'turn_left': 'Action: Turn 90 degrees to the left. Always returns True.', 'turn_right': 'Action: Turn 90 degrees to the right. Always returns True.', 'is_dance_finished': 'Condition: Check if dance routine is completed. Returns True if dance is finished, False otherwise.', 'is_movement_finished': 'Condition: Check if movement is completed. Returns True if movement is finished, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_at_intersection': 'Condition: Check if robot is at an intersection. Returns True if at intersection, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3.// USER COMMAND: generate behavior tree to 'Perform a dance routine, then move forward 3 times and turn left.' Output only the XML behavior tree without extra text.
3.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>is_dance_finished</Condition> <Selector> <Sequence> <Selector> <Sequence> <Condition>is_at_intersection</Condition> <Action>turn_right</Action> </Sequence> <Action>move_forward</Action> <Action>move_forward</Action> </Sequence> <Action>turn_left</Action> </Selector> <Action>move_forward</Action></Selector> <Action>perform_dance</Action></Sequence> </Selector> </BehaviorTree>

4.// INSTRUCTIONS: Use only the following behaviors {'detect_object': 'Action: Use sensors to detect object in front. Always returns True.', 'pick_up_object': 'Action: Pick up the detected object. Always returns True.', 'carry_object': 'Action: Move while carrying object. Always returns True.', 'place_object': 'Action: Place object at designated location. Always returns True.', 'is_object_detected': 'Condition: Check if object is detected. Returns True if object is in range, False otherwise.', 'is_object_picked': 'Condition: Check if object is picked up. Returns True if object is picked, False otherwise.', 'is_at_dropoff': 'Condition: Check if robot is at drop-off location. Returns True if at designated location, False otherwise.', 'is_at_target': 'Condition: Check if robot is at target location. Returns True if at target location, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Pick up and carry object, then place it at the designated location.' Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>is_object_detected</Condition> <Selector> <Sequence> <Selector> <Sequence> <Condition>is_object_picked</Condition> <Action>carry_object</Action> </Sequence> <Action>place_object</Action> </Selector> <Action>pick_up_object</Action></Selector> <Selector> <Sequence> <Condition>is_at_dropoff</Condition> <Action>place_object</Action> </Sequence> <Selector> <Sequence> <Condition>is_at_target</Condition> <Action>place_object</Action> </Sequence> <Action>detect_object</Action></Selector> </Sequence> </Selector> </Sequence> </BehaviorTree>

5.// INSTRUCTIONS: Use only the following behaviors {'navigate_to_waypoint': 'Action: Use predefined pathfinding algorithm to navigate to specified waypoint. Returns True when at specified waypoint, False otherwise.', 'detect_collision': 'Condition: Check for collision with another robot. Returns True if collision detected, False otherwise.', 'send_warning_message': 'Action: Send a warning message to other robots when collision is detected. Returns True when message is sent, False otherwise.', 'obstacle_avoidance': 'Action: Use sensors to avoid obstacles. Returns True when obstacle is avoided, False otherwise.', 'is_at_waypoint': 'Condition: Check if robot is at the specified waypoint. Returns True if at waypoint, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Navigate to waypoint and avoid obstacles, send warning message if collision is detected.' Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>detect_collision</Condition> <Action>send_warning_message</Action> </Sequence> <Selector> <Sequence> <Condition>is_at_waypoint</Condition> <Action>send_warning_message</Action> </Sequence> <Selector> <Sequence> <Selector> <Sequence> <Condition>obstacle_avoidance</Condition> <Action>send_warning_message</Action> <Action>task_completed</Action> </Sequence> <Action>send_warning_message</Action> </Selector> </Sequence> <Action>is_at_target</Action> </Selector> <Action>navigate_to_waypoint</Action> </BehaviorTree>

6.// INSTRUCTIONS: Use only the following behaviors {'detect_enemy': 'Action: Use sensors to detect nearby enemies. Returns True if enemy is within range, False otherwise.', 'attack_enemy': 'Action: Attack the detected enemy. Returns True if enemy is successfully attacked, False otherwise.', 'defend_nest': 'Action: Move towards the nest and defend it from enemies. Returns True when at the nest, False otherwise.', 'is_enemy_detected': 'Condition: Check if enemy is detected. Returns True if enemy is within range, False otherwise.', 'is_enemy_attacked': 'Condition: Check if enemy was successfully attacked. Returns True if enemy was attacked, False otherwise.', 'is_at_nest': 'Condition: Check if robot is at the nest. Returns True if at the nest, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Detect and attack enemies, then return to and defend the nest.'Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>is_enemy_detected</Condition> <Selector> <Sequence> <Selector> <Sequence> <Condition>is_enemy_attacked</Condition> <Action>task_completed</Action> </Sequence> <Action>defend_nest</Action> </Selector> </Sequence> <Selector> <Sequence> <Condition>is_at_nest</Condition> <Action>defend_nest</Action> </Sequence> <Action>attack_enemy</Action><BehaviorTree><Action>utility_score</Action></BehaviorTree>

###
4.// INSTRUCTIONS: Use only the following behaviors {'travel_to_destination': 'Action: Navigate to a given destination. Returns True once the destination has been reached.', 'find_biome': 'Action: Use sensors and location information to identify the current biome. Returns a string representing the biome type.',  'is_biome_suitable': 'Condition: Check if the current biome is suitable for the robot. Returns True if the biome is suitable, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Navigate to the nearest suitable biome and signal completion.
4.// OUTPUT:
<BehaviorTree><Sequence><Action>find_biome</Action><Selector><Sequence><Condition>is_biome_suitable</Condition><Action>travel_to_destination</Action></Sequence><Action>update_destination</Action></Selector></Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'reach_peak': "Action: Move to the highest elevation point in the environment. Returns True once the peak has been reached.", 'collect_sample': 'Action: Collect a sample from the current location and store it. Returns True once the sample has been collected.', 'analyze_sample': 'Action: Analyze the collected sample and extract valuable data. Returns True once the analysis is complete.', 'navigate_back_to_base': 'Action: Use location information to navigate back to the base station. Returns True once the base station has been reached.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task).
5.// USER COMMAND: Collect a sample from the peak, analyze it, and return to base.
5.// OUTPUT:
<BehaviorTree><Sequence><Action>reach_peak</Action><Action>collect_sample</Action></Sequence><Action>analyze_sample</Action><Action>update_base_location</Action><Action>navigate_back_to_base</Action></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'wait': 'Action: Wait for a certain amount of time before returning True.', 'move_to_light': 'Action: Move towards the closest source of light. Returns True once the light source has been reached.', 'avoid_obstacle': 'Action: Use sensors to avoid obstacles while moving. Returns True once the path is clear.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Move towards the closest source of light while avoiding obstacles for 5 minutes.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>elapsed_time(5 minutes)</Condition><Action>wait</Action><Action>move_to_light</Action></Sequence><Action>avoid_obstacle</Action></Selector></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'clean_area': 'Action: Clean the designated area. Returns True once the area is fully cleaned.', 'detect_puddle': 'Condition: Use sensors to detect puddles in the environment. Returns True if a puddle is detected, False otherwise.', 'avoid_puddle': 'Action: Use navigation algorithms to avoid puddles. Returns True once the path is clear.', 'navigate_to_hotspot': 'Action: Use location information to navigate to the identified hotspot. Returns True once the hotspot has been reached.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: Clean the designated area while avoiding puddles and visit the identified hotspot.
7.// OUTPUT:
<BehaviorTree><Sequence><Action>clean_area</Action><Condition>detect_puddle</Condition><Action>avoid_puddle</Action><Action>update_hotspot</Action><Action>navigate_to_hotspot</Action></Sequence></BehaviorTree>
###
4.// INSTRUCTIONS: Use only the following behaviors {'detect_color': 'Action: Detect the color of a nearby object. Always returns True.', 'move_towards_object': 'Action: Move towards the nearest object of a specific color. Always returns True.', 'stop_on_color': 'Condition: Check if the robot has reached an object of a specific color. Returns True if the robot has reached the object, False otherwise.', 'change_color_to_red': 'Action: Change the robotâ€™s color to red. Always returns True.', 'change_color_to_blue': 'Action: Change the robotâ€™s color to blue. Always returns True.', 'change_color_to_yellow': 'Action: Change the robotâ€™s color to yellow. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Generate behavior tree for a robot to find and reach a specific colored object.
4.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Action>detect_color</Action><Condition>stop_on_color</Condition></Sequence><Selector><Sequence><Action>move_towards_object</Action><Condition>stop_on_color</Condition></Sequence><Sequence><Action>change_color_to_red</Action><Condition>stop_on_color</Condition></Sequence></Selector></Sequence><Selector><Sequence><Action>detect_color</Action><Condition>stop_on_color</Condition></Sequence><Selector><Sequence><Action>move_towards_object</Action><Condition>stop_on_color</Condition></Sequence><Sequence><Action>change_color_to_blue</Action><Condition>stop_on_color</Condition></Sequence></Selector></Sequence><Selector><Sequence><Action>detect_color</Action><Condition>stop_on_color</Condition></Sequence><Selector><Sequence><Action>move_towards_object</Action><Condition>stop_on_color</Condition></Sequence><Sequence><Action>change_color_to_yellow</Action><Condition>stop_on_color</Condition></Sequence></Selector></Sequence></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'detect_nest_density': 'Action: Detect the number of nests in the area. Always returns True.', 'move_towards_nest': 'Action: Move towards the nearest nest in the area. Always returns True.', 'nest_found': 'Condition: Check if a nest has been found. Returns True if a nest is detected, False otherwise.', 'collect_resource': 'Action: Collect a resource from the environment. Always returns True.', 'is_carrying_resource': 'Condition: Check if the robot is already carrying a resource. Returns True if a resource is detected, False otherwise.', 'deposit_resource': 'Action: Deposit the resource into a nearby nest. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Generate behavior tree for a swarm of robots to collect resources and deposit them into nests.
5.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Action>detect_nest_density</Action><Condition>nest_found</Condition></Sequence><Selector><Sequence><Action>move_towards_nest</Action><Condition>nest_found</Condition></Sequence><Sequence><Action>collect_resource</Action><Condition>nest_found</Condition></Sequence></Selector></Sequence><Selector><Sequence><Condition>is_carrying_resource</Condition><Action>deposit_resource</Action></Sequence><Sequence><Action>collect_resource</Action><Condition>nest_found</Condition></Sequence></Selector></Sequence></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'detect_enemy': 'Action: Detect the number and location of enemy robots. Always returns True.', 'move_away_from_enemies': 'Action: Move away from the nearest enemy robot. Always returns True.', 'defend_leader': 'Action: Move towards and protect the leader robot. Always returns True.', 'leader_detected': 'Condition: Check if the leader robot has been detected. Returns True if the leader is detected, False otherwise.', 'is_defending': 'Condition: Check if the robot is currently defending the leader. Returns True if the robot is defending, False otherwise.', 'attack_enemy': 'Action: Attack the nearest enemy robot. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Generate behavior tree for a swarm of robots to defend their leader and attack enemy robots.
6.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Action>detect_enemy</Action><Condition>leader_detected</Condition></Sequence><Selector><Sequence><Action>move_away_from_enemies</Action><Condition>leader_detected</Condition></Sequence><Sequence><Action>defend_leader</Action><Condition>leader_detected</Condition></Sequence></Selector></Sequence><Sequence><Condition>is_defending</Condition><Action>attack_enemy</Action></Sequence></Selector></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'detect_food': 'Action: Detect and retrieve nearby food sources. Always returns True.', 'carry_food': 'Action: Carry the retrieved food back to a designated area. Always returns True.', 'food_detected': 'Condition: Check if food has been detected. Returns True if food is detected, False otherwise.', 'is_carrying_food': 'Condition: Check if the robot is already carrying food. Returns True if the robot is carrying food, False otherwise.', 'deposit_food': 'Action: Deposit the food into a designated area. Always returns True.', 'build_structure': 'Action: Build a structure using the deposited food. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: Generate behavior tree for a swarm of robots to gather and build structures using food resources.
7.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Action>detect_food</Action><Condition>food_detected</Condition></Sequence><Selector><Sequence><Action>carry_food</Action><Condition>food_detected</Condition></Sequence><Sequence><Action>deposit_food</Action><Condition>food_detected</Condition></Sequence></Selector></Sequence><Selector><Sequence><Condition>is_carrying_food</Condition><Action>build_structure</Action></Sequence><Sequence><Action>carry_food</Action><Condition>food_detected</Condition></Sequence></Selector></Sequence></BehaviorTree>###
3.// INSTRUCTIONS: Use only the following behaviors {'explore_env': 'Subtree node: Explore the environment by randomly moving around.', 'detect_target': 'Condition: Check for the presence of the target. Returns True if the target is within range, False otherwise.', 'move_to_target': 'Action: Move towards the target. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3.// USER COMMAND: Explore the environment and move to target if it is detected.
3.// OUTPUT:
<BehaviorTree> <Sequence> <Action>explore_env</Action> <Trigger>detect_target</Trigger> <Action>move_to_target</Action> </Sequence> </BehaviorTree>
###
4.// INSTRUCTIONS: Use only the following behaviors {'detect_enemy': 'Condition: Check for the presence of an enemy. Returns True if an enemy is detected, False otherwise.', 'track_target': 'Action: Move towards the nearest enemy. Always returns True.', 'hide': 'Action: Hide behind nearest cover. Always returns True.', 'attack_target': 'Action: Attack the nearest enemy. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: If an enemy is detected, hide and attack the enemy, otherwise track target and attack if within 10 units.
4.// OUTPUT:
<BehaviorTree> <Sequence> <Trigger>detect_enemy</Trigger> <Selector> <Sequence> <Action>hide</Action> <Action>attack_target</Action> </Sequence> <Sequence> <Action>track_target</Action> <Condition>is_target_reached</Condition> <Action>attack_target</Action> </Sequence> </Selector> </Sequence> </BehaviorTree>
###
5.// INSTRUCTIONS: Use only the following behaviors {'move_to_food': 'Subtree node: Move to nearest food source.', 'consume_food': 'Action: Consume the food source. Always returns True.', 'low_food': 'Condition: Check if the agent's food reserves are low. Returns True if food reserves are low, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Move to food source and consume it. If food reserves are low, move to another food source.
5.// OUTPUT:
<BehaviorTree> <Sequence> <Action>move_to_food</Action> <Action>consume_food</Action> <Trigger>low_food</Trigger> <Action>move_to_food</Action> </Sequence> </BehaviorTree>
###
6.// INSTRUCTIONS: Use only the following behaviors {'random_movement': 'Action: Move randomly in the environment. Always returns True.', 'detect_object': 'Condition: Check for the presence of an object. Returns True if an object is detected, False otherwise.', 'move_to_target': 'Action: Move towards the detected object. Always returns True.', 'collect_object': 'Action: Collect the detected object. Always returns True.', 'return_to_base': 'Action: Return to the base. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Randomly explore the environment and collect objects if they are detected. Return to base only after collecting all objects.
6.// OUTPUT:
<BehaviorTree> <Condition>detect_object</Condition> <Selector> <Sequence> <Action>random_movement</Action> <Trigger>detect_object</Trigger> <Action>move_to_target</Action> <Action>collect_object</Action> </Sequence> <Sequence> <Action>return_to_base</Action> <Condition>detect_object</Condition> </Sequence> </Selector> </BehaviorTree>
###
7.// INSTRUCTIONS: Use only the following behaviors {'patrol_area': 'Subtree node: Patrol the designated area.', 'avoid_collision': 'Action: Move to the closest clear path to avoid collisions. Returns True if successful, False otherwise.', 'detect_obstacle': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'report_location': 'Action: Report current location to the base. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: Patrol the area and report location to the base. If an obstacle is detected, avoid collision and then continue patrolling.
7.// OUTPUT:
<BehaviorTree> <Sequence> <Action>patrol_area</Action> <Trigger>detect_obstacle</Trigger> <Sequence> <Action>avoid_collision</Action> <Action>patrol_area</Action> </Sequence> <Action>report_location</Action> </Sequence> </BehaviorTree>
###
4.// INSTRUCTIONS: Use only the following behaviors {'hover': 'Action: Activate hover mode for the robot. Always returns True.', 'scan_for_objects': 'Action: Use sensors to scan the area for any objects. Always returns True.', 'pick_up_object': 'Action: Pick up a nearby object if detected. Returns True if an object is successfully picked up, False otherwise.', 'drop_object': 'Action: Drop the currently held object. Always returns True.', 'is_object_detected': 'Condition: Check if an object is detected in the current area. Returns True if an object is detected, False otherwise.', 'is_hovering': 'Condition: Check if the robot is currently in hover mode. Returns True if the robot is hovering, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Generate behavior tree for a robot to pick up and drop objects while hovering
4.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>is_object_detected</Condition><Action>pick_up_object</Action></Sequence><Action>hover</Action><Selector><Sequence><Condition>is_hovering</Condition><Action>drop_object</Action><Action>hover</Action></Sequence><Action>scan_for_objects</Action></Selector></Selector></Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'find_waypoint': 'Action: Use sensors to search for a designated waypoint. Returns True if the waypoint is found, False otherwise.', 'move_to_waypoint': 'Action: Move the robot to the designated waypoint. Always returns True.', 'check_battery_level': 'Condition: Check if the robot's battery level is above 50%. Returns True if the battery level is above 50%, False otherwise.', 'is_waypoint_reached': 'Condition: Check if the robot has reached the designated waypoint. Returns True if the waypoint is reached, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Generate behavior tree for a robot to find and reach a specific waypoint while ensuring battery level is above 50%
5.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>check_battery_level</Condition><Selector><Action>find_waypoint</Action><Action>move_to_waypoint</Action></Selector></Sequence><Action>wait</Action></Selector></Sequence></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'explore_area': 'Action: Move the robot to a new unexplored area. Always returns True.', 'scan_for_food': 'Action: Use sensors to scan for potential food sources in the current area. Always returns True.', 'collect_food': 'Action: Collect food from a detected source. Returns True if food is successfully collected, False otherwise.', 'is_food_detected': 'Condition: Check if food is detected in the current area. Returns True if food is detected, False otherwise.', 'is_food_collected': 'Condition: Check if the robot is currently holding food. Returns True if food is collected, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Generate behavior tree for a robot to explore and collect food in a new area
6.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>is_food_detected</Condition><Action>collect_food</Action></Sequence><Action>explore_area</Action><Selector><Sequence><Condition>is_food_collected</Condition><Action>move_to_nest</Action><Action>drop_food</Action></Sequence><Action>scan_for_food</Action></Selector></Selector></Sequence></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'move_forward': 'Action: Move the robot forward. Always returns True.', 'turn_left': 'Action: Turn the robot left. Always returns True.', 'turn_right': 'Action: Turn the robot right. Always returns True.', 'count_objects': 'Action: Use sensors to count the number of objects in the current area. Returns the number of objects counted.', 'is_object_count_greater': 'Condition: Check if the number of objects counted is greater than a specified value. Returns True if the count is greater, False otherwise.', 'wait': 'Action: Pause the robot for a specified amount of time. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: Generate behavior tree for a robot to count objects and move in a specific direction based on the count
7.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Action>count_objects</Action><Condition>is_object_count_greater</Condition><Selector><Sequence><Action>turn_left</Action><Condition>is_object_count_greater</Condition></Sequence><Sequence><Action>turn_right</Action><Condition>is_object_count_greater</Condition></Sequence></Selector></Sequence><Action>wait</Action><Action>move_forward</Action></Selector></Sequence></BehaviorTree> 
###
3.// INSTRUCTIONS: Use only the following behaviors {'random_move': 'Action: Makes a random movement within a defined area. Always returns True.', 'return_home': 'Action: Follow a predefined path back to the home base. Returns True once the robot reaches the home base.', 'is_home_reached': 'Condition: Check if the robot has reached the home base. Returns True if the robot is within a certain distance of the home base, False otherwise.', 'is_obstacle_detected': 'Condition: Scan the surroundings for obstacles. Returns True if an obstacle is detected, False otherwise.', 'light_follow': 'Action: Follow a light source if one is detected. Returns True once the light source is reached and captured.', 'is_light_source_detected': 'Condition: Check for the presence of a light source. Returns True if a light source is detected, False otherwise.', 'take_photo': 'Action: Capture a photo of the surroundings and store it for later analysis. Always returns True.', 'scan_surroundings': 'Action: Scan the surroundings and record any potential danger zones. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3.// USER COMMAND: Generate a behavior tree for a robot to navigate and map a new environment, while avoiding obstacles and following light sources.
3.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_obstacle_detected</Condition><Action>random_move</Action></Sequence><Sequence><Condition>is_obstacle_detected</Condition><Action>light_follow</Action></Sequence><Sequence><Condition>is_light_source_detected</Condition><Action>take_photo</Action><Action>scan_surroundings</Action></Sequence></Selector></BehaviorTree>

###
4.// INSTRUCTIONS: Use only the following behaviors {'form_square': 'Action: Form a square in a predefined area. Always returns True.', 'rotate_left': 'Action: Rotate the entire formation to the left by 90 degrees. Always returns True.', 'rotate_right': 'Action: Rotate the entire formation to the right by 90 degrees. Always returns True.', 'move_forward': 'Action: Move one step forward while maintaining formation. Always returns True.', 'is_object_detected': 'Condition: Check if a predetermined object is detected within a certain distance. Returns True if the object is detected, False otherwise.', 'is_square_formed': 'Condition: Check if the swarm has formed a square formation. Returns True if the formation is a perfect square, False otherwise.', 'is_formation_stable': 'Condition: Check if the formation is stable and not broken. Returns True if the formation is stable, False otherwise.', 'reform_formation': 'Action: Reform the formation if it becomes broken or misaligned. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Create a behavior tree for a swarm of robots to autonomously form a perfect square formation and hold the shape until the user gives a command.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_object_detected</Condition><Sequence><Action>rotate_left</Action><Condition>is_square_formed</Condition><Action>move_forward</Action><Condition>is_square_formed</Condition><Action>move_forward</Action><Condition>is_square_formed</Condition><Action>move_forward</Action><Condition>is_square_formed</Condition><Action>move_forward</Action><Action>move_square</Action></Sequence></Sequence><Sequence><Condition>is_formation_stable</Condition><Action>reform_formation</Action></Sequence></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'detect_air_pollution': 'Action: Use onboard sensors to detect air pollution levels. Returns True once the pollution levels are measured and stored.', 'return_to_base': 'Action: Follow designated path back to the base station. Returns True once the robot reaches the base station.', 'clear_obstacles': 'Action: Use a small cleaning attachment to clear any physical obstacles in the path. Returns True once the path is cleared.', 'is_base_station_reached': 'Condition: Check if the robot has reached the base station. Returns True if the robot is within a certain distance of the base station, False otherwise.', 'is_pollution_threshold_exceeded': 'Condition: Check if the measured pollution levels exceed a predetermined threshold. Returns True if the pollution levels are above the threshold, False otherwise.', 'backup_data': 'Action: Backup the collected data and store it in a designated location. Returns True once the data is backed up.', 'initiate_cleaning': 'Action: Start the cleaning process by activating the cleaning attachment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Generate a behavior tree for a robot to autonomously monitor and clean air pollution levels in a designated area.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_pollution_threshold_exceeded</Condition><Action>detect_air_pollution</Action><Action>backup_data</Action></Sequence><Action>initiate_cleaning</Action></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'assemble_parts': 'Action: Use onboard tools and manipulators to assemble small parts. Returns True once the parts are successfully assembled.', 'detect_malfunction': 'Action: Use onboard sensors to detect any potential malfunctions. Returns True if a malfunction is detected, False otherwise.', 'reboot_system': 'Action: Reboot the system in case of a detected malfunction. Returns True once the system is successfully rebooted.', 'is_robot_connected': 'Condition: Check if the robot is connected to the designated network. Returns True if the connection is established, False otherwise.', 'is_assembly_completed': 'Condition: Check if the parts have been successfully assembled. Returns True once the assembly process is completed.', 'is_system_rebooted': 'Condition: Check if the system has been successfully rebooted. Returns True once the system is fully operational.', 'is_new_part_detected': 'Condition: Check if a new part is detected within the designated workspace. Returns True if a new part is detected, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Create a behavior tree for a robot to autonomously assemble small parts, detect and handle any malfunctions, and remain connected to the designated network.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_new_part_detected</Condition><Sequence><Action>assemble_parts</Action><Condition>is_assembly_completed</Condition></Sequence></Sequence><Sequence><Condition>is_robot_connected</Condition><Action>detect_malfunction</Action><Sequence><Condition>is_system_rebooted</Condition><Action>reboot
###
4.// INSTRUCTIONS: Use only the following behaviors {'calculate_distance_to_destination': 'Function: Calculates the distance to the designated destination. Returns the distance in units.', 'move_towards_destination': 'Action: Move towards the designated destination. Returns True once the destination is reached.', 'obstacle_avoidance': 'Action: Avoid obstacles in the current path. Returns True once the path is clear.', 'detect_target': 'Condition: Check if the designated target is within range. Returns True if the target is within range, False otherwise.', 'complete_task': 'Action: Signal task completion by freezing movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Create a behavior tree for a robot to navigate to a specific location while avoiding obstacles and detecting the designated target.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>detect_target</Condition><Action>complete_task</Action></Sequence><Sequence><Function>calculate_distance_to_destination</Function><Action>move_towards_destination</Action><Action>complete_task</Action></Sequence><Sequence><Action>obstacle_avoidance</Action><Selector><Condition>detect_target</Condition><Action>complete_task</Action></Selector></Sequence></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'move_backward': 'Action: Move the robot one step backward in the current direction. Always returns True.', 'turn_around': 'Action: Turn the robot 180 degrees. Always returns True.', 'is_obstacle_detected': 'Condition: Checks for any obstacles within a 5 unit radius. Returns True if an obstacle is detected, False otherwise.', 'is_line_formed': 'Condition: Check if a horizontal line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_task_completed': 'Condition: Check if the robot has successfully completed the designated task. Returns True if the task is completed, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Create a behavior tree for a robot to move backwards, turn around, and check if a horizontal line is formed before completing the designated task.
5.// OUTPUT:
<BehaviorTree><Sequence><Action>move_backward</Action><Action>turn_around</Action><Condition>is_line_formed</Condition><Selector><Sequence><Action>move_backward</Action><Action>turn_around</Action><Condition>is_line_formed</Condition></Sequence><Condition>not is_obstacle_detected</Condition></Selector><Action>is_task_completed</Action></Sequence></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'detect_sound': 'Action: Detect any nearby sound signals. Returns True if a sound is detected, False otherwise.', 'analyze_sound_pattern': 'Function: Analyze the pattern and intensity of the sound signal. Returns a score based on the intensity.', 'follow_sound': 'Action: Follow the direction of the strongest sound signal. Returns True once the sound is reached.', 'avoid_obstacles': 'Action: Avoid obstacles in the current path. Returns True once the path is clear.', 'charge_battery': 'Action: Charge the robot's battery. Returns True once the battery is fully charged.', 'is_battery_low': 'Condition: Check if the robot's battery is below 20% charge. Returns True if the battery is low, False otherwise.', 'is_robot_lost': 'Condition: Check if the robot has lost its current location. Returns True if the robot is lost, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Generate behavior tree for a robot to follow sound signals, avoiding obstacles and recharging its battery when necessary.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_battery_low</Condition><Action>charge_battery</Action></Sequence><Sequence><Condition>detect_sound</Condition><Function>analyze_sound_pattern</Function><Action>follow_sound</Action></Sequence><Sequence><Action>avoid_obstacles</Action><Selector><Condition>not follow_sound</Condition><Action>detect_sound</Action></Selector></Sequence></Selector></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'collect_resource': 'Action: Collect a nearby resource. Returns True once the resource is collected.', 'drop_resource': 'Action: Drop the collected resource at a designated location. Returns True once the resource is dropped.', 'scan_area_for_resource': 'Action: Scan the area for nearby resources. Returns True once the scan is completed.', 'is_resource_full': 'Condition: Check if the robot's resource storage is full. Returns True if full, False otherwise.', 'is_resource_available': 'Condition: Check if there is a nearby resource available. Returns True if resource is available, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: Create behavior tree for a robot to collect resources, scan the area, and drop the collected resources at a designated location.
7.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_resource_available</Condition><Action>collect_resource</Action><Selector><Condition>not is_resource_full</Condition><Action>scan_area_for_resource</Action></Selector></Sequence><Condition>is_resource_full</Condition><Selector><Sequence><Condition>scan_area_for_resource</Condition><Selector><Action>collect_resource</Action><Condition>not is_resource_full</Condition></Selector></Sequence><Action>drop_resource</Action></Selector></BehaviorTree>
###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_circle': 'Action: Form a circular formation with other robots. Always returns True.', 'is_agent_in_formation': 'Condition: Check if the agent is in the designated formation with other robots. Returns True if the agent is in formation, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.', 'move_forward': 'Action: Move the robot one step forward in the current direction. Always returns True.', 'turn_left': 'Action: Turn the robot 90 degrees to the left. Always returns True.', 'turn_right': 'Action: Turn the robot 90 degrees to the right. Always returns True.', 'update_map': "Action: Update the robot's internal map of the environment based on its current location and sensor readings. Always returns True.", 'is_path_blocked': 'Condition: Check if the path in the current direction is blocked or impassable. True if the path is blocked, False otherwise.', 'is_area_mapped': 'Condition: Check if the current area has already been mapped and explored. Returns: True if the area is mapped, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Form a circular formation with other robots and move to a specific location together'. Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_path_clear</Condition><Action>move_forward</Action><Action>update_map</Action></Sequence><Sequence><Condition>is_obstacle_detected</Condition><Action>avoid_obstacle</Action><Action>update_map</Action></Sequence><Sequence><Condition>is_agent_in_formation</Condition><Action>continue_movement_agent</Action></Sequence><Action>form_circle</Action></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'is_agent_in_formation': 'Condition: Check if the agent is in the designated formation with other robots. Returns True if the agent is in formation, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.', 'move_forward': 'Action: Move the robot one step forward in the current direction. Always returns True.', 'turn_left': 'Action: Turn the robot 90 degrees to the left. Always returns True.', 'turn_right': 'Action: Turn the robot 90 degrees to the right. Always returns True.', 'update_map': "Action: Update the robot's internal map of the environment based on its current location and sensor readings. Always returns True.", 'is_path_blocked': 'Condition: Check if the path in the current direction is blocked or impassable. True if the path is blocked, False otherwise.', 'is_area_mapped': 'Condition: Check if the current area has already been mapped and explored. Returns: True if the area is mapped, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Collaboratively move a large object to a designated location'. Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_path_clear</Condition><Action>move_forward</Action><Action>update_map</Action></Sequence><Sequence><Condition>is_obstacle_detected</Condition><Action>avoid_obstacle</Action><Action>update_map</Action></Sequence><Sequence><Condition>is_agent_in_formation</Condition><Action>continue_movement_agent</Action></Sequence><Action>pull_large_object</Action></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within  
###
4.// INSTRUCTIONS: Use only the following behaviors {'move_to_next_point': 'Action: Move the robot to the next designated coordinate. Always returns True.', 'pick_up_item': 'Action: Pick up the specified item. Returns True if item is successfully picked up, False otherwise.', 'scan_for_items': 'Action: Scan the surrounding area for specified items. Always returns True.', 'check_inventory': 'Condition: Check if the robot's inventory is full. Returns True if full, False if not.', 'is_item_available': 'Action: Check if specified item is available in the surrounding area. Returns True if item is available, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Collect at least 5 gold pieces, then find the exit.'Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree><Sequence><Condition>check_inventory</Condition><Selector><Sequence><Action>pick_up_item</Action><Action>move_to_next_point</Action></Sequence><Action>check_inventory</Action></Selector><Selector><Sequence><Condition>is_item_available</Condition><Selector><Sequence><Action>scan_for_items</Action><Action>pick_up_item</Action><Action>move_to_next_point</Action></Sequence><Action>move_to_next_point</Action></Selector></Sequence><Sequence><Action>move_to_next_point</Action><Action>task_completed</Action></Sequence></Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'move_forward': 'Action: Move the robot forward by 5 units. Always returns True.', 'turn_right': 'Action: Turn the robot 90 degrees to the right. Always returns True.', 'turn_left': 'Action: Turn the robot 90 degrees to the left. Always returns True.', 'move_back': 'Action: Move the robot backward by 5 units. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Move forward, turn right, move backward, then turn left'.Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree><Sequence><Selector><Action>move_forward</Action><Action>turn_right</Action></Selector><Sequence><Action>move_back</Action><Action>turn_left</Action></Sequence><Action>task_completed</Action></Sequence></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'attack': 'Action: Attack the designated target. Returns True if the attack was successful, False otherwise.', 'scan_for_enemies': 'Action: Scan the surrounding area for any enemies. Always returns True.', 'move_to_strategic_location': 'Action: Move the robot to a strategic location. Returns True if the location is reached, False otherwise.', 'is_enemy_present': 'Condition: Check if there is an enemy present nearby. Returns True if an enemy is detected, False otherwise.', 'is_enemy_nearby': 'Condition: Check if an enemy is within attack range. Returns True if an enemy is detected within 10 units, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Move to a strategic location, scan for enemies, attack if enemy is present, then move to another strategic location.'Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Action>move_to_strategic_location</Action><Selector><Sequence><Condition>is_enemy_present</Condition><Action>attack</Action><Action>move_to_strategic_location</Action></Selector></Sequence><Action>scan_for_enemies</Action><Action>move_to_strategic_location</Action></Selector></Sequence></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'follow_leader': 'Action: Follow the designated leader robot. Returns True if successfully following the leader, False otherwise.', 'scan_for_obstacles': 'Action: Scan for obstacles in the surrounding area. Always returns True.', 'move_to_target': 'Action: Move to the designated target. Returns True if target is reached, False otherwise.', 'is_leader_moving': 'Condition: Check if the leader robot is currently moving. Returns True if the leader is in motion, False otherwise.', 'is_obstacle_present': 'Condition: Check if there are any obstacles within the designated range. Returns True if an obstacle is detected, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: generate behavior tree to 'Follow the designated leader to a specific location while avoiding obstacles.'Output only the XML behavior tree without extra text.
7.// OUTPUT:
<BehaviorTree><Sequence><Action>follow_leader</Action><Selector><Sequence><Condition>is_leader_moving</Condition><Selector><Sequence><Action>scan_for_obstacles</Action><Action>move_to_target</Action></Sequence><Action>follow_leader</Action></Selector></Sequence></Selector></BehaviorTree> ###
3.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3.// USER COMMAND: generate behavior tree to 'Move towards the target, but avoid any obstacles on the way. If target is reached, form a line and freeze.' Output only the XML behavior tree without extra text.
3.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>is_obstacle_detected</Condition><Action>avoid_obstacle</Action></Sequence><Action>wander</Action></Selector><Sequence><Condition>is_target_detected</Condition><Sequence><Action>form_line</Action><Action>task_completed</Action></Sequence></Sequence></Sequence></BehaviorTree>

###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Search for the target while avoiding obstacles, and once target is reached, return home and freeze.' Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_obstacle_detected</Condition><Action>avoid_obstacle</Action></Sequence><Action>wander</Action></Selector><Sequence><Condition>is_target_detected</Condition><Sequence><Action>continue_movement_agent</Action><Action>change_color_to_green</Action><Action>change_color_to_white</Action><Action>task_completed</Action></Sequence></Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_intruder_detected': 'Condition: Check if an intruder is detected in the monitored area. Returns True if an intruder is detected, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'If an intruder is detected, form a line and change color to red to alert other robots. Otherwise, continue moving and changing colors randomly.' Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_intruder_detected</Condition><Sequence><Action>form_line</Action><Action>change_color_to_red</Action><Action>task_completed</Action></Sequence></Sequence><Selector><Sequence><Condition>is_obstacle_detected</Condition><Action>avoid_obstacle</Action></Sequence><Sequence><Action>continue_movement_agent</Action><Selector><Sequence><Action>form_line</Action><Action>change_color_to_green</Action></Sequence><Action>change_color_to_white</Action></Selector><Action>wander</Action></Sequence></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_target_detected': 'Condition: Check if target is 
###
4.// INSTRUCTIONS: Use only the following behaviors {'detect_movement': "Condition: Check for any movement in the environment. Returns True if there is movement, False otherwise.", 'confirm_movement': 'Action: Confirms the detected movement and returns True.', 'avoid_movements': 'Subtree node: Represents a behavior tree for avoiding movements.', 'change_direction': "Action: Changes the robot's direction. Returns True if direction is changed, False otherwise.", 'clear_obstacle': 'Action: Clears any detected obstacle in the path. Always returns True.', 'is_obstacle_in_front': "Condition: Check if there is an obstacle in front. Returns True if an obstacle is detected, False otherwise.", 'patrol': 'Action: move the robot in a predetermined patrol pattern. Always returns True.', 'update_movement_confirmation': 'Action: Updates the confirmation for detected movements. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Regularly check for movements and avoid them while patrolling. If an obstacle is detected, change direction and continue patrolling.
4.// OUTPUT:
<BehaviorTree> <Sequence> <Action>patrol</Action> <Sequence> <Action>update_movement_confirmation</Action> <Selector> <Sequence> <Condition>detect_movement</Condition> <Action>confirm_movement</Action> </Sequence> <Sequence> <Condition>is_obstacle_in_front</Condition> <Action>change_direction</Action> <Action>clear_obstacle</Action> <Selector> <Sequence> <Condition>detect_movement</Condition> <Action>confirm_movement</Action> </Sequence> <Sequence> <Condition>is_obstacle_in_front</Condition> <Action>change_direction</Action> <Action>clear_obstacle</Action> </Sequence> </Selector> </Selector> </Selector> </Sequence> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'send_message': 'Action: Send a message to other robots in the swarm. Always returns True.', 'wait_for_message': "Action: Wait for a message from other robots. Always returns True.", 'is_message_received': "Condition: Checks if a message has been received. Returns True if a message is received, False otherwise.", 'form_circle': 'Action: Form a circular shape with other robots. Always returns True.', 'request_help': 'Action: Request help from other robots in the swarm. Always returns True.', 'move_to_target_point': 'Action: Move to a specific target point. Returns True if robot reaches the point, False otherwise.', 'is_reached_target_point': 'Condition: Check if the robot has reached the target point. Returns True if robot is at the target point, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Communicate with other robots in the swarm while forming a circle and moving to a target point. If help is requested, stop forming the circle and move to aid the other robot.
5.// OUTPUT:
<BehaviorTree> <Sequence> <Action>form_circle</Action> <Sequence> <Action>send_message</Action> <Action>wait_for_message</Action> <Sequence> <Condition>is_message_received</Condition> <Selector> <Sequence> <Action>request_help</Action> <Action>move_to_target_point</Action> <Condition>is_reached_target_point</Condition> </Sequence> <Action>move_to_target_point</Action> <Condition>is_reached_target_point</Condition> </Selector> </Sequence> </Sequence> </Sequence> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'analyze_environment': "Action: Continuously analyze the environment for potential threats or opportunities. Always returns True.", 'scan_surroundings': 'Action: Use sensors to scan the immediate surroundings for any changes. Always returns True.', 'move_to_nearest_resource': "Action: Move to the nearest resource identified in the environment. Returns True if resource is reached, False otherwise.", 'is_resource_in_range': "Condition: Check if a resource is within range. Returns True if resource is in range, False otherwise.", 'collect_resource': "Action: Collect the identified resource. Returns True if resource is collected, False otherwise.", 'return_to_nest': "Action: Return to the nest with collected resources. Returns True if nest is reached, False otherwise.", 'is_nest_reached': 'Condition: Check if the nest is reached. Returns True if nest is reached, False otherwise.', 'detect_obstacles': "Action: Continuously detect and avoid obstacles in the environment. Always returns True.", 'is_obstacle_found': "Condition: Checks if an obstacle is detected. Returns True if an obstacle is detected, False otherwise.", 'observe_resource_density': "Action: Use sensors to observe the density of the identified resource. Always returns True."}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Continuously analyze the environment while moving to the nearest resource and collecting it. If an obstacle is detected, avoid it and continue moving towards the resource until it is collected. Once collected, return to the nest with the resources.
6.// OUTPUT:
<BehaviorTree> <Sequence> <Action>analyze_environment</Action> <Sequence> <Action>move_to_nearest_resource</Action> <Sequence> <Condition>is_resource_in_range</Condition> <Action>collect_resource</Action> </Sequence> </Sequence> <Selector> <Sequence> <Action>detect_obstacles</Action> <Condition>is_obstacle_found</Condition> </Sequence> <Action>return_to_nest</Action> <Condition>is_nest_reached</Condition> </Selector> </Sequence> </BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'enter_sleep_mode': "Action: Put the robot into sleep mode to conserve energy. Always returns True.", 'scan_surroundings': 'Action: Use sensors to scan the immediate surroundings for any changes. Always returns True.', 'detect_targets': 'Action: Use sensors to detect potential targets in the environment. Returns True if a target is found, False otherwise.', 'is_target_found': "Condition: Check if a target is found. Returns True if a target is found, False otherwise.", 'attack_target': "Action: Move towards the target and attack. Returns True if target is destroyed, False otherwise.", 'move_to_random_location': "Action: Move to a random location in the environment. Returns True if robot reaches the location, False otherwise.", 'is_reached_location': 'Condition: Check if random location is reached. Returns True if robot reaches the location, False otherwise.', 'regroup_with_swarm': 'Action: Move towards the swarm to regroup. Returns True if robot reaches the swarm, False otherwise.', 'is_swarm_reached': 'Condition: Check if the
###
4.// INSTRUCTIONS: Use only the following behaviors {'move_forward': 'Action: Move the agent one unit forward. Returns True if successful, False otherwise.', 'turn_left': 'Action: Turn the agent 90 degrees to the left. Returns True if successful, False otherwise.', 'turn_right': 'Action: Turn the agent 90 degrees to the right. Returns True if successful, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles ahead. Returns True if an obstacle is detected, False otherwise.', 'is_at_destination': 'Condition: Check if the agent has reached the designated destination. Returns True if at destination, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Move forward, turn right, and continue until reaching the destination.
4.// OUTPUT:
<BehaviorTree> <Sequence> <Action>move_forward</Action> <Action>turn_right</Action> <Selector> <Sequence><Condition>is_at_destination</Condition> <Action>task_completed</Action></Sequence><Sequence> <Condition>is_obstacle_detected</Condition> <Action>turn_left</Action></Sequence> </Selector> </Sequence> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'is_at_location': 'Condition: Check if the agent is at the designated location. Returns True if at the location, False otherwise.', 'is_object_grabbed': 'Condition: Check if the object has been grabbed. Returns True if the object is grabbed, False otherwise.', 'move_to_location': 'Action: Move the agent to the designated location. Returns True if successful, False otherwise.', 'drop_object': 'Action: Drop the grabbed object at the designated location. Returns True if successful, False otherwise.', 'grab_object': 'Action: Grab the designated object if within reach. Returns True if successful, False otherwise.', 'get_closest_target': 'Action: Move the agent towards the closest target object. Returns True if successful, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Grab the designated object, move to a specific location and drop the object.
5.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Action>grab_object</Action> <Action>get_closest_target</Action> </Sequence> <Sequence> <Condition>is_at_location</Condition> <Action>drop_object</Action> </Sequence> </Selector> <Selector> <Action>move_to_location</Action> </Selector> </Sequence> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'find_food': 'Subtree node: Represents a behavior tree for finding food.', 'eat_food': 'Action: Consume the found food. Always returns True.', 'dance': 'Action: Perform a celebratory dance. Always returns True.', 'is_hungry': "Event: Triggers when the agent's hunger level falls below a threshold. Returns True if hungry, False otherwise.", 'is_food_found': 'Condition: Check if food is detected within 20 units. Returns True if food is within 20 units, False otherwise.', 'is_food_consumed': 'Condition: Check if the food has been consumed. Returns True if food is consumed, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Search for food and perform a celebratory dance when food is found and consumed.
6.// OUTPUT:
<BehaviorTree> <Sequence> <Trigger>is_hungry</Trigger> <Sequence> <Action>find_food</Action> <Selector> <Sequence> <Condition>is_food_found</Condition> <Action>eat_food</Action> <Trigger>is_hungry</Trigger> </Sequence> </Selector> </Sequence> <Condition>is_food_consumed</Condition> <Action>dance</Action> </Sequence> </BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'follow_leader': 'Action: Follow the designated leader robot. Returns True if successfully following, False otherwise.', 'rotate_180': 'Action: Rotate the agent 180 degrees. Returns True if successful, False otherwise.', 'is_leader_nearby': 'Condition: Check if the designated leader robot is within 10 units. Returns True if leader is nearby, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: Have the agent follow the designated leader robot, rotating 180 degrees if the leader is not nearby.
7.// OUTPUT:
<BehaviorTree> <Selector> <Action>rotate_180</Action> <Selector> <Condition>is_leader_nearby</Condition> <Action>follow_leader</Action> </Selector> </Selector> </BehaviorTree> 
###
3.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3.// USER COMMAND: generate behavior tree to 'Find food, avoid obstacles, and return to the nest'Output only the XML behavior tree without extra text.
3.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>is_target_detected</Condition> <Action>change_color_to_green</Action> </Sequence> <Action>wander</Action> </Selector> <Sequence> <Condition>is_obstacle_detected</Condition> <Action>avoid_obstacle</Action> </Sequence> <Sequence> <Condition>is_agent_in_nest</Condition> <Action>change_color_to_white</Action> <Action>agent_movement_freeze</Action> </Sequence> </Sequence> </BehaviorTree>

###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Collect items, avoid obstacles, and return to the nest'Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>is_target_detected</Condition> <Action>change_color_to_green</Action> <Action>continue_movement_agent</Action> </Sequence> <Action>wander</Action> </Selector> <Sequence> <Condition>is_obstacle_detected</Condition> <Action>avoid_obstacle</Action> </Sequence> <Sequence> <Condition>is_agent_in_nest</Condition> <Action>change_color_to_white</Action> <Action>agent_movement_freeze</Action> </Sequence> </Sequence> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Detect and avoid obstacles while moving towards target'Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>is_target_detected</Condition> <Action>change_color_to_green</Action> <Action>continue_movement_agent</Action> </Sequence> <Action>wander</Action> </Selector> <Sequence> <Condition>is_obstacle_detected</Condition> <Action>avoid_obstacle</Action> <Action>continue_movement_agent</Action> </Sequence> </Sequence> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's
###
3.// INSTRUCTIONS: Use only the following behaviors {'move_forward': 'Action: Move one step forward while avoiding obstacles. Always returns True.', 'rotate_left': 'Action: Rotate the robot 90 degrees counterclockwise. Always returns True.', 'rotate_right': 'Action: Rotate the robot 90 degrees clockwise. Always returns True.', 'detect_obstacle': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'detect_target': 'Condition: Check for a target nearby. Returns True if a target is detected, False otherwise.', 'is_moving': 'Condition: Check if the robot is currently moving. Returns True if the robot is moving, False otherwise.', 'task_completed': 'Action: Signal task completion by stopping all movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3.// USER COMMAND: Generate a behavior tree for a single robot to navigate through a maze and reach the end point, while avoiding obstacles and detecting targets.
3.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>detect_target</Condition><Action>task_completed</Action></Sequence><Sequence><Condition>detect_obstacle</Condition><Selector><Sequence><Condition>is_moving</Condition><Action>rotate_right</Action></Sequence><Action>move_forward</Action></Selector></Sequence></Selector></BehaviorTree>

###
4.// INSTRUCTIONS: Use only the following behaviors {'land': 'Action: Land the drone. Always returns True.', 'take_off': 'Action: Take off the drone. Always returns True.', 'is_low_battery': 'Condition: Check if the drone's battery is low. Returns True if battery level is below 20%, False otherwise.', 'is_target_reached': 'Condition: Check if the drone is within 10 units of the target. Returns True if the target is reached, False otherwise.', 'move_towards_target': 'Action: Move towards the target. Always returns True.', 'scan_area': 'Action: Scan the area for any possible targets. Always returns True.', 'search_for_targets': 'Action: Move in a zig-zag pattern while scanning the area for targets. Always returns True.', 'return_to_base': 'Action: Return the drone to the base. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Generate a behavior tree for a drone to search for targets, land on the target, and return to the base if battery is low or target is reached.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_target_reached</Condition><Action>land</Action></Sequence><Sequence><Condition>is_low_battery</Condition><Action>return_to_base</Action></Sequence><Sequence><Action>take_off</Action><Selector><Sequence><Condition>scan_area</Condition><Action>search_for_targets</Action><Action>move_towards_target</Action></Sequence><Action>scan_area</Action></Selector></Sequence></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'move_to_point': 'Action: Move the robot to the specified location. Always returns True.', 'pick_up_object': 'Action: Pick up the object at the current location. Always returns True.', 'place_object': 'Action: Place the object at the specified location. Always returns True.', 'detect_object': 'Condition: Check if there is an object at the current location. Returns True if there is an object, False otherwise.', 'detect_target': 'Condition: Check if there is a target at the specified location. Returns True if there is a target, False otherwise.', 'is_at_point': 'Condition: Check if the robot has reached the specified location. Returns True if the robot has reached the location, False otherwise.', 'task_completed': 'Action: Signal task completion by moving away from the target location. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Generate a behavior tree for a robot to move to a specified location, detect and pick up an object, place the object at another specified location, and move away from the target location.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>detect_object</Condition><Action>pick_up_object</Action></Sequence><Sequence><Condition>detect_target</Condition><Action>place_object</Action><Condition>is_at_point</Condition><Action>task_completed</Action></Sequence><Sequence><Action>move_to_point</Action></Sequence></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'move_in_circle': 'Action: Move in a circular pattern around a target location. Always returns True.', 'detect_target': 'Condition: Check if a target is detected within a certain radius. Returns True if a target is detected, False otherwise.', 'change_color_to_red': 'Action: Change the robot's color to red. Always returns True.', 'change_color_to_blue': 'Action: Change the robot's color to blue. Always returns True.', 'move_towards_target': 'Action: Move towards the detected target location. Always returns True.', 'take_aim': 'Action: Rotate towards the target location. Always returns True.', 'fire': 'Action: Fire a projectile towards the target location. Always returns True.', 'reload': 'Action: Reload the robot's weapon. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Generate a behavior tree for a robot to defend a specified location by moving in a circular pattern, detecting and firing at targets within a certain radius, and changing colors depending on their team.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>detect_target</Condition><Action>take_aim</Action><Action>fire</Action></Sequence><Sequence><Condition>detect_target</Condition><Action>move_towards_target</Action></Sequence><Sequence><Condition>detect_target</Condition><Action>move_in_circle</Action></Sequence><Sequence><Action>change_color_to_red</Action></Sequence><Sequence><Condition>detect_target</Condition><Action>move_in_circle</Action></Sequence><Sequence><Action>change_color_to_blue</Action></Sequence><Sequence><Condition>detect_target</Condition><Action>move_in_circle</Action></Sequence></Selector></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'move_to_point': 'Action: Move the robot to the specified location. Always returns True.', 'ascend': 'Action: Ascend to a higher level. Always returns True.', 'descend': 'Action: Descend to a lower level. Always returns True.', 'detect_obstacle': 'Condition: Check for obstacles nearby. Returns True if an obstacle 
###
4.// INSTRUCTIONS: Use only the following behaviors {'control_speed': "Action: Change agent's speed. Always returns True.", 'is_agent_moving': 'Condition: Check if the agent is moving. Returns True if the agent is moving, False otherwise.', 'is_agent_stopped': 'Condition: Check if the agent is stopped. Returns True if the agent is stopped, False otherwise.', 'is_agent_facing_north': 'Condition: Check if the agent is facing North. Return True if the agent is facing North, False otherwise.', 'move_to_target': 'Action: Move the agent towards the target. Always returns True.', 'scan_environment': 'Action: Scan the environment for potential targets. Always returns True.', 'set_target_coordinates': 'Action: Set the coordinates of the target. Always returns True.', 'target_reached': 'Condition: Check if the agent has reached the target. Returns True if the agent is within a certain distance of the target, False otherwise.', 'task_complete': 'Action: Signal task completion by freezing movement and changing speed to 0. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Scan the environment, set new target coordinates, and move towards the target until it is reached.'Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Action>scan_environment</Action> <Sequence> <Action>set_target_coordinates</Action> <Action>move_to_target</Action> </Sequence> <Action>control_speed</Action> </Sequence> <Selector> <Condition>target_reached</Condition> <Action>task_complete</Action> </Selector> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'face_north': "Action: Make the agent face the North direction. Always returns True.", 'face_south': "Action: Make the agent face the South direction. Always returns True.", 'face_east': "Action: Make the agent face the East direction. Always returns True.", 'face_west': "Action: Make the agent face the West direction. returns True.", 'rotate_left': 'Action: Rotate the agent to the left. Always returns True.', 'rotate_right': 'Action: Rotate the agent to the right. Always returns True.', 'make_circle': 'Action: Make the agent move in a circular motion. Always returns True.', 'follow_path': 'Action: Follow a predetermined path. Always returns True.', 'path_completed': 'Condition: Check if the path has been completed. Returns True if the agent has reached the final point, False otherwise.', 'find_next_checkpoint': 'Action: Find the next checkpoint in a predefined path. Always returns True.', 'is_checkpoint_reached': 'Condition: Check if the current checkpoint has been reached. Returns True if the agent is within a certain distance of the checkpoint, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Rotate the agent in a circular motion, follow a predetermined path, and stop when the path is completed.'Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Action>make_circle</Action> <Selector> <Action>follow_path</Action> <Sequence> <Condition>is_checkpoint_reached</Condition> <Action>find_next_checkpoint</Action> </Sequence> </Selector> <Condition>path_completed</Condition> <Action>task_completed</Action> </Selector> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'explore': "Action: Move the agent in exploration mode. Always returns True.", 'sense_surroundings': 'Action: Sense the surroundings for potential threats. Always returns True.', 'identify_threat': 'Action: Identify the type of threat detected. Returns 0 for no threat, 1 for visible obstacle, 2 for invisible obstacle, 3 for potential predator, 4 for unexplored area.', 'avoid_threat': 'Action: Take action to avoid the identified threat. Always returns True.', 'backtrack': 'Action: Move back to a previously explored area. Always returns True.', 'mark_current_location': 'Action: Mark the current location as explored. Always returns True.', 'is_area_explored': 'Condition: Check if the current area has been explored. Returns True if the area has been marked as explored, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_predator_detected': 'Condition: Check for potential predators. Returns True if a predator is detected, False otherwise.', 'task_completed': 'Action: Freeze movement and signal task completion. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Explore a new area, sense surroundings for potential threats, and take action to avoid threats before marking the area as explored.'Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree> <Sequence> <Action>explore</Action> <Selector> <Sequence> <Action>sense_surroundings</Action> <Sequence> <Condition>is_obstacle_detected</Condition> <Selector> <Condition>is_predator_detected</Condition> <Action>avoid_threat</Action> </Selector> <Action>mark_current_location</Action> </Sequence> <Selector> <Condition>is_area_explored</Condition> <Action>task_completed</Action> </Selector> </Selector> </Sequence> </BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'collect_resource': "Action: Move the agent towards the nearest resource and collect it. Returns True when the resource is successfully collected.", 'deliver_resource': 'Action: Move the agent towards the designated drop-off point and deliver the collected resource. Returns True when the resource is successfully delivered.', 'is_resource_available': 'Condition: Check if there is a resource within a certain distance. Returns True if a resource is available, False otherwise.', 'is_dropoff_reached': 'Condition: Check if the designated drop-off point has been reached. Returns True if the agent is within a certain distance of the drop-off point, False otherwise.', 'navigate_to_dropoff': 'Action: Use pathfinding algorithm to navigate to the designated drop-off point. Always returns True.', 'navigate_to_resource': 'Action: Use pathfinding algorithm to navigate to the nearest resource. Always returns True.', 'find_new_resource': 'Action: Search for a new resource if the current one is unavailable or already collected. Returns True when a new resource is found', 'pick_up_resource': 
###
3.// INSTRUCTIONS: Use only the following behaviors {'face_enemy': 'Action: Turn towards the nearest enemy. Always returns True.', 'fire_weapon': 'Action: Fire the weapon towards the enemy. Always returns True.', 'is_enemy_nearby': 'Condition: Checks if there is an enemy within a specific range. Returns True if an enemy is within range, False otherwise.', 'reload_weapon': 'Action: Reload the weapon if it is out of ammo. Always returns True.', 'get_ammo': 'Subtree node: Represents a behavior tree for finding and retrieving ammo.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3.// USER COMMAND: Defend the base by checking for enemies nearby. If an enemy is in range, turn and shoot. If out of ammo, find and retrieve ammo.
3.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_enemy_nearby</Condition><Selector><Sequence><Action>face_enemy</Action><Action>fire_weapon</Action></Sequence><Selector><Sequence><Condition>needs_ammo</Condition><Action>get_ammo</Action><Action>reload_weapon</Action></Sequence></Selector></Sequence></Selector></Sequence></BehaviorTree>

###
4.// INSTRUCTIONS: Use only the following behaviors {'navigate_to_checkpoint': 'Action: Calculate and follow the shortest path to the designated checkpoint. Always returns True.', 'collect_resource': 'Action: Pick up the resource at the checkpoint. Always returns True.', 'drop_off_resource': 'Action: Deliver the collected resource to the designated storage area. Always returns True.', 'is_resource_available': 'Condition: Checks if there is a resource available at the checkpoint. Returns True if there is a resource, False otherwise.', 'is_storage_full': 'Condition: Checks if the designated storage area is full. Returns True if the storage is full, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Collect resources from designated checkpoints and deliver them to storage. Navigate the most efficient path between checkpoints and storage.
4.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_resource_available</Condition><Selector><Sequence><Action>navigate_to_checkpoint</Action><Action>collect_resource</Action></Sequence><Selector><Sequence><Condition>is_storage_full</Condition><Action>drop_off_resource</Action></Sequence></Selector></Selector></Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'move_to_destination': 'Action: Move the robot to the designated destination. Always returns True.', 'gather_samples': 'Action: Use attached devices to gather data and samples at the destination. Always returns True.', 'analyze_data': 'Action: Process and analyze the collected data and samples. Always returns True.', 'sample_checkup': 'Condition: Checks if the collected samples match the desired parameters. Returns True if the samples match, False otherwise.', 'is_device_attached': 'Condition: Checks if the necessary device is attached to the robot. Returns True if the device is attached, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Travel to a designated destination, collect data and samples, and perform analysis. If the collected samples meet the desired parameters, continue with analysis. If a necessary device is not attached, find and attach it before proceeding.
5.// OUTPUT:
<BehaviorTree><Sequence><Action>move_to_destination</Action><Selector><Sequence><Action>gather_samples</Action></Sequence><Selector><Sequence><Condition>is_device_attached</Condition><Action>attach_device</Action></Sequence></Selector></Selector></Sequence><Selector><Sequence><Condition>sample_checkup</Condition><Action>analyze_data</Action></Sequence></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'perform_maintenance': 'Action: Perform basic maintenance tasks on the robot. Always returns True.', 'collect_data': 'Action: Use sensors to collect data in various environments. Always returns True.', 'analyze_environment': 'Action: Analyze collected data to determine an optimal environment for the robot. Always returns True.', 'set_environment': 'Action: Use the analyzed data to set the robot's environment to the optimal state. Always returns True.', 'is_maintenance_required': 'Condition: Checks if the robot is in need of maintenance. Returns True if maintenance is needed, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Continuously monitor and maintain the robot's performance and environment. If maintenance is required, perform it immediately. Otherwise, collect data, analyze the environment, and set it to optimal state.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>perform_maintenance</Action></Sequence><Selector><Sequence><Condition>is_maintenance_required</Condition><Action>perform_maintenance</Action></Sequence><Selector><Sequence><Action>collect_data</Action><Selector><Sequence><Action>analyze_environment</Action><Action>set_environment</Action></Sequence></Selector></Sequence></Selector></Selector></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'read_map': 'Action: Read the map and determine the best route towards the designated location. Always returns True.', 'travel_to_destination': 'Action: Travel to the designated location following the determined route. Always returns True.', 'detect_obstacles': 'Condition: Checks if there are any obstacles on the determined route to the destination. Returns True if obstacles are present, False otherwise.', 'avoid_obstacles': 'Action: Use alternative paths to avoid obstacles and continue towards the destination. Always returns True.', 'is_destination_reached': 'Condition: Checks if the robot has reached the designated destination. Returns True if the destination is reached, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: Read the map and navigate the most efficient route to the designated destination. Check for obstacles and adjust the route if necessary. Stop once the destination is reached.
7.// OUTPUT:
<BehaviorTree><Sequence><Action>read_map</Action></Sequence><Selector><Sequence><Action>travel_to_destination</Action></Sequence><Selector><Sequence><Condition>detect_obstacles</Condition><Action>avoid_obstacles</Action></Sequence></Selector></Sequence><Selector><Sequence><Condition>is_destination_reached</Condition></Sequence></Selector></BehaviorTree>           
###
3.// INSTRUCTIONS: Use only the following behaviors {'pick_box': 'Action: Pick up a box located within a specific range. Always returns True.', 'drop_box': 'Action: Drop the box at a designated location. Always returns True.', 'box_count': 'Function: Counts the number of available boxes. Returns the count of boxes.', 'box_position': 'Function: Gets the position of a specific box. Returns the coordinates of the box.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3.// USER COMMAND: Create a behavior tree to collect and drop off 3 boxes.
3.// OUTPUT:
<BehaviorTree><Selector><Sequence><Function>box_count</Function><Condition>greater_than_3</Condition><Action>pick_box</Action></Sequence><Sequence><Function>box_count</Function><Condition>less_than_3</Condition><Action>drop_box</Action></Sequence></Selector></BehaviorTree>

###
4.// INSTRUCTIONS: Use only the following behaviors {'identify_food_source': 'Action: Use sensors to identify nearby food sources. Always returns True.', 'gather_food': 'Action: Collect food from a specific source. Always returns True.', 'calculate_total_food': 'Function: Calculates the total amount of food gathered. Returns the total amount.', 'distribute_food': 'Action: Distribute food among nearby robots. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Gather food from multiple sources and distribute it among the swarm.
4.// OUTPUT:
<BehaviorTree><Sequence><Action>identify_food_source</Action><Action>gather_food</Action><Function>calculate_total_food</Function><Action>distribute_food</Action></Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'detect_target': 'Action: Use sensors to detect nearby targets. Always returns True.', 'move_to_target': 'Action: Move towards the identified target. Always returns True.', 'check_distance': 'Function: Checks the distance between the robot and the target. Returns a score based on the distance.', 'charge_target': 'Action: Charge towards the target at full speed. Always returns True.', 'avoid_obstacles': 'Action: Avoid any obstacles in the path. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Create a behavior tree to navigate towards a target while avoiding obstacles.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>detect_target</Action><Condition>target_detected</Condition><Sequence><Action>move_to_target</Action><Function>check_distance</Function></Sequence></Sequence><Action>move_to_target</Action><Action>avoid_obstacles</Action><Action>charge_target</Action></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'detect_cave': 'Action: Use sensors to detect nearby caves. Always returns True.', 'explore_cave': 'Action: Explore and map the inside of a cave. Always returns True.', 'evaluate_map': 'Function: Evaluate the mapping progress of the cave exploration. Returns a score based on map completion.', 'return_home': 'Action: Return to the starting point. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Explore and map a cave, returning to the starting point once the map is complete.
6.// OUTPUT:
<BehaviorTree><Sequence><Action>detect_cave</Action><Action>explore_cave</Action><Function>evaluate_map</Function><Action>return_home</Action></Sequence></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'detect_treasure': 'Action: Use sensors to detect nearby treasure. Always returns True.', 'grab_treasure': 'Action: Pick up the treasure. Always returns True.', 'check_inventory': 'Function: Checks the current inventory for available space. Returns the remaining space.', 'return_home': 'Action: Return to the starting point. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: Collect as much treasure as possible, returning to the starting point once the inventory is full.
7.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>detect_treasure</Action><Action>grab_treasure</Action><Function>check_inventory</Function><Action>return_home</Action><Action>detect_treasure</Action><Action>grab_treasure</Action><Function>check_inventory</Function><Action>return_home</Action></Sequence></Selector></BehaviorTree> 
###
3.// INSTRUCTIONS: Use only the following behaviors {'detect_other_agents': 'Condition: Checks for other agents in the environment. Returns True if other agents are detected, False otherwise.', 'get_target_location': 'Function: Determines the location of the target. Returns a tuple (x, y) representing the coordinates of the target.', 'move_to_target': 'Action: Moves towards the target location. Always returns True.', 'is_path_blocked': 'Condition: Checks for obstacles blocking the path to the target. Returns True if path is blocked, False otherwise.', 'scout_surroundings': 'Action: Scans the surroundings for potential targets. Always returns True.', 'pick_up_resource': 'Function: Picks up a nearby resource. Returns True if successful, False if no resource is found.', 'deposit_resource': 'Action: Deposits the resource in the designated storage area. Always returns True.'}, to construct behavior tree in XML format to the following task scenario. If the available behaviors do not fit with the task scenario, say (Sorry, I can't do the task)
3.// TASK SCENARIO: A swarm of robots is tasked to scout the surroundings, pick up resources, and deposit them in the designated storage area. If any other agents are detected, the robots should move towards them.
3.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>detect_other_agents</Condition><Action>get_target_location</Action><Action>move_to_target</Action></Sequence><Action>scout_surroundings</Action></Selector><Condition>is_path_blocked</Condition><Function>pick_up_resource</Function><Action>deposit_resource</Action><Condition>detect_other_agents</Condition><Action>move_to_target</Action></BehaviorTree>
 
###
4.// INSTRUCTIONS: Use only the following behaviors {'follow_leader': 'Action: Follow the designated leader. Always returns True.', 'form_circle': 'Action: Form a circular formation around the leader. Always returns True.', 'is_any_agent_still_moving': 'Condition: Checks if any agents in the swarm are still moving. Returns True if at least one agent is still moving, False otherwise.', 'is_circle_formed': 'Condition: Checks if a circular formation is successfully formed. Returns True if the circle is formed, False otherwise.', 'stop_movement': 'Action: Stop the movement of all agents. Always returns True.'}, to construct behavior tree in XML format to the following task scenario. If the available behaviors do not fit with the task scenario, say (Sorry, I can't do the task)
4.// TASK SCENARIO: A group of swarm robots is tasked to follow a designated leader and form a circular formation around them. Once the formation is complete, all agents should stop their movement.
4.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_any_agent_still_moving</Condition></Sequence><Selector><Sequence><Action>follow_leader</Action><Condition>is_circle_formed</Condition><Action>form_circle</Action></Sequence><Selector><Condition>is_circle_formed</Condition><Action>stop_movement</Action><Action>stop_movement</Action></Selector></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'detect_food': 'Condition: Checks for nearby food sources. Returns True if food is detected, False otherwise.', 'detect_enemy': 'Condition: Checks for nearby enemies. Returns True if enemies are detected, False otherwise.', 'eat_food': 'Action: Consume the nearby food source. Always returns True.', 'attack_enemy': 'Action: Attack the nearby enemy. Always returns True.', 'is_hungry': 'Condition: Checks if the robot is hungry. Returns True if hungry, False otherwise.', 'is_threatened': 'Condition: Checks if the robot is threatened by enemies. Returns True if threatened, False otherwise.', 'wander': 'Action: Moves randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following task scenario. If the available behaviors do not fit with the task scenario, say (Sorry, I can't do the task)
5.// TASK SCENARIO: A single robot is tasked to survive by finding and consuming food sources, but must also defend itself by attacking enemies if threatened. If there are no food sources or enemies nearby, the robot should wander randomly.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>detect_food</Condition><Condition>is_hungry</Condition><Action>eat_food</Action></Sequence><Sequence><Condition>detect_enemy</Condition><Condition>is_threatened</Condition><Action>attack_enemy</Action></Sequence><Action>wander</Action></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'follow_path': 'Action: Follow the designated path. Always returns True.', 'rotate_clockwise': 'Action: Rotate 90 degrees clockwise. Always returns True.', 'find_shortest_path': 'Function: Calculates the shortest path to the target location. Returns a list of nodes representing the path in order.', 'is_target_reached': 'Condition: Checks if the target location has been reached. Returns True if target is reached, False otherwise.'}, to construct behavior tree in XML format to the following task scenario. If the available behaviors do not fit with the task scenario, say (Sorry, I can't do the task)
6.// TASK SCENARIO: A swarm of robots is tasked to follow a designated path to reach a target location. Each time a robot reaches the target, they should rotate 90 degrees clockwise before following the next path.
6.// OUTPUT:
<BehaviorTree><Selector> <Sequence> <Condition>is_target_reached</Condition> <Function>find_shortest_path</Function> <Action>rotate_clockwise</Action> <Action>follow_path</Action> </Sequence> <Function>find_shortest_path</Function> <Action>follow_path</Action> </Selector></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'detect_resource': 'Condition: Checks for nearby resources. Returns True if resources are detected, False otherwise.', 'collect_resource': 'Action: Collect the nearby resource. Always returns True.', 'is_resource_full': 'Condition: Checks if the robot's resource storage is full. Returns True if full, False otherwise.', 'deposit_resource': 'Action: Deposits the collected resources in the designated storage area. Always returns True.'}, to construct behavior tree in XML format to the following task scenario. If the available behaviors do not fit with the task scenario, say (Sorry, I can't do the task)
7.// TASK SCENARIO: A swarm of robots is tasked to collect resources and deposit them in a designated storage area. Each robot should continue collecting until their storage is full, and then deposit the resources.
7.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>detect_resource</Condition><Action>collect_resource</Action></Sequence><Sequence><Condition>is_resource_full</Condition><Action>deposit_resource</Action></Sequence></Selector></BehaviorTree>
###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Move towards an object, form a line with other robots, and change color to green when object is reached.' Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>is_path_clear</Condition><Action>continue_movement_agent</Action></Sequence><Action>wander</Action></Selector><Selector><Sequence><Condition>is_target_detected</Condition><Action>form_line</Action><Action>change_color_to_green</Action></Sequence><Action>wander</Action></Selector></Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_red': "Action: Change agent's color to red. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'is_intruder_detected': 'Condition: Check if an intruder is detected in the monitored area. Returns True if an intruder is detected, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Move towards an object, avoid obstacles, and change color to red when an intruder is detected.' Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_path_clear</Condition><Action>continue_movement_agent</Action></Sequence><Sequence><Condition>is_obstacle_detected</Condition><Action>avoid_obstacle</Action></Sequence><Action>wander</Action></Selector><Selector><Condition>is_intruder_detected</Condition><Action>change_color_to_red</Action></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Move towards a target, form a line with other robots, and change color to green when the target is reached.' Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_path_clear###
3.// INSTRUCTIONS: Use only the following behaviors {'increase_speed': 'Action: Increase agent speed. Always returns True.', 'decrease_speed': 'Action: Decrease agent speed. Always returns True.', 'move_to_target': 'Subtree node: Represents a behavior tree for moving towards a specified target.', 'is_target_reached': 'Condition: Checks if the target has been reached. Returns True if the target is reached, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3.// USER COMMAND: Move towards a target with increased speed. When target is reached, decrease speed.
3.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>increase_speed</Action><Sequence><Action>move_to_target</Action><Sequence><Condition>is_target_reached</Condition><Action>decrease_speed</Action></Sequence></Sequence></Selector></BehaviorTree>
	
###
4.// INSTRUCTIONS: Use only the following behaviors {'pick_up_object': 'Action: Pick up object and carry it. Always returns True.', 'drop_object': 'Action: Drop object from agent. Always returns True.', 'open_door': "Action: Open door in front of agent. Returns True if the door is opened successfully, False otherwise.", 'is_door_opened': 'Condition: Check if door is opened. Returns True if door is opened, False otherwise.', 'is_object_in_hand': 'Condition: Check if the agent is carrying an object. Returns True if an object is in hand, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Pick up an object, walk to the door, and open the door. If already holding an object, drop it first before picking up a new one. Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Sequence><Condition>is_object_in_hand</Condition><Action>drop_object</Action></Sequence><Action>pick_up_object</Action><Sequence><Action>walk_to_door</Action><Sequence><Condition>is_door_opened</Condition><Action>open_door</Action></Sequence></Sequence></Sequence><Action>wander</Action></Selector></BehaviorTree>
		
###
5.// INSTRUCTIONS: Use only the following behaviors {'push': 'Action: Push an object away with force. Always returns True.', 'pull': 'Action: Pull an object closer to the agent. Always returns True.', 'carry_object': "Action: Carry an object with the agent. Returns True if the object is successfully carried, False otherwise.", 'is_object_nearby': 'Condition: Check if there is an object within a certain distance from the agent. Returns True if an object is nearby, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: If an object is nearby, try to push it. If not, try to pull it. Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_object_nearby</Condition><Action>push</Action></Sequence><Action>pull</Action></Selector></BehaviorTree>
###
6.// INSTRUCTIONS: Use only the following behaviors {'take_screenshot': 'Action: Take a screenshot of the environment. Always returns True.', 'detect_color': 'Subtree node: Represents a behavior tree for detecting a specific color in the environment.', 'detect_shape': "Subtree node: Represents a behavior tree for detecting a specific shape in the environment.", 'is_color_detected': 'Condition: Check if the specified color is detected. Returns True if the color is detected, False otherwise.', 'is_shape_detected': 'Condition: Check if the specified shape is detected. Returns True if the shape is detected, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: If a yellow circle is detected, take a screenshot. Otherwise, detect and take a screenshot of any blue triangles.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_color_detected</Condition><Sequence><Condition>is_shape_detected</Condition><Action>take_screenshot</Action></Sequence></Sequence><Sequence><Action>detect_color</Action><Action>detect_shape</Action><Condition>is_color_detected</Condition><Sequence><Action>take_screenshot</Action></Sequence></Sequence></Selector></BehaviorTree>
	
###
7.// INSTRUCTIONS: Use only the following behaviors {'navigate_path': 'Subtree node: Represents a behavior tree for navigating a specific path in the environment.', 'detect_key': 'Subtree node: Represents a behavior tree for detecting a key in the environment.', 'unlock_door': 'Action: Use the key to unlock a door. Returns True if the door is successfully unlocked, False otherwise.', 'drop_key': 'Action: Drop the key from the agent. Always returns True.', 'is_key_detected': 'Condition: Check if a key is detected in the environment. Returns True if a key is detected, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: Navigate through a path, detect and pick up a key, then use it to unlock a door. If already carrying a key, drop it before picking up a new one.
7.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>navigate_path</Action><Sequence><Condition>is_key_detected</Condition><Action>detect_key</Action><Sequence><Condition>is_key_detected</Condition><Sequence><Action>drop_key</Action><Action>detect_key</Action></Sequence><Action>unlock_door</Action></Sequence></Sequence></Sequence><Action>task_completed</Action></Selector></BehaviorTree> 
###
4.// INSTRUCTIONS: Use only the following behaviors {'turn_right': 'Action: Turn the agent 90 degrees to the right. Always returns True.', 'is_environment_prime': 'Condition: Check if the environment is in prime condition. Returns True if the environment is in prime condition, False otherwise.', 'harvest_resource': 'Action: Collect resources from the environment. Always returns True.', 'check_resource_level': 'Condition: Check current resource level. Returns True if resource level is below a threshold, False otherwise.', 'return_home': 'Action: Return to the starting point. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Harvest resources until the environment is in prime condition, then return home.Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>is_environment_prime</Condition><Action>return_home</Action></Sequence><Sequence><Selector><Sequence><Condition>check_resource_level</Condition><Action>harvest_resource</Action></Sequence><Action>turn_right</Action></Selector></Sequence></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'detect_water': 'Condition: Check if water is detected nearby. Returns True if water is detected, False otherwise.', 'avoid_water': 'Action: Move away from water. Always returns True.', 'collect_sample': 'Action: Collect a sample from the environment. Always returns True.', 'analyze_sample': 'Action: Analyze the collected sample. Always returns True.', 'return_to_base': 'Action: Return to the base station. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Search for water samples, collect and analyze them, and then return to the base station.Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>detect_water</Condition><Action>collect_sample</Action><Action>analyze_sample</Action></Sequence><Action>avoid_water</Action></Selector><Action>return_to_base</Action></Sequence></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'move_closer_to_target': 'Action: Move the agent closer to the target by one step. Always returns True.', 'is_obstacle_in_path': 'Condition: Check if there is an obstacle in the path. Returns True if an obstacle is present, False otherwise.', 'search_for_target': 'Action: Search for the target within a specific range. Returns True when the target is found.', 'activate_sensor': 'Action: Activate a specific sensor. Always returns True.', 'get_sensor_data': 'Action: Obtain data from the activated sensor. Returns True when data is obtained.', 'process_sensor_data': 'Action: Process the sensor data and make a decision. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Move towards the target by avoiding obstacles and using sensors to make decisions.
Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Action>move_closer_to_target</Action><Condition>is_obstacle_in_path</Condition></Sequence><Sequence><Action>search_for_target</Action><Sequence><Action>activate_sensor</Action><Action>get_sensor_data</Action><Action>process_sensor_data</Action></Sequence></Sequence></Selector></Sequence></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'move_to_nest': 'Action: Move the agent towards the nest. Always returns True.', 'is_agent_near_nest': 'Condition: Check if the agent is near the nest. Returns True if the agent is within a specific range of distance from the nest, False otherwise.', 'gather_food': 'Action: Gather food items from the environment. Always returns True.', 'drop_food': 'Action: Drop all gathered food items at the nest. Always returns True.', 'huddle': 'Action: Huddle with other agents in the same area. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: Gather food from the environment, and huddle with other agents before returning to the nest and dropping the food.
7.// OUTPUT:
<BehaviorTree><Selector><Sequence><Selector><Sequence><Action>gather_food</Action><Action>huddle</Action></Sequence><Sequence><Action>move_to_nest</Action><Condition>is_agent_near_nest</Condition><Action>drop_food</Action></Sequence></Selector><Action>huddle</Action></Selector></BehaviorTree>###
4.// INSTRUCTIONS: Use only the following behaviors {'choose_task': 'Action: Randomly selects one of the available tasks. Always returns True.', 'execute_task': 'Action: Executes the chosen task. Always returns True.', 'is_task_complete': 'Condition: Checks if the chosen task has been completed. Returns True if the task is completed, False otherwise.', 'is_obstacle_ahead': 'Condition: Checks if there is an obstacle blocking the path ahead. Returns True if an obstacle is detected, False otherwise.'}
4.// USER COMMAND: Randomly choose and execute a task while ensuring that there are no obstacles blocking the path.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>choose_task</Action><Selector><Sequence><Condition>is_obstacle_ahead</Condition><Action>execute_task</Action></Sequence><Selector><Sequence><Action>execute_task</Action></Sequence><Action>move_forward</Action></Selector></Sequence></Selector></Sequence></BehaviorTree>
###
5.// INSTRUCTIONS: Use only the following behaviors {'set_destination': 'Action: Sets the destination for the robot to travel to. Always returns True.', 'is_reached_destination': 'Condition: Checks if the robot has reached its set destination. Returns True if the destination is reached, False otherwise.', 'pick_up_object': 'Action: Picks up the object at the current location. Always returns True.', 'drop_off_object': 'Action: Drops off the object at the designated location. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Pick up an object at the current location and travel to a designated drop off location.
5.// OUTPUT:
<BehaviorTree><Sequence><Action>pick_up_object</Action><Selector><Sequence><Action>set_destination</Action><Selector><Sequence><Condition>is_reached_destination</Condition><Action>drop_off_object</Action></Sequence></Selector></Sequence></Selector></Sequence></BehaviorTree>
###
6.// INSTRUCTIONS: Use only the following behaviors {'search_high_ground': 'Action: Search for high ground to gain strategic advantage. Always returns True.', 'attack_from_above': 'Action: Attack enemies from a higher vantage point. Always returns True.', 'check_surroundings': 'Action: Continuously monitor the surroundings for potential threats. Always returns True.', 'is_enemy_detected': 'Condition: Checks if an enemy is detected within the vicinity. Returns True if an enemy is detected, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Continuously monitor surroundings and search for high ground when an enemy is detected, then attack from above.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>check_surroundings</Action><Selector><Sequence><Condition>is_enemy_detected</Condition><Action>search_high_ground</Action><Action>attack_from_above</Action></Sequence></Selector></Sequence></Selector></BehaviorTree>
###
7.// INSTRUCTIONS: Use only the following behaviors {'move_forward': 'Action: Move the robot one step forward in the current direction. Always returns True.', 'is_terrain_safe': 'Condition: Checks if the terrain is safe to travel on. Returns True if the terrain is safe, False otherwise.', 'avoid_obstacle': 'Action: Avoid the obstacle by shifting the robot to a different position. Always returns True.', 'is_object_detected': 'Condition: Checks if an object is detected within the vicinity. Returns True if an object is detected, False otherwise.', 'store_object': 'Action: Store the object into the designated storage location. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: Move forward while avoiding any obstacles and storing any detected objects into designated storage.
7.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_terrain_safe</Condition><Action>move_forward</Action></Sequence><Selector><Sequence><Condition>is_object_detected</Condition><Action>avoid_obstacle</Action></Sequence><Action>store_object</Action></Selector></Selector></BehaviorTree>(Since the available behaviors already cover the required task, no additional text is necessary in the output)

###
3.// INSTRUCTIONS: Use only the following behaviors {'detect_other_robots': 'Condition: Check if there are any other robots within 10 units. Returns True if other robots are detected, False otherwise.', 'follow_leader': 'Action: Follow the designated leader of the swarm. Always returns True.', 'move_to_formation': 'Action: Move to a predetermined formation in relation to the leader. Always returns True.', 'check_distance_from_leader': 'Condition: Check the distance from the leader. Returns True if the distance is within formation specifications, False otherwise.', 'request_assistance': 'Action: Send a request for assistance signal. Always returns True.', 'is_assistance_offered': 'Condition: Check if assistance has been offered by other robots. Returns True if assistance has been offered, False otherwise.', 'assist_leader': 'Action: Follow the leader and assist in completing its task. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3.// USER COMMAND: Generate behavior tree for a robot to assist the leader in completing its task
3.// OUTPUT:
<BehaviorTree><Sequence><Condition>detect_other_robots</Condition><Sequence><Condition>is_assistance_offered</Condition><Selector><Action>request_assistance</Action><Action>follow_leader</Action><Selector><Condition>check_distance_from_leader</Condition><Selector><Action>follow_leader</Action><Action>move_to_formation</Action></Selector></Selector></Sequence></Sequence></BehaviorTree>

###
4.// INSTRUCTIONS: Use only the following behaviors {'explore_area': 'Action: Explore the designated area using a predefined path. Always returns True.', 'detect_food_sources': 'Action: Use sensors to detect nearby food sources. Always returns True.', 'collect_food': 'Action: Collect food from detected sources. Always returns True.', 'is_food_collected': 'Condition: Check if food has been collected. Returns True if food has been collected, False otherwise.', 'is_area_explored': 'Condition: Check if the designated area has been fully explored. Returns True if the area is explored, False otherwise.', 'return_to_nest': 'Action: Return to the nest by following the same path taken during exploration. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Generate behavior tree for a robot to explore a designated area, collect food, and return to the nest
4.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_area_explored</Condition><Action>detect_food_sources</Action><Selector><Action>collect_food</Action><Condition>is_food_collected</Condition><Selector><Action>return_to_nest</Action><Action>explore_area</Action></Selector></Selector></Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'detect_enemy_base': 'Condition: Check if the enemy base is visible from the current position. Returns True if the base is detected, False otherwise.', 'approach_enemy_base': 'Action: Move towards the enemy base while avoiding obstacles. Always returns True.', 'scan_for_defenses': 'Action: Use sensors to scan for any nearby defenses. Always returns True.', 'attack_tower': 'Action: Use equipped weapons to attack enemy defenses. Always returns True.', 'is_stockpile_empty': 'Condition: Check if the robot's stockpile of weapons is empty. Returns True if the stockpile is empty, False otherwise.', 'return_to_home_base': 'Action: Return to the home base to refill weapons and restock supplies. Always returns True.', 'is_in_safe_zone': 'Condition: Check if the robot is within the safe zone at the home base. Returns True if the robot is in the safe zone, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Generate behavior tree for a robot to locate and attack the enemy base
5.// OUTPUT:
<BehaviorTree><Sequence><Condition>detect_enemy_base</Condition><Selector><Sequence><Action>approach_enemy_base</Action><Action>scan_for_defenses</Action><Selector><Action>attack_tower</Action><Condition>is_stockpile_empty</Condition></Selector></Sequence><Action>return_to_home_base</Action><Selector><Condition>is_in_safe_zone</Condition><Action>approach_enemy_base</Action></Selector></Selector></Sequence></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'go_to_starting_point': 'Action: Return to the starting point of the maze. Always returns True.', 'detect_walls': 'Action: Use sensors to detect walls and other obstacles. Always returns True.', 'follow_right_wall': 'Action: Navigate through the maze by always following the right wall. Always returns True.', 'follow_left_wall': 'Action: Navigate through the maze by always following the left wall. Always returns True.', 'detect_end_point': 'Condition: Check if the end point of the maze has been reached. Returns True if the end point is reached, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Generate behavior tree for a robot to navigate through a maze
6.// OUTPUT:
<BehaviorTree><Sequence><Condition>detect_walls</Condition><Selector><Condition>detect_end_point</Condition><Action>go_to_starting_point</Action><Selector><Action>follow_right_wall</Action><Action>follow_left_wall</Action></Selector></Selector></Sequence></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'detect_people': 'Condition: Check if there are any people in the vicinity. Returns True if people are detected, False otherwise.', 'follow_person': 'Action: Follow the detected person while avoiding obstacles. Always returns True.', 'call_for_help': 'Action: Use a loudspeaker to call for help from nearby people. Always returns True.', 'pick_up_supplies': 'Action: Use a robotic arm to pick up supplies from a designated location. Always returns True.', 'deliver_supplies': 'Action: Deliver the collected supplies to a specified location. Always returns True.', 'check_battery_level': 'Condition: Check the battery level of the robot. Returns True if the battery level is above 25%, False otherwise.', 'recharge': 'Action: Return to the charging station to recharge the battery. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: Generate behavior tree for a robot to assist people in need and deliver supplies
7.// OUTPUT:
<BehaviorTree<br>

###
4.// INSTRUCTIONS: Use only the following behaviors {'detect_object': 'Action: Detect any objects within the robot's sensor range. Always returns True.', 'approach_object': 'Action: Move towards the closest detected object. Always returns True.', 'pick_up_object': 'Action: Pick up the object once it has been reached. Always returns True.', 'drop_object': 'Action: Drop the currently held object. Always returns True.', 'is_object_in_reach': 'Condition: Check if the object is within the robot's reach for picking up or dropping. Returns True if the object is within reach, False otherwise.', 'is_object_held': 'Condition: Check if the robot is currently holding an object. Returns True if an object is held, False otherwise.', 'is_successful_drop': 'Condition: Check if the object has been successfully dropped. Returns True if the object has been dropped, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Generate behavior tree to pick up and deliver an item to a specified destination
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Selector><Sequence><Condition>is_object_in_reach</Condition><Action>pick_up_object</Action></Sequence><Sequence><Condition>is_successful_drop</Condition><Condition>is_object_held</Condition><Condition>is_object_in_reach</Condition><Action>drop_object</Action><Action>agent_movement_freeze</Action></Sequence></Selector><Sequence><Condition>is_object_held</Condition><Action>approach_object</Action></Sequence></Sequence></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'follow_target': 'Action: Follow the designated target. Always returns True.', 'monitor_surroundings': 'Action: Monitor the surroundings for potential threats or changes. Always returns True.', 'send_alert': 'Action: Send an alert signal to other robots. Always returns True.', 'retrieve_data': 'Action: Retrieve data information from a designated source. Always returns True.', 'is_target_detected': 'Condition: Check if the designated target is detected. Returns True if the target is detected, False otherwise.', 'is_threat_detected': 'Condition: Check for any potential threats in the surroundings. Returns True if a threat is detected, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Generate behavior tree for a group of robots to follow and protect a designated target while retrieving important data.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_target_detected</Condition><Action>follow_target</Action></Sequence><Sequence><Condition>is_threat_detected</Condition><Action>monitor_surroundings</Action><Action>send_alert</Action><Action>agent_movement_freeze</Action></Sequence><Selector><Sequence><Condition>is_target_detected</Condition><Action>retrieve_data</Action><Action>agent_movement_freeze</Action></Sequence><Action>wander</Action></Selector></Sequence></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'request_permission': 'Action: Initiate a request for permission from a designated authority. Always returns True.', 'communicate_with_human': 'Action: Communicate and interact with a designated human user. Always returns True.', 'search_for_information': 'Action: Search for and collect relevant information from the environment. Always returns True.', 'analyze_data': 'Action: Analyze collected data for patterns and insights. Always returns True.', 'is_permission_granted': 'Condition: Check if the requested permission has been granted. Returns True if the permission is granted, False otherwise.', 'is_new_data_found': 'Condition: Check if new data has been collected from the environment. Returns True if new data is found, False otherwise.', 'is_data_analyzed': 'Condition: Check if the collected data has been analyzed and insights have been obtained. Returns True if data has been analyzed, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Generate behavior tree for a robot to collect and analyze data while communicating with a human user and obtaining necessary permissions.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_new_data_found</Condition><Action>search_for_information</Action><Selector><Sequence><Condition>is_data_analyzed</Condition><Action>communicate_with_human</Action><Action>request_permission</Action></Sequence><Action>analyze_data</Action></Selector></Sequence><Action>wander</Action></Selector></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'perform_task': 'Action: Perform a specific task based on predefined instructions. Always returns True.', 'check_status': 'Action: Check the status of the robot and its surroundings. Always returns True.', 'navigate_to_location': 'Action: Navigate to a designated location. Always returns True.', 'collect_sample': 'Action: Collect a sample from the environment. Always return True.', 'is_task_completed': 'Condition: Check if the designated task has been completed. Returns True if the task is completed, False otherwise.', 'is_location_reached': 'Condition: Check if the designated location has been reached. Returns True if the location is reached, False otherwise.', 'is_sample_collected': 'Condition: Check if a sample has been successfully collected. Returns True if a sample has been collected, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: Generate behavior tree for a robot to navigate to a specific location, collect a sample, and perform a task at that location.
7.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>is_task_completed</Condition><Action>perform_task</Action><Action>agent_movement_freeze</Action></Sequence><Sequence><Condition>is_location_reached</Condition><Action>collect_sample</Action><Action>agent_movement_freeze</Action></Sequence></Selector><Sequence><Action>check_status</Action><Action>navigate_to_location</Action></Sequence></Sequence><Action>update_map</Action></BehaviorTree>Where greater_than_enemy_threat is a boolean condition that checks if the threat level is greater than the resource urgency score. 

###
4.// INSTRUCTIONS: Use only the following behaviors {'find_path_to_nest': 'Action: Find the shortest path to the nest. Returns True when the path is found, False otherwise.', 'follow_path': 'Action: Follow the given path. Returns True once the end of the path is reached.', 'search_for_food': 'Action: Search for food sources. Returns True when food is found, False otherwise.', 'is_food_found': 'Condition: Check if food is found. Returns True if food is detected within 10 units, False otherwise.', 'is_nest_reached': 'Condition: Check if the nest is reached. Returns True if the path to nest is followed and nest is reached, False otherwise.', 'provide_food_to_nest': 'Action: Transfer food to the nest. Returns True once food is successfully deposited.', 'task_completed': 'Action: Signal task completion by bringing food to the nest and freezing movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Guide the robot to find the shortest path to the nest and deposit food once reached.
4.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Action>find_path_to_nest</Action> <Condition>is_nest_reached</Condition> <Action>provide_food_to_nest</Action> <Action>task_completed</Action> </Sequence> <Action>follow_path</Action> </Selector> <Selector> <Sequence> <Action>search_for_food</Action> <Condition>is_food_found</Condition> <Action>provide_food_to_nest</Action> <Action>task_completed</Action> </Sequence> <Action>wander</Action> </Selector> </Sequence> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'collect_resource': 'Action: Collect the nearest resource. Returns True once the resource is successfully collected.', 'return_to_base': 'Action: Return to the base. Returns True when the base is reached.', 'is_resource_available': 'Condition: Check if there is a resource available nearby. Returns True if a resource is within 10 units, False otherwise.', 'is_base_reached': 'Condition: Check if the robot has reached the base. Returns True when the base is within 5 units of distance.', 'build_structure': 'Action: Build a designated structure. Returns True once the structure is successfully built.', 'is_structure_built': 'Condition: Check if the designated structure is built. Returns True if the structure is complete, False otherwise.', 'task_completed': 'Action: Signal task completion by returning to base and freezing movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Collect the nearest resource, return to base, and then build a designated structure.
5.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Action>collect_resource</Action> <Condition>is_base_reached</Condition> <Action>return_to_base</Action> <Sequence> <Condition>is_structure_built</Condition> <Action>task_completed</Action> </Sequence> </Sequence> <Selector> <Sequence> <Action>collect_resource</Action> <Condition>is_resource_available</Condition> <Action>is_structure_built</Action> <Action>return_to_base</Action> <Action>build_structure</Action> <Action>task_completed</Action> </Sequence> <Action>wander</Action> </Selector> </Selector> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'explore': 'Action: Explore new areas. Always returns True.', 'gather_information': 'Action: Gather information about the environment. Returns True once information is gathered.', 'analyze_data': 'Action: Analyze the gathered data. Returns True once data is analyzed.', 'make_decision': 'Action: Make a decision based on the analyzed data. Returns True once a decision is made.', 'perform_task': 'Action: Perform the decided task. Returns True once the task is completed.', 'is_task_completed': 'Condition: Check if the task is completed. Returns True if the task is completed, False otherwise.', 'is_data_gathered': 'Condition: Check if data is gathered. Returns True if data is successfully gathered, False otherwise.', 'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True."}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Explore new areas, gather information, analyze data, make a decision, and perform the decided task.
6.// OUTPUT:
<BehaviorTree> <Sequence> <Action>agent_movement_freeze</Action> <Action>explore</Action> <Selector> <Sequence> <Action>gather_information</Action> <Condition>is_data_gathered</Condition> <Action>analyze_data</Action> <Condition>is_task_completed</Condition> <Action>perform_task</Action> </Sequence> <Action>make_decision</Action> </Selector> <Action>task_completed</Action> </Sequence> </BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'is_swarm_in_position': 'Condition: Check if the swarm is in the designated position. Returns True if all robots in the swarm are within 10 units of the designated position, False otherwise.', 'form_square': 'Action: Form a square formation with the swarm robots. Returns True when the square is formed.', 'move_to_position': 'Action: Move to the designated position. Returns True when the position is reached.', 'search_and_destroy': 'Action: Search for and destroy enemies. Returns True when an enemy is destroyed.', 'is_enemy_detected': 'Condition: Check if an enemy is detected. Returns True if an enemy is detected within 20 units, False otherwise.', 'disperse': 'Action: Disperse from the designated position. Returns True when all robots are dispersed from the position.', 'task_completed': 'Action: Signal task completion by returning to base and freezing movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: Form a square formation at the designated position, move to a new position, search and destroy enemies, and then disperse from the designated position.
7.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>is_enemy_detected</Condition> <Action>form_square</Action> <Condition>is_swarm_in_position</Condition> <Action>move_to_position</Action> <Action>search_and_destroy</Action> <Condition>is_enemy_detected</Condition> 
###
4.// INSTRUCTIONS: Use only the following behaviors {'collect_resource': 'Action: Collect resource at current location. Returns True if resource is successfully collected, False otherwise.', 'calculate_energy_consumption': 'Action: Calculate the energy consumption for the current task. Always returns True.', 'reserve_resource': 'Action: Reserve the collected resource and keep it for later use. Returns True if resource is successfully reserved, False otherwise.', 'return_to_home': 'Action: Return to home base. Always returns True.', 'has_enough_resources': 'Condition: Check if there are enough resources collected. Returns True if enough resources are available, False otherwise.', 'has_enough_energy': 'Condition: Check if the robot has enough energy to complete the task. Returns True if energy level is above a threshold, False otherwise.'}, to construct behavior tree in XML format to the following command.If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Collect resources from the environment. Return to home base only when enough resources are collected and energy levels are sufficient.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>has_enough_resources</Condition><Condition>has_enough_energy</Condition><Action>return_to_home</Action></Sequence><Action>collect_resource</Action><Action>calculate_energy_consumption</Action><Action>reserve_resource</Action></Selector></BehaviorTree>
 
###
5.// INSTRUCTIONS: Use only the following behaviors {'detect_intruder': 'Action: Detect any intruders in the area. Returns True if intruder is detected, False otherwise.', 'act_on_intruder': 'Action: Take appropriate action on the detected intruder. Always returns True.', 'increase_security': 'Action: Increase the security of the area. Returns True if security is successfully increased, False otherwise.', 'monitor_area': 'Action: Continuously monitor the designated area for any signs of intruders. Always returns True.', 'has_intruder_been_handled': 'Condition: Check if the intruder has been dealt with. Returns True if the intruder has been handled, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Monitor the designated area for any intruders. If an intruder is detected, take appropriate action and increase security.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>monitor_area</Action><Trigger>detect_intruder</Trigger><Sequence><Action>act_on_intruder</Action><Sequence><Condition>has_intruder_been_handled</Condition><Action>increase_security</Action></Sequence></Sequence></Sequence></BehaviorTree>
 
###
6.//INSTRUCTIONS: Use only the following behaviors {'search_for_food': 'Action: Search for food resources in the environment. Returns True if food is found, False otherwise.', 'gather_food': 'Action: Gather food resources from the environment. Returns True if food is successfully gathered, False otherwise.', 'eat_food': 'Action: Consume food resources to replenish energy levels. Always returns True.', 'has_low_energy': "Condition: Check if the agent's energy levels have fallen below a threshold. Returns True if energy is low, False otherwise.", 'has_food': 'Condition: Check if the agent has any food resources. Returns True if food is available, False otherwise.'}, to construct behavior tree in XML format to the following command.If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Search for food resources. Gather food if found, and consume them if energy levels are low.
6.// OUTPUT:
<BehaviorTree><Sequence><Action>search_for_food</Action><Sequence><Condition>has_food</Condition><Sequence><Action>gather_food</Action><Trigger>has_low_energy</Trigger><Action>eat_food</Action></Sequence></Sequence></Sequence></BehaviorTree>
 
###
 7.// INSTRUCTIONS: Use only the following behaviors {'explore_area': 'Action: Explore the designated area. Returns True if the area is fully explored, False otherwise.', 'map_area': 'Action: Map the explored area and update internal map. Always returns True.', 'search_for_targets': 'Action: Search for targets within the area. Returns True if targets are found, False otherwise.', 'collect_targets': 'Action: Collect the targets found. Returns True if targets are successfully collected, False otherwise.', 'has_all_targets': 'Condition: Check if all targets have been collected. Returns True if all targets are collected, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: Explore the designated area, map it, and collect targets found.
7.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>explore_area</Action><Trigger>map_area</Trigger></Sequence><Sequence><Action>search_for_targets</Action><Condition>has_all_targets</Condition><Action>collect_targets</Action></Sequence></Selector></BehaviorTree>
###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'circle_pattern': 'Action: Move in a circular pattern around a designated point. Returns True when the circle is completed.', 'wait': 'Action: Stay in place and do nothing for a specified amount of time. Returns True once the time has passed.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Explore the outer perimeter of the environment, while avoiding obstacles and then form a circle at the center of the environment' Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>is_path_clear</Condition> <Action>continue_movement_agent</Action> </Sequence> <Sequence> <Condition>is_obstacle_detected</Condition> <Action>avoid_obstacle</Action> </Sequence> <Action>circle_pattern</Action> </Selector> <Action>wander</Action> </Sequence> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'follow_target': 'Action: Move towards the target. Returns True once the target is reached.', 'wait': 'Action: Stay in place and do nothing for a specified amount of time. Returns True once the time has passed.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Follow the target while avoiding obstacles'Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>is_target_detected</Condition> <Action>follow_target</Action> </Sequence> <Sequence> <Condition>is_obstacle_detected</Condition> <Action>avoid_obstacle</Action> </Sequence> <Action>wait</Action> </Selector> <Action>continue_movement_agent</Action> </Sequence> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_grid': 'Action: Form a grid pattern, with each agent equally spaced. Returns True when grid is completed.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_grid_formed': 'Condition: Check if a grid pattern is formed. Returns True if the agents are equally spaced, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'move_forward': 'Action: Move the robot one step forward in the current direction. Always returns True.', 'move_left': 'Action: Move the robot one step to the left in the current direction. Always returns True.', 'move_right': 'Action: Move the robot one step to the right in the current direction. Always returns True.', 'move_backwards': 'Action: Move the robot one step backwards in the current direction. Always returns True.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Form a grid pattern and change color to green every time a grid is completed' Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>is_grid_formed</Condition> <Action>change_color_to_green</Action> </Sequence> <Sequence> <Condition>is_path_clear</Condition> <Action>continue_movement_agent</Action> </ 
###
4.// INSTRUCTIONS: Use only the following behaviors {'find_neighbors': 'Action: Use sensors to locate and identify neighboring robots. Always returns True.', 'communicate': 'Action: Send a message to neighboring robots for coordination. Always returns True.', 'avoid_collision': 'Action: Take evasive action to avoid colliding with other robots. Always returns True.', 'is_neighbor_in_need': 'Condition: Check if a neighboring robot has sent a request for help. Returns True if a request is received, False otherwise.', 'is_communication_successful': 'Condition: Check if the message sent to the neighboring robot is successfully received. Returns True if the communication is successful, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Generate behavior tree for a swarm of robots to coordinate and help each other in a disaster response scenario.
4.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_neighbor_in_need</Condition><Action>communicate</Action><Sequence><Condition>is_communication_successful</Condition><Action>assist_neighbor</Action></Sequence></Sequence><Sequence><Action>find_neighbors</Action><Selector><Sequence><Condition>is_neighbor_in_need</Condition><Action>avoid_collision</Action></Sequence><Action>move_forward</Action></Selector></Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'circle_formation': 'Action: Move into a circular formation with other robots. Always returns True.', 'move_as_one': 'Action: Move together as a cohesive unit while maintaining the circular formation. Always returns True.', 'attack_enemy': 'Action: Attack and eliminate any enemy robots within close range. Returns True if enemy is eliminated, False otherwise.', 'is_enemy_in_range': 'Condition: Check if there are any enemy robots within a certain range. Returns True if an enemy is within range, False otherwise.', 'is_defense_successful': 'Condition: Check if the defense mechanism has successfully neutralized any enemy attacks. Returns True if the defense is successful, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Generate behavior tree to defend against enemy attacks while maintaining a circular formation and attacking when necessary.
5.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_enemy_in_range</Condition><Selector><Sequence><Action>circle_formation</Action><Action>move_as_one</Action><Selector><Sequence><Condition>is_defense_successful</Condition><Action>move_to_next_area</Action></Sequence><Action>attack_enemy</Action></Selector></Sequence><Action>move_to_next_area</Action></Selector></Sequence></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'follow_leader': 'Action: Follow the designated leader robot. Always returns True.', 'is_leader_out_of_sight': 'Condition: Check if the leader robot is still in sight. Returns True if the leader is out of sight, False otherwise.', 'regroup': 'Action: Regroup with other robots if the leader is lost. Always returns True.', 'move_to_next_checkpoint': 'Action: Move to the next designated checkpoint while following the leader. Always returns True.', 'is_checkpoint_reached': 'Condition: Check if the next designated checkpoint has been reached. Returns True if the checkpoint is reached, False otherwise.', 'report_status': 'Action: Send a status report to the leader. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Generate behavior tree for a swarm of robots to follow a leader and reach designated checkpoints.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_leader_out_of_sight</Condition><Action>regroup</Action><Action>follow_leader</Action></Sequence><Selector><Sequence><Condition>is_checkpoint_reached</Condition><Action>report_status</Action></Sequence><Action>move_to_next_checkpoint</Action></Selector></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'circle_formation': 'Action: Move into a circular formation with other robots. Always returns True.', 'reposition': 'Action: Reposition and adjust the formation based on sensor readings. Always returns True.', 'communicate': 'Action: Send location and targeting information to other robots within the formation. Always returns True.', 'is_enemy_detected': 'Condition: Check if any enemies have been detected within a certain range. Returns True if enemies are detected, False otherwise.', 'is_attack_successful': 'Condition: Check if the attack on the enemy is successful. Returns True if the enemy is eliminated, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: Generate behavior tree for a swarm of robots to maintain a circular formation and collaborate to attack any detected enemies.
7.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_enemy_detected</Condition><Selector><Sequence><Action>circle_formation</Action><Action>communicate</Action><Selector><Sequence><Condition>is_attack_successful</Condition><Action>move_to_next_area</Action></Sequence><Action>attack_enemy</Action></Selector></Sequence><Action>move_to_next_area</Action></Selector></Sequence></BehaviorTree>
###
4.// INSTRUCTIONS: Use only the following behaviors {'on_command_received': "Event: Triggers when a command is received from a human operator. Returns True if a command is received, False otherwise.", 'analyze_environment': 'Action: Analyze the current environment using various sensors. Returns True if analysis is completed, False otherwise.', 'is_survivable': 'Condition: Check if the current environment is survivable for the robot. Returns True if the environment is survivable, False otherwise.', 'is_command_complete': 'Condition: Check if the received command has been completed. Returns True if the command is complete, False otherwise.', 'navigate_to_target': 'Action: Navigate to a designated target location. Returns True if the target location is reached, False otherwise.', 'collect_data': 'Action: Collect data from the environment for further analysis. Returns True if data is collected, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Collect data, analyze the environment and navigate to target location.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>collect_data</Action><Action>analyze_environment</Action><Trigger>on_command_received</Trigger><Sequence><Condition>is_survivable</Condition><Selector><Condition>is_command_complete</Condition><Action>navigate_to_target</Action></Selector></Sequence></Sequence></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'stop': 'Action: Stop all movement and action. Always returns True.', 'detect_obstacles': 'Action: Detect obstacles using sensors. Always returns True.', 'wait_for_timeout': 'Action: Wait for a specified timeout period. Always returns True.', 'escape_obstacles': 'Action: Navigate to avoid obstacles. Always returns True.', 'track_target': 'Action: Use tracking sensors to locate and follow a designated target. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Avoid any obstacles and track a designated target.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>detect_obstacles</Action><Condition>is_obstacle_detected</Condition><Sequence><Action>escape_obstacles</Action><Action>track_target</Action></Sequence></Sequence></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'find_food_source': 'Subtree node: Represents a behavior tree for finding a source of food.', 'consume_food': 'Action: Consume the food source. Always returns True.', 'always_true': 'Condition: Always returns True.', 'approach_object': 'Action: Approach a designated object or location. Always returns True.', 'is_hungry': 'Condition: Check if the agent is hungry. Returns True if the agent is hungry, False otherwise.', 'check_scan_attempts': 'Condition: Check the number of times the agent has attempted to find a food source. Returns True if the scan attempts are less than 3, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Find and consume a source of food.
6.// OUTPUT:
<BehaviorTree> <Selector> <Condition>always_true</Condition> <Sequence> <Trigger>is_hungry</Trigger> <Sequence> <Condition>check_scan_attempts</Condition> <Sequence> <Action>find_food_source</Action> <Action>approach_object</Action> </Sequence> </Sequence> <Action>consume_food</Action> </Sequence> </Selector> </BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'load_material': 'Action: Load a specified material from the environment. Returns True if material is successfully loaded, False otherwise.', 'drop_material': 'Action: Drop the material at a designated location. Returns True if material is successfully dropped, False otherwise.', 'is_task_complete': 'Condition: Check if the task is complete. Returns True if the material was successfully loaded and dropped, False otherwise.', 'build_structure': 'Action: Use the loaded material to build a designated structure. Returns True if structure is successfully built, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: Load a material, build a designated structure, and drop the material at a specific location.
7.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>load_material</Action><Action>build_structure</Action><Condition>is_task_complete</Condition><Action>drop_material</Action></Sequence></Selector></BehaviorTree> 
###
3.// INSTRUCTIONS: Use only the following behaviors {'explore': 'Action: Wander around and collect data. Always returns True.', 'build_map': 'Action: Build a map of the environment. Always returns True.', 'transfer_data': 'Action: Transfer collected data to a central core. Always returns True.', 'is_map_complete': 'Condition: Check if the map is complete. Returns True if all data points have been collected, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3.// USER COMMAND: Utilize swarm to explore and map the entire environment
OUTPUT:
<BehaviorTree> <Sequence> <Action>explore</Action> <Action>build_map</Action> <Selector> <Sequence> <Condition>is_map_complete</Condition> <Action>transfer_data</Action> </Sequence> <Action>task_completed</Action> </Selector> </Sequence> </BehaviorTree>

###
4.// INSTRUCTIONS: Use only the following behaviors {'collect_object': 'Action: Pick up the object. Always returns True.', 'drop_object': 'Action: Drops the held object. Always returns True.', 'identify_target': 'Subtree node: Represents a behavior tree for identifying and tracking a specific target.', 'reach_target': 'Action: Move towards the target. Always returns True.', 'is_target_reached': 'Condition: Checks if the target is within reach. Returns True if the target is within reach, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Utilize swarm robots to identify and pick up a specific object and deliver it to a designated location.
OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Action>identify_target</Action> <Action>collect_object</Action> <Action>reach_target</Action> <Condition>is_target_reached</Condition> </Sequence> <Sequence> <Action>drop_object</Action> <Action>task_completed</Action> </Sequence> </Selector> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'hunt': 'Action: Search for and track a specific target. Always returns True.', 'attack_target': 'Action: Attack the target if within range. Always returns True.', 'evade': 'Action: Maneuver to escape if under attack. Returns True if successfully evaded, False otherwise.', 'is_target_detected': 'Condition: Check if target is detected. Returns True if target is detected within range, False otherwise.', 'is_target_in_attack_range': 'Condition: Check if target is within attack range. Returns True if target is within attack range, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Engage in a hunt and attack strategy to eliminate a specific target within the environment.
OUTPUT:
<BehaviorTree> <Sequence> <Action>hunt</Action> <Selector> <Sequence> <Condition>is_target_detected</Condition> <Action>attack_target</Action> </Sequence> <Sequence> <Condition>is_target_in_attack_range</Condition> <Action>evade</Action> </Sequence> </Selector> </Sequence> </BehaviorTree>

6.// INSTRUCTIONS: Use only the following behaviors {'travel_to_destination': 'Action: Move towards the designated destination. Returns True if destination is reached, False otherwise.', 'avoid_collision': 'Action: Take appropriate maneuvers to avoid collisions. Always returns True.', 'generate_signal': 'Action: Generate a signal to other swarm robots for coordination. Always returns True.', 'is_destination_reached': 'Condition: Check if the designated destination has been reached. Returns True if destination is reached, False otherwise.', 'is_obstacle_nearby': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Coordinate with other swarm robots to successfully reach a designated destination while avoiding obstacles and collisions.
OUTPUT:
<BehaviorTree> <Sequence> <Action>travel_to_destination</Action> <Selector> <Sequence> <Condition>is_obstacle_nearby</Condition> <Action>avoid_collision</Action> </Sequence> <Sequence> <Action>generate_signal</Action> </Sequence> </Selector> <Condition>is_destination_reached</Condition> </Sequence> </BehaviorTree>

7.// INSTRUCTIONS: Use only the following behaviors {'collect_resource': 'Action: Collect a resource within the vicinity. Always returns True.', 'deposit_resource': 'Action: Deposit the collected resource at a designated location. Always returns True.', 'call_for_help': 'Action: Call for help from other robots if under attack. Always returns True.', 'is_resource_depleted': 'Condition: Checks if the resource is depleted. Returns True if resource is depleted, False otherwise.', 'is_under_attack': 'Condition: Checks if the robot is under attack. Returns True if under attack, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: Utilize swarm robots to gather and deposit resources while ensuring safety by calling for help if under attack.
OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>is_resource_depleted</Condition> <Action>collect_resource</Action> <Action>deposit_resource</Action> <Selector> <Sequence> <Condition>is_under_attack</Condition> <Action>call_for_help</Action> </Sequence> <Action>task_completed</Action> </Selector> </Sequence> </Selector> </BehaviorTree>###
3.// INSTRUCTIONS: Use only the following behaviors {'move_to_next_waypoint': 'Action: Move the robot to the next waypoint in the patrol route. Always returns True.', 'scan_for_intruders': 'Action: Scan the current area for any intruders using sensors. Returns True if an intruder is detected, False otherwise.', 'is_patrol_complete': 'Condition: Check if the robot has completed patrolling the entire area. Returns True if the patrol is complete, False otherwise.', 'wait': 'Action: Wait for 5 seconds before continuing. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3.// USER COMMAND: generate behavior tree to 'Patrol an area, if an intruder is detected, report and wait for 5 seconds before continuing'
3.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_patrol_complete</Condition><Selector><Sequence><Action>move_to_next_waypoint</Action><Action>scan_for_intruders</Action><Selector><Action>report_intruder</Action><Action>wait</Action></Selector></Sequence></Selector><Action>wait</Action></Sequence></BehaviorTree>

###
4.// INSTRUCTIONS: Use only the following behaviors {'move_to_next_point': 'Action: Move the robot to the next specified point. Always returns True.', 'pick_up_object': 'Action: Pick up the specified object. Returns True if object is successfully picked up, False otherwise.', 'place_object': 'Action: Place the held object at the specified location. Returns True if object is successfully placed, False otherwise.', 'is_object_held': 'Condition: Check if the robot is currently holding an object. Returns True if an object is held, False otherwise.', 'is_object_at_destination': 'Condition: Check if the held object is at the designated location. Returns True if object is at destination, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'target_reached': 'Condition: Check if the robot has reached the target location. Returns True if the target is reached, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Pick up an object, move to a specific location, place the object, and return to starting position'.
4.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_object_held</Condition><Selector><Sequence><Action>move_to_next_point</Action><Action>place_object</Action></Sequence><Sequence><Action>move_to_next_point</Action><Action>pick_up_object</Action></Sequence></Selector><Condition>target_reached</Condition><Action>task_completed</Action></Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'move_to_target': 'Action: Move the robot to the target location. Always returns True.', 'pickup_food': 'Action: Pick up food at the specified location. Returns True if food is successfully picked up, False otherwise.', 'eat_food': 'Action: Eat the held food. Returns True if food is successfully consumed, False otherwise.', 'is_food_held': 'Condition: Check if the robot is currently holding food. Returns True if food is held, False otherwise.', 'is_food_nearby': 'Condition: Check for food within a certain radius. Returns True if food is detected, False otherwise.', 'has_hunger_decreased': 'Condition: Check if the robot's hunger level has decreased after eating. Returns True if hunger has decreased, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Forage for food, pick up food, and eat until hunger decreases'.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_food_nearby</Condition><Selector><Sequence><Action>move_to_target</Action><Action>pickup_food</Action></Sequence><Sequence><Action>move_to_target</Action><Action>eat_food</Action></Sequence></Selector><Condition>has_hunger_decreased</Condition><Action>task_completed</Action></Sequence></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'move_to_next_location': 'Action: Move the robot to the next designated location. Always returns True.', 'collect_sample': 'Action: Collect a sample at the current location. Returns True if a sample is successfully collected, False otherwise.', 'analyze_sample': 'Action: Analyze the collected sample. Returns True if the sample is successfully analyzed, False otherwise', 'is_sample_collected': 'Condition: Check if a sample has been successfully collected. Returns True if a sample is collected, False otherwise.', 'is_sample_analyzed': 'Condition: Check if the collected sample has been successfully analyzed. Returns True if the sample is analyzed, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_target_reached': 'Condition: Check if the robot has reached the target location. Returns True if the target is reached, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Collect a sample, move to a designated location, and analyze the sample'
6.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_sample_collected</Condition><Selector><Sequence><Action>move_to_next_location</Action><Action>collect_sample</Action></Sequence><Sequence><Action>move_to_next_location</Action><Action>analyze_sample</Action></Sequence></Selector><Condition>is_sample_analyzed</Condition><Action>task_completed</Action></Sequence></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'move_to_target': 'Action: Move the robot towards the target location. Always returns True.', 'perform_task': 'Action: Perform the designated task. Returns True if the task is successfully completed, False otherwise.', 'wait_minutes': 'Action: Wait for a designated number of minutes. Always returns True.', 'check_battery_level': 'Condition: Check the robot's battery level. Returns True if battery level is above 50%, False otherwise.', 'is_target_reached': 'Condition: Check if the robot has reached the target location. Returns True if the target is reached, False otherwise.', 'is_task_completed': 'Condition: Check if the designated task is successfully completed. Returns True if the task is completed, False otherwise.',###
3.// INSTRUCTIONS: Use only the following behaviors {'move_towards_light': 'Action: Move towards the nearest source of light. Always returns True.', 'avoid_obstacles': 'Action: Avoid detected obstacles while moving towards light. Always returns True.', 'is_light_detected': 'Condition: Check if light source is detected within 50 units. Returns True if a light source is within 50 units of distance, False otherwise.', 'is_path_blocked': 'Condition: Check if the path ahead is blocked by an obstacle. Returns True if an obstacle is detected, False otherwise.', 'recharge_batteries': 'Action: Dock with a charging station to recharge the robot's batteries. Always returns True.', 'low_battery': 'Condition: Check if the robot's battery level is below 20%. Returns True if the battery level is below 20%, False otherwise.', 'wander': 'Action: Move randomly within the environment. Always returns True.', 'move_forward': 'Action: Move the robot one step forward in the current direction. Always returns True.', 'turn_left': 'Action: Turn the robot 90 degrees to the left. Always returns True.', 'turn_right': 'Action: Turn the robot 90 degrees to the right. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3.// USER COMMAND: create a behavior tree to 'Search for a light source and recharge batteries' Output only the XML behavior tree without extra text.
3.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>low_battery</Condition><Action>recharge_batteries</Action></Sequence><Sequence><Condition>is_light_detected</Condition><Action>move_towards_light</Action></Sequence><Sequence><Condition>is_path_blocked</Condition><Action>turn_left</Action></Sequence><Action>wander</Action></Selector></BehaviorTree>

###
4.// INSTRUCTIONS: Use only the following behaviors {'follow_target': 'Action: Move towards and follow the designated target. Always returns True.', 'stop_following': 'Action: Stop following the target and resume normal behavior. Always returns True.', 'is_target_reachable': 'Condition: Check if the designated target is within reach. Returns True if the target is within reach, False otherwise.', 'is_target_lost': 'Condition: Check if the target has been lost. Returns True if the target is no longer in sight, False otherwise.', 'pick_up_item': 'Action: Pick up an item at the designated location. Always returns True.', 'drop_item': 'Action: Drop the carried item at the designated location. Always returns True.', 'is_item_carried': 'Condition: Check if the robot is currently carrying an item. Returns True if an item is carried, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: create a behavior tree to 'Follow and retrieve an important item while avoiding obstacles.' Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_target_reachable</Condition><Action>follow_target</Action><Selector><Sequence><Condition>is_item_carried</Condition><Action>drop_item</Action></Sequence><Sequence><Condition>is_target_lost</Condition><Action>stop_following</Action><Action>wander</Action></Sequence></Selector></Sequence><Sequence><Condition>is_obstacle_ahead</Condition><Action>avoid_obstacles</Action></Sequence><Action>wander</Action></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'form_circle': 'Action: Form a circle with the other robots. Always returns True.', 'move_forward': 'Action: Move one step forward within the circle. Always returns True.', 'scatter': 'Action: Move randomly and disperse from the current formation. Always returns True.', 'is_obstacle_detected': 'Condition: Check if there is an obstacle blocking the path ahead for the formation. Returns True if an obstacle is detected, False otherwise.', 'is_circle_formed': 'Condition: Check if a circle formation has been successfully formed. Returns True if a circle is formed, False otherwise.', 'rejoin_formation': 'Action: Rejoin the circle formation after dispersing. Always returns True.', 'is_formation_broken': 'Condition: Check if the circle formation has been disrupted or broken. Returns True if the formation is broken, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: create a behavior tree to 'Form a circle formation and navigate obstacles while maintaining formation.' Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_circle_formed</Condition><Selector><Sequence><Condition>is_obstacle_detected</Condition><Action>scatter</Action></Sequence><Sequence><Condition>is_formation_broken</Condition><Action>rejoin_formation</Action></Sequence><Action>form_circle</Action></Selector></Sequence><Action>move_forward</Action></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'move_forward': 'Action: Move one step forward in the current direction. Always returns True.', 'turn_left': 'Action: Turn the robot 90 degrees to the left. Always returns True.', 'turn_right': 'Action: Turn the robot 90 degrees to the right. Always returns True.', 'plant_seed': 'Action: Plant a seed at the current location. Always returns True.', 'water_plant': 'Action: Water the planted seed. Always returns True.', 'is_plant_growing': 'Condition: Check if the planted seed has started to grow. Returns True if the plant is growing, False otherwise.', 'harvest_plant': 'Action: Harvest the fully grown plant. Always returns True.', 'drop_item': 'Action: Drop the carried item at the designated location. Always returns True.', 'carry_item': 'Action: Pick up a nearby item and carry it. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: create a behavior tree to 'Plant and harvest crops while navigating obstacles.' Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_plant_growing</Condition><Action>harvest_plant</Action></Sequence><Selector><Sequence><Condition>is_item_carried</Condition><Action>drop_item</Action></Sequence><Sequence><Condition>is_seed_detected</Condition><Action>carry_item</Action><Action>plant_seed</Action></Sequence><Action>wander</Action></Selector></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'move_towards_player': 'Action: Move towards the player character, controlled by a###
4.// INSTRUCTIONS: Use only the following behaviors {'activate_sensors': 'Action: Activate the robot's sensors. Always returns True.', 'collect_sample': 'Action: Collect a sample from the environment. Always returns True.', 'is_sample_collected': 'Condition: Check if a sample has been collected. Returns True if a sample has been collected, False otherwise.', 'move_to_next_location': 'Action: Move the robot to the next designated location. Always returns True.', 'scan_for_anomalies': 'Action: Scan the environment for any anomalies. Always returns True.', 'is_anomaly_detected': 'Condition: Check if an anomaly has been detected. Returns True if an anomaly is detected, False otherwise.', 'is_crucial_sample_missing': 'Condition: Check if a crucial sample is missing. Returns True if a crucial sample is missing, False otherwise.', 'return_to_base': 'Action: Return to the designated base location. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Activate sensors, collect a sample, scan for any anomalies, then return to base.'Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Action>activate_sensors</Action> <Condition>is_sample_collected</Condition> <Action>collect_sample</Action> </Sequence> <Sequence> <Action>scan_for_anomalies</Action> <Condition>is_anomaly_detected</Condition> </Sequence> <Sequence> <Condition>is_crucial_sample_missing</Condition> <Action>return_to_base</Action> </Sequence> </Selector> </BehaviorTree>
###
5.// INSTRUCTIONS: Use only the following behaviors {'move_forward': 'Action: Move the robot forward at a constant speed. Always returns True.', 'turn_left': 'Action: Turn the robot left. Always returns True.', 'turn_right': 'Action: Turn the robot right. Always returns True.', 'continue_movement': 'Action: Continue the robot's current movement. Always returns True.', 'stop_movement': 'Action: Stop the robot's movement. Always returns True.', 'detect_wall': 'Condition: Check for a wall in the robot's path. Returns True if a wall is detected, False otherwise.', 'detect_edge': 'Condition: Check for an edge in the robot's path. Returns True if an edge is detected, False otherwise.', 'detect_obstacle': 'Condition: Check for an obstacle in the robot's path. Returns True if an obstacle is detected, False otherwise.', 'detect_target': 'Condition: Check if the target is within 10 units. Returns True if the target is within 10 units of distance, False otherwise.', 'reach_target': 'Action: Move the robot towards the target. Always returns True.', 'detect_disruption': 'Condition: Check for any disruptions in the environment. Returns True if a disruption is detected, False otherwise.', 'handle_disruption': 'Action: Handle any detected disruptions by adjusting the robot's movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree for a robot to navigate through a maze and reach the targetOutput only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>detect_wall</Condition> <Action>turn_left</Action> </Sequence> <Action>move_forward</Action> </Selector> <Selector> <Sequence> <Condition>detect_edge</Condition> <Action>turn_right</Action> </Sequence> <Action>continue_movement</Action> </Selector> <Selector> <Sequence> <Condition>detect_obstacle</Condition> <Action>stop_movement</Action> </Sequence> <Action>continue_movement</Action> </Selector> <Selector> <Sequence> <Condition>detect_target</Condition> <Action>reach_target</Action> </Sequence> <Action>detect_disruption</Action> </Selector> <Selector> <Sequence> <Condition>handle_disruption</Condition> </Sequence> <Action>detect_target</Action> </Selector> </Sequence> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'call_for_reinforcements': 'Action: Call for additional robots to join the swarm. Always returns True.', 'form_defense_line': 'Action: Form a defensive line with other robots. Always returns True.', 'drive_to_defense_position': 'Action: Drive the robot to the designated defense position. Always returns True.', 'detect_enemy': 'Condition: Check for enemy presence in the surrounding area. Always returns True.', 'engage_enemy': 'Action: Engage and attack the enemy with the appropriate tactics. Always returns True.', 'retreat': 'Action: Retreat to a safe location. Always returns True.', 'detect_nest': 'Condition: Check for enemy nest in the surrounding area. Always returns True.', 'attack_nest': 'Action: Launch an attack on the enemy nest. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree for a swarm of robots to defend against enemy swarmOutput only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>detect_enemy</Condition> <Action>call_for_reinforcements</Action> <Action>form_defense_line</Action> <Action>drive_to_defense_position</Action> <Action>engage_enemy</Action> </Sequence> <Selector> <Sequence> <Condition>detect_nest</Condition> <Action>call_for_reinforcements</Action> <Action>drive_to_defense_position</Action> <Action>attack_nest</Action> </Sequence> <Action>retreat</Action> </Selector> </Sequence> </BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'follow_waypoints': 'Action: Follow the designated waypoints to reach the target location. Always returns True.', 'detect_obstacles': 'Condition: Check for obstacles in the robot's path. Returns True if an obstacle is detected, False otherwise.', 'detect_edge': 'Condition: Check for an edge in the robot's path. Returns True if an edge is detected, False otherwise.', 'detect_target': 'Condition: Check if the target is within 10 units. Returns True if the target is within 10 units of distance, False otherwise.', 'reach_target': 'Action: Move the robot towards the target. Always returns True.', 'detect_scent': 'Condition: Check for a scent trail left by another robot. Returns True if a scent trail is detected, False otherwise.', 'follow_scent': 'Action: Follow the scent trail to reach the target. Always returns True.', 'detect_drop_point': 'Condition 
###
4.// INSTRUCTIONS: Use only the following behaviors {'patrol_area': 'Subtree node: Patrol the designated area.', 'get_health_pack': 'Subtree node: Represents a behavior tree for finding health packs.', 'restore_health': 'Action: Makes the agent use a health pack to restore health. Always returns True.', 'on_low_health': "Event: Triggers when the agent's health falls below a threshold. Returns True if health is low, False otherwise."}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Patrol the area while checking for low health and restoring it if needed, but always prioritize completing the patrol.
4.// OUTPUT:
<BehaviorTree><Sequence><Action>patrol_area</Action><Trigger>on_low_health</Trigger><Sequence><Action>get_health_pack</Action><Action>restore_health</Action></Sequence><Action>patrol_area</Action></Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'follow_leader': 'Action: Follow the designated leader at a safe distance. Always returns True.', 'is_leader_in_sight': 'Condition: Check if the designated leader is within sight. Returns True if the leader is in sight, False otherwise.', 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'move_in_formation': 'Action: Move in a coordinated formation with other agents at a designated spacing. Always returns True.', 'is_formation_reached': 'Condition: Check if the designated formation is reached. Returns True if the formation is reached, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Follow the designated leader while maintaining formation with other agents, while avoiding obstacles if needed.
5.// OUTPUT:
<BehaviorTree><Sequence><Action>follow_leader</Action><Condition>is_leader_in_sight</Condition><Selector><Action>move_in_formation</Action><Sequence><Condition>is_formation_reached</Condition><Action>task_completed</Action></Sequence></Selector><Sequence><Condition>is_obstacle_detected</Condition><Action>avoid_obstacle</Action></Sequence></Sequence></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'explore_area': 'Subtree node: Represents a behavior tree for exploring a designated area.', 'detect_food': 'Action: Use sensors to detect nearby sources of food. Always returns True.', 'locate_food_source': 'Action: Move towards the closest detected source of food. Always returns True.', 'eat_food': "Action: Consume the food source once it has been reached. Always returns True.", 'on_low_energy': "Event: Triggers when the agent's energy falls below a threshold. Returns True if energy is low, False otherwise.", 'move_to_next_area': 'Action: Move to the next designated area to explore. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Explore the specified area, locating and eating food sources when energy is low, and move to the next area once explored.
6.// OUTPUT:
<BehaviorTree><Sequence><Action>explore_area</Action><Trigger>on_low_energy</Trigger><Sequence><Action>detect_food</Action><Action>locate_food_source</Action><Action>eat_food</Action></Sequence><Action>move_to_next_area</Action></Sequence></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'collect_resource': 'Action: Collect a designated resource from the environment. Always returns True.', 'deposit_resource': 'Action: Deposit collected resources at a designated location. Always returns True.', 'navigate_to_resource': 'Action: Move towards the closest detected resource. Always returns True.', 'navigate_to_deposit': 'Action: Move towards the designated resource deposit location. Always returns True.', 'on_low_resource': "Event: Triggers when the agent's resource count falls below a threshold. Returns True if resource count is low, False otherwise."}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: Collect resources from the environment, deposit them at the designated location when low on resources, and then continue collecting.
7.// OUTPUT:
<BehaviorTree><Sequence><Action>collect_resource</Action><Trigger>on_low_resource</Trigger><Action>deposit_resource</Action><Action>collect_resource</Action></Sequence></BehaviorTree> 
###
4.// INSTRUCTIONS: Use only the following behaviors {'move_forward': 'Action: Move one step forward. Always returns True.', 'avoid_obstacle': 'Subtree node: Represents a behavior tree for avoiding obstacles.', 'is_obstacle_detected': 'Condition: Checks for obstacles in front of the robot. Returns True if an obstacle is detected, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Traverse through a maze and reach the final destination without hitting any obstacles.
4.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Action>move_forward</Action><Action>avoid_obstacle</Action></Sequence><Sequence><Condition>is_obstacle_detected</Condition><Action>avoid_obstacle</Action></Sequence></Selector><Action>move_forward</Action></Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'find_toolbox': 'Subtree node: Represents a behavior tree for finding the toolbox in the environment.', 'is_toolbox_detected': 'Condition: Checks for the presence of the toolbox in the environment. Returns True if the toolbox is within range, False otherwise.', 'is_toolbox_nearby': 'Condition: Checks if the agent is close enough to the toolbox. Returns True if the toolbox is within a certain distance, False otherwise.', 'grab_toolbox': 'Action: Grabs the toolbox and attaches it to the agent. Always returns True.', 'move_to_toolbox': 'Action: Move towards the toolbox. Always returns True.', 'repair': 'Action: Repair the designated object using the toolbox. Always returns True.', 'is_object_repaired': 'Condition: Checks if the designated object has been successfully repaired. Returns True if the object is repaired, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Repair a broken machine in the factory using a toolbox.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_toolbox_detected</Condition><Sequence><Condition>is_toolbox_nearby</Condition><Action>grab_toolbox</Action><Action>move_to_toolbox</Action></Sequence></Sequence><Sequence><Condition>is_object_repaired</Condition><Subtree>find_toolbox</Subtree></Sequence><Action>repair</Action></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'observe_environment': 'Action: Utilize sensors to observe the surrounding environment for potential hazards. Always returns True.', 'is_hazard_detected': 'Condition: Checks for any hazards in the environment. Returns True if a hazard is detected, False otherwise.', 'avoid_hazard': 'Action: Move away from the detected hazard. Always returns True.', 'follow_leader': 'Action: Follow the leader to stay within a certain radius. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Guide a group of robots through a hazardous environment, while staying within a certain distance of the designated leader.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_hazard_detected</Condition><Action>avoid_hazard</Action></Sequence><Subtree>observe_environment</Subtree><Action>follow_leader</Action></Selector></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'scan_building': 'Action: Scan the interior of a building for any potential dangers. Always returns True.', 'enter_building': 'Action: Enter the designated building. Always returns True.', 'search_area': 'Subtree node: Represents a behavior tree for searching the interior of a building.', 'is_danger_detected': 'Condition: Check for any potential dangers within the building. Returns True if a danger is detected, False otherwise.', 'avoid_danger': 'Action: Move away from the detected danger. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: Explore and scan the interior of a building, avoiding any potential dangers.
7.// OUTPUT:
<BehaviorTree><Sequence><Action>scan_building</Action><Action>enter_building</Action><Subtree>search_area</Subtree><Sequence><Condition>is_danger_detected</Condition><Action>avoid_danger</Action></Sequence></Sequence></BehaviorTree>
###
3.// INSTRUCTIONS: Use only the following behaviors {'move_to_centroid': 'Action: Move towards the centroid point of the swarm. Always returns True.', 'maintain_distance_from_robots': 'Action: Adjusts the robot's position to maintain a set distance from other robots. Always returns True.', 'broadcast_location': 'Action: Share the robot's current location with the rest of the swarm. Always returns True.', 'detect_obstacles': 'Action: Use sensors to detect obstacles in the environment. Always returns True.', 'communicate_target_location': 'Action: Communicate the location of the target to the other robots. Always returns True.', 'is_group_gathered': 'Condition: Check if the group is gathered in one location. Returns True if the distance between robots is within a certain threshold, False otherwise.', 'is_collision_detected': 'Condition: Check if there is a possibility of collision. Returns True if a collision is detected, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3.// USER COMMAND: Create a behavior tree for a swarm of robots to search and retrieve a target while avoiding collisions and staying in formation.
3.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_group_gathered</Condition><Action>move_to_centroid</Action><Action>broadcast_location</Action></Sequence><Sequence><Condition>is_collision_detected</Condition><Action>detect_obstacles</Action><Action>maintain_distance_from_robots</Action></Sequence><Sequence><Condition>is_target_detected</Condition><Action>communicate_target_location</Action></Sequence></Selector></BehaviorTree>

###
4.// INSTRUCTIONS: Use only the following behaviors {'scan_surroundings': 'Action: Use sensors to scan the surroundings for potential resources or hazards. Always returns True.', 'gather_resources': 'Action: Gather and collect resources found in the environment. Always returns True.', 'deliver_resources': 'Action: Deliver gathered resources to designated location. Always returns True.', 'protect_home_base': 'Action: Defend the home base from invaders. Always returns True.', 'return_to_base': 'Action: Return to the home base for recharge or repairs. Always returns True.', 'go_to_resource': 'Action: Use the previous scan results to navigate towards the nearest resource. Always returns True.', 'is_resource_available': 'Condition: Check if resources are available in the environment. Returns True if resources are detected, False otherwise.', 'is_home_base_attacked': 'Condition: Check if the home base is under attack. Returns True if the home base is being invaded, False otherwise.'}, to construct behavior tree in XML format to thefollowing command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Generate a behavior tree for a swarm of robots to scavenge for resources, protect their home base, and deliver resources for processing.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_resource_available</Condition><Action>scan_surroundings</Action><Action>go_to_resource</Action><Action>gather_resources</Action><Action>return_to_base</Action><Action>deliver_resources</Action></Sequence><Sequence><Condition>is_home_base_attacked</Condition><Action>protect_home_base</Action></Sequence></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'explore_area': 'Action: Move around and explore the designated area. Always returns True.', 'transfer_data': 'Action: Transfer collected data to a designated robot for storage and processing. Always returns True.', 'analyze_data': 'Action: Analyze the transferred data to search for patterns or anomalies. Always returns True.', 'react_to_alarm': 'Action: React to alarms set off by detected anomalies. Always returns True.', 'execute_search_pattern': 'Action: Use a predefined search pattern to scan the area for specific data. Always returns True.', 'find_anomaly': 'Condition: Check for the presence of an anomaly in the data. Returns True if an anomaly is detected, False otherwise.', 'is_area_explored': 'Condition: Check if the designated area has been fully explored. Returns True if the area is fully explored, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Create a behavior tree for a swarm of robots to explore and gather data in a designated area, analyze the data for anomalies, and react to any detected anomalies.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_area_explored</Condition><Action>transfer_data</Action><Action>explore_area</Action></Sequence><Sequence><Condition>find_anomaly</Condition><Action>react_to_alarm</Action></Sequence><Sequence><Condition>is_area_explored</Condition><Action>execute_search_pattern</Action></Sequence><Sequence><Condition>is_area_explored</Condition><Action>analyze_data</Action></Sequence></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'roam': 'Action: Move around the designated area randomly to search and explore the environment. Always returns True.', 'locate_nest': 'Action: Search for the designated nest location using sensors. Always returns True.', 'build_nest': 'Action: Gather materials and build a new nest at the designated location. Always returns True.', 'scout_for_resources': 'Action: Scan the surroundings and search for potential resources. Always returns True.', 'search_for_nest': 'Action: Use previous sensor readings to search for a designated nest location. Always returns True.', 'is_nest_found': 'Condition: Check if the nest has been located. Returns True if the nest is found, False otherwise.', 'has_found_resource': 'Condition: Check if a potential resource is detected. Returns True if a resource is found, False otherwise.'}, to construct behavior tree in XML format to thefollowing command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Generate a behavior tree for a swarm of robots to search for a new nest location and scout for resources in the surrounding area.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_nest_found</Condition><Action>locate_nest</Action><Action>build_nest</Action></Sequence><Sequence><Condition>has_found_resource</Condition><Action>scout_for_resources</Action></Sequence><Sequence><Condition>is_nest_found</Condition><Action>search_for_nest</Action></Sequence><Sequence><Condition>has_found_resource</Condition><Action>roam</Action></Sequence></Selector></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'move_towards_target': 'Action: Move towards the designated target. Always returns True.', 'load_package': 'Action: Use robotic arms to pick up and load the designated package. Always returns True.', 'unload_package': '###
4.// INSTRUCTIONS: Use only the following behaviors {'detect_object': 'Action: Use sensors to detect nearby objects. Always returns True.', 'follow_object': 'Action: Follow the detected object. Always returns True.', 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'reverse_direction': 'Action: Reverse current direction. Always returns True.', 'is_object_nearby': 'Condition: Checks if an object is within a specific distance. Returns True if an object is detected within the given distance, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: navigate around obstacles to reach the target and follow it
4.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>is_object_nearby</Condition><Action>detect_object</Action><Action>avoid_obstacle</Action><Action>reverse_direction</Action></Sequence><Action>follow_object</Action></Selector></Sequence></BehaviorTree>

###
5. // INSTRUCTIONS: Use only the following behaviors {'locomote': 'Action: Move in the specified direction for 1 unit. Returns True if movement is successful, False otherwise.', 'dig_hole': 'Action: Use tools to dig a hole in the ground. Returns True if hole is successfully dug, False otherwise.', 'fly': 'Action: Use wings to fly to a specific location. Returns True if flight is successful, False otherwise.', 'water_plants': 'Action: Use water dispenser to water plants. Returns True if plants are successfully watered, False otherwise.', 'is_hole_dug': 'Condition: Checks if a hole is dug. Returns True if hole is successfully dug, False otherwise.', 'is_flight_successful': 'Condition: Checks if flight was successful. Returns True if flight is completed, False otherwise.', 'is_plants_watered': 'Condition: Checks if plants were watered. Returns True if plants are successfully watered, False otherwise.', 'is_obstacle_detected': 'Condition: Checks for obstacles in the way. Returns True if obstacles are detected, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: use locomotion to reach a specific location and dig a hole, if successful fly to another location and water plants
5.// OUTPUT:
<BehaviorTree><Sequence><Action>locomote</Action><Selector><Sequence><Condition>is_obstacle_detected</Condition><Action>dig_hole</Action><Condition>is_hole_dug</Condition><Action>fly</Action><Condition>is_flight_successful</Condition><Action>water_plants</Action><Condition>is_plants_watered</Condition></Sequence></Selector></Sequence></BehaviorTree>

###
6. // INSTRUCTIONS: Use only the following behaviors {'move_forward': 'Action: Move the robot one step forward in the current direction. Always returns True.', 'rotate_left': 'Action: Rotate the robot 90 degrees to the left. Always returns True.', 'rotate_right': 'Action: Rotate the robot 90 degrees to the right. Always returns True.', 'is_obstacle_detected': 'Condition: Checks for obstacles in the way. Returns True if an obstacle is detected, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: navigate through a maze by moving forward and rotating to avoid obstacles
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>move_forward</Action></Sequence><Sequence><Condition>is_obstacle_detected</Condition><Selector><Sequence><Action>rotate_left</Action></Sequence><Sequence><Action>rotate_right</Action></Sequence></Selector></Sequence></Selector></BehaviorTree>

###
7. // INSTRUCTIONS: Use only the following behaviors {'assemble_parts': 'Action: Assemble different parts of an object. Returns True if assembly is successful, False otherwise.', 'disassemble_parts': 'Action: Disassemble parts of an object. Returns True if disassembly is successful, False otherwise.', 'test_object': 'Action: Test the assembled object. Returns True if object passes test, False otherwise.', 'is_test_successful': 'Condition: Checks if object passed test. Returns True if test is successful, False otherwise.', 'is_assembly_successful': 'Condition: Checks if object is successfully assembled. Returns True if assembly is successful, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: assemble an object by correctly placing different parts and test if the object functions properly
7.// OUTPUT:
<BehaviorTree><Sequence><Action>assemble_parts</Action><Selector><Sequence><Action>disassemble_parts</Action><Condition>is_assembly_successful</Condition><Action>test_object</Action></Sequence><Sequence><Condition>is_test_successful</Condition></Sequence></Selector></Sequence></BehaviorTree> 
###
3.// INSTRUCTIONS: Use only the following behaviors {'move_forward': 'Action: Move the robot one step forward in the current direction. Always returns True.', 'turn_left': 'Action: Turn the robot 90 degrees to the left. Always returns True.', 'turn_right': 'Action: Turn the robot 90 degrees to the right. Always returns True.', 'is_wall_detected': 'Condition: Check if a wall is detected in front of the robot. Returns True if a wall is detected, False otherwise.', 'is_path_clear': 'Condition: Check if the path ahead is clear. Returns True if no obstacles are detected, False if obstacles are present.', 'is_endzone_reached': 'Condition: Check if the robot has reached the endzone. Returns True if the robot is at the endzone, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3.// USER COMMAND: generate behavior tree for a robot to navigate and reach the endzone without hitting any obstacles
3.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>is_path_clear</Condition><Action>move_forward</Action></Sequence><Selector><Action>turn_left</Action><Action>turn_right</Action></Selector></Selector><Condition>is_wall_detected</Condition><Sequence><Condition>is_endzone_reached</Condition><Action>move_forward</Action></Sequence></Sequence></BehaviorTree>

###
4.// INSTRUCTIONS: Use only the following behaviors {'detect_enemy': 'Action: Scan the environment for any potential enemies and mark their location on the map. Always returns True.', 'move_closer_to_enemy': 'Action: Move closer to the nearest enemy. Always returns True.', 'track_enemy': 'Action: Continuously track the location of the nearest enemy and update the map. Always returns True.', 'is_target_detected': 'Condition: Check if the target, enemy location, is within range. Returns True if the enemy is detected, False otherwise.', 'is_path_blocked': 'Condition: Check if the path in the current direction is blocked or impassable. Returns True if the path is blocked, False otherwise.', 'is_action_successful': 'Condition: Check if the previous action was successful. Returns True if the action was successful, False otherwise.', 'is_enemy_in_range': 'Condition: Check if the enemy is within range for attacking. Returns True if the enemy is within attacking range, False otherwise.', 'attack_enemy': 'Action: Attack the enemy within range. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.//USER COMMAND: generate behavior tree for a swarm of robots to scan, track, and attack enemies in the area
4.//OUTPUT:
<BehaviorTree><Sequence><Action>detect_enemy</Action><Condition>is_target_detected</Condition><Sequence><Action>track_enemy</Action><Condition>is_target_detected</Condition><Sequence><Action>move_closer_to_enemy</Action><Condition>is_action_successful</Condition><Selector><Sequence><Condition>is_path_blocked</Condition><Selector><Action>turn_left</Action><Action>turn_right</Action></Selector></Sequence><Selector><Action>attack_enemy</Action><Action>detect_enemy</Action></Selector></Sequence></Sequence></Sequence></BehaviorTree>

###
5.//INSTRUCTIONS: Use only the following behaviors {'hover': 'Action: Activate hover mode for the robot. Always returns True.', 'move_up': 'Action: Move the robot up one unit in the environment. Always returns True.', 'move_down': 'Action: Move the robot down one unit in the environment. Always returns True.', 'move_left': 'Action: Move the robot left one unit in the environment. Always returns True.', 'move_right': 'Action: Move the robot right one unit in the environment. Always returns True.', 'is_above_ground': 'Condition: Check if the robot is currently hovering above the ground. Returns True if the robot is in hover mode, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles in the environment. Returns True if an obstacle is detected, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to navigate a swarm of robots through a complex maze while keeping them in hover mode
5.// OUTPUT:
<BehaviorTree><Sequence><Action>hover</Action><Selector><Sequence><Condition>is_above_ground</Condition><Action>move_up</Action></Sequence><Sequence><Condition>is_obstacle_detected</Condition><Selector><Action>move_left</Action><Action>move_right</Action></Selector></Sequence><Sequence><Condition>is_obstacle_detected</Condition><Selector><Action>move_up</Action><Action>move_down</Action></Selector></Sequence></Selector></Sequence></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'move_forward': 'Action: Move the robot one step forward in the current direction. Always returns True.', 'turn_left': 'Action: Turn the robot 90 degrees to the left. Always returns True.', 'turn_right': 'Action: Turn the robot 90 degrees to the right. Always returns True.', 'detect_food': 'Action: Use the robot's sensors to detect nearby food sources and mark them on the internal map. Always returns True.', 'collect_food': 'Action: Move towards the nearest food source and collect it. Always returns True.', 'deposit_food': 'Action: Move to the designated deposit location and deposit the collected food. Always returns True.', 'is_food_detected': 'Condition: Check if there is food detected nearby. Returns True if food is detected, False otherwise.', 'is_food_collected': 'Condition: Check if the robot has successfully collected food. Returns True if food is collected, False otherwise.', 'is_deposit_reached': 'Condition: Check if the robot has reached the designated deposit location. Returns True if the deposit location is reached, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree for a swarm of robots to forage for food and bring it back to the nest
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_food_detected</Condition><Selector><Sequence><Condition>is_food_collected</Condition><Selector><Action>deposit_food</Action><Sequence><Action>move_forward</Action><Action>collect_food</Action></Sequence></Selector></Sequence><Sequence><Condition>is_deposit_reached</Condition><Selector><Action>turn_left</Action><Action>turn_right</Action></Selector></Sequence></Selector></Sequence></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'move_forward': 'Action: Move the robot one step forward in the current direction. Always returns True.', 'turn 
###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_circle': 'Action: Form a circle with other robots. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_circle_formed': 'Condition: Check if a circle is formed. Returns True if a circle is formed, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.', 'move_backward': 'Action: Move the robot one step backward in the current direction. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Generate behavior tree for a group of robots to form a circle and move forward when a target is detected, and avoid obstacles along the way
4.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_target_detected</Condition><Sequence><Action>form_circle</Action><Selector><Sequence><Action>move_forward</Action><Action>is_obstacle_detected</Action><Action>avoid_obstacle</Action></Sequence><Sequence><Action>move_backward</Action><Action>update_map</Action></Sequence></Selector></Sequence></BehaviorTree>
 
###
5.// INSTRUCTIONS: Use only the following behaviors {'set_destination': 'Action: Set a destination point for the robot to navigate towards. Always returns True.', 'check_distance_to_destination': 'Condition: Check if the robot is within 10 units of the set destination. Returns True if within 10 units, False otherwise.', 'continue_movement': 'Action: Continue moving towards the destination. Always returns True.', 'search_for_destination': 'Action: Randomly search for a nearby destination point. Always returns True.', 'wait_for_other_robots': 'Action: Wait for other robots in the group to reach the set destination. Always returns True.', 'group_movement': 'Action: Move in a group formation towards the set destination. Always returns True.', 'is_leader': 'Condition: Check if the robot is the designated leader of the group. Returns True if the robot is the leader, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Lead a group of robots to a set destination point while maintaining a formation'. Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_leader</Condition><Selector><Sequence><Condition>check_distance_to_destination</Condition><Action>set_destination</Action><Action>continue_movement</Action></Sequence><Sequence><Condition>is_leader</Condition><Action>wait_for_other_robots</Action></Sequence></Selector></Sequence><Selector><Sequence><Action>search_for_destination</Action><Action>group_movement</Action></Sequence></Selector></BehaviorTree>
 
###
6.// INSTRUCTIONS: Use only the following behaviors {'is_team_attacking': 'Condition: Check if the team is currently attacking. Returns True if the team is attacking, False otherwise.', 'move_to_attack': 'Action: Move towards the nearest opponent robot to attack. Always returns True.', 'charge_attack': 'Action: Perform a charging attack on the opponent robot. Always returns True.', 'block_attack': 'Action: Block any incoming attacks from the opponent robot. Always returns True.', 'is_opponent_in_range': 'Condition: Check if an opponent robot is within attacking range. Returns True if an opponent is in range, False otherwise.', 'team_regroup': 'Action: Regroup with other robots in the team. Always returns True.', 'is_target_defended': 'Condition: Check if the target is well defended by opponent robots. Returns True if the target is defended, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Defeat the opponent team and capture their flag while coordinating attacks with teammates'. Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_target_defended</Condition><Action>team_regroup</Action></Sequence><Selector><Sequence><Condition>is_opponent_in_range</Condition><Selector><Sequence><Condition>is_team_attacking</Condition><Action>move_to_attack</Action><Action>charge_attack</Action></Sequence><Sequence><Condition>is_team_attacking</Condition><Action>block_attack</Action></Sequence></Selector></Sequence></Selector></BehaviorTree>
 
###
7.// INSTRUCTIONS: Use only the following behaviors {'move_to_next_point': 'Action: Move the robot to the next designated point in the series. Always returns True.', 'search_for_target': 'Action: Randomly move and search for a target to attack. Always returns True.', 'attack_target': 'Action: Perform an attack on the designated target. Always returns True.', 'wait_for_backup': 'Action: Wait for backup from other robots before attacking. Always returns True.', 'is_target_in_range': 'Condition: Check if the target is within attacking range. Returns True if the target is in range, False otherwise.', 'is_team_member_down': 'Condition: Check if any of the team members have been disabled. Returns True if a team member is disabled, False otherwise.', 'team_heal': 'Action: Directly heal a disabled team member. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: generate behavior tree to 'In a team, prioritize healing disabled members while randomly attacking targets to defend the territory'. Output only the XML behavior tree without extra text.
7.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition> 
###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'change_direction': 'Action: Change the direction of the agent. Always returns True.', 'is_line_plain': 'Condition: Check if the line is formed without being too high or too low, i.e., not varying more than 3 units from the center. Returns True if the line is plain, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_intruder_detected': 'Condition: Check if an intruder is detected in the monitored area. Returns True if an intruder is detected, False otherwise.', 'Move_and_change_color': 'Condition: Check if the agent has moved and changed color. Returns True if both conditions are fulfilled, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Monitor an area, when an intruder is detected, form a line without varying more than 3 units, and change color to white'.Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_intruder_detected</Condition><Sequence><Action>form_line</Action><Sequence><Condition>is_line_plain</Condition><Action>change_color_to_white</Action></Sequence><Action>agent_movement_freeze</Action><Action>Move_and_change_color</Action></Sequence></Sequence><Action>wander</Action></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'change_color_to_red': "Action: Change agent's color to red. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_circle': 'Action: Form a circle by moving in a circular path. Always returns True.', 'is_in_position': 'Condition: Check if the agent is in the designated position. Returns True if the agent's coordinates match the designated position, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Form a circle around the target and change color to red'. Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_target_detected</Condition><Sequence><Action>form_circle</Action><Action>change_color_to_red</Action></Sequence><Action>agent_movement_freeze</Action><Condition>is_in_position</Condition><Action>task_completed</Action></Sequence></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'surround_target': 'Action: Move in a circular path around the target. Always returns True.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_surrounded': 'Condition: Check if the target is surrounded by the agents. Returns True if all agents are in position surrounding the target, False otherwise.', 'is_nest_cleared': 'Condition: Check if the nest is clear of obstacles. Returns True if no obstacles are detected in the nest, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'return_to_nest': 'Action: Return to the nest using the shortest path. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Surround the target and return to the nest upon completion, ensuring the nest is cleared of obstacles'. Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_target_detected</Condition><Sequence><Action>surround_target</Action><Condition>is_surrounded</Condition><Action>agent_movement_freeze</Action><Action>return_to_nest</Action><Condition>is_nest_cleared</Condition><Action>agent_movement_freeze</Action><Action>task_completed</Action></Sequence></Sequence></BehaviorTree>
 
###
7.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_triangle': 'Action: Form a triangle by moving to designated points. Always returns True.', 'is_in_position': 'Condition: Check if the agent is in the designated position. Returns True if the agent's coordinates match the designated position, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': ' 
###
3.// INSTRUCTIONS: Use only the following behaviors {'navigate_to': 'Action: Move to the designated location. Always returns True.', 'need_to_recharge': 'Condition: Checks if the agent's battery life is below a certain threshold. Returns True if battery is low, False otherwise.', 'find_charging_station': 'Action: Find the nearest charging station. Returns True if found, False otherwise.', 'recharge': 'Action: Connect to the charging station and recharge. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3.// USER COMMAND: Navigate to a specific location. If the agent's battery is low, find and recharge at the nearest charging station before continuing navigation.
3.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>navigate_to</Action><Condition>need_to_recharge</Condition><Sequence><Action>find_charging_station</Action><Action>recharge</Action></Sequence></Sequence><Action>navigate_to</Action></Selector></BehaviorTree>

###
4.// INSTRUCTIONS: Use only the following behaviors {'gather_resources': 'Subtree node: Represents a behavior tree for gathering resources.', 'check_inventory': 'Action: Checks the agent's inventory for a specific item. Returns True if item is found, False otherwise.', 'collect_resource': 'Action: Picks up a specific resource. Returns True if resource is successfully collected and added to inventory, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Gather a specific resource. If the resource is not already in the inventory, collect it before continuing.
4.// OUTPUT:
<BehaviorTree><Sequence><Action>gather_resources</Action><Condition>resource_not_in_inventory</Condition><Action>collect_resource</Action></Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'follow_leader': 'Action: Follow the leader robot. Always returns True.', 'maintain_distance': 'Action: Keeps a distance from the leader robot. Always returns True.', 'perform_task': 'Subtree node: Represents a behavior tree for performing a specific task.', 'wait': 'Action: Pauses for a designated amount of time. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Have the robot follow the leader and perform a task while maintaining a distance from the leader.
5.// OUTPUT:
<BehaviorTree><Sequence><Action>follow_leader</Action><Action>maintain_distance</Action><Subtree>perform_task</Subtree></Sequence></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'search_and_mark': 'Subtree node: Represents a behavior tree for searching and marking specific areas.', 'mark_area': 'Action: Marks the designated area. Returns True if successfully marked, False otherwise.', 'check_marker': 'Action: Checks if the designated area has been marked. Returns True if already marked, False otherwise.', 'reposition': 'Action: Moves the agent to a different location. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Search and mark a specific area. If the area is already marked, reposition the agent to a different location and retry marking.
6.// OUTPUT:
<BehaviorTree><Sequence><Subtree>search_and_mark</Subtree><Condition>area_already_marked</Condition><Action>reposition</Action><Subtree>search_and_mark</Subtree></Sequence></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'request_help': 'Subtree node: Represents a behavior tree for requesting help from nearby robots.', 'call_for_reinforcements': 'Action: Sends out a call for reinforcements. Returns True if reinforcement is successfully requested, False otherwise.', 'wait_for_response': 'Condition: Waits for a response from the reinforcement request. Returns True if a response is received, False otherwise.', 'coordinate_efforts': 'Action: Coordinates efforts with the responding robots. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: Request help and coordinate with the responding robots to complete a task.
7.// OUTPUT:
<BehaviorTree><Sequence><Subtree>request_help</Subtree><Condition>response_received</Condition><Action>coordinate_efforts</Action></Sequence></BehaviorTree>
 
###
4.// INSTRUCTIONS: Use only the following behaviors {'patrol': 'Action: Patrol designated area. Always returns True.', 'detect_intruder': 'Action: Detect any intruders in the area. Always returns True.', 'chase_intruder': 'Action: Chase and capture any intruders. Returns False when successful.', 'is_thief_detected': 'Condition: Check if a thief is currently detected. Returns True if a thief is detected, False otherwise.', 'is_intruder_captured': 'Condition: Check if an intruder has been successfully captured. Returns True if an intruder is caught, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Create a behavior tree to patrol and chase if a thief is detected.
4.// OUTPUT:
<BehaviorTree><Sequence><Action>patrol</Action><Sequence><Condition>is_thief_detected</Condition><Action>chase_intruder</Action></Sequence></Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'start_heating': 'Action: Initiate heating process. Always returns True.', 'measure_temperature': 'Function: Measure the current temperature. Returns the measured temperature.', 'increase_heat': 'Action: Increase the heat by a specified amount. Returns False when the desired temperature is reached.', 'decrease_heat': 'Action: Decrease the heat by a specified amount. Returns False when the desired temperature is reached.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Heat the room to 25 degrees Celsius.
5.// OUTPUT:
<BehaviorTree><Sequence><Action>start_heating</Action><Loop><Sequence><Action>measure_temperature</Action><Selector><Sequence><Condition>is_temperature_below_25</Condition><Action>increase_heat</Action></Sequence><Sequence><Condition>is_temperature_above_25</Condition><Action>decrease_heat</Action></Sequence></Selector></Sequence></Loop></Sequence></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'collect_food': 'Action: Collect food from multiple sources. Returns False when food storage is full.', 'find_food_source': 'Action: Find the nearest food source. Returns False when a source is found.', 'deliver_food': 'Action: Deliver the collected food to the nest. Returns False when all food is delivered.', 'is_food_collected': 'Condition: Check if food storage is full. Returns True if food storage is full, False otherwise.', 'is_food_source_found': 'Condition: Check if a food source has been located. Returns True if a source is found, False otherwise.', 'is_food_delivered': 'Condition: Check if all food has been delivered to the nest. Returns True if all food is delivered, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Gather and deliver food from the nearest sources until food storage is full.
6.// OUTPUT:
<BehaviorTree><Loop><Selector><Sequence><Action>find_food_source</Action><Sequence><Condition>is_food_source_found</Condition><Action>collect_food</Action></Sequence></Sequence><Sequence><Condition>is_food_collected</Condition><Action>deliver_food</Action></Sequence></Selector></Loop></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'search': 'Action: Search the specified area for a target. Returns False when target is found.', 'track_target': 'Action: Continue tracking the target. Returns False when target is no longer in sight.', 'attack_target': 'Action: Attack the target once it is in range. Returns False when target is successfully eliminated.', 'is_target_found': 'Condition: Checks if the target has been located. Returns True if the target is found, False otherwise.', 'is_target_lost': 'Condition: Checks if the target is no longer in sight. Returns True if the target is lost, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: Search for and eliminate the target.
7.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>search</Action><Sequence><Condition>is_target_found</Condition><Action>attack_target</Action></Sequence></Sequence><Sequence><Condition>is_target_lost</Condition><Action>track_target</Action></Sequence></Selector></BehaviorTree>
###
3.// INSTRUCTIONS: Use only the following behaviors {'move_forward': 'Action: Move forward 1 unit. Returns True if successful, False otherwise.', 'turn_left': 'Action: Turn the robot 90 degrees to the left. Always returns True.', 'turn_right': 'Action: Turn the robot 90 degrees to the right. Always returns True.', 'follow_line': 'Action: Follow the line formed by other robots. Returns True if successful, False otherwise.', 'stop_movement': 'Action: Stop the robot from moving. Always returns True.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_at_target': 'Condition: Check if the robot has reached the target location. Returns True if at the target, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3.// USER COMMAND: generate behavior tree to 'move along a path indicated by a line, and stop when the end of the line is reached'. Output only the XML behavior tree without extra text.
3.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_line_formed</Condition><Action>follow_line</Action><Condition>is_at_target</Condition><Action>stop_movement</Action></Sequence><Action>move_forward</Action></Selector></BehaviorTree>

###
4.// INSTRUCTIONS: Use only the following behaviors {'start_recording': 'Action: Start recording an event. Always returns True.', 'stop_recording': 'Action: Stop recording an event. Always returns True.', 'transmit_data': 'Action: Transmit recorded data to base station. Returns True if successful, False otherwise.', 'is_event_detected': 'Condition: Check if an event is detected. Returns True if an event is detected, False otherwise.', 'is_data_transmitted': 'Condition: Check if recorded data has been successfully transmitted. Returns True if data has been transmitted, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'start recording data when an event is detected, and transmit the data once recorded'. Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_event_detected</Condition><Action>start_recording</Action><Condition>is_data_transmitted</Condition><Action>transmit_data</Action></Sequence><Action>stop_recording</Action></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'stay_near_base': 'Action: Stay within a 5 unit radius of the base station. Returns True if within radius, False otherwise.', 'move_to_target': 'Action: Move towards the target location. Returns True if successful, False otherwise.', 'is_at_target': 'Condition: Check if the robot has reached the target location. Returns True if at the target, False otherwise.', 'broadcast_position': 'Action: Broadcast current position to other robots. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'remain near the base station while broadcasting its current position, and move towards the target location'. Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree><Sequence><Action>stay_near_base</Action><Action>broadcast_position</Action><Selector><Sequence><Action>move_to_target</Action><Condition>is_at_target</Condition><Action>stay_near_base</Action></Sequence><Action>move_to_target</Action></Selector></Sequence></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'get_close': 'Action: Move closer to the designated target. Returns True if successful, False otherwise.', 'stay_near_target': 'Action: Stay within a 3 unit radius of the target. Returns True if within radius, False otherwise.', 'track_target': 'Action: Continuously track the designated target. Returns True if successful, False otherwise.', 'is_at_target': 'Condition: Check if the robot has reached the target location. Returns True if at the target, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'get close to the target, continuously track it, and stay within 3 units of it'. Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Action>get_close</Action><Action>track_target</Action><Condition>is_at_target</Condition><Action>stay_near_target</Action></Sequence><Selector><Sequence><Action>stay_near_target</Action><Action>track_target</Action><Condition>is_at_target</Condition><Action>stay_near_target</Action></Sequence><Action>get_close</Action></Selector></Sequence></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'detect_intruders': 'Action: Scan and detect nearby intruders. Returns True if intruders are detected, False otherwise.', 'move_towards_intruder': 'Action: Move towards the nearest detected intruder. Returns True if successful, False otherwise.', 'surround_intruder': 'Action: Surround the intruder with other robots. Returns True if successful, False otherwise.', 'capture_intruder': 'Action: Capture the intruder. Returns True if successful, False otherwise.', 'is_intruder_captured': 'Condition: Check if the intruder has been captured. Returns True if captured, False otherwise.', 'is_surrounded': 'Condition: Check if the intruder is surrounded by other robots. Returns True if surrounded, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: generate behavior tree to 'detect nearby intruders, move towards and surround them with other robots, and capture the intruder if surrounded'. Output only the XML behavior tree without extra text.
7.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Action>detect_intruders</Action><Selector><Sequence><Action>move_towards_intruder</Action><Selector><Sequence><Action>surround_intruder</Action><Condition>is_surrounded</Condition><Action>capture_intruder</Action></Sequence><Action>move_towards_intruder</Action><Condition>is_intruder_captured</Condition><Action>capture_intruder</Action></Selector></Sequence></Selector><Action>detect_intruders</Action></Sequence><Action>surround_intruder</Action></Sequence></BehaviorTree>
###
3.// INSTRUCTIONS: Use only the following behaviors {'activate_sensors': 'Action: Activate all sensors. Always returns True.', 'chop_tree': "Action: Chop down the nearest tree and return True if successful, False if no tree is nearby.", 'collect_resource': 'Action: Collect the nearby resource. Returns True if successful, False if no resource is nearby.', 'drop_resource': 'Action: Drop the collected resource. Always returns True.', 'is_resource_reached': 'Condition: Check if the resource is within 10 units. Returns True if the resource is within 10 units of distance, False otherwise.', 'is_resource_collected': 'Condition: Check if a resource is successfully collected. Returns True if a resource has been collected, False otherwise.', 'is_tree_chopped': 'Condition: Check if a tree has been successfully chopped. Returns True if a tree has been chopped down, False otherwise.', 'move_to_resource': 'Action: Move towards the nearest resource. Always returns True.', 'take_rest': 'Action: Take a rest. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3.// USER COMMAND: generate behavior tree to 'Chop down the nearest tree, collect the resource, drop the resource, then take a rest.'Output only the XML behavior tree without extra text.
3.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>is_tree_chopped</Condition> <Action>collect_resource</Action> </Sequence> <Sequence> <Condition>is_resource_collected</Condition> <Action>drop_resource</Action> </Sequence> </Selector> <Action>take_rest</Action> </Sequence> </BehaviorTree>

###
4.// INSTRUCTIONS: Use only the following behaviors {'detect_enemy': 'Action: Detect an enemy within 30 units and return True if detected, False otherwise.', 'shoot_enemy': 'Action: Shoot the detected enemy within 20 units and return True if successful, False otherwise.', 'is_enemy_in_range': 'Condition: Check if an enemy is within 20 units. Returns True if an enemy is within 20 units of distance, False otherwise.', 'is_ammo_low': 'Condition: Check if ammo is low. Returns True if ammo is less than 10%, False otherwise.', 'reload_ammo': 'Action: Reload ammo. Always returns True.', 'evade_enemy': 'Action: Evade the detected enemy by moving away. Always returns True.', 'take_cover': 'Action: Take cover behind a nearby object. Always returns True.', 'is_cover_safe': 'Condition: Check if the current cover is safe. Returns True if it provides adequate protection, False otherwise.', 'continue_movement': 'Action: Continue previous movement. Always returns True.', 'is_enemy_detected': 'Condition: Check if an enemy is within 30 units. Returns True if an enemy is detected, False otherwise.', 'is_safe_distance': 'Condition: Check if distance to enemy is greater than 35 units. Returns True if distance is greater than 35 units, False otherwise.', 'task_completed': 'Action: Signal task completion by reloading and taking cover. Always return True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Detect an enemy, shoot if within range, reload ammo if low, then continue movement until safe distance is achieved.'Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Action>detect_enemy</Action> <Condition>is_enemy_in_range</Condition> <Action>shoot_enemy</Action> </Sequence> <Sequence> <Condition>is_ammo_low</Condition> <Action>reload_ammo</Action> </Sequence> </Selector> <Selector> <Sequence> <Condition>is_enemy_detected</Condition> <Action>evade_enemy</Action> </Sequence> <Selector> <Sequence> <Condition>is_safe_distance</Condition> <Action>continue_movement</Action> </Sequence> <Action>take_cover</Action> </Selector> </Selector> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'detect_food': 'Action: Detect nearby food source and return True if found, False otherwise.', 'eat_food': 'Action: Eat the detected food source and return True if successful, False otherwise.', 'is_hungry': 'Condition: Check if hunger level is greater than 80%. Returns True if hunger level is >80%, False otherwise.', 'is_full': 'Condition: Check if hunger level is less than 20%. Returns True if hunger level is <20%, False otherwise.', 'is_food_available': 'Condition: Check if food is available nearby. Returns True if food is detected, False otherwise.', 'move_to_food': 'Action: Move towards the detected food source. Always returns True.', 'take_nap': 'Action: Take a nap for 30 minutes. Always returns True.', 'is_sleepy': 'Condition: Check if energy level is less than 30%. Returns True if energy level is <30%, False otherwise.', 'is_food_found': 'Condition: Check if food is successfully eaten. Returns True if food is successfully eaten, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Find and eat food, take a nap if energy is low, until hunger level is satisfied.'Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Action>detect_food</Action> <Condition>is_food_available</Condition> <Action>move_to_food</Action> <Condition>is_food_found</Condition> <Action>eat_food</Action> </Sequence> <Selector> <Condition>is_sleepy</Condition> <Action>take_nap</Action> </Selector> </Selector> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'detect_target': 'Action: Detect the designated target. Returns True if target is detected, False otherwise.', 'track_target': 'Action: Track the movement of the target. Always returns True.', 'approach_target': 'Action: Move towards the target. Always returns True.', 'is_target_reached': 'Condition: Check if target is within 10 units. Returns True if the target is within 10 units of distance, False otherwise.', 'is_target_lost': 'Condition: Check if target is lost. Returns True if target is no longer detected, False otherwise.', 'stop_tracking': 'Action: Stop tracking the target and continue previous behavior. Always returns True.', 'avoid_obstacles': 'Action: Avoid obstacles while approaching the target. Always returns True.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear 
###
3. // INSTRUCTIONS: Use only the following behaviors {'check_battery_level': 'Action: Checks the battery level of the robot and returns True if it is above a certain threshold, False otherwise.', 'charge_battery': 'Subtree node: Represents a behavior tree for finding a charging station and charging the battery.', 'follow_human': "Action: Follows and mimics the movement of a human. The behavior tree for this behavior should also include a condition to check if the human is within a certain range and stop following if they move out of range.", 'is_finished_tour': 'Condition: Checks if the robot has completed its tour of the facility. Returns True if complete, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3.// USER COMMAND: Follow and assist a human during a facility tour while also managing battery levels and finding a charging station if needed.
3.// OUTPUT:
<BehaviorTree><Selector><Condition>is_finished_tour</Condition><Sequence><Action>check_battery_level</Action><Sequence><Condition>follow_human</Condition><Selector><Sequence><Action>charge_battery</Action><Action>wait</Action></Selector></Sequence></Sequence></Selector></BehaviorTree>
 
###
4. // INSTRUCTIONS: Use only the following behaviors {'detect_enemy': 'Action: Uses sensors to detect enemy units in the area. Returns True if enemies are present, False otherwise.', 'avoid_enemy': 'Action: If an enemy is detected, avoid them and move to a safe location. Always returns True.', 'attack_enemy': 'Action: If an enemy is detected, attack them. Always returns True.', 'reload': 'Action: Checks if the ammo level is below a certain threshold and reloads the weapon if needed. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Lead a team of robots in a military operation, prioritizing detecting and eliminating enemies while also managing ammo and reloading when necessary.
4.// OUTPUT:
<BehaviorTree><Selector><Condition>detect_enemy</Condition><Sequence><Action>avoid_enemy</Action><Action>reload</Action></Sequence><Sequence><Condition>detect_enemy</Condition><Action>attack_enemy</Action><Action>reload</Action></Sequence></Selector></BehaviorTree>
 
###
5. // INSTRUCTIONS: Use only the following behaviors {'collect_resources': 'Subtree node: Represents a behavior tree for gathering resources in a specific area.', 'return_to_base': 'Action: Return to the designated base or home location. Always returns True.', 'deposit_resources': 'Action: After returning to base, deposit the collected resources. Always returns True.', 'is_in_enemy_territory': 'Condition: Checks if the robot is currently in enemy territory. Returns True if in enemy territory, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Explore and gather resources in uncharted territory, but prioritize returning and depositing resources if in enemy territory.
5.// OUTPUT:
<BehaviorTree><Selector><Condition>is_in_enemy_territory</Condition><Sequence><Action>collect_resources</Action><Action>return_to_base</Action><Action>deposit_resources</Action></Sequence><Sequence><Condition>is_in_enemy_territory</Condition><Action>return_to_base</Action></Sequence></Selector></BehaviorTree>
 
###
6. // INSTRUCTIONS: Use only the following behaviors {'detect_fire': 'Action: Uses sensors to detect any fires in the area. Returns True if a fire is detected, False otherwise.', 'extinguish_fire': 'Action: If a fire is detected, use a fire extinguisher to put it out. Always returns True.', 'inspect_building': 'Subtree node: Represents a behavior tree for inspecting a designated building for any potential fire hazards.', 'is_terrain_safe': 'Condition: Checks if the terrain is safe for the robot to navigate. Returns True if safe, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Inspect and assess potential fire hazards in a designated building while also detecting and extinguishing any fires in the area.
6.// OUTPUT:
<BehaviorTree><Selector><Condition>is_terrain_safe</Condition><Action>inspect_building</Action><Sequence><Action>detect_fire</Action><Action>extinguish_fire</Action></Sequence></Selector></BehaviorTree>
 
###
7. // INSTRUCTIONS: Use only the following behaviors {'find_path': 'Subtree node: Uses pathfinding algorithms to find the best route to a designated location.', 'follow_path': 'Subtree node: Follows the path generated by the find_path behavior.', 'pick_up_cargo': 'Action: Picks up and carries cargo to a designated location. Always returns True.', 'is_delivery_complete': 'Condition: Checks if the cargo has been successfully delivered. Returns True if delivered, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: Use pathfinding to deliver a package from a starting location to a designated destination, picking up and dropping off the package as needed.
7.// OUTPUT:
<BehaviorTree><Selector><Condition>is_delivery_complete</Condition><Sequence><Action>find_path</Action><Action>follow_path</Action><Action>pick_up_cargo</Action><Action>follow_path</Action><Action>drop_off_cargo</Action></Sequence></Selector></BehaviorTree> 
###
3.// INSTRUCTIONS: Use only the following behaviors {'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'follow_leader': 'Action: Follow the leader robot. Always returns True.', 'is_leader_near': 'Condition: Check for the presence of the leader robot within 10 units. Returns True if the leader is nearby, False otherwise.', 'check_environment': 'Action: Check the environment for potential obstacles. Always returns True.', 'move_to_target': 'Action: Move towards the designated target. Returns True once arrived at the target.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3.// USER COMMAND: create behavior tree to 'follow the leader, check environment for obstacles, and move to designated target.' Output only the XML behavior tree without extra text.
3.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Action>follow_leader</Action> <Sequence> <Condition>is_leader_near</Condition> <Action>move_to_target</Action> </Sequence> </Sequence> <Action>check_environment</Action> </Selector> </BehaviorTree>

###
4.// INSTRUCTIONS: Use only the following behaviors {'create_leader': 'Action: Create a new leader robot. Always returns True.', 'follow_leader': 'Action: Follow the leader robot. Always returns True.', 'is_leader_created': 'Condition: Check if a leader robot exists. Returns True if a leader has been created, False otherwise.', 'join_leader': 'Action: Join the leader robot. Always returns True.', 'is_follower': 'Condition: Check if the robot is a follower. Returns True if the robot is a follower, False otherwise.', 'move_to_target': 'Action: Move towards the designated target. Returns True once arrived at the target.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: create a leader robot and join it. If already a follower, move to designated target.Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Action>create_leader</Action> <Sequence> <Condition>is_leader_created</Condition> <Action>join_leader</Action> </Sequence> </Sequence> <Sequence> <Condition>is_follower</Condition> <Action>move_to_target</Action> </Sequence> </Selector> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'wander': 'Action: Move randomly within the environment. Always returns True.', 'attack_nearest_enemy': 'Action: Attack the nearest enemy. Returns True once the attack is completed.', 'is_enemy_near': 'Condition: Check if an enemy is within 10 units. Returns True if an enemy is nearby, False otherwise.', 'flee': 'Action: Flee from the current location. Returns True once the robot has reached a safe distance.', 'is_safe_distance_reached': 'Condition: Check if the robot has reached a safe distance. Returns True if the robot has escaped to a safe distance, False otherwise.', 'follow_team_member': 'Action: Follow a team member. Always returns True.', 'is_enemy_targeted': 'Condition: Check if the enemy is a targeted enemy. Returns True if the enemy is a targeted enemy, False otherwise.', 'search_for_targets': 'Action: Search for potential targets. Returns True once a target has been identified.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: If there is enemy nearby, attack. Otherwise flee from the current location.Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>is_enemy_near</Condition> <Action>attack_nearest_enemy</Action> </Sequence> <Sequence> <Condition>is_enemy_near</Condition> <Sequence> <Action>wander</Action> <Sequence> <Condition>is_safe_distance_reached</Condition> <Action>flee</Action> </Sequence> </Sequence> </Sequence> </Selector> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'detect_obstacle': 'Action: Detect any obstacles in the robot's path. Returns True once an obstacle is identified.', 'move_away_from_obstacle': 'Action: Move away from the detected obstacle. Returns True once the robot has moved to a safe distance.', 'is_safe_distance_reached': 'Condition: Check if the robot has reached a safe distance. Returns True if the robot has moved to a safe distance, False otherwise.', 'stop_movement': 'Action: Stop all robot movements. Always returns True.', 'return_to_home': 'Action: Return to the starting position. Returns True once the robot has returned to the starting position.', 'is_home_reached': 'Condition: Check if the robot has returned to the starting position. Returns True if the robot has returned to the starting position, False otherwise.', 'collect_resources': 'Action: Collect resources while moving. Returns True once resources have been collected.', 'is_resource_available': 'Condition: Check if resources are available. Returns True if resources are available, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: If obstacle is detected, move away from it. If the robot is safe, collect resources while moving. Otherwise, return to home.Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Action>detect_obstacle</Action> <Sequence> <Condition>is_safe_distance_reached</Condition> <Action>move_away_from_obstacle</Action> </Sequence> </Sequence> <Sequence> <Condition>is_resource_available</Condition> <Action>collect_resources</Action> <Sequence> <Condition>is_home_reached</Condition> <Action>return_to_home</Action> </Sequence> </Sequence> </Selector> </BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'follow_team_leader': 'Action: Follow the team leader. Always returns True.', 'is_leader_targeted': 'Condition: Check if the leader is targeted. Returns True if the leader is the current target, False otherwise.', 'attack_target': 'Action: Attack the###
3.// INSTRUCTIONS: Use only the following behaviors {'move_to_location': 'Action: Move the robot to a specified location. Returns True if successful, False otherwise.', 'check_battery_level': 'Condition: Check the battery level of the robot. Returns True if the battery level is above the threshold, False otherwise.', 'collect_object': 'Action: Collect an object from the environment and store it. Returns True if successful, False otherwise.', 'deposit_object': 'Action: Deposit the collected object. Returns True if successful, False otherwise.', 'detect_obstacles': 'Condition: Detect and avoid any obstacles in the robot's path. Returns True if no obstacles are detected, False otherwise.', 'recharge_battery': 'Action: Recharge the robot's battery. Returns True if successful, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3.// USER COMMAND: Perform a task where the robot moves to a specified location, collects an object, avoids obstacles, and then deposits the object before recharging its battery.
3.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Action>move_to_location</Action> <Condition>check_battery_level</Condition> <Action>collect_object</Action> <Condition>detect_obstacles</Condition> <Action>deposit_object</Action> <Condition>recharge_battery</Condition> </Sequence> </Selector> </BehaviorTree>

###
4.// INSTRUCTIONS: Use only the following behaviors {'search_for_item': 'Action: Search for a specific item in the environment. Returns True if the item is found, False otherwise.', 'pick_up_item': 'Action: Pick up the item found in the environment. Returns True if successful, False otherwise.', 'return_to_base': 'Action: Return to the base with the item. Returns True if successful, False otherwise.', 'check_inventory_capacity': 'Condition: Check the current inventory capacity. Returns True if capacity is not full, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Find and pick up a specific item in the environment, and then return it to the base.
4.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Action>search_for_item</Action> <Action>pick_up_item</Action> <Condition>check_inventory_capacity</Condition> <Action>return_to_base</Action> </Sequence> </Selector> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'detect_enemy': 'Condition: Detect and locate an enemy in the vicinity. Returns True if an enemy is found, False otherwise.', 'approach_enemy': 'Action: Approach the enemy detected. Returns True if successful, False otherwise.', 'attack_enemy': 'Action: Attack the enemy within range. Returns True if successful, False otherwise.', 'retreat': 'Action: Retreat from the enemy and move out of range. Returns True if successful, False otherwise.', 'is_health_low': 'Condition: Check if the agent's health is below a threshold. Returns True if health is low, False otherwise.', 'use_health_pack': 'Action: Use a health pack to restore agent's health. Returns True if successful, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Attack and defeat an enemy detection and location, and retreat if health falls below a certain threshold.
5.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>detect_enemy</Condition> <Action>approach_enemy</Action> <Action>attack_enemy</Action> <Trigger>on_low_health</Trigger> <Sequence> <Condition>is_health_low</Condition> <Action>use_health_pack</Action> </Sequence> <Action>retreat</Action> </Sequence> </Selector> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'detect_fire': 'Condition: Detect and locate a fire in the environment. Returns True if a fire is found, False otherwise.', 'call_fire_department': 'Action: Initiate a call to the fire department. Returns True if successful, False otherwise.', 'move_to_safe_location': 'Action: Move to a safe location away from the fire. Returns True if successful, False otherwise.', 'check_wind_direction': 'Condition: Check the direction of the strong winds. Returns True if the wind is not blowing towards the fire, False otherwise.', 'check_num_fire_extinguisher': 'Condition: Check the number of fire extinguishers available. Returns True if there are enough, False otherwise.', 'use_fire_extinguisher': 'Action: Use a fire extinguisher to put out the fire. Returns True if successful, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Quickly assess the situation and call for the fire department, then move to a safe location and use a fire extinguisher to put out the fire if the wind is not blowing towards it and there are enough fire extinguishers available.
6.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>detect_fire</Condition> <Action>call_fire_department</Action> <Action>move_to_safe_location</Action> <Condition>check_wind_direction</Condition> <Action>use_fire_extinguisher</Action> </Sequence> <Condition>check_num_fire_extinguisher</Condition> </Selector> </BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'detect_intruder': 'Condition: Detect and identify an intruder in the vicinity. Returns True if an intruder is found, False otherwise.', 'warn_intruder': 'Action: Initiate a warning to the intruder. Returns True if successful, False otherwise.', 'intercept_intruder': 'Action: Intercept and immobilize the intruder. Returns True if successful, False otherwise.', 'escort_to_designated_area': 'Action: Escort the intruder to specified area for further actions. Returns True if successful, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: Detect and intercept an intruder, issue a warning, and escort them to a designated area.
7.// OUTPUT:
<BehaviorTree> <Sequence> <Condition>detect_intruder</Condition> <Action>warn_intruder</Action> <Action>intercept_intruder</Action> <Action>escort_to_designated_area</Action> </Sequence> </BehaviorTree><BehaviorTree><Sequence><Condition>is_area_mapped</Condition><Action>task_completed</Action></Sequence><Sequence><Condition>is_target_detected</Condition><Action>continue_movement_agent</Action></Sequence><Sequence><Condition>is_target_reached</Condition><Action>change_color_to_green</Action></Sequence><Action>change_color_to_white</Action><Action>form_line</Action></BehaviorTree> 
###
3.// INSTRUCTIONS: Use only the following behaviors {'search_target': 'Action: Search for the target object within the given radius. Always returns True.', 'get_closer': 'Action: Move closer to the target object if it is within a certain distance. Always returns True.', 'is_target_reached': 'Condition: Checks if the target is within reach. Returns True if the target is within a set distance, False otherwise.', 'rotate_clockwise': 'Action: Rotate the robot in a clockwise direction. Always returns True.', 'detect_obstacles': 'Action: Scan the area for obstacles. Always returns True.', 'is_obstacle_detected': 'Condition: Check if an obstacle is detected within the scanning radius. Returns True if an obstacle is detected, False otherwise.', 'backtrack': 'Action: Move back to the previous location. Always returns True.', 'carry_target': 'Action: Lift and carry the target object. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3.// USER COMMAND: When searching for the target, if an obstacle is detected, rotate clockwise and backtrack to the previous location. Once the obstacle is cleared, continue searching for the target and carry it when reached.
3.// OUTPUT:
<BehaviorTree><Sequence><Action>search_target</Action></Sequence><Sequence><Condition>is_obstacle_detected</Condition><Action>rotate_clockwise</Action><Sequence><Action>backtrack</Action></Sequence></Sequence><Selector><Sequence><Selector><Condition>is_target_reached</Condition><Action>carry_target</Action></Selector><Sequence><Selector><Condition>is_obstacle_detected</Condition><Action>rotate_clockwise</Action><Sequence><Action>backtrack</Action></Sequence></Selector></Sequence></Selector></Sequence></BehaviorTree>
 
###
4.// INSTRUCTIONS: Use only the following behaviors {'move_to_nearest': 'Action: Move to the nearest designated location. Always returns True.', 'detect_food': 'Action: Use sensors to detect food sources. Always returns True.', 'is_food_detected': 'Condition: Check if food is detected. Returns True if food is detected, False otherwise.', 'is_empty': 'Condition: Check if the agent's inventory is empty. Returns True if inventory is empty, False otherwise.', 'collect_food': 'Action: Collect food from the source. Always returns True.', 'is_inventory_full': 'Condition: Check if the agent's inventory is full. Returns True if inventory is full, False otherwise.', 'deposit_food': 'Action: Deposit food at designated location. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Find the nearest food source, collect food until inventory is full, then deposit at a designated location. If no food source is detected, move to a new location.
4.// OUTPUT:
<BehaviorTree><Sequence><Action>move_to_nearest</Action></Sequence><Sequence><Action>detect_food</Action><Selector><Sequence><Condition>is_food_detected</Condition><Sequence><Selector><Condition>is_inventory_full</Condition><Action>deposit_food</Action></Selector><Sequence><Selector><Condition>is_empty</Condition><Action>collect_food</Action></Selector></Sequence></Sequence></Selector></Sequence><Sequence><Action>deposit_food</Action></Sequence><Sequence><Action>move_to_nearest</Action></Sequence></BehaviorTree>
 
###
5.// INSTRUCTIONS: Use only the following behaviors {'is_swarm_together': 'Condition: Check if the entire swarm is together. Returns True if all robots in the swarm are in the same location, False otherwise.', 'move_to_location': 'Action: Move towards a specific location. Always returns True.', 'scatter': 'Action: Scatter and move to random locations within a designated area. Always returns True.', 'is_at_designated_loc': 'Condition: Check if the robot is at the designated location. Returns True if at the designated location, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Keep the swarm together and move towards a designated location. If the swarm is not together, scatter and regroup before continuing towards the designated location. Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_swarm_together</Condition><Action>move_to_location</Action></Sequence><Sequence><Selector><Condition>is_at_designated_loc</Condition><Action>move_to_location</Action></Selector><Action>scatter</Action></Sequence></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'detect_intruder': 'Action: Use sensors to detect any potential intruders. Always returns True.', 'alert_swarm': 'Action: Use signal to alert the other robots in the swarm. Always returns True.', 'gather_swarm': 'Action: Gather the swarm and move to a designated location. Always returns True.', 'is_swarm_gathered': 'Condition: Check if the swarm is gathered. Returns True if all robots are in the same location, False otherwise.', 'is_intruder_detected': 'Condition: Check if an intruder is detected. Returns True if an intruder is detected, False otherwise.', 'defend_nest': 'Action: Defend the nest by attacking any detected intruders. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Continuously detect for potential intruders and alert the swarm to gather and defend the nest when an intruder is detected.
6.// OUTPUT:
<BehaviorTree><Sequence><Action>detect_intruder</Action><Selector><Sequence><Condition>is_intruder_detected</Condition><Action>alert_swarm</Action><Sequence><Condition>is_swarm_gathered</Condition><Action>gather_swarm</Action></Sequence></Selector></Sequence><Sequence><Condition>is_swarm_gathered</Condition><Action>defend_nest</Action><Selector><Sequence><Action>alert_swarm</Action><Sequence><Condition>is_intruder_detected</Condition><Action>defend_nest</Action></Sequence></Selector></Sequence></Sequence></BehaviorTree>
 
###
7.// INSTRUCTIONS: Use only the following behaviors {'start_search': 'Action: Begin searching the designated area for targets. Always returns True.', 'detect_target': 'Action: Use sensors to detect potential targets. Always returns True.', 'is_target_found': 'Condition: Check if a target is found. Returns True if a target is detected, False otherwise.', 'pick_up_target': 'Action: Pick up the target object if it is within reach. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user 
###
3.// INSTRUCTIONS: Use only the following behaviors {'decide_next_action': 'Action: Decide between moving forward, left or right. Randomly chooses one action. Always returns True.', 'move_forward': 'Action: Move forward in a straight line. Always returns True.', 'rotate_left': 'Action: Rotate agent left by 90 degrees. Always returns True.', 'rotate_right': 'Action: Rotate agent right by 90 degrees. Always returns True.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wait': 'Action: Stay in place and wait. Always returns True.', 'scan_node': 'Action: Perform a scan of the area for nearby objects. Always returns True.', 'enough_objects': 'Condition: Check if enough objects were detected. Returns True if enough objects are present, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3.// USER COMMAND: search for a path, move forward until obstacle is detected, then rotate left or right and continue moving forward until enough objects are detected.
3.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Action>scan_node</Action> <Sequence> <Condition>is_obstacle_detected</Condition> <Selector> <Action>rotate_left</Action> <Action>rotate_right</Action> </Selector> <Sequence> <Condition>enough_objects</Condition> <Action>task_completed</Action> </Sequence> </Sequence> <Sequence> <Action>move_forward</Action> </Sequence> </Selector> </BehaviorTree>

###
4.// INSTRUCTIONS: Use only the following behaviors {'detect_object': 'Action: Detect and identify objects in the environment. Always returns True.', 'move_to_object': 'Action: Move towards the target object identified. Always returns True.', 'pick_up_object': 'Action: Pick up the identified object and store it. Always returns True.', 'deposit_object': 'Action: Deposit stored object in designated area. Always returns True.', 'is_target_reached': 'Condition: Check if target object is within reach. Returns True if the object is close enough to be picked up, False otherwise.', 'is_object_identified': 'Condition: Check if an object has been detected and identified. Returns True if an object has been identified, False otherwise. }, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Detect and pick up an object, then move to deposit it in a designated area.
4.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Action>detect_object</Action> <Action>pick_up_object</Action> <Sequence> <Condition>is_target_reached</Condition> <Action>deposit_object</Action> </Sequence> </Sequence> </Selector> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'move_to_position': 'Action: Move towards a specified position. Always returns True.', 'follow_obstacle': 'Action: Follow a detected obstacle. Always returns True.', 'detect_color': 'Action: Detect the color of an object. Always returns True.', 'color_matches': 'Condition: Check if detected color matches the desired color. Returns True if the colors match, False otherwise.', 'scan_area': 'Action: Perform a scan of the area for nearby objects. Always returns True.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Scan the area for a specific color, then move to that position, following any detected obstacles along the way.
5.// OUTPUT:
 <BehaviorTree> <Sequence> <Action>scan_area</Action> <Condition>color_matches</Condition> <Action>follow_obstacle</Action> <Sequence> <Action>move_to_position</Action> </Sequence> </Sequence> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'detect_mark': 'Action: Detect and identify marks in the environment. Always returns True.', 'move_to_mark': 'Action: Move towards the identified mark. Always returns True.', 'display_image': 'Action: Display an image on screen. Always returns True.', 'is_mark_detected': 'Condition: Check if a mark has been detected. Returns True if a mark is detected, False otherwise. }, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Detect and move towards a specific mark, then display an image on screen.
6.// OUTPUT:
<BehaviorTree> <Sequence> <Action>detect_mark</Action> <Action>move_to_mark</Action> <Action>display_image</Action> </Sequence> </BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'detect_sound': 'Action: Detect and identify sounds in the environment. Always returns True.', 'follow_sound': 'Action: Move towards the source of the detected sound. Always returns True.', 'identify_sound_type': 'Action: Identify the type of sound heard. Always returns True.', 'is_sound_identified': 'Condition: Check if a sound has been identified. Returns True if a sound has been identified, False otherwise.' }, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: Detect and identify a sound, then move towards the source of the sound.
7.// OUTPUT:
<BehaviorTree> <Sequence> <Action>detect_sound</Action> <Action>identify_sound_type</Action> <Action>follow_sound</Action> </Sequence> </BehaviorTree>

###
3.// INSTRUCTIONS: Use only the following behaviors {'navigate_to_hotel': "Action: Move the robot to the hotel location. Always returns True.", 'explore_surroundings': "Action: Explore the hotel's surroundings for potential hazards or threats. Always returns True.", 'request_assistance': 'Action: Send a request for assistance to other robots. Always returns True.', 'is_enemy_detected': 'Condition: Check if an enemy is detected using sensors. Returns True if an enemy is detected, False otherwise.', 'is_help_received': 'Condition: Check if help has been received from other robots. Returns True if help is received, False otherwise.', 'is_area_safe': 'Condition: Check if the area is safe for the robot to navigate. Returns True if the area is safe, False otherwise.', 'is_hotel_reached': 'Condition: Check if the hotel location has been reached. Returns True if the hotel location is reached, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3.// USER COMMAND: Generate behavior tree for a robot to navigate to a hotel, explore the surroundings, call for help if an enemy is detected, and only proceed once the area is safe.
3.// OUTPUT:
<BehaviorTree><Sequence><Action>navigate_to_hotel</Action><Selector><Action>explore_surroundings</Action><Sequence><Condition>is_enemy_detected</Condition><Action>request_assistance</Action><Condition>is_help_received</Condition></Sequence></Selector><Condition>is_area_safe</Condition><Selector><Sequence><Condition>is_hotel_reached</Condition><Action>agent_movement_freeze</Action></Sequence><Action>wait</Action></Selector></Sequence></BehaviorTree>

###
4.// INSTRUCTIONS: Use only the following behaviors {'random_movement': 'Action: Move randomly within the environment. Always returns True.', 'move_to_object': 'Action: Move to the specified object location. Always returns True.', 'pick_up': 'Action: Pick up the specified object at the current location. Always returns True.', 'drop_off': 'Action: Drop off the object at a specified location. Always returns True.', 'is_object_in_range': 'Condition: Check if the specified object is within range. Returns True if the object is within range, False otherwise.', 'is_object_picked_up': 'Condition: Check if the specified object has been picked up. Returns True if the object has been picked up, False otherwise.', 'is_object_dropped_off': 'Condition: Check if the specified object has been dropped off. Returns True if the object has been dropped off, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Generate behavior tree for a robot to pick up a box, move to a designated area, and drop off the box.
4.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_object_in_range</Condition><Action>move_to_object</Action><Sequence><Condition>is_object_picked_up</Condition><Action>drop_off</Action></Sequence></Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'follow_path': 'Action: Follow the specified path. Always returns True.', 'scan_for_obstacles': 'Action: Scan the current area for obstacles using sensors. Always returns True.', 'is_obstacle_detected': 'Condition: Check if an obstacle is detected. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if the path ahead is clear. Returns True if no obstacles are detected, False otherwise.', 'join_group': 'Action: Join the existing group of robots. Always returns True.', 'is_group_member': 'Condition: Check if the robot is a member of the group. Returns True if the robot is a member of the group, False otherwise.', 'create_new_group': 'Action: Create a new group of robots. Always returns True.', 'is_group_formed': 'Condition: Check if the group has been formed. Returns True if the group has been formed, False otherwise.', 'is_stop_requested': 'Condition: Check if a stop request has been received from the group leader. Returns True if a stop request has been received, False otherwise.', 'stop_movement': 'Action: Stop the robot's movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Generate behavior tree for a robot to follow a designated path, join a group, and stop movement if requested by the group leader.
5.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_obstacle_detected</Condition><Action>scan_for_obstacles</Action><Condition>is_path_clear</Condition><Selector><Action>follow_path</Action><Selector><Condition>is_group_member</Condition><Action>join_group</Action></Selector><Sequence><Repeater><Condition>is_stop_requested</Condition><Action>stop_movement</Action></Repeater></Sequence></Selector><Condition>is_group_formed</Condition><Selector><Action>wait</Action><Condition>is_stop_requested</Condition></Selector></Sequence></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'calibrate_sensors': 'Action: Calibrate the sensors. Always returns True.', 'scan_for_tags': 'Action: Scan the environment for RFID tags using sensors. Always returns True.', 'detect_trash': 'Action: Detect the trash using sensors. Always returns True.', 'is_tag_detected': 'Condition: Check if an RFID tag is detected. Returns True if an RFID tag is detected, False otherwise.', 'is_trash_detected': 'Condition: Check if trash is detected. Returns True if trash is detected, False otherwise.', 'is_sensors_calibrated': 'Condition: Check if the sensors are calibrated. Returns True if the sensors are calibrated, False otherwise.', 'is_trash_picked_up': 'Condition: Check if trash has been picked up. Returns True if trash has been picked up, False otherwise.', 'pick_up_trash': 'Action: Pick up the trash at the current location. Always returns True.', 'deposit_trash': 'Action: Deposit the trash at the designated location. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Generate behavior tree for a robot to calibrate sensors, detect and pick up trash, and deposit the trash.
6.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_sensors_calibrated</Condition><Action>calibrate_sensors</Action><Selector><Action>scan_for_tags</Action><Action>detect_trash</Action><Selector><Sequence><Condition>is_tag_detected</Condition><Action>pick_up_trash</Action></Sequence><Sequence><Condition>is_trash_detected</Condition><Action>Note: I have added an extra 'reform_formation' action node to ensure that the formation is maintained even after navigating past an obstacle.

###
4.// INSTRUCTIONS: Use only the following behaviors {'locate_target': 'Action: Scan surroundings and find target location. Always returns True.', 'move_to_target': 'Action: Move towards the target location. Always returns True.', 'align_with_target': 'Action: Align with the target location. Always returns True.', 'lower_arm': 'Action: Lower the arm to pick up object. Always returns True.', 'grasp_object': 'Action: Use the gripper to grasp the object. Always returns True.', 'is_object_grasped': 'Condition: Check if the object is successfully grasped. Returns True if the object is being carried, False otherwise.', 'is_target_reached': 'Condition: Check if the target location is within reach. Returns True if the target location is reached, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Pick up an object at a specific location and place it in a designated area.
// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Action>locate_target</Action><Action>move_to_target</Action></Sequence><Sequence><Condition>is_target_reached</Condition><Sequence><Action>align_with_target</Action><Action>lower_arm</Action><Action>grasp_object</Action></Sequence></Sequence></Selector><Action>move_to_designated_area</Action><Action>release_object</Action></Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'replicate': 'Action: Replicate self and create multiple copies of the robot. Always returns True.', 'join_formation': 'Action: Join the formation with other robots. Always returns True.', 'is_formation_complete': 'Condition: Check if the formation is complete with all robots in position. Returns True if the formation is complete, False otherwise.', 'move_to_resource': 'Action: Move towards the nearest resource. Always returns True.', 'collect_resource': 'Action: Collect the resource and bring it back to the nest. Always returns True.', 'is_resource_depleted': 'Condition: Check if the resource has been completely depleted. Returns True if the resource is depleted, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Create a swarm of robots to replicate and collect resources while maintaining formation until resource is depleted.
5.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>is_resource_depleted</Condition><Action>move_to_resource</Action><Action>collect_resource</Action><Action>return_to_nest</Action></Sequence><Action>replicate</Action></Selector><Sequence><Condition>is_formation_complete</Condition><Action>join_formation</Action></Sequence></Sequence></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'search_for_path': 'Action: Continuously search for a new path if the current one is blocked. Always returns True.', 'follow_path': 'Action: Move forward along the specified path. Always returns True.', 'turn_right': 'Action: Turn 90 degrees to the right. Always returns True.', 'turn_left': 'Action: Turn 90 degrees to the left. Always returns True.', 'is_target_visible': 'Condition: Check if the target is within the line of sight. Returns True if the target is visible, False otherwise.', 'is_obstacle_ahead': 'Condition: Check if there is an obstacle blocking the current path. Returns True if an obstacle is detected, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Find the shortest path to the target location while avoiding obstacles and staying within the line of sight.
6.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>is_target_visible</Condition><Action>follow_path</Action></Sequence><Sequence><Condition>is_obstacle_ahead</Condition><Action>turn_right</Action><Action>search_for_path</Action></Sequence></Selector><Action>turn_left</Action></Sequence></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'move_forward': 'Action: Move one step forward in the current direction. Always returns True.', 'detect_object': 'Action: Use sensors to detect the nearest object. Always returns True.', 'grab_object': 'Action: Use the gripper to grab onto the object. Always returns True.', 'lower_arm': 'Action: Lower the arm to pick up the object. Always returns True.', 'is_object_grabbed': 'Condition: Check if the object is successfully grabbed and held in place. Returns True if the object is being held, False otherwise.', 'deploy_tool': 'Action: Deploy a tool or mechanism from the robot. Always returns True.', 'activate_tool': 'Action: Activate the deployed tool. Always returns True.', 'is_tool_active': 'Condition: Check if the deployed tool is currently activated. Returns True if the tool is active, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: Deploy and activate a tool to perform a specific task, such as extinguishing a fire or repairing a structure.
7.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Action>detect_object</Action><Action>move_forward</Action></Sequence><Sequence><Condition>is_object_grabbed</Condition><Sequence><Action>lower_arm</Action><Action>grab_object</Action><Action>deploy_tool</Action><Action>activate_tool</Action></Sequence></Sequence></Selector><Condition>is_tool_active</Condition></Sequence></BehaviorTree>
###
3.// INSTRUCTIONS: Use only the following behaviors {'gather_resources': 'Action: Directs the robot to gather resources from the environment. Always returns True.', 'build_structure': 'Action: Instructs the robot to build a specified structure. Always returns True.', 'is_at_resource_limit': 'Condition: Checks if the robot has reached the maximum resource capacity. Returns True if the limit is reached, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3.// USER COMMAND: Gather resources until maximum capacity is reached, then build a structure.
3.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_at_resource_limit</Condition><Action>build_structure</Action></Sequence><Action>gather_resources</Action></Selector></BehaviorTree>

###
4.// INSTRUCTIONS: Use only the following behaviors {'explore': 'Action: Directs the robot to explore the environment for new areas to map. Always returns True.', 'map_area': 'Action: Instructs the robot to map the current area. Always returns True.', 'is_map_complete': 'Condition: Checks if the robot has finished mapping the entire environment. Returns True if mapping is complete, False otherwise.'}, to construct behavior tree in XML format to the following command.If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Explore and map the entire environment.
4.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_map_complete</Condition><Sequence><Action>explore</Action><Action>map_area</Action></Sequence></Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'navigate_to_destination': 'Action: Guides the robot to a specific destination. Always returns True.', 'detect_obstacles': 'Action: Scans the environment for obstacles and makes necessary adjustments to the path. Always returns True.', 'is_at_destination': 'Condition: Checks if the robot has reached the designated destination. Returns True if the destination is reached, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Navigate to a specific location, avoiding obstacles along the way.
5.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_at_destination</Condition><Selector><Sequence><Action>navigate_to_destination</Action><Action>detect_obstacles</Action></Sequence><Action>wait</Action></Selector></Sequence></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'search_and_identify_target': 'Action: Scans the environment for a specific target and notifies the robot when it is detected. Always returns True', 'move_to_target': 'Action: Guides the robot to the identified target. Always returns True.', 'has_target': 'Condition: Checks if the robot has a designated target. Returns True if a target is identified, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Search for a specific target and move towards it.
6.// OUTPUT:
<BehaviorTree><Sequence><Condition>has_target</Condition><Sequence><Action>move_to_target</Action><Action>search_and_identify_target</Action></Sequence></Sequence></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'identify_key_points': 'Action: Scans the environment for key points to visit. Always returns True', 'visit_point': 'Action: Guides the robot to the designated key point. Always returns True.', 'has_visited_all': 'Condition: Checks if the robot has visited all key points. Returns True if all key points have been visited, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: Visit all designated key points in the environment.
7.// OUTPUT:
<BehaviorTree><Sequence><Condition>has_visited_all</Condition><Selector><Sequence><Action>visit_point</Action><Action>identify_key_points</Action></Sequence><Action>wait</Action></Selector></Sequence></BehaviorTree> 
###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Move towards the target, but freeze movement if target is reached.'Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Condition>is_target_detected</Condition> <Sequence> <Action>continue_movement_agent</Action> <Condition>is_target_reached</Condition> <Action>agent_movement_freeze</Action> <Action>task_completed</Action> </Sequence> </Selector> </Sequence> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'move_randomly': 'Action: Move randomly within the environment. Always returns True.', 'navigate_to_target': 'Action: Navigate towards the target. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Generate behavior tree to 'Form a vertical line at the center, then navigate towards the target. If target is reached, freeze movement. If no target is detected, move randomly.'Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Action>form_line</Action> <Action>navigate_to_target</Action> <Condition>is_target_reached</Condition> <Action>agent_movement_freeze</Action> </Sequence> <Sequence> <Action>navigate_to_target</Action> <Action>move_randomly</Action> </Sequence> </Selector> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'go_through_door': 'Action: Navigate through the door. Returns True if successful, False otherwise.', 'is_agent_at_door': 'Condition: Check if agent is at the door. Returns True if agent is at the door, False otherwise.', 'is_agent_in_room': 'Condition: Check if agent is in the room. Returns True if agent is in the room, False otherwise.', 'is_door_open': 'Condition: Check if door is open. Returns True if door is open, False if closed.', 'open_door': 'Action: Open the door. Always returns True.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Go through the door, change color to green if in the room, change color to white if outside the room.'Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>is_agent_in_room</Condition> <Action>change_color_to_green</Action> <Selector> <Condition>is_agent_at_door</Condition> <Action>open_door</Action> <Condition>is_door_open</Condition> <Action>go_through_door</Action> </Selector> <Action>task_completed</Action> </Sequence> <Sequence> <Action>change_color_to_white</Action> </Sequence> </Selector> </BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'detect_target': 'Action: Use sensors to detect target. Returns True if target is detected, False otherwise.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'move_towards_target': 'Action: Move towards the target. Always returns True.', 'scan_surroundings': 'Action: Use sensors to scan surroundings. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: Generate behavior tree to 'Detect target, scan surroundings, move towards target. If target is reached, freeze movement.'Output only the XML behavior tree without extra text.
7.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Action>detect_target</Action> <Action>scan_surroundings</Action> </Sequence> <Selector> <Sequence> <Condition>is_target_detected</Condition> <Action>move_towards_target</Action> <Condition>is_target_reached</Condition> <Action>agent_movement_freeze</Action> </Sequence> <Action>task_completed</Action> </Selector> </Sequence> </BehaviorTree>

 
###
4.// INSTRUCTIONS: Use only the following behaviors {'find_food': 'Action: Move towards the nearest source of food and collect it. Always returns True.', 'find_water': 'Action: Move towards the nearest source of water and collect it. Always returns True.', 'store_food': 'Action: Store collected food in designated storage area. Always returns True.', 'store_water': 'Action: Store collected water in designated storage area. Always returns True.', 'is_food_available': 'Condition: Check if there is any food source within the vicinity. Returns True if food is available, False otherwise.', 'is_water_available': 'Condition: Check if there is any water source within the vicinity. Returns True if water is available, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Generate behavior tree for a swarm of robots to efficiently gather and store food and water
4.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_food_available</Condition><Selector><Sequence><Action>find_food</Action><Action>store_food</Action></Sequence><Action>wander</Action></Selector></Sequence><Sequence><Condition>is_water_available</Condition><Selector><Sequence><Action>find_water</Action><Action>store_water</Action></Sequence><Action>wander</Action></Selector></Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'detect_enemy': 'Condition: Check for enemy presence in the vicinity. Returns True if enemy is detected, False otherwise.', 'attack_enemy': 'Action: Engage and attack the detected enemy. Always returns True.', 'retreat': 'Action: Move away from enemy and find a safe location. Always returns True.', 'reinforce': 'Action: Call for reinforcement from other swarm robots. Always returns True.', 'is_ally_in_range': 'Condition: Check if an ally robot is within range for reinforcement. Returns True if ally is within range, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Generate behavior tree for a swarm of robots to defend against enemy attacks and call for reinforcement when needed
5.// OUTPUT:
<BehaviorTree><Sequence><Condition>detect_enemy</Condition><Selector><Sequence><Condition>is_ally_in_range</Condition><Action>reinforce</Action></Sequence><Sequence><Action>attack_enemy</Action><Action>retreat</Action></Sequence></Selector></Sequence></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'scan_area': 'Action: Rotate and scan the surrounding area for any potential threats or targets. Always returns True.', 'find_cover': 'Action: Move towards the nearest cover or shelter to protect against potential threats. Always returns True.', 'fire_weapon': 'Action: Fire weapon at designated target or area. Always returns True.', 'reload_weapon': 'Action: Reload weapon with available ammunition. Always returns True.', 'is_enemy_detected': 'Condition: Check if any enemy is detected within the vicinity. Returns True if enemy is detected, False otherwise.', 'is_weapon_loaded': 'Condition: Check if weapon has sufficient ammunition to fire. Returns True if loaded, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Generate behavior tree for a swarm of robots to effectively engage and neutralize potential threats in a combat scenario
6.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_enemy_detected</Condition><Selector><Sequence><Action>find_cover</Action><Selector><Sequence><Action>scan_area</Action><Action>fire_weapon</Action></Sequence><Sequence><Action>reload_weapon</Action><Action>fire_weapon</Action></Sequence></Selector></Sequence></Selector></Sequence></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'gather_wood': 'Action: Collect wood for construction or fuel. Always returns True.', 'collect_tools': 'Action: Search for and collect necessary tools for construction. Always returns True.', 'build_structure': 'Action: Use collected wood and tools to build a designated structure. Always returns True.', 'plant_seeds': 'Action: Plant seeds for future harvesting. Always returns True.', 'harvest_crops': 'Action: Harvest planted crops for consumption or trade. Always returns True.', 'is_tool_available': 'Condition: Check if necessary tool is available for use. Returns True if tool is available, False otherwise.', 'is_enough_wood_collected': 'Condition: Check if enough wood has been collected for the designated structure. Returns True if enough wood is collected, False otherwise.', 'is_crops_ready_to_harvest': 'Condition: Check if planted crops are ready for harvest. Returns True if crops are ready, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: Generate behavior tree for a swarm of robots to efficiently manage and maintain an agricultural area for sustenance and production
7.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_crops_ready_to_harvest</Condition><Action>harvest_crops</Action></Sequence><Selector><Sequence><Condition>is_tool_available</Condition><Action>collect_tools</Action></Sequence><Selector><Sequence><Action>gather_wood</Action><Condition>is_enough_wood_collected</Condition><Action>build_structure</Action></Sequence><Action>plant_seeds</Action></Selector></Selector></Selector></BehaviorTree> 
###
3.// INSTRUCTIONS: Use only the following behaviors {'explore': 'Action: Move randomly and explore the environment. Always returns True.', 'gather_resource': 'Action: Collect resource from the environment and return to nest. Returns True if successful, False if resource is not available.', 'detect_obstacle': 'Condition: Check for obstacles in the path. Returns True if obstacle is detected, False otherwise.', 'is_resource_available': 'Condition: Check if resource is available in the environment. Returns True if resource is present, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3.// USER COMMAND: find a resource, avoid obstacles, and return to nest.
3.// OUTPUT:
<BehaviorTree><Sequence><Action>explore</Action><Condition>detect_obstacle</Condition><Selector><Sequence><Condition>is_resource_available</Condition><Action>gather_resource</Action></Sequence><Action>explore</Action></Selector></Sequence></BehaviorTree>

###
4.// INSTRUCTIONS: Use only the following behaviors {'move_up': 'Action: Move one step upwards. Always returns True.', 'move_down': 'Action: Move one step downwards. Always returns True.', 'move_left': 'Action: Move one step to the left. Always returns True.', 'move_right': 'Action: Move one step to the right. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: move in a zigzag pattern from the current location to the target location at (5,5).
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>move_up</Action><Action>move_up</Action><Action>move_down</Action><Action>move_right</Action><Action>move_up</Action><Action>move_up</Action><Action>move_down</Action><Action>move_right</Action><Action>move_down</Action><Action>move_down</Action><Action>move_right</Action><Action>move_up</Action><Action>move_right</Action><Action>move_right</Action></Sequence></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'gather_resource': 'Action: Collect resource from the environment and return to nest. Returns True if successful, False if resource is not available.', 'detect_obstacle': 'Condition: Check for obstacles in the path. Returns True if obstacle is detected, False otherwise.', 'is_resource_available': 'Condition: Check if resource is available in the environment. Returns True if resource is present, False otherwise.', 'follow_path': 'Action: Follow given path by moving one step at a time. Returns True if path is successfully completed, False if an obstacle is encountered.', 'scavenge': 'Action: Scavenge for resources by moving randomly and collecting any resources encountered. Returns True if any resources are collected, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: follow a preset path while collecting resources and avoiding obstacles, or scavenge for resources if no preset path is available.
5.// OUTPUT:
<BehaviorTree><Sequence><Condition>detect_obstacle</Condition><Selector><Sequence><Condition>is_resource_available</Condition><Action>gather_resource</Action></Sequence><Action>scavenge</Action></Selector><Action>follow_path</Action></Sequence></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'move_toward_enemy': 'Action: Move towards the nearest enemy. Always returns True.', 'attack': 'Action: Attack nearest enemy. Returns True if successful, False if no enemy is detected.', 'health_low': 'Condition: Check if agent's health is below a certain threshold. Returns True if health is low, False otherwise.', 'range_low': 'Condition: Check if agent's attack or defense range is low. Returns True if range is low, False otherwise.', 'move_away_from_enemy': 'Action: Move away from the nearest enemy. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: engage in combat with the nearest enemy while staying alive and maintaining a safe distance.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>health_low</Condition><Selector><Sequence><Condition>range_low</Condition><Action>move_away_from_enemy</Action></Sequence><Action>move_toward_enemy</Action></Selector></Sequence><Selector><Condition>is_enemy_detected</Condition><Action>attack</Action></Selector></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'wander': 'Action: Move randomly within the environment. Always returns True.', 'is_resource_available': 'Condition: Check if resource is available in the environment. Returns True if resource is present, False otherwise.', 'gather_resource': 'Action: Collect resource from the environment and return to nest. Returns True if successful, False if resource is not available.', 'find_obstacles': 'Action: Search for obstacles in the environment. Returns True if an obstacle is found, False otherwise.', 'avoid_obstacle': 'Action: Move away from the obstacle and continue searching. Returns True if successfully avoided obstacle, False if still in close proximity.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: search for resources while avoiding obstacles, and gather resources if found.
7.// OUTPUT:
<BehaviorTree><Sequence><Condition>find_obstacles</Condition><Action>avoid_obstacle</Action></Sequence><Selector><Sequence><Condition>is_resource_available</Condition><Action>gather_resource</Action></Sequence><Action>wander</Action></Selector></BehaviorTree>
###
3.// INSTRUCTIONS: Use only the following behaviors {'move_to_target': "Action: Move towards target location. Returns True when target is reached.", 'gather_resource': "Action: Gather resources located at current position. Always returns True.", 'build_structure': "Action: Build a structure at current location. Always returns True.", 'is_resource_available': "Condition: Check if resources are available at current location. Returns True if resources are present, False otherwise.", 'is_structure_complete': "Condition: Check if structure is fully built. Returns True if structure is complete, False otherwise.", 'on_resource_low': "Event: Triggers when remaining resources at current location falls below a threshold. Returns True if resources are low, False otherwise."}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3.// USER COMMAND: Gather resources and build structure at current location. If resources are low, move to a new location and repeat the process.
3.// OUTPUT:
<BehaviorTree> <Sequence> <Action>gather_resource</Action> <Action>build_structure</Action> <Trigger>on_resource_low</Trigger> <Action>move_to_target</Action> <Action>gather_resource</Action> <Action>build_structure</Action> </Sequence> </BehaviorTree>

###
4.// INSTRUCTIONS: Use only the following behaviors {'move_to_destination': "Action: Move towards specified destination. Returns True when destination is reached.", 'attack_enemy': "Action: Attack enemy located at current position. Returns True when enemy is defeated.", 'call_reinforcements': "Action: Signal for reinforcements. Always returns True.", 'is_enemy_detected': "Condition: Check for enemies nearby. Returns True if an enemy is detected, False otherwise.", 'is_reinforcements_available': "Condition: Check if reinforcements are available. Returns True if reinforcements are present, False otherwise.", 'on_low_health': "Event: Triggers when agent's health falls below a threshold. Returns True if health is low, False otherwise."}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Move to specified destination and attack any enemies along the way. If health falls below a certain threshold, call for reinforcements.
4.// OUTPUT:
<BehaviorTree> <Sequence> <Action>move_to_destination</Action> <Trigger>on_enemy_detected</Trigger> <Action>attack_enemy</Action> <Trigger>on_low_health</Trigger> <Action>call_reinforcements</Action> </Sequence> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'search_target': "Action: Search for a specified target using a predefined search method. Returns True when target is found.", 'scan_surroundings': "Action: Use sensors to scan the surroundings. Always returns True.", 'gather_data': "Action: Gather data from the environment. Always returns True.", 'on_data_collected': "Event: Triggers when enough data is collected. Returns True when data is collected, False otherwise."}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Search for a specific target within the environment, using sensor scans and data collection. If enough data is collected, report back successful search.
5.// OUTPUT:
<BehaviorTree> <Sequence> <Action>search_target</Action> <Action>scan_surroundings</Action> <Action>gather_data</Action> <Trigger>on_data_collected</Trigger> </Sequence> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'explore_area': "Action: Explore the designated area using a predefined pathfinding algorithm. Returns True when exploration is complete.", 'take_sample': "Action: Take a sample from the environment. Always returns True.", 'analyze_sample': "Action: Analyze the sample. Always returns True.", 'on_analysis_complete': "Event: Triggers when sample analysis is complete. Returns True when analysis is complete, False otherwise."}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Explore the designated area, taking samples and analyzing them until a sample analysis is complete.
6.// OUTPUT:
<BehaviorTree> <Sequence> <Action>explore_area</Action> <Action>take_sample</Action> <Action>analyze_sample</Action> <Trigger>on_analysis_complete</Trigger> </Sequence> </BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'line_following': "Action: Follow a specified line using sensor data and predefined movements. Returns True when line is successfully followed.", 'identify_object': "Action: Use sensors to identify a specific object. Always returns True.", 'pick_up_object': "Action: Pick up the identified object. Always returns True.", 'drop_object': "Action: Drop the currently held object. Always returns True.", 'on_object_detected': "Event: Triggers when an object is detected. Returns True if the object matches the specified type, False otherwise.", 'on_object_reached': "Event: Triggers when the object is successfully picked up and reached the designated location. Returns True when the object is successfully transported, False otherwise."}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: Follow a specified line and pick up a specific object at the end of the line. Drop off the object at a designated location and return to pick up another object.
7.// OUTPUT:
<BehaviorTree> <Sequence> <Action>line_following</Action> <Trigger>on_object_detected</Trigger> <Action>identify_object</Action> <Action>pick_up_object</Action> <Action>line_following</Action> <Trigger>on_object_reached</Trigger> <Action>drop_object</Action> <Action>line_following</Action> </Sequence> </BehaviorTree> 
###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'navigate through a maze, detect obstacles, and avoid them' Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_path_clear</Condition><Action>continue_movement_agent</Action></Sequence><Sequence><Condition>is_obstacle_detected</Condition><Action>avoid_obstacle</Action></Sequence><Sequence><Condition>is_path_blocked</Condition><Action>turn_left</Action></Sequence><Action>wander</Action></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'complete a given obstacle course by switching between walking and running' Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_path_clear</Condition><Action>continue_movement_agent</Action></Sequence><Sequence><Condition>is_obstacle_detected</Condition><Action>avoid_obstacle</Action></Sequence><Sequence><Condition>is_path_blocked</Condition><Action>turn_left</Action></Sequence><Action>form_line</Action></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'collect all objects scattered in an area and bring them back to base' Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_agent_in_nest</Condition><Action>continue_movement_agent</Action></Sequence><Sequence><Condition>is_obstacle_detected</Condition><Action>avoid_obstacle</Action></Sequence><Sequence><Condition>is_path_clear</Condition><Action>update_map</Action><Action>continue_movement_agent</Action></Sequence><Action>form_line</Action></Selector></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: generate behavior tree to 'Execute a coordinated dance performance with other swarm robots' Output only the XML behavior tree without extra text.
7.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_line_formed</Condition><Action>form_line</Action></Sequence
###
4.// INSTRUCTIONS: Use only the following behaviors {'move_to_next_checkpoint': 'Action: Move the robot to the next checkpoint. Always returns True.', 'avoid_collision': 'Action: Avoid obstacles and other robots while moving. Always returns True.', 'detect_checkpoint': 'Condition: Check if the checkpoint has been detected. Returns True if the checkpoint is within range, False otherwise.', 'detect_obstacle': 'Condition: Check if an obstacle is detected ahead. Returns True if an obstacle is detected, False otherwise.', 'timeout_expired': 'Condition: Check if the robot has exceeded a given time limit. Returns True if the time limit is exceeded, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Navigate through a maze and reach the end point while avoiding obstacles'
4.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>timeout_expired</Condition><Action>return_to_start</Action></Sequence><Action>avoid_collision</Action></Selector><Sequence><Condition>detect_obstacle</Condition><Action>change_direction</Action></Sequence><Sequence><Condition>detect_checkpoint</Condition><Action>move_to_next_checkpoint</Action></Sequence></Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'move_to_objective': 'Action: Move the robot to the objective location. Always returns True.', 'follow_path': 'Action: Follow a predetermined path towards the objective. Always returns True.', 'explore_surroundings': 'Action: Explore the surroundings to gather information about the environment. Always returns True.', 'is_objective_reached': 'Condition: Check if the robot has reached the objective. Returns True if the objective is reached, False otherwise.', 'is_path_obstructed': 'Condition: Check if the path towards the objective is obstructed. Returns True if the path is obstructed, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Collect soil samples at designated locations, while avoiding obstacles and reaching the end point'
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>explore_surroundings</Action><Condition>is_path_obstructed</Condition><Action>change_direction</Action></Sequence><Sequence><Condition>is_objective_reached</Condition></Sequence></Selector><Action>follow_path</Action><Action>move_to_objective</Action></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'move_to_water_source': 'Action: Move the robot to the nearest water source. Always returns True.', 'collect_water': 'Action: Collect water from the water source. Always returns True.', 'store_water': 'Action: Store the collected water in the designated storage space. Always returns True.', 'check_water_level': 'Condition: Check the level of water in storage. Returns True if the water level is below a certain threshold, False otherwise.', 'detect_water_source': 'Condition: Check if there is a water source within a certain distance. Returns True if a water source is detected, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Generate behavior tree for a water collection and storage robot in a drought-affected area
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>detect_water_source</Condition><Action>move_to_water_source</Action><Action>collect_water</Action></Sequence><Sequence><Condition>check_water_level</Condition><Action>move_to_water_source</Action><Action>collect_water</Action><Action>store_water</Action></Sequence></Selector></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'approach_nest': 'Action: Move towards the nearest nest location. Always returns True.', 'drop_off_food': 'Action: Drop off the collected food at the nest. Always returns True.', 'collect_food': 'Action: Collect food within the surrounding area. Always returns True.', 'return_to_base': 'Action: Return to the starting/nest location. Always returns True.', 'is_nest_reached': 'Condition: Check if the robot has reached the nest. Returns True if the nest is reached, False otherwise.', 'is_food_detected': 'Condition: Check if there is food within a certain distance. Returns True if food is detected, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: Generate behavior tree for a foraging robot to collect food and return to the nest
7.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>is_food_detected</Condition><Action>collect_food</Action></Sequence><Action>approach_nest</Action><Action>drop_off_food</Action></Selector><Sequence><Condition>is_nest_reached</Condition></Sequence></Selector><Sequence><Condition>is_food_detected</Condition><Action>return_to_base</Action></Sequence><Action>collect_food</Action></Sequence></BehaviorTree>
###
4.// INSTRUCTIONS: Use only the following behaviors {'detect_target': 'Condition: Check if a potential target is within range. Returns True if a target is detected, False otherwise.', 'low_battery': 'Condition: Check if the robot's battery level is below 20%. Returns True if battery level is low, False otherwise.', 'return_to_base': 'Action: Move towards the designated base and dock for charging. Always returns True.', 'move_towards_target': 'Action: Move towards the target. Always returns True.', 'collect_sample': 'Action: Collect a sample from the target. Always returns True.', 'analyze_sample': 'Action: Analyze the collected sample. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Collect a sample from a target, return to base to charge, analyze the sample, and then repeat the process until battery is low.
4.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>detect_target</Condition> <Action>move_towards_target</Action> <Sequence> <Action>collect_sample</Action> <Condition>low_battery</Condition> <Action>return_to_base</Action> <Action>analyze_sample</Action> </Sequence> </Sequence> <Action>return_to_base</Action> </Selector> </Sequence> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'detect_enemy': 'Condition: Check if an enemy agent is within range. Returns True if an enemy is detected, False otherwise.', 'attack_enemy': 'Action: Attack the enemy agent. Always returns True.', 'alert_team': 'Action: Alert the team to the presence of an enemy. Always returns True.', 'hide': 'Action: Move to a hiding spot. Always returns True.', 'move_towards_enemy': 'Action: Move towards the enemy. Always returns True.', 'avoid_danger': 'Action: Avoid obstacles and dangerous areas. Always returns True.', 'evade_enemy': 'Action: Evade the enemy by changing direction or hiding. Always returns True.', 'send_position': 'Action: Send current location to team for coordination. Always returns True.', 'is_safe_distance': 'Condition: Check if a safe distance from the enemy has been reached. Returns True if safe, False otherwise.', 'is_team_alerted': 'Condition: Check if the team has been alerted to danger. Returns True if team is alerted, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Engage with an enemy, alert the team, evade danger, and send position until a safe distance is reached.
5.// OUTPUT:
<BehaviorTree> <Sequence> <Condition>detect_enemy</Condition> <Selector> <Sequence> <Condition>is_safe_distance</Condition> <Action>move_towards_enemy</Action> <Action>avoid_danger</Action> <Action>send_position</Action> </Sequence> <Sequence> <Condition>is_team_alerted</Condition> <Action>alert_team</Action> <Action>evade_enemy</Action> </Sequence> </Selector> <Action>attack_enemy</Action> </Sequence> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'collect_resource': 'Action: Collect a resource from the environment. Always returns True.', 'update_inventory': 'Action: Update the current inventory of collected resources. Always returns True.', 'build_structure': 'Action: Use collected resources to build a structure. Always returns True.', 'is_inventory_full': 'Condition: Check if the inventory is full. Returns True if full, False otherwise.', 'is_structure_built': 'Condition: Check if the structure is successfully built. Returns True if built, False otherwise.', 'is_resource_available': 'Condition: Check if a resource is available in the environment. Returns True if available, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Collect resources, build a structure, and repeat until inventory is full.
6.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>is_resource_available</Condition> <Action>collect_resource</Action> <Action>update_inventory</Action> </Sequence> <Sequence> <Condition>is_inventory_full</Condition> <Action>build_structure</Action> <Action>update_inventory</Action> </Sequence> </Selector> </Sequence> </BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'detect_friendly': 'Condition: Check if a friendly agent is within range. Returns True if a friendly is detected, False otherwise.', 'coordinate': 'Action: Coordinate with friendly agents for team strategy. Always returns True.', 'escort': 'Action: Escort friendly agent to a designated location. Always returns True.', 'is_team_coordination_needed': 'Condition: Check if team coordination is needed. Returns True if coordination is needed, False otherwise.', 'is_friendly_escort_needed': 'Condition: Check if escorting a friendly agent is necessary. Returns True if escort is needed, False otherwise.', 'move_towards_location': 'Action: Move towards the designated location. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: Coordinate with friendly agents for team strategy and escort a specific agent to a designated location if needed.
7.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>is_team_coordination_needed</Condition> <Action>coordinate</Action> </Sequence> <Sequence> <Condition>is_friendly_escort_needed</Condition> <Action>detect_friendly</Action> <Action>escort</Action> <Action>move_towards_location</Action> </Sequence> </Selector> </Sequence> </BehaviorTree>
###
4.// INSTRUCTIONS: Use only the following behaviors {'move_forward': 'Action: Move the robot forward. Always returns True.', 'turn_left': 'Action: Turn the robot 90 degrees to the left. Always returns True.', 'turn_right': 'Action: Turn the robot 90 degrees to the right. Always returns True.', 'wait': 'Action: Temporarily pause the robot's movement. Always returns True.'. 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_target_detected': 'Condition: Check if target is within 5 units. Returns True if the target is within 5 units of distance, False otherwise.', 'is_target_in_front': 'Condition: Check if target is directly in front of the robot. Returns True if the target is directly in front, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Find and approach the target if it is in front of the robot, otherwise move forward'
4.// OUTPUT:
<BehaviorTree><Selector><Condition>is_target_detected</Condition><Action>wait</Action><Sequence><Condition>is_target_in_front</Condition><Selector><Sequence><Condition>is_obstacle_detected</Condition><Action>turn_left</Action></Sequence><Sequence><Action>wait</Action><Sequence><Condition>is_target_detected</Condition><Action>move_forward</Action></Sequence></Sequence></Selector></Sequence><Selector><Sequence><Condition>is_obstacle_detected</Condition><Action>turn_right</Action></Sequence><Sequence><Action>wait</Action><Sequence><Condition>is_target_detected</Condition><Action>move_forward</Action></Sequence></Sequence></Selector></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'move_to_nearest_enemy': 'Action: Move the robot to the nearest enemy. Always returns True.', 'aim_at_target': 'Action: Aim the robot's weapon at the enemy. Always returns True.', 'shoot': 'Action: Fire the robot's weapon at the enemy. Always returns True.', 'is_target_in_range': 'Condition: Check if the target enemy is within range of the weapon. Returns True if the target is within range, False otherwise.', 'is_enemy_alive': 'Condition: Check if the enemy is still alive. Returns True if the enemy is alive, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Generate behavior tree for a robot to search for and engage the nearest enemy
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_target_in_range</Condition><Sequence><Condition>is_enemy_alive</Condition><Action>aim_at_target</Action><Action>shoot</Action></Sequence></Sequence><Sequence><Condition>is_enemy_alive</Condition><Action>move_to_nearest_enemy</Action></Sequence></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'gather_resource': 'Action: Gather resources in the environment. Always returns True.', 'build_structure': 'Action: Build a structure using gathered resources. Always returns True.', 'move_to_resource': 'Action: Move the robot to the nearest resource. Always returns True.', 'is_resource_available': 'Condition: Check if there is a resource available nearby. Returns True if the resource is available, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Generate behavior tree for a robot to gather resources and build a structure
6.// OUTPUT:
<BehaviorTree><Selector><Condition>is_resource_available</Condition><Sequence><Action>move_to_resource</Action><Action>gather_resource</Action><Action>build_structure</Action></Sequence></Selector></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'detect_area': 'Action: Use sensors to detect a specific area. Always returns True.', 'navigate_to_location': 'Action: Navigate the robot to a designated location. Always returns True.', 'enter_area': 'Action: Enter the designated area. Always returns True.', 'is_area_detected': 'Condition: Check if the designated area is detected. Returns True if the area is detected, False otherwise.', 'is_location_reached': 'Condition: Check if the designated location is reached. Returns True if the location is reached, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: Generate behavior tree for a robot to detect and navigate to a specific area
7.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_area_detected</Condition><Selector><Sequence><Condition>is_location_reached</Condition><Action>enter_area</Action></Sequence><Sequence><Selector><Condition>is_location_reached</Condition><Action>detect_area</Action></Selector><Selector><Condition>is_location_reached</Condition><Action>navigate_to_location</Action></Selector></Sequence></Selector></Sequence></BehaviorTree> 
###
3.// INSTRUCTIONS: Use only the following behaviors {'move_to': "Action: Move to a specific location within the environment. Always returns True. Location coordinates must be provided as parameters.", 'is_destination_reached': 'Condition: Check if the destination coordinates have been reached. Returns True if the destination has been reached, False otherwise.', 'pick_up_item': 'Action: Pick up a specified item within range if available. Always returns True. Item name must be provided as a parameter.', 'drop_item': "Action: Drop the item currently being carried. Always returns True.", 'avoid_obstacles': 'Action: Avoid obstacles in the path. Always returns True.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_item_available': 'Condition: Check if a specified item is within range. Returns True if the item is within range, False otherwise.', 'is_item_carried': 'Condition: Check if an item is currently being carried. Returns True if an item is being carried, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3.// USER COMMAND: generate behavior tree to 'Pick up the key, move to the locked door, unlock the door, and drop the key.'
3.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>is_destination_reached</Condition> <Action>drop_item</Action> </Sequence> <Selector> <Sequence> <Condition>is_obstacle_detected</Condition> <Action>pick_up_item key</Action> <Action>unlock_door</Action> </Sequence> <Sequence> <Condition>is_item_available key</Condition> <Action>move_to locked_door</Action> </Sequence> </Selector> <Selector> <Sequence> <Condition>is_item_carried key</Condition> <Action>move_to door</Action> </Sequence> <Action>avoid_obstacles</Action> </Selector> </Sequence> </BehaviorTree>

###
4.// INSTRUCTIONS: Use only the following behaviors {'wait': "Action: Wait for a specified amount of time before continuing. Time in seconds must be provided as a parameter. Always returns True.", 'is_event_triggered': 'Condition: Check if a specified event has been triggered. Returns True if the event has been triggered, False otherwise.', 'send_message': 'Action: Send a message to another agent within range. Message content and recipient must be provided as parameters. Always returns True.', 'receive_message': 'Action: Receive a message from another agent within range. Message content and sender must be provided as parameters. Always returns True.', 'is_message_received': 'Condition: Check if a message has been received from a specific sender. Returns True if a message has been received, False otherwise.', 'move_to': "Action: Move to a specific location within the environment. Always returns True. Location coordinates must be provided as parameters.", 'is_destination_reached': 'Condition: Check if the destination coordinates have been reached. Returns True if the destination has been reached, False otherwise.', 'wait_for_event': "Action: Wait for a specified event to be triggered before continuing. Event name must be provided as a parameter. Always returns True."}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Send a message, wait for a response, and move to the designated location.'
4.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>is_destination_reached</Condition> </Sequence> <Selector> <Sequence> <Condition>is_event_triggered message_sent</Condition> <Action>move_to designated_location</Action> </Sequence> <Sequence> <Condition>is_message_received</Condition> </Sequence> </Selector> <Selector> <Sequence> <Condition>is_event_triggered message_received</Condition> <Action>wait</Action> </Sequence> <Sequence> <Condition>is_event_triggered message_sent</Condition> <Action>send_message recipient message_content</Action> </Sequence> <Action>wait_for_event message_received</Action> </Selector> </Sequence> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'follow_path': "Action: Follow a predefined path within the environment. Path coordinates must be provided as parameters. Always returns True.", 'is_at_end_of_path': 'Condition: Check if the end of the predefined path has been reached. Returns True if the end is reached, False otherwise.', 'pick_up_item': 'Action: Pick up a specified item within range if available. Always returns True. Item name must be provided as a parameter.', 'drop_item': "Action: Drop the item currently being carried. Always returns True.", 'search_area': 'Action: Search a specified area within range for a target. Target coordinates and search radius must be provided as parameters. Returns True if the target is found, False otherwise.', 'is_target_found': 'Condition: Check if the target has been found during the search. Returns True if the target is found, False otherwise.', 'investigate': 'Action: Investigate a specific area within range for potential threats or obstacles. Area coordinates and search radius must be provided as parameters. Always returns True.', 'is_threat_detected': 'Condition: Check if a threat has been detected during the investigation. Returns True if a threat is detected, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Search the designated area for a target, if target is not found, pick up the key and follow the designated path to the locked door, drop the key, and investigate the area for potential threats.'
5.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>is_target_found</Condition> </Sequence> <Selector> <Sequence> <Condition>is_at_end_of_path</Condition> <Action>follow_path designated_path</Action> <Action>drop_item</Action> </Sequence> <Sequence> <Condition>is_threat_detected</Condition> <Action>search_area designated_area</Action> <Action>investigate designated_area</Action> </Sequence> </Selector> <Selector> <Sequence> <Condition>is_target_found</Condition> <Action>move_to target_coordinates</Action> <Action>pick_up_item key</Action> </Sequence> <Sequence> <Condition>is_item_carried key</Condition> <Action>follow_path designated_path</Action> </Sequence> <Action>wait_for_event search_completed</Action> </Selector> </Sequence> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'wander': 'Action: Move randomly within the environment. Always returns True.', 'avoid_obstacles': 'Action: Avoid obstacles in the path. Always returns True.', 'is_obstacle_detected': '
###
4.// INSTRUCTIONS: Use only the following behaviors {'explore_area': 'Subtree node: Represents a behavior tree for exploring the environment.', 'flee_enemy': 'Subtree node: Represents a behavior tree for avoiding and escaping from an enemy.', 'attack_enemy': 'Subtree node: Represents a behavior tree for attacking and defeating an enemy.', 'is_enemy_in_sight': 'Condition: Check if an enemy is within line of sight. Returns True if an enemy is detected within line of sight, False otherwise.', 'is_enemy_nearby': 'Condition: Check if an enemy is within attack range. Returns True if an enemy is within attack range, False otherwise.', 'is_enemy_fleeing': 'Condition: Check if the enemy is fleeing. Returns True if the enemy is currently fleeing, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Protect the area and attack any nearby enemies.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>explore_area</Action><Trigger>is_enemy_in_sight</Trigger></Sequence><Selector><Condition>is_enemy_nearby</Condition><Sequence><Condition>is_enemy_fleeing</Condition><Action>attack_enemy</Action></Sequence><Action>flee_enemy</Action></Selector></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'task_one': 'Subtree node: Represents a behavior tree to complete task one.', 'task_two': 'Subtree node: Represents a behavior tree to complete task two.', 'task_three': 'Subtree node: Represents a behavior tree to complete task three.', 'is_task_one_completed': 'Condition: Check if task one has been completed. Returns True if task one is completed, False otherwise.', 'is_task_two_completed': 'Condition: Check if task two has been completed. Returns True if task two is completed, False otherwise.', 'is_task_three_completed': 'Condition: Check if task three has been completed. Returns True if task three is completed, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Complete all three tasks in the given order.
5.// OUTPUT:
<BehaviorTree><Sequence><Subtree>task_one</Subtree><Subtree>task_two</Subtree><Subtree>task_three</Subtree></Sequence></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'detect_object': 'Action: Use sensors to detect an object in the environment. Returns True if an object is detected, False otherwise.', 'pickup_object': 'Action: Pick up the detected object and carry it.', 'drop_object': 'Action: Drop the carried object.', 'wait': 'Action: Wait for a specified amount of time. Returns True after waiting.', 'go_to_object': 'Action: Navigate to the detected object. Returns True when the object is reached.', 'is_object_in_hand': 'Condition: Check if an object is currently being carried. Returns True if an object is being carried, False otherwise.', 'is_object_at_destination': 'Condition: Check if the object has reached its designated destination. Returns True if the object is at the destination, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Use the robot to pick up an object, carry it to a specified destination, and drop it there.
6.// OUTPUT:
<BehaviorTree> <Sequence> <Action>detect_object</Action> <Selector> <Action>pickup_object</Action> <Sequence> <Action>go_to_object</Action> <Condition>is_object_at_destination</Condition> <Action>drop_object</Action> </Sequence> </Selector> </Sequence> </BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'explore_env': 'Subtree node: Represents a behavior tree for exploring the environment.', 'gather_food': 'Subtree node: Represents a behavior tree for gathering food and storing it.', 'return_to_nest': 'Action: Navigate back to the nest. Always returns True.', 'is_food_detected': 'Condition: Check if any food is detected in the environment or stored in the agent. Returns True if food is detected, False otherwise.', 'is_nest_reached': 'Condition: Check if the agent has reached the nest. Returns True if the agent is inside the nest, False otherwise.', 'is_specific_food_present': 'Condition: Check if a specific type of food is present in the environment. Returns True if the specified food type is detected, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: Explore the environment and collect all available food types, return to the nest once all food is gathered.
7.// OUTPUT:
<BehaviorTree><Sequence><Action>explore_env</Action><Condition>is_food_detected</Condition><Selector><Condition>is_nest_reached</Condition><Sequence><Condition>is_specific_food_present</Condition><Action>gather_food</Action></Sequence><Action>return_to_nest</Action></Selector></Sequence></BehaviorTree>
###
4.// INSTRUCTIONS: Use only the following behaviors {'move_to_target': 'Action: Move towards the specified target coordinates. Returns True when the target is reached.', 'stop_movement': 'Action: Stop the robot's movement. Always returns True.', 'turn_left': 'Action: Turn the robot 90 degrees to the left. Always returns True.', 'turn_right': 'Action: Turn the robot 90 degrees to the right. Always returns True.', 'is_target_in_sight': 'Condition: Check if the specified target is within the robot's line of sight. Returns True if the target is in sight, False otherwise.', 'is_obstacle_present': 'Condition: Check for obstacles in the robot's current path. Returns True if an obstacle is detected, False otherwise.', 'is_target_reached': 'Condition: Check if the specified target coordinates have been reached. Returns True if the target is reached within 5 units of distance, False otherwise.', 'is_path_blocked': 'Condition: Check if the path in the current direction is blocked or impassable. True if the path is blocked, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Navigate to a specific target' Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_target_reached</Condition><Action>stop_movement</Action></Sequence><Sequence><Condition>is_path_blocked</Condition><Selector><Action>turn_left</Action><Action>turn_right</Action></Selector></Sequence><Sequence><Condition>is_obstacle_present</Condition><Selector><Action>turn_left</Action><Action>turn_right</Action></Selector></Sequence><Action>move_to_target</Action></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'return_to_nest': 'Action: Return to the designated nest location. Returns True when the nest is reached.', 'scan_environment': 'Action: Scan the environment and update the robot's internal map. Always returns True.', 'is_area_explored': 'Condition: Check if the current area has been fully explored and mapped. Returns True if the area is fully explored, False otherwise.', 'is_path_blocked': 'Condition: Check if the path in the current direction is blocked or impassable. True if the path is blocked, False otherwise.', 'is_area_safe': 'Condition: Check if the current area is free of obstacles. Returns True if no obstacles are present in the area, False otherwise.', 'is_nest_reached': 'Condition: Check if the designated nest location has been reached. Returns True when the nest is reached within 5 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Return to designated nest' Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_nest_reached</Condition><Action>task_completed</Action></Sequence><Sequence><Condition>is_area_safe</Condition><Action>return_to_nest</Action></Sequence><Sequence><Condition>is_area_explored</Condition><Action>scan_environment</Action></Sequence><Sequence><Condition>is_path_blocked</Condition><Selector><Action>turn_left</Action><Action>turn_right</Action></Selector></Sequence></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'move_to_target': 'Action: Move towards the specified target coordinates. Returns True when the target is reached.', 'avoid_collision': 'Action: Avoid collision with other robots. Always returns True.', 'change_color_to_blue': "Action: Change agent's color to blue. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'detach_from_swarm': 'Action: Detach from the swarm and act independently. Always returns True.', 'form_square': 'Action: Form a square with other robots. Always returns True.', 'is_agent_in_swarm': 'Condition: Check if the agent is part of a swarm with at least 4 other robots. Returns True if the criteria is met, False otherwise.', 'is_collision_present': 'Condition: Check for potential collisions with other robots. Returns True if a collision is detected, False otherwise.', 'is_enough_space': 'Condition: Check if enough space is available for the agent to move. Returns True if space is enough, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Coordinate with other robots in a swarm' Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_agent_in_swarm</Condition><Sequence><Condition>is_collision_present</Condition><Action>avoid_collision</Action></Sequence></Sequence><Sequence><Condition>is_enough_space</Condition><Action>move_to_target</Action></Sequence><Selector><Sequence><Condition>is_agent_in_swarm</Condition><Action>detach_from_swarm</Action></Sequence><Sequence><Condition>is_agent_in_swarm</Condition><Selector><Action>change_color_to_blue</Action><Action>change_color_to_white</Action></Selector></Sequence></Selector></Selector></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'perform_task': "Action: Perform the specified task. Returns True when the task is completed.", 'is_task_completed': 'Condition: Check if the specified task has been completed. Returns True if the task is completed, False otherwise.', 'is_target_in_sight': 'Condition: Check if the specified target is within the robot's line of sight. Returns True if the target is in sight, False otherwise.', 'move_to_target': 'Action: Move towards the specified target coordinates. Returns True when the target is reached.', 'stop_movement': 'Action: Stop the robot's movement. Always returns True.', 'scan_environment': 'Action: Scan the environment and update the robot's internal map. Always returns True.', 'return_to_nest': 'Action: Return to the designated nest location. Returns True when the nest is reached.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: generate behavior tree to 'Complete a specific task' Output only the XML behavior tree without extra text.
7.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_task_completed</Condition><Action>stop_movement</Action></Sequence><Sequence><Condition>is_target_in_s
###
4.// INSTRUCTIONS: Use only the following behaviors {'pick_up_item': 'Subtree node: Represents a behavior tree for picking up an item based on a set of conditions.', 'move_to_dropoff': 'Action: Move the robot to the designated drop-off location. Always returns True.', 'deliver_item': 'Action: Deliver the picked-up item to the designated location. Always returns True.', 'is_item_picked': 'Condition: Checks if the robot has successfully picked up the item. Returns True if the item is picked up, False otherwise.', 'is_dropoff_reached': 'Condition: Checks if the robot has reached the designated drop-off location. Returns True if the drop-off location is reached, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Collect an item and deliver it to a specific location.
4.// OUTPUT:
<BehaviorTree><Sequence><Selector><Condition>is_dropoff_reached</Condition><Action>move_to_dropoff</Action></Selector><Sequence><Action>pick_up_item</Action><Selector><Sequence><Condition>is_item_picked</Condition><Action>deliver_item</Action></Sequence><Action>retry_action</Action></Selector></Sequence></Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'form_circle_formation': 'Action: Form a perfect circular formation with other robots. Always returns True.', 'scan_surroundings': 'Action: Use sensors to scan the surroundings and detect any obstacles or threats. Always returns True.', 'take_cover': 'Action: Take cover behind a nearby object or wall. Always returns True.', 'is_circle_intact': 'Condition: Check if the circular formation is still intact and has not broken. Returns True if the formation is intact, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Form a circular defensive formation and scan surroundings for threats.
5.// OUTPUT:
<BehaviorTree><Sequence><Selector><Condition>is_circle_intact</Condition><Action>form_circle_formation</Action></Selector><Sequence><Action>scan_surroundings</Action><Selector><Action>take_cover</Action><Action>wait</Action></Selector></Sequence></Sequence></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'collect_food': 'Action: Collect food resources from the environment. Always returns True.', 'detect_predators': 'Action: Use sensors to detect any potential predators. Always returns True.', 'flee': 'Action: Flee from any detected predators and seek shelter. Always returns True.', 'is_food_available': 'Condition: Checks if there is food available in the surrounding environment. Returns True if food is available, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Forage for food while being on the lookout for predators and fleeing if necessary.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_food_available</Condition><Action>collect_food</Action></Sequence><Sequence><Action>detect_predators</Action><Selector><Action>flee</Action><Action>wait</Action></Selector></Sequence></Selector></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'find_teammate': 'Action: Search for a missing teammate within the designated search radius. Always returns True.', 'share_information': 'Action: Share any useful information with team members. Always returns True.', 'perform_task': 'Action: Perform a specific task assigned by the team. Always returns True.', 'is_teammate_found': 'Condition: Checks if the missing teammate has been found. Returns True if the teammate is found, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: Locate a missing teammate, share important information, and continue with the assigned team task.
7.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_teammate_found</Condition><Action>perform_task</Action></Sequence><Sequence><Action>find_teammate</Action><Selector><Action>share_information</Action><Action>wait</Action></Selector></Sequence></Selector></BehaviorTree> 
###
3.// INSTRUCTIONS: Use only the following behaviors {'find_team_member': 'Condition: Check if there are any team members within 10 units. Returns True if a team member is detected within 10 units, False otherwise.', 'move_to_team_member': 'Action: Move towards a nearby team member within 10 units. Returns True if successfully moved, False otherwise.', 'scan_surroundings': 'Action: Scan the surroundings using sensors. Always returns True.', 'divide_tasks': "Action: Divide tasks among team members equally. Returns True if successfully allocated, False otherwise.", 'perform_task': "Action: Perform a specific task assigned by the team leader. Always returns True.", 'is_task_complete': 'Condition: Check if the assigned task is completed. Returns True if the task is completed, False otherwise.', 'join_team': 'Action: Join the rest of the team at the designated location. Returns True if successfully joined, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3.// USER COMMAND: Generate behavior tree for a robot to join and assist a team in a collaborative construction project
3.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>find_team_member</Condition><Action>move_to_team_member</Action></Sequence><Selector><Action>scan_surroundings</Action><Sequence><Condition>is_task_complete</Condition><Action>join_team</Action></Sequence></Selector></Selector><Action>divide_tasks</Action><Selector><Sequence><Condition>is_task_complete</Condition><Action>perform_task</Action></Sequence><Action>wander</Action></Selector></Sequence></BehaviorTree>

###
4.// INSTRUCTIONS: Use only the following behaviors {'move_to_enemy_base': 'Action: Move towards the enemy base. Returns True if successfully moved, False otherwise.', 'attack_enemy_base': 'Action: Launch an attack on the enemy base. Returns True if the enemy base is successfully attacked, False otherwise.', 'check_low_ammo': 'Condition: Check if ammo level is below 10%. Returns True if ammo level is below 10%, False otherwise.', 'restock_ammo': 'Action: Restock ammo. Returns True if successfully restocked, False otherwise.', 'search_and_destroy': 'Action: Search for enemies in the surrounding area and attack them. Returns True if enemies are found and attacked, False otherwise.', 'is_enemy_detected': 'Condition: Check if an enemy is detected within 20 units. Returns True if an enemy is detected within 20 units, False otherwise.', 'wait_for_backup': 'Action: Wait for backup to arrive before proceeding with the mission. Returns True once backup has arrived.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Generate behavior tree for a robot to carry out a military mission of attacking an enemy base
4.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>is_enemy_detected</Condition><Action>move_to_enemy_base</Action></Sequence><Action>search_and_destroy</Action></Selector><Sequence><Condition>check_low_ammo</Condition><Action>restock_ammo</Action></Sequence><Selector><Sequence><Condition>is_enemy_detected</Condition><Action>wait_for_backup</Action></Sequence><Action>attack_enemy_base</Action></Selector></Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'find_food_source': 'Action: Search for food sources within the environment. Returns True if a food source is found, False otherwise.', 'gather_food': 'Action: Gather food from a nearby food source. Returns True if successfully gathered, False otherwise.', 'check_hunger_level': 'Condition: Check hunger level. Returns True if hunger level is above 80%, False otherwise.', 'return_to_nest': 'Action: Return to the designated nest area. Returns True if successfully returned, False otherwise.', 'build_nest': 'Action: Build a new nest at the designated location. Returns True if successfully built, False otherwise.', 'is_resources_available': 'Condition: Check if there are enough resources to build a nest. Returns True if there are enough resources, False otherwise.', 'is_nest_complete': 'Condition: Check if the new nest is completely built. Returns True if the nest is complete, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Generate behavior tree for a group of ants to establish a new colony and ensure food supply
5.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>is_nest_complete</Condition><Action>return_to_nest</Action></Sequence><Action>build_nest</Action></Selector><Selector><Sequence><Condition>is_resources_available</Condition><Action>gather_food</Action></Sequence><Action>find_food_source</Action></Selector></Sequence><Sequence><Condition>check_hunger_level</Condition><Selector><Sequence><Condition>is_resources_available</Condition><Action>gather_food</Action></Sequence><Action>wander</Action></Selector></Sequence></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'form_sorting_line': 'Action: Form a line for sorting items in ascending order. Returns True if line is successfully formed, False otherwise.', 'move_to_item': 'Action: Move towards the next item in the sorting line. Returns True if successfully moved, False otherwise.', 'is_line_sorted': 'Condition: Check if the line is sorted in ascending order. Returns True if the line is sorted, False otherwise.', 'rotate_item': 'Action: Rotate the current item to its correct position. Returns True if successfully rotated, False otherwise.', 'is_item_in_correct_position': 'Condition: Check if the current item is in its correct position. Returns True if the item is in the correct position, False otherwise.', 'scan_item_color': 'Action: Scan the color of the current item. Returns True if successfully scanned, False otherwise.', 'place_item_in_bin': 'Action: Place the sorted item into the designated bin. Returns True if successfully placed, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Generate behavior tree for a group of robots to sort colored items in a factory assembly line
6.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>is_line_sorted</Condition><Action>move_to_item</Action></Sequence><Selector><Sequence><Condition>is_item_in_correct_position</Condition><Action>rotate_item</Action></Sequence><Selector><Sequence><Condition>scan_item_color</Condition><Action>place_item_in_bin</Action></Sequence><Action>scan_item_color</Action></Selector></Selector></Sequence><Action>form_sorting_line</Action></Selector></Sequence></BehaviorTree>

###
7.// IN###
4.// INSTRUCTIONS: Use only the following behaviors {'charge_battery': 'Action: Charge the robot's battery. Always returns True.', 'detect_enemy': 'Action: Use sensors to detect enemies. Returns True if an enemy is detected, False otherwise.', 'flee_enemy': 'Action: Move away from the enemy detected. Always returns True.', 'identify_resource': 'Action: Scan environment to identify resources. Returns True if resources are identified, False otherwise.', 'get_resource': 'Action: Move towards the identified resource. Returns True if resource is obtained, False otherwise.', 'move_home': 'Action: Move back to the home base. Always returns True.', 'has_enough_battery': 'Condition: Checks if the battery level is above 50%. Returns True if battery level is above 50%, False otherwise.', 'is_enemy_detected': 'Condition: Checks if an enemy is detected. Returns True if enemy is detected, False otherwise.', 'is_resource_reached': 'Condition: Checks if the resource is within 10 units of distance. Returns True if resource is within 10 units, False otherwise.', 'restock': 'Action: Retrieve more resources from the home base. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Detect enemy, flee and return to base to charge battery.'Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_enemy_detected</Condition><Action>flee_enemy</Action><Condition>has_enough_battery</Condition><Action>move_home</Action><Action>charge_battery</Action></Sequence><Action>wander</Action></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'pick_resource': 'Action: Use tools to pick up resources. Returns True if resource is successfully picked up, False otherwise.', 'drop_resource': 'Action: Drop the resource at the designated location. Returns True if resource is successfully dropped, False otherwise.', 'is_resource_available': 'Condition: Checks if there is a resource available. Returns True if resource is available, False otherwise.', 'is_robot_full': 'Condition: Checks if the robot is carrying maximum capacity of resources. Returns True if capacity is reached, False otherwise.', 'move_to_resource': "Action: Move towards the nearest resource. Returns True if the robot reaches within 5 units of the resource, False otherwise.", 'return_to_base': 'Action: Return to the designated base location. Always returns True.', 'is_home_reached': 'Condition: Checks if the robot has reached the designated base location. Returns True if robot is within 5 units of distance from base, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Collect maximum capacity of resources and return to base.'Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>is_resource_available</Condition><Action>move_to_resource</Action><Condition>is_robot_full</Condition><Action>drop_resource</Action></Sequence><Action>wander</Action></Selector><Condition>is_robot_full</Condition><Action>move_to_resource</Action></Sequence><Action>return_to_base</Action></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'follow_leader': 'Action: Follow the designated leader robot. Always returns True.', 'avoid_obstacle': 'Action: Move around detected obstacles. Returns True if successfully avoids obstacles, False otherwise.', 'detect_point_of_interest': 'Action: Use sensors to detect points of interest. Returns True if point of interest is detected, False otherwise.', 'move_to_interest': 'Action: Move towards the designated point of interest. Returns True if within 10 units of distance, False otherwise.', 'return_to_base': 'Action: Return to the designated base location. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Follow the leader robot while avoiding obstacles and move to a point of interest when detected, then return to base.'Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_leader_detected</Condition><Action>follow_leader</Action></Sequence><Sequence><Condition>is_point_of_interest_detected</Condition><Action>move_to_interest</Action></Sequence><Action>return_to_base</Action></Selector></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'start_engine': 'Action: Start the engine of the robot. Returns True if engine starts successfully, False otherwise.', 'detect_target': 'Action: Use sensors to detect the designated target. Returns True if target is detected, False otherwise.', 'approach_target': 'Action: Move closer to the designated target. Returns True if within 10 units of distance, False otherwise.', 'search_target': 'Action: Explore surroundings to search for the designated target. Always returns True.', 'activate_tool': 'Action: Activate the designated tool. Returns True if tool activates successfully, False otherwise.', 'use_tool': 'Action: Use the activated tool. Returns True if tool is successfully used, False otherwise.', 'return_to_base': 'Action: Return to the designated base location. Always returns True.', 'is_home_reached': 'Condition: Checks if the robot has reached the designated base location. Returns True if robot is within 5 units of distance from base, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: generate behavior tree to 'Activate and use designated tool when within 10 units of the designated target.'Output only the XML behavior tree without extra text.
7.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_target_detected</Condition><Action>approach_target</Action><Condition>is_target_reached</Condition><Action>activate_tool</Action><Action>use_tool</Action></Sequence><Action>search_target</Action></Selector><Action>rambling</Action></BehaviorTree>4.// INSTRUCTIONS: Use only the following behaviors {'scan_area': 'Action: Scan the surrounding area for any obstacles. Always returns True.', 'move_to_target': "Action: Move towards the given target destination. Always returns True.", 'is_target_reached': 'Condition: Check if target destination is reached. Returns True if agent is within 10 units of target, False otherwise.', 'is_path_clear': 'Condition: Check for any obstacles in the path. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'gather_items': 'Action: Gather any items found in the area and return them to the nest. Always returns True.', 'is_items_collected': 'Condition: Check if items have been collected. Returns True if items are present in the nest, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: gather items from the surrounding area and return them to the nest.
4.// OUTPUT:
<BehaviorTree><Sequence><Action>scan_area</Action><Sequence><Condition>is_path_clear</Condition><Action>move_to_target</Action></Sequence><Sequence><Condition>is_target_reached</Condition><Action>gather_items</Action></Sequence></Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'patrol_area': 'Subtree node: Patrol the designated area.', 'get_health_pack': 'Subtree node: Represents a behavior tree for finding health packs.', 'restore_health': 'Action: Makes the agent use a health pack to restore health. Always returns True.', 'retrieve_item': 'Action: Retrieve the specified item and return it to the nest. Always returns True.', 'is_item_retrieved': 'Condition: Check if the specified item has been retrieved. Returns True if item is found and retrieved, False otherwise.', 'calculate_distance_to_nest': 'Condition: Calculate the distance from the agent to the nest. Returns the distance as a value.', 'is_item_in_sight': 'Condition: Check if the specified item is within the agent's line of sight. Returns True if item is in sight, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: gather the nearest item and return it to the nest.
5.// OUTPUT:
<BehaviorTree><Sequence><Action>patrol_area</Action><Action>retrieve_item</Action><Condition>is_item_in_sight</Condition><Condition>is_item_retrieved</Condition><Action>restore_health</Action><Action>calculate_distance_to_nest</Action></Sequence></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'move_to_target': "Action: Move towards the given target destination. Always returns True.", 'stay_at_position': 'Action: Remain stationary at the current position. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is currently in the nest. Returns True if agent is in the nest, False otherwise.', 'is_target_reached': 'Condition: Check if target destination is reached. Returns True if agent is within 10 units of target, False otherwise.', 'is_path_clear': 'Condition: Check for any obstacles in the path. Returns True if no obstacles are detected ahead, False if obstacles are present.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: navigate to the specified target and remain stationary once reached.
6.// OUTPUT:
<BehaviorTree><Sequence><Action>move_to_target</Action><Sequence><Condition>is_path_clear</Condition><Condition>is_target_reached</Condition><Action>stay_at_position</Action><Condition>is_agent_in_nest</Condition></Sequence></Sequence></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'take_cover': 'Action: Find cover from incoming threats. Always returns True.', 'is_threat_detected': 'Condition: Check for incoming threats. Returns True if a threat is detected, False otherwise.', 'is_cover_reached': 'Condition: Check if cover has been reached. Returns True if agent is within cover, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: avoid any obstacles and take cover from incoming threats.
7.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_obstacle_detected</Condition><Action>avoid_obstacle</Action></Sequence><Sequence><Condition>is_threat_detected</Condition><Sequence><Condition>is_cover_reached</Condition><Action>take_cover</Action></Sequence></Sequence></Selector></BehaviorTree>###
3.// INSTRUCTIONS: Use only the following behaviors {'explore_area': 'Subtree node: Represents a behavior tree for exploring the designated area.', 'collect_resources': 'Action: Move towards and collect resources.', 'on_low_resources': "Event: Triggers when the robot's resource level falls below a threshold. Returns True if resources are low, False otherwise."}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3.// USER COMMAND: Explore the area and collect resources. If resources are low, prioritize collecting resources before resuming exploration.
3.// OUTPUT:
<BehaviorTree><Sequence><Action>explore_area</Action><Trigger>on_low_resources</Trigger><Sequence><Action>collect_resources</Action></Sequence></Sequence></BehaviorTree>

###
4.// INSTRUCTIONS: Use only the following behaviors {'avoid_obstacles': 'Condition: Checks for obstacles in the robot's path. Returns True if obstacles are detected, False otherwise.', 'navigate_to_target': 'Action: Moves the robot towards the designated target. Returns True when target is reached.', 'wait': 'Action: Causes the agent to wait for a specified amount of time. Returns True when wait time is over.', 'idle': 'Action: Instructs the robot to idle in place for a certain period of time. Returns True after idle time.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Navigate to a specified target while avoiding obstacles. If obstacles are detected, wait for a short period before resuming navigation.
4.// OUTPUT:
<BehaviorTree><Sequence><Action>navigate_to_target</Action><Condition>avoid_obstacles</Condition><Sequence><Action>wait</Action></Sequence></Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'scan_area': 'Subtree node: Represents a behavior tree for scanning the designated area.', 'collect_samples': 'Action: Moves towards and collects samples.', 'on_sample_detected': "Event: Triggers when a sample is detected. Returns True if sample is detected, False otherwise."}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Scan the area for samples and collect them as soon as they are detected.
5.// OUTPUT:
<BehaviorTree><Sequence><Action>scan_area</Action><Trigger>on_sample_detected</Trigger><Sequence><Action>collect_samples</Action></Sequence></Sequence></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'dance': 'Action: Makes the robot perform a dance.', 'move_to_waypoint': 'Action: Moves the robot to a designated waypoint. Returns True when the waypoint is reached.', 'wait_for_signal': 'Action: Waits for a signal from a designated source. Returns True when the signal is received.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Perform a dance while waiting for a signal to move to a specific waypoint.
6.// OUTPUT:
<BehaviorTree><Sequence><Action>dance</Action><Sequence><Action>wait_for_signal</Action><Action>move_to_waypoint</Action></Sequence></Sequence></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'search_for_enemy': 'Subtree node: Represents a behavior tree for searching for enemies.', 'attack_enemy': 'Action: Attacks the designated enemy.', 'on_enemy_detected': "Event: Triggers when an enemy is detected. Returns True if enemy is detected, False otherwise."}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: Search for enemies and attack them as soon as they are detected.
7.// OUTPUT:
<BehaviorTree><Sequence><Action>search_for_enemy</Action><Trigger>on_enemy_detected</Trigger><Sequence><Action>attack_enemy</Action></Sequence></Sequence></BehaviorTree>###
3.// INSTRUCTIONS: Use only the following behaviors {'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_speed_to_50': "Action: Change agent's speed to 50%. Always returns True.", 'change_speed_to_100': "Action: Change agent's speed to 100%. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'rotate_left': 'Action: Rotate the robot 90 degrees to the left. Always returns True.', 'rotate_right': 'Action: Rotate the robot 90 degrees to the right. Always returns True.', 'remember_last_obstacle': 'Action: Store the location of the last detected obstacle. Always returns True.', 'return_to_last_obstacle': 'Action: Move back to the last detected obstacle. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3.// USER COMMAND: generate behavior tree to 'Rotate 90 degrees to the right, move forward until obstacle, then turn 90 degrees to the left and continue forward'. Output only the XML behavior tree without extra text.
3.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Action>rotate_right</Action><Condition>is_agent_in_nest</Condition><Sequence><Condition>is_obstacle_detected</Condition><Action>remember_last_obstacle</Action><Action>rotate_left</Action><Action>return_to_last_obstacle</Action></Sequence></Sequence><Sequence><Condition>is_line_formed</Condition><Action>task_completed</Action></Sequence><Action>change_speed_to_50</Action></Selector></Sequence></BehaviorTree>
###
4.// INSTRUCTIONS: Use only the following behaviors {'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_scale_to_25': "Action: Change agent's scale to 25%. Always returns True.", 'change_scale_to_50': "Action: Change agent's scale to 50%. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'grow': 'Action: Increase agent's scale by 25%. Always returns True.', 'shrink': 'Action: Decrease agent's scale by 25%. Always returns True.', 'find_target': 'Action: Move in a random direction to find the target. Always returns True.', 'is_target_found': 'Condition: Check if the target has been found. Returns True if the target is found, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Search for target by growing 25%, if obstacle is detected, shrink 25%, repeat until target is found'. Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Action>grow</Action><Condition>is_obstacle_detected</Condition><Action>shrink</Action></Sequence><Sequence><Condition>is_target_found</Condition><Action>task_completed</Action></Sequence><Action>find_target</Action></Selector></Sequence></BehaviorTree>
###
5.// INSTRUCTIONS: Use only the following behaviors {'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'find_target': 'Action: Move in a random direction to find the target. Always returns True.', 'is_target_found': 'Condition: Check if the target has been found. Returns True if the target is found, False otherwise.', 'is_at_checkpoint': 'Condition: Check if the robot is at the designated checkpoint. Returns True if at the checkpoint, False otherwise.', 'recharge': 'Action: Stop movement and recharge agent. Always returns True.', 'is_battery_low': 'Condition: Check if the agent is low on battery. Returns True if battery level is below 20%, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Navigate to checkpoint, if battery is low, stop and recharge until battery is at 80%, then continue to checkpoint'. Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_battery_low</Condition><Action>recharge</Action><Selector><Condition>is_agent_in_nest</Condition><Action>continue_movement_agent</Action><Action>find_target</Action></Selector></Sequence><Sequence><Condition>is_at_checkpoint</Condition><Action>recharge</Action><Action>recharge</Action></Sequence></Selector></BehaviorTree>
###
6.// INSTRUCTIONS: Use only the following behaviors {'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_blue': "Action: Change agent's color to blue. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'is_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_target_close': 'Condition: Check if the target is within 10 units. Returns True if the target is within 10 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move   
###
4.// INSTRUCTIONS: Use only the following behaviors {'explore_area': 'Action: Continuously rotates and senses the environment. Always returns True.', 'store_random_location': 'Action: Stores a random location as a target. Always returns True.', 'move_to_target': 'Action: Moves the robot towards the stored target location. Always returns True.', 'is_at_target': 'Condition: Checks if the robot has reached the stored target location. Returns True if at the target location, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Randomly explore the environment and move to a random location, repeating the process.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>explore_area</Action><Action>store_random_location</Action><Selector><Sequence><Condition>is_at_target</Condition><Action>store_random_location</Action></Sequence></Selector><Action>move_to_target</Action></Sequence><Selector><Sequence><Condition>is_at_target</Condition><Action>store_random_location</Action></Sequence><Action>move_to_target</Action></Selector></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'pick_up_object': 'Action: Pick up an object within reach. Always returns True.', 'search_for_object': 'Action: Continuously moves and scans the environment for objects. Always returns True.', 'store_object': 'Action: Store the picked up object in a designated location. Always returns True.', 'is_object_stored': 'Condition: Checks if an object is stored in the designated location. Returns True if an object is stored, False otherwise.', 'is_obstacle_detected': 'Condition: Checks for obstacles nearby. Returns True if an obstacle is detected, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Search for an object, pick it up, and store it in a designated location. If an obstacle is detected, avoid it.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>search_for_object</Action><Condition>object_detected</Condition><Sequence><Action>pick_up_object</Action><Condition>object_in_reach</Condition><Action>store_object</Action></Sequence></Sequence><Sequence><Condition>is_obstacle_detected</Condition><Action>avoid_obstacle</Action></Sequence></Selector></BehaviorTree>
 
###
6.// INSTRUCTIONS: Use only the following behaviors {'walk_in_straight_line': 'Action: Move in a straight line towards a target. Always returns True.', 'obstacle_avoidance': 'Action: Continuously scan for obstacles and change direction to avoid them. Always returns True.', 'detect_dropoff': 'Condition: Checks for the presence of a designated drop-off location. Returns True if the drop-off location is found, False otherwise.', 'drop_object': 'Action: Drop the object currently held by the robot. Always returns True.', 'store_random_location': 'Action: Stores a random location as a new target. Always returns True.', 'is_at_target': 'Condition: Checks if the robot has reached the stored target location. Returns True if at the target location, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Move towards a randomly generated target location, avoiding obstacles along the way. Once at the target, check for a designated drop-off location and drop any objects before repeating the process.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>walk_in_straight_line</Action><Selector><Sequence><Condition>detect_dropoff</Condition><Action>drop_object</Action></Sequence><Sequence><Condition>is_at_target</Condition><Action>store_random_location</Action></Sequence></Selector></Sequence><Sequence><Condition>is_obstacle_detected</Condition><Action>obstacle_avoidance</Action></Sequence></Selector></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'collect_resources': 'Action: Collect nearby resources. Always returns True.', 'check_for_hostiles': 'Condition: Checks for nearby hostile agents. Returns True if hostiles are detected, False otherwise.', 'flee': 'Action: Move away from nearby hostile agents. Always returns True.', 'deposit_resources': 'Action: Deposit collected resources at a designated location. Always returns True.', 'is_at_resource': 'Condition: Checks if the robot is at a resource location. Returns True if at the resource location, False otherwise.', 'is_holding_resources': 'Condition: Checks if the robot is currently holding resources. Returns True if holding resources, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: Collect resources, avoiding enemies, and deposit them at a designated location. Repeat the process until all resources are collected.
7.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>collect_resources</Action><Sequence><Condition>check_for_hostiles</Condition><Action>flee</Action></Sequence><Sequence><Condition>is_at_resource</Condition><Action>deposit_resources</Action></Sequence></Sequence><Selector><Condition>is_holding_resources</Condition><Action>start_over</Action></Selector></Selector></BehaviorTree> 
###
3.// INSTRUCTIONS: Use only the following behaviors {'rotate_left': 'Action: Rotate the agent 90 degrees to the left. Always returns True.', 'rotate_right': 'Action: Rotate the agent 90 degrees to the right. Always returns True.', 'move_forward': 'Action: Move one step forward. Always returns True.', 'detect_food_source': 'Condition: Check for a food source within 10 units. Returns True if a food source is detected, False otherwise.', 'detect_target': 'Condition: Check for a target within 20 units. Returns True if a target is detected, False otherwise.', 'is_at_food_source': 'Condition: Check if the agent is currently at a food source. Returns True if the agent is at a food source, False otherwise.', 'is_food_collected': 'Condition: Check if the agent has collected food. Returns True if the agent is carrying food, False otherwise.', 'is_target_reached': 'Condition: Check if the agent has reached the target. Returns True if the agent is at the target, False otherwise.', 'deposit_food': 'Action: Deposit any collected food at designated location. Always returns True.', 'find_food_source': 'Action: Move towards the nearest food source. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3.// USER COMMAND: Generate a behavior tree for an agent to collect food from multiple sources and deposit it at a target destination.
3.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>detect_food_source</Condition> <Action>find_food_source</Action> </Sequence> <Sequence> <Condition>is_at_food_source</Condition> <Action>detect_food_source</Action> <Action>collect_food</Action> </Sequence> <Sequence> <Condition>is_food_collected</Condition> <Action>move_forward</Action> </Sequence> <Sequence> <Condition>detect_target</Condition> <Action>move_forward</Action> <Action>deposit_food</Action> </Sequence> <Sequence> <Condition>is_target_reached</Condition> <Action>rotate_left</Action> </Sequence> </Selector> </BehaviorTree>

###
4.// INSTRUCTIONS: Use only the following behaviors {'move_north': 'Action: Move one step in the north direction. Always returns True.', 'move_east': 'Action: Move one step in the east direction. Always returns True.', 'move_south': 'Action: Move one step in the south direction. Always returns True.', 'move_west': 'Action: Move one step in the west direction. Always returns True.', 'collect_resource1': 'Action: Collect the first resource from the environment. Always returns True.', 'collect_resource2': 'Action: Collect the second resource from the environment. Always returns True.', 'drop_resource1': 'Action: Drop the first resource at specified location. Always returns True.', 'drop_resource2': 'Action: Drop the second resource at specified location. Always returns True.', 'detect_resource1': 'Condition: Check for the first resource nearby. Returns True if the first resource is detected, False otherwise.', 'detect_resource2': 'Condition: Check for the second resource nearby. Returns True if the second resource is detected, False otherwise.', 'is_resource_storage_full': 'Condition: Check if resource storage is full. Returns True if the storage is full, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Generate a behavior tree for a robot to collect resources, store them, and return to the start location each time the storage is full.
4.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>detect_resource1</Condition> <Action>move_north</Action> <Action>collect_resource1</Action> </Sequence> <Sequence> <Condition>detect_resource2</Condition> <Action>move_east</Action> <Action>collect_resource2</Action> </Sequence> <Sequence> <Condition>is_resource_storage_full</Condition> <Action>move_west</Action> <Action>move_south</Action> </Sequence> <Sequence> <Condition>is_resource_storage_full</Condition> <Action>drop_resource1</Action> <Action>drop_resource2</Action> </Sequence> <Sequence> <Condition>is_resource_storage_full</Condition> <Action>move_north</Action> <Action>move_east</Action> </Sequence> <Sequence> <Condition>is_resource_storage_full</Condition> <Action>move_south</Action> <Action>move_west</Action> </Sequence> </Selector> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'take_off': 'Action: Turn off the drone engines to simulate take-off. Always returns True.', 'hover': 'Action: Maintain current altitude and position. Always returns True.', 'move_forward': 'Action: Move forward in a straight line at a constant speed. Always returns True.', 'is_obstacle_ahead': 'Condition: Check for obstacles ahead using sensor data. Returns True if an obstacle is detected, False otherwise.', 'is_at_altitude': 'Condition: Check if the drone has reached the desired altitude. Returns True if the drone is at the desired altitude, False otherwise.', 'is_target_reached': 'Condition: Check if the drone has reached the target location. Returns True if the drone is at the target location, False otherwise.', 'avoid_obstacle': 'Action: Maneuver around the obstacle while maintaining altitude and heading. Always returns True.', 'ascend': 'Action: Increase altitude by one unit. Always returns True.', 'descend': 'Action: Decrease altitude by one unit. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Generate a behavior tree for a drone to take off, reach a specific altitude, and then navigate to a target location while avoiding obstacles.
5.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Action>take_off</Action> <Action>hover</Action> </Sequence> <Sequence> <Condition>is_at_altitude</Condition> <Action>hover</Action> </Sequence> <Sequence> <Condition>is_obstacle_ahead</Condition> <Action>avoid_obstacle</Action> </Sequence> <Sequence> <Condition>is_target_reached</Condition> <Action>move_forward</Action> <Action>descend</Action> </Sequence> </Selector> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'shake_body': 'Action: Actively shake the body to dislodge any debris. Always returns True.', 'gather_debris': 'Action: Use body to gather any loose debris nearby. Always returns True.', 'move_forward': 'Action
###
3.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'change_color_to_blue': "Action: Change agent's color to blue. Always returns True.", 'change_color_to_red': "Action: Change agent's color to red. Always returns True.", 'change_color_to_yellow': "Action: Change agent's color to yellow. Always returns True.", 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_agent_in_red_zone': 'Condition: Check if the agent is in the red zone. Returns True if the agent is in the red zone, False otherwise.', 'is_agent_in_yellow_zone': 'Condition: Check if the agent is in the yellow zone. Returns True if the agent is in the yellow zone, False otherwise.', 'is_danger_detected': 'Condition: Check for potential danger. Returns True if danger is detected, False otherwise.', 'is_enemy_detected': 'Condition: Check for enemy presence. Returns True if an enemy is detected, False otherwise.', 'is_friend_detected': 'Condition: Check for friendly presence. Returns True if a friendly is detected, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3.// USER COMMAND: generate behavior tree to 'Explore the environment, when an enemy or friend is detected, change color to red or yellow respectively, continue exploring'. Output only the XML behavior tree without extra text.
3. // OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_enemy_detected</Condition><Sequence><Action>change_color_to_red</Action><Action>continue_movement_agent</Action></Sequence></Sequence><Sequence><Condition>is_friend_detected</Condition><Sequence><Action>change_color_to_yellow</Action><Action>continue_movement_agent</Action></Sequence></Sequence><Action>wander</Action></Selector></BehaviorTree>

###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'change_direction_clockwise': "Action: Change agent's direction to clockwise. Always returns True.", 'change_direction_counterclockwise': "Action: Change agent's direction to counterclockwise. Always returns True.", 'fly_to_target': 'Action: Fly towards the target. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_target_in_front': 'Condition: Check if the target is in front of the agent. Returns True if the target is within 20 units in front of the agent, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'need_help': 'Condition: Check if agent needs assistance from another agent. Returns True if help is needed, False otherwise.', 'send_signal_for_help': 'Action: Signal for help from other agents. Always returns True.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Fly towards the target, if target is not reached and agent needs help, send signal for help and continue flying towards target'. Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_target_in_front</Condition><Action>fly_to_target</Action></Sequence><Sequence><Condition>need_help</Condition><Action>send_signal_for_help</Action></Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'change_direction_forward': "Action: Change agent's direction to forward. Always returns True.", 'change_direction_backward': "Action: Change agent's direction to backward. Always returns True.", 'collect_resource': 'Action: Collect resource from the environment. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_resource_available': 'Condition: Check if there are resources available in the environment. Returns True if resources are available, False otherwise.', 'is_resource_collected': 'Condition: Check if the agent has collected a resource. Returns True if a resource has been collected, False otherwise.', 'need_assistance': 'Condition: Check if the agent needs assistance from another agent. Returns True if assistance is needed, False otherwise.', 'send_signal_for_help': 'Action: Signal for help from other agents. Always returns True.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Collect resources in the environment, if agent needs help collecting, send signal for help and continue collecting'. Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree> <Sequence> <Condition>need_assistance</Condition> <Action>send_signal_for_help</Action> </Sequence> <Sequence> <Condition>is_resource_available</Condition> <Action>collect_resource</Action> </Sequence> <Sequence> <Condition>is_resource_collected</Condition> <Action>task_completed</Action> </Sequence> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'backtrack': 'Action: Turn around and backtrack in the opposite direction. Always returns True.', 'change_direction_forward': "Action: Change agent's direction to forward. Always returns True.", 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_dead_end': 'Condition: Check if the agent has reached a dead end. Returns True if a dead end is reached, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_reached': 'Condition: Check if the target is reached. Returns True
###
4.// INSTRUCTIONS: Use only the following behaviors {'explore_environment': 'Subtree node: Represents a behavior tree for exploring the environment.', 'detect_puddle': 'Condition: Check for a puddle within a certain range. Returns True if there is a puddle, False otherwise.', 'is_water_safe': 'Condition: Check if the water in the puddle is safe for the robot to cross. Returns True if the water is safe, False otherwise.', 'cross_puddle': 'Action: Cross the puddle if it is safe to do so. Always returns True.', 'move_to_nest': 'Action: Move to the designated nest location. Always returns True.', 'is_at_nest': 'Condition: Check if the robot is at the designated nest location. Returns True if at the nest, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Explore the environment and avoid puddles. If a puddle is detected, check if the water is safe to cross. If safe, cross the puddle and then return to the nest.
4.// OUTPUT:
<BehaviorTree><Sequence><Action>explore_environment</Action><Condition>detect_puddle</Condition><Sequence><Condition>is_water_safe</Condition><Action>cross_puddle</Action></Sequence><Sequence><Action>move_to_nest</Action><Condition>is_at_nest</Condition></Sequence></Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'follow_route': 'Action: Follow a designated route. Returns True if the route is successfully followed, False otherwise.', 'has_arrived': 'Condition: Check if the robot has reached its designated destination. Returns True if arrived, False otherwise.', 'find_path': 'Subtree node: Represents a behavior tree for finding the most optimal path to the designated destination.', 'recharge_battery': 'Action: Recharge the robot's battery. Always returns True.', 'is_battery_low': 'Condition: Checks if the battery level is below a specific threshold. Returns True if battery is low, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Follow a predetermined route. If the battery level drops below a threshold, find a way to recharge before continuing on the route.
5.// OUTPUT:
<BehaviorTree><Sequence><Action>follow_route</Action><Condition>has_arrived</Condition></Sequence><Sequence><Condition>is_battery_low</Condition><Action>recharge_battery</Action><Action>find_path</Action></Sequence></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'collect_resources': 'Action: Collect resources from the environment. Returns True if resources are successfully collected, False otherwise.', 'is_resource_available': 'Condition: Check if there are any resources available in the environment. Returns True if resources are available, False otherwise.', 'go_to_storage': 'Action: Move to designated storage location. Always returns True.', 'is_at_storage': 'Condition: Check if the robot is at the designated storage location. Returns True if at the storage location, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Collect resources from the environment and deposit them at the storage location. If no resources are available, go to storage location and wait for resources to become available before continuing to collect.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_resource_available</Condition><Action>collect_resources</Action></Sequence><Action>go_to_storage</Action><Condition>is_at_storage</Condition></Selector></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'scan_area': 'Subtree node: Represents a behavior tree for scanning the surrounding area for potential threats.', 'is_threat_detected': 'Condition: Check if a potential threat is detected. Returns True if a threat is detected, False otherwise.', 'evade_threat': 'Action: Evade the threat by moving to a safe location. Always returns True.', 'search_and_destroy': 'Action: Search for the threat and destroy it if found. Always returns True.', 'is_target_destroyed': 'Condition: Check if the target threat has been destroyed. Returns True if target is destroyed, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: Scan the area for potential threats. If a threat is detected, evade it and then search and destroy it. Once the threat is destroyed, continue scanning for potential threats.
7.// OUTPUT:
<BehaviorTree><Sequence><Action>scan_area</Action><Condition>is_threat_detected</Condition><Sequence><Action>evade_threat</Action><Action>search_and_destroy</Action><Condition>is_target_destroyed</Condition></Sequence></Sequence><Selector><Action>scan_area</Action></Selector></BehaviorTree>
###
3.// INSTRUCTIONS: Use only the following behaviors {'identify_targets': 'Condition: Check if there are enemies within range. Returns True if there are enemies detected, False otherwise.', 'attack': 'Action: Attack the identified targets. Always returns True.', 'collect_resources': 'Action: Collect nearby resources. Always returns True.', 'low_on_ammo': 'Condition: Check if the robot's ammo is running low. Returns True if ammo is low, False otherwise.', 'low_on_health': 'Condition: Check if the robot's health is low. Returns True if health is low, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3.// USER COMMAND: Construct a behavior tree for a swarm of robots to prioritize between attacking enemies and collecting resources while monitoring their ammo and health status.
3.// OUTPUT:
<BehaviorTree><Sequence><Condition>low_on_ammo</Condition><Action>collect_resources</Action></Sequence><Selector><Sequence><Action>identify_targets</Action><Action>attack</Action></Sequence><Sequence><Condition>low_on_health</Condition><Action>retreat</Action></Sequence></Selector></BehaviorTree>

###
4.// INSTRUCTIONS: Use only the following behaviors {'search_for_targets': 'Action: Search for enemy targets. Returns True if a target is found, False otherwise.', 'identify_weak_spot': 'Action: Identify the weak spot of the enemy target. Returns True if a weak spot is identified, False otherwise.', 'attack_weak_spot': 'Action: Attack the weak spot of the identified target. Returns True if the weak spot is successfully hit, False otherwise.', 'escape': 'Action: Quickly retreat from the current position. Returns True if retreat is successful, False otherwise.', 'is_target_within_range': 'Condition: Check if the enemy target is within attack range. Returns True if the target is within range, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Create a behavior tree for a swarm of robots to strategically attack and retreat from weak spots of enemies, while constantly searching for new targets within attack range.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_target_within_range</Condition><Selector><Action>search_for_targets</Action><Sequence><Condition>identify_weak_spot</Condition><Action>attack_weak_spot</Action></Sequence></Selector></Sequence><Sequence><Condition>is_target_within_range</Condition><Action>escape</Action></Sequence></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'check_battery': 'Condition: Check the battery level of the robot. Returns True if the battery is above a certain threshold, False otherwise.', 'find_charging_station': 'Action: Scan the environment for a nearby charging station. Returns True if a charging station is found, False otherwise.', 'recharge': 'Action: Recharge the robot's battery at the identified charging station. Returns True if recharge is successful, False otherwise.', 'patrol': 'Action: Patrol a designated area to monitor for any abnormalities. Returns True if the patrol is completed, False otherwise.', 'has_task': 'Condition: Check if the robot has been given a specific task. Returns True if the robot has a task, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Design a behavior tree for a swarm of robots to effectively monitor and manage their battery levels, while also carrying out assigned tasks and regularly patrolling their designated areas.
5.// OUTPUT:
<BehaviorTree><Sequence><Condition>check_battery</Condition><Selector><Sequence><Condition>has_task</Condition><Selector><Action>patrol</Action><Sequence><Action>find_charging_station</Action><Action>recharge</Action></Sequence></Selector></Sequence><Action>patrol</Action></Selector></Sequence></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'count_resources': 'Function: Count the number of resources in a designated area. Returns the total number of resources.', 'pick_up_resources': 'Action: Pick up a specified number of resources. Returns True if resources are successfully picked up, False otherwise.', 'deliver_resources': 'Action: Deliver the collected resources to a designated location. Returns True if resources are successfully delivered, False otherwise.', 'is_resource_collected': 'Condition: Check if the specified number of resources have been collected. Returns True if the specified number of resources have been collected, False otherwise.', 'safety_check': 'Condition: Check the safety level of the designated location. Returns True if the location is deemed safe, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Create a behavior tree for a swarm of robots to efficiently collect and deliver a specific number of resources to a secure location.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>safety_check</Condition><Sequence><Action>count_resources</Action><Action>pick_up_resources</Action><Condition>is_resource_collected</Condition><Action>deliver_resources</Action></Sequence></Sequence><Action>pick_up_resources</Action></Selector></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'find_goal': 'Action: Find the designated goal location. Returns True if the goal is located, False otherwise.', 'navigate_to_goal': 'Action: Navigate to the goal location. Returns True if the goal is reached, False otherwise.', 'check_progress': 'Function: Check the progress towards the goal location. Returns a score based on progress.', 'wait_for_response': 'Action: Wait for response from other robots. Returns True if a response is received, False otherwise.', 'update_strategy': 'Action: Update the current strategy based on the progress and received response. Returns True if the strategy is successfully updated, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: Design a behavior tree for a swarm of robots to coordinate and adjust their strategies to navigate towards a shared goal location, while keeping track of progress and receiving updates from other robots.
7.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>find_goal</Action><Sequence><Action>check_progress</Action><Selector><Action>wait_for_response</Action><Sequence><Action>update_strategy</Action></Sequence></Selector></Sequence><Sequence><Action>navigate_to_goal</Action><Condition>reached_goal</Condition></Sequence></Selector></BehaviorTree> 
###
3.// INSTRUCTIONS: Use only the following behaviors {'detect_enemy': 'Condition: Check for enemies within range. Returns True if an enemy is detected, False otherwise.', 'attack': 'Action: Attack the enemy. Always returns True.', 'avoid_obstacles': 'Subtree Node: Represents a behavior tree for avoiding obstacles.'}, to construct behavior tree in XML format for the following scenario. The swarm of robots must detect and attack approaching enemies while avoiding obstacles in their path.
3.// USER COMMAND: Attack enemies while avoiding obstacles.
3.// OUTPUT:
<BehaviorTree><Sequence><Selector><Condition>detect_enemy</Condition><Action>attack</Action></Selector><Action>avoid_obstacles</Action></Sequence></BehaviorTree>

###
4.// INSTRUCTIONS: Use only the following behaviors {'search_for_water': 'Action: Move randomly, searching for water. Always returns True.', 'collect_water': 'Action: Collect water from a nearby source. Always returns True.', 'is_water_available': 'Condition: Check if water is available in the environment. Returns True if water is available, False otherwise.', 'is_capacity_full': 'Condition: Check if capacity is full. Returns True if the robot's capacity is full, False otherwise.'}, to construct behavior tree in XML format for the following task. The robot must search for and collect water until its capacity is full, then return to the starting position.
4.// USER COMMAND: Search for water, collect water until full capacity, then return to starting position.
4.// OUTPUT:
<BehaviorTree><Sequence><Action>search_for_water</Action><Selector><Condition>is_water_available</Condition><Sequence><Action>collect_water</Action><Condition>is_capacity_full</Condition></Sequence></Selector><Action>return_to_start</Action></Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'detect_food': 'Condition: Check for food within range. Returns True if food is detected, False otherwise.', 'collect_food': 'Action: Collect food from a nearby source. Always returns True.', 'drop_food': 'Action: Drop food at the designated location. Always returns True.', 'is_storage_full': 'Condition: Check if storage is full. Returns True if the robot's storage is full, False otherwise.'}, to construct behavior tree in XML format for the following task. The swarm of robots must detect, collect, and drop off food until the storage is full.
5.// USER COMMAND: Collect and drop off food until storage is full for each robot.
5.// OUTPUT:
<BehaviorTree><Sequence><Selector><Condition>detect_food</Condition><Sequence><Action>collect_food</Action><Condition>is_storage_full</Condition></Sequence></Selector><Action>drop_food</Action></Sequence></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'detect_resource': 'Condition: Check for resources within range. Returns True if resources are detected, False otherwise.', 'collect_resource': 'Action: Collect resources from a nearby source. Always returns True.', 'return_to_base': 'Action: Return to the base with collected resources. Always returns True.', 'is_base_reached': 'Condition: Check if the robot has returned to the base. Returns True if the base has been reached, False otherwise.'}, to construct behavior tree in XML format for the following task. The swarm of robots must detect, collect, and return resources to the base until a certain amount is reached.
6.// USER COMMAND: Detect, collect, and return resources until a certain amount is reached for each robot.
6.// OUTPUT:
<BehaviorTree><Sequence><Selector><Condition>detect_resource</Condition><Sequence><Action>collect_resource</Action><Condition>is_base_reached</Condition></Sequence></Selector><Action>return_to_base</Action></Sequence></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'detect_objects': 'Condition: Check for objects within range. Returns True if objects are detected, False otherwise.', 'pick_up_object': 'Action: Pick up an object from the environment. Always returns True.', 'follow_path': 'Subtree Node: Represents a behavior tree for following a predefined path.'}, to construct behavior tree in XML format for the following task. The robot must detect and pick up objects while following a predefined path.
7.// USER COMMAND: Detect and pick up objects while following a predefined path.
7.// OUTPUT:
<BehaviorTree><Sequence><Condition>detect_objects</Condition><Action>pick_up_object</Action><Action>follow_path</Action></Sequence></BehaviorTree> ###
3.// INSTRUCTIONS: Use only the following behaviors {'pick_up_item': "Action: Pick up the closest item available. Always returns True.", 'deliver_item': "Action: Deliver the picked up item to designated location. Always returns True.", 'is_item_available': 'Condition: Check for available items within the agent\'s range. Returns True if any item is within range, False otherwise.', 'is_target_reached': 'Condition: Check if agent has reached the designated location. Returns True if the target is reached, False otherwise.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3.// USER COMMAND: Pick up the nearest item and deliver it to a specific location.
3.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_item_available</Condition><Action>pick_up_item</Action><Condition>is_target_reached</Condition><Action>deliver_item</Action></Sequence><Action>wander</Action></Selector></BehaviorTree>
###
4.// INSTRUCTIONS: Use only the following behaviors {'scan_environment': 'Action: Use sensors to scan the environment for potential targets. Always returns True.', 'is_target_found': 'Condition: Check if a potential target is found. Returns True if a target is found, False otherwise.', 'select_target': "Action: Select the closest target from the available targets. Always returns True.", 'pursue_target': "Action: Move towards the selected target. Always returns True.", 'is_target_reached': 'Condition: Check if agent has reached the targeted location. Returns True if the target is reached, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Scan the environment for potential targets, select the closest target, and pursue it until reaching the target.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>scan_environment</Action><Condition>is_target_found</Condition><Action>select_target</Action><Condition>is_target_reached</Condition></Sequence><Action>pursue_target</Action></Selector></BehaviorTree>
###
5.// INSTRUCTIONS: Use only the following behaviors {'build_structure': "Action: Use available resources to build the designated structure in the agent's surroundings. Always returns True.", 'gather_resources': "Action: Use the agent's tools to gather resources from the environment. Always return True.", 'is_structure_needed': 'Condition: Check if a structure is needed to be built. Returns True if a structure is needed, False otherwise.', 'is_resource_nearby': 'Condition: Check if resources are nearby. Returns True if resources are within range, False otherwise.', 'is_structure_complete': 'Condition: Check if the designated structure is complete. Returns True if the structure is complete, False otherwise.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Build a specified structure if needed, otherwise gather resources.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_structure_needed</Condition><Action>build_structure</Action><Condition>is_structure_complete</Condition></Sequence><Sequence><Condition>is_resource_nearby</Condition><Action>gather_resources</Action></Sequence><Action>wander</Action></Selector></BehaviorTree>
###
6.// INSTRUCTIONS: Use only the following behaviors {'land_to_refuel': "Action: Land the drone on a designated landing pad to refuel. Always returns True.", 'take_off': "Action: Take off from the landing pad. Always returns True.", 'is_battery_low': 'Condition: Check if the drone\'s battery is below a specific threshold. Returns True if battery is low, False otherwise.', 'is_landing_pad_available': 'Condition: Check for available landing pads nearby. Returns True if a landing pad is within range, False otherwise.', 'is_target_reached': 'Condition: Check if the designated location has been reached. Returns True if the location is reached, False otherwise.', 'is_target_detected': 'Condition: Check if a specific target is detected. Returns True if the target is detected, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Land on the nearest landing pad to refuel, then take off and fly to a specific location.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_battery_low</Condition><Action>land_to_refuel</Action><Condition>is_target_reached</Condition><Action>take_off</Action></Sequence><Selector><Sequence><Condition>is_landing_pad_available</Condition><Condition>is_target_detected</Condition><Condition>is_target_reached</Condition></Sequence></Selector></Selector></BehaviorTree>
###
7.// INSTRUCTIONS: Use only the following behaviors {'search_for_food': "Action: Use sensors and GPS to search for food sources. Always returns True.", 'approach_food': "Action: Move towards the nearest food source. Always returns True.", 'gather_food': "Action: Gather food from the available sources. Always returns True.", 'is_food_nearby': 'Condition: Check if food is detected nearby. Returns True if food is detected, False otherwise.', 'is_hungry': 'Condition: Check if the agent is hungry. Returns True if the agent is hungry, False otherwise.', 'is_food_stocked': 'Condition: Check if the food stock is full. Returns True if the food stock is full, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: Search for food sources, approach and gather food if hungry, otherwise continue to search.
7.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_hungry</Condition><Selector><Sequence><Action>search_for_food</Action><Condition>is_food_stocked</Condition><Action>approach_food</Action><Condition>is_food_nearby</Condition><Action>gather_food</Action></Sequence></Selector><Action>search_for_food</Action></Sequence></BehaviorTree>
###
4.// INSTRUCTIONS: Use only the following behaviors {'navigate_to_target': 'Subtree node: Represents a behavior tree for navigating to a specific target.', 'avoid_obstacles': 'Subtree node: Represents a behavior tree for avoiding obstacles.', 'detect_target': 'Condition: Checks if there is a target within range. Returns True if a target is detected, False otherwise.', 'is_obstacle_present': 'Condition: Checks if there is an obstacle in the current direction. Returns True if an obstacle is present, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Navigate to a specific target while avoiding obstacles in the way.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>detect_target</Condition><Action>navigate_to_target</Action></Sequence><Sequence><Condition>is_obstacle_present</Condition><Action>avoid_obstacles</Action></Sequence></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'encircle_target': 'Action: Surround the target and cut off their escape route. Returns True if successfully encircled, False otherwise.', 'chase_target': 'Action: Chase the target and close the distance. Returns True if successfully chased, False otherwise.', 'get_target_distance': 'Function: Calculates the distance between the agent and the target. Returns a value in meters.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Either encircle the target or chase them, depending on their distance from the agent.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>get_target_distance</Action><Condition>greater_than_threshold</Condition><Selector><Sequence><Action>encircle_target</Action><Action>chase_target</Action></Sequence></Selector></Sequence><Action>chase_target</Action></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'gather_food': 'Action: Collect food resources in the environment. Always returns True.', 'analyze_resources': 'Subtree node: Represents a behavior tree for analyzing the available resources.', 'is_food_available': 'Condition: Checks if there is food available in the environment. Returns True if food is available, False otherwise.', 'is_storage_full': 'Condition: Checks if the agent's storage is full. Returns True if full, False otherwise.', 'return_to_base': 'Action: Return to the base to unload resources. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Gather food resources and return to base to unload when storage is full.
6.// OUTPUT:
<BehaviorTree><Sequence><Action>gather_food</Action><Sequence><Condition>is_storage_full</Condition><Sequence><Action>analyze_resources</Action><Condition>is_food_available</Condition></Sequence></Sequence><Action>return_to_base</Action></Sequence></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'guard_base': 'Subtree node: Represents a behavior tree for guarding the base.', 'attack_enemy_base': 'Subtree node: Represents a behavior tree for attacking the enemy base.', 'detect_enemy': 'Condition: Checks if there are enemies within range. Returns True if enemies are detected, False otherwise.', 'is_base_under_attack': 'Condition: Checks if the base is currently under attack. Returns True if under attack, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: Keep an eye on the base and attack the enemy base if the base is under attack.
7.// OUTPUT:
<BehaviorTree><Sequence><Action>guard_base</Action><Condition>is_base_under_attack</Condition><Action>attack_enemy_base</Action></Sequence></BehaviorTree>
###
4.// INSTRUCTIONS: Use only the following behaviors {'respond_to_call': 'Action: Move towards a specified location in response to a call. Returns True if destination is reached, False otherwise.', 'get_closest_agent': 'Condition: Find the closest available agent within 10 units of distance. Returns True if an agent is found, False otherwise.', 'move_to_position': 'Action: Move to a specified position within the environment. Returns True if destination is reached, False otherwise.', 'is_position_reached': 'Condition: Check if the agent has reached a specified position. Returns True if agent has reached the position, False otherwise.', 'follow_agent': 'Action: Follow a designated agent within the environment. Returns True if successfully following the agent, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Follow the closest available agent, and if they stop moving, move to a specific location.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>get_closest_agent</Condition><Action>follow_agent</Action><Condition>is_agent_stopped</Condition><Action>move_to_position</Action></Sequence><Action>respond_to_call</Action></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'pick_up_item': 'Action: Pick up an item located near the agent. Returns True if item is successfully picked up, False otherwise.', 'drop_item': 'Action: Drop the current item being carried. Returns True if item is successfully dropped, False otherwise.', 'handle_obstacle': 'Action: Move around the obstacle. Returns True if successfully navigating around the obstacle, False otherwise.', 'is_item_held': 'Condition: Check if the agent is currently holding an item. Returns True if the agent is holding an item, False otherwise.', 'is_obstacle_present': 'Condition: Check if there is an obstacle present in the environment. Returns True if an obstacle is detected, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Pick up an item, drop it near an obstacle, and if an obstacle is in the way, handle it before picking up the item again.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>pick_up_item</Action><Action>drop_item</Action><Condition>is_obstacle_present</Condition><Action>handle_obstacle</Action><Action>pick_up_item</Action></Sequence><Action>handle_obstacle</Action></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'search_area': 'Action: Search the designated area for a specified object. Returns True if object is found, False otherwise.', 'grab_object': 'Action: Grab the designated object. Returns True if object is successfully grabbed, False otherwise.', 'release_object': 'Action: Release the currently held object. Returns True if object is successfully released, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Find and grab an object, then release it at a specific location.
6.// OUTPUT:
<BehaviorTree><Sequence><Action>search_area</Action><Action>grab_object</Action><Action>release_object</Action></Sequence></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'circle_around_target': 'Action: Move in a circular path around a designated target. Returns True if target is successfully circled, False otherwise.', 'scan_area': 'Action: Perform a 360-degree scan of the designated area. Returns True if scan is successfully completed, False otherwise.', 'avoid_obstacles': 'Action: Avoid any detected obstacles while moving. Returns True if successfully navigating around obstacles, False otherwise.', 'is_target_detected': 'Condition: Check if target is within 15 units distance. Returns True if the target is within 15 units of distance, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: Circle around a target, while continuously scanning the surroundings and avoiding obstacles.
7.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>circle_around_target</Action><Action>scan_area</Action></Sequence><Action>avoid_obstacles</Action></Selector><Action>avoid_obstacles</Action></BehaviorTree> 
###
4.// INSTRUCTIONS: Use only the following behaviors{'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Form a vertical line, change color to green, identify target and move towards it'
4.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>is_line_formed</Condition> <Action>change_color_to_green</Action> <Action>agent_movement_freeze</Action> <Action>task_completed</Action> </Sequence> <Action>form_line</Action></Selector> </Sequence> <Sequence> <Condition>is_target_detected</Condition> <Selector> <Sequence> <Condition>is_path_clear</Condition> <Action>continue_movement_agent</Action> <Action>agent_movement_freeze</Action> <Action>task_completed</Action> </Sequence> <Action>is_target_reached</Action> </Selector> </Sequence> </BehaviorTree>

###
// INSTRUCTIONS: Use only the following behaviors{'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Perform a coordinated movement as a swarm towards a common target while avoiding obstacles'
5.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>is_target_reached</Condition> <Action>agent_movement_freeze</Action> <Action>task_completed</Action> </Sequence> <Selector> <Sequence> <Condition>is_path_clear</Condition> <Action>continue_movement_agent</Action> <Action>agent_movement_freeze</Action> <Action>task_completed</Action> </Sequence> <Action>avoid_obstacle</Action> </Selector> </Selector> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors{'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Generate behavior tree for swarm robots to form a circular formation while avoiding obstacles and maintaining a fixed distance from each other.
6.// OUTPUT:
<BehaviorTree> <Sequence> <Condition>is_obstacle_detected</Condition> <Selector> <Action>avoid_obstacle</Action> <Action>continue_movement_agent</Action> <Condition>is_line_formed</Condition> <Selector> <Action>change_color_to_white</Action> <Action>form_line</Action> <Condition>is_target_reached</Condition> </Selector> </Sequence> </BehaviorTree> 
###
3.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3.// USER COMMAND: generate behavior tree to 'Move the agent until it reaches the target or encounters an obstacle.' Output only the XML behavior tree without extra text.
3.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>is_target_reached</Condition> <Action>task_completed</Action> <Action>update_map</Action> <Sequence> <Condition>is_obstacle_detected</Condition> <Action>avoid_obstacle</Action> <Action>update_map</Action> </Sequence> <Action>continue_movement_agent</Action> </Sequence> </Selector> </BehaviorTree>
 
###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.', 'orient_agent_towards_target': 'Action: Rotate the agent towards the direction of the target. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Move the agent towards the target, avoid obstacles, and orient the agent towards the target.' Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>is_target_reached</Condition> <Action>task_completed</Action> <Sequence> <Condition>is_obstacle_detected</Condition> <Action>avoid_obstacle</Action> <Action>update_map</Action> </Sequence> <Sequence> <Condition>is_agent_in_nest</Condition> <Action>continue_movement_agent</Action> <Action>orient_agent_towards_target</Action> </Sequence> </Sequence> </Selector> </BehaviorTree>
 
###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.', 'disable_movement': 'Action: Stop all agent movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Disable agent movement when target is reached' Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree> <Sequence> <Condition>is_target_reached</Condition> <Action>disable_movement</Action> </Sequence> </BehaviorTree>
 
###
6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns 
###
3.// INSTRUCTIONS: Use only the following behaviors {'search_for_food': 'Action: Use sensors to search for potential food sources in the vicinity. Always returns True.', 'eat_food': 'Action: Consume the food available in the current location. Always returns True.', 'is_hungry': 'Condition: Check if the robot's energy level has dropped below a critical threshold, indicating it needs to find and consume food. Returns True if the robot is hungry, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3.// USER COMMAND: Generate behavior tree for a robot to forage for food and maintain its energy level
3.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_hungry</Condition><Selector><Sequence><Action>search_for_food</Action><Action>eat_food</Action></Sequence><Action>move_to_next_location</Action></Selector></Sequence></BehaviorTree>
 
###
4.// INSTRUCTIONS: Use only the following behaviors {'check_battery_level': 'Condition: Check the current battery level of the robot and return True if it is below a certain threshold, False otherwise.', 'recharge': 'Action: Find a designated charging station and recharge the robot. Always returns True.', 'navigate_to_goal': 'Action: Use sensors and mapping to navigate to a specific goal location. Always returns True.', 'pick_up_object': 'Action: Use manipulator arms to pick up a designated object. Always returns True.', 'drop_object': 'Action: Use manipulator arms to drop the currently held object. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Generate behavior tree for a robot to explore an unknown environment, pick up and drop off objects, and recharge its battery as needed
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>check_battery_level</Condition><Action>recharge</Action></Sequence><Sequence><Action>move_to_next_location</Action><Action>pick_up_object</Action><Action>navigate_to_goal</Action><Action>drop_object</Action></Sequence><Action>update_map</Action></Selector></BehaviorTree>
 
###
5.// INSTRUCTIONS: Use only the following behaviors {'check_distances': 'Action: Use lidar or ultrasonic sensors to check the distances to nearby objects and return them as numeric values. Always returns True.', 'avoid_obstacles': 'Action: Use sensor readings to determine a safe path to avoid obstacles in the robot's path. Always returns True.', 'find_light': 'Action: Use light sensors to detect the direction of the nearest light source. Always returns True.', 'move_to_light': 'Action: Move the robot towards the nearest light source. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Generate behavior tree for a robot to navigate towards a light source while avoiding obstacles
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>check_distances</Action><Action>avoid_obstacles</Action><Action>find_light</Action></Sequence><Action>move_to_light</Action></Selector></BehaviorTree>
 
###
6.// INSTRUCTIONS: Use only the following behaviors {'detect_temperature': 'Action: Use temperature sensors to detect the current temperature of the environment. Always returns True.', 'adjust_temperature': 'Action: Use actuators to adjust heating or cooling mechanisms based on the temperature readings. Always returns True.', 'check_humidity': 'Action: Use humidity sensors to check the current humidity level. Always returns True.', 'monitor_plants': 'Action: Use sensors to monitor the health of plants and determine if they need water or fertilizer. Always returns True.', 'water_plants': 'Action: Use manipulator arms to water the plants in the designated area. Always returns True.', 'fertilize_plants': 'Action: Use manipulator arms to add fertilizer to the plants in the designated area. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Generate behavior tree for a robot to monitor and care for indoor plants in a controlled environment
6.// OUTPUT:
<BehaviorTree><Sequence><Action>detect_temperature</Action><Action>adjust_temperature</Action><Selector><Action>check_humidity</Action><Sequence><Action>monitor_plants</Action><Selector><Action>water_plants</Action><Action>fertilize_plants</Action></Selector></Sequence></Selector></Sequence></BehaviorTree>
 
###
7.// INSTRUCTIONS: Use only the following behaviors {'listen_for_commands': 'Condition: Use voice recognition technology to listen for specific user commands and return True if the command is detected.', 'identify_objects': 'Action: Use computer vision technology to identify objects in the robot's environment. Always returns True.', 'pick_up_object': 'Action: Use manipulator arms to pick up a designated object. Always returns True.', 'place_object': 'Action: Use manipulator arms to place the currently held object in a specified location. Always returns True.', 'return_to_base': 'Action: Navigate back to a designated home base location. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: Generate behavior tree for a robot to respond to voice commands, identify and manipulate objects, and return to a designated base location
7.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>listen_for_commands</Condition><Selector><Sequence><Action>identify_objects</Action><Sequence><Action>pick_up_object</Action><Action>place_object</Action></Sequence></Selector><Action>return_to_base</Action></Sequence></Selector></BehaviorTree>
###
4.// INSTRUCTIONS: Use only the following behaviors {'detect_fire': 'Condition: Check if there is fire nearby. Returns True if fire is detected, False otherwise.', 'extinguish_fire': 'Action: Extinguish the fire. Always returns True.', 'move_to_water': 'Action: Move towards the nearest water source. Always returns True.', 'is_water_reached': 'Condition: Check if the water source has been reached. Returns True if the water source is within reach, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Move towards the nearest fire, then extinguish it, and return to the starting point.
4.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>detect_fire</Condition><Sequence><Action>move_to_water</Action><Condition>is_water_reached</Condition><Action>extinguish_fire</Action></Sequence></Sequence><Action>move_to_start</Action></Selector></Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'detect_maze_wall': 'Condition: Check if the robot is facing a maze wall. Returns True if the wall is detected, False otherwise.', 'solve_maze': 'Subtree node: Represents a behavior tree for solving a maze.', 'explore_maze': 'Action: Explore uncharted parts of the maze. Always returns True.', 'find_treasure': 'Action: Find treasure in the maze. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Find treasure in the maze by exploring and solving the maze.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>detect_maze_wall</Condition><Action>solve_maze</Action></Sequence><Sequence><Action>explore_maze</Action><Action>find_treasure</Action></Sequence></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'detect_cliff_edges': 'Condition: Check if the robot is near the edge of a cliff. Returns True if a cliff edge is detected, False otherwise.', 'avoid_cliff': 'Action: Steer away from the cliff edge. Always returns True.', 'collect_data': 'Action: Collect data from the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Collect data from the environment while avoiding the edge of cliffs.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>detect_cliff_edges</Condition><Action>avoid_cliff</Action></Sequence><Action>collect_data</Action></Selector></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'detect_intruder': 'Condition: Check if there is an intruder in the designated area. Returns True if an intruder is detected, False otherwise.', 'guard_area': 'Action: Stay in a designated area and monitor for intruders. Always returns True.', 'approach_intruder': 'Action: Approach the intruder and prepare for capture. Always returns True.', 'capture_intruder': 'Action: Capture the intruder and escort them out of the area. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: Guard a designated area and capture any intruders that are detected.
7.// OUTPUT:
<BehaviorTree><Sequence><Condition>detect_intruder</Condition><Selector><Sequence><Action>guard_area</Action><Sequence><Action>approach_intruder</Action><Action>capture_intruder</Action></Sequence></Selector></Sequence></BehaviorTree>
###
4.// INSTRUCTIONS: Use only the following behaviors {'brighten_light': 'Action: Increase the intensity of the light emitted by the robot. Always returns True.', 'lower_light': 'Action: Decrease the intensity of the light emitted by the robot. Always returns True.', 'flash_light': 'Action: Flash the light on and off. Always returns True.', 'detect_light_level': 'Condition: Check the current light level in the environment. Returns True if the light level is within a specified range, False otherwise.', 'move_towards_light': 'Action: Move towards the source of the brightest light in the environment. Always returns True.', 'is_light_source_detected': 'Condition: Check if a light source is detected within a specified radius. Returns True if a light source is within the radius, False otherwise.', 'stop_movement': 'Action: Stop all movement immediately. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Have the robot use its light sensors to detect the brightest light source and move towards it
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_light_source_detected</Condition><Action>wander</Action><Selector><Sequence><Action>detect_light_level</Action><Selector><Action>brighten_light</Action><Action>lower_light</Action></Selector></Sequence></Selector></Sequence><Selector><Sequence><Condition>is_light_source_detected</Condition><Action>move_towards_light</Action></Sequence></Selector><Action>stop_movement</Action></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'take_water_sample': 'Action: Using a sample collection tool, take a sample of water from the specified location. Always returns True.', 'analyze_water_sample': 'Action: Analyze the water sample for various parameters such as pH level, temperature, and contaminant levels. Always returns True.', 'add_water_treatment': 'Action: Add a specified water treatment to the water sample based on the analysis results. Always returns True.', 'is_water_treated': 'Condition: Check if the treated water sample meets the necessary quality standards. Returns True if the water is treated and safe for consumption, False otherwise.', 'collect_water_sample': 'Action: Gather a clean water sample from the environment and store it for further analysis. Always returns True.', 'is_water_collected': 'Condition: Check if a clean water sample has been successfully collected and stored. Returns True if a sample is collected, False otherwise.', 'wait_for_signal': 'Action: Wait for a signal from the lab technician before proceeding. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Have the robot collect a sample of water, analyze it, and treat it according to the results before deciding if it is safe for consumption
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>collect_water_sample</Action><Sequence><Action>analyze_water_sample</Action><Selector><Sequence><Action>wait_for_signal</Action><Action>analyze_water_sample</Action></Sequence></Selector></Sequence></Selector><Sequence><Condition>is_water_collected</Condition><Selector><Sequence><Condition>is_water_treated</Condition><Selector><Action>add_water_treatment</Action><Action>take_water_sample</Action></Selector></Sequence></Selector></Sequence></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'pick_up_object': 'Action: Using gripper arms, pick up the specified object. Always returns True.', 'drop_object': 'Action: Release the object currently held by the gripper arms. Always returns True.', 'move_to_dest': 'Action: Move the robot towards the specified destination. Always returns True.', 'destination_reached': 'Condition: Check if the robot has reached the specified destination. Returns True if the destination is reached, False otherwise.', 'detect_obstacle': 'Condition: Check for obstacles in the robot's path. Returns True if an obstacle is detected, False otherwise.', 'avoid_collisions': 'Action: Use sensors and decision-making to avoid collisions with detected obstacles. Always returns True.', 'is_object_in_grip': 'Condition: Check if the robot is currently holding an object with its gripper arms. Returns True if an object is in grip, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Have the robot pick up an object, avoid obstacles while moving towards a specified destination, and drop the object at the destination
6.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_object_in_grip</Condition><Selector><Sequence><Condition>detect_obstacle</Condition><Action>avoid_collisions</Action></Sequence><Selector><Sequence><Action>move_to_dest</Action><Condition>destination_reached</Condition></Sequence></Selector></Sequence><Action>drop_object</Action></Sequence><Action>pick_up_object</Action></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'turn_on_vacuum': 'Action: Turn on the vacuum system to collect dust and debris. Always returns True.', 'empty_vacuum': 'Action: Empty out the collected dust and debris from the vacuum system. Always returns True.', 'navigate_path': 'Action: Navigate the robot along a predetermined path. Always returns True.', 'execute_task': 'Action: Assume control of the robot to perform a task such as cleaning or picking up objects. Always returns True.', 'check_battery_level': 'Condition: Check the current battery level of the robot. Returns True if the battery level is above a specified threshold, False otherwise.', 'wait_for_charging': 'Action: Wait for the robot's battery to be fully charged before proceeding. Always returns True.', 'shutdown_robot': 'Action: Shut down the robot and all its systems. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: Have the robot perform a cleaning task by navigating along a predetermined path, while checking and ensuring its battery level and charging when necessary
7.// OUTPUT:
<BehaviorTree><Sequence><Action>check_battery_level</Action><Selector><Sequence><Action>navigate_path</Action><Action>execute_task</Action></Sequence><Selector><Action>wait_for_charging</Action></Selector></Sequence></Selector><Selector><Action>turn_on_vacuum</Action><Selector><Sequence><Condition>check_battery_level</Condition><Action>empty_vacuum</Action></Sequence></Selector></Selector><Action>shutdown_robot</Action></BehaviorTree> 
###
3.// INSTRUCTIONS: Use only the following behaviors {'mark_target': 'Action: Record the target's position. Always returns True.', 'move_to_target': 'Action: Move towards the target. Always returns True.', 'scan_target': 'Condition: Scan the environment for the target. Returns True if the target is detected, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3.// USER COMMAND: Locate and mark the target in the environment.
3.// OUTPUT:
<BehaviorTree><Sequence><Action>move_to_target</Action><Sequence><Condition>scan_target</Condition><Action>mark_target</Action></Sequence></Sequence></BehaviorTree>

###
4.// INSTRUCTIONS: Use only the following behaviors {'set_home_position': 'Action: Set current position as the home position. Always returns True.', 'return_home': 'Action: Move back to the home position. Always returns True.', 'is_home_reached': 'Condition: Check if the agent has reached the home position. Returns True if home position is reached, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Set current position as home and return to the home position.
4.// OUTPUT:
<BehaviorTree><Sequence><Action>set_home_position</Action><Sequence><Action>return_home</Action><Condition>is_home_reached</Condition></Sequence></Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'detect_water': 'Condition: Check for water source nearby. Returns True if a water source is detected within 10 units, False otherwise.', 'collect_water': 'Action: Collect water from the nearest source. Always returns True.', 'return_to_nest': 'Action: Move back to the nest with collected water. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Search for a water source, collect water, and return to the nest.
5.// OUTPUT:
<BehaviorTree><Sequence><Condition>detect_water</Condition><Sequence><Action>collect_water</Action><Action>return_to_nest</Action></Sequence></Sequence></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'detect_food': 'Condition: Check for food source nearby. Returns True if a food source is detected within 10 units, False otherwise.', 'collect_food': 'Action: Collect food from the nearest source. Always returns True.', 'return_to_nest': 'Action: Move back to the nest with collected food. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Search for a food source, collect food, and return to the nest.
6.// OUTPUT:
<BehaviorTree><Sequence><Condition>detect_food</Condition><Sequence><Action>collect_food</Action><Action>return_to_nest</Action></Sequence></Sequence></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'random_exploration': 'Action: Move randomly within the environment. Always returns True.', 'find_new_target': 'Action: Search for a new target to pursue. Always returns True.', 'is_target_lost': 'Condition: Check if current target is lost. Returns True if target cannot be found, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: Continuously explore the environment and switch to a new target if current target is lost.
7.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>random_exploration</Action><Selector><Condition>is_target_lost</Condition><Action>find_new_target</Action></Selector></Sequence></S
elector></BehaviorTree> 
###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_circle': 'Action: Form a circle at the specified point. Returns True if the circle is formed within the given radius, False otherwise.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_circle_formed': 'Condition: Check if a circle is formed at the specified point. Returns True if the circle formed within the given radius, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_found': 'Condition: Check if target is within 10 units. Returns True if the target is within 10 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Search and form a circle at the location of the target, then return to the nest, change color to green, and continue moving.'Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>is_target_found</Condition> <Action>form_circle</Action> <Action>task_completed</Action> </Sequence> <Action>continue_movement_agent</Action> </Selector> <Sequence> <Condition>is_agent_in_nest</Condition> <Action>change_color_to_green</Action> <Action>continue_movement_agent</Action> </Sequence> </Sequence> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'change_color_to_green': "Action: Change agent's color to green. Returns True if color change is successful, False otherwise.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'dig_hole': 'Action: Dig a hole at the specified location. Returns True if the hole is successfully dug, False otherwise.', 'fill_hole': 'Action: Fill a hole at the specified location. Returns True if the hole is successfully filled, False otherwise.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_hole_filled': 'Condition: Check if a hole is filled at the specified location. Returns True if the hole is filled, False otherwise.', 'is_hole_dug': 'Condition: Check if a hole is dug at the specified location. Returns True if the hole is dug, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'transport_item': 'Action: Pick up and transport an item from one location to another. Returns True if item is successfully picked up and transported, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Dig a hole at the specified location, then pick up and transport an item, fill the hole, and return to the nest.'Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Action>dig_hole</Action> <Action>transport_item</Action> <Action>fill_hole</Action> <Action>continue_movement_agent</Action> </Sequence> <Sequence> <Condition>is_agent_in_nest</Condition> <Action>change_color_to_green</Action> <Action>agent_movement_freeze</Action> </Sequence> </Selector> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'change_color_to_green': "Action: Change agent's color to green. Returns True if color change is successful, False otherwise.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'search_for_food': 'Action: Move around and search for food in the environment. Returns True if food is found within the specified search radius, False otherwise.', 'gather_food': 'Action: Gather food and transport it to the nest. Returns True if food is successfully gathered and transported, False otherwise.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_food_available': 'Condition: Check if there is food within the specified search radius. Returns True if food is available, False otherwise.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 10 units. Returns True if the target is within 10 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Search for food within a 30-unit radius, gather and transport the food back to the nest, and freeze movement.'Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>is_food_available</Condition> <Action>search_for_food</Action> <Action>gather_food</Action> <Action>agent_movement_freeze</Action> </Sequence> <Sequence> <Condition>is_agent_in_nest</Condition> <Action>change_color_to_green</Action> <Action>continue_movement_agent</Action> </Sequence> </Selector> </BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'change_color_to_green': "Action  
###
4.// INSTRUCTIONS: Use only the following behaviors {'detect_intruders': 'Action: Detect any intruders within a designated perimeter. Always returns True.', 'form_defense_line': 'Action: Form a defensive line to prevent intruders from advancing. Always returns True.', 'patrol_area': 'Action: Patrol the assigned perimeter to discourage intruders. Always returns True.', 'retreat_to_safety': 'Action: Retreat to a safe location if the perimeter is breached. Always returns True.', 'is_intruder_detected': 'Condition: Check if an intruder has been detected within the designated perimeter. Returns True if an intruder is detected, False otherwise.', 'is_defense_line_formed': 'Condition: Check if a defensive line has been formed to defend against intruders. Returns True if the line is formed, False otherwise.', 'is_safety_reached': 'Condition: Check if the robot has reached a safe location after retreating. Returns True if safety is reached, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Generate behavior tree for a robot to defend against potential intruders
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_intruder_detected</Condition><Selector><Sequence><Condition>is_defense_line_formed</Condition><Action>patrol_area</Action></Sequence><Action>form_defense_line</Action></Selector></Sequence><Selector><Sequence><Condition>is_intruder_detected</Condition><Action>retreat_to_safety</Action></Sequence><Selector><Sequence><Condition>is_safety_reached</Condition><Action>patrol_area</Action></Sequence><Action>form_defense_line</Action></Selector></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'flee_from_predator': 'Action: Quickly move away from the detected predator. Always returns True.', 'hunt_prey': 'Action: Use sensors to track and hunt down potential prey. Always returns True.', 'navigate_to_water_source': 'Action: Navigate to the nearest water source for drinking. Always returns True.', 'is_predator_detected': 'Condition: Check if a predator is detected nearby. Returns True if a predator is detected, False otherwise.', 'is_prey_detected': 'Condition: Check if potential prey is detected nearby. Returns True if prey is detected, False otherwise.', 'is_thirsty': 'Condition: Check if the robot is in need of water. Returns True if the robot is thirsty, False otherwise.', 'has_hunted_prey': 'Condition: Check if the robot has successfully hunted prey. Returns True if prey has been hunted, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Generate behavior tree for a robot to survive in the wild
5.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_predator_detected</Condition><Action>flee_from_predator</Action></Sequence><Selector><Sequence><Condition>is_thirsty</Condition><Action>navigate_to_water_source</Action></Sequence><Selector><Sequence><Condition>has_hunted_prey</Condition><Action>navigate_to_water_source</Action></Sequence><Action>hunt_prey</Action></Selector></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'human_interaction': 'Action: Interact with a human, such as handing them an object or responding to a command. Always returns True.', 'avoid_collision': 'Action: Use sensors to avoid colliding with nearby objects. Always returns True.', 'navigate_to_destination': 'Action: Use sensors and path planning to navigate to a specified destination. Always returns True.', 'is_human_detected': 'Condition: Check if a human is detected nearby. Returns True if a human is detected, False otherwise.', 'is_obstacle_close': 'Condition: Check if an obstacle is detected within a short distance. Returns True if an obstacle is detected, False otherwise.', 'is_at_destination': 'Condition: Check if the robot has reached the specified destination. Returns True if the destination is reached, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Generate behavior tree for a robot to interact with humans and avoid obstacles
6.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_human_detected</Condition><Action>human_interaction</Action></Sequence><Selector><Sequence><Condition>is_obstacle_close</Condition><Action>avoid_collision</Action></Sequence><Action>navigate_to_destination</Action></Selector></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'detect_air_pollution': 'Action: Use sensors to detect air pollution levels. Always returns True.', 'clean_air': 'Action: Use filters and other equipment to clean the air and maintain healthy levels. Always returns True.', 'navigate_to_pollution_hotspot': 'Action: Use sensors and path planning to navigate to the highest level of air pollution. Always returns True.', 'is_pollution_detected': 'Condition: Check if high levels of air pollution are detected. Returns True if pollution is detected, False otherwise.', 'is_air_clean': 'Condition: Check if the air is currently clean and healthy. Returns True if the air is clean, False otherwise.', 'is_at_pollution_hotspot': 'Condition: Check if the robot has reached the highest level of air pollution. Returns True if the hotspot is reached, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: Generate behavior tree for a robot to monitor and clean air pollution
7.// OUTPUT:
<BehaviorTree><Sequence><Selector><Action>detect_air_pollution</Action></Selector><Sequence><Condition>is_pollution_detected</Condition><Action>clean_air</Action></Sequence></Sequence><Selector><Sequence><Condition>is_air_clean</Condition><Action>navigate_to_pollution_hotspot</Action></Sequence><Action>clean_air</Action></Selector></BehaviorTree> 
###
4.// INSTRUCTIONS: Use only the following behaviors {'send_signal': 'Action: Send a signal to other robots. Always returns True.', 'wait_for_response': 'Action: Wait for response from other robots. Always returns True.', 'broadcast_message': 'Action: Broadcast a message to all robots. Always returns True.', 'receive_message': 'Action: Receive a message from another robot. Returns True if a message is received, False otherwise.', 'is_in_position': 'Condition: Checks if robot is in its designated position. Returns True if in position, False otherwise.', 'is_message_sent': 'Condition: Checks if a message was successfully sent. Returns True if message was sent, False otherwise.', 'is_message_received': 'Condition: Checks if a message was successfully received. Returns True if message was received, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Send a signal to all robots, wait for a response from each, then broadcast a message to confirm completion.
4.// OUTPUT:
<BehaviorTree> <Sequence> <Action>send_signal</Action> <Action>wait_for_response</Action> </Sequence> <Sequence> <Condition>is_in_position</Condition> <Action>broadcast_message</Action> </Sequence> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'take_photo': 'Action: Take a photo with the on-board camera. Returns True if successful, False otherwise.', 'scan_surroundings': 'Subtree node: Represents a behavior tree for scanning the environment for specific objects or features.', 'is_object_detected': 'Condition: Checks if a specific object is detected. Returns True if the object is detected, False otherwise.', 'captured_all_photos': 'Condition: Checks if all required photos have been captured. Returns True if all photos have been captured, False otherwise.', 'navigate_to_position': 'Action: Move the robot to a specific position. Returns True if successfully navigated to position, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Explore the environment and capture photos of specific objects or features, then navigate to a designated position.
5.// OUTPUT:
<BehaviorTree><Sequence><Action>take_photo</Action></Sequence><Sequence><Action>scan_surroundings</Action><Selector><Condition>is_object_detected</Condition><Action>take_photo</Action></Selector><Condition>captured_all_photos</Condition></Sequence><Sequence><Action>navigate_to_position</Action></Sequence></BehaviorTree>
 
###
6.// INSTRUCTIONS: Use only the following behaviors {'collect_resource': 'Action: Collect a designated resource from the environment. Returns True if resource is successfully collected, False otherwise.', 'deposit_resource': 'Action: Deposit collected resource in designated location. Returns True if successfully deposited, False otherwise.', 'navigate_to_resource': 'Action: Move to the nearest resource location. Returns True if successfully navigated to resource, False otherwise.', 'is_resource_available': 'Condition: Checks if there is a resource available at the current location. Returns True if resource is available, False otherwise.', 'is_resource_deposited': 'Condition: Checks if collected resource has been successfully deposited. Returns True if resource is deposited, False otherwise.', 'is_inventory_full': 'Condition: Checks if the robots inventory is full. Returns True if inventory is full, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Collect resources from the environment until the inventory is full, then deposit them in a designated location.
6.// OUTPUT:
<BehaviorTree> <Sequence> <Action>collect_resource</Action> <Selector> <Sequence> <Condition>is_resource_available</Condition> <Action>navigate_to_resource</Action> </Sequence> <Action>collect_resource</Action> </Selector> </Sequence> <Sequence> <Condition>is_inventory_full</Condition> <Action>deposit_resource</Action> </Sequence> </BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'move_to_position': 'Action: Move to a designated position. Returns True if successfully navigated, False otherwise.', 'detect_target': 'Subtree node: Represents a behavior tree for detecting and tracking a target object.', 'is_target_detected': 'Condition: Checks if the target object is detected. Returns True if target is detected, False otherwise.', 'is_target_lost': 'Condition: Checks if target object was lost. Returns True if target is lost, False otherwise.', 'attempt_catch': 'Action: Attempt to catch the target object. Returns True if successfully caught, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: Track and attempt to catch a designated target object, constantly checking for detection and reacquiring if necessary.
7.// OUTPUT:
<BehaviorTree> <Sequence> <Action>detect_target</Action> <Selector> <Sequence> <Condition>is_target_detected</Condition> <Action>attempt_catch</Action> </Sequence> <Action>detect_target</Action> </Selector> <Condition>is_target_lost</Condition> <Action>move_to_position</Action> </Sequence> </BehaviorTree> 
###
4. // INSTRUCTIONS: Use only the following behaviors {'move_forward': 'Action: Move the robot one step forward in the current direction. Always returns True.', 'turn_left': 'Action: Turn the robot 90 degrees to the left. Always returns True.', 'turn_right': 'Action: Turn the robot 90 degrees to the right. Always returns True.', 'is_path_blocked': 'Condition: Check if the path in the current direction is blocked or impassable. Returns True if the path is blocked, False otherwise.', 'send_message': "Action: Send a message to other robots in the swarm. Always returns True.", 'is_message_received': 'Condition: Check if the robot has received a message from other robots. Returns True if a message is received, False otherwise.', 'is_target_reached': 'Condition: Check if the robot has reached its target location. Returns True if the target is reached, False otherwise.', 'communicate_with_team': 'Action: Communicate with other robots to coordinate movement and complete tasks. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4. // USER COMMAND: create behavior tree to 'Move towards the target location, communicate with the team, and send a message once the target is reached'. Output only the XML behavior tree without extra text.
4. // OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_target_reached</Condition><Action>send_message</Action></Sequence><Sequence><Action>move_forward</Action><Action>communicate_with_team</Action></Sequence></Selector></BehaviorTree>

###
5. // INSTRUCTIONS: Use only the following behaviors {'move_towards_target': 'Action: Move towards a specified target location. Always returns True.', 'capture_target': 'Action: Capture the specified target and bring it back to the nest. Always returns True.', 'is_target_reached': 'Condition: Check if the robot has reached the specified target location. Returns True if the target is reached, False otherwise.', 'is_target_captured': 'Condition: Check if the target has been captured and is being carried back to the nest. Returns True if the target is being carried, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5. // USER COMMAND: generate behavior tree to 'Capture and bring back the designated target'. Output only the XML behavior tree without extra text.
5. // OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_target_captured</Condition><Action>move_towards_target</Action></Sequence><Action>capture_target</Action></Selector></BehaviorTree>

###
6. // INSTRUCTIONS: Use only the following behaviors {'move_forward': 'Action: Move the robot one step forward in the current direction. Always returns True.', 'turn_left': 'Action: Turn the robot 90 degrees to the left. Always returns True.', 'turn_right': 'Action: Turn the robot 90 degrees to the right. Always returns True.', 'check_energy_level': "Condition: Check the robot's current energy level. Returns True if the energy level is above a specified threshold, False otherwise.", 'charge_battery': 'Action: Charge the robot's battery. Always returns True.', 'pick_up_object': 'Action: Pick up an object located in the same space as the robot. Always returns True.', 'deposit_object': 'Action: Deposit an object into a designated location. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6. // USER COMMAND: create behavior tree to 'Pick up an object, check energy level, and charge battery if necessary before depositing object'. Output only the XML behavior tree without extra text.
6. // OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>check_energy_level</Condition><Action>charge_battery</Action></Sequence><Sequence><Condition>is_object_picked_up</Condition><Action>deposit_object</Action></Sequence><Action>pick_up_object</Action></Selector></BehaviorTree>

###
7. // INSTRUCTIONS: Use only the following behaviors {'move_to_closest_object': 'Action: Move towards the closest object within the robot's sensor range. Always returns True.', 'gather_object': 'Action: Gather and store objects within a designated storage space. Always returns True.', 'is_near_storage': 'Condition: Check if the robot is near the designated storage space. Returns True if near, False otherwise.', 'has_object': 'Condition: Check if the robot is currently carrying any objects. Returns True if carrying, False otherwise.', 'is_storage_full': 'Condition: Check if the designated storage space is full. Returns True if full, False otherwise.', 'return_to_nest': 'Action: Return to the nest once the designated storage space is full. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7. // USER COMMAND: generate behavior tree to 'Gather objects within sensor range, store them in a designated space, and return to the nest when storage is full'. Output only the XML behavior tree without extra text.
7. // OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>has_object</Condition><Action>gather_object</Action></Sequence><Sequence><Condition>is_near_storage</Condition><Action>move_to_closest_object</Action></Sequence><Sequence><Condition>is_storage_full</Condition><Action>return_to_nest</Action></Sequence></Selector></BehaviorTree>4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Form a line, change color to green and continue movement, then move towards target and change color to white when target reached.'Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree><Sequence><Selector><Selector><Action>form_line</Action><Sequence><Condition>is_line_formed</Condition><Action>change_color_to_white</Action><Selector><Sequence><Condition>is_target_detected</Condition><Sequence><Action>change_color_to_green</Action><Action>continue_movement_agent</Action></Sequence></Selector></Selector></Selector><Sequence><Condition>is_target_reached</Condition><Action>change_color_to_white</Action></Sequence></Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'move_forward': 'Action: Move the robot forward. Always returns True.', 'move_backward': 'Action: Move the robot backward. Always returns True.', 'turn_right': 'Action: Turn the robot right. Always returns True.', 'turn_left': 'Action: Turn the robot left. Always returns True.', 'detect_wall': 'Condition: Check if the robot is close to a wall. Returns True if wall is detected, False otherwise.', 'detect_obstacle': 'Condition: Check if the robot is close to an obstacle. Returns True if obstacle is detected, False otherwise.', 'detect_target': 'Condition: Check if the target is within range. Returns True if the target is within range, False otherwise.', 'reached_target': 'Condition: Check if the robot has reached the target. Returns True if the robot has reached the target, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Move forward until obstacle is detected, then turn left and continue moving until target is reached.'Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>detect_obstacle</Condition><Action>move_backward</Action></Sequence><Sequence><Condition>detect_wall</Condition><Action>turn_left</Action><Action>move_forward</Action></Sequence></Selector><Condition>reached_target</Condition></Sequence></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'collect_resource': 'Action: Collect a resource. Returns True if resource is successfully collected, False otherwise.', 'drop_resource': 'Action: Drop off the collected resource. Returns True if resource is successfully dropped off, False otherwise.', 'is_at_resource': 'Condition: Check if the robot is at a resource node. Returns True if the robot is at a resource node, False otherwise.', 'is_carrying_resource': 'Condition: Check if the robot is carrying a resource. Returns True if the robot is carrying a resource, False otherwise.', 'is_base_full': 'Condition: Check if the base is full. Returns True if the base is full, False otherwise.', 'is_enemy_nearby': 'Condition: Check if an enemy robot is nearby. Returns True if an enemy is detected, False otherwise.', 'attack_enemy': 'Action: Attack the enemy. Returns True if enemy is successfully attacked, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Collect resource while avoiding enemies, then drop off at base once full and attack nearby enemies.'Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Selector><Condition>is_enemy_nearby</Condition><Action>avoid_enemy</Action></Selector><Sequence><Condition>is_at_resource</Condition><Action>collect_resource</Action></Sequence><Selector><Condition>is_base_full</Condition><Action>drop_resource</Action></Selector><Selector><Condition>is_enemy_nearby</Condition><Action>attack_enemy</Action></Selector></Sequence></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'move_forward': 'Action: Move the robot forward. Always returns True.', 'move_backward': 'Action: Move the robot backward. Always returns True.', 'move_left': 'Action: Move the robot left. Always returns True.', 'move_right': 'Action: Move the robot right. Always returns True.', 'avoid_obstacle': 'Action: Turn the robot in a random direction until obstacle is avoided. Returns True if robot successfully avoids obstacle, False otherwise.' 'is_at_goal': 'Condition: Check if the robot has reached the goal. Returns True if the robot has reached the goal, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: generate behavior tree to 'Move forward while avoiding obstacles, then move left, continue moving until the goal is reached.'Output only the XML behavior tree without extra text.
7.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>is_at_goal</Condition><Action>move_forward</Action></Sequence><Sequence><Condition>detect_obstacle</Condition><Selector><Action>avoid_obstacle</Action><Sequence><Action>
###
4.// INSTRUCTIONS: Use only the following behaviors {'move_to_location': "Action: Move to a specific location. Returns True if location is reached, False if unable to reach.", 'is_obstacle_in_path': 'Condition: Checks for obstacles on the path to the target location. Returns True if an obstacle is detected, False otherwise.', 'detect_target': 'Condition: Checks for nearby targets. Returns True if a target is detected, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Move to a specific location, but avoid obstacles on the way. Stop if a target is detected within 10 units.
4.// OUTPUT:
<BehaviorTree><Sequence><Action>move_to_location</Action><Condition>is_obstacle_in_path</Condition><Sequence><Action>detect_target</Action><Condition>less_than_10_units</Condition><Action>stop_movement</Action></Sequence></Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'detect_obstacles': "Condition: Checks for obstacles in all directions. Returns True if an obstacle is detected, False otherwise.", 'force_field': 'Action: Deploys a force field to protect against detected obstacles. Always returns True.', 'move_to_location': 'Action: Move to a specific location. Returns True if location is reached, False if unable to reach.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: If obstacles are detected, deploy a force field. Otherwise, move to a specific location.
5.// OUTPUT:
<BehaviorTree><Selector><Condition>detect_obstacles</Condition><Action>force_field</Action></Sequence><Sequence><Action>move_to_location</Action><Action>is_obstacle_in_path</Action></Sequence></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'detect_resource': "Condition: Checks for nearby resources. Returns True if a resource is detected, False otherwise.", 'collect_resource': 'Action: Collects the detected resource. Always returns True.', 'navigate_to_resource_area': 'Action: Moves to an area with high resource availability. Returns True if resource area is reached, False if unable to reach.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: If a resource is detected, collect it. Otherwise, navigate to a resource-rich area.
6.// OUTPUT:
<BehaviorTree><Selector><Condition>detect_resource</Condition><Action>collect_resource</Action></Sequence><Sequence><Action>detect_resource</Action><Action>navigate_to_resource_area</Action></Sequence></Selector></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'detect_obstacle': "Condition: Checks for obstacles in all directions. Returns True if an obstacle is detected, False otherwise.", 'obstacle_avoidance': 'Action: Moves away from detected obstacles. Returns False if unable to avoid, True otherwise.', 'collect_resource': 'Action: Collects the detected resource. Always returns True.', 'navigate_to_resource_area': 'Action: Moves to an area with high resource availability. Returns True if resource area is reached, False if unable to reach.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: If an obstacle is detected, try to avoid it. If unable to avoid, collect resource. Otherwise, navigate to a resource-rich area.
7.// OUTPUT:
<BehaviorTree><Selector><Condition>detect_obstacle</Condition><Sequence><Action>obstacle_avoidance</Action><Condition>obstacle_avoided</Condition><Action>collect_resource</Action></Sequence></Selector><Sequence><Action>detect_resource</Action><Action>is_obstacle_in_path</Action><Action>navigate_to_resource_area</Action></Sequence></Selector></BehaviorTree> 
3.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.', 'pick_up_object': 'Action: Pick up the nearest object within reach. Return True if an object is successfully picked up, False otherwise.', 'drop_object': 'Action: Drop the currently held object. Always returns True.', 'is_object_held': 'Condition: Check if the agent is currently holding an object. Returns True if an object is held, False otherwise.', 'is_agent_nearby': 'Condition: Check if another agent is within 10 units. Returns True if another agent is in proximity, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3.// USER COMMAND: generate behavior tree to 'Collect all objects within the environment and return to the nest' Output only the XML behavior tree without extra text.
3.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_agent_in_nest</Condition><Action>drop_object</Action></Sequence><Sequence><Condition>is_object_held</Condition><Condition>is_agent_nearby</Condition><Action>drop_object</Action><Action>wander</Action></Sequence><Sequence><Condition>is_object_held</Condition><Condition>is_agent_in_nest</Condition><Action>drop_object</Action><Action>change_color_to_green</Action></Sequence><Selector><Sequence><Condition>is_target_detected</Condition><Condition>pick_up_object</Condition><Action>update_map</Action></Sequence><Action>move_forward</Action></Selector></Selector></BehaviorTree> 

4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.', 'share_map_data': 'Action: Share internal map data with other agents in the environment. Always returns True.', 'is_map_data_received': 'Condition: Check if updated map data has been received from another agent. Returns True if data has been received, False otherwise.', 'is_agent_in_same_area': 'Condition: Check if another agent is in the same mapped area. Returns True if another agent is in the same area, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Collaboratively map and explore the environment with other agents' Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_agent_in_same_area</Condition><Condition>is_map_data_received</Condition></Sequence><Action>share_map_data</Action></Selector><Sequence><Condition>is_obstacle_detected</Condition><Action>avoid_obstacle</Action><Action>share_map_data</Action></Sequence><Sequence><Condition>is_path_blocked</Condition><Action>turn_left</Action></Sequence><Action>wander</Action></Selector></BehaviorTree> 

5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are 
###
3.// INSTRUCTIONS: Use only the following behaviors {'explore_area': 'Action: Makes the robot explore a specified area. Always returns True.', 'detect_obstacle': 'Condition: Checks for obstacles in front of the robot. Returns True if an obstacle is detected, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3.// USER COMMAND: Continuously explore the area but stop and wait if an obstacle is detected.
3.// OUTPUT:
<BehaviorTree><Sequence><Action>explore_area</Action><Selector><Sequence><Condition>detect_obstacle</Condition><Action>rest_and_wait</Action></Sequence></Selector></Sequence></BehaviorTree>

###
4.// INSTRUCTIONS: Use only the following behaviors {'take_picture': 'Action: Captures an image using the robot's camera. Always returns True.', 'detect_human': 'Condition: Checks for the presence of a human in the image. Returns True if a human is detected, False otherwise.', 'ask_for_help': 'Action: Makes the robot ask a nearby human for assistance. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Take a picture and detect if there is a human in it. If a human is detected, ask for their help.
4.// OUTPUT:
<BehaviorTree><Sequence><Action>take_picture</Action><Condition>detect_human</Condition><Sequence><Action>ask_for_help</Action></Sequence></Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'collect_resource': 'Action: Makes the robot collect a resource in its vicinity. Always returns True.', 'check_inventory': 'Condition: Checks the robot's inventory to determine if it is full. Returns True if full, False otherwise.', 'return_to_base': 'Action: Commands the robot to return to its base. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Collect resources until the inventory is full, then return to base.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>collect_resource</Action><Selector><Sequence><Condition>check_inventory</Condition><Action>return_to_base</Action></Sequence></Selector></Sequence></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'scan_area': 'Action: Scans the area using sensors. Always returns True.', 'find_target': 'Subtree node: Represents a behavior tree for finding a target.', 'shoot_target': 'Action: Shoots the target. Always returns True.', 'check_ammo': 'Condition: Checks if ammo levels are sufficient. Returns True if ammo is enough, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Continuously scan the area and find a target. Once a target is found, shoot it if there is enough ammo. Otherwise, find more ammo and reload before shooting.
6.// OUTPUT:
<BehaviorTree><Sequence><Action>scan_area</Action><Selector><Sequence><Action>find_target</Action><Sequence><Condition>check_ammo</Condition><Sequence><Action>shoot_target</Action></Sequence><Selector><Action>find_ammo</Action><Action>reload</Action><Action>shoot_target</Action></Selector></Sequence></Selector></Sequence></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'take_action': 'Action: Performs an action based on a given input. Returns True if action is successful, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: Take action based on user input, such as moving in a specific direction, picking up an object, or interacting with another robot.
7.// OUTPUT:
<BehaviorTree><Action>take_action</Action></BehaviorTree>(Indentation included for readability)
###
3.// INSTRUCTIONS: Use only the following behaviors {'collect_resources': 'Action: Collect resources from the environment. Always returns True.', 'build_structure': 'Action: Use collected resources to construct a structure at a specified location. Always returns True.', 'check_inventory': 'Condition: Check if the robot has enough resources in its inventory. Returns True if enough resources are available, False otherwise.', 'recharge_battery': 'Action: Recharge the robot's battery using a charging station. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3.// USER COMMAND: Collect resources and use them to build a structure, but always make sure there are enough resources available before building.
3.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>collect_resources</Action><Condition>check_inventory</Condition><Action>build_structure</Action></Sequence><Selector><Action>recharge_battery</Action><Action>wait</Action></Selector></Selector></BehaviorTree>

###
4.// INSTRUCTIONS: Use only the following behaviors {'navigate_to_goal': 'Action: Use sensors and path planning algorithms to navigate towards the goal location. Always returns True.', 'avoid_obstacles': 'Action: Use sensors and avoidance techniques to avoid obstacles while navigating. Always returns True.', 'check_distance_to_goal': 'Condition: Check the distance to the goal. Returns True if the distance is within a specific threshold, False otherwise.', 'reached_goal': 'Condition: Check if the robot has successfully reached the goal. Returns True if the robot is at the goal location, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Navigate to a specified goal location, avoiding obstacles along the way. If unable to reach the goal, keep trying.
4.// OUTPUT:
<BehaviorTree><Sequence><Condition>reached_goal</Condition><Selector><Sequence><Selector><Condition>check_distance_to_goal</Condition><Action>navigate_to_goal</Action></Selector><Action>avoid_obstacles</Action></Sequence></Selector></Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'explore_area': 'Action: Use sensors and mapping techniques to explore and map the environment. Always returns True.', 'collect_data': 'Action: Collect and store data from the explored area. Always returns True.', 'analyze_data': 'Action: Use data analysis algorithms to analyze the collected data. Always returns True.', 'is_data_useful': 'Condition: Check if the analyzed data is useful for the task at hand. Returns True if useful, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Explore and map the environment, collecting and analyzing data for a specific task. If the data is not useful, repeat the process.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>explore_area</Action><Action>collect_data</Action><Selector><Action>analyze_data</Action><Action>wait</Action></Selector></Sequence><Selector><Action>is_data_useful</Action><Condition>is_data_useful</Condition></Selector></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'find_food_source': 'Action: Use sensors and algorithms to locate a source of food in the environment. Always returns True.', 'collect_food': 'Action: Collect food from the identified source. Always returns True.', 'eat_food': 'Action: Consume the collected food to restore energy. Always returns True.', 'is_hungry': 'Condition: Check if the robot's energy level is below a specific threshold, indicating hunger. Returns True if energy is below the threshold, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Search for food in the environment, collect and eat it to maintain energy levels. If still hungry, repeat the process.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>find_food_source</Action><Action>collect_food</Action><Selector><Action>eat_food</Action><Action>wait</Action></Selector></Sequence><Sequence><Condition>is_hungry</Condition><Action>find_food_source</Action></Sequence></Selector></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'move_to_center': 'Action: Move the robot towards the center of the specified area. Always returns True.', 'scan_for_targets': 'Action: Use sensors to scan for potential targets in the surrounding area. Always returns True.', 'detect_target': 'Condition: Check if a target has been detected by the sensors. Returns True if a target is detected, False otherwise.', 'engage_target': 'Action: Move towards and engage the target in combat. Always returns True.', 'check_health': 'Condition: Check the robot's health. Returns True if health is above a specific threshold, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: Move towards the center of the specified area, scan for and engage any targets in the surrounding area. If low on health, retreat to a safe location.
7.// OUTPUT:
<BehaviorTree><Sequence><Action>move_to_center</Action><Selector><Sequence><Sequence><Action>scan_for_targets</Action><Condition>detect_target</Condition><Action>engage_target</Action></Sequence><Sequence><Action>wait</Action><Action>disengage_target</Action></Sequence><Selector><Condition>check_health</Condition><Action>retreat_to_safe_location</Action></Selector></Selector></Sequence></Selector></BehaviorTree> 
###
4.// INSTRUCTIONS: Use only the following behaviors {'do_task': 'Action: Perform a specific task. Always returns True.', 'scan_environment': 'Subtree node: Represents a behavior tree for scanning the environment.', 'find_path': 'Subtree node: Represents a behavior tree for finding the shortest path to a target.', 'avoid_obstacles': 'Action: Move around detected obstacles. Always returns True.', 'reach_target': 'Action: Move towards the target. Always returns True.', 'is_target_found': 'Condition: Checks if the target is found. Returns True if the target is found, False otherwise.', 'is_obstacle_present': 'Condition: Checks if an obstacle is present. Returns True if an obstacle is present, False otherwise.', 'is_path_clear': 'Condition: Checks if the path is clear. Returns True if no obstacles are present, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Complete a specific task by scanning the environment, finding the shortest path, and avoiding obstacles along the way.
4.// OUTPUT:
<BehaviorTree><Selector><Action>do_task</Action><Sequence><Action>scan_environment</Action><Selector><Sequence><Action>find_path</Action><Selector><Action>avoid_obstacles</Action><Action>reach_target</Action></Selector></Sequence><Action>is_path_clear</Action></Selector></Sequence></Selector></BehaviorTree>
 
###
5.// INSTRUCTIONS: Use only the following behaviors {'speak': "Action: Have the agent speak provided text. Always returns True.", 'listen': 'Action: Listen for voice commands. Always returns True.', 'navigate_to_location': 'Action: Move towards a specific location. Always returns True.', 'check_battery_life': 'Subtree node: Represents a behavior tree for checking battery life.', 'recharge_battery': 'Action: Find and recharge the battery. Always returns True.', 'enter_sleep_mode': 'Action: Enter sleep mode to conserve battery. Always returns True.', 'is_battery_low': 'Condition: Checks if battery life is below a specific threshold. Returns True if battery life is below the threshold, False otherwise.', 'is_location_reached': 'Condition: Checks if the agent has reached a specific location. Returns True if the location is reached, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Navigate to a specific location while monitoring battery life. If battery is low, recharge and then enter sleep mode.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>navigate_to_location</Action></Sequence><Sequence><Action>check_battery_life</Action><Selector><Sequence><Condition>is_battery_low</Condition><Action>recharge_battery</Action><Action>enter_sleep_mode</Action></Sequence></Selector></Sequence></Selector></BehaviorTree>
 
###
6.// INSTRUCTIONS: Use only the following behaviors {'explore': 'Subtree node: Represents a behavior tree for exploring the environment.', 'gather_resources': 'Subtree node: Represents a behavior tree for gathering resources.', 'deposit_resources': 'Action: Move to the deposit location and drop off collected resources. Always returns True.', 'is_resource_available': 'Condition: Checks if there are resources available in the environment. Returns True if resources are available, False otherwise.', 'is_deposited': 'Condition: Checks if the agent has deposited its resources. Returns True if resources have been deposited, False otherwise.', 'gather_resource_task': 'Action: Perform a specific task to gather resources. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Explore the environment, gather resources, and then deposit them at a specific location.
6.// OUTPUT:
<BehaviorTree><Selector><Action>explore</Action><Sequence><Action>gather_resources</Action><Selector><Sequence><Condition>is_resource_available</Condition><Action>gather_resource_task</Action><Action>deposit_resources</Action><Action>is_deposited</Action></Sequence></Selector></Sequence></Selector></BehaviorTree>
 
###
7.// INSTRUCTIONS: Use only the following behaviors {'collect_data': 'Action: Collect data from sensors. Always returns True.', 'process_data': 'Subtree node: Represents a behavior tree for processing data.', 'upload_data': 'Action: Upload processed data to a specific location. Always returns True.', 'is_data_available': 'Condition: Checks if data is available on sensors. Returns True if data is available, False otherwise.', 'is_data_processed': 'Condition: Checks if data has been processed. Returns True if data has been processed, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: Collect data, process it, and then upload it to a specific location.
7.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>collect_data</Action><Selector><Action>process_data</Action><Selector><Sequence><Condition>is_data_available</Condition><Action>upload_data</Action><Action>is_data_processed</Action></Sequence></Selector></Selector></Sequence></Selector></BehaviorTree>
###
4.// INSTRUCTIONS: Use only the following behaviors {'send_signal': 'Action: Send a signal to other robots. Always returns True.', 'receive_signal': 'Action: Receive a signal from another robot. Returns True if a signal is received, False otherwise.', 'form_circle': 'Action: Form a circular formation with the other robots. Always returns True.', 'scan_environment': 'Action: Scan the environment using sensors. Always returns True.', 'is_target_visible': 'Condition: Check if the target is visible in the environment. Returns True if the target is visible, False otherwise.', 'is_enemy_detected': 'Condition: Check if an enemy or threat is detected in the environment. Returns True if an enemy is detected, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Generate behavior tree for a swarm of robots to communicate, scan the environment, and detect enemies
4.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_enemy_detected</Condition><Action>send_signal</Action><Action>form_circle</Action></Sequence><Sequence><Condition>is_target_visible</Condition><Selector><Sequence><Action>scan_environment</Action></Sequence><Sequence><Condition>receive_signal</Condition><Action>form_circle</Action></Sequence></Selector></Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'move_to_location': 'Action: Move the robot to a specific location. Always returns True.', 'set_waypoint': 'Action: Set a waypoint for the robot to move towards. Returns True if the waypoint is successfully set, False otherwise.', 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'check_battery': 'Condition: Check the robot's battery level. Returns True if the battery level is sufficient, False otherwise.', 'is_target_reached': 'Condition: Check if the robot has reached the target location. Returns True if the target is reached, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_task_completed': 'Condition: Check if the task is completed. Returns True if the task is completed, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Generate behavior tree for a robot to navigate to a specific location while avoiding obstacles and checking battery level
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>check_battery</Condition><Action>move_to_location</Action></Sequence><Sequence><Condition>is_obstacle_detected</Condition><Action>avoid_obstacle</Action></Sequence><Sequence><Condition>is_target_reached</Condition><Action>set_waypoint</Action></Sequence></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'move_forward': 'Action: Move the robot one step forward in the current direction. Always returns True.', 'move_backward': 'Action: Move the robot one step backward in the current direction. Always returns True.', 'turn_left': 'Action: Turn the robot 90 degrees to the left. Always returns True.', 'turn_right': 'Action: Turn the robot 90 degrees to the right. Always returns True.', 'rotate_left': 'Action: Rotate the robot continuously to the left. Always returns True.', 'rotate_right': 'Action: Rotate the robot continuously to the right. Always returns True.', 'is_obstacle_ahead': 'Condition: Check if there is an obstacle blocking the path ahead. Returns True if an obstacle is detected, False otherwise.', 'is_target_reached': 'Condition: Check if the robot has reached the target location. Returns True if the target is reached, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Generate behavior tree for a robot to navigate through a maze and reach the target
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_obstacle_ahead</Condition><Selector><Sequence><Action>rotate_left</Action><Action>turn_right</Action></Sequence><Sequence><Action>rotate_right</Action><Action>turn_right</Action></Sequence><Sequence><Action>move_forward</Action><Action>move_backward</Action></Sequence></Selector></Sequence><Sequence><Condition>is_target_reached</Condition><Action>rotate_left</Action></Sequence></Selector></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'follow_path': 'Action: Follow a predefined path. Always returns True.', 'pickup_object': 'Action: Pick up an object if it is within a certain range. Returns True if the object is successfully picked up, False otherwise.', 'release_object': 'Action: Release the currently held object. Always returns True.', 'is_path_clear': 'Condition: Check if the path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_object_in_range': 'Condition: Check if there is an object within a certain range. Returns True if an object is detected, False otherwise.', 'is_object_held': 'Condition: Check if the robot is currently holding an object. Returns True if an object is held, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: Generate behavior tree for a robot to pick up and transport objects while navigating through obstacles
7.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_object_in_range</Condition><Selector><Sequence><Condition>is_path_clear</Condition><Action>move_forward</Action></Sequence><Sequence><Condition>avoid_obstacle</Condition><Action>follow_path</Action></Sequence></Selector></Sequence><Sequence><Condition>is_object_held</Condition><Action>release_object</Action></Sequence><Sequence><Condition>is_path_clear</Condition><Action>follow_path</Action></Sequence><Sequence><Condition>is_object_in_range</Condition><Action>pickup_object</Action></Sequence><Sequence><Action>follow_path</Action></Sequence></Selector></BehaviorTree> 
###
4.// INSTRUCTIONS: Use only the following behaviors {'change_color_to_red': "Action: Change agent's color to red. Always returns True.", 'move_to_other_side': 'Action: Move the robot to the other designated side of the environment. Always returns True.', 'is_agent_in_designated_area': 'Condition: Check if the agent is in the designated area. Returns True if the agent is in the designated area, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 10 units. Returns True if the target is within 10 units of distance, False otherwise.', 'wait': 'Action: Wait for a certain amount of time before proceeding to the next action. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Generate behavior tree for a robot to travel to the designated side of the environment, wait for a specified amount of time, and then change color to red.
4.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_agent_in_designated_area</Condition><Selector><Wait>5 seconds</Wait><Action>change_color_red</Action></Selector></Sequence><Selector><Sequence><Condition>is_target_reached</Condition><Selector><Sequence><Action>move_to_other_side</Action><Wait>10 seconds</Wait></Selector></Selector></Sequence></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'scan_for_intruders': 'Action: Scan the current area for any intruders using sensors. Always returns True.', 'report_intruder': 'Action: Send an alert signal indicating an intruder has been detected. Always returns True.', 'return_to_base': 'Action: Return to the designated base location. Always returns True.', 'is_intruder_nearby': 'Condition: Check for any detected intruders within a certain range. Returns True if an intruder is detected, False otherwise.', 'is_base_reached': 'Condition: Check if the robot has reached the designated base location. Returns True if at the base location, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Generate behavior tree for a robot to patrol an area, scan for intruders, and return to base if an intruder is nearby
5.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_intruder_nearby</Condition><Selector><Sequence><Action>scan_for_intruders</Action><Selector><Action>report_intruder</Action><Action>wait</Action></Selector></Sequence></Selector></Sequence><Selector><Sequence><Condition>is_base_reached</Condition><Selector><Sequence><Action>return_to_base</Action><Wait>5 seconds</Wait></Selector></Selector></Sequence></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'move_to_point_A': 'Action: Move the robot to designated point A. Always returns True.', 'move_to_point_B': 'Action: Move the robot to designated point B. Always returns True.', 'move_to_point_C': 'Action: Move the robot to designated point C. Always returns True.', 'detect_cluster': 'Condition: Check if there is a cluster of objects in the environment. Returns True if a cluster is detected, False otherwise.', 'is_cluster_at_point_A': 'Condition: Check if the cluster is at designated point A. Returns True if the cluster is at point A, False otherwise.', 'is_cluster_at_point_B': 'Condition: Check if the cluster is at designated point B. Returns True if the cluster is at point B, False otherwise.', 'is_cluster_at_point_C': 'Condition: Check if the cluster is at designated point C. Returns True if the cluster is at point C, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.', 'move_forward': 'Action: Move the robot one step forward in the current direction. Always returns True.', 'turn_left': 'Action: Turn the robot 90 degrees to the left. Always returns True.', 'turn_right': 'Action: Turn the robot 90 degrees to the right. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Generate behavior tree for a robot to search for a cluster of objects and move to their designated locations
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>detect_cluster</Condition><Selector><Sequence><Condition>is_cluster_at_point_A</Condition><Sequence><Condition>move_to_point_A</Condition><Action>task_completed</Action></Sequence></Selector><Sequence><Condition>is_cluster_at_point_B</Condition><Sequence><Condition>move_to_point_B</Condition><Action>task_completed</Action></Sequence></Selector><Sequence><Condition>is_cluster_at_point_C</Condition><Sequence><Condition>move_to_point_C</Condition><Action>task_completed</Action></Sequence></Selector></Sequence><Selector><Wait>3 seconds</Wait><Action>wander</Action></Selector></Selector></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'move_to_target': 'Action: Move the robot to the designated target location. Always returns True.', 'collect_target': 'Action: Collect the target object if it is within reach. Always returns True.', 'drop_target': 'Action: Drop the target object at the designated drop-off location. Always returns True.', 'detect_item': 'Condition: Check if there is a specific type of item in the environment. Returns True if the item is detected, False otherwise.', 'is_target_collected': 'Condition: Check if the target object has been collected by the robot. Returns True if the target is collected, False otherwise.', 'is_at_destination': 'Condition: Check if the robot has reached the designated target location. Returns True if at the target location, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: Generate behavior tree for a robot to navigate towards a specific target object, collect it, and drop it off at a designated location
7.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_at_destination</Condition><Action>detect_item</Action><Selector><Sequence><Condition>is_target_collected</Condition><Selector><Sequence><Action>collect_target</Action><Wait>5 seconds</Wait><Action>drop_target</Action></Sequence></Selector></Sequence><Action>move_to_target</Action></Selector></Sequence></BehaviorTree>
###
3.// INSTRUCTIONS: Use only the following behaviors {'pick_up_item': 'Action: Move to and pick up a specific item. Returns True when the item is picked up.', 'drop_item': 'Action: Move to and drop a specific held item. Returns True when the item is dropped.', 'is_item_in_reach': 'Condition: Check if a specific item is within reach. Returns True if the item is within reach, False otherwise.', 'is_item_held': 'Condition: Check if a specific item is currently held. Returns True if the item is held, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3.// USER COMMAND: Pick up the blue key and drop it off at the blue door.
3.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>is_item_in_reach</Condition><Action>pick_up_item</Action></Sequence><Selector><Sequence><Condition>is_item_held</Condition><Action>drop_item</Action></Sequence></Selector></Selector></BehaviorTree>

###
4.// INSTRUCTIONS: Use only the following behaviors {'move_to_location': 'Action: Move to a specific location. Returns True when the location is reached.', 'collect_resources': 'Subtree node: Represents a behavior tree for collecting resources and depositing them at a specific location.', 'is_resource_nearby': 'Condition: Check if any resources are within a certain distance. Returns True if resources are nearby, False otherwise.', 'is_resource_depleted': 'Condition: Check if a specific resource is depleted. Returns True if the resource is depleted, False otherwise.', 'is_in_nest': 'Condition: Check if the agent is currently in the nest. Returns True if in the nest, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Collect resources from nearby and deposit them at the nest until a certain resource is depleted.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_resource_nearby</Condition><Action>move_to_location</Action><Action>collect_resources</Action></Sequence><Sequence><Condition>is_resource_depleted</Condition><Condition>is_in_nest</Condition></Sequence></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'move_to_conveyor': 'Action: Move to the nearest conveyor belt. Returns True when the conveyor is reached.', 'use_conveyor': 'Action: Use the conveyor belt to travel to the other side. Returns True when the agent arrives at the other end.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_conveyor_active': 'Condition: Check if the conveyor belt is currently active. Returns True if active, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Navigate through the warehouse by using conveyor belts, while avoiding obstacles.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_conveyor_active</Condition><Action>move_to_conveyor</Action><Action>use_conveyor</Action></Sequence><Sequence><Condition>is_obstacle_detected</Condition></Sequence></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'move_to_zone': 'Action: Move to a specific zone in the environment. Returns True when the zone is reached.', 'scan_for_objects': 'Action: Use sensors to scan for objects in the environment. Returns True after scanning is complete.', 'is_object_found': 'Condition: Check if a specific object is found by the sensors. Returns True if the object is found, False otherwise.', 'collect_objects': 'Action: Move to and collect any objects found within the current zone. Returns True when all objects are collected and the agent returns to the zone entrance.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Search for and collect all objects in a specific zone.
6.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Action>scan_for_objects</Action><Selector><Sequence><Condition>is_object_found</Condition><Action>move_to_zone</Action><Action>collect_objects</Action></Sequence></Selector></Sequence><Sequence><Condition>is_object_found</Condition></Sequence></Selector></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'pickup_object': 'Action: Move to and pick up a specific object. Returns True when the object is picked up.', 'drop_object': 'Action: Move to and drop a specific held object. Returns True when the object is dropped.', 'transport_object': 'Subtree node: Represents a behavior tree for transporting an object from one location to another.', 'return_to_base': 'Action: Move to and return the object to the base location. Returns True when the object is successfully returned.', 'is_target_in_range': 'Condition: Check if the target object is within a specific range. Returns True if the target is within range, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: Pick up the package, transport it to a specific location and return to the base.
7.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>is_target_in_range</Condition><Action>pickup_object</Action><Action>transport_object</Action><Action>return_to_base</Action></Sequence><Sequence><Action>drop_object</Action></Sequence></Selector></BehaviorTree> 
###
3.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'move_to_target': 'Action: Move towards the target location. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3.// USER COMMAND: generate behavior tree to 'Follow a moving target and freeze movement upon reaching it'Output only the XML behavior tree without extra text.
3.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_target_reached</Condition><Action>agent_movement_freeze</Action></Sequence><Sequence><Action>move_to_target</Action><Action>continue_movement_agent</Action></Sequence></BehaviorTree>

###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'move_to_target': 'Action: Move towards the target location. Always returns True.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Return to the nest, but freeze movement if target is detected on the way'Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_target_reached</Condition><Action>agent_movement_freeze</Action></Sequence><Sequence><Condition>is_target_detected</Condition><Action>move_to_target</Action><Action>continue_movement_agent</Action></Sequence></Selector><Sequence><Condition>is_agent_in_nest</Condition><Action>task_completed</Action></Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'is_path_blocked': 'Condition: Check if the path in the current direction is blocked or impassable. True if the path is blocked, False otherwise.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'move_to_target': 'Action: Move towards the target location. Always returns True.', 'obstacle_avoidance': 'Action: Move in a random direction to avoid obstacles. Always returns True.', 'travel_to_nest': 'Action: Move towards the nest location. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Navigate through a maze, avoiding obstacles and reaching the target'Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_target_detected</Condition><Action>move_to_target</Action><Action>agent_movement_freeze</Action></Sequence><Sequence><Condition>is_path_blocked</Condition><Action>obstacle_avoidance</Action></Sequence></Selector><Sequence><Action>travel_to_nest</Action></Sequence></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'check_weather': 'Condition: Check the current weather conditions. Returns True if it is sunny, False if it is rainy.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'follow_person': 'Action: Follow a designated person. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Change color to green in sunny weather, follow a designated person, and change color to white upon reaching them'Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree><Sequence><Condition>check_weather</Condition><Action>change_color_to_green</Action></Sequence><Sequence><Condition>is_target_reached</Condition><Action>change_color_to_white</Action><Action>agent_movement_freeze</Action></Sequence><Sequence><Condition>follow_person</Condition><Action>move_to_target</Action></Sequence><Sequence><Condition>is_target_detected</Condition><Action>wander</Action></Sequence><Sequence><Action>follow_person</Action></Sequence></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_red': "Action: Change agent's color to red. Always returns True.", 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'random_movement': 'Action: Move in a random direction. Always returns True.', 'reverse_direction': 'Action: Reverse the direction of movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: generate behavior tree to 'Wander around until target is reached, change color to red, and return to the nest'Output only the XML behavior tree without extra text.
7.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_target_reached</Condition><Action>change_color_to_red</Action><Action>agent_movement_freeze</Action></Sequence><Sequence><Condition>is_agent_in_nest</Condition><Action>###
3.// INSTRUCTIONS: Use only the following behaviors {'navigate_to_target': 'Action: Navigate to the target location using a specific path-finding algorithm. Returns True when the target location is reached.', 'pick_up_object': 'Action: Pick up an object at the current location. Returns True when object is successfully picked up.', 'deliver_object': 'Action: Deliver the picked up object to a designated location. Returns True when the object is successfully delivered.', 'is_at_target': 'Condition: Checks if the agent is currently at the target location. Returns True if agent is at the target location, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3.// USER COMMAND: Pick up object at current location and deliver it to target location. If already holding an object, deliver it to target location.
3.// OUTPUT:
<BehaviorTree><Selector><Sequence><Sequence><Condition>is_at_target</Condition><Action>pick_up_object</Action></Sequence><Action>deliver_object</Action></Sequence><Sequence><Condition>is_at_target</Condition><Action>navigate_to_target</Action></Sequence></Selector></BehaviorTree>

###
4.// INSTRUCTIONS: Use only the following behaviors {'search_and_rescue': 'Composite node: Represents a behavior tree for searching and rescuing victims.', 'gather_supplies': 'Composite node: Represents a behavior tree for gathering supplies in a disaster scenario.', 'is_victim_found': 'Condition: Checks if a victim is found. Returns True if a victim is detected, False otherwise.', 'has_supplies': 'Condition: Checks if the agent has enough supplies. Returns True if supplies level is above a certain threshold, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: If a victim is found, rescue them and return to base. If no victim is found but supplies are low, gather supplies and return to base.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_victim_found</Condition><Action>search_and_rescue</Action></Sequence><Sequence><Condition>has_supplies</Condition><Action>gather_supplies</Action></Sequence></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'approach_target': 'Action: Move towards the target. Returns True when target is in close proximity.', 'wait_for_signal': 'Action: Wait for a specific signal from another robot. Returns True when the signal is received.', 'send_signal': 'Action: Send a signal to another robot. Returns True when signal is successfully sent.', 'is_target_in_attack_range': 'Condition: Checks if the target is within attack range. Returns True if target is within specified range, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Move towards target, wait for signal, and attack when target is within range. If target moves out of range, move closer and repeat.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_target_in_attack_range</Condition><Action>approach_target</Action></Sequence><Sequence><Condition>wait_for_signal</Condition><Sequence><Action>send_signal</Action><Action>send_signal</Action></Sequence></Sequence></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'scan_area': 'Action: Scan the surrounding area for potential targets. Returns True when area is successfully scanned.', 'move_to_cover': 'Action: Move to a designated cover location. Returns True when agent reaches cover.', 'take_aim': 'Action: Prepare to take accurate shots. Returns True when aim is locked.', 'is_enemy_detected': 'Condition: Checks if enemies are detected in the surrounding area. Returns True if enemies are detected, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Scan the surrounding area and take aim at any detected enemies. If no enemies are detected, move to cover and repeat.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_enemy_detected</Condition><Action>scan_area</Action></Sequence><Sequence><Condition>is_enemy_detected</Condition><Sequence><Action>take_aim</Action><Action>move_to_cover</Action></Sequence></Sequence></Selector></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'look_for_food': 'Action: Search for food sources in the environment. Returns True when a food source is found.', 'pick_up_food': 'Action: Pick up the available food source at the current location. Returns True when food is successfully picked up.', 'consume_food': 'Action: Consume the food source held by the agent. Returns True when food is consumed.', 'is_food_available': 'Condition: Checks if there is food available at the current location. Returns True if there is food to be picked up, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: If there is food available, pick it up and consume it. If no food is available, keep searching for food sources.
7.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_food_available</Condition><Action>pick_up_food</Action></Sequence><Sequence><Condition>is_food_available</Condition><Action>consume_food</Action></Sequence><Action>look_for_food</Action></Selector></BehaviorTree>
###
3.// INSTRUCTIONS: Use only the following behaviors {'collect_resource': 'Action: Collect a resource from the environment and store it in the robot's inventory. Returns True if successful, False otherwise.', 'drop_resource': 'Action: Drop a resource from the robot's inventory onto a designated location. Returns True if successful, False otherwise.', 'is_inventory_full': 'Condition: Check if the robot's inventory is full. Returns True if full, False otherwise.', 'is_resource_available': 'Condition: Check if there is a resource available in the environment. Returns True if available, False otherwise.', 'is_resource_reachable': 'Condition: Check if the nearest resource is reachable by the robot. Returns True if reachable, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3.// USER COMMAND: Generate behavior tree for a group of robots to collect and distribute resources for a construction project
3.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>is_inventory_full</Condition><Action>drop_resource</Action></Sequence><Sequence><Condition>is_resource_available</Condition><Selector><Action>collect_resource</Action><Action>update_map</Action></Selector></Sequence></Selector><Condition>is_resource_reachable</Condition><Action>move_to_resource</Action></Sequence></BehaviorTree>

###
4.// INSTRUCTIONS: Use only the following behaviors {'follow_leader': 'Action: Follow the designated leader robot's movements. Returns True if following, False otherwise.', 'scan_environment': 'Action: Use sensors to scan the environment and detect any obstacles or hazards. Always returns True.', 'avoid_obstacle': 'Action: Take evasive maneuvers to avoid any detected obstacles. Returns True if successful, False otherwise.', 'is_leader_lost': 'Condition: Check if the leader robot is out of communication range or has malfunctioned. Returns True if lost, False otherwise.', 'is_obstacle_present': 'Condition: Check if an obstacle is currently present in the environment. Returns True if present, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Generate behavior tree for a swarm of robots to follow a designated leader through an unknown environment
4.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_leader_lost</Condition><Selector><Action>scan_environment</Action><Action>avoid_obstacle</Action></Selector></Sequence><Condition>is_obstacle_present</Condition><Selector><Action>follow_leader</Action><Action>move_around_obstacle</Action></Selector></Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'charge_battery': 'Action: Charge the robot's battery using a designated charging station. Returns True if successful, False otherwise.', 'navigate_to_goal': 'Action: Use the robot's GPS system to navigate to a specified goal location. Returns True if successful, False otherwise.', 'check_battery_level': 'Condition: Check the current level of the robot's battery. Returns True if battery is above specified threshold, False otherwise.', 'is_goal_reached': 'Condition: Check if the robot has reached the specified goal location. Returns True if reached, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Generate behavior tree for a robot to autonomously navigate to a destination while monitoring its battery level and recharging as needed
5.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_goal_reached</Condition><Selector><Condition>check_battery_level</Condition><Selector><Action>navigate_to_goal</Action><Action>charge_battery</Action></Selector></Sequence></Selector></Sequence></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'gather_food': 'Action: Use specialized tools to gather food from the environment. Returns True if successful, False otherwise.', 'cook_food': 'Action: Use a designated cooking station to prepare gathered food. Returns True if successful, False otherwise.', 'feed_colony': 'Action: Distribute prepared food to members of the robot colony. Returns True if successful, False otherwise.', 'is_food_available': 'Condition: Check if there is a sufficient amount of food available in the environment for the colony. Returns True if available, False otherwise.', 'is_colony_hungry': 'Condition: Check if the colony is in need of food. Returns True if hungry, False otherwise.'}, to construct behavior tree in XML format to following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Generate behavior tree for a colony of robots to gather, cook, and distribute food to sustain the colony's needs
6.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_colony_hungry</Condition><Selector><Condition>is_food_available</Condition><Selector><Sequence><Action>gather_food</Action><Action>cook_food</Action></Sequence><Action>feed_colony</Action></Selector></Sequence></Sequence></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'find_colony': 'Action: Use sensors to search for and locate the robot colony. Returns True if located, False otherwise.', 'return_to_colony': 'Action: Use GPS system to navigate back to the robot colony. Returns True if successful, False otherwise.', 'share_information': 'Action: Exchange information and updates with other members of the robot colony. Always returns True.', 'check_colony_status': 'Condition: Check the current status and needs of the robot colony. Returns True if status check is completed, False otherwise.', 'is_colony_found': 'Condition: Check if the robot has successfully located the colony. Returns True if found, False otherwise.'}, to construct behavior tree in XML format to following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: Generate behavior tree for a robot to navigate and communicate with a robot colony
7.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_colony_found</Condition><Selector><Condition>check_colony_status</Condition><Selector><Action>find_colony</Action><Action>return_to_colony</Action></Selector></Sequence><Action>share_information</Action></Selector></Sequence></BehaviorTree> 
###
3.// INSTRUCTIONS: Use only the following behaviors {'avoid_obstacle': 'Action: Adjust direction to avoid obstacle. Always returns True.', 'scan_environment': 'Action: Collect data on the surrounding environment. Always returns True.', 'repair_robot': 'Action: Repair any damages on the robot. Always returns True.', 'is_blocked': 'Condition: Check if the robot is blocked by an obstacle. Returns True if robot is blocked, False otherwise.', 'are_repairs_needed': 'Condition: Check if the robot is in need of repairs. Returns True if repairs are needed, False otherwise.', 'has_completed_mission': 'Condition: Check if the robot has completed its assigned mission. Returns True if mission is completed, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3.// USER COMMAND: Generate behavior tree for a repair robot to navigate an unknown environment, avoid obstacles, and perform repairs as needed
3.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_blocked</Condition><Selector><Sequence><Action>avoid_obstacle</Action><Action>scan_environment</Action><Action>repair_robot</Action></Sequence><Selector><Condition>are_repairs_needed</Condition><Action>repair_robot</Action><Condition>has_completed_mission</Condition><Action>wait</Action></Selector></Selector></Sequence></BehaviorTree>

###
4.// INSTRUCTIONS: Use only the following behaviors {'perform_scan': 'Action: Perform a scan of the environment using sensors. Always returns True.', 'collect_data': 'Action: Collect data from the scan for analysis. Always returns True.', 'analyze_data': 'Action: Analyze the collected data to determine potential hazards. Always returns True.', 'move_to_next_target': 'Action: Move to the next designated target area. Always returns True.', 'is_target_reached': 'Condition: Check if the robot has reached the designated target area. Returns True if reached, False otherwise.', 'is_hazard_detected': 'Condition: Check if any potential hazards were detected during the analysis. Returns True if hazards are detected, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Generate behavior tree for a scouting robot to scan and analyze an area for potential hazards before moving to the next target location
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>perform_scan</Action><Action>collect_data</Action><Sequence><Action>analyze_data</Action><Action>move_to_next_target</Action></Sequence></Sequence><Selector><Condition>is_target_reached</Condition><Action>move_to_next_target</Action><Condition>is_hazard_detected</Condition><Action>wait</Action></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'move_to_specific_point': 'Action: Move the robot to a specific point within the environment. Always returns True.', 'avoid_collision': 'Action: Adjust direction to avoid potential collisions. Always returns True.', 'check_surroundings': 'Action: Scan the surrounding area for any potential hazards. Always returns True.', 'is_point_reached': 'Condition: Check if the robot has reached the designated point. Returns True if reached, False otherwise.', 'is_hazard_present': 'Condition: Check if any potential hazards were detected during the scan. Returns True if hazards are present, False otherwise.', 'is_collision_detected': 'Condition: Check if a potential collision has been detected. Returns True if a collision is detected, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5/ USER COMMAND: Generate behavior tree for a robot to navigate to a specific location while avoiding collisions and checking for potential hazards
5.// OUTPUT:
<BehaviorTree><Sequence><Action>move_to_specific_point</Action><Condition>is_point_reached</Condition></Sequence><Selector><Condition>is_collision_detected</Condition><Action>avoid_collision</Action><Condition>is_hazard_present</Condition><Action>check_surroundings</Action></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'search_for_object': 'Action: Search the area for a specific object using sensors. Always returns True.', 'grab_object': 'Action: Use manipulators to pick up the designated object. Always returns True.', 'carry_object_to_destination': 'Action: Move the object to the designated destination. Always returns True.', 'is_object_found': 'Condition: Check if the designated object has been detected. Returns True if found, False otherwise.', 'is_object_grabbed': 'Condition: Check if the object has been successfully grabbed. Returns True if grabbed, False otherwise.', 'is_destination_reached': 'Condition: Check if the object has reached the designated destination. Returns True if reached, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Generate behavior tree for a robot to search, grab, and carry a specific object to a designated destination
6.// OUTPUT:
<BehaviorTree><Sequence><Action>search_for_object</Action><Sequence><Condition>is_object_found</Condition><Action>grab_object</Action><Action>carry_object_to_destination</Action></Sequence></Sequence><Selector><Condition>is_destination_reached</Condition><Action>carry_object_to_destination</Action><Condition>is_object_grabbed</Condition><Action>wait</Action></Selector></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'navigate_to_target': 'Action: Move the robot to the designated target location. Always returns True.', 'avoid_obstacles': 'Action: Adjust direction to avoid potential obstacles. Always returns True.', 'gather_resources': 'Action: Gather resources from the surrounding environment. Always returns True.', 'return_to_home': 'Action: Return to the designated home location. Always returns True.', 'is_target_reached': 'Condition: Check if the robot has reached the designated target location. Returns True if reached, False otherwise.', 'needs_repair': 'Condition: Check if the robot is in need of repairs. Returns True if repairs are needed, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: Generate behavior tree for a resource-gathering robot to navigate to a target location, gather resources, and return to home while avoiding obstacles and checking for needed repairs
7.// OUTPUT:
<BehaviorTree><Sequence><Action>navigate_to_target</Action><Selector><Action>avoid_obstacles</Action><Condition>is_target_reached</Condition><Sequence><Action>gather_resources</Action><Action>return_to_home</Action></Sequence></Selector><Selector><Condition>needs_repair</Condition><Action>return_to 
###
4.// INSTRUCTIONS: Use only the following behaviors {'move_forward': 'Action: Move one step forward while maintaining formation. Always returns True.', 'move_backward': 'Action: Move one step backward while maintaining formation. Always returns True.', 'rotate_left': 'Action: Rotate 90 degrees counterclockwise while maintaining formation. Always returns True.', 'rotate_right': 'Action: Rotate 90 degrees clockwise while maintaining formation. Always returns True.', 'is_obstacle_ahead': 'Condition: Check if there is an obstacle blocking the path ahead for the formation. Returns True if an obstacle is detected, False otherwise.', 'is_at_destination': 'Condition: Check if the formation has reached its destination. Returns True if the destination has been reached, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Move in formation to destination, avoiding obstacles along the way.'
4.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>is_obstacle_ahead</Condition> <Selector> <Sequence> <Action>rotate_left</Action> <Condition>is_obstacle_ahead</Condition> <Selector> <Sequence> <Action>rotate_right</Action> <Condition>is_obstacle_ahead</Condition> <Action>move_backward</Action> </Sequence> <Action>move_forward</Action> </Selector> </Sequence> <Action>move_forward</Action> </Sequence> <Condition>is_at_destination</Condition> </Selector> </Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'move_to_target': 'Action: Move towards the target location. Always returns True.', 'avoid_obstacles': 'Action: Avoid detected obstacles by selecting an alternative path. Always returns True.', 'detect_target': 'Condition: Check if the target is within the robot's field of view. Returns True if the target is detected, False otherwise.', 'is_moving_towards_target': 'Condition: Check if the robot is currently moving towards the target location. Returns True if the robot is moving towards the target, False otherwise.', 'has_reached_target': 'Condition: Check if the robot has reached the target location. Returns True if the robot has reached the target, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Move towards the target location, avoiding obstacles and maintaining progress.'
5.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>is_moving_towards_target</Condition> <Selector> <Sequence> <Condition>detect_target</Condition> <Action>move_to_target</Action> <Action>task_completed</Action> </Sequence> <Selector> <Sequence> <Condition>detect_target</Condition> <Action>avoid_obstacles</Action> </Sequence> <Action>task_completed</Action> </Selector> </Sequence> <Condition>has_reached_target</Condition> </Selector> </Sequence></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'patrol': 'Action: Patrol the designated area in a set pattern. Always returns True.', 'detect_enemy': 'Condition: Check if an enemy is within the robot's vicinity. Returns True if an enemy is detected, False otherwise.', 'attack_enemy': 'Action: Attack the enemy detected within the robot's vicinity. Always returns True.', 'retreat_to_base': 'Action: Retreat to base for repairs. Always returns True.', 'is_at_base': 'Condition: Check if the robot has returned to base. Returns True if the robot is back at the base, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Patrol designated area, attack enemy if present, retreat when damaged.'
6.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Action>patrol</Action> <Condition>detect_enemy</Condition> <Action>attack_enemy</Action> </Selector> <Condition>is_damaged</Condition> <Action>retreat_to_base</Action> <Condition>is_at_base</Condition> </Sequence> </BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'follow_path': 'Action: Follow a predetermined path. Always returns True.', 'detect_intersection': 'Condition: Check if an intersection is detected along the path. Returns True if an intersection is detected, False otherwise.', 'choose_random_path': 'Action: Choose a random path at an intersection. Always returns True.', 'detect_destination': 'Condition: Check if the destination is reached. Returns True if the destination is reached, False otherwise.', 'shortest_path': 'Action: Calculate and choose the shortest path to the destination. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: generate behavior tree to 'Navigate to destination by following the shortest path and choosing alternative paths at intersections.'
7.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Action>follow_path</Action> <Condition>detect_intersection</Condition> <Action>choose_random_path</Action> </Sequence> <Condition>detect_destination</Condition> <Action>shortest_path</Action> </Selector> </BehaviorTree>Note: The behaviors 'reform_formation' and 'is_object_detected' are not specified in the instructions but are used in the output, as they are necessary for the task to be performed.

###
3.// INSTRUCTIONS: Use only the following behaviors {'move_to_goal': 'Action: Move towards the designated goal. Returns True when the goal is reached.', 'pause_movement': 'Action: Pause current movement. Always returns True.', 'rotate_left': 'Action: Rotate the agent left by a fixed angle. Always returns True.', 'rotate_right': 'Action: Rotate the agent right by a fixed angle. Always returns True.', 'is_obstacle_nearby': 'Condition: Check for obstacles in the immediate vicinity. Returns True if an obstacle is detected, False otherwise.', 'is_goal_reached': 'Condition: Check if the goal has been reached. Returns True when the goal is reached, False otherwise.', 'is_target_in_sight': 'Condition: Check if the target is currently visible. Returns True if the target is in the agent's field of vision, False otherwise.', 'is_agent_moving': 'Condition: Check if the agent is currently in motion. Returns True if the agent is moving, False if the agent is stationary.', 'is_target_overlap': 'Condition: Check if the target is overlapping with the agent. Returns True if the agent and target are occupying the same space, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3.// USER COMMAND: Create a behavior tree for a swarm robot to autonomously navigate towards a goal while avoiding obstacles and keeping a target in sight.
3.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_agent_moving</Condition><Sequence><Condition>is_obstacle_nearby</Condition><Selector><Sequence><Action>rotate_right</Action><Action>move_to_goal</Action></Sequence><Action>rotate_left</Action></Selector></Sequence></Sequence><Selector><Condition>is_target_in_sight</Condition><Sequence><Condition>is_target_overlap</Condition><Action>pause_movement</Action></Sequence></Selector></Selector></BehaviorTree>

###
4.// INSTRUCTIONS: Use only the following behaviors {'hover': 'Action: Hover in place. Always returns True.', 'spin_clockwise': 'Action: Spin in a clockwise direction. Always returns True.', 'spin_counter_clockwise': 'Action: Spin in a counterclockwise direction. Always returns True.', 'move_forward': 'Action: Move forward in a straight line. Always returns True.', 'move_backward': 'Action: Move backward in a straight line. Always returns True.', 'is_target_reached': 'Condition: Check if the target is reached. Returns True if the target is within 10 units of distance, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles in the path. Returns True if an obstacle is detected, False otherwise.', 'is_in_capital_direction': 'Condition: Check if the agent is facing towards the capital city. Returns True if the agent is facing the capital city, False otherwise.', 'is_agent_moving': 'Condition: Check if the agent is moving. Returns True if the agent is in motion, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Generate a behavior tree for a swarm robot to travel to the capital city while avoiding obstacles and staying oriented towards the destination.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_agent_moving</Condition><Selector><Sequence><Condition>is_obstacle_detected</Condition><Sequence><Action>spin_clockwise</Action><Action>move_forward</Action></Sequence><Sequence><Action>spin_counter_clockwise</Action><Action>move_forward</Action></Sequence></Selector></Sequence><Sequence><Condition>is_target_reached</Condition><Action>hover</Action></Sequence></Selector><Condition>is_in_capital_direction</Condition></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'turn_left': 'Action: Turn left by 90 degrees. Returns True after the turn is complete.', 'turn_right': 'Action: Turn right by 90 degrees. Returns True after the turn is complete.', 'is_on_critical_path': 'Condition: Check if the agent is on the critical path to the target. Returns True if the agent is on the critical path, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles blocking the path. Returns True if an obstacle is detected, False otherwise.', 'is_target_reached': 'Condition: Check if the target is reached. Returns True when the target is reached, False otherwise.', 'is_agent_stuck': 'Condition: Check if the agent is not making progress in reaching the target. Returns True if the agent has not moved in the last 3 steps, False otherwise.', 'randomly_jitter': 'Action: Move randomly by a small distance. Always returns True.', 'kill_target': 'Action: Eliminate the designated target. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Create a behavior tree for a swarm robot to reach and eliminate a high priority target while avoiding obstacles and staying on the critical path.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_agent_stuck</Condition><Action>randomly_jitter</Action></Sequence><Selector><Condition>is_target_reached</Condition><Action>kill_target</Action></Selector></Selector><Selector><Condition>is_on_critical_path</Condition><Selector><Sequence><Condition>is_obstacle_detected</Condition><Selector><Sequence><Action>turn_left</Action><Action>move_forward</Action></Sequence><Selector><Sequence><Action>turn_right</Action><Action>move_forward</Action></Sequence></Selector></Sequence><Action>move_forward</Action></Selector></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'gather_resource': 'Action: Gather the resource in the current environment. Returns True when the resource has been collected.', 'drop_resource': 'Action: Drop the collected resource. Returns True when the resource has been dropped.', 'replicate': 'Action: Replicate into multiple copies. Returns True when all replicas are successfully created.', 'is_agent_empty': 'Condition: Check if the agent is empty (has no resource). Returns True if the agent has no resource, False otherwise.', 'is_resource_available': 'Condition: Check if the resource is available in the environment. Returns True if the resource is present, False otherwise.', 'is_resource_collected': 'Condition: Check if the resource has already been collected by another agent. Returns True if the resource has been collected, False otherwise.', 'is_agent_nearby': 'Condition: Check if another agent is within a certain distance. Returns True if another agent is nearby, False otherwise.', 'talk_to_agent': 'Action: Speak to 
###
4.// INSTRUCTIONS: Use only the following behaviors {'dance': 'Action: Break into a synchronized dance routine. Always returns True.', 'move_forward': 'Action: Move one step forward in a circular path. Always returns True.', 'turn': 'Action: Rotate 30 degrees clockwise. Always returns True.', 'is_center_reached': 'Condition: Check if the center of the robot formation has reached the center of the dance floor. Returns True if the center has been reached, False otherwise.', 'is_dance_in_progress': 'Condition: Check if the dance routine is currently in progress. Returns True if the dance is ongoing, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Create a behavior tree for a swarm of robots to perform a styled dance routine while moving in a circular path.
4.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_dance_in_progress</Condition><Selector><Sequence><Condition>is_center_reached</Condition><Action>dance</Action></Sequence><Sequence><Condition>!is_center_reached</Condition><Action>move_forward</Action><Action>turn</Action></Sequence></Selector></Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'navigate_to_waypoint': 'Subtree node: Represents a behavior tree for navigating to a designated waypoint.', 'gather_resource': 'Action: Gather the resource found at current location. Always returns True.', 'drop_resource': 'Action: Drop any resources being carried. Always returns True.', 'is_resource_nearby': 'Condition: Check if a resource is within 10 units of distance. Returns True if a resource is nearby, False otherwise.', 'is_resource_carried': 'Condition: Check if a resource is currently being carried. Returns True if a resource is being carried, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Gather resources from nearby locations and drop them off at a designated waypoint.
5.// OUTPUT:
<BehaviorTree><Sequence><Action>navigate_to_waypoint</Action><Sequence><Condition>is_resource_nearby</Condition><Action>gather_resource</Action></Sequence><Sequence><Condition>is_resource_carried</Condition><Action>drop_resource</Action></Sequence><Action>wander</Action></Sequence></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'detect_intruder': 'Action: Scan the environment for any intruders. Always returns True.', 'alert_team': 'Action: Alert the team if an intruder is detected. Always returns True.', 'perform_combat': 'Action: Engage in combat with the intruder. Always returns True.', 'is_intruder_detected': 'Condition: Check if an intruder has been detected. Returns True if an intruder has been detected, False otherwise.', 'is_team_alerted': 'Condition: Check if the team has been alerted about the intruder. Returns True if the team has been alerted, False otherwise.', 'is_team_defenseless': 'Condition: Check if the team is currently engaged in combat and unable to perform other tasks. Returns True if the team is engaged in combat, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Create a behavior tree for a swarm of robots to detect intruders, alert the team, and engage in combat if needed.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_intruder_detected</Condition><Sequence><Condition>!is_team_defenseless</Condition><Action>perform_combat</Action></Sequence></Sequence><Sequence><Condition>is_intruder_detected</Condition><Selector><Sequence><Condition>!is_team_alerted</Condition><Action>alert_team</Action></Sequence><Action>detect_intruder</Action></Selector></Sequence></Selector></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'find_food': 'Subtree node: Represents a behavior tree for searching and gathering food.', 'return_to_nest': 'Action: Return to the designated nest location. Always returns True.', 'feed_offspring': 'Action: Feed the offspring located at the nest. Always returns True.', 'on_low_energy': "Event: Triggers when the agent's energy levels fall below a threshold. Returns True if energy is low, False otherwise."}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: Create a behavior tree for a swarm of robots to gather food, return to nest, and feed the offspring when low on energy.
7.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>on_low_energy</Condition><Selector><Sequence><Action>find_food</Action><Action>return_to_nest</Action></Sequence><Action>feed_offspring</Action></Selector><Sequence><Condition>!on_low_energy</Condition><Action>wander</Action></Sequence></Selector></BehaviorTree> 
###
4.// INSTRUCTIONS: Use only the following behaviors {'detect_enemy': 'Condition: Detect if an enemy is present in the current area. Returns True if an enemy is detected, False otherwise.', 'engage_enemy': 'Action: Engage the enemy by attacking. Always returns True.', 'patrol_area': 'Sequence node: Patrol the designated area.', 'defend_area': 'Sequence node: Defend the designated area.', 'run_away': 'Action: Run away from the enemy. Always returns True.', 'restore_energy': 'Action: Use an energy pack to restore energy. Always returns True.', 'on_low_energy': 'Event: Triggers when the agent's energy falls below a threshold. Returns True if energy is low, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Patrol the area. If an enemy is detected, engage and defend. If energy is low, run away and restore energy before resuming patrol.
4.// OUTPUT:
<BehaviorTree><Sequence><Action>patrol_area</Action><Trigger>on_low_energy</Trigger><Action>run_away</Action><Action>restore_energy</action><Trigger>detect_enemy</Trigger><Sequence><Action>engage_enemy</Action><Action>defend_area</Action></Sequence></Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'navigate_to_destination': 'Subtree node: Represents a behavior tree for navigating to a specific destination.', 'gather_items': 'Subtree node: Represents a behavior tree for collecting items at a designated area.', 'deposit_items': 'Subtree node: Represents a behavior tree for depositing collected items at a specified location.', 'is_destination_reached': 'Condition: Check if the current destination has been reached. Returns True if destination is reached, False otherwise.', 'is_items_available': 'Condition: Check if there are items available at the current area. Returns True if items are available, False otherwise.', 'is_deposit_location_reached': 'Condition: Check if the designated deposit location has been reached. Returns True if destination is reached, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Generate behavior tree for a robot to collect items at a specified area and deposit them at a designated location.
5.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>is_items_available</Condition><Action>gather_items</Action></Sequence><Condition>is_deposit_location_reached</Condition><Action>deposit_items</Action><Sequence><Action>navigate_to_destination</Action><Condition>is_destination_reached</Condition></Sequence></Selector></Sequence></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'collaborate_with_partners': 'Action: Cooperate with other robots to complete a task. Always returns True.', 'collect_data': 'Action: Collect data from designated area. Always returns True.', 'analyze_data': 'Action: Analyze collected data to extract useful information. Always returns True.', 'share_information': 'Action: Share extracted information with other robots. Always returns True.', 'on_collect_data': 'Event: Triggers when the agent successfully collects data. Returns True if data is collected, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Generate behavior tree for multiple robots to collaborate and collect and analyze data together.
6.// OUTPUT:
<BehaviorTree><Sequence><Action>collaborate_with_partners</Action><Trigger>on_collect_data</Trigger><Selector><Sequence><Action>collect_data</Action><Action>analyze_data</Action><Action>share_information</Action></Sequence><Action>collect_data</Action></Selector></Sequence></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'move_to_nearest_food_source': 'Action: Move the agent to the nearest food source. Always returns True.', 'forage_for_food': 'Subtree node: Represents a behavior tree for foraging for food in the environment.', 'eat_food': 'Action: Eat the food obtained from foraging. Always returns True.', 'is_food_source_reached': 'Condition: Check if the agent has reached the food source. Returns True if reached, False otherwise.', 'is_food_available': 'Condition: Check if there is food available at the current location. Returns True if food is available, False otherwise.', 'is_hungry': 'Condition: Check if the agent's hunger level falls below a threshold. Returns True if the agent is hungry, False otherwise.', 'is_food_eaten': 'Event: Triggers when the agent successfully eats food. Returns True if food is eaten, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: Generate behavior tree for a robot to forage for food, eating when hungry and returning to food source when necessary.
7.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_hungry</Condition><Selector><Sequence><Condition>is_food_source_reached</Condition><Action>eat_food</Action><Trigger>is_food_eaten</Trigger><Action>move_to_nearest_food_source</Action></Sequence><Sequence><Condition>is_food_available</Condition><Action>forage_for_food</Action></Sequence></Selector></Sequence></BehaviorTree>###
3.// INSTRUCTIONS: Use only the following behaviors {'approach_target': 'Action: Move towards the target with caution. Always returns True.', 'request_help': 'Action: Request assistance from other team members. Always returns True.', 'is_target_safe': 'Condition: Check if the target is safe to approach. Returns True if the target is safe, False otherwise.', 'is_help_available': 'Condition: Check if help is available from other team members. Returns True if help is available, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3.// USER COMMAND: Approach a team member for help if the current target is not safe to approach
3.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_target_safe</Condition><Action>approach_target</Action><Sequence><Condition>is_help_available</Condition><Action>request_help</Action></Sequence></Sequence></BehaviorTree>
###
4.// INSTRUCTIONS: Use only the following behaviors {'gather_resources': 'Action: Collect resources from the environment. Returns True when resources are gathered.', 'deposit_resources': 'Action: Deposit collected resources to a designated storage location. Returns True when resources are deposited.', 'is_resource_full': 'Condition: Check if the robot has reached its maximum resource storage capacity. Returns True if the limit is reached, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Gather resources from the environment until storage is full, then deposit resources.
4.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_resource_full</Condition><Action>deposit_resources</Action></Sequence><Sequence><Action>gather_resources</Action><Selector><Action>wait</Action><Action>deposit_resources</Action></Selector></Sequence></BehaviorTree>
###
5.// INSTRUCTIONS: Use only the following behaviors {'identify_intruder': 'Action: Use sensors to identify any potential intruders. Returns True when an intruder is identified.', 'approach_intruder': 'Action: Move towards the identified intruder. Returns True when the robot is close enough to the intruder.', 'engage_intruder': 'Action: Attack or defend against the intruder if necessary. Returns True once the intruder is dealt with.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Identify and engage any potential intruders.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>identify_intruder</Action><Action>approach_intruder</Action><Action>engage_intruder</Action></Sequence><Action>wait</Action></Selector></BehaviorTree>
###
6.// INSTRUCTIONS: Use only the following behaviors {'cross_obstacle': 'Action: Use specialized equipment to safely cross over obstacles. Returns True when the obstacle is successfully crossed.', 'detect_obstacle': 'Action: Use sensors to detect any obstacles in the environment. Returns True when an obstacle is detected.', 'is_obstacle_safe': 'Condition: Check if the detected obstacle is safe to cross. Returns True if the obstacle is safe, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Cross an obstacle, ensuring it is safe to do so.
6.// OUTPUT:
<BehaviorTree><Sequence><Condition>detect_obstacle</Condition><Sequence><Condition>is_obstacle_safe</Condition><Action>cross_obstacle</Action></Sequence></Sequence></BehaviorTree>
###
7.// INSTRUCTIONS: Use only the following behaviors {'analyze_plants': 'Action: Use specialized sensors to analyze the health of nearby plants. Returns True once the analysis is complete.', 'water_plants': 'Action: Use water dispenser to water the plants in the surrounding area. Returns True when all plants are watered.', 'is_plant_health_low': 'Condition: Check if the health of the plants is below a specific threshold. Returns True if the health is low, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: Analyze and water nearby plants if their health is low.
7.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_plant_health_low</Condition><Sequence><Action>analyze_plants</Action><Action>water_plants</Action></Sequence></Sequence></BehaviorTree> 
###
3.// INSTRUCTIONS: Use only the following behaviors {'move_forward': 'Action: Move the robot one step forward in the current direction. Always returns True.', 'rotate_left': "Action: Rotate the robot's body 90 degrees counterclockwise. Always returns True.", 'rotate_right': "Action: Rotate the robot's body 90 degrees clockwise. Always returns True.", 'pickup_item': 'Action: Pick up an item from a designated location. Always returns True.', 'give_item': 'Action: Give the picked-up item to another designated location. Always returns True.', 'load_target_coordinates': 'Action: Loads target coordinates into the system. Always returns True.', 'is_item_picked_up': 'Condition: Checks if an item has been picked up. Returns True if an item is picked up, False otherwise.', 'is_item_given': 'Condition: Checks if an item has been given to a designated location. Returns True if an item has been given, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3.// USER COMMAND: Pick up an item, rotate left, give the item, then rotate right.Output only the XML behavior tree without extra text.
3.// OUTPUT:
<BehaviorTree><Sequence><Action>pickup_item</Action><Action>rotate_left</Action><Action>give_item</Action><Action>rotate_right</Action></Sequence></BehaviorTree>

###
4.// INSTRUCTIONS: Use only the following behaviors {'move_straight': 'Subtree node: Represents a behavior tree for moving straight for a specific distance.', 'turn_right': 'Action: Turn the robot's body right for a specific angle. Always returns True.', 'turn_left': 'Action: Turn the robot's body left for a specific angle. Always returns True.', 'step_forward': 'Action: Take one step forward. Always returns True.', 'step_backward': 'Action: Take one step backward. Always returns True.', 'target_visible': 'Condition: Check if the target is within range and visible. Returns True if the target is visible, False otherwise.', 'obstacle_detected': 'Condition: Check for obstacles within range. Returns True if an obstacle is detected, False otherwise.', 'target_reached': 'Condition: Check if the target is reached. Returns True if the target is reached, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Move straight for 5 steps, turn right, and then move straight for 3 steps.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Subtree>move_straight 5</Subtree><Action>turn_right</Action><Subtree>move_straight 3</Subtree></Sequence><Action>rotate_left</Action></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'store_food': 'Action: Store food in the nest. Always returns True.', 'is_food_available': 'Condition: Check if there is enough food available to collect. Returns True if there is enough food, False otherwise.', 'collect_food': 'Action: Collect food from the environment. Always returns True.', 'navigate_to_food_source': 'Action: Navigate to the nearest food source. Always returns True.', 'go_back_to_nest': 'Action: Return to the nest. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Search for and collect food until there is enough, then return to the nest to store it.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_food_available</Condition><Action>collect_food</Action></Sequence><Sequence><Action>navigate_to_food_source</Action><Action>collect_food</Action></Sequence><Action>go_back_to_nest</Action></Selector><Condition>is_food_available</Condition><Action>store_food</Action></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'move_forward': 'Action: Move the robot one step forward in the current direction. Always returns True.', 'move_backward': 'Action: Move the robot one step backward in the current direction. Always returns True.', 'rotate_left': "Action: Rotate the robot's body 90 degrees counterclockwise. Always returns True.", 'rotate_right': "Action: Rotate the robot's body 90 degrees clockwise. Always returns True.", 'drop_item': 'Action: Drop an item at a designated location. Always returns True.', 'take_picture': 'Action: Take a picture of the environment. Always returns True.', 'analyze_picture': 'Action: Analyze the picture and identify specific objects. Always returns True.', 'is_object_detected': 'Condition: Checks if a specific object is detected in the picture. Returns True if the object is detected, False otherwise.', 'has_item': 'Condition: Checks if the robot is carrying any items. Returns True if the robot is carrying an item, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Move forward, take a picture, analyze the picture, and drop the item if a specific object is detected. Repeat until the robot has no items left.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>move_forward</Action><Action>take_picture</Action><Action>analyze_picture</Action></Sequence><Sequence><Condition>has_item</Condition><Action>drop_item</Action></Sequence></Selector><Selector><Condition>is_object_detected</Condition><Action>drop_item</Action></Selector></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'move_to_next_point': 'Action: Move the robot to the next predetermined point. Always returns True.', 'follow_path': 'Subtree node: Represents a behavior tree for following a predetermined path.', 'check_battery': 'Action: Continuously check the battery level and return True if it's below the threshold, False otherwise.', 'change_direction': 'Action: Change the robot's direction based on surrounding obstacles. Always returns True.', 'is_at_point': 'Condition: Check if the robot has reached a predetermined point. Returns True if the robot is at the point, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: Move along a predetermined path while checking battery level and adjusting direction based on obstacles.
7.// OUTPUT:
<BehaviorTree><Sequence><Selector><Subtree>follow_path</Subtree><Action>change_direction</Action><Action>move_to_next_point</Action></Selector><Sequence><Condition>check_battery</Condition><Action>change_direction</Action><Action>move_to_next_point</Action></Sequence><Action>
###
4.// INSTRUCTIONS: Use only the following behaviors {'move_to_goal': 'Action: Move the robot towards the specified goal. Returns True if the goal is reached, False otherwise.', 'identify_object': 'Subtree node: Represents a behavior tree for identifying objects in the environment.', 'pick_up_object': 'Action: Pick up the identified object. Returns True if the object is successfully picked up, False otherwise.', 'drop_object': 'Action: Drop the object currently being carried. Returns True if the object is dropped, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Move towards the goal, identify an object, pick it up, and drop it at the designated location.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>move_to_goal</Action><Selector><Sequence><Action>identify_object</Action><Action>pick_up_object</Action></Sequence></Selector></Sequence><Sequence><Condition>pick_up_object</Condition><Action>drop_object</Action></Sequence></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'avoid_collisions': 'Action: Avoid collisions with other robots. Returns True if the robot is able to move without colliding, False otherwise.', 'detect_obstacle': 'Condition: Check for obstacles in the environment. Returns True if an obstacle is detected, False otherwise.', 'follow_path': 'Action: Follow the predefined path. Returns True if the robot successfully completes the path, False otherwise.', 'is_path_complete': 'Condition: Check if the predefined path is complete. Returns True if the path is complete, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Continuously avoid collisions while following a predefined path until the path is complete.
5.// OUTPUT:
<BehaviorTree><Sequence><Action>avoid_collisions</Action><Selector><Sequence><Condition>is_path_complete</Condition><Action>follow_path</Action></Sequence></Selector></Sequence></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'identify_food': 'Subtree node: Represents a behavior tree for identifying food sources in the environment.', 'collect_food': 'Action: Collect the food item identified by the agent. Returns True if the food is successfully collected, False otherwise.', 'deliver_food': 'Action: Deliver the collected food to the designated location. Returns True if the food is successfully delivered, False otherwise.', 'is_food_detected': 'Condition: Check for the presence of food in the environment. Returns True if food is detected, False otherwise.', 'is_deliver_location_reached': 'Condition: Check if the designated delivery location is reached. Returns True if the location is reached, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Continuously identify and collect food while also delivering it to a designated location once it is detected.
6.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>is_food_detected</Condition><Selector><Sequence><Action>identify_food</Action><Action>collect_food</Action></Sequence></Selector></Sequence><Sequence><Condition>is_deliver_location_reached</Condition><Action>deliver_food</Action></Sequence></Selector></Sequence></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'move_to_position': 'Action: Move the robot to the specified position. Returns True if the position is reached, False otherwise.', 'identify_target': 'Subtree node: Represents a behavior tree for identifying and tracking a target.', 'shoot_target': 'Action: Shoot at the identified target. Returns True if the target is successfully shot, False otherwise.', 'retreat': 'Action: Move away from the target. Returns True if the robot successfully retreats, False otherwise.', 'is_target_identified': 'Condition: Check if the target is identified. Returns True if the target is identified, False otherwise.', 'is_target_in_range': 'Condition: Check if the target is within shooting range. Returns True if the target is in range, False otherwise.', 'is_attacked': 'Condition: Listen for any detected attacks. Return True if the robot is being attacked, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: If the robot is attacked, identify and shoot the attacker. Otherwise, move to the designated position and retreat if the target is in range.
7.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_attacked</Condition><Selector><Sequence><Action>identify_target</Action><Action>shoot_target</Action></Sequence></Selector></Sequence><Sequence><Action>move_to_position</Action><Selector><Sequence><Condition>is_target_in_range</Condition><Action>retreat</Action></Sequence></Selector></Sequence></Selector></BehaviorTree> 
###
3.// INSTRUCTIONS: Use only the following behaviors {'perform_signature': "Action: Run a diagnostic check and perform a signature, then transmit the data. Always returns True.", 'switch_to_backup': 'Action: Switch to backup server if primary server fails. Always returns True.', 'is_power_level_low': 'Condition: Check if power level is below 20%. Returns True if power level is below 20%, False otherwise.', 'is_network_failure': 'Condition: Check if there is a network failure. Returns True if there is a network failure, False otherwise.', 'is_backup_active': 'Condition: Check if the backup server is active. Returns True if the backup server is active, False otherwise.', 'is_data_transmitted': 'Condition: Check if the data has been successfully transmitted. Returns True if the data is transmitted, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3.// USER COMMAND: generate behavior tree to 'Perform regular diagnostic check, switch to backup server if necessary, and ensure data transmission'
3.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_data_transmitted</Condition><Action>perform_signature</Action></Sequence><Sequence><Condition>is_network_failure</Condition><Action>switch_to_backup</Action></Sequence><Selector><Sequence><Condition>is_power_level_low</Condition><Action>perform_signature</Action></Sequence><Sequence><Condition>is_backup_active</Condition><Action>switch_to_backup</Action></Sequence></Selector></BehaviorTree>

###
4.// INSTRUCTIONS: Use only the following behaviors {'patrol_around_base': 'Action: Patrol around the base station to ensure perimeter security. Always returns True.', 'check_for_intruders': 'Action: Use sensors to scan for any intruders approaching the base station. Always returns True.', 'notify_security_team': 'Action: Notify the security team if an intruder is detected. Always returns True.', 'is_base_safe': 'Condition: Check if the base station is safe. Returns True if the base station is safe, False otherwise.', 'is_intruder_present': 'Condition: Check if an intruder is present within the vicinity of the base station. Returns True if an intruder is present, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree for base security swarms to 'Ensure perimeter security and notify the security team if an intruder is detected'
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_intruder_present</Condition><Action>notify_security_team</Action><Sequence><Condition>is_base_safe</Condition><Action>patrol_around_base</Action></Sequence></Sequence><Selector><Sequence><Condition>is_intruder_present</Condition><Action>notify_security_team</Action><Action>patrol_around_base</Action></Selector><Action>patrol_around_base</Action></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'detect_water_source': 'Action: Use sensors to locate a nearby water source. Always returns True.', 'collect_water': "Action: Collect water from the nearby source. Always returns True.", 'fill_water_tank': 'Action: Fill the water tank on the robot. Always returns True.', 'is_water_tank_full': 'Condition: Check if the water tank is full. Returns True if the water tank is full, False otherwise.', 'is_water_level_low': 'Condition: Check if the water tank is below 30% capacity. Returns True if the water tank is below 30%, False otherwise.', 'is_water_source_present': 'Condition: Check if a water source is within range. Returns True if a water source is found, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree for a watering robot to 'Locate and collect water when the water tank is below 50% capacity, and repeat until the tank is full'
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_water_tank_full</Condition><Action>detect_water_source</Action><Action>collect_water</Action><Action>fill_water_tank</Action></Sequence><Sequence><Condition>is_water_level_low</Condition><Action>detect_water_source</Action><Action>collect_water</Action></Sequence></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'detect_fire': 'Action: Use sensors to detect any nearby fire. Always returns True.', 'put_out_fire': "Action: Use a fire extinguisher to put out the fire. Always returns True.", 'is_fire_extinguished': 'Condition: Check if the fire has been extinguished. Returns True if the fire is extinguished, False otherwise.', 'is_smoke_detected': 'Condition: Check if smoke is detected. Returns True if smoke is detected, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree for fire-fighting robots to 'Detect and put out any fires in the area'
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_smoke_detected</Condition><Action>detect_fire</Action><Action>put_out_fire</Action></Sequence><Sequence><Condition>is_fire_extinguished</Condition><Action>detect_fire</Action></Sequence></Selector></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'search_for_food': 'Action: Use sensors to search for nearby food sources. Always returns True.', 'collect_food': 'Action: Collect food from the nearby source. Always returns True.', 'find_shelter': 'Action: Use sensors to find nearby shelter. Always returns True.', 'enter_shelter': 'Action: Enter the shelter if one is found. Always returns True.', 'is_food_collected': 'Condition: Check if food has been collected. Returns True if food has been collected, False otherwise.', 'is_shelter_found': 'Condition: Check if a shelter has been found. Returns True if a shelter has been found, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: generate behavior tree for disaster relief robots to 'Search for and collect food, and find and enter shelter when necessary'
7.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_shelter_found</Condition><Action>search_for_food</Action><Action>collect_food</Action><Action>find_shelter</Action><Action>enter_shelter</Action></Sequence><Sequence><Condition>is_food_collected</Condition><Action>search_for_food</Action><Action>collect_food
###
3.// INSTRUCTIONS: Use only the following behaviors {'assemble': 'Action: Move and gather scattered parts to assemble a structure. Returns True once all parts are collected and assembled.', 'check_inventory': 'Function: Checks if the agent has all the required parts in inventory. Returns True if all parts are present, False if not.', 'travel_to_structure': 'Action: Moves the agent to the location of the structure. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3.// USER COMMAND: Assemble a structure by collecting and putting together scattered parts.
3.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>travel_to_structure</Action><Action>check_inventory</Action><Condition>not_check_inventory</Condition><Action>assemble</Action></Sequence><Selector><Action>travel_to_structure</Action></Selector></Sequence></BehaviorTree>

###
4.// INSTRUCTIONS: Use only the following behaviors {'scan_area': 'Action: Perform a scan of the surrounding area for potential threats or resources. Always returns True.', 'find_resource': 'Subtree node: Represents a behavior tree for finding resources, including checking inventory, scanning the area, and collecting resources.', 'collect_resource': 'Action: Collect the resource found in the environment. Always returns True.', 'power_up': 'Action: Use collected resources to power up the agent. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Scan the area for resources and collect them to power up the agent.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>scan_area</Action><Selector><Sequence><Action>find_resource</Action><Action>collect_resource</Action></Sequence></Selector><Action>power_up</Action></Sequence><Action>scan_area</Action></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'navigate': 'Action: Use sensors to navigate through a maze. Always returns True.', 'check_battery': 'Function: Checks the remaining battery life. Returns True if battery is sufficient, False if not.', 'get_battery_pack': 'Action: Retrieve a battery pack to replenish battery life. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Navigate through a maze while monitoring battery life and retrieving battery packs when necessary.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>navigate</Action><Selector><Sequence><Action>check_battery</Action><Condition>not_check_battery</Condition><Action>get_battery_pack</Action></Sequence></Selector><Action>navigate</Action></Sequence></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'search_location': 'Subtree node: Represents a behavior tree for searching a specific location, including moving to the location, searching for the object, and reporting back.', 'move_to_location': 'Action: Move the agent to a specified location. Always returns True.', 'scan_location': 'Action: Use sensors to scan the environment for a specific object. Returns True when the object is found, False otherwise.', 'report_back': 'Action: Report back to base with information about the object found. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Search a specific location for a designated object and report back to base.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>move_to_location</Action><Selector><Sequence><Action>scan_location</Action><Condition>not_scan_location</Condition><Action>report_back</Action></Sequence></Selector></Sequence><Selector><Action>move_to_location</Action></Selector></Selector></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'gather': 'Action: Gather resources from the environment. Returns True once all resources are collected.', 'check_inventory': 'Function: Checks if the agent has all the required resources in inventory. Returns True if all resources are present, False if not.', 'build_structure': 'Action: Use gathered resources to construct a structure. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: Gather resources and use them to build a structure.
7.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>gather</Action></Sequence><Selector><Sequence><Action>check_inventory</Action><Condition>not_check_inventory</Condition><Action>build_structure</Action><Action>gather</Action></Sequence></Selector></Selector></BehaviorTree><BehaviorTree> <Selector> <Sequence> <Condition>is_search_complete</Condition> <Action>agent_movement_freeze</Action> <Action>task_completed</Action> </Sequence> <Selector> <Sequence> <Action>move_to_next_area</Action> <Action>scan_for_survivors</Action> <Sequence> <Condition>is_survivor_detected</Condition> <Action>call_for_rescue</Action> </Sequence> <Action>mark_area_searched</Action></Selector> </Selector> </BehaviorTree>

###
4.// INSTRUCTIONS: Use only the following behaviors {'evade_obstacles': 'Action: Evade obstacles by making quick turns. Always returns True.', 'is_target_in_range': 'Condition: Check if the target is within 10 units. Returns True if the target is within 10 units of distance, False otherwise.', 'attack_target': 'Action: Attack the target when in range. Always returns True.', 'track_target': 'Action: Track the target using sensors and move closer. Always returns True.', 'wait': 'Action: Stop movement and wait for further instructions. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Attack and track target'
4.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>is_target_in_range</Condition> <Selector> <Sequence> <Action>track_target</Action> <Action>attack_target</Action> <Action>wait</Action> </Sequence> </Selector> <Action>evade_obstacles</Action> </Sequence> </Selector> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'scan_area': 'Action: Scan the surrounding area for resources. Always returns True.', 'collect_resource': 'Action: Collect the nearby resources. Always returns True.', 'is_area_empty': 'Condition: Check if the current area has been fully searched for resources. Returns True if the area is empty, False otherwise.', 'is_resource_available': 'Condition: Check if there are resources available in the surrounding area. Returns True if resources are available, False otherwise.', 'return_to_base': 'Action: Return to the base with collected resources. Always returns True.', 'is_base_reached': 'Condition: Check if the robot has reached the base. Returns True if the base is reached, False otherwise.', 'initiate_recharge': 'Action: Recharge the robot at the base. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Scan and collect resources'
5.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>is_area_empty</Condition> <Action>scan_area</Action> <Action>collect_resource</Action> </Sequence> <Selector> <Sequence> <Condition>is_resource_available</Condition> <Action>collect_resource</Action> </Sequence> </Selector> <Sequence> <Condition>is_base_reached</Condition> <Action>initiate_recharge</Action> <Action>return_to_base</Action> </Sequence> </Selector> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'move_up': 'Action: Move one unit up. Always returns True.', 'move_down': 'Action: Move one unit down. Always returns True.', 'move_left': 'Action: Move one unit left. Always returns True.', 'move_right': 'Action: Move one unit right. Always returns True.', 'is_agent_in_boundary': 'Condition: Check if the agent is within the boundary of the environment. Returns True if agent is inside, False otherwise.', 'avoid_edge': 'Action: Move away from the edge to avoid falling off. Always returns True.', 'recenter': 'Action: Move back to the center if the agent strays too far. Always returns True.', 'stay_within_boundary': 'Action: Moves the agent back into the boundary if it strays out. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Keep the agent within the boundary'
6.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>is_agent_in_boundary</Condition> <Action>stay_within_boundary</Action> </Sequence> <Selector> <Sequence> <Condition>is_agent_in_boundary</Condition> <Action>avoid_edge</Action> <Sequence> <Condition>is_agent_in_boundary</Condition> <Action>recenter</Action> </Sequence> </Selector> </Selector> <Selector> <Sequence> <Condition>is_agent_in_boundary</Condition> <Action>stay_within_boundary</Action> </Selector> </Sequence> </BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'follow_leader': 'Action: Follow the designated leader robot using sensors and stay within the designated distance. Always returns True.', 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'send_signal': 'Action: Send a signal to other robots for coordination. Always returns True.', 'shape_formation': 'Action: Maintain a specific shape formation with other robots. Always returns True.', 'is_leader_detected': 'Condition: Check if the leader robot is detected within the designated distance. Returns True if leader is detected, False otherwise.', 'is_obstacle_present': 'Condition: Check for obstacles nearby. Returns True if an obstacle is present, False otherwise.', 'is_formation_blocked': 'Condition: Check if the designated formation is blocked or obstructed. Returns True if blocked, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: generate behavior tree to 'Follow the leader robot and maintain formation'
7.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>is_leader_detected</Condition> <Action>follow_leader</Action> <Sequence> <Condition>is_obstacle_present</Condition> <Action>avoid_obstacle</Action> </Sequence> <Action>send_signal</Action> </Selector> <Action>shape_formation</Action> <Selector> <Sequence> <Condition>is_formation_blocked</Condition> <Action>send_signal</Action> </Sequence> </Selector> </BehaviorTree>
###
3.// INSTRUCTIONS: Use only the following behaviors {'search_for_food': 'Action: Search and explore the environment for food sources. Always returns True.', 'go_to_food': 'Action: Move towards a detected food source. Always returns True.', 'collect_food': 'Action: Pick up and collect the food item. Always returns True.', 'drop_food': 'Action: Drop the collected food item. Always returns True.', 'is_food_detected': 'Condition: Check if there is food within 10 units of the robot. Returns True if food is detected, False otherwise.', 'is_food_collected': 'Condition: Check if there is currently a food item being carried. Returns True if food is being carried, False otherwise.', 'is_hungry': 'Condition: Check if the robot's hunger level is low. Returns True if hunger level is low, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3.// USER COMMAND: Create a behavior tree for a swarm of robots to forage for food in an unknown environment, while considering their individual hunger levels and sharing resources.
3.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>is_food_detected</Condition><Action>go_to_food</Action><Action>collect_food</Action></Sequence><Action>search_for_food</Action></Selector><Sequence><Condition>is_hungry</Condition><Action>share_resources</Action></Sequence><Sequence><Condition>is_food_collected</Condition><Action>drop_food</Action></Sequence></Sequence></BehaviorTree>

###
4.// INSTRUCTIONS: Use only the following behaviors {'wait_at_checkpoint': 'Action: Halt movement and wait for further instructions at a designated checkpoint. Always returns True.', 'detect_target': 'Action: Scan the area for a specific target. Always returns True.', 'navigate_towards_target': 'Action: Move towards the designated target. Always returns True.', 'perform_task': 'Action: Complete a specific task at the targeted location. Always returns True.', 'check_environment': 'Action: Continuously monitor the environment for any changes. Always returns True.', 'target_reached': 'Condition: Check if the designated target has been reached. Returns True if the target is reached, False otherwise.', 'task_complete': 'Condition: Check if the previously assigned task has been completed. Returns True if task is completed, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Design a behavior tree for a swarm of robots to perform maintenance tasks at different locations within a large facility, while effectively coordinating and communicating with each other.
4.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>target_reached</Condition><Action>perform_task</Action></Sequence><Sequence><Condition>task_complete</Condition><Action>wait_at_checkpoint</Action></Sequence></Selector><Sequence><Condition>detect_target</Condition><Selector><Sequence><Action>nagivate_towards_target</Action><Action>check_environment</Action></Sequence><Action>wait_at_checkpoint</Action></Selector></Sequence></Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'detect_intruder': 'Action: Scan the surrounding area for any potential intruders. Always returns True.', 'form_defensive_formation': 'Action: Actively form a defensive formation to protect against intruders. Always returns True.', 'attack_intruder': 'Action: Move towards and engage with the detected intruder. Always returns True.', 'retreat': 'Action: Retreat and regroup with the rest of the swarm. Always returns True.', 'is_intruder_detected': 'Condition: Check if there is an intruder within a certain vicinity. Returns True if an intruder is detected, False otherwise.', 'is_formation_compromised': 'Condition: Check if the defensive formation has been compromised. Returns True if the formation is compromised, False otherwise.', 'prepare_for_attack': 'Condition: Check if all swarm members are in position and ready to attack. Returns True if all members are ready, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Create a behavior tree for a swarm of robots to defend their territory from potential intruders, while effectively coordinating and defending against attacks.
5.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>is_intruder_detected</Condition><Action>attack_intruder</Action></Sequence><Sequence><Condition>is_formation_compromised</Condition><Action>reform_defensive_formation</Action></Sequence></Selector><Sequence><Condition>prepare_for_attack</Condition><Action>form_defensive_formation</Action></Sequence><Sequence><Condition>is_retreat_needed</Condition><Action>retreat</Action></Sequence></Sequence></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'move_target_location': 'Action: Move the designated target to a new location. Always returns True.', 'update_route_map': 'Action: Update the route map with new information. Always returns True.', 'navigate_using_map': 'Action: Utilize the updated map to navigate towards the new target location. Always returns True.', 'wait_for_confirmation': 'Action: Pause operation and wait for confirmation from other swarm members. Always returns True.', 'is_target_moved': 'Condition: Check if the designated target has been moved to a new location. Returns True if target is moved, False otherwise.', 'is_map_updated': 'Condition: Check if the route map has been updated with new information. Returns True if map is updated, False otherwise.', 'confirmation_received': 'Condition: Check if confirmation has been received from all swarm members. Returns True if confirmation is received, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Develop a behavior tree for a swarm of robots to collectively move and transport a large object to a new location, while updating their route map and coordinating their movements.
6.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>is_map_updated</Condition><Action>navigate_using_map</Action></Sequence><Sequence><Condition>confirmation_received</Condition><Action>wait_for_confirmation</Action></Sequence></Selector><Sequence><Condition>is_target_moved</Condition><Action>move_target_location</Action></Sequence><Sequence><Condition>is_route_map_needed</Condition><Action>update_route_map</Action></Sequence></Sequence></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'prepare_for_takeoff': 'Action: Complete pre-flight checks and preparations. Always returns True.', 'takeoff': 'Action: Initiate takeoff and begin flight. Always returns True.', 'adjust_flight_path': 'Action: Make necessary adjustments to flight path based on 
###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.', 'move_towards_target': 'Action: Move towards the target with a set speed. Always returns True.'}to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Move towards the target, avoid obstacles, and form a vertical line with the target.Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree> <Sequence> <Condition>is_target_reached</Condition> <Sequence> <Action>move_towards_target</Action> <Condition>is_line_formed</Condition> <Action>form_line</Action> <Action>change_color_to_green</Action> </Sequence> </Sequence> <Sequence> <Condition>is_obstacle_detected</Condition> <Action>avoid_obstacle</Action> </Sequence> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'is_leader': 'Condition: Check if the agent is the leader of the swarm. Returns True if the agent is the leader, False otherwise.', 'follow_leader': 'Action: Follow the leader of the swarm. Always returns True.', 'match_velocity': 'Action: Match the velocity of the nearest neighbor in the swarm. Always returns True.', 'avoid_collisions': 'Action: Avoid collisions with other agents in the swarm. Always returns True.', 'form_line': 'Action: Form a horizontal line with the other agents in the swarm. Always returns True.', 'update_leader': 'Action: Update the leader of the swarm based on a specific criteria. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Update the swarm leader, avoid collisions and maintain a horizontal line formation.
5.// OUTPUT:
<BehaviorTree> <Sequence> <Condition>is_leader</Condition> <Sequence> <Action>update_leader</Action> <Action>avoid_collisions</Action> <Action>form_line</Action> </Sequence> <Action>follow_leader</Action> </Sequence> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'move_towards_food': 'Action: Move towards the nearest food source. Always returns True.', 'eat_food': 'Action: Consume the food at the current location. Always returns True.', 'lay_eggs': 'Action: Lay eggs at the current location. Always returns True.', 'is_hungry': 'Condition: Check if the agent is hungry and needs to find food. Returns True if the agent is hungry, False otherwise.', 'is_nest_nearby': 'Condition: Check if the nest is within a specific distance. Returns True if the nest is nearby, False otherwise.', 'is_food_detected': 'Condition: Check if food is detected nearby. Returns True if food is detected, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: If the agent is hungry, move towards food, eat it, and return to the nest. Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>is_hungry</Condition> <Action>move_towards_food</Action> <Condition>is_food_detected</Condition> <Action>eat_food</Action> <Condition>is_nest_nearby</Condition> <Action>move_towards_nest</Action> </Sequence> <Action>lay_eggs</Action> </Selector> </BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'reset_position': 'Action: Reset the robot to its initial position and orientation. Always returns True.', 'communicate_with_team': 'Action: Communicate important information with other robots in the team. Always returns True.', 'collect_data': 'Action: Collect data from the environment using various sensors. Always returns True.', 'update_map': 'Action: Update the robot's internal map based on sensor readings. Always returns True.', 'gather_resources': 'Subtree node: Represents a behavior tree for gathering resources.', 'is_resource_detected': 'Condition: Check if a resource is within range. Returns True if a resource is detected, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: Collect data, communicate with team and gather resources if available.
7.// OUTPUT:
<BehaviorTree> <Sequence> <Action>collect_data</Action> <Sequence> <Action>communicate_with_team</Action> <Condition>is_resource_detected</Condition> <Sequence> <Action>gather_resources</Action> <Action>update_map</Action> </Sequence> </Sequence> </Sequence> </BehaviorTree>###
4.// INSTRUCTIONS: Use only the following behaviors {'move_forward': 'Action: Move the robot one step forward in the current direction. Always returns True.', 'turn_left': 'Action: Turn the robot 90 degrees to the left. Always returns True.', 'turn_right': 'Action: Turn the robot 90 degrees to the right. Always returns True.', 'pick_up_item': 'Action: Pick up an item if one is detected within close range. Always returns True.', 'drop_item': 'Action: Drop the item at a designated safe location. Always returns True.', 'is_item_carried': 'Condition: Check if the robot is currently carrying an item. Returns True if an item is carried, False otherwise.', 'is_item_nearby': 'Condition: Check if an item is detected within a certain range. Returns True if an item is detected, False otherwise.', 'is_at_safe_location': 'Condition: Check if the robot is at the designated safe location. Returns True if at the safe location, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Generate behavior tree for a robot to pick up items and bring them to a designated safe location
4.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_item_nearby</Condition><Action>pick_up_item</Action><Sequence><Condition>is_at_safe_location</Condition><Action>drop_item</Action></Sequence></Sequence><Sequence><Condition>is_item_carried</Condition><Selector><Sequence><Condition>is_at_safe_location</Condition><Action>drop_item</Action></Sequence><Sequence><Condition>is_at_safe_location</Condition><Action>drop_item</Action></Sequence></Selector></Sequence><Action>move_forward</Action><Selector><Sequence><Condition>is_at_safe_location</Condition><Action>drop_item</Action></Sequence><Action>move_forward</Action></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'change_speed': 'Action: Change the speed of the robot. Always returns True.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_at_right_angle': 'Condition: Check if the robot has turned 90 degrees. Returns True if the robot has completed a 90 degree turn, False otherwise.', 'is_path_clear': 'Condition: Check if the path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'escape_obstacle': 'Action: Navigate around the obstacle to continue on the path. Always returns True.', 'mark_path': 'Action: Mark the path with a trail for other robots to follow. Always returns True.', 'is_target_reached': 'Condition: Check if the target is within reach. Returns True if the target is reached, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Generate behavior tree for a robot to navigate an obstacle course and reach the target
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_obstacle_detected</Condition><Selector><Condition>is_at_right_angle</Condition><Sequence><Action>change_speed</Action><Action>escape_obstacle</Action><Action>change_speed</Action></Sequence></Selector></Sequence><Selector><Sequence><Condition>is_path_clear</Condition><Action>mark_path</Action></Sequence><Sequence><Condition>is_target_reached</Condition><Action>mark_path</Action></Sequence></Selector></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'move_forward': 'Action: Move the robot one step forward in the current direction. Always returns True.', 'turn_left': 'Action: Turn the robot 90 degrees to the left. Always returns True.', 'turn_right': 'Action: Turn the robot 90 degrees to the right. Always returns True.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'find_path': 'Action: Use pathfinding algorithm to find the shortest path to a target location. Always returns True.', 'is_path_found': 'Condition: Check if a path has been found. Returns True if a path has been found, False otherwise.', 'follow_path': 'Action: Follow the path to reach the target location. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Generate behavior tree for a robot to find and follow a specified path to a target location
6.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_line_formed</Condition><Selector><Sequence><Condition>is_path_found</Condition><Action>follow_path</Action></Sequence><Sequence><Action>find_path</Action><Action>follow_path</Action></Sequence></Selector></Sequence><Selector><Sequence><Condition>is_line_formed</Condition><Action>find_path</Action></Sequence><Action>wander</Action></Selector></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'change_speed': 'Action: Change the speed of the robot. Always returns True.', 'change_color_to_red': "Action: Change agent's color to red. Always returns True.", 'change_color_to_yellow': "Action: Change agent's color to yellow. Always returns True.", 'change_color_to_blue': "Action: Change agent's color to blue. Always returns True.", 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'avoid_obstacle': 'Action: Navigate around the obstacle to continue on the path. Always returns True.', 'form_shape': 'Action: Form a specific shape or pattern with other robots. Always returns True.', 'is_shape_formed': 'Condition: Check if the desired shape has been formed. Returns True if the shape is formed, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: Generate behavior tree for multiple robots to form a triangle shape with different colored robots
7.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_obstacle_detected</Condition><Action>change_speed</Action><Action>avoid_obstacle</Action></Sequence><Selector><Sequence><Condition>is_shape_formed</Condition><Action>form_shape</Action></Sequence><Sequence><Condition>is_shape_formed</Condition><Action>form_shape</Action><Action>change_speed</Action></Sequence></Selector></Selector></BehaviorTree>
###
4.// INSTRUCTIONS: Use only the following behaviors {'detect_target': 'Condition: Check if a target is detected within range. Returns True if a target is detected, False otherwise.', 'move_to_target': 'Action: Move towards the detected target. Always returns True.', 'target_reached': 'Condition: Check if the robot has reached the target. Returns True if the target is reached, False otherwise.', 'start_recording': 'Action: Begin recording the target once it is reached. Always returns True.', 'stop_recording': 'Action: Stop recording and save the data. Always returns True.', 'analyze_data': 'Action: Analyze and process the recorded data. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Record and analyze data from a detected target.
4.// OUTPUT:
<BehaviorTree><Sequence><Condition>detect_target</Condition><Selector><Sequence><Action>move_to_target</Action><Condition>target_reached</Condition><Sequence><Action>start_recording</Action><Action>stop_recording</Action><Action>analyze_data</Action></Sequence></Selector></Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'explore': 'Action: Move the robot to explore new areas and create a map of the environment. Always returns True.', 'follow_map': 'Action: Use the existing map to navigate and move towards the next unexplored location. Always returns True.', 'recharge': 'Action: Recharge the robot's energy levels at designated charge points. Always returns True.', 'check_battery': 'Condition: Check the battery levels of the robot. Returns True if the battery is low, False otherwise.', 'is_map_complete': 'Condition: Check if the entire environment has been successfully mapped. Returns True if mapping is complete, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Generate behavior tree for a robot to map and explore the environment, recharge when needed, and return to base once mapping is complete.
5.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_map_complete</Condition><Selector><Sequence><Action>explore</Action><Selector><Condition>check_battery</Condition><Action>recharge</Action></Selector><Action>follow_map</Action></Sequence><Action>return_to_base</Action></Selector></Sequence></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'identify_object': 'Action: Use vision and sensors to identify nearby objects. Always returns True.', 'detect_motion': 'Condition: Check for any motion in the surroundings. Returns True if motion is detected, False otherwise.', 'collect_object': 'Action: Pick up and collect the identified object. Always returns True.', 'deliver_object': 'Action: Deliver the collected object to a designated location. Always returns True.', 'is_object_delivered': 'Condition: Check if the object has been successfully delivered. Returns True if the object has been delivered, False otherwise.', 'find_shortest_path': 'Action: Use the map to find the shortest path to the designated location. Always returns True.', 'follow_path': 'Action: Follow the calculated path to reach the designated location. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Collect an object, identify it, and deliver it to a designated location.
6.// OUTPUT:
<BehaviorTree><Sequence><Action>identify_object</Action><Condition>detect_motion</Condition><Selector><Sequence><Action>collect_object</Action><Action>deliver_object</Action><Condition>is_object_delivered</Condition></Sequence><Sequence><Action>find_shortest_path</Action><Action>follow_path</Action></Sequence></Selector></Sequence></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'assemble_parts': 'Action: Collect and assemble the designated parts to build a structure. Always returns True.', 'get_blueprint': 'Action: Use sensors to obtain a blueprint or design for the structure. Always returns True.', 'check_inventory': 'Condition: Check the inventory for available parts and resources. Returns True if the required parts are available, False otherwise.', 'gather_resources': 'Action: Use sensors to locate and gather necessary resources for building. Always returns True.', 'deposit_resources': 'Action: Return to designated storage location and deposit collected resources. Always returns True.', 'is_structure_built': 'Condition: Check if the structure has been successfully built. Returns True if the structure is complete, False otherwise.', 'wait_for_signal': 'Action: Wait for a signal from another robot or central control. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: Construct a designated structure by gathering resources, assembling parts, and depositing excess materials.
7.// OUTPUT:
<BehaviorTree><Sequence><Selector><Action>get_blueprint</Action><Sequence><Condition>check_inventory</Condition><Action>gather_resources</Action><Action>deposit_resources</Action><Selector><Sequence><Condition>wait_for_signal</Condition><Action>assemble_parts</Action><Condition>is_structure_built</Condition></Sequence></Selector></Sequence></Selector></Sequence></BehaviorTree>
###
4.// INSTRUCTIONS: Use only the following behaviors {'explore': 'Action: Explore an unknown area. Always returns True.', 'is_resource_detected': 'Condition: Check if a resource is detected. Returns True if a resource is detected, False otherwise.', 'collect_resource': 'Action: Collect the detected resource. Returns True if the resource is successfully collected, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Explore the environment and collect any detected resources.
4.// OUTPUT:
<BehaviorTree><Sequence><Action>explore</Action></Sequence><Selector><Sequence><Condition>is_resource_detected</Condition><Action>collect_resource</Action></Sequence><Action>explore</Action></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'detect_enemy': 'Condition: Check for nearby enemies. Returns True if an enemy is detected, False otherwise.', 'attack_enemy': 'Action: Attack the detected enemy. Returns True if the enemy is successfully attacked, False otherwise.', 'reload_weapon': 'Action: Reload the weapon. Returns True if the weapon is successfully reloaded, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Patrol the area and attack any enemies encountered. Reload the weapon if low on ammo.
5.// OUTPUT:
<BehaviorTree><Sequence><Action>reload_weapon</Action><Action>patrol_area</Action><Selector><Sequence><Condition>detect_enemy</Condition><Action>attack_enemy</Action></Sequence><Action>patrol_area</Action></Selector></Sequence></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'detect_food': 'Condition: Check for nearby food sources. Returns True if food is detected, False otherwise.', 'eat_food': 'Action: Consume the detected food source. Returns True if the food is successfully consumed, False otherwise.', 'is_thirsty': 'Condition: Check if the agent is thirsty. Returns True if the agent is thirsty, False otherwise.', 'drink_water': 'Action: Consume water to quench thirst. Returns True if water is successfully consumed, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Find and consume food and water sources until thirst is quenched.
6.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_thirsty</Condition><Action>drink_water</Action></Sequence><Selector><Sequence><Condition>detect_food</Condition><Action>eat_food</Action></Sequence><Condition>is_thirsty</Condition><Action>drink_water</Action></Selector></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'detect_target': 'Condition: Check for nearby targets. Returns True if a target is detected, False otherwise.', 'move_towards_target': 'Action: Move towards the detected target. Returns True if the agent successfully moves towards the target, False otherwise.', 'is_attacking': 'Condition: Check if the agent is currently attacking a target. Returns True if the agent is attacking, False otherwise.', 'attack_target': 'Action: Attack the target. Returns True if the target is successfully attacked, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: Search for and attack any nearby targets. If already attacking a target, continue attacking until it is defeated.
7.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_attacking</Condition><Action>attack_target</Action></Sequence><Selector><Sequence><Condition>detect_target</Condition><Action>move_towards_target</Action><Condition>is_attacking</Condition><Action>attack_target</Action></Selector></BehaviorTree>
###
3.// INSTRUCTIONS: Use only the following behaviors {'pick_up_object': 'Action: Pick up an object using the robot's manipulator arm. Returns True if successful, False otherwise.', 'drop_object': 'Action: Drop any object currently held by the robot. Returns True if successful, False otherwise.', 'is_object_nearby': 'Condition: Check if there is an object within reach of the robot. Returns True if an object is nearby, False otherwise.', 'is_hand_empty': 'Condition: Check if the robot's manipulator arm is currently holding an object. Returns True if the hand is empty, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3.// USER COMMAND: Generate behavior tree for a robot to collect and transport objects from one location to another
3.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_hand_empty</Condition><Condition>is_object_nearby</Condition><Action>pick_up_object</Action><Action>move_to_destination</Action><Action>drop_object</Action></Sequence><Action>wait</Action></Selector></BehaviorTree>

###
4.// INSTRUCTIONS: Use only the following behaviors {'find_target': 'Action: Use sensors to scan the environment and locate the target. Returns True if target is found, False otherwise.', 'approach_target': 'Action: Move towards the target based on its location. Returns True if successful, False otherwise.', 'scan_for_obstacles': 'Action: Use sensors to scan for any obstacles in the path. Returns True if obstacles are found, False otherwise.', 'avoid_obstacle': 'Action: Move around an identified obstacle. Returns True if successful, False otherwise.', 'is_target_reached': 'Condition: Check if the robot has reached the target. Returns True if the target is reached, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Generate behavior tree for a robot to navigate to a specific target location while avoiding any obstacles
4.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_target_reached</Condition><Selector><Sequence><Action>find_target</Action><Action>approach_target</Action></Sequence><Sequence><Action>scan_for_obstacles</Action><Action>avoid_obstacle</Action></Sequence><Selector><Action>wait</Action><Action>move_to_next_waypoint</Action></Selector></Selector></Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'measure_soil_moisture': 'Action: Use soil moisture sensor to measure the moisture level in the soil. Returns True if successful, False otherwise.', 'adjust_water_level': 'Action: Adjust the amount of water released into the soil based on the moisture level measured. Returns True if successful, False otherwise.', 'is_plant_growing': 'Condition: Check if the plant has reached its full growth. Returns True if the plant is fully grown, False otherwise.', 'is_soil_dry': 'Condition: Check if the soil is dry and in need of watering. Returns True if the soil is dry, False otherwise.', 'is_water_tank_full': 'Condition: Check if the water tank is full. Returns True if the tank is full, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Generate behavior tree for a robot to automatically water and maintain a plant's growth
5.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_plant_growing</Condition><Selector><Sequence><Condition>is_soil_dry</Condition><Condition>is_water_tank_full</Condition><Action>measure_soil_moisture</Action><Action>adjust_water_level</Action></Sequence><Selector><Action>wait</Action><Action>move_to_next_plant</Action></Selector></Selector></Sequence></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'identify_victim': 'Action: Use sensors to scan the environment and identify a victim in need of help. Returns True if victim is found, False otherwise.', 'approach_victim': 'Action: Move towards the victim based on their location. Returns True if successful, False otherwise.', 'administer_first_aid': 'Action: Provide basic first aid to the victim. Returns True if successful, False otherwise.', 'call_for_medevac': 'Action: Send a distress signal and request for a medevac. Returns True if successful, False otherwise.', 'is_victim_stable': 'Condition: Check if the victim's condition is stable. Returns True if stable, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Generate behavior tree for a robot to perform search and rescue operations
6.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_victim_stable</Condition><Selector><Sequence><Action>identify_victim</Action><Action>approach_victim</Action><Action>administer_first_aid</Action></Sequence><Selector><Action>wait</Action><Sequence><Action>find_nearest_medical_facility</Action><Action>call_for_medevac</Action></Sequence></Selector></Selector></Sequence></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'get_gps_location': 'Action: Use GPS to obtain current location coordinates. Returns True if successful, False otherwise.', 'calculate_route': 'Action: Use map data and GPS coordinates to calculate the shortest route to a given destination. Returns True if successful, False otherwise.', 'check_battery_level': 'Condition: Check the battery level of the robot. Returns True if level is above 20%, False otherwise.', 'is_route_complete': 'Condition: Check if the robot has reached the destination. Returns True if destination is reached, False otherwise.', 'alert_user': 'Action: Send an alert to the user if the robot encounters any issues during navigation. Returns True if successful, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: Generate behavior tree for a robot to navigate to a specified location while monitoring battery level and alerting user of any issues
7.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_route_complete</Condition><Action>alert_user</Action></Sequence><Sequence><Condition>check_battery_level</Condition><Selector><Sequence><Action>get_gps_location</Action><Action>calculate_route</Action></Sequence><Index>0</Index></Selector><Action>move_to_next_waypoint</Action></Sequence></Selector></BehaviorTree>
###
4.// INSTRUCTIONS: Use only the following behaviors {'find_object': 'Action: Search for a specific object in the environment. Always returns True.', 'pick_up_object': 'Action: Pick up the detected object. Always returns True.', 'deposit_object': 'Action: Deposit the object in a designated location. Always returns True.', 'is_object_detected': 'Condition: Check if an object is detected within a certain radius. Returns True if an object is detected, False otherwise.', 'is_at_deposit_location': 'Condition: Check if the robot has reached the designated deposit location. Returns True if at location, False otherwise.', 'have_object': 'Condition: Check if the robot is currently holding an object. Returns True if holding an object, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Generate behavior tree for a robot to search for a specific object, pick it up, and deposit it in a designated location.
4.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_object_detected</Condition><Selector><Sequence><Action>find_object</Action><Action>pick_up_object</Action><Condition>have_object</Condition><Action>deposit_object</Action></Sequence></Selector></Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'follow_path': 'Action: Follow a predefined path towards a goal location. Always returns True.', 'detect_obstacles': 'Action: Use sensors to detect obstacles in the path. Always returns True.', 'stop_movement': 'Action: Stop all movement. Always returns True.', 'continue_movement': 'Action: Continue moving towards goal location. Always returns True.', 'is_goal_reached': 'Condition: Check if the robot has reached its goal location. Returns True if at location, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Generate behavior tree for a robot to follow a specific path and avoid obstacles along the way.
5.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_goal_reached</Condition><Selector><Sequence><Action>follow_path</Action><Condition>detect_obstacles</Condition><Selector><Action>stop_movement</Action><Action>continue_movement</Action></Selector></Sequence></Selector></Sequence></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'detect_load': 'Action: Use sensors to detect the weight of the load being carried. Always returns True.', 'move_to_target': 'Action: Move towards a specific target location. Always returns True.', 'unload_cargo': 'Action: Unload the cargo at the designated location. Always returns True.', 'is_load_heavy': 'Condition: Check if the load being carried is above a certain weight threshold. Returns True if load is heavy, False otherwise.', 'is_at_target': 'Condition: Check if the robot has reached the target location. Returns True if at location, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Generate behavior tree for a cargo-carrying robot to move to a target location, unload the cargo, and return to the starting point.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_at_target</Condition><Action>move_to_target</Action><Selector><Sequence><Condition>is_load_heavy</Condition><Action>detect_load</Action><Action>unload_cargo</Action></Sequence></Selector><Action>move_to_starting_point</Action></Sequence></Selector></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'generate_target_path': 'Action: Use a mapping algorithm to generate a path towards the designated target location. Always returns True.', 'avoid_obstacles': 'Action: Use sensors to detect and avoid obstacles in the path. Always returns True.', 'move_to_waypoint': 'Action: Move to a specific waypoint on the generated path. Always returns True.', 'wait_for_obstacle_clearance': 'Action: Wait for a certain amount of time for obstacles to be cleared before continuing. Always returns True.', 'is_path_reached': 'Condition: Check if the robot has reached the designated path location. Returns True if at location, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles in the path. Returns True if obstacle is detected, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: Generate behavior tree for a mapping robot to generate a path, avoid obstacles, and reach a certain location on the path.
7.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_path_reached</Condition><Selector><Sequence><Action>generate_target_path</Action><Condition>is_obstacle_detected</Condition><Sequence><Action>avoid_obstacles</Action><Action>wait_for_obstacle_clearance</Action></Sequence><Action>move_to_waypoint</Action></Sequence></Selector></Sequence></BehaviorTree> 
###
3.// INSTRUCTIONS: Use only the following behaviors {'find_target': 'Subtree node: Represents a behavior tree for finding a target.', 'attack': 'Action: Command the agent to attack the target. Always returns True.', 'get_ammo': 'Subtree node: Represents a behavior tree for obtaining ammunition.', 'refill_ammo': 'Action: Gets the agent to refill ammunition if it is empty. Always returns True.', 'is_ammo_low': 'Condition: Checks if ammunition is below a specific threshold. Returns True if ammo is below the threshold, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3.// USER COMMAND: Find and attack a target, making sure to maintain enough ammunition at all times.
3.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>find_target</Action><Action>attack</Action></Sequence><Selector><Sequence><Condition>is_ammo_low</Condition><Action>get_ammo</Action><Action>refill_ammo</Action></Sequence></Selector></Selector></BehaviorTree>

###
4.// INSTRUCTIONS: Use only the following behaviors {'navigate_to_goal': 'Subtree node: Represents a behavior tree for navigating to a designated goal.', 'gather_resources': 'Subtree node: Represents a behavior tree for gathering resources.', 'deposit_resources': 'Action: Instructs the agent to deposit gathered resources. Always returns True.', 'has_resources': 'Condition: Checks if the agent has any resources. Returns True if there are resources, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Navigate to the goal and gather resources along the way. If resources are acquired, deposit them before reaching the goal.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>navigate_to_goal</Action><Action>gather_resources</Action><Sequence><Condition>has_resources</Condition><Action>deposit_resources</Action></Sequence></Sequence></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'navigate_to_checkpoint': 'Subtree node: Represents a behavior tree for navigating to a designated checkpoint.', 'scan_for_obstacles': 'Action: Scans the environment for obstacles. Returns True if there are no obstacles, False otherwise.', 'avoid_obstacles': 'Action: Instructs the agent to avoid any detected obstacles. Always returns True.', 'has_reached_checkpoint': 'Condition: Checks if the agent has reached the designated checkpoint. Returns True if checkpoint has been reached, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Navigate to the designated checkpoint while scanning for and avoiding any obstacles along the way.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>navigate_to_checkpoint</Action><Sequence><Action>scan_for_obstacles</Action><Action>avoid_obstacles</Action></Sequence><Condition>has_reached_checkpoint</Condition></Sequence></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'gather_food': 'Subtree node: Represents a behavior tree for gathering food.', 'eat': 'Action: Instructs the agent to eat when there is food. Always returns True.', 'on_low_food': "Event: Triggers when the agent's food falls below a threshold. Returns True if food is low, False otherwise.", 'rest': 'Action: Makes the agent take a break from activities. Always returns True.', 'is_rest_needed': 'Condition: Checks if the agent needs to rest based on a specific threshold for food levels. Returns True if rest is needed, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Keep gathering food and eating, taking breaks whenever necessary to rest and maintain energy levels.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>gather_food</Action><Action>eat</Action></Sequence><Selector><Action>on_low_food</Action><Sequence><Condition>is_rest_needed</Condition><Action>rest</Action></Sequence></Selector></Selector></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'explore_area': 'Subtree node: Represents a behavior tree for exploring the designated area.', 'analyze_environment': 'Action: Analyzes the current environment. Always returns True.', 'pick_up_artifact': 'Subtree node: Represents a behavior tree for picking up artifacts.', 'deposit_artifact': 'Action: Instructs the agent to deposit any collected artifacts. Always returns True.', 'is_area_clear': 'Condition: Checks if the designated area is clear of artifacts. Returns True if clear, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: Explore the designated area while analyzing the environment and picking up artifacts. Make sure to deposit any collected artifacts before completing the exploration.
7.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>explore_area</Action><Action>analyze_environment</Action><Action>pick_up_artifact</Action><Sequence><Condition>is_area_clear</Condition><Action>deposit_artifact</Action></Sequence></Sequence></Selector></BehaviorTree>
###
3.// INSTRUCTIONS: Use only the following behaviors {'detect_target': 'Condition: Checks if target is in sight. Returns True if target is detected, False otherwise.', 'move_towards_target': 'Action: Move towards the target. Always returns True.', 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'take_cover': 'Subtree node: Represents a behavior tree for taking cover from enemies.', 'shoot_target': 'Action: Shoot at the target. Always returns True.', 'reload_weapon': "Action: Reloads the agent's weapon. Always returns True.", 'is_weapon_empty': 'Condition: Checks if the weapon has no ammo. Returns True if the weapon is empty, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3.// USER COMMAND: Use tactical movement to reach the target while avoiding obstacles. If the weapon runs out of ammo, take cover and reload before shooting again.
3.// OUTPUT:
<BehaviorTree><Sequence><Action>move_towards_target</Action></Sequence><Selector><Sequence><Condition>detect_target</Condition><Action>shoot_target</Action></Sequence><Sequence><Action>avoid_obstacle</Action><Selector><Sequence><Condition>is_weapon_empty</Condition><Action>take_cover</Action><Action>reload_weapon</Action><Action>shoot_target</Action></Sequence></Selector></Sequence></Selector></BehaviorTree>

###
4.// INSTRUCTIONS: Use only the following behaviors {'detect_food': 'Condition: Checks if food is in sight. Returns True if food is detected, False otherwise.', 'run_away': 'Action: Run away from the detected food. Always returns True.', 'eat_food': 'Action: Eat the food. Always returns True.', 'rest': 'Subtree node: Represents a behavior tree for resting.', 'is_hungry': 'Condition: Checks if the agent is hungry. Returns True if the agent is hungry, False otherwise.', 'is_sleepy': 'Condition: Checks if the agent is sleepy. Returns True if the agent is sleepy, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: If the agent is hungry, find food and eat it. If the agent is sleepy, find a safe place to rest.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_hungry</Condition><Selector><Sequence><Condition>detect_food</Condition><Action>run_away</Action><Action>eat_food</Action></Sequence></Selector></Sequence><Sequence><Condition>is_sleepy</Condition><Action>rest</Action></Sequence></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'detect_enemy': 'Condition: Checks if an enemy is within visual range. Returns True if an enemy is detected, False otherwise.', 'hide': 'Action: Hide from the detected enemy. Always returns True.', 'dash': 'Action: Move quickly in a specific direction. Always returns True.', 'engage_enemy': 'Action: Engage the enemy by attacking them. Always returns True.', 'reload_weapon': "Action: Reloads the agent's weapon. Always returns True.", 'is_weapon_empty': 'Condition: Checks if the weapon has no ammo. Returns True if the weapon is empty, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: If enemy is detected, hide and reload weapon. Once reloaded, engage the enemy and use dash to dodge their attacks.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>detect_enemy</Condition><Action>hide</Action><Selector><Sequence><Condition>is_weapon_empty</Condition><Action>reload_weapon</Action><Action>engage_enemy</Action><Action>dash</Action></Sequence></Selector></Sequence></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'detect_object': 'Condition: Checks if an object is within range. Returns True if an object is detected, False otherwise.', 'get_closest_object': 'Action: Move towards the closest object. Always returns True.', 'collect_object': 'Action: Collect the object. Always returns True.', 'drop_object': 'Action: Drop the collected object. Always returns True.', 'is_full': 'Condition: Checks if the agent is holding the maximum amount of objects. Returns True if the agent is full, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Detect and collect objects until the agent is full, then drop all the collected objects.
6.// OUTPUT:
<BehaviorTree><Sequence><Selector><Condition>detect_object</Condition><Selector><Sequence><Condition>is_full</Condition><Selector><Sequence><Action>get_closest_object</Action><Action>collect_object</Action></Sequence></Selector></Sequence></Selector></Selector><Action>drop_object</Action></Sequence></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'move_forward': 'Action: Move the robot one step forward in the current direction. Always returns True.', 'monitor_battery_level': "Action: Continuously checks the agent's battery level. Always returns True.", 'recharge_battery': 'Subtree node: Represents a behavior tree for recharging the battery.', 'idle': 'Action: Stay in place and conserve battery. Always returns True.', 'is_battery_low': 'Condition: Checks if the battery is below a specific threshold. Returns True if the battery is low, False otherwise.', 'is_battery_full': 'Condition: Checks if the battery is at maximum capacity. Returns True if the battery is full, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: Move forward while keeping an eye on battery levels. If the battery is low, recharge it. If it is full, stay idle to conserve energy.
7.// OUTPUT:
<BehaviorTree><Sequence><Action>move_forward</Action></Sequence><Selector><Sequence><Action>monitor_battery_level</Action><Selector><Sequence><Condition>is_battery_low</Condition><Action>recharge_battery</Action></Sequence><Sequence><Condition>is_battery_full</Condition><Action>idle</Action></Sequence></Selector></Sequence></Selector></BehaviorTree>		
###
3.// INSTRUCTIONS: Use only the following behaviors {'find_food': 'Action: Search for food sources. Always returns True.', 'seek_shelter': 'Action: Find and enter nearby shelters. Always returns True.', 'gather_food': 'Action: Gather food resources. Always returns True.', 'move_to_nest': 'Action: Move towards the designated nest. Always returns True.', 'return_to_nest': 'Action: Return to the nearest nest. Always returns True.', 'check_food_storage': 'Condition: Check if the food storage is full. Returns True if storage is full, False otherwise.', 'is_shelter_found': 'Condition: Check if a shelter is within 10 units. Returns True if a shelter is nearby, False otherwise.', 'is_food_found': 'Condition: Check if a food source is within 5 units. Returns True if a food source is nearby, False otherwise.', 'is_nest_reached': 'Condition: Check if the nest is within 5 units. Returns True if the nest is nearby, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3.// USER COMMAND: generate behavior tree to 'Forage for food, return to the nest when storage is full, seek shelter if there's a threat.'
3.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>find_food</Action><Condition>is_food_found</Condition><Action>gather_food</Action></Sequence><Sequence><Condition>check_food_storage</Condition><Condition>is_shelter_found</Condition><Action>seek_shelter</Action><Action>return_to_nest</Action></Sequence></Selector></BehaviorTree>

###
4.// INSTRUCTIONS: Use only the following behaviors {'sense_surroundings': 'Action: Use sensors to map the surroundings. Always returns True.', 'evaluate_terrain': 'Action: Evaluate terrain type. Always returns True.', 'avoid_terrain': 'Action: Avoid unfavorable terrain. Always returns True.', 'change_direction': 'Action: Change direction of movement. Always returns True.', 'move_to_specific_location': 'Action: Move towards a specific location. Always returns True.', 'search_resource': 'Action: Search for nearby resources. Always returns True.', 'is_obstacle_detected': 'Condition: Check for obstacles within 10 units. Returns True if an obstacle is detected, False otherwise.', 'is_resource_found': 'Condition: Check for resources within 5 units. Returns True if a resource is detected, False otherwise.', 'is_terrain_unfavorable': 'Condition: Check if terrain type is unfavorable. Returns True if the terrain is unfavorable, False otherwise.', 'is_target_reached': 'Action: Check if the target location has been reached. Returns True if the target location is reached, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Navigate through terrain avoiding obstacles, search for resources, reach a specific location'
4.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Action>sense_surroundings</Action><Action>evaluate_terrain</Action><Condition>is_terrain_unfavorable</Condition><Action>avoid_terrain</Action></Sequence><Selector><Sequence><Condition>is_obstacle_detected</Condition><Action>search_resource</Action></Sequence><Sequence><Condition>is_target_reached</Condition></Sequence></Selector><Action>move_to_specific_location</Action></Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'sense_surroundings': 'Action: Use sensors to map the surroundings. Always returns True.', 'evaluate_danger': 'Action: Evaluate surrounding danger levels. Always returns True.', 'avoid_danger': 'Action: Evade potential danger. Always returns True.', 'alert_others': 'Action: Alert nearby robots of potential danger. Always returns True.', 'gather_important_data': 'Action: Gather important data from the environment. Always returns True.', 'coordinate_movement': 'Action: Coordinate movement with other robots. Always returns True.', 'is_danger_detected': 'Condition: Check for danger levels within a 10-unit radius. Returns True if danger is detected, False otherwise.', 'is_data_collected': 'Condition: Check if important data has been gathered. Returns True if data is collected, False otherwise.', 'is_movement_coordinated': 'Condition: Check if movement has been coordinated with other robots. Returns True if movement is coordinated, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Ensure safety by avoiding danger, gathering data, and coordinating movement with other robots.'
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Selector><Condition>is_danger_detected</Condition><Action>evaluate_danger</Action><Action>avoid_danger</Action><Action>alert_others</Action></Selector><Action>gather_important_data</Action><Condition>is_data_collected</Condition><Action>coordinate_movement</Action><Condition>is_movement_coordinated</Condition></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'random_movement': 'Action: Move randomly within the environment. Always returns True.', 'follow_trail': 'Action: Follow a trail detected by sensors. Always returns True.', 'explore_unknown_areas': 'Action: Explore unknown areas. Always returns True.', 'gather_information': 'Action: Gather information from the environment. Always returns True.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_trail_detected': 'Condition: Check for a trail detected by sensors. Returns True if a trail is detected, False otherwise.', 'is_area_unknown': 'Condition: Check if the area is unknown. Returns True if the area is unknown, False otherwise.', 'is_info_gathered': 'Condition: Check if information has been gathered. Returns True if information has been gathered, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Explore the environment by moving randomly, following detected trails, and gathering information.'
6.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Action>random_movement</Action><Condition>is_obstacle_detected</Condition></Sequence><Sequence><Condition>is_trail_detected</Condition><Action>follow_trail</Action></Sequence></Selector></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'gather_resources': 'Action: Gather resources in the environment. Always returns True.', 'deposit_resources': 'Action: Return to the nest and deposit resources. Always returns True.', 'communicate_with_other_robots': 'Action: Communicate with other robots to coordinate tasks. Always returns True.',
###
3.// INSTRUCTIONS: Use only the following behaviors {'detect_target': 'Condition: Check for a target within sight. Returns True if a target is detected, False otherwise.', 'approach_target': 'Action: Move towards the detected target. Always returns True.', 'retreat': 'Action: Move away from the target. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3.// USER COMMAND: Generate behavior tree for a swarm of robots to approach and surround a detected target.
3.// OUTPUT:
<BehaviorTree><Selector><Condition>detect_target</Condition><Sequence><Action>approach_target</Action><Action>surround_target</Action></Sequence></Selector></BehaviorTree>

###
4.// INSTRUCTIONS: Use only the following behaviors {'detect_obstacle': 'Condition: Check for obstacles ahead. Returns True if an obstacle is detected, False otherwise.', 'evade_obstacle': 'Action: Move around the obstacle to avoid collision. Always returns True.', 'pursue_target': 'Action: Move towards the detected target to pursue it. Always returns True.', 'check_battery_level': 'Condition: Check if the robot's battery level is low. Returns True if the battery level is below 20%, False otherwise.', 'recharge_battery': 'Action: Return to charging station to recharge the battery. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Generate behavior tree for a robot to navigate obstacles and pursue a target while monitoring battery level and recharging when necessary.
4.// OUTPUT:
<BehaviorTree><Selector><Condition>check_battery_level</Condition><Action>recharge_battery</Action><Sequence><Condition>detect_obstacle</Condition><Action>evade_obstacle</Action></Sequence><Sequence><Condition>detect_target</Condition><Action>pursue_target</Action></Sequence></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'detect_collisions': 'Condition: Check for collisions with other robots. Returns True if a collision is detected, False otherwise.', 'stop': 'Action: Stop movement to prevent collisions. Always returns True.', 'request_assistance': 'Action: Signal for assistance from other robots. Always returns True.', 'is_task_complete': 'Condition: Check if the current task is complete. Returns True if the task is complete, False otherwise.', 'perform_task': 'Action: Perform the assigned task. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Generate behavior tree for a swarm of robots to work together and perform a task without collisions.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>detect_collisions</Condition> <Action>stop</Action><Action>request_assistance</Action></Sequence><Sequence><Condition>is_task_complete</Condition><Action>perform_task</Action></Sequence></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'move_forward': 'Action: Move forward in a straight line. Always returns True.', 'turn_left': 'Action: Turn left by 90 degrees. Always returns True.', 'turn_right': 'Action: Turn right by 90 degrees. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Generate behavior tree for a swarm of robots to traverse through a maze and reach the end.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Conditional>detect_collision</Conditional><Action>turn_left</Action></Sequence><Sequence><Conditional>detect_collision</Conditional><Action>turn_right</Action></Sequence><Action>move_forward</Action></Selector></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'detect_excess_resources': 'Condition: Check for excess resources nearby. Returns True if excess resources are detected, False otherwise.', 'collect_resource': 'Action: Collect the resource. Always returns True.', 'return_to_base': 'Action: Return to the base with collected resources. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: Generate behavior tree for a swarm of robots to collect excess resources and return to base.
7.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>detect_excess_resources</Condition><Sequence><Action>collect_resource</Action><Action>return_to_base</Action></Sequence></Sequence><Action>wander</Action></Selector></BehaviorTree> 
###
4.// INSTRUCTIONS: Use only the following behaviors {'move_to_point': 'Action: Move towards a designated point. Always returns True.', 'stop_movement': 'Action: Stop all movement. Always returns True.', 'is_detected': 'Condition: Check if object is detected. Returns True if object is detected, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Move towards a specific point, but stop if an object is detected in the way.
4.// OUTPUT:
<BehaviorTree><Sequence><Action>move_to_point</Action><Condition>is_detected</Condition><Action>stop_movement</Action></Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'reach_peak': 'Subtree node: Represents a behavior tree to reach a specific mountain peak.', 'dig': 'Action: Use specialized tools to dig through rock and reach the buried artifact. Always returns True.', 'collect_artifact': 'Action: Pick up the discovered artifact. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Reach the top of the mountain peak, dig for the ancient artifact, and then pick it up.
5.// OUTPUT:
<BehaviorTree><Sequence><Action>reach_peak</Action><Action>dig</Action><Action>collect_artifact</Action></Sequence></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'explore_area': 'Subtree node: Represents a behavior tree to explore a specific area.', 'collect_resource': 'Action: Collect nearby resources. Always returns True.', 'is_full': 'Condition: Checks if the agent's inventory is full. Returns True if the inventory is full, False otherwise.', 'build_structure': 'Action: Use resources to build a designated structure. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Explore the area and collect resources. If the inventory is full, build a designated structure before continuing to explore.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>explore_area</Action><Sequence><Action>collect_resource</Action><Condition>is_full</Condition><Action>build_structure</Action></Sequence></Selector></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'find_exit': 'Subtree node: Represents a behavior tree to find an exit in a maze.', 'navigate_maze': 'Subtree node: Represents a behavior tree to navigate a maze.', 'pick_up_key': 'Condition: Check if a key is detected. Returns True if key is detected, False otherwise.', 'unlock_door': 'Action: Use key to unlock a door. Always returns True.', 'escape': 'Action: Escape the maze once all objectives are completed. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: Find and pick up the key, navigate through the maze to the exit, and then use the key to unlock the door and escape.
7.// OUTPUT:
<BehaviorTree><Sequence><Sequence><Action>find_exit</Action><Action>pick_up_key</Action></Sequence><Sequence><Action>navigate_maze</Action><Condition>pick_up_key</Condition><Action>unlock_door</Action><Action>escape</Action></Sequence></BehaviorTree>###
4.// INSTRUCTIONS: Use only the following behaviors {'detect_collaborative_task': 'Condition: Check if a collaborative task is being performed by other robots. Returns True if a task is detected, False otherwise.', 'perform_collaborative_task': 'Action: Assist in the performance of a collaborative task. Always returns True.', 'rescue_teammate': 'Action: Move towards a trapped or disabled teammate and assist in rescue efforts. Always returns True.', 'build_structure': 'Action: Utilize materials to build a predefined structure or shelter. Always returns True.', 'is_structure_built': 'Condition: Check if the designated structure or shelter has been successfully built. Returns True if the structure is built, False otherwise.', 'collect_resources': 'Action: Collect resources or materials needed for the construction of a structure. Always returns True.', 'enforce_cooperation': 'Action: Encourage cooperation and coordination among team members for efficient task completion. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Generate a behavior tree for a cooperative swarm of robots to construct a shelter while also rescuing any trapped teammates.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>detect_collaborative_task</Condition><Action>perform_collaborative_task</Action></Sequence><Sequence><Condition>is_structure_built</Condition><Selector><Sequence><Condition>detect_collaborative_task</Condition><Selector><Action>rescue_teammate</Action><Action>enforce_cooperation</Action></Selector></Sequence><Sequence><Condition>is_resource_detected</Condition><Action>collect_resources</Action></Sequence></Selector></Sequence><Sequence><Condition>detect_collaborative_task</Condition><Selector><Action>build_structure</Action><Action>enforce_cooperation</Action></Selector></Sequence></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'assess_weather_conditions': 'Action: Collect data and analyze the current and forecasted weather conditions. Always returns True.', 'adjust_flight_path': 'Action: Adjust the flight path or trajectory in response to changing weather conditions. Always returns True.', 'switch_to_alternate_mode': 'Action: Activate an alternate mode or function in response to extreme weather conditions. Always returns True.', 'check_battery_level': 'Condition: Check the battery level and remaining flight time. Returns True if battery level is above 30%, False if below.', 'return_to_base': 'Action: Abort the current mission and return to the designated base or landing zone. Always returns True.'}, to construct behavior tree in XML format for a drone undertaking a long-distance and multi-day mission in extreme weather conditions.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>check_battery_level</Condition><Action>return_to_base</Action></Sequence><Sequence><Condition>is_weather_extreme</Condition><Action>switch_to_alternate_mode</Action></Sequence><Sequence><Condition>is_weather_changed</Condition><Action>adjust_flight_path</Action></Sequence><Sequence><Condition>time_since_last_update</Condition><Action>assess_weather_conditions</Action></Sequence></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'detect_intruder': 'Condition: Check for any unauthorized or hostile entities in the vicinity. Returns True if an intruder is detected, False otherwise.', 'fight_intruder': 'Action: Utilize self-defense mechanisms and engage in combat with the detected intruder. Always returns True.', 'request_reinforcements': 'Action: Send a distress signal and request reinforcements from other nearby agents or base. Always returns True.', 'improve_defenses': 'Action: Strengthen and reinforce the defenses of the current location or base. Always returns True.', 'is_defensible_position': 'Condition: Check if the current location or base is easily defensible. Returns True if the location is defensible, False otherwise.', 'patrol_area': 'Action: Conduct patrols of the designated area to monitor for any potential threats. Always returns True.', 'share_intel': 'Action: Share gathered intelligence and information with other agents in the team. Always returns True.'}, to construct a behavior tree in XML format for a team of security robots defending a high-value target against potential threats.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>detect_intruder</Condition><Selector><Action>fight_intruder</Action><Action>request_reinforcements</Action></Selector></Sequence><Sequence><Condition>is_defensible_position</Condition><Selector><Action>improve_defenses</Action><Action>patrol_area</Action></Selector></Sequence><Sequence><Condition>patrol_completed</Condition><Action>share_intel</Action></Sequence></Selector></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'detect_hazard': 'Condition: Check for any potential hazards or danger in the given location. Returns True if a hazard is detected, False otherwise.', 'evade_hazard': 'Action: Move away from the detected hazard to a safe distance. Always returns True.', 'ask_for_help': 'Action: Send a distress signal and request assistance from nearby agents or base. Always returns True.', 'seek_medical_attention': 'Action: Bring the injured or disabled agent to a designated medical center for treatment. Always returns True.', 'avoid_collision': 'Action: Utilize sensors and maneuvering techniques to avoid collisions with other agents or obstacles. Always returns True.', 'follow_leader': 'Action: Follow the designated leader and perform assigned tasks. Always returns True.', 'is_task_completed': 'Condition: Check if the assigned task has been completed. Returns True if the task is completed, False otherwise.'}, to construct a behavior tree in XML format to navigate a disaster-stricken area and provide assistance to those in need.
7.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>detect_hazard</Condition><Selector><Action>ask_for_help</Action><Action>evade_hazard</Action></Selector></Sequence><Sequence><Condition>is_following_leader</Condition><Action>follow_leader</Action></Sequence><Sequence><Condition>detect_injured_agent</Condition><Action>seek_medical_attention</Action></Sequence><Sequence><Condition>detect_obstacle</Condition><Action>avoid_collision</Action></Sequence><Sequence><Condition>is_task_completed</Condition><Action>are_all_tasks_completed</Action></Sequence></Selector></BehaviorTree> 
###
4.// INSTRUCTIONS: Use only the following behaviors {'move_forward': "Action: Move forward in a straight line. Always returns True.", 'turn_left': "Action: Turn left by 90 degrees. Always returns True.", 'turn_right': "Action: Turn right by 90 degrees. Always returns True.", 'turn_around': "Action: Turn around by 180 degrees. Always returns True.", 'is_path_clear': "Condition: Check if the path ahead is clear. Returns True if no obstacles are detected, False otherwise.", 'is_target_detected': "Condition: Check if the target is within 10 units. Returns True if the target is within 10 units of distance, False otherwise.", 'is_target_reached': "Condition: Check if the target is within 5 units. Returns True if the target is within 5 units of distance, False otherwise."}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Traverse a maze, moving forward until an obstacle is detected, then turn left and continue until the target is reached.
4.// OUTPUT:
<BehaviorTree><Sequence><Action>move_forward</Action><Selector><Sequence><Condition>is_target_detected</Condition><Action>turn_left</Action></Sequence><Action>turn_around</Action><Action>turn_right</Action></Selector><Action>move_forward</Action></Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'switch_to_cleaning_mode': "Action: Switch to cleaning mode. Always returns True.", 'switch_to_guard_mode': "Action: Switch to guard mode. Always returns True.", 'patrol': "Action: Patrol the designated area. Always returns True.", 'search_for_enemies': "Action: Search for nearby enemies. Always returns True.", 'is_area_safe': "Condition: Check if the designated area is safe. Returns True if no enemies are detected, False otherwise.", 'is_enemy_detected': "Condition: Check if enemies are within 10 units. Returns True if enemies are within 10 units of distance, False otherwise.", 'is_enemy_defeated': "Condition: Check if all enemies have been defeated. Returns True if no enemies are detected, False otherwise."}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Start in guarding mode, patrol the area and switch to cleaning mode if the area is safe.
5.// OUTPUT:
<BehaviorTree><Sequence><Action>switch_to_guard_mode</Action><Selector><Sequence><Condition>is_enemy_detected</Condition><Action>search_for_enemies</Action></Sequence><Action>patrol</Action></Selector><Selector><Condition>is_area_safe</Condition><Action>switch_to_cleaning_mode</Action></Selector></Sequence></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'gather_item': "Action: Pick up an item. Always returns True.", 'move_to_location': "Action: Move to a specific location. Always returns True.", 'collect_reward': "Action: Collect a reward from completing a task. Always returns True.", 'has_item': "Condition: Check if the agent is already holding an item. Returns True if the agent has an item, False otherwise.", 'is_task_complete': "Condition: Check if the task is complete. Returns True if the task has been completed, False otherwise.", 'is_location_reached': "Condition: Check if the agent has reached the specified location. Returns True if the agent is within range of the location, False otherwise."}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Gather an item, move to a specific location, and collect a reward from completing a task.
6.// OUTPUT:
<BehaviorTree><Sequence><Action>gather_item</Action><Selector><Sequence><Action>move_to_location</Action><Selector><Condition>is_task_complete</Condition><Action>collect_reward</Action></Selector></Sequence><Condition>is_location_reached</Condition></Selector></Sequence></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'assess_environment': "Action: Assess the current environment for hazards. Always returns True.", 'avoid_hazard': "Action: Avoid the nearest hazard. Always returns True.", 'move_to_safety': "Action: Move to the nearest safe location. Always returns True.", 'is_hazard_present': "Condition: Check if a hazard is present in the environment. Returns True if a hazard is detected, False otherwise.", 'is_safe': "Condition: Check if the current location is safe. Returns True if the location is safe, False otherwise."}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: Assess the environment for hazards and avoid them by moving to the nearest safe location.
7.// OUTPUT:
<BehaviorTree><Sequence><Action>assess_environment</Action><Selector><Sequence><Condition>is_hazard_present</Condition><Action>avoid_hazard</Action></Sequence><Action>move_to_safety</Action></Selector></Sequence></BehaviorTree> 
###
3.// INSTRUCTIONS: Use only the following behaviors {'explore_surroundings': 'Subtree node: Represents a behavior tree for exploring the robot's surroundings.', 'collect_resource': 'Subtree node: Represents a behavior tree for collecting resources.', 'build_structure': 'Action: Build a structure using collected resources. Returns True when the structure is successfully built.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3.// USER COMMAND: Explore the surroundings, collect resources, and build a structure.
3.// OUTPUT:
<BehaviorTree><Sequence><Action>explore_surroundings</Action><Action>collect_resource</Action><Action>build_structure</Action></Sequence></BehaviorTree>

###
4.// INSTRUCTIONS: Use only the following behaviors {'search_for_victim': 'Condition: Check for victims in the environment. Returns True if a victim is detected, False otherwise.', 'calculate_rescue_path': 'Action: Calculate the shortest path to reach the victim. Returns True if the path is calculated successfully.', 'follow_path': 'Action: Move along the calculated path to reach the victim. Returns False when the path is completed.', 'rescue_victim': 'Action: Provide aid to the victim. Returns True when the victim is successfully rescued.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Search for a victim, calculate the rescue path, follow the path, and rescue the victim.
4.// OUTPUT:
<BehaviorTree><Sequence><Condition>search_for_victim</Condition><Action>calculate_rescue_path</Action><Selector><Sequence><Condition>follow_path</Condition><Action>rescue_victim</Action></Selector></Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'search_for_food': 'Condition: Check for food sources in the environment. Returns True if a food source is detected, False otherwise.', 'get_food': 'Action: Move to the nearest food source and collect food. Returns True when food is successfully collected.', 'return_home': 'Action: Return back to home base with the collected food. Returns True when home base is reached.', 'share_food': 'Action: Share the collected food with other robots in the swarm. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Search for food, collect food, and share it with other robots in the swarm.
5.// OUTPUT:
<BehaviorTree><Sequence><Selector><Condition>search_for_food</Condition><Action>get_food</Action></Selector><Action>return_home</Action><Action>share_food</Action></Sequence></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'take_picture': 'Action: Capture a picture of the environment. Always returns True.', 'analyze_picture': 'Action: Analyze the captured picture to identify the location of specific objects. Returns True when the analysis is complete.', 'move_to_object': 'Action: Move to the nearest object identified in the analyzed picture. Returns True when the object is reached.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Take a picture, analyze it, and move to the nearest object.
6.// OUTPUT:
<BehaviorTree><Sequence><Action>take_picture</Action><Action>analyze_picture</Action><Action>move_to_object</Action></Sequence></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'detect_intruder': 'Condition: Check if an intruder is detected within the swarm. Returns True if an intruder is detected, False otherwise.', 'call_for_reinforcements': 'Action: Trigger a call for reinforcements to gather and defend against the intruder. Always returns True.', 'defend_against_intruder': 'Action: Engage in defensive actions against the detected intruder. Returns True when the intruder is successfully defended.', 'return_to_task': 'Action: Return back to the previous task after defending against the intruder. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: If an intruder is detected, call for reinforcements, defend against the intruder and return to the previous task.
7.// OUTPUT:
<BehaviorTree><Sequence><Condition>detect_intruder</Condition><Selector><Action>call_for_reinforcements</Action><Sequence><Action>defend_against_intruder</Action><Action>return_to_task</Action></Sequence></Selector></Sequence></BehaviorTree> 
###
4.// INSTRUCTIONS: Use only the following behaviors {'go_to_nest': 'Action: Move the robot back to the nest at a faster speed. Always returns True.', 'return_to_path': 'Action: Return to the previous path after reaching the end. Always returns True.', 'store_food': 'Action: Store food collected from the environment in the nest. Always returns True.', 'drop_food': "Action: Drop food currently being carried by the robot. Always returns True.", 'is_nest_full': 'Condition: Check if the nest is full and can no longer store food. Returns True if the nest is full, False otherwise.', 'is_food_detected': 'Condition: Check if there is food within 10 units. Returns True if there is food within 10 units of distance, False otherwise.', 'is_at_nest': 'Condition: Check if the robot has reached the nest. Returns True if the robot is in the nest, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Generate behavior tree for a robot to collect and store food in the nest
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_food_detected</Condition><Action>go_to_nest</Action></Sequence><Sequence><Action>return_to_path</Action><Selector><Sequence><Condition>is_nest_full</Condition><Action>drop_food</Action></Sequence><Action>store_food</Action></Selector></Sequence><Condition>is_at_nest</Condition></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'move_forward': 'Action: Move the robot one step forward in the current direction. Always returns True.', 'turn_left': 'Action: Turn the robot 90 degrees to the left. Always returns True.', 'turn_right': 'Action: Turn the robot 90 degrees to the right. Always returns True.', 'pick_up_object': 'Action: Pick up an object within 5 units. Returns True if object is picked up successfully, False otherwise.', 'release_object': "Action: Release the object currently being carried by the robot. Returns True if object is released successfully, False otherwise.", 'is_object_in_range': 'Condition: Check if there is an object within 5 units. Returns True if there is an object within 5 units of distance, False otherwise.', 'is_object_carried': 'Condition: Check if the robot is currently carrying an object. Returns True if an object is being carried, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Generate behavior tree for a robot to pick up and move an object to a specific location
5.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_object_in_range</Condition><Action>pick_up_object</Action></Sequence><Sequence><Selector><Sequence><Condition>is_object_carried</Condition><Action>move_forward</Action><Selector><Action>turn_left</Action><Action>turn_right</Action></Selector></Sequence><Condition>is_object_carried</Condition></Selector><Action>release_object</Action></Sequence></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'search_area': 'Action: Move the robot to search for a specific target within the area. Always returns True.', 'identify_target': 'Action: Identify and track the target based on sensor readings. Always returns True.', 'approach_target': 'Action: Move the robot closer to the target based on sensor readings. Always returns True.', 'is_target_visible': 'Condition: Check if the target is currently visible to the robot. Returns True if the target is visible, False otherwise.', 'is_target_identified': 'Condition: Check if the target has been successfully identified by the robot. Returns True if the target is identified, False otherwise.', 'is_target_reached': 'Condition: Check if the robot has reached the target. Returns True if the robot is within 10 units of the target, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Generate behavior tree for a robot to find and approach a specific target within an area
6.// OUTPUT:
<BehaviorTree><Sequence><Action>search_area</Action><Selector><Sequence><Condition>is_target_visible</Condition><Selector><Sequence><Condition>is_target_identified</Condition><Action>approach_target</Action></Sequence><Action>identify_target</Action></Selector></Sequence><Sequence><Condition>is_target_reached</Condition><Selector><Action>search_area</Action><Action>identify_target</Action></Selector></Sequence></Selector></Sequence></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'avoid_collision': 'Action: Avoid collisions with other robots in the swarm. Always returns True.', 'align_with_swarm': 'Action: Align the robot's direction with the swarm's average direction. Always returns True.', 'move_in_formation': 'Action: Move towards the center of the swarm, maintaining distance from other robots. Always returns True.', 'is_collision_detected': 'Condition: Check if a collision with another robot is imminent. Returns True if a collision is detected, False otherwise.', 'is_aligned': 'Condition: Check if the robot's direction is aligned with the swarm. Returns True if the direction is aligned, False otherwise.', 'is_in_formation': 'Condition: Check if the robot is in the correct position within the swarm formation. Returns True if the position is correct, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: Generate behavior tree for a robot to maintain its position and alignment within the swarm
7.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_collision_detected</Condition><Action>avoid_collision</Action></Sequence><Sequence><Condition>is_aligned</Condition><Action>move_in_formation</Action></Sequence><Condition>is_in_formation</Condition></Selector><Action>align_with_swarm</Action></BehaviorTree>                        
###
3.// INSTRUCTIONS: Use only the following behaviors {'find_target': 'Action: Use sensors to scan the environment and find the target. Always returns True.', 'move_to_target': 'Action: Move towards the target. Always returns True.', 'avoid_collision': 'Action: Use sensors to detect potential collisions and avoid them. Always returns True.', 'is_target_reached': 'Condition: Check if the target has been reached. Returns True if the target is within 5 units of distance, False otherwise.', 'is_path_clear': 'Condition: Check if the path to the target is clear. Returns True if no obstacles are detected along the way, False otherwise.', 'initiate_search': 'Action: Begin searching the environment for the target. Always returns True.', 'search_complete': 'Condition: Check if the entire search area has been searched. Returns True if all areas have been searched, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3.// USER COMMAND: Search for and reach a specific target in the environment
3.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Action>find_target</Action><Selector><Sequence><Condition>is_path_clear</Condition><Action>move_to_target</Action><Action>avoid_collision</Action></Sequence><Action>initiate_search</Action></Selector></Sequence><Condition>search_complete</Condition></Selector></Sequence></BehaviorTree>

###
4.// INSTRUCTIONS: Use only the following behaviors {'follow_path': 'Action: Follow a pre-defined path using sensors and GPS coordinates. Always returns True.', 'detect_obstacles': 'Action: Scan the environment for potential obstacles and report to the team. Always returns True.', 'halt_movement': 'Action: Stop all movement and wait for further instructions. Always returns True.', 'is_path_clear': 'Condition: Check if the path ahead is clear. Returns True if no obstacles are detected along the way, False otherwise.', 'is_goal_reached': 'Condition: Check if the destination has been reached. Returns True if the destination is within 10 units of distance, False otherwise.', 'is_obstacle_found': 'Condition: Check if an obstacle has been detected in the environment. Returns True if an obstacle is found, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Navigate a team of robots through a predefined path while reporting and avoiding obstacles
4.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Action>follow_path</Action><Selector><Sequence><Condition>is_path_clear</Condition><Action>detect_obstacles</Action></Sequence><Action>halt_movement</Action></Selector></Sequence><Condition>is_goal_reached</Condition><Condition>is_obstacle_found</Condition></Selector></Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'detect_terrain': 'Action: Use sensors to identify the type of terrain the robot is on. Always returns True.', 'react_to_terrain': 'Action: Adjust its movement and navigation tactics based on the terrain. Always returns True.', 'maintain_safe_distance': 'Action: Maintain a safe distance from other robots at all times using sensors and communication. Always returns True.', 'is_obstacle_detected': 'Condition: Check if an obstacle is detected in the environment. Returns True if an obstacle is detected, False otherwise.', 'is_target_reached': 'Condition: Check if the target destination has been reached. Returns True if the target is within 5 units of distance, False otherwise.', 'is_terrain_compromised': 'Condition: Check if the terrain is too dangerous to continue on. Returns True if the terrain is considered unsafe, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Navigate through various terrains while maintaining safe distance from other robots
5.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Action>detect_terrain</Action><Action>react_to_terrain</Action><Condition>is_terrain_compromised</Condition></Sequence><Condition>is_target_reached</Condition><Selector><Sequence><Condition>is_obstacle_detected</Condition><Action>maintain_safe_distance</Action></Sequence><Action>wander</Action></Selector></Sequence></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'detect_incoming_threat': 'Action: Use sensors to detect potential incoming threats and report to the rest of the team. Always returns True.', 'evade_threat': 'Action: Move away from the detected threat using evasive maneuvers. Always returns True.', 'protect_teammates': 'Action: Position itself between the detected threat and its teammates to protect them. Always returns True.', 'is_safe_distance_maintained': 'Condition: Check if the robot is maintaining a safe distance from the threat. Returns True if a safe distance is maintained, False otherwise.', 'is_threat_detected': 'Condition: Check if a potential threat has been detected. Returns True if a threat is detected, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Protect the team from incoming threats while maintaining a safe distance
6.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>is_threat_detected</Condition><Condition>is_safe_distance_maintained</Condition><Selector><Sequence><Condition>is_safe_distance_maintained</Condition><Action>protect_teammates</Action></Sequence><Action>wander</Action></Selector></Sequence><Condition>is_safe_distance_maintained</Condition><Action>detect_incoming_threat</Action><Action>evade_threat</Action></Selector></Sequence></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'identify_target': "Action: Use sensors to identify a specific target within the environment. Valid target options: 'food' or 'shelter'. Always returns True.", 'move_to_target': 'Action: Move towards the identified target. Always returns True.', 'gather_supplies': 'Action: Collect and gather necessary supplies from the environment. Returns True if all necessary supplies are gathered, False otherwise.', 'is_target_reached': 'Condition: Check if the target has been reached. Returns True if the target is within 10 units of distance, False otherwise.', 'is_supplies_gathered': 'Condition: Check if all necessary supplies have been gathered. Returns True if all supplies are collected, False otherwise.', 'return_to_base': 'Action: Return to designated base location. Always returns True.', 'is_base_reached': 'Condition: Check if the base has been reached. Returns True if the base is within 5 units of distance, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do###
3.// INSTRUCTIONS: Use only the following behaviors {'store_item': 'Action: Stores item into inventory. Returns True if successful, False otherwise.', 'get_item_from_container': 'Action: Gets item from a container. Returns True if successful, False otherwise.', 'is_inventory_full': 'Condition: Checks if inventory is full. Returns True if full, False otherwise.', 'is_container_empty': 'Condition: Checks if the container is empty. Returns True if empty, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3.// USER COMMAND: Fill inventory with items from containers until full.
3.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>is_container_empty</Condition><Action>get_item_from_container</Action><Condition>store_item</Condition></Sequence><Action>store_item</Action></Selector><Condition>is_inventory_full</Condition></Sequence></BehaviorTree>
###
4.// INSTRUCTIONS: Use only the following behaviors {'fire_laser': 'Action: Fires a laser at the specified target. Returns True if successful, False otherwise.', 'detect_enemy': 'Condition: Detects if an enemy is within range. Returns True if enemy is detected, False otherwise.', 'change_direction': 'Subtree node: Represents a behavior tree for changing robot's direction.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Fire laser at nearby enemy, if no enemy is detected, change direction and continue searching.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>detect_enemy</Condition><Action>fire_laser</Action></Sequence><Selector><Action>change_direction</Action><Action>continue_movement_agent</Action></Selector></Selector></BehaviorTree>
###
5.// INSTRUCTIONS: Use only the following behaviors {'form_circular_formation': 'Action: Form a circular formation with other swarm robots. Always returns True.', 'move_to_target': 'Action: Moves towards the specified target. Returns True if successful, False otherwise.', 'is_target_in_range': 'Condition: Checks if the target is within range of formation. Returns True if in range, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Coordinate with other swarm robots to surround the target, while staying in formation and within range of the target.
5.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_target_in_range</Condition><Action>move_to_target</Action></Sequence><Selector><Sequence><Condition>is_target_in_range</Condition><Action>form_circular_formation</Action></Sequence><Action>move_to_target</Action></Selector></BehaviorTree>
###
6.// INSTRUCTIONS: Use only the following behaviors {'harvest_resource': 'Action: Harvests a resource. Returns True if successful, False otherwise.', 'deposit_resource': 'Action: Deposits harvested resource. Returns True if successful, False otherwise.', 'is_resource_available': 'Condition: Checks if resource is available in the environment. Returns True if available, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Harvest resource and deposit it at the designated location, repeating until no resources are available.
6.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>is_resource_available</Condition><Action>harvest_resource</Action><Action>deposit_resource</Action></Sequence><Action>deposit_resource</Action></Selector><Action>wander</Action></Sequence></BehaviorTree>
###
7.// INSTRUCTIONS: Use only the following behaviors {'navigate_to_location': 'Action: Navigate to the specified location. Always returns True.', 'is_location_reached': 'Condition: Checks if the robot has reached the specified location. Returns True if reached, False otherwise.', 'detect_obstacles': 'Action: Detects obstacles in the environment and adjusts movement accordingly. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: Navigate to a specific location, accounting for obstacles in the environment. If location cannot be reached, stop and send an error message.
7.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>detect_obstacles</Condition><Action>navigate_to_location</Action></Sequence><Sequence><Condition>is_location_reached</Condition><Action>task_completed</Action></Sequence></Selector></BehaviorTree>
###
4.// INSTRUCTIONS: Use only the following behaviors {'calculate_remaining_distance': 'Action: Calculate the remaining distance to the target location. Always returns True.', 'travel_to_waypoint': 'Subtree node: Represents a behavior tree for traveling to a designated waypoint.', 'is_moving': 'Condition: Check if the agent is currently in motion. Returns True if the agent is moving, False otherwise.', 'is_arrived': 'Condition: Check if the agent has reached the target location. Returns True if the agent has arrived, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: If not moving, calculate remaining distance and travel to designated waypoint. Otherwise, check if the agent has arrived.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_moving</Condition><Selector><Sequence><Condition>is_arrived</Condition><Action>stop_movement</Action></Sequence><Selector><Sequence><Action>calculate_remaining_distance</Action><Action>travel_to_waypoint</Action></Sequence><Action>continue_movement</Action></Selector></Sequence></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'gather_resources': 'Action: Gather resources in the nearby area. Always returns True.', 'build_structure': 'Action: Build a designated structure using gathered resources. Always returns True.', 'upgrade_structure': 'Action: Upgrade a designated structure. Always returns True.', 'is_resource_available': 'Condition: Check if resources are available in the nearby area. Returns True if resources are available, False otherwise.', 'is_structure_ready': 'Condition: Check if the designated structure is ready to be upgraded. Returns True if the structure is ready, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: If resources are available, gather and build a designated structure. Otherwise, check if the structure is ready to be upgraded and upgrade it.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_resource_available</Condition><Sequence><Action>gather_resources</Action><Action>build_structure</Action></Sequence></Sequence><Sequence><Condition>is_structure_ready</Condition><Action>upgrade_structure</Action></Sequence></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'detect_landmark': 'Action: Use sensors to detect a specific landmark. Always returns True.', 'navigate_to_landmark': 'Subtree node: Represents a behavior tree for navigating to a designated landmark.', 'avoid_obstacles': 'Action: Utilize obstacle avoidance techniques to navigate around obstacles. Always returns True.', 'is_obstacle_ahead': 'Condition: Check if an obstacle is detected ahead. Returns True if an obstacle is detected, False otherwise.', 'is_landmark_detected': 'Condition: Check if the designated landmark is detected. Returns True if the landmark is detected, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: If an obstacle is detected, navigate around it. Otherwise, detect and navigate to a designated landmark.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_obstacle_ahead</Condition><Action>avoid_obstacles</Action></Sequence><Sequence><Condition>is_landmark_detected</Condition><Action>navigate_to_landmark</Action></Sequence></Selector></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'search_for_food': 'Subtree node: Represents a behavior tree for searching for food in the area.', 'eat_food': 'Action: Eat the located food. Always returns True.', 'communicate_with_swarm': 'Action: Communicate with other swarm robots to share information. Always returns True.', 'is_hungry': 'Condition: Check if the robot is currently hungry and needs to find food. Returns True if the robot is hungry, False otherwise.', 'is_food_found': 'Condition: Check if food has been located in the current area. Returns True if food is found, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: If hungry, search for food and eat it. Otherwise, communicate with the swarm to share information and aid in their tasks.
7.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_hungry</Condition><Selector><Sequence><Condition>is_food_found</Condition><Action>eat_food</Action></Sequence><Action>search_for_food</Action></Selector></Sequence><Action>communicate_with_swarm</Action></Selector></BehaviorTree> 
###
4.// INSTRUCTIONS: Use only the following behaviors {'random_movement': 'Action: Move to random locations within the environment. Always returns True.', 'is_location_visited': 'Condition: Check if the current location has been visited before. Returns True if the location has been visited, False otherwise.', 'collect_item': 'Action: Collect an item at the current location. Always returns True.', 'drop_item': 'Action: Drop the collected item at the designated location. Always returns True.', 'is_item_collected': 'Condition: Check if the item has been collected. Returns True if the item has been collected, False otherwise.', 'is_nest_reached': 'Condition: Check if the agent has reached the nest. Returns True if the agent has reached the nest, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: collect an item and take it to the nest. Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>is_item_collected</Condition> <Action>drop_item</Action> </Sequence> <Action>collect_item</Action> </Selector> <Selector> <Sequence> <Condition>is_nest_reached</Condition> <Action>drop_item</Action> </Sequence> <Action>random_movement</Action> </Selector> </Sequence> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'detect_citizen': 'Condition: Check if a citizen is detected within a 5km radius. Returns True if a citizen is detected, False otherwise.', 'move_to_location': "Action: Move to a specified location within the environment. Always returns True.", 'signal_approach': "Action: Signal to the detected citizen to approach. Always returns True.", 'signal_attention': "Action: Signal to the detected citizen for assistance. Always returns True.", 'is_citizen_approached': 'Condition: Check if the citizen has approached. Returns True if the citizen is within a certain distance, False otherwise.', 'is_task_completed': 'Condition: Check if the task is completed. Returns True if the task is completed, False otherwise.', 'return_to_base': 'Action: Return to base after completing the task. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task),
5.// USER COMMAND: detect and approach a citizen for assistance, signal to the citizen to approach, and return to base once the task is completed. Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>detect_citizen</Condition> <Action>move_to_location</Action> </Sequence> <Selector> <Sequence> <Condition>is_citizen_approached</Condition> <Action>signal_attention</Action> </Sequence> <Action>signal_approach</Action> </Selector> </Sequence> <Selector> <Sequence> <Condition>is_task_completed</Condition> <Action>return_to_base</Action> </Sequence> <Action>signal_attention</Action> </Selector> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'detect_obstacle': 'Condition: Check if an obstacle is detected in the environment. Returns True if an obstacle is detected, False otherwise.', 'evade_obstacle': 'Action: Move away from the detected obstacle. Always returns True.', 'maintain_distance': 'Action: Maintain a safe distance from nearby objects. Always returns True.', 'move_to_nest': "Action: Move towards the designated nest location. Always returns True.", 'is_nest_reached': 'Condition: Check if the agent has reached the nest. Returns True if the agent has reached the nest, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: detect any obstacles, maintain a safe distance, and move towards the designated nest location. Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>detect_obstacle</Condition> <Action>evade_obstacle</Action> </Sequence> <Action>maintain_distance</Action> </Selector> <Selector> <Sequence> <Condition>is_nest_reached</Condition> </Sequence> <Action>move_to_nest</Action> </Selector> </Sequence> </BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'skip_task': 'Condition: Check if the task should be skipped. Returns False if the task should be skipped, True otherwise.', 'perform_task': 'Action: Perform the given task. Always returns True.', 'repeat_task': 'Action: Repeats the given task. Returns True if the task is completed, False if the task is still in progress.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: if the task requires skipping, repeat the task until it is completed. Output only the XML behavior tree without extra text.
7.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>skip_task</Condition> <Sequence> <Action>repeat_task</Action> <Action>perform_task</Action> </Sequence> </Sequence> </Selector> </Sequence> </BehaviorTree> 
###
4.// INSTRUCTIONS: Use only the following behaviors {'wander': 'Action: Move randomly within the environment. Always returns True.', 'find_food': 'Action: Search for nearby food sources. Returns True if food is found, False otherwise.', 'harvest_food': 'Action: Harvest nearby food sources and add them to the agent's inventory. Always returns True.', 'eat': 'Action: Consumes one unit of food from the agent's inventory. Returns True if food is successfully eaten, False otherwise.', 'is_inventory_full': 'Condition: Check if the agent's inventory is full. Returns True if the inventory is full, False otherwise.', 'is_hungry': 'Condition: Check if the agent is hungry and needs to eat. Returns True if the agent's hunger level is above a threshold, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Build a behavior tree for a foraging agent to search for and eat food in its surroundings.
4.// OUTPUT:
<BehaviorTree><Selector><Condition>is_hungry</Condition><Sequence><Action>find_food</Action><Sequence><Condition>is_inventory_full</Condition><Action>wander</Action></Sequence></Sequence><Sequence><Action>harvest_food</Action><Action>eat</Action></Sequence><Action>wander</Action></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'move_to_target': 'Action: Move the robot to the specified target location. Returns True if the target is reached, False otherwise.', 'rotate_to_target': 'Action: Rotate the robot to face the specified target. Returns True if the target direction is reached, False otherwise.', 'collect_resource': 'Action: Collect resource from the current location and add it to the robot's inventory. Always returns True.', 'return_to_base': 'Action: Move the robot back to the base location. Returns True if the robot reaches the base, False otherwise.', 'is_resource_detected': 'Condition: Check for nearby resources. Returns True if a resource is detected, False otherwise.', 'is_resource_full': 'Condition: Check if the robot's inventory is full. Returns True if the inventory is full, False otherwise.', 'is_at_base': 'Condition: Check if the robot is currently at the base location. Returns True if the robot is at the base, False otherwise.', 'find_nearest_resource': 'Action: Search for the nearest resource and set it as the target location. Returns True if a resource is found and the target is set, False otherwise.', 'find_next_target': 'Event: Triggers when the current target is reached or if there is no target currently set. Returns True if a new target is set, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Gather resources and return them to the base.
5.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_resource_full</Condition><Action>return_to_base</Action></Sequence><Sequence><Condition>is_resource_detected</Condition><Action>move_to_target</Action><Action>collect_resource</Action></Sequence><Selector><Condition>is_at_base</Condition><Action>find_nearest_resource</Action></Selector><Trigger>find_next_target</Trigger></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'explore_area': 'Action: Move to a new unexplored area. Returns True if a new area is found, False otherwise.', 'scan_surroundings': 'Action: Use sensors to scan the current area for any dangers or obstacles. Returns True if no dangers are detected, False otherwise.', 'avoid_dangers': 'Action: If dangers are detected, move away from them to a safe location. Returns True if dangers were avoided, False otherwise.', 'mark_visited': 'Action: Mark the current area as visited. Always returns True.', 'is_obstacle_detected': 'Condition: Check if any obstacles are detected in the current area. Returns True if an obstacle is detected, False otherwise.', 'is_danger_detected': 'Condition: Check if any dangers are detected in the current area. Returns True if a danger is detected, False otherwise.', 'is_area_visited': 'Condition: Check if the current area has already been visited. Returns True if the area has been visited, False otherwise.', 'is_search_complete': 'Condition: Check if the entire search area has been fully explored. Returns True if the search is complete, False otherwise.', 'is_idle': 'Condition: Check if the robot is idle and has no pending actions. Returns True if the robot is idle, False otherwise.', 'reset_state': 'Action: Reset the robot's state to prepare for a new exploration. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Explore and map an unknown environment, avoiding dangers and obstacles.
6.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_search_complete</Condition><Action>reset_state</Action></Sequence><Selector><Condition>is_idle</Condition><Sequence><Action>explore_area</Action><Sequence><Condition>is_obstacle_detected</Condition><Action>avoid_dangers</Action></Sequence><Action>scan_surroundings</Action></Sequence></Selector><Selector><Condition>is_danger_detected</Condition><Sequence><Condition>is_obstacle_detected</Condition><Action>avoid_dangers</Action></Sequence></Selector><Sequence><Condition>is_obstacle_detected</Condition><Action>mark_visited</Action></Sequence><Condition>is_area_visited</Condition></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'search_for_enemy': 'Action: Search for enemy units in the vicinity. Returns True if an enemy is detected, False otherwise.', 'approach_enemy': 'Action: Move towards the nearest enemy unit. Returns True if the enemy is reached, False otherwise.', 'attack_enemy': 'Action: Attack the targeted enemy unit. Always returns True.', 'is_enemy_detected': 'Condition: Check if an enemy unit is detected. Returns True if an enemy is detected, False otherwise.', 'is_enemy_in_range': 'Condition: Check if the enemy unit is within the attack range. Returns True if the enemy is within range, False otherwise.', 'is_weapon_ready': 'Condition: Check if the weapon is ready to fire. Returns True if the weapon has reloaded and is ready to fire, False otherwise.', 'reload_weapon': 'Action: Reload the weapon. Returns True if the weapon is successfully reloaded, False otherwise.', 'is_health_low': 'Condition: Check if the agent's health is below a certain threshold. Returns True if health is low, False otherwise.', 'heal': 'Action: Use a healing item or ability to restore health. Returns True if the healing is successful, False otherwise.', 'find_healing_item': 'Action: Search for and collect a healing 
###
4.// INSTRUCTIONS: Use only the following behaviors {'avoid_collision': 'Action: Continuously scan for nearby agents and avoid collision. Always returns True.', 'move_towards_closest_agent': 'Action: Move towards the closest agent identified. Returns True when the agent is in reach, False otherwise.', 'is_nearby_agents_detected': 'Condition: Checks if nearby agents are detected. Returns True if agents are detected, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Move towards the closest agent while avoiding collisions with other agents.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>move_towards_closest_agent</Action></Sequence><Sequence><Action>avoid_collision</Action><Sequence><Condition>is_nearby_agents_detected</Condition><Selector><Sequence><Action>move_towards_closest_agent</Action></Sequence></Selector></Sequence></Selector></BehaviorTree>
 
###
5.// INSTRUCTIONS: Use only the following behaviors {'listen_to_sounds': 'Action: Listen for any sounds detected in the environment. Always returns True.', 'follow_sound_source': 'Action: Move towards the source of the detected sound. Returns True when the source is reached, False otherwise.', 'is_sound_detected': 'Condition: Checks if sounds are currently detected. Returns True if sounds are detected, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Follow the source of a detected sound.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>follow_sound_source</Action></Sequence><Sequence><Action>listen_to_sounds</Action><Sequence><Condition>is_sound_detected</Condition><Selector><Sequence><Action>follow_sound_source</Action></Sequence></Selector></Sequence></Selector></BehaviorTree>
 
###
6.// INSTRUCTIONS: Use only the following behaviors {'random_patrol': 'Action: Choose a random location and move towards it. Returns True when the destination is reached, False otherwise.', 'explore_environment': 'Action: Scan the environment for unknown areas and explore them. Always returns True.', 'detect_food': 'Action: Continuously scan the environment for sources of food. Always returns True.', 'gather_food': 'Action: Move towards and gather the detected food source. Returns True when food is gathered, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Explore the environment while actively searching for food sources and gathering them
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>explore_environment</Action></Sequence><Sequence><Action>detect_food</Action><Sequence><Condition>is_food_detected</Condition><Action>gather_food</Action></Sequence></Selector></Sequence></BehaviorTree>
 
###
7.// INSTRUCTIONS: Use only the following behaviors {'move_towards_extinguisher': 'Action: Move towards the nearest fire extinguisher identified. Returns True when the extinguisher is reached, False otherwise.', 'extinguish_fire': 'Action: Use the fire extinguisher to put out the fire. Always returns True.', 'is_fire_detected': 'Condition: Checks if fire is currently detected. Returns True if fire is detected, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: Move towards a fire and extinguish it.
7.// OUTPUT:
<BehaviorTree><Sequence><Action>move_towards_extinguisher</Action></Sequence><Selector><Sequence><Action>extinguish_fire</Action></Sequence><Sequence><Condition>is_fire_detected</Condition><Action>move_towards_extinguisher</Action></Sequence></Sequence></BehaviorTree> 
###
4.// INSTRUCTIONS: Use only the following behaviors {'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_blue': "Action: Change agent's color to blue. Always returns True.", 'change_color_to_red': "Action: Change agent's color to red. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_red_detected': 'Condition: Check if red object is within sight. Returns True if a red object is detected, False otherwise.', 'is_blue_detected': 'Condition: Check if blue object is within sight. Returns True if a blue object is detected, False otherwise.', 'move_to_blue': 'Action: Move towards the blue object. Returns True if successfully moved, False otherwise.', 'move_to_red':'Action: Move towards the red object. Returns True if successfully moved, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Detect and avoid obstacles, find the red object, and move towards it. If not detected, wander around and seek out the blue object.'Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>is_obstacle_detected</Condition> <Action>avoid_obstacle</Action> </Sequence> <Selector> <Sequence> <Condition>is_red_detected</Condition> <Action>move_to_red</Action> </Sequence> <Sequence> <Not> <Condition>is_red_detected</Condition> </Not> <Action>wander</Action> <Condition>is_blue_detected</Condition> <Action>move_to_blue</Action> </Sequence> </Selector> </Selector> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_blue': "Action: Change agent's color to blue. Always returns True.", 'change_color_to_red': "Action: Change agent's color to red. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_triangle': 'Action: Form a triangle with two other agents. Always returns True.', 'is_line_formed': 'Condition: Check if a triangle is formed. Returns True if a triangle is formed with the two other agents, False otherwise.', 'stop_movement_agent': "Action: Stop agent's movement. Always returns True.", 'wait_timer': 'Condition: Wait for a set amount of time. Returns True after the set time, False otherwise.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Form a triangle with two other agents, wait for 3 seconds, then stop all movement and change color to red.'Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>is_line_formed</Condition> <Action>form_triangle</Action> <Sequence> <Condition>wait_timer</Condition> <Action>stop_movement_agent</Action> </Sequence> <Action>wait_timer</Action> <Action>change_color_to_red</Action> </Sequence> <Selector> <Sequence> <Not> <Condition>is_line_formed</Condition> </Not> <Action>wander</Action> </Sequence> </Selector> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'follow_path': 'Action: Follow a predefined path. Returns True if successfully followed path, False otherwise.', 'avoid_collision': 'Action: Avoid collisions with other robots. Always returns True.', 'detect_edge': 'Condition: Check for the edge of the environment. Returns True if near the edge, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 5 units. Returns True if the target is within 5 units of distance, False otherwise.', 'random_movement': 'Action: Move randomly within the environment. Always returns True.', 'reset_path': 'Action: Reset the predefined path. Returns True if successfully reset, False otherwise.', 'stop_movement_agent': "Action: Stop agent's movement. Always returns True.", 'wait_timer': 'Condition: Wait for a set amount of time. Returns True after the set time, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Follow a predefined path, avoid collisions, and reset path if target is reached. If not, wait for 10 seconds then stop movement.'Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>follow_path</Condition> <Sequence> <Condition>is_target_reached</Condition> <Action>reset_path</Action> </Sequence> <Action>avoid_collision</Action> </Sequence> <Selector> <Sequence> <Not> <Condition>follow_path</Condition> </Not> <Action>random_movement</Action> </Sequence> <Condition>wait_timer</Condition> <Action>stop_movement_agent</Action> </Selector> </Sequence> </BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'find_neighbors': 'Action: Find and communicate with nearest neighbors. Returns True if successfully found and communicated, False otherwise.', 'follow_path': 'Action: Follow a predefined path. Returns True if successfully followed path, False otherwise.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_neighbor_detected': 'Condition: Check if a neighbor is within communication range. Returns True if a neighbor is detected, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do
###
3.// INSTRUCTIONS: Use only the following behaviors {'move_to_target': 'Action: Move the robot towards a specified target location. Always returns True.', 'collect_resource': 'Action: Collect a resource present at the current location. Always returns True.', 'is_resource_available': 'Condition: Check if a resource is available at the current location. Returns True if a resource is present, False otherwise.', 'is_robot_loaded': 'Condition: Check if the robot is fully loaded with resources. Returns True if robot has reached maximum capacity, False otherwise.', 'unload_resources': 'Action: Unload all collected resources at a specific location. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3.// USER COMMAND: Generate behavior tree for a robot to collect and deliver resources
3.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_resource_available</Condition><Selector><Sequence><Action>collect_resource</Action><Condition>is_robot_loaded</Condition><Action>unload_resources</Action><Action>wait</Action></Sequence><Action>move_to_target</Action></Selector></Sequence></BehaviorTree>

###
4.// INSTRUCTIONS: Use only the following behaviors {'start_generator': 'Action: Start the power generator. Always returns True.', 'monitor_battery_level': 'Action: Monitor the battery level of the robot. Always returns True.', 'is_battery_low': 'Condition: Check if the battery level is below 20%. Returns True if battery level is below 20%, False otherwise.', 'is_generator_running': 'Condition: Check if the generator is running. Returns True if the generator is on, False otherwise.', 'recharge_battery': 'Action: Recharge the battery of the robot. Always returns True.', 'wait_for_recharge': 'Action: Wait for the battery to recharge before resuming tasks. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Generate behavior tree for a robot to manage its battery life
4.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_battery_low</Condition><Selector><Sequence><Action>start_generator</Action><Condition>is_generator_running</Condition><Action>monitor_battery_level</Action><Selector><Action>wait_for_recharge</Action><Action>recharge_battery</Action></Selector></Sequence><Action>monitor_battery_level</Action></Selector></Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'look_left': 'Action: Rotate the robot's camera to look left. Always returns True.', 'look_for_signs': 'Action: Scan the environment for any signs using the camera. Always returns True.', 'search_for_clues': 'Action: Search the area for any potential clues using sensors. Always returns True.', 'is_clue_found': 'Condition: Check if a clue has been detected. Returns True if a clue has been found, False otherwise.', 'is_target_sign': 'Condition: Check if a target sign has been detected. Returns True if a target sign is found, False otherwise.', 'mark_target_area': 'Action: Mark the area where the target sign is detected. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Generate behavior tree for a robot to search for a target sign and mark its location
5.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_target_sign</Condition><Selector><Sequence><Action>look_left</Action><Action>look_for_signs</Action><Selector><Condition>is_clue_found</Condition><Action>mark_target_area</Action></Selector></Sequence><Action>search_for_clues</Action></Selector></Sequence></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'move_to_next_checkpoint': 'Action: Move the robot to the next checkpoint. Always returns True.', 'check_sensors': 'Action: Check the sensors for any anomalies. Always returns True.', 'fix_sensor_issue': 'Action: Fix any sensor issues. Always returns True.', 'is_checkpoint_reached': 'Condition: Check if the robot has reached the checkpoint. Returns True if checkpoint is reached, False otherwise.', 'is_sensor_working': 'Condition: Check if the sensors are working properly. Returns True if all sensors are functional, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Generate behavior tree for a robot to complete a sensor-checking checkpoint
6.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_checkpoint_reached</Condition><Selector><Sequence><Action>move_to_next_checkpoint</Action><Action>check_sensors</Action><Selector><Condition>is_sensor_working</Condition><Action>wait</Action></Selector></Sequence><Action>fix_sensor_issue</Action></Selector></Sequence></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'identify_dangerous_area': 'Action: Use sensors to identify any potentially dangerous areas. Always returns True.', 'avoid_danger': 'Action: Avoid the identified dangerous area. Always returns True.', 'is_robot_in_danger': 'Condition: Check if the robot is currently in a dangerous area. Returns True if in danger, False otherwise.', 'move_to_safe_location': 'Action: Move the robot to a safe location. Always returns True.', 'is_safe_location_reached': 'Condition: Check if the safe location has been reached. Returns True if safe location is reached, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: Generate behavior tree for a robot to identify and avoid danger
7.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_robot_in_danger</Condition><Selector><Sequence><Action>identify_dangerous_area</Action><Action>avoid_danger</Action><Selector><Condition>is_safe_location_reached</Condition><Action>wait</Action></Selector></Sequence><Action>move_to_safe_location</Action></Selector></Sequence></BehaviorTree> 
###
4.// INSTRUCTIONS: Use only the following behaviors {'forage': 'Action: Forage for resources. Always returns True.', 'return_to_nest': 'Action: Return to the nest. Always returns True.', 'get_resource_distance': 'Function: Calculates the distance to the nearest resource. Returns a distance value in units.', 'get_nest_distance': 'Function: Calculates the distance to the nest. Returns a distance value in units.', 'travel_to_resource': 'Action: Travel to the nearest resource. Always returns True.', 'travel_to_nest': 'Action: Travel to the nest. Always returns True.', 'drop_resource': 'Action: Drop any carried resources. Always returns True.', 'pick_resource': 'Action: Pick up a nearby resource. Always returns True.', 'is_resource_nearby': 'Condition: Check if a resource is within a certain distance. Returns True if a resource is within the specified distance, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Travel to the nearest resource, pick it up, and return to the nest to drop it off.
4.// OUTPUT:
<BehaviorTree><Sequence><Action>travel_to_resource</Action><Sequence><Condition>is_resource_nearby</Condition><Action>pick_resource</Action><Sequence><Action>travel_to_nest</Action><Action>drop_resource</Action></Sequence></Sequence></Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'patrol': 'Action: Patrol the specified area. Always returns True.', 'move_to_position': 'Action: Move to the specified position. Always returns True.', 'scan_area': 'Action: Scan the specified area for enemies. Always returns True.', 'is_enemy_nearby': 'Condition: Check if an enemy is within a specified range. Returns True if an enemy is within the range, False otherwise.', 'check_ammo': 'Action: Check current ammo status. Always returns True.', 'reload': 'Action: Reload weapon. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Patrol the specified area, checking for enemies and reloading if necessary.
5.// OUTPUT:
<BehaviorTree><Sequence><Action>patrol</Action><Sequence><Action>check_ammo</Action><Condition>is_enemy_nearby</Condition><Action>reload</Action></Sequence></Sequence></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'explore_random': 'Action: Explore a random area. Always returns True.', 'follow_path': 'Action: Follow a specified path. Always returns True.', 'scan_area': 'Action: Scan the specified area for resources. Always returns True.', 'is_resource_nearby': 'Condition: Check if a resource is within a specified range. Returns True if a resource is within the range, False otherwise.', 'gather_resource': 'Action: Gather the nearest resource. Always returns True.', 'deposit_resource': 'Action: Deposit any carried resources. Always returns True.', 'is_path_clear': 'Condition: Check if the specified path is clear. Returns True if the path is clear, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Follow a specified path, scanning for nearby resources and gathering them if found.
6.// OUTPUT:
<BehaviorTree><Sequence><Action>follow_path</Action><Sequence><Condition>is_path_clear</Condition><Action>scan_area</Action><Action>gather_resource</Action></Sequence></Sequence></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'attack_target': 'Action: Attack the specified target. Always returns True.', 'is_target_within_range': 'Condition: Check if the specified target is within attack range. Returns True if target is within range, False otherwise.', 'move_to_target': 'Action: Move towards the specified target. Always returns True.', 'wait': 'Action: Wait for a specific amount of time. Always returns True.', 'is_target_reached': 'Condition: Check if the specified target has been reached. Returns True if the target has been reached, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: Move towards the specified target, waiting if it is not yet within range, and attacking once it is in range.
7.// OUTPUT:
<BehaviorTree><Sequence><Action>move_to_target</Action><Sequence><Condition>is_target_reached</Condition><Action>wait</Action><Condition>is_target_within_range</Condition><Action>attack_target</Action></Sequence></Sequence></BehaviorTree>
###
4.// INSTRUCTIONS: Create a behavior tree with the following behaviors {'align_with_target': 'Action: Align with the target. Always returns True.', 'is_target_reached': 'Condition: Check if target is within 5 units. Returns True if the target is within 5 units of distance, False otherwise.', 'move_to_target': 'Action: Move towards the target. Always returns True.', 'scout_area': 'Subtree node: Represent a behavior tree for scouting the designated area.', 'track_enemy': 'Subtree node: Represent a behavior tree for tracking enemy agents.'},' to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Align with and move towards the target while scouting the area and tracking enemy agents.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>align_with_target</Action><Action>move_to_target</Action></Sequence><Sequence><Subtree>scout_area</Subtree><Subtree>track_enemy</Subtree></Sequence></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Provide a behavior tree to control a swarm of robots in a cleaning task. Use the following behaviors {'move_forward': 'Action: Move the agent one step forward in the current direction. Always returns True.', 'scan_environment': 'Action: Scan the environment for debris. Always returns True.', 'collect_debris_in_sack': 'Action: Collect debris and store it in the sack. Always returns True.', 'unload_sack': 'Action: Unload debris from the sack. Always returns True.', 'is_sack_full': 'Condition: Checks if the sack is full. Returns True if the sack is full, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Scan the environment for debris and collect it. If the sack is full, unload the debris before resuming collection.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>scan_environment</Action><Action>collect_debris_in_sack</Action></Sequence><Condition>is_sack_full</Condition><Action>unload_sack</Action></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Create a behavior tree for a swarm of robots to coordinate in a search and rescue mission. Use the following behaviors {'search_area': 'Subtree node: Represent a behavior tree for searching designated area.', 'share_location': 'Action: Share location information with other agents. Always returns True.', 'move_to_location': 'Action: Move towards the designated location. Always returns True.', 'notify_rescue': 'Action: Notify rescue team when target is found. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Coordinate with other robots to search the designated area and notify the rescue team when the target is found.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Subtree>search_area</Subtree><Action>share_location</Action></Sequence><Sequence><Action>move_to_location</Action><Action>notify_rescue</Action></Sequence></Selector></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'detect_intruders': 'Action: Detect intruders in the designated area. Always returns True.', 'defend_camp': 'Action: Defend the camp against intruders. Always returns True.', 'is_camp_attacked': 'Condition: Checks if the camp is under attack. Returns True if camp is being attacked, False otherwise.', 'receive_reinforcements': 'Action: Signal for reinforcements to arrive. Always returns True.', 'is_reinforcements_arrived': 'Condition: Checks if reinforcements have arrived. Returns True if reinforcements have arrived, False otherwise.', 'retreat': 'Action: Retreat from the current location. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: Detect and defend against intruders. If the camp is under attack, signal for reinforcements and retreat to safety once reinforcements have arrived.
7.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>detect_intruders</Action><Action>defend_camp</Action></Sequence><Condition>is_camp_attacked</Condition><Action>receive_reinforcements</Action><Condition>is_reinforcements_arrived</Condition><Action>retreat</Action></Selector></BehaviorTree> 
###
3.// INSTRUCTIONS: Use only the following behaviors {'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_blue': "Action: Change agent's color to blue. Always returns True.", 'distance_travelled': 'Condition: Check the distance travelled by the agent in meters. Returns True if distance travelled is greater than or equal to the specified value, False otherwise.', 'is_at_checkpoint': 'Condition: Check if agent has reached the designated checkpoint. Returns True if at the checkpoint, False otherwise.', 'move_forward': 'Action: Move forward for 2 meters. Always returns True.', 'record_video': 'Action: Record a video for 30 seconds. Always returns True.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'turn_left': 'Action: Turn the robot 90 degrees to the left. Always returns True.', 'turn_right': 'Action: Turn the robot 90 degrees to the right. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3.// USER COMMAND: generate behavior tree to 'Record a video while completing an obstacle course, change color to blue when reaching checkpoint, then continue to move forward'. Output only the XML behavior tree without extra text.
3.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>distance_travelled: 2</Condition> <Action>turn_left</Action> </Sequence> <Action>move_forward</Action> </Selector> <Action>record_video</Action> </Sequence> <Selector> <Sequence> <Condition>is_at_checkpoint</Condition> <Action>change_color_to_blue</Action> </Sequence> <Action>move_forward</Action> </Selector> <Action>task_completed</Action> </BehaviorTree>

###
4.// INSTRUCTIONS: Use only the following behaviors {'calculate_distance_to_goal': 'Condition: Calculate the distance to the goal. Returns True if distance is less than the specified value, False otherwise.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'navigate_to_target': 'Action: Move towards the target. Always returns True.', 'random_movement': 'Action: Move randomly within a given radius. Always returns True.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'turn_left': 'Action: Turn the robot 90 degrees to the left. Always returns True.', 'turn_right': 'Action: Turn the robot 90 degrees to the right. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Navigate to the target with obstacle avoidance, change direction if goal is within 10 units'. Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree> <Sequence> <Action>random_movement</Action> <Selector> <Sequence> <Condition>is_obstacle_detected</Condition> <Action>navigate_to_target</Action> </Sequence> <Action>turn_left</Action> </Selector> <Selector> <Sequence> <Condition>calculate_distance_to_goal: 10</Condition> <Action>navigate_to_target</Action> </Sequence> <Action>turn_right</Action> </Selector> <Action>task_completed</Action> </Sequence> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'go_to_random_location': 'Action: Move to a random location within a given range. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'move_to_nest': 'Action: Move towards the nest. Always returns True.', 'record_data': 'Action: Record data for 1 minute. Always returns True.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'update_location': 'Action: Update the agent's current location. Always returns True.', 'wait_for_target': 'Condition: Wait for target to come into range. Returns True if target is detected within 1 minute, False otherwise.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Explore the environment, record data periodically, and return to nest if target is detected within 1 minute'. Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree> <Sequence> <Action>wander</Action> <Selector> <Sequence> <Action>update_location</Action> <Action>record_data</Action> </Sequence> <Action>go_to_random_location</Action> </Selector> <Selector> <Sequence> <Condition>wait_for_target</Condition> <Action>move_to_nest</Action> </Sequence> <Action>task_completed</Action> </Selector> <Action>task_completed</Action> </BehaviorTree>
 
###
6.// INSTRUCTIONS: Use only the following behaviors {'find_target': 'Action: Search for the target within a given radius. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'move_to_nest': 'Action: Move towards the nest. Always returns True.', 'navigate_to_target': 'Action: Move towards the target. Always returns True.', 'record_video': 'Action: Record a video for 1 minute. Always returns True.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'update_location': 'Action: Update the agent's current location. Always returns True.', 'wait_for_target': 'Condition: Wait for target to come into range. Returns True if target is detected within 1 minute, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Record a video while navigating to and searching for the target, 
###
4.// INSTRUCTIONS: Use only the following behaviors {'gather_resources': 'Action: Gather resources from environment. Always returns True.', 'build_structure': 'Action: Build a structure using the gathered resources. Always returns True.', 'collect_tools': 'Action: Collect advanced tools for construction. Always returns True.', 'is_resource_available': 'Condition: Check if there are resources available in the environment. Returns True if resources are present, False otherwise.', 'is_structure_complete': 'Condition: Check if the structure is complete. Returns True if the structure is fully constructed, False otherwise.', 'is_enemy_detected': 'Condition: Check for enemies nearby. Returns True if an enemy is detected, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Build a resource-gathering and defensive outpost, first gathering resources, then building a structure, and finally setting up defenses.
4.// OUTPUT:
<BehaviorTree><Sequence><Selector><Condition>is_resource_available</Condition><Selector><Sequence><Condition>is_enemy_detected</Condition><Action>collect_tools</Action><Action>gather_resources</Action><Action>build_structure</Action></Sequence><Action>gather_resources</Action></Selector></Sequence><Sequence><Condition>is_structure_complete</Condition><Action>set_up_defenses</Action></Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'explore': 'Action: Explore various areas of interest in the environment. Returns True after covering each area.', 'find_exit': 'Action: Locate and reach the exit point of the environment. Returns True when the exit is reached.', 'is_interesting_area': "Condition: Check if the current area has interesting objects or features. Returns True if the area is worth exploring, False otherwise.", 'is_exit_found': 'Condition: Check if the exit point has been located. Returns True if the exit has been found, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Explore the environment, focusing on interesting areas and locating the exit point.
5.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>is_interesting_area</Condition><Action>explore</Action></Sequence><Action>find_exit</Action></Selector></Sequence></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'wait_for_order': 'Condition: Check if there is an order to be executed. Returns True if there is an order, False otherwise.', 'move_to_destination': 'Action: Move to the designated destination. Always returns True.', 'is_destination_unreachable': 'Condition: Check if the designated destination is unreachable. Returns True if destination is unreachable, False otherwise.', 'report_error': 'Action: Report an error to the commander. Always returns True.', 'scan_for_info': 'Action: Scan the environment for any new information or changes. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Receive and execute orders from the commander, reporting any errors encountered and gathering information from the environment.
6.// OUTPUT:
<BehaviorTree><Sequence><Selector><Condition>wait_for_order</Condition><Selector><Condition>is_destination_unreachable</Condition><Action>report_error</Action><Action>move_to_destination</Action></Selector></Selector><Action>scan_for_info</Action></Sequence></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'recharge_battery': 'Action: Recharge the battery to full capacity. Always returns True.', 'is_battery_low': 'Condition: Check if the battery charge is below a certain threshold. Returns True if battery is low, False otherwise.', 'check_time': 'Function: Check the current time and return the appropriate action based on the time of day. Returns 'recharge_battery' during the day and 'wander' at night.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: Automatically manage battery usage, recharging when necessary and being active during the day but idle at night.
7.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_battery_low</Condition><Action>recharge_battery</Action></Sequence><Action>check_time</Action></Selector></BehaviorTree>
###
3.// INSTRUCTIONS: Use only the following behaviors {'search_for_food': 'Subtree node: Represents a behavior tree for finding food.', 'eat_food': 'Action: Eat food once it is found. Always returns True.', 'is_hungry': 'Condition: Checks if the robot is hungry. Returns True if hungry, False otherwise.', 'is_food_available': 'Condition: Checks if there is food available in the environment. Returns True if food is available, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3.// USER COMMAND: If hungry, search for food and eat. Otherwise, continue performing other tasks.
3.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_hungry</Condition><Sequence><Condition>is_food_available</Condition><Action>search_for_food</Action><Action>eat_food</Action></Sequence></Sequence></Selector></BehaviorTree>

###
4.// INSTRUCTIONS: Use only the following behaviors {'detect_obstacles': 'Subtree node: Represents a behavior tree for detecting and avoiding obstacles.', 'navigate_to_goal': 'Action: Moves the robot towards the given goal location. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Navigate through a maze while avoiding obstacles.
4.// OUTPUT:
<BehaviorTree><Sequence><Action>navigate_to_goal</Action><Action>detect_obstacles</Action></Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'follow_leader': 'Action: Follow the leader robot using sensors. Always returns True.', 'collect_resource': 'Action: Collect resources on the ground. Returns True if resources are successfully collected, False otherwise.', 'return_to_base': 'Action: Return to the base with collected resources. Returns True if successfully returned, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Instruct a group of robots to follow the leader, collect resources, and return to base for a colony building task.
5.// OUTPUT:
<BehaviorTree><Sequence><Action>follow_leader</Action><Selector><Sequence><Action>collect_resource</Action><Selector><Condition>is_resource_available</Condition><Action>return_to_base</Action></Selector></Sequence><Action>return_to_base</Action></Selector></Sequence></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'identify_intruders': 'Subtree node: Represents a behavior tree for identifying potential intruders.', 'send_alert': 'Action: Send an alert to other robots or humans. Always returns True.', 'is_intruder_detected': 'Condition: Checks if an intruder has been detected. Returns True if an intruder is detected, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Monitor an area and send an alert if an intruder is detected.
6.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_intruder_detected</Condition><Action>send_alert</Action><Sequence><Action>identify_intruders</Action><Selector><Condition>is_intruder_detected</Condition><Sequence><Action>send_alert</Action><Action>identify_intruders</Action></Sequence></Selector></Sequence></Sequence></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'defend_base': 'Subtree node: Represents a behavior tree for defending the base from enemies.', 'move_to_location': 'Action: Move the robot to specific coordinates. Always returns True.', 'is_enemy_nearby': 'Condition: Checks if there are enemies nearby. Returns True if enemies are detected, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: Defend the base from enemies by moving to strategic locations and attacking.
7.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_enemy_nearby</Condition><Action>defend_base</Action></Sequence><Action>move_to_location</Action></Selector></BehaviorTree> 
###
3.// INSTRUCTIONS: Use only the following behaviors {'gather_resources': 'Action: Gather resources from the environment and store them in the robot. Always returns True.', 'build_structure': 'Action: Construct a structure using the resources gathered. Always returns True.', 'is_resource_depleted': 'Condition: Check if the resources in the environment have been depleted. Returns True if resources are depleted, False otherwise.', 'is_structure_complete': 'Condition: Check if the structure has been completed. Returns True if the structure is complete, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3.// USER COMMAND: Generate behavior tree for a robot to gather resources and build a shelter in a post-disaster environment
3.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_resource_depleted</Condition><Selector><Sequence><Action>gather_resources</Action><Selector><Action>build_structure</Action><Action>wait</Action></Selector></Sequence><Action>wait</Action></Selector><Condition>is_structure_complete</Condition></Sequence></BehaviorTree>

###
4.// INSTRUCTIONS: Use only the following behaviors {'navigate_to_checkpoint': 'Action: Follow the designated path to the next checkpoint. Returns True once the checkpoint is reached.', 'detour': 'Action: Take a detour to avoid obstacles or hazards. Returns True when the detour is successfully completed.', 'check_battery_level': 'Condition: Check the battery level of the robot. Returns True if the battery level is below a certain threshold, False otherwise.', 'is_checkpoint_reached': 'Condition: Check if the robot has reached the designated checkpoint. Returns True if the checkpoint is reached, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Generate behavior tree for a robot to navigate through a challenging terrain and reach a designated checkpoint
4.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_checkpoint_reached</Condition><Selector><Selector><Sequence><Action>navigate_to_checkpoint</Action><Action>wait</Action></Sequence><Action>detour</Action></Selector><Condition>check_battery_level</Condition></Selector></Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'hover': 'Action: Hover in place and maintain stability in the air. Returns True until the command to stop hovering is given.', 'check_battery_level': 'Condition: Check the battery level of the robot. Returns True if the battery level is below a certain threshold, False otherwise.', 'is_out_of_range': 'Condition: Check if the robot is going out of its designated range. Returns True if it is going out of range, False otherwise.', 'return_to_base': 'Action: Return to the designated base or home location. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Generate behavior tree for a drone to monitor a designated area and return to base if necessary
5.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_out_of_range</Condition><Selector><Sequence><Action>hover</Action><Condition>check_battery_level</Condition><Action>return_to_base</Action></Sequence><Action>wait</Action></Selector></Sequence></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'find_food_source': 'Action: Use sensors to search for a food source and navigate to it. Always returns True.', 'collect_food': 'Action: Collect food from the designated source. Returns True once food is collected.', 'is_food_low': 'Condition: Check if the food level in the robot's storage is low. Returns True if the food is low, False otherwise.', 'is_hungry': 'Condition: Check if the robot's hunger level is high. Returns True if the robot is hungry, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Generate behavior tree for a robot to autonomously search for and collect food in a remote location
6.// OUTPUT:
<BehaviorTree><Selector><Condition>is_hungry</Condition><Condition>is_food_low</Condition><Selector><Action>find_food_source</Action><Sequence><Action>collect_food</Action><Action>wait</Action></Sequence></Selector></Selector></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'navigate_to_objective': 'Action: Follow the designated path to the objective point. Returns True once the objective is reached.', 'avoid_obstacles': 'Action: Use sensors to detect obstacles and navigate around them. Always returns True.', 'is_goal_reached': 'Condition: Check if the goal has been reached. Returns True if the goal is reached, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: Generate behavior tree for a robot to navigate through a maze and reach a specific end point
7.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_goal_reached</Condition><Selector><Sequence><Action>navigate_to_objective</Action><Action>wait</Action></Sequence><Action>avoid_obstacles</Action></Selector></Sequence></BehaviorTree>###
3.// INSTRUCTIONS: Use only the following behaviors {'explore_area': 'Action: Move to a random location within a specified area. Returns False when no new area to explore is found.', 'find_best_path': 'Action: Use A* algorithm to find the best path to a given location. Returns True when the path is found, False otherwise.', 'check_included_area': 'Condition: Check if current location is included in the specified area. Returns True if location is included, False otherwise.', 'check_objective_reached': 'Condition: Check if the objective location is reached. Returns True if the objective is reached, False otherwise.', 'send_signal': 'Action: Send a signal to other swarm robots for coordination. Always returns True'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3.// USER COMMAND: Explore the specified area and reach the objective by finding the best path while sending a signal for coordination.
3.// OUTPUT:
<BehaviorTree><Sequence><Action>explore_area</Action><Selector><Sequence><Action>find_best_path</Action><Condition>check_included_area</Condition><Condition>check_objective_reached</Condition></Sequence><Action>send_signal</Action></Selector></Sequence></BehaviorTree>
###
4.// INSTRUCTIONS: Use only the following behaviors {'collect_resource': 'Action: Collect a resource from a specific location. Returns True when the resource is successfully collected, False otherwise.', 'deposit_resource': 'Action: Deposit a collected resource at a designated location. Returns True when the resource is successfully deposited, False otherwise.', 'request_help': 'Action: Send a request for help to other swarm robots. Always returns True.', 'check_nearby_swarm robots': 'Condition: Check if there are other swarm robots within a specified distance. Returns True if at least 1 robot is detected, False otherwise.', 'check_resource_available': 'Condition: Check if there is a resource available at a specific location. Returns True if there is a resource available, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: If there are other swarm robots nearby, request help or deposit a collected resource. Otherwise, collect a resource.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>check_nearby_swarm robots</Condition><Selector><Sequence><Action>request_help</Action><Action>deposit_resource</Action></Sequence><Action>collect_resource</Action></Selector></Sequence></Selector></BehaviorTree>
###
5.// INSTRUCTIONS: Use only the following behaviors {'move_to_location': 'Action: Move to a specified location. Always returns True.', 'check_obstructions': 'Condition: Check for any obstructions along the way. Returns False if any obstructions are detected, True otherwise.', 'check_target_distance': 'Condition: Check the distance to the designated target location. Returns True when the distance is within a specified threshold, False otherwise.', 'self_repair': 'Action: Using a designated repair kit, attempt to repair damage to the robot. Returns True when the robot is fully repaired, False otherwise.', 'wait': "Action: Wait for a designated amount of time before proceeding. Returns True when the timer is up, False otherwise."}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Move to the designated target location while avoiding any obstructions and repairing any damage along the way. If the target is not within a specified distance, wait for a designated amount of time before continuing.
5.// OUTPUT:
<BehaviorTree><Selector><Action>move_to_location</Action><Sequence><Condition>check_obstructions</Condition><Action>self_repair</Action><Sequence><Condition>check_target_distance</Condition><Wait>10</Wait></Sequence></Sequence></Selector></BehaviorTree>
###
6.// INSTRUCTIONS: Use only the following behaviors {'wait_for_sound': 'Action: Wait for a sound to be detected in the environment. Returns True when a sound is detected, False otherwise.', 'move_to_sound': 'Action: Move towards the source of the detected sound. Returns True when the sound source is reached, False otherwise.', 'start_recording': 'Action: Start recording audio. Returns False when recording is complete.', 'analyze_audio': 'Action: Analyze the recorded audio. Returns True when analysis is complete, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Wait for a sound to be detected, then move to the source of the sound and start recording audio. Once recording is done, analyze the audio.
6.// OUTPUT:
<BehaviorTree><Sequence><Action>wait_for_sound</Action><Action>move_to_sound</Action><Action>start_recording</Action><Action>analyze_audio</Action></Sequence></BehaviorTree>
###
7.// INSTRUCTIONS: Use only the following behaviors {'collect_food': 'Subtree node: Represents a behavior tree for collecting food from multiple sources.', 'eat_food': 'Action: Eat a collected food item. Returns True when a food item is consumed, False otherwise.', 'rest': 'Action: Rest for a designated amount of time. Returns True when the rest timer is up, False otherwise.', 'avoid_predators': 'Action: Avoid any detected predators. Returns True when the predator is successfully avoided, False otherwise.', 'is_hungry': 'Condition: Check if the agent is hungry. Returns True if the agent's hunger level is above a specific threshold, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: If hungry, collect and eat food from multiple sources while avoiding any predators. Rest for a designated amount of time if there is no food available.
7.// OUTPUT:
<BehaviorTree><Selector><Condition>is_hungry</Condition><Selector><Sequence><Action>collect_food</Action><Action>eat_food</Action></Sequence><Action>avoid_predators</Action><Action>rest</Action></Selector></BehaviorTree> 
###
3.// INSTRUCTIONS: Use only the following behaviors {'gather_resources': 'Subtree node: Represents a behavior tree for collecting resources.', 'deliver_resources': 'Subtree node: Represents a behavior tree for delivering resources to a designated location.', 'check_resource_level': 'Condition: Checks if the robot has enough resources. Returns True if resource level is above a defined threshold, False otherwise.', 'use_resource': 'Action: Uses a resource to perform a specific task.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3.// USER COMMAND: Collect resources and deliver them to a designated location. If resource level drops below a threshold, use a stored resource to replenish.
3.// OUTPUT:
<BehaviorTree><Sequence><Action>gather_resources</Action><Action>deliver_resources</Action><Trigger>check_resource_level</Trigger><Action>use_resource</Action></Sequence></BehaviorTree>

###
4.// INSTRUCTIONS: Use only the following behaviors {'avoid_obstacles': 'Subtree node: Represents a behavior tree for navigating away from obstacles.', 'analyze_environment': 'Condition: Performs a scan or analysis of the robot's environment. Returns True if there are obstacles present, False otherwise.', 'reposition': 'Action: Changes the robot's position to avoid obstacles.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Navigate through obstacles by constantly scanning the environment and adjusting position accordingly.
4.// OUTPUT:
<BehaviorTree><Sequence><Condition>analyze_environment</Condition><Action>avoid_obstacles</Action><Action>reposition</Action></Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'explore_area': 'Subtree node: Represents a behavior tree for exploring a designated area.', 'scan_surroundings': 'Action: Performs a thorough scan of the robot's surroundings.', 'on_object_detected': "Event: Triggers when an object is detected. Returns True if an object is detected, False otherwise.", 'pick_up_object': 'Action: Picks up an object and stores it for later use.', 'deliver_object': 'Action: Delivers a stored object to a designated location.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Explore the designated area, scanning for objects, and picking them up if detected. Once an object is picked up, deliver it to a designated location.
5.// OUTPUT:
<BehaviorTree><Sequence><Action>explore_area</Action><Action>scan_surroundings</Action><Trigger>on_object_detected</Trigger><Sequence><Action>pick_up_object</Action><Action>deliver_object</Action></Sequence></Sequence></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'search_area': 'Subtree node: Represents a behavior tree for searching a designated area.', 'check_status': 'Condition: Checks the status of the search. Returns True if the area has been thoroughly searched, False otherwise.', 'track_object': 'Action: Tracks a specific object or target in the designated area.', 'get_closer': 'Action: Moves closer to the tracked object or target.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Search the designated area, track a specific object, and get closer to it until the area has been thoroughly searched.
6.// OUTPUT:
<BehaviorTree><Sequence><Action>search_area</Action><Condition>check_status</Condition><Selector><Sequence><Action>track_object</Action><Action>get_closer</Action></Sequence></Selector></Sequence></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'detect_enemy': 'Subtree node: Represents a behavior tree for detecting and identifying enemy robots.', 'plan_attack': 'Subtree node: Represents a behavior tree for planning and executing an attack on detected enemies.', 'recharge': 'Action: Goes to a designated location to recharge the robot's energy.', 'check_energy_level': 'Condition: Checks the energy level of the robot. Returns True if energy level is below a certain threshold, False otherwise.', 'chase_enemy': 'Action: Chases and engages in combat with a detected enemy.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: Detect and identify enemy robots, plan and execute an attack on them. If energy level drops below a threshold, go to a designated location to recharge before resuming the attack.
7.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>detect_enemy</Action><Action>plan_attack</Action></Sequence><Trigger>check_energy_level</Trigger><Sequence><Action>recharge</Action><Action>chase_enemy</Action></Sequence></Selector></BehaviorTree>
3.// INSTRUCTIONS: Use only the following behaviors {'detect_sample': 'Condition: Checks if a sample is within range of the robot. Returns True if sample is detected, False otherwise.', 'collect_sample': 'Action: Collects a sample from the environment. Always returns True.', 'detect_nest': 'Condition: Checks if the robot is close to the nest. Returns True if the nest is within range, False otherwise.', 'return_to_nest': 'Action: Guides the robot back to the nest. Always returns True.', 'move_towards_sample': 'Action: Moves towards the detected sample. Always returns True.', 'explore': 'Action: Explores the environment by moving randomly. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3.// USER COMMAND: Collect a sample and return to the nest. If no sample is detected, explore the environment.
3.// OUTPUT:
<BehaviorTree><Sequence><Condition>detect_sample</Condition><Sequence><Action>collect_sample</Action><Condition>detect_nest</Condition><Action>return_to_nest</Action></Sequence></Sequence><Action>explore</Action><Action>move_towards_sample</Action></BehaviorTree>

4.// INSTRUCTIONS: Use only the following behaviors {'detect_obstacles': 'Condition: Checks for obstacles in the environment. Returns True if obstacles are detected, False otherwise.', 'navigate_through_obstacles': 'Action: Guides the robot through the detected obstacles. Always returns True.', 'recharge_battery': 'Action: Connects to a charging station to recharge the robot's battery. Always returns True.', 'detect_target': 'Condition: Checks for a designated target. Returns True if the target is detected, False otherwise.', 'retrieve_target': 'Action: Retrieves the designated target. Always returns True.', 'navigate_to_destination': 'Action: Guides the robot to a specific destination. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Navigate through obstacles, recharge battery, retrieve target, and reach designated destination.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>detect_obstacles</Condition><Action>navigate_through_obstacles</Action><Action>recharge_battery</Action><Condition>detect_target</Condition><Action>retrieve_target</Action><Action>navigate_to_destination</Action></Sequence></Selector></BehaviorTree>

5.// INSTRUCTIONS: Use only the following behaviors {'monitor_signal_strength': "Action: Continuously checks the agent's signal strength. Always returns True.", 'transmit_message': 'Action: Transmits a message to other robots. Always returns True.', 'detect_interference': 'Condition: Checks for any signal interference. Returns True if interference is detected, False otherwise.', 'adjust_antenna': 'Action: Adjusts the robot's antenna to improve signal strength. Always returns True.', 'request_help': 'Action: Requests assistance from other robots. Always returns True.', 'navigate_to_strong_signal': 'Action: Guides the robot towards a stronger signal. Always returns True.', 'stop': 'Action: Stops the robot from moving. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Continuously monitor signal strength, transmit message if interference is detected, adjust antenna to improve signal, and request help if necessary.
5.// OUTPUT:
<BehaviorTree><Sequence><Action>monitor_signal_strength</Action></Sequence><Sequence><Condition>detect_interference</Condition><Sequence><Action>transmit_message</Action><Action>adjust_antenna</Action></Sequence></Sequence><Action>request_help</Action></Selector></BehaviorTree>

6.// INSTRUCTIONS: Use only the following behaviors {'explore': "Action: Explore the environment by moving randomly. Always returns True.", 'gather_food': 'Action: Gathers food from the environment. Always returns True.', 'store_food': 'Action: Stores the gathered food in a designated storage area. Always returns True.', 'detect_hive': 'Condition: Checks for the hive location. Returns True if the hive is within range, False otherwise.', 'return_to_hive': 'Action: Guides the robot back to the hive. Always returns True.', 'lay_eggs': 'Action: Lays eggs in the hive. Always returns True.', 'detect_predator': 'Condition: Checks for any predators nearby. Returns True if a predator is detected, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Explore and gather food, store food in hive, and lay eggs. If a predator is detected, return to the hive immediately.
6.// OUTPUT:
<BehaviorTree><Sequence><Action>explore</Action><Sequence><Action>gather_food</Action><Action>store_food</Action></Sequence><Action>lay_eggs</Action><Condition>detect_predator</Condition><Action>return_to_hive</Action></Sequence></BehaviorTree>

7.// INSTRUCTIONS: Use only the following behaviors {'detect_water_source': 'Condition: Checks for a water source. Returns True if a water source is detected, False otherwise.', 'fill_water_tank': 'Action: Fills the robot's water tank from the water source. Always returns True.', 'navigate_to_destination': 'Action: Guides the robot to a specific destination. Always returns True.', 'water_plants': 'Action: Uses the water in the tank to water the plants. Always returns True.', 'detect_plant_growth': 'Condition: Checks for the growth of plants. Returns True if plant growth is detected, False otherwise.', 'harvest_plants': 'Action: Harvests the fully-grown plants. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: Fill water tank from a water source, navigate to and water plants, and harvest fully-grown plants. If no water source is detected, navigate to a new water source.
7.// OUTPUT:
<BehaviorTree><Sequence><Condition>detect_water_source</Condition><Action>fill_water_tank</Action></Sequence><Sequence><Action>water_plants</Action><Condition>detect_plant_growth</Condition><Action>harvest_plants</Action></Sequence><Action>navigate_to_destination</Action></Selector></BehaviorTree>
###
3. // INSTRUCTIONS: Use only the following behaviors {'get_current_position': 'Action: Get the agent's current position. Returns True after retrieving the position.', 'move_to_position': 'Action: Move agent to a specified position. Returns True once the agent has reached the destination.', 'scan_area': 'Action: Scan the surrounding area for potential targets. Returns True after scanning.', 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'drop_target': 'Action: Drop the target object at the designated drop-off location. Always returns True.', 'go_to_nest': 'Action: Move agent back to the designated nest location. Returns True once the nest is reached.', 'has_target_reached': 'Condition: Check if the target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'in_nest': 'Condition: Check if the agent is in the designated nest location. Returns True if the agent is in the nest, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3. // USER COMMAND: generate behavior tree to 'Scan the area for targets, if target is detected, move to target position and drop target. If no target is detected, return to nest.'
3. // OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Action>scan_area</Action> <Sequence> <Condition>has_target_reached</Condition> <Action>move_to_position</Action> <Action>drop_target</Action> </Sequence> </Sequence> <Sequence> <Condition>in_nest</Condition> <Action>go_to_nest</Action> </Sequence> </Selector> </BehaviorTree>

###
4. // INSTRUCTIONS: Use only the following behaviors {'explore_from_location': 'Action: Explore the environment starting from a specified location. Returns True once all surrounding locations have been explored.', 'move_to_nearest_exit': 'Action: Move agent to the nearest exit. Returns True once the exit is reached.', 'is_at_exit': 'Condition: Check if the agent is at an exit point. Returns True if at an exit, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'next_direction': 'Condition: Check for the next best direction to move towards. Returns True after determining the next direction.', 'return_to_start': 'Action: Return to the starting point. Returns True once the starting point is reached.', 'search_for_object': 'Action: Search for a specific object within the environment. Returns True after finding the object.', 'take_action_on_object': 'Action: Perform a specific action on the found object. Returns True after completing the action on the object.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4. // USER COMMAND: generate behavior tree to 'Explore the environment from a specified location, search for a specific object, and perform an action on the object if found. If not found, return to starting point and move to nearest exit.'
4. // OUTPUT:
<BehaviorTree> <Sequence> <Action>explore_from_location</Action> <Sequence> <Action>search_for_object</Action> <Sequence> <Condition>next_direction</Condition> <Action>take_action_on_object</Action> </Sequence> <Sequence> <Condition>next_direction</Condition> <Action>return_to_start</Action> </Sequence> <Sequence> <Condition>is_at_exit</Condition> <Action>move_to_nearest_exit</Action> </Sequence> </Sequence> </BehaviorTree>

###
5. // INSTRUCTIONS: Use only the following behaviors {'get_agent_status': 'Action: Get the current status of the agent. Returns True after retrieving the status.', 'move_to_position': 'Action: Move agent to a specified position. Returns True once the agent has reached the destination.', 'notify_team': 'Action: Notify the team of the agent's status. Returns True after notifying.', 'check_resource_levels': 'Action: Check the level of resources available. Returns True once the levels have been checked.', 'is_in_danger': 'Condition: Check if the agent is currently in danger. Returns True if in danger, False otherwise.', 'is_teammate_in_trouble': 'Condition: Check if a teammate is in trouble. Returns True if a teammate is in trouble, False otherwise.', 'respond_to_danger': 'Action: Respond to the danger by taking necessary action. Returns True after responding.', 'call_for_backup': 'Action: Call for backup from other agents. Returns True after backup has arrived.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5. // USER COMMAND: generate behavior tree to 'Get agent's status, check resource levels, and respond to any danger. If a teammate is in trouble, call for backup and notify team.'
5. // OUTPUT:
<BehaviorTree> <Sequence> <Action>get_agent_status</Action> <Sequence> <Action>check_resource_levels</Action> <Sequence> <Condition>is_in_danger</Condition> <Action>respond_to_danger</Action> </Sequence> <Sequence> <Condition>is_teammate_in_trouble</Condition> <Action>call_for_backup</Action> <Action>notify_team</Action> </Sequence> </Sequence> </Sequence> </BehaviorTree>

###
6. // INSTRUCTIONS: Use only the following behaviors {'detect_environment_changes': 'Action: Detect any changes in the environment. Returns True after detecting any changes.', 'analyze_data': 'Action: Analyze the collected data from the environment. Returns True after analysis.', 'is_action_needed': 'Condition: Check if any action is needed based on the analysis results. Returns True if action is needed, False otherwise.', 'take_action': 'Action: Take the necessary action based on the analysis results. Returns True after taking action.', 'notify_team': 'Action: Notify the team of any detected changes and taken actions. Returns True after notifying.', 'take_maintenance_action': 'Action: Take maintenance action on the robot to ensure optimal performance. Returns True after completing the maintenance action.', 'is_maintenance_needed': 'Condition: Check if maintenance action is needed. Returns True if maintenance is needed, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6. // USER COMMAND: generate behavior tree to 'Detect any changes in the environment, analyze the data, and take necessary action. If maintenance is needed, perform maintenance action and notify team.'
6. // OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Action>detect_environment_changes</Action> <Sequence> <Action>analyze_data</Action> <Sequence> <Condition>is_action_needed</Condition> <Action>take_action</Action> </
###
4.// INSTRUCTIONS: Use only the following behaviors {'search_for_food': 'Action: Send out individual robots to search for food and return to the swarm when food is found. Returns True upon completion.', 'return_to_nest': 'Action: Return to the nest as a swarm, carrying any found food. Returns True upon completion.', 'is_food_found': 'Condition: Check if food has been found by an individual robot. Returns True if food is found, False otherwise.', 'is_nest_reached': 'Condition: Check if the swarm has returned to the nest. Returns True if the nest is reached, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Generate a behavior tree for a swarm of robots to search for and collect food, and return to the nest as a group.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>search_for_food</Action><Condition>is_food_found</Condition></Sequence><Sequence><Action>return_to_nest</Action><Condition>is_nest_reached</Condition></Sequence></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'follow_swarm_leader': 'Action: Follow the designated leader of the swarm. Returns True upon completion.', 'form_circle': 'Action: Form a circle with the designated leader at the center. Returns True upon completion.', 'is_leader_reached': 'Condition: Check if the swarm has reached the designated leader. Returns True if the leader is reached, False otherwise.', 'is_circle_formed': 'Condition: Check if the swarm has formed a circle with the designated leader at the center. Returns True if the circle is formed, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Generate a behavior tree for a swarm of robots to form a circle around a designated leader and follow the leader's movements.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>follow_swarm_leader</Action><Condition>is_leader_reached</Condition></Sequence><Sequence><Action>form_circle</Action><Condition>is_circle_formed</Condition></Sequence></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'is_light_detected': 'Condition: Check if light is detected by the robot's sensors. Returns True if light is detected, False otherwise.', 'move_towards_light': 'Action: Move towards the detected light source. Returns True upon reaching the light source.', 'move_away_from_light': 'Action: Move away from the detected light source. Returns True upon moving away sufficiently.', 'is_obstacle_ahead': 'Condition: Check if there is an obstacle blocking the path ahead. Returns True if an obstacle is detected, False otherwise.', 'is_target_reached': 'Condition: Check if the target location has been reached. Returns True if the target has been reached, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Generate a behavior tree for a single robot to find and reach a target location while avoiding obstacles and being attracted or repelled by light sources.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_target_reached</Condition><Action>task_completed</Action></Sequence><Sequence><Condition>is_light_detected</Condition><Action>move_towards_light</Action></Sequence><Sequence><Condition>is_obstacle_ahead</Condition><Action>move_away_from_light</Action></Sequence><Action>wander</Action></Selector></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'scan_environment': 'Action: Use sensors to scan the environment and create a map. Returns True upon completion.', 'go_to_unmapped_area': 'Action: Move towards an area of the environment that has not yet been mapped. Returns True upon arriving at the area.', 'is_area_mapped': 'Condition: Check if the current area has already been mapped and explored. Returns True if the area is mapped, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: Generate a behavior tree for a single robot to systematically map and explore an environment, covering all unmapped areas.
7.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>go_to_unmapped_area</Action><Condition>is_area_mapped</Condition></Sequence><Sequence><Action>scan_environment</Action><Condition>is_area_mapped</Condition></Sequence><Action>wander</Action></Selector></BehaviorTree>
4.// INSTRUCTIONS: Use only the following behaviors {'collect_resource': 'Action: Collect a resource located in the current area. Always returns True.', 'deliver_resource': 'Action: Deliver a collected resource to a designated location. Always returns True.', 'return_to_base': 'Action: Return to the base location. Always returns True.', 'is_resource_available': 'Condition: Check if a resource is available in the current area. Returns True if a resource is available, False otherwise.', 'is_delivery_complete': 'Condition: Check if the resource has been successfully delivered. Returns True if the resource is delivered, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Generate behavior tree for a swarm of robots to gather resources and deliver them to the base
4.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_delivery_complete</Condition><Selector><Sequence><Condition>is_resource_available</Condition><Selector><Action>collect_resource</Action><Action>return_to_base</Action></Selector></Sequence><Sequence><Action>deliver_resource</Action><Action>return_to_base</Action></Sequence></Selector></Sequence></BehaviorTree>

5.// INSTRUCTIONS: Use only the following behaviors {'explore_unknown_area': 'Action: Explore an unknown area using advanced sensors and mapping techniques. Always returns True.', 'identify_potential_targets': 'Action: Identify potential targets within the explored area based on set criteria. Always returns True.', 'analyze_found_targets': 'Action: Analyze the identified targets based on further specifications and data gathering. Always returns True.', 'is_target_found': 'Condition: Check if at least one potential target has been identified and analyzed. Returns True if a target is found, False otherwise.', 'is_explore_complete': 'Condition: Check if the entire unknown area has been fully explored and analyzed. Returns True if the exploration is complete, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Generate behavior tree for a robot swarm to explore and analyze an unknown environment for potential targets
5.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_explore_complete</Condition><Selector><Sequence><Action>explore_unknown_area</Action><Selector><Condition>is_target_found</Condition><Action>identify_potential_targets</Action></Selector></Sequence><Action>analyze_found_targets</Action></Selector></Sequence></BehaviorTree>

6.// INSTRUCTIONS: Use only the following behaviors {'navigate_to_start': 'Action: Navigate to the starting point of the designated path. Always returns True.', 'follow_path': 'Action: Follow the designated path using advanced navigation techniques. Always returns True.', 'check_obstacles': "Condition: Check for any obstacles or obstructions along the designated path. Returns True if obstacles are detected, False otherwise.", 'check_gps_accuracy': 'Condition: Check the accuracy of the robot's GPS coordinates. Returns True if the accuracy is within the desired range, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Generate behavior tree for a swarm of robots to navigate and follow a predefined path while avoiding obstacles and ensuring accurate GPS readings
6.// OUTPUT:
<BehaviorTree><Sequence><Condition>check_gps_accuracy</Condition><Selector><Sequence><Condition>check_obstacles</Condition><Selector><Action>navigate_to_start</Action><Action>follow_path</Action></Selector></Sequence><Sequence><Action>follow_path</Action><Action>check_gps_accuracy</Action></Sequence></Selector></Sequence></BehaviorTree>

7.// INSTRUCTIONS: Use only the following behaviors {'group_up': 'Action: Group up with other swarm robots within the designated range. Always returns True.', 'scan_for_intruders': 'Action: Scan the surrounding area for any potential intruders or threats. Always returns True.', 'attack_intruders': 'Action: Attack and disable any identified intruders using designated weapons. Always returns True.', 'is_intruder_detected': 'Condition: Check if an intruder has been detected within the designated range. Returns True if an intruder is detected, False otherwise.', 'are_all_robots_grouped': 'Condition: Check if all the swarm robots within the range have grouped up. Returns True if all robots are grouped, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: Generate behavior tree for a swarm of robots to defend against potential intruders
7.// OUTPUT:
<BehaviorTree><Sequence><Selector><Condition>are_all_robots_grouped</Condition><Action>attack_intruders</Action></Selector><Selector><Condition>is_intruder_detected</Condition><Sequence><Action>group_up</Action><Action>scan_for_intruders</Action></Sequence></Selector></Sequence></BehaviorTree> 
###
4.// INSTRUCTIONS: Use only the following behaviors {'collect_resource': 'Action: Collect the nearest resource. Always returns True.', 'is_resource_reached': 'Condition: Check if a resource is within 10 units of distance. Returns True if a resource is within 10 units, False otherwise.', 'harvest_resource': 'Action: Harvest the collected resource. Always returns True.', 'is_resource_empty': 'Condition: Check if the collected resource is empty. Returns True if the resource is empty, False otherwise.', 'deposit_resource': 'Action: Deposit the harvested resource. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Collect a resource, harvest it, and deposit it in the designated location.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_resource_reached</Condition><Selector><Action>collect_resource</Action><Sequence><Condition>is_resource_empty</Condition><Action>harvest_resource</Action><Action>deposit_resource</Action></Sequence></Selector></Sequence><Action>wander</Action></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'investigate_sound': 'Action: Move towards the location of the sound. Always returns True.', 'is_sound_detected': 'Condition: Check if a sound is detected within 15 units. Returns True if a sound is detected, False otherwise.', 'crouch': 'Action: Activate crouching mode. Always returns True.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'jump': 'Action: Activate jumping mode. Always returns True.', 'check_environment': 'Action: Utilize sensors to check the environment and update internal map. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: If a sound is detected, move towards the location and jump over any obstacles. Otherwise, crouch and check the environment.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_sound_detected</Condition><Action>investigate_sound</Action><Sequence><Condition>is_obstacle_detected</Condition><Action>jump</Action></Sequence></Sequence><Sequence><Action>crouch</Action><Action>check_environment</Action></Sequence></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'explore_area': 'Subtree node: Represents a behavior tree for exploring an area.', 'find_route': 'Action: Use pathfinding algorithm to find the most efficient route to a designated location. Always returns True.', 'follow_route': 'Action: Follow the designated route. Always returns True.', 'is_goal_reached': 'Condition: Check if the destination goal has been reached. Returns True if the goal is reached, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Build a behavior tree for robot to reach a designated location using an exploration algorithm
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_goal_reached</Condition><Action>wait</Action></Sequence><Selector><Sequence><Action>find_route</Action><Action>follow_route</Action></Sequence><Action>explore_area</Action></Selector></Selector></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'detect_enemy': 'Action: Use sensors to detect enemies within the environment. Always returns True.', 'aim': 'Action: Aim at the target enemy. Always returns True.', 'shoot': 'Action: Shoot at the target enemy. Always returns True.', 'reload_weapon': 'Action: Reload the robot's weapon. Always returns True.', 'is_ammo_low': 'Condition: Check if ammo is low. Returns True if ammo is low, False otherwise.', 'is_enemy_visible': 'Condition: Check if the target enemy is visible. Returns True if the enemy is within line of sight, False otherwise.', 'move_to_cover': 'Action: Move towards the nearest cover. Always returns True.', 'is_reloading': 'Condition: Check if the robot is currently reloading. Returns True if the robot is reloading, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: Detect enemies, aim at the target enemy, and shoot until ammo runs low. Then, move to cover and reload.
7.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_ammo_low</Condition><Selector><Selector><Action>move_to_cover</Action><Action>wander</Action></Selector><Sequence><Condition>is_enemy_visible</Condition><Action>aim</Action><Action>shoot</Action></Sequence></Selector></Sequence><Action>detect_enemy</Action><Selector><Condition>is_reloading</Condition><Action>reload_weapon</Action></Selector></BehaviorTree>


###
4.// INSTRUCTIONS: Use only the following behaviors {'follow_path': 'Subtree node: Follow a given path to reach a target.', 'wait_for_target': 'Subtree node: Wait for a target to be detected.', 'is_target_reached': 'Condition: Check if target is within 10 units. Returns True if the target is within 10 units of distance, False otherwise.', 'is_stop_sign_detected': 'Condition: Check for a stop sign. Returns True if a stop sign is detected, False otherwise.', 'stop': 'Action: Stop movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Follow the given path until a stop sign is detected, then stop movement.
4.// OUTPUT:
<BehaviorTree><Sequence><Action>follow_path</Action><Selector><Sequence><Condition>is_stop_sign_detected</Condition><Action>stop</Action></Sequence><Action>wait_for_target</Action><Condition>is_target_reached</Condition></Selector></Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'find_objects': 'Subtree node: Find and collect objects scattered in the environment.', 'check_inventory': "Action: Checks the agent's inventory. Always returns True.", 'empty_inventory': 'Action: Empty the agent's inventory. Always returns True.', 'is_inventory_full': 'Condition: Checks if inventory is full. Returns True if inventory is full, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Collect objects until inventory is full, then empty inventory and continue collecting.
5.// OUTPUT:
<BehaviorTree><Sequence><Action>find_objects</Action><Condition>is_inventory_full</Condition><Action>empty_inventory</Action><Action>check_inventory</Action></Sequence></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'find_free_space': 'Subtree node: Find a space to land and recharge.', 'recharge': 'Action: Recharge the robot while staying in place. Return True when fully recharged.', 'is_battery_low': 'Condition: Checks if battery level is below a specific threshold. Returns True if battery level is below the threshold, False otherwise.', 'is_space_available': 'Condition: Checks if there is an available space to land on. Returns True if space is available, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Find a space to land and recharge while monitoring battery level. If battery is low, recharge until fully charged.
6.// OUTPUT:
<BehaviorTree><Sequence><Action>find_free_space</Action><Condition>is_battery_low</Condition><Selector><Sequence><Condition>is_space_available</Condition><Action>recharge</Action><Condition>is_battery_low</Condition></Sequence><Action>recharge</Action></Selector></Sequence></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'find_path': 'Subtree node: Find a path from the current location to a specified destination.', 'follow_path': 'Subtree node: Follow a given path to reach a target.', 'go_to_destination': 'Action: Move to the specified destination. Return True when reached.', 'is_obstacle_in_path': 'Condition: Checks if there are obstacles in the path. Returns True if obstacles are present, False otherwise.', 'is_target_reached': 'Condition: Check if target is reached. Returns True if target is reached, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: Find a path to the destination and follow it while avoiding obstacles. If the target is reached, stop movement.
7.// OUTPUT:
<BehaviorTree><Sequence><Action>find_path</Action><Selector><Sequence><Condition>is_obstacle_in_path</Condition><Action>follow_path</Action><Condition>is_target_reached</Condition></Sequence><Action>go_to_destination</Action></Selector></Sequence></BehaviorTree>The given command is ambiguous and does not specify a clear sequence of actions. Please provide a more specific command. 

###
4.// INSTRUCTIONS: Use only the following behaviors {'pick_up_object': 'Action: Pick up the specified object. Returns True if the object is successfully picked up, False otherwise.', 'drop_object': 'Action: Drop the currently held object. Returns True if the object is successfully dropped, False otherwise.', 'find_path_to_nest': 'Action: Determine the shortest path to the nest using pathfinding algorithms. Returns True if a path is found, False otherwise.', 'is_nest_reached': 'Condition: Check if the nest has been reached. Returns True if the agent is within a specified range of the nest, False otherwise.', 'is_object_held': 'Condition: Check if the agent is currently holding an object. Returns True if an object is being held, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'collect all objects and return them to the nest in the quickest way possible'
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_object_held</Condition><Action>drop_object</Action></Sequence><Action>pick_up_object</Action></Selector><Sequence><Condition>is_nest_reached</Condition><Action>find_path_to_nest</Action></Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'move_forward': 'Action: Move one step forward. Always returns True.', 'rotate_left': 'Action: Rotate 90 degrees to the left. Always returns True.', 'rotate_right': 'Action: Rotate 90 degrees to the right. Always returns True.', 'is_obstacle_ahead': 'Condition: Check if there is an obstacle blocking the path ahead. Returns True if an obstacle is detected, False otherwise.', 'is_target_reached': 'Condition: Check if the target has been reached within a certain distance. Returns True if the target is within the specified distance, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'navigate through a maze and reach the end'
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_obstacle_ahead</Condition><Selector><Action>rotate_right</Action><Action>rotate_left</Action></Selector></Sequence><Sequence><Action>move_forward</Action><Condition>is_target_reached</Condition></Sequence></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'move_forward': 'Action: Move one step forward while maintaining formation. Always returns True.', 'shift_left': 'Action: Shift the entire formation one step to the left. Always returns True.', 'shift_right': 'Action: Shift the entire formation one step to the right. Always returns True.', 'hold_flag': 'Action: Hold the flag in the specified position. Returns True if the flag is successfully held, False otherwise.', 'drop_flag': 'Action: Drop the flag at the current location. Returns True if the flag is successfully dropped, False otherwise.', 'is_enemy_flag_held': 'Condition: Check if the enemy flag is currently being held by the agent. Returns True if the flag is being held, False otherwise.', 'is_target_reached': 'Condition: Check if the target has been reached within a certain distance. Returns True if the target is within the specified distance, False otherwise.', 'is_formation_broken': 'Condition: Check if the formation has become misaligned or broken. Returns True if the formation is broken, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Generate a behavior tree for a swarm of robots to attack and capture the enemy flag while maintaining formation and avoiding obstacles.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_enemy_flag_held</Condition><Action>drop_flag</Action></Sequence><Action>hold_flag</Action></Selector><Sequence><Condition>is_formation_broken</Condition><Action>reform_formation</Action></Sequence><Sequence><Action>shift_right</Action><Action>shift_left</Action></Sequence><Selector><Sequence><Action>move_forward</Action><Condition>is_target_reached</Condition></Sequence><Sequence><Condition>is_obstacle_ahead</Condition><Selector><Action>shift_right</Action><Action>shift_left</Action></Selector></Sequence></Selector></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'detect_enemies': 'Action: Scan the environment for enemy robots. Returns True if enemies are detected, False otherwise.', 'defend': 'Action: Defend the specified position. Returns True if the position is successfully defended, False otherwise.', 'attack': 'Action: Attack the specified position. Returns True if the attack was successful, False otherwise.', 'return_to_base': 'Action: Return to the base while avoiding obstacles. Returns True if the base is reached, False otherwise.', 'is_enemy_flag_held': 'Condition: Check if the enemy flag is currently being held by the agent. Returns True if the flag is being held, False otherwise.', 'is_in_base': 'Condition: Check if the agent is currently in the base. Returns True if the agent is within the base, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: Generate a behavior tree for a swarm of robots to capture and return the enemy flag while defending their own base.
7.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_enemy_flag_held</Condition><Action>return_to_base</Action></Sequence><Sequence><Condition>is_in_base</Condition><Action>pick_up_flag</Action></Sequence><Sequence><Condition>is_in_base</Condition><Action>drop_flag</Action></Sequence></Selector><Sequence><Action>detect_enemies</Action><Selector><Action>defend</Action><Action>attack</Action></Selector></Sequence></BehaviorTree> 
###
3.// INSTRUCTIONS: Use only the following behaviors {'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_log_found': 'Condition: Check if a log is found nearby. Returns True if a log is detected within 10 units, False otherwise.', 'navigate_to_target': 'Action: Navigate to the target location specified. Always returns True.', 'pick_up_log': 'Action: Pick up the log if within reach. Always returns True.', 'drop_log': 'Action: Drop the log at the specified drop-off location. Always returns True.', 'is_at_dropoff': 'Condition: Check if the agent is at the designated drop-off location. Returns True if at the drop-off location, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3.// USER COMMAND: generate behavior tree to 'Search for logs, pick up and drop off at designated location.'Output only the XML behavior tree without extra text.
3.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>is_log_found</Condition> <Action>pick_up_log</Action> <Sequence> <Condition>is_agent_in_nest</Condition> <Action>drop_log</Action> <Action>navigate_to_target</Action> <Sequence> <Condition>is_at_dropoff</Condition> <Action>drop_log</Action> </Sequence> </Sequence> </Sequence> </BehaviorTree>
 
###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'decrease_speed': "Action: Decrease agent's speed by 50%. Always returns True.", 'increase_speed': "Action: Increase agent's speed by 50%. Always returns True.", 'is_at_destination': 'Condition: Check if the agent has reached the designated target location. Returns True if at the destination, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'move_forward': 'Action: Move the agent forward at normal speed. Always returns True.', 'turn_left': 'Action: Turn the agent 90 degrees to the left. Always returns True.', 'turn_right': 'Action: Turn the agent 90 degrees to the right. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Navigate to the target location, while avoiding obstacles and adjusting speed if necessary.'Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree> <Sequence> <Condition>is_obstacle_detected</Condition> <Selector> <Sequence> <Condition>is_path_clear</Condition> <Action>increase_speed</Action> </Sequence> <Sequence> <Condition>is_path_clear</Condition> <Action>move_forward</Action> </Sequence> <Sequence> <Condition>is_target_reached</Condition> <Action>decrease_speed</Action> <Action>move_forward</Action> </Sequence> </Selector> </Sequence> </BehaviorTree>
 
###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'change_color_to_red': "Action: Change agent's color to red. Always returns True.", 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'move_backward': 'Action: Move the agent backward. Always returns True.', 'move_forward': 'Action: Move the agent forward at normal speed. Always returns True.', 'turn_left': 'Action: Turn the agent 90 degrees to the left. Always returns True.', 'turn_right': 'Action: Turn the agent 90 degrees to the right. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Change color to red, move towards the target location while avoiding obstacles, and return to nest when target is reached.'Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree> <Sequence> <Action>change_color_to_red</Action> <Selector> <Sequence> <Condition>is_obstacle_detected</Condition> <Sequence> <Condition>is_path_clear</Condition> <Action>move_forward</Action> </Sequence> <Sequence> <Condition>is_agent_in_nest</Condition> <Action>move_backward</Action> <Condition>is_target_reached</Condition> </Sequence> </Selector> </Sequence> </BehaviorTree>
 
###
6.// INSTRUCTIONS: Use only the following behaviors {'align_to_target': 'Action: Align the agent to face the target. Always returns True.', 'circle_target': "Action: Circle around the target while facing it. Always returns True.", 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_almost_aligned': 'Condition: Check if the agent is almost aligned with the target. Returns True if the agent's angle is within a 15-degree range of the target, False otherwise.', 'is_circle_complete': 'Condition: Check if the agent has made a full circle around the target. Returns True if the agent's angle has changed by 360 degrees, False otherwise.', 'is_rotation_needed': 'Condition: Check if the agent needs to rotate to align with the target. Returns True if the agent's angle is not within a 15-degree range of the target, False otherwise.', 'move_forward': 'Action: Move the agent forward at normal speed. Always returns True.', 'rotate_left': 'Action: Rotate the agent 20 degrees to the left. Always returns True.', 'rotate_right': 'Action: Rotate the agent 20 degrees to the right. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I 
###
4.// INSTRUCTIONS: Use only the following behaviors {'accelerate': 'Action: Increase speed of the robot by 10%. Always returns True.', 'decelerate': 'Action: Decrease speed of the robot by 10%. Always returns True.', 'slow_down_near_border': 'Action: Decelerate the robot by 25% when near the edge of the environment. Always returns True.', 'change_direction': 'Action: Change the robot's direction by 90 degrees. Always returns True.', 'is_moving': 'Condition: Check if the robot is currently moving or in motion. Returns True if the robot is moving, False otherwise.', 'is_near_edge': 'Condition: Check if the robot is within 10 units of the environment edge. Returns True if the robot is near the edge, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Generate behavior tree to have a robot move around the environment while avoiding the edges and maintaining a steady speed.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_near_edge</Condition><Action>slow_down_near_border</Action></Sequence><Sequence><Condition>is_moving</Condition><Action>decelerate</Action></Sequence><Action>accelerate</Action></Selector><Selector><Condition>is_near_edge</Condition><Action>change_direction</Action></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'circle_object': 'Action: Circle around the specified object at a radius of 5 units. Always returns True.', 'track_object': 'Action: Track the movements of the specified object within the environment and adjust direction accordingly. Always returns True.', 'is_object_detected': 'Condition: Check if the specified object is within view of the robot. Returns True if the object is detected, False otherwise.', 'is_object_tracked': 'Condition: Check if the robot is successfully tracking the specified object. Returns True if the object is being tracked, False otherwise.', 'synchronize_movement': 'Action: Synchronize the movement of the robot with other robots in the swarm. Always returns True.', 'check_obstacle': 'Action: Check the environment for any obstacles. Always returns True.', 'is_obstacle_detected': 'Condition: Check if an obstacle is detected in the environment. Returns True if an obstacle is detected, False otherwise.', 'avoid_obstacle': 'Action: Avoid the detected obstacle by changing direction. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Generate behavior tree for a swarm of robots to track an object while avoiding obstacles and synchronizing movement.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_obstacle_detected</Condition><Action>avoid_obstacle</Action></Sequence><Sequence><Condition>is_object_detected</Condition><Action>check_object</Action></Sequence><Selector><Condition>is_obstacle_detected</Condition><Action>synchronize_movement</Action></Selector><Action>circle_object</Action></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'identify_object': 'Action: Use sensors to identify and classify objects in the environment. Always returns True.', 'pick_up_object': 'Action: Use robotic arm to pick up the specified object. Always returns True.', 'place_object': 'Action: Place the object at a designated location. Always returns True.', 'analyze_environment': 'Action: Use data from sensors to analyze the surrounding environment and identify potential obstacles or hazards. Always returns True.', 'is_object_identified': 'Condition: Check if the specified object has been successfully identified. Returns True if the object is identified, False otherwise.', 'is_object_picked_up': 'Condition: Check if the specified object has been successfully picked up. Returns True if the object is picked up, False otherwise.', 'is_environment_analyzed': 'Condition: Check if the environment has been successfully analyzed. Returns True if the analysis is complete, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Generate behavior tree for a robot to identify and analyze the environment, pick up a specific object, and place it at a designated location.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_environment_analyzed</Condition><Action>analyze_environment</Action></Sequence><Sequence><Condition>is_object_identified</Condition><Selector><Action>pick_up_object</Action><Sequence><Condition>is_object_picked_up</Condition><Action>place_object</Action></Sequence></Selector></Sequence></Selector></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'follow_leader': 'Action: Follow the designated leader within the swarm. Always returns True.', 'circle_leader': 'Action: Circle around the designated leader at a radius of 3 units. Always returns True.', 'detect_leader_position': 'Action: Use sensors to detect the position of the designated leader within the swarm. Always returns True.', 'navigate_to_target': 'Action: Use path planning algorithms to navigate to the specified target location. Always returns True.', 'is_leader_detected': 'Condition: Check if the designated leader is within view of the robot. Returns True if the leader is detected, False otherwise.', 'is_leader_in_range': 'Condition: Check if the designated leader is within 5 units of distance. Returns True if the leader is within range, False otherwise.', 'is_target_reached': 'Condition: Check if the robot has reached the specified target location. Returns True if the target is reached, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: Generate behavior tree for a swarm of robots to follow a designated leader and reach a specified target location.
7.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_target_reached</Condition><Action>navigate_to_target</Action></Sequence><Selector><Condition>is_leader_detected</Condition><Action>detect_leader_position</Action></Selector><Action>follow_leader</Action></Selector><Selector><Condition>is_leader_in_range</Condition><Action>circle_leader</Action></Selector></BehaviorTree>
###
4.// INSTRUCTIONS: Use only the following behaviors {'rotate_clockwise': "Action: Rotate the robot clockwise by 45 degrees. Always returns True.", 'rotate_counterclockwise': "Action: Rotate the robot counterclockwise by 45 degrees. Always returns True.", 'move_forward': 'Action: Move the robot one step forward in the current direction. Always returns True.', 'move_backward': 'Action: Move the robot one step backward from the current direction. Always returns True.', 'detect_obstacle': 'Condition: Check for obstacles in a 120 degree field of view. Returns True if an obstacle is detected, False otherwise.', 'detect_boundary': 'Condition: Check if the robot is within 5 units from the environment boundary. Returns True if the robot is close to the boundary, False otherwise.', 'detect_target': 'Condition: Check if the robot is within 10 units from the target location. Returns True if the robot is close to the target, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Generate behavior tree to navigate and avoid obstacles in a maze-like environment with a target to reach.
4.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>detect_obstacle</Condition><Selector><Action>rotate_clockwise</Action><Action>rotate_counterclockwise</Action></Selector></Sequence><Selector><Sequence><Condition>detect_target</Condition><Action>task_completed</Action></Sequence><Sequence><Condition>detect_boundary</Condition><Selector><Action>rotate_clockwise</Action><Action>rotate_counterclockwise</Action></Selector></Sequence></Selector></Sequence><Sequence><Action>move_forward</Action></Sequence></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'move_forward': 'Action: Move the robot one step forward in the current direction. Always returns True.', 'turn_left': 'Action: Turn the robot 90 degrees to the left. Always returns True.', 'turn_right': 'Action: Turn the robot 90 degrees to the right. Always returns True.', 'detect_target': 'Condition: Check if the robot is facing the target. Returns True if the target is in front of the robot, False otherwise.', 'detect_obstacle': 'Condition: Check for obstacles on the left and right sides of the robot. Returns True if any of the sides has an obstacle, False otherwise.', 'wait': 'Action: Wait for 5 seconds. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Generate behavior tree to navigate an obstacle course and reach the target location.
5.// OUTPUT:
<BehaviorTree><Sequence><Condition>detect_target</Condition><Action>wait</Action><Sequence><Condition>detect_obstacle</Condition><Sequence><Action>turn_left</Action></Sequence></Sequence></Sequence><Action>move_forward</Action></Sequence></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'move_forward': 'Action: Move the robot one step forward in the current direction. Always returns True.', 'turn_left': 'Action: Turn the robot 90 degrees to the left. Always returns True.', 'turn_right': 'Action: Turn the robot 90 degrees to the right. Always returns True.', 'detect_light_source': 'Condition: Check if the robot senses a light source nearby. Returns True if a light source is detected, False otherwise.', 'detect_edge': 'Condition: Check if the robot is close to an edge or cliff. Returns True if the robot is near an edge, False otherwise.', 'go_to_light': 'Action: Move towards the detected light source. Always returns True.', 'halt': 'Action: Stop all movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Generate behavior tree to search for and approach a light source while avoiding edges or cliffs.
6.// OUTPUT:
<BehaviorTree><Sequence><Condition>detect_light_source</Condition><Selector><Action>halt</Action><Action>go_to_light</Action></Selector></Sequence><Condition>detect_edge</Condition><Sequence><Selector><Action>turn_left</Action><Action>turn_right</Action></Selector></Sequence><Action>move_forward</Action></Sequence></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'move_forward': 'Action: Move the robot one step forward in the current direction. Always returns True.', 'turn_left': 'Action: Turn the robot 90 degrees to the left. Always returns True.', 'turn_right': 'Action: Turn the robot 90 degrees to the right. Always returns True.', 'detect_object': 'Condition: Check for an object in front of the robot. Returns True if an object is detected, False otherwise.', 'navigate_to_object': 'Action: Move towards the detected object. Always returns True.', 'detect_boundary': 'Condition: Check if the robot is near the boundary of the environment. Returns True if the robot is close to the boundary, False otherwise.', 'random_movement': 'Action: Move in a random direction. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: Generate behavior tree to explore the environment and locate objects.
7.// OUTPUT:
<BehaviorTree><Sequence><Condition>detect_object</Condition><Action>navigate_to_object</Action></Sequence><Selector><Sequence><Condition>detect_boundary</Condition><Selector><Action>turn_left</Action><Action>turn_right</Action></Selector></Sequence><Sequence><Action>random_movement</Action></Sequence></Selector><Action>move_forward</Action></Sequence></BehaviorTree>    
###
3.// INSTRUCTIONS: Use only the following behaviors {'is_object_detected': 'Condition: Checks if an object is detected within 5 units. Returns True if an object is detected within the specified range, False otherwise.', 'identify_object': 'Subtree node: Represents a behavior tree for identifying the detected object.', 'pick_up_object': 'Action: Picks up the detected object. Returns True if the action is successful, False otherwise.', 'navigate_to_object': 'Action: Navigates to the detected object. Returns True if the agent reaches the object, False otherwise.', 'drop_object': 'Action: Drops the carried object. Returns True if the object is successfully dropped, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3.// USER COMMAND: Navigate to the nearest object, identify it, and pick it up. Once picked up, return to the starting point and drop the object.
3.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>navigate_to_object</Action><Sequence><Condition>is_object_detected</Condition><Action>identify_object</Action><Action>pick_up_object</Action><Action>drop_object</Action></Sequence></Sequence></Selector></BehaviorTree>

###
4.// INSTRUCTIONS: Use only the following behaviors {'is_enemy_detected': 'Condition: Checks if an enemy is detected within 10 units. Returns True if an enemy is detected within the specified range, False otherwise.', 'attack_enemy': 'Action: Attacks the detected enemy. Returns True if the attack is successful, False otherwise.', 'escape': 'Action: Tries to escape from the enemy. Returns True if the action is successful, False otherwise.', 'is_obstacle_present': 'Condition: Checks for obstacles within 5 units. Returns True if an obstacle is detected, False otherwise.', 'avoid_obstacles': 'Action: Avoids obstacles detected within 5 units. Returns True if the action is successful, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Detect and attack enemies while avoiding obstacles.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_enemy_detected</Condition><Action>attack_enemy</Action><Selector><Sequence><Condition>is_obstacle_present</Condition><Action>avoid_obstacles</Action></Sequence></Selector></Sequence></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'patrol_area': 'Action: Patrol a designated area. Returns True if the agent successfully patrols the area, False otherwise.', 'is_area_explored': 'Condition: Checks if a designated area has been fully explored. Returns True if the area is fully explored, False otherwise.', 'collect_data': 'Action: Collect data within a designated area. Returns True if the data collection is successful, False otherwise.', 'return_home': 'Action: Return to the designated home location. Returns True if the agent successfully returns, False otherwise.', 'analyze_data': 'Action: Analyze the collected data and make a decision based on the results. Returns True if the analysis is successful, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Patrol a specified area, collect data, return to base, and analyze the data to make a decision.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>patrol_area</Action><Selector><Sequence><Condition>is_area_explored</Condition><Action>collect_data</Action><Selector><Sequence><Condition>is_area_explored</Condition><Action>return_home</Action></Sequence></Selector></Sequence></Selector></Sequence><Action>analyze_data</Action></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'is_object_visible': 'Condition: Checks if an object is visible within 10 units. Returns True if the object is visible within the specified range, False otherwise.', 'identify_object': 'Subtree node: Represents a behavior tree for identifying the visible object.', 'navigate_to_object': 'Action: Navigates to the visible object. Returns True if the agent reaches the object, False otherwise.', 'scan_surroundings': 'Action: Scans the surroundings to detect any visible objects. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Scan the surroundings and navigate to the nearest visible object.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>scan_surroundings</Action><Selector><Sequence><Condition>is_object_visible</Condition><Action>identify_object</Action><Action>navigate_to_object</Action></Sequence></Selector></Sequence></Selector></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'is_food_detected': 'Condition: Checks if food is detected within 5 units. Returns True if food is detected within the specified range, False otherwise.', 'collect_food': 'Action: Collects detected food. Returns True if the collection is successful, False otherwise.', 'return_to_nest': 'Action: Return to the nest. Returns True if the agent successfully returns, False otherwise.', 'is_nest_nearby': 'Condition: Checks if the nest is within 10 units. Returns True if the nest is within the specified range, False otherwise.', 'deposit_food': 'Action: Deposit the collected food in the nest. Returns True if the deposit is successful, False otherwise.', 'is_food_saved': 'Condition: Checks if food is successfully deposited in the nest. Returns True if the food is successfully deposited, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: Collect food and deposit it in the nest, returning to the nest as needed.
7.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_food_detected</Condition><Action>collect_food</Action><Selector><Sequence><Condition>is_nest_nearby</Condition><Action>return_to_nest</Action><Selector><Sequence><Condition>is_nest_nearby</Condition><Action>deposit_food</Action></Sequence></Selector></Sequence></Selector></Sequence><Condition>is_food_saved</Condition></Selector></BehaviorTree>
  
3.// INSTRUCTIONS: Use only the following behaviors {'initiate_combat': "Action: Move towards enemy and initiate combat. Always returns True.", 'evade_attack': 'Action: Evade enemy attacks. Always returns True.', 'attack_enemy': 'Action: Attack enemy with equipped weapon. Always returns True.', 'check_for_enemies': 'Condition: Check for enemies in the environment. Returns True if enemies are present, False otherwise.', 'is_enemy_near': 'Condition: Check if enemy is within 10 units. Returns True if enemy is within 10 units, False otherwise.', 'is_in_combat': 'Condition: Check if currently engaged in combat. Returns True if already in combat, False otherwise.', 'is_health_low': 'Condition: Check if health is below 30%. Returns True if health is low, False otherwise.', 'respawn': 'Action: Respawn at designated respawn point. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3.// USER COMMAND: Defend the base from incoming enemies. Evade attacks and engage in combat when enemies are near or initiate combat if no enemies are present. Respawn at designated point if health falls below 30%.
3.// OUTPUT:
<BehaviorTree><Selector><Sequence><Trigger>check_for_enemies</Trigger><Condition>is_health_low</Condition><Action>evade_attack</Action><Action>respawn</Action></Sequence><Sequence><Trigger>check_for_enemies</Trigger><Condition>is_in_combat</Condition><Condition>is_enemy_near</Condition><Action>attack_enemy</Action></Sequence><Sequence><Trigger>check_for_enemies</Trigger><Condition>is_enemy_near</Condition><Action>initiate_combat</Action></Sequence><Action>wander</Action></Selector></BehaviorTree>
 
4.// INSTRUCTIONS: Use only the following behaviors {'move_to_target': "Action: Move towards designated target. Always returns True.", 'follow_formation': 'Action: Maintain formation with designated agent. Always returns True.', 'avoid_collision': 'Action: Avoid collisions with nearby agents. Always returns True.', 'check_for_targets': 'Condition: Check for targets in the environment. Returns True if targets are present, False otherwise.', 'is_target_in_range': 'Condition: Check if target is within 20 units. Returns True if target is within 20 units, False otherwise.', 'is_agent_in_formation': 'Condition: Check if agent is in formation with designated agent. Returns True if in formation, False otherwise.', 'is_collision_detected': 'Condition: Check for collisions with nearby agents. Returns True if a collision is detected, False otherwise.', 'is_near_enemy_base': 'Condition: Check if agent is near enemy base. Returns True if near enemy base, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Lead the swarm to the enemy base while maintaining formation with designated agent. Avoid collisions and check for enemy targets along the way.
4.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_near_enemy_base</Condition><Action>task_completed</Action><Sequence><Condition>is_agent_in_formation</Condition><Condition>is_collision_detected</Condition><Action>avoid_collision</Action></Sequence><Sequence><Trigger>check_for_targets</Trigger><Condition>is_target_in_range</Condition><Action>move_to_target</Action><Action>follow_formation</Action></Sequence></Sequence></BehaviorTree>
 
5.// INSTRUCTIONS: Use only the following behaviors {'find_food': "Action: Move towards designated food source. Always returns True.", 'gather_food': 'Action: Gather food from designated source. Always returns True.', 'eat_food': 'Action: Consume gathered food. Always returns True.', 'check_for_food': 'Condition: Check for available food sources in the environment. Returns True if food is present, False otherwise.', 'is_food_near': 'Condition: Check if food is within 5 units. Returns True if food is within 5 units, False otherwise.', 'is_food_gathered': 'Condition: Check if food has been successfully gathered. Returns True if food has been gathered, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Search for and gather food from nearby sources. Eat the food once gathered.
5.// OUTPUT:
<BehaviorTree><Selector><Condition>is_food_near</Condition><Action>eat_food</Action><Sequence><Trigger>check_for_food</Trigger><Condition>is_food_gathered</Condition><Action>gather_food</Action><Action>eat_food</Action></Sequence><Sequence><Condition>is_food_near</Condition><Action>find_food</Action><Action>gather_food</Action><Action>eat_food</Action></Sequence></Selector></BehaviorTree>
 
6.// INSTRUCTIONS: Use only the following behaviors {'move_to_location': "Action: Move towards designated location. Always returns True.", 'search_and_destroy': 'Action: Search and destroy any enemy agents in designated area. Always returns True.', 'defend_location': 'Action: Defend designated location against incoming enemies. Always returns True.', 'check_for_enemies': 'Condition: Check for enemies in the environment. Returns True if enemies are present, False otherwise.', 'is_enemy_nearby': 'Condition: Check if enemy is within 10 units. Returns True if enemy is within 10 units, False otherwise.', 'is_location_attacked': 'Condition: Check if designated location is being attacked. Returns True if location is under attack, False otherwise.', 'is_location_defended': 'Condition: Check if designated location is being defended. Returns True if location is being defended, False otherwise.', 'is_in_area': 'Condition: Check if agent is within designated area. Returns True if within area, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Secure and defend the designated area from enemy attacks. Search for and eliminate any enemies within the area.
6.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_in_area</Condition><Action>task_completed</Action><Selector><Condition>is_location_attacked</Condition><Condition>is_location_defended</Condition><Selector><Trigger>check_for_enemies</Trigger><Condition>is_enemy_nearby</Condition><Action>search_and_destroy</Action></Selector><Sequence><Trigger>check_for_enemies</Trigger><Condition>is_enemy_nearby</Condition><Action>defend_location</Action></Sequence></Sequence></Selector></BehaviorTree>
 
7.// INSTRUCTIONS: Use only the following behaviors {'move_to_waypoint': "Action: Move towards designated waypoint. Always returns True.", 'find_closest_enemy': 'Action: Move towards the closest enemy in sight.
###
3.// INSTRUCTIONS: Use only the following behaviors {'detect_targets': 'Action: Scan the environment for targets. Always returns True.', 'approach_target': 'Action: Move towards the detected target. Always returns True.', 'is_target_reachable': 'Condition: Checks if the target is within the robot\'s reach. Returns True if target is reachable, False otherwise.', 'is_target_lost': 'Condition: Checks if the target has been lost. Returns True if target is lost, False otherwise.', 'is_obstacle_present': 'Condition: Checks for obstacles in the path. Returns True if obstacle is present, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3.// USER COMMAND: Search for a target and approach it while avoiding obstacles. If target is lost, return to starting position.
3.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>detect_targets</Action><Sequence><Condition>is_target_reachable</Condition><Action>approach_target</Action></Sequence><Sequence><Condition>is_obstacle_present</Condition><Action>avoid_obstacle</Action></Sequence></Sequence><Sequence><Condition>is_target_lost</Condition><Sequence><Condition>is_target_reachable</Condition><Action>return_to_start</Action></Sequence></Selector></BehaviorTree>

###
4.// INSTRUCTIONS: Use only the following behaviors {'inspect_area': 'Action: Move the robot in a predetermined pattern to inspect an area. Always returns True.', 'scan_surroundings': 'Action: Use sensors to scan the surroundings for any changes. Always returns True.', 'is_change_detected': 'Condition: Checks if there has been a change in the environment. Returns True if change is detected, False otherwise.', 'is_object_detected': 'Condition: Checks if a specific object is detected. Returns True if object is detected, False otherwise.', 'collect_object': 'Action: Collect the detected object. Always returns True.', 'drop_object': 'Action: Drop the collected object at a specific location. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Inspect the environment, scan for any changes and collect a specific object if detected. Drop the object at a designated location.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>inspect_area</Action><Action>scan_surroundings</Action><Sequence><Condition>is_change_detected</Condition><Selector><Sequence><Condition>is_object_detected</Condition><Action>collect_object</Action><Action>drop_object</Action></Sequence></Selector></Sequence></Sequence></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'check_battery_level': 'Action: Check the battery level of the robot. Always returns True.', 'is_battery_low': 'Condition: Checks if the battery level is below a specific threshold. Returns True if battery is low, False otherwise.', 'find_charging_station': 'Action: Find and navigate to the nearest charging station. Always returns True.', 'charge_robot': 'Action: Plug in the robot and charge it. Always returns True.', 'is_charging_complete': 'Condition: Checks if the robot's battery is fully charged. Returns True if charging is complete, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Verify battery level, find and charge robot if battery is low. Return to previous task once charging is complete.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>check_battery_level</Action><Selector><Sequence><Condition>is_battery_low</Condition><Action>find_charging_station</Action><Action>charge_robot</Action><Sequence><Condition>is_charging_complete</Condition><Action>return_to_previous_task</Action></Sequence></Sequence></Selector></Sequence></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'find_path': 'Action: Use mapping algorithms to find the shortest path to a designated location. Always returns True.', 'follow_path': 'Action: Follow the generated path to navigate to the designated location. Always returns True.', 'is_at_destination': 'Condition: Checks if the robot has reached the destination. Returns True if at destination, False otherwise.', 'is_obstacle_in_path': 'Condition: Checks for obstacles in the path. Returns True if obstacle is present, False otherwise.', 'replan_path': 'Action: Replan the path if an obstacle is detected. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Plan and follow the shortest path to a designated location while avoiding obstacles. If obstacle is detected, replan the path.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>find_path</Action><Action>follow_path</Action><Sequence><Condition>is_at_destination</Condition><Sequence><Condition>is_obstacle_in_path</Condition><Action>replan_path</Action></Sequence></Sequence></Sequence></Selector></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'wait_for_response': 'Action: Wait for a response from another robot. Always returns True.', 'send_message': 'Action: Send a message to another robot. Always returns True.', 'is_message_received': 'Condition: Checks if a message has been received. Returns True if message is received, False otherwise.', 'analyze_message': 'Action: Analyze the received message. Always returns True.', 'is_message_valid': 'Condition: Checks if the received message is valid. Returns True if message is valid, False otherwise.', 'act_on_message': 'Action: Act according to the received message. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: Communicate with another robot, receive a message and act on it. If the received message is not valid, wait for a new message.
7.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>wait_for_response</Action><Action>send_message</Action><Sequence><Condition>is_message_received</Condition><Action>analyze_message</Action><Sequence><Condition>is_message_valid</Condition><Action>act_on_message</Action></Sequence></Sequence><Sequence><Condition>not</Condition><Condition>is_message_valid</Condition><Action>wait_for_response</Action></Sequence></Selector></BehaviorTree> 

###
3.// INSTRUCTIONS: Use only the following behaviors {'wait_for_order': 'Condition: Check for a new order from the commander. Returns True if a new order is received, False otherwise.', 'move_to_target': 'Action: Move towards the designated target location. Always returns True.', 'scan_surroundings': 'Action: Use sensors to scan the surroundings for any potential threats. Always returns True.', 'is_enemy_detected': 'Condition: Check if an enemy is detected in the surroundings. Returns True if an enemy is detected, False otherwise.', 'attack_target': 'Action: Attack the designated target. Always returns True.', 'return_to_base': 'Action: Return to the base for resupply and reinforcement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3.// USER COMMAND: Construct a behavior tree for a robot to patrol and defend a designated area
3.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>is_enemy_detected</Condition><Action>attack_target</Action></Sequence><Sequence><Selector><Condition>wait_for_order</Condition><Sequence><Action>move_to_target</Action><Action>scan_surroundings</Action></Sequence></Selector><Action>wander</Action></Sequence></Selector><Action>return_to_base</Action></Sequence></BehaviorTree>

###
4.// INSTRUCTIONS: Use only the following behaviors {'request_permission': 'Action: Request permission from the user to access their location data. Returns True if permission is granted, False otherwise.', 'access_location_data': 'Action: Access the user's location data. Always returns True.', 'analyze_sensors': 'Action: Analyze data from various sensors to determine the user's environment. Always returns True.', 'is_environment_safe': 'Condition: Check if the user's environment is safe based on analyzed data. Returns True if the environment is safe, False otherwise.', 'navigate_safely': 'Action: Use navigation system to navigate the user to a safe location. Always returns True.', 'wait_for_rescue': 'Action: Stay in place and wait for rescue. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Construct a behavior tree for a robot to assist a lost user in an unknown environment
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Selector><Condition>is_environment_safe</Condition><Action>request_permission</Action><Action>access_location_data</Action><Action>analyze_sensors</Action><Action>navigate_safely</Action></Selector><Action>wait_for_rescue</Action></Sequence><Action>send_location_data_to_rescue_team</Action></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'start_heating': 'Action: Start heating system. Returns True if heating system is successfully started, False otherwise.', 'check_temperature': 'Condition: Check the current temperature. Returns True if the temperature is in desired range, False otherwise.', 'adjust_temperature': 'Action: Adjust the heating system to reach desired temperature. Always returns True.', 'stop_heating': 'Action: Stop the heating system. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Build a behavior tree for a robot to regulate and maintain the temperature in a room
5.// OUTPUT:
<BehaviorTree><Sequence><Selector><Condition>check_temperature</Condition><Action>start_heating</Action><Action>adjust_temperature</Action></Selector><Action>stop_heating</Action></Sequence></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'find_marker': 'Action: Use sensors to detect marker in the environment. Returns True if a marker is detected, False otherwise.', 'gather_resources': 'Action: Gather resources at the location of the marker. Always returns True.', 'is_inventory_full': 'Condition: Check if the robot's inventory is full. Returns True if the inventory is full, False otherwise.', 'return_to_base': 'Action: Return to the base to drop off gathered resources. Always returns True.', 'unload_resources': 'Action: Unload the resources from the inventory. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Make a behavior tree for a robot to explore, gather resources, and return to base
6.// OUTPUT:
<BehaviorTree><Sequence><Selector><Condition>is_inventory_full</Condition><Selector><Sequence><Action>find_marker</Action><Action>gather_resources</Action></Sequence><Action>return_to_base</Action></Selector><Action>unload_resources</Action></Sequence></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'take_order': 'Action: Take and process an order from a customer. Returns True if the order is successfully processed, False otherwise.', 'check_supplies': 'Action: Check current supplies in inventory. Always returns True.', 'order_supplies': 'Action: Place an order for supplies if inventory is running low. Always returns True.', 'navigate_to_delivery_location': 'Action: Use navigation system to navigate to the delivery location. Always returns True.', 'deliver_order': 'Action: Deliver the order to the customer. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: Construct a behavior tree for a robot to take and fulfill customer orders for a food delivery service
7.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>take_order</Condition><Action>check_supplies</Action><Action>order_supplies</Action></Sequence><Action>navigate_to_delivery_location</Action><Action>deliver_order</Action></Selector><Action>report_success_to_management</Action></Sequence></BehaviorTree>  
###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'avoid obstacles, move towards target, and form a line if target within 5 units.' Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>is_obstacle_detected</Condition> <Action>avoid_obstacle</Action> </Sequence> <Sequence> <Condition>is_target_detected</Condition> <Sequence> <Condition>is_target_reached</Condition> <Action>form_line</Action> </Sequence> <Action>continue_movement_agent</Action> </Sequence> </Selector> </BehaviorTree>
 
###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'detect target, move towards it, and avoid obstacles while maintaining line formation.' Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Action>form_line</Action> <Condition>is_target_detected</Condition> </Sequence> <Sequence> <Condition>is_obstacle_detected</Condition> <Action>avoid_obstacle</Action> </Sequence> <Sequence> <Condition>is_target_detected</Condition> <Action>continue_movement_agent</Action> </Sequence> <Action>change_color_to_green</Action> </Selector> </BehaviorTree>
 
###
6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'detect and avoid obstacles while continuing movement.' Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>is_obstacle_detected</Condition> <Action>avoid_obstacle</Action> </Sequence> <Action>continue_movement_agent</Action> </Selector> </BehaviorTree>
 
###
7.// INSTRUCTIONS: Use only the following behaviors {'agent_movement 
###
4.// INSTRUCTIONS: Use only the following behaviors{'detect_intrusion': 'Condition: Check for any intrusion in the designated area. Returns True if an intrusion is detected, False otherwise.', 'determine_intruder_type': 'Action: Determine the type of intruder (human, animal, or object) and communicate to the swarm. Always returns True.', 'sound_alarm': 'Action: Activate the alarm to signal an intrusion to the designated authorities. Always returns True.', 'send_warning': 'Action: Send a warning message to the other robots in the swarm about the intrusion. Always returns True.', 'initiate_lockdown': 'Action: Initiate a lockdown procedure to secure the area. Always returns True.', 'verify_authorization': 'Action: Verify the authorization of the detected human intruder. Returns True if the intruder is authorized, False otherwise.', 'capture_intruder': 'Action: Attempt to capture and detain the unauthorized human intruder. Returns True if the intruder is successfully detained, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Generate behavior tree for a swarm of security robots to detect and handle unauthorized intrusions in a designated area.
4.// OUTPUT:
<BehaviorTree><Sequence><Condition>detect_intrusion</Condition><Selector><Sequence><Condition>verify_authorization</Condition><Delimiter><Action>sound_alarm</Action><Action>initiate_lockdown</Action></Delimiter></Sequence><Sequence><Condition>send_warning</Condition><Action>capture_intruder</Action></Sequence><Action>determine_intruder_type</Action></Selector></Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'follow_leader': 'Action: Follow the designated leader robot in the swarm. Always returns True.', 'move_in_formation': 'Action: Move in a coordinated formation within the designated area. Always returns True.', 'scatter': 'Action: Randomly scatter and avoid obstacles within the designated area. Always returns True.', 'is_target_found': 'Condition: Check if the designated target is found within the designated area. Returns True if the target is found, False otherwise.', 'is_leader_lost': 'Condition: Check if the designated leader robot is lost or malfunctioning. Returns True if the leader is lost, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles within the designated area. Returns True if an obstacle is detected, False otherwise.', 'is_formation_stable': 'Condition: Check if the swarm robots are maintaining a stable formation. Returns True if the formation is stable, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Generate behavior tree for a swarm of robots to search for and follow a designated target within a designated area while maintaining formation.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_target_found</Condition><Action>follow_target</Action></Sequence><Selector><Sequence><Condition>is_leader_lost</Condition><Action>scatter</Action></Sequence><Selector><Sequence><Condition>is_obstacle_detected</Condition><Action>avoid_obstacle</Action></Sequence><Action>move_in_formation</Action></Selector></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'search_and_destroy': 'Action: Search for and destroy any enemy targets within the designated area. Returns True if a target is destroyed, False otherwise.', 'is_enemy_detected': 'Condition: Check for any enemy targets within the designated area. Returns True if an enemy is detected, False otherwise.', 'evade_enemy_fire': 'Action: Evade enemy fire while searching for targets. Always returns True.', 'return_to_base': 'Action: Return to base if the designated search area is clear. Always returns True.', 'is_search_area_clear': 'Condition: Check if the designated search area is clear of any enemy targets. Returns True if the area is clear, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Generate behavior tree for a swarm of military drones to search for and destroy enemy targets within a designated search area.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_enemy_detected</Condition><Action>search_and_destroy</Action></Sequence><Selector><Sequence><Condition>is_search_area_clear</Condition><Action>return_to_base</Action></Sequence><Action>evade_enemy_fire</Action></Selector></Selector></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'detect_fire': 'Condition: Check for any fires within the designated area. Returns True if a fire is detected, False otherwise.', 'extinguish_fire': 'Action: Extinguish the fire within the designated area. Returns True if the fire is extinguished, False otherwise.', 'move_to_designated_area': 'Action: Move to the designated area to perform fire detection and extinguishing. Always returns True.', 'broadcast_message': 'Action: Broadcast a message to the swarm about the location of the detected fire. Returns the location of the fire as True.', 'return_to_base': 'Action: Return to base after successfully extinguishing the fire. Always returns True.', 'call_for_back-up': 'Action: Call for additional robots to assist in fire extinguishing. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: Generate behavior tree for a swarm of firefighting robots to detect and extinguish fires within a designated area.
7.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>detect_fire</Condition><Action>broadcast_message</Action></Sequence><Selector><Sequence><Condition>is_location_reached</Condition><Action>extinguish_fire</Action><Action>call_for_back-up</Action></Sequence><Selector><Sequence><Condition>is_fire_extinguished</Condition><Action>return_to_base</Action></Sequence><Action>move_to_designated_area</Action></Selector></Selector></BehaviorTree> 
###
3.// INSTRUCTIONS: Use only the following behaviors {'approach_target': 'Action: Move towards the target. Returns True if within 2 units of distance, False otherwise.', 'change_shape_to_circle': 'Action: Change agent's shape to a circle. Always returns True.', 'change_shape_to_square': 'Action: Change agent's shape to a square. Always returns True.', 'detect_obstacle': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'detect_target': 'Condition: Check if target is within 5 units. Returns True if the target is within 5 units of distance, False otherwise.', 'follow_path': 'Action: Follow a predetermined path. Always returns True.', 'is_at_goal': 'Condition: Check if the agent is at the goal. Returns True if the agent is at the goal, False otherwise.', 'is_shape_changed': 'Condition: Check if the agent's shape has changed. Returns True if the shape has changed, False otherwise.', 'is_target_reached': 'Condition: Check if target has been reached. Returns True if agent is within 1 unit of the target, False otherwise.', 'stop_movement': 'Action: Stop agent's movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3.// USER COMMAND: generate behavior tree to 'Start from a square shape, follow a path, detect target, move towards target, stop at the goal and change shape to circle.'
3.// OUTPUT:
<BehaviorTree> <Sequence> <Action>change_shape_to_square</Action> <Selector> <Sequence> <Action>follow_path</Action> <Sequence> <Condition>detect_target</Condition> <Action>approach_target</Action> </Sequence> </Sequence> <Selector> <Condition>is_at_goal</Condition> <Sequence> <Action>stop_movement</Action> <Action>change_shape_to_circle</Action> </Sequence> </Selector> </Sequence> </BehaviorTree>

###
4.// INSTRUCTIONS: Use only the following behaviors {'change_speed_to_slow': 'Action: Change agent's speed to slow. Always returns True.', 'click_on_button': 'Action: Click on a designated button. Returns True if successfully clicked, False otherwise.', 'enter_password': 'Action: Enter a password in a designated input field. Returns True if successful, False otherwise.', 'is_button_active': 'Condition: Check if the button is active. Returns True if the button is active, False otherwise.', 'is_field_occupied': 'Condition: Check if the input field is occupied. Returns True if occupied, False otherwise.', 'is_password_correct': 'Condition: Check if the password entered is correct. Returns True if correct, False otherwise.', 'move_to_object': 'Action: Move towards a designated object. Returns True if within 3 units of distance, False otherwise.', 'open_door': 'Action: Open a designated door. Returns True if successfully opened, False otherwise.', 'stop_agent': 'Action: Stop agent's movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Enter password, click on button, move to the exit, and open the door.'
4.// OUTPUT:
<BehaviorTree> <Sequence> <Action>enter_password</Action> <Selector> <Condition>is_password_correct</Condition> <Action>click_on_button</Action> </Selector> <Selector> <Sequence> <Condition>is_field_occupied</Condition> <Action>move_to_object</Action> </Sequence> <Selector> <Sequence> <Condition>is_button_active</Condition> <Action>open_door</Action> </Sequence> <Selector> <Action>stop_agent</Action> </Sequence> </Selector> </Sequence> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'change_direction_left': 'Action: Change agent's direction to left. Always returns True.', 'change_direction_right': 'Action: Change agent's direction to right. Always returns True.', 'continue_moving': 'Action: Continue agent's movement. Always returns True.', 'detect_obstacle': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'detect_target': 'Condition: Check if target is within 5 units. Returns True if the target is within 5 units of distance, False otherwise.', 'follow_path': 'Action: Follow a predetermined path. Always returns True.', 'is_obstacle_nearby': 'Condition: Check if an obstacle is within 2 units. Returns True if an obstacle is within 2 units of distance, False otherwise.', 'is_path_blocked': 'Condition: Check if path ahead is blocked. Returns True if an obstacle is detected ahead, False if path is clear.', 'move_to_target': 'Action: Move towards the target. Returns True if within 1 unit of distance, False otherwise.', 'stop_movement': 'Action: Stop agent's movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Start moving, follow a path, detect obstacle, change direction to right, move towards target, then stop and change direction to left.'
5.// OUTPUT:
<BehaviorTree> <Sequence> <Action>continue_moving</Action> <Selector> <Sequence> <Action>follow_path</Action> <Selector> <Sequence> <Condition>is_obstacle_nearby</Condition> <Action>change_direction_right</Action> </Sequence> <Selector> <Condition>is_path_blocked</Condition> <Sequence> <Condition>detect_target</Condition> <Action>move_to_target</Action> </Sequence> </Selector> </Selector> <Selector> <Condition>detect_obstacle</Condition> <Action>change_direction_left</Action> </Selector> <Sequence> <Action>stop_movement</Action> </Sequence> </Sequence> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'change_direction_random': 'Action: Change agent's direction randomly. Always returns True.', 'detect_obstacle': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'move_forward': 'Action: Move forward in the current direction. Always returns True.', 'move_backward': 'Action: Move backward in the current direction. Always returns True.', 'strafe_left': 'Action: Strafe to the left of the current direction. Always returns True.', 'strafe_right': 'Action: Strafe to the right of the current direction. Always returns True.', 'turn_right_90': Action: Turn the agent's direction 90 degrees to the right. Always returns True.', 'turn_left_90': Action: Turn the agent's direction 90 degrees to the left. Always returns True.', 'wait': 'Action###
4.// INSTRUCTIONS: Use only the following behaviors {'detect_targets': 'Action: Detect and track targets. Always returns True.', 'calculate_target_distance': 'Function: Calculates the distance of targets from the robot. Returns a list of distances.', 'get_average_target_distance': 'Function: Calculates the average distance of targets from the robot. Returns the average distance value.', 'is_target_within_range': 'Condition: Check if any target is within range. Returns True if at least one target is within range, False otherwise.', 'move_towards_target': 'Action: Move towards the closest target. Always returns True.', 'fire_at_target': 'Action: Fire at the targeted enemy. Always returns True.'}, to construct behavior tree in XML format to the following command. if the bot has weapons available then Output 'Execute a behavior using at least one weapon' else ('Not in possession of weapons')
4.// USER COMMAND: Command a bot to detect nearby targets, move towards the closest target, and fire if weapons are available.
4.// OUTPUT:
<BehaviorTree> <Sequence> <Action>detect_targets</Action> <Selector> <Sequence> <Condition>is_target_within_range</Condition> <Action>move_towards_target</Action> </Sequence> <Sequence> <Function>get_average_target_distance</Function> <Action>fire_at_target</Action> </Sequence> </Selector> </Sequence> </BehaviorTree>
###
5.// INSTRUCTIONS: Use only the following behaviors {'swap_places': 'Action: Swap positions with another robot. Always returns True.', 'check_battery_level': 'Condition: Check the battery level of the robot. Returns True if battery level is above 50%, False if below 50%.', 'charge_battery': 'Action: Return to charging station and charge the battery. Always returns True.', 'pick_up_resource': 'Action: Pick up a nearby resource. Always returns True.', 'drop_off_resource': 'Action: Drop off the collected resources at the designated location. Always returns True.'}, to construct behavior tree in XML format to the following command. if robot's battery level is below 50% then Output 'Charge battery at charging station' else 'Collect resource and drop it off at designated location'
5.// USER COMMAND: Command a robot to alternate between charging its battery at a station and collecting resources.
5.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>check_battery_level</Condition> <Action>charge_battery</Action> </Sequence> <Sequence> <Condition>not check_battery_level</Condition> <Selector> <Sequence> <Condition>is_resource_available</Condition> <Action>pick_up_resource</Action> </Sequence> <Sequence> <Condition>not is_resource_available</Condition> <Action>drop_off_resource</Action> </Sequence> </Selector> </Sequence> </Selector> </BehaviorTree>
###
6.// INSTRUCTIONS: Use only the following behaviors {'move_forward': 'Action: Move one step forward. Always returns True.', 'turn_left': 'Action: Turn 90 degrees to the left. Always returns True.', 'turn_right': 'Action: Turn 90 degrees to the right. Always returns True.', 'go_back_to_start': 'Action: Go back to the starting point of its path. Always returns True.', 'is_edge_detected': 'Condition: Check if the robot has reached the end of the current path. Returns True if the edge is detected, False otherwise.', 'is_turn_around_needed': 'Condition: Check if the robot has turned around at the end of its path. Returns True if turn around is needed, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', }, to construct behavior tree in XML format to the following command. If the robot has reached the end of the path but has not turned around, then Output 'Turn around before continuing'
6.// USER COMMAND: Guide a robot through a predetermined path while avoiding obstacles.
6.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Action>move_forward</Action> <Selector> <Sequence> <Condition>is_obstacle_detected</Condition> <Action>turn_left</Action> </Sequence> <Sequence> <Condition>not is_obstacle_detected</Condition> <Selector> <Sequence> <Condition>is_edge_detected</Condition> <Action>turn_around</Action> <Sequence> <Condition>is_turn_around_needed</Condition> <Action>turn_right</Action> </Sequence> <Sequence> <Condition>not is_turn_around_needed</Condition> <Action>move_forward</Action> </Sequence> </Selector> </Sequence> </Selector> </Sequence> <Sequence> <Condition>is_edge_detected</Condition> <Action>go_back_to_start</Action> </Sequence> </Selector> </BehaviorTree>
###
7.// INSTRUCTIONS: Use only the following behaviors {'detect_obstacles': 'Action: Detect nearby obstacles. Always returns True.', 'count_obstacles': 'Function: Counts the number of obstacles detected. Returns the total number of obstacles.', 'is_obstacle_limit_exceeded': 'Condition: Check if the number of obstacles exceeds 5. Returns True if limit is exceeded, False otherwise.', 'move_around_obstacle': 'Action: Move around the detected obstacle. Always returns True.', 'avoid_obstacles': 'Action: Avoid obstacles in the robot's path. Always returns True.'}, to construct behavior tree in XML format to the following command. if the robot has detected more than 5 obstacles, then Output 'Avoid obstacles' else 'Count the number of detected obstacles and move around them'
7.// USER COMMAND: Instruct a robot to navigate through a complex environment filled with obstacles.
7.// OUTPUT:
<BehaviorTree> <Sequence> <Action>detect_obstacles</Action> <Selector> <Sequence> <Function>count_obstacles</Function> <Condition>is_obstacle_limit_exceeded</Condition> <Action>avoid_obstacles</Action> </Sequence> <Sequence> <Function>count_obstacles</Function> <Condition>not is_obstacle_limit_exceeded</Condition> <Action>move_around_obstacle</Action> </Sequence> </Selector> </Sequence> </BehaviorTree>// Since the provided behaviors do not have any specific task instructions, we apologize for the inconvenience and inform the user that the task cannot be completed with the given set of behaviors. 
###
3.// INSTRUCTIONS: Use only the following behaviors {'collect_items': 'Action: Collect items and store them in the robot's inventory. Returns True when all items have been collected.', 'find_path_to_destination': 'Subtree node: Represents a behavior tree for finding the optimal path to a specified destination.', 'is_obstacle_detected': 'Condition: Checks if an obstacle is detected in the robot's path. Returns True if an obstacle is detected, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3.// USER COMMAND: Collect all items in the specified location, but avoid any obstacles.
3.// OUTPUT:
<BehaviorTree><Action>collect_items</Action><Sequence><Condition>is_obstacle_detected</Condition><Action>find_path_to_destination</Action></Sequence></BehaviorTree>

###
4.// INSTRUCTIONS: Use only the following behaviors {'communicate_with_other_robots': 'Action: Transmit information to other robots in the swarm. Always returns True.', 'sense_enemies': 'Action: Use sensors to detect any enemies in the vicinity. Returns True if enemies are detected, False otherwise.', 'escape_area': 'Subtree node: Represents a behavior tree for escaping a dangerous area.', 'is_safe': 'Condition: Checks if the current area is safe. Returns True if the area is safe, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Communicate with other robots, sense for enemies, and try to escape if the area is unsafe.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>communicate_with_other_robots</Action><Action>sense_enemies</Action><Selector><Condition>is_safe</Condition><Action>escape_area</Action></Selector></Sequence></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'collect_resources': 'Action: Collect resources from the environment and store them in the robot's inventory. Returns True when all resources have been collected.', 'build_structure': 'Action: Use collected resources to build a structure in a designated area. Returns True when the structure is complete.', 'repair_structure': 'Action: Use collected resources to repair a damaged structure in a designated area. Returns True when the structure is fully repaired.', 'is_structure_broken': 'Condition: Checks if a designated structure is broken. Returns True if the structure is broken, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Collect resources and build or repair a designated structure if it is broken.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>collect_resources</Action><Sequence><Condition>is_structure_broken</Condition><Action>build_structure</Action></Sequence><Selector><Condition>is_structure_broken</Condition><Action>repair_structure</Action></Selector></Sequence></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'analyze_data': 'Action: Use sensors to analyze data collected from the environment. Returns True when the analysis is complete.', 'calculate_optimal_path': 'Action: Use the analyzed data to calculate an optimal path through the environment. Returns True when the path is calculated.', 'navigate_path': 'Action: Follow the calculated optimal path. Returns True when the robot reaches its destination.', 'is_path_blocked': 'Condition: Checks if the calculated path is blocked by any obstacles. Returns True if the path is blocked, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Analyze data, calculate optimal path, and navigate through the environment while avoiding any obstacles.
6.// OUTPUT:
<BehaviorTree><Sequence><Action>analyze_data</Action><Selector><Sequence><Action>calculate_optimal_path</Action><Selector><Condition>is_path_blocked</Condition><Action>navigate_path</Action></Selector></Sequence></Selector></Sequence></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'find_nearest_supply_drop': 'Action: Search for the nearest supply drop location. Returns True when the location is found.', 'recharge_battery': 'Action: Use the found supply drop to recharge the robot's battery. Returns True when the battery is fully charged.', 'is_battery_low': 'Condition: Checks if the robot's battery level is below a specific threshold. Returns True if the battery is low, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: If the battery is low, search for a supply drop location and recharge. Otherwise, continue with the current task.
7.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_battery_low</Condition><Sequence><Action>find_nearest_supply_drop</Action><Action>recharge_battery</Action></Sequence></Sequence><Action>continue_task</Action></Selector></BehaviorTree>###
4.// INSTRUCTIONS: Use only the following behaviors {'move_to_location': 'Action: Move the robot to a specific location. Takes in input as the target location and returns True when the robot reaches the target.', 'inspect_object': 'Action: Inspect the object at the current location. Returns True if the object is deemed safe, False otherwise.', 'analyze_environment': 'Action: Use sensors to analyze the environment and gather information. Always returns True.', 'is_audio_detected': 'Condition: Check for any audio signals in the environment. Returns True if audio is detected, False otherwise.', 'is_object_safe': 'Condition: Check if the inspected object has been deemed safe. Returns True if object is safe, False otherwise.', 'is_location_reached': 'Condition: Check if the robot has reached the target location. Returns True if location is reached, False otherwise.', 'wait': 'Action: Stop all actions and wait for further instructions. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Move to the designated location, inspect the object, and analyze the environment for any potential dangers.'
4.// OUTPUT:
<BehaviorTree><Sequence><Action>move_to_location</Action><Selector><Sequence><Condition>is_location_reached</Condition><Action>inspect_object</Action><Sequence><Condition>is_object_safe</Condition><Action>analyze_environment</Action></Sequence></Sequence></Selector></Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'check_battery_level': 'Condition: Check the battery level of the robot. Returns True if battery level is above 50%, False otherwise.', 'recharge_battery': 'Action: Recharge the robot's battery to full capacity. Always returns True.', 'move_to_coordinate': 'Action: Move the robot to specified coordinates. Takes in input as the target coordinates and returns True when the robot reaches the target.', 'record_data': 'Action: Record sensor data and store it for later use. Always returns True.', 'analyse_data': 'Action: Analyze the recorded sensor data and make decisions based on the data. Always returns True.', 'is_data_available': 'Condition: Check if sensor data has been recorded. Returns True if data is available, False otherwise.', 'is_analysis_complete': 'Condition: Check if the data analysis is complete. Returns True if analysis is complete, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Monitor the environment, record sensor data, analyze the data, and recharge the battery if it falls below 50%.'
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>check_battery_level</Condition><Action>recharge_battery</Action></Sequence><Sequence><Action>record_data</Action><Sequence><Condition>is_data_available</Condition><Action>analyse_data</Action><Sequence><Condition>is_analysis_complete</Condition><Action>recharge_battery</Action></Sequence></Sequence></Sequence><Sequence><Condition>is_data_available</Condition><Action>analyse_data</Action></Sequence></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'detect_enemy': 'Condition: Check for enemies in the surrounding area. Returns True if an enemy is detected, False otherwise.', 'navigate_to_location': 'Action: Use the robot's navigation system to move to a specified location. Always returns True.', 'engage_enemy': 'Action: Engage in combat with the detected enemy. Always returns True.', 'protect_teammate': 'Action: Move to a location between the enemy and specified teammate to provide cover. Takes in input as the teammate's coordinates and returns True when position is reached.', 'heal_teammate': 'Action: Use healing abilities or tools to assist the specified teammate. Takes in input as the teammate's name and returns True when healing is complete.', 'is_teammate_vulnerable': 'Condition: Check if the specified teammate is in danger. Returns True if the teammate is vulnerable, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Detect and engage enemies, protect and heal a vulnerable teammate.'
6.// OUTPUT:
<BehaviorTree><Sequence><Condition>detect_enemy</Condition><Selector><Action>engage_enemy</Action><Sequence><Condition>is_teammate_vulnerable</Condition><Selector><Action>protect_teammate</Action><Action>heal_teammate</Action></Selector></Sequence></Selector></Sequence></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'random_movement': 'Action: Move in a random direction using sensors and navigation system. Always returns True.', 'gather_resources': 'Action: Collect any available resources in the environment. Always returns True.', 'produce_item': 'Action: Use gathered resources to produce a specified item. Takes in input as the item to be produced and returns True when production is complete.', 'is_resource_available': 'Condition: Check if there are any resources available in the environment. Returns True if resources are available, False otherwise.', 'is_item_produced': 'Condition: Check if the requested item has been produced. Returns True if item is produced, False otherwise.', 'deposit_item': 'Action: Deposit the produced item at the designated location. Takes in input as the location coordinates and returns True when item is deposited.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: generate behavior tree to 'Gather resources, produce requested item, and deposit it at the designated location.'
7.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>is_resource_available</Condition><Action>gather_resources</Action></Sequence><Sequence><Action>random_movement</Action><Selector><Sequence><Condition>is_resource_available</Condition><Action>gather_resources</Action><Sequence><Condition>is_item_produced</Condition><Action>deposit_item</Action></Sequence></Selector></Sequence><Sequence><Condition>is_item_produced</Condition><Action>deposit_item</Action></Sequence></Selector></Sequence><Sequence><Selector><Action>produce_item</Action><Sequence><Condition>is_item_produced</Condition><Action>deposit_item</Action></Sequence></Selector></Sequence></BehaviorTree> 
###
3.// INSTRUCTIONS: Use only the following behaviors {'change_direction': 'Action: Change direction the robot is facing. Always returns True.', 'is_end_point_reached': 'Condition: Checks if the robot has reached the designated end point. Returns True if the end point is reached, False otherwise.', 'get_next_waypoint': 'Action: Calculates and moves to the next waypoint in the given path. Always returns True.', 'detect_obstacles': 'Subtree node: Represents a behavior tree for obstacle detection and avoidance.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3.// USER COMMAND: Navigate through a pre-defined path, avoiding obstacles along the way and reaching the final endpoint.
3.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_end_point_reached</Condition><Action>change_direction</Action></Sequence><Action>get_next_waypoint</Action></Selector><Subtree>detect_obstacles</Subtree></BehaviorTree>

###
4.// INSTRUCTIONS: Use only the following behaviors {'deploy_countermeasures': 'Action: Deploy countermeasures to protect the swarm from enemy fire. Always returns True.', 'is_threat_detected': 'Condition: Checks if there is a threat detected in the environment. Returns True if a threat is detected, False otherwise.', 'retreat_to_safe_zone': 'Action: Move the swarm to a designated safe zone. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: If a threat is detected, deploy countermeasures and retreat to a safe zone. Otherwise, continue with the current mission.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_threat_detected</Condition><Sequence><Action>deploy_countermeasures</Action><Action>retreat_to_safe_zone</Action></Sequence></Sequence><Subtree>current_mission_behavior_tree</Subtree></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'is_in_hiding': 'Condition: Checks if the robot is in a hiding spot. Returns True if in hiding, False otherwise.', 'hide': 'Action: Moves the robot to a designated hiding spot. Always returns True.', 'is_enemy_detected': 'Condition: Checks for enemy presence. Returns True if an enemy is detected, False otherwise.', 'prepare_ambush': 'Action: Prepares an ambush strategy for when enemies approach. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: If in hiding, prepare an ambush when enemies are detected. Otherwise, find and move to a hiding spot.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_in_hiding</Condition><Sequence><Condition>is_enemy_detected</Condition><Action>prepare_ambush</Action></Sequence></Sequence><Sequence><Subtree>find_hiding_spot_behavior_tree</Subtree><Action>hide</Action></Sequence></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'is_zone_safe': 'Condition: Checks if the designated zone is safe. Returns True if the zone is safe, False otherwise.', 'is_backup_call_received': 'Condition: Checks if a backup call has been received. Returns True if a backup call is received, False otherwise.', 'send_backup': 'Action: Sends out a call for backup. Always returns True.', 'move_to_zone': 'Action: Moves the robot to the designated zone. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: If the designated zone is safe, move to the zone. Otherwise, send a backup call and continue to monitor for safety.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_zone_safe</Condition><Action>move_to_zone</Action></Sequence><Sequence><Condition>is_backup_call_received</Condition><Action>send_backup</Action></Sequence></Selector><Subtree>monitor_for_safety_behavior_tree</Subtree></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'drop_bomb': 'Action: Releases a bomb on a designated target. Always returns True.', 'navigate_to_target': 'Action: Calculates and navigates to a designated target. Always returns True.', 'is_target_reached': 'Condition: Checks if the designated target has been reached. Returns True if the target is reached, False otherwise.', 'fly_in_formation': 'Action: Ensures robots stay in formation while flying.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: Fly in formation while navigating to a target and releasing a bomb when the target is reached.
7.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_target_reached</Condition><Action>fly_in_formation</Action></Sequence><Action>navigate_to_target</Action></Selector><Subtree>drop_bomb_behavior_tree</Subtree></BehaviorTree> 
###
4.// INSTRUCTIONS: Use only the following behaviors {'move_to_object': 'Action: Move towards the designated object. Always returns True.', 'pick_up_object': 'Action: Pick up the designated object and bring it back to the starting point. Always returns True.', 'put_down_object': 'Action: Put down the designated object at the starting point. Always returns True.', 'is_object_nearby': 'Condition: Check if the designated object is nearby. Returns True if the object is within range, False otherwise.', 'is_object_picked_up': 'Condition: Check if the designated object has been successfully picked up. Returns True if the object is picked up, False otherwise.', 'is_object_at_start': 'Condition: Check if the designated object has been successfully returned to the starting point. Returns True if the object is at the starting point, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Generate a behavior tree for a robot to pick up an object from a specific location and bring it back to the starting point.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_object_nearby</Condition><Action>pick_up_object</Action></Sequence><Action>wander</Action></Selector><Sequence><Condition>is_object_picked_up</Condition><Action>move_to_start</Action></Sequence><Sequence><Condition>is_object_at_start</Condition><Action>put_down_object</Action></Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'move_towards_goal': 'Action: Move towards the designated goal. Always returns True.', 'move_around_obstacle': 'Action: Move around obstacles while still heading towards the goal. Always returns True.', 'is_goal_reached': 'Condition: Check if the designated goal has been reached. Returns True if the goal is reached, False otherwise.', 'is_obstacle_ahead': 'Condition: Check if an obstacle is straight ahead. Returns True if an obstacle is detected, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Generate a behavior tree for a robot to navigate towards a goal while avoiding obstacles.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_obstacle_ahead</Condition><Action>move_around_obstacle</Action></Sequence><Action>move_towards_goal</Action></Selector><Condition>is_goal_reached</Condition></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'move_to_resource': 'Action: Move towards the closest resource. Always returns True.', 'collect_resource': 'Action: Collect the resource at the current location. Always returns True.', 'return_to_base': 'Action: Return to the designated base with the collected resources. Always returns True.', 'is_resource_nearby': 'Condition: Check if a resource is within the robot's range. Returns True if a resource is detected, False otherwise.', 'is_resource_collected': 'Condition: Check if the designated resource has been successfully collected. Returns True if the resource is collected, False otherwise.', 'is_at_base': 'Condition: Check if the robot has reached the designated base. Returns True if the robot is at the base, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Generate a behavior tree for a robot to autonomously collect and transport resources to a designated base.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_resource_nearby</Condition><Action>collect_resource</Action></Sequence><Action>wander</Action></Selector><Sequence><Condition>is_resource_collected</Condition><Action>return_to_base</Action></Sequence><Sequence><Condition>is_at_base</Condition><Action>drop_off_resource</Action></Sequence></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'move_to_barrier': 'Action: Move towards the designated barrier. Always returns True.', 'destroy_barrier': 'Action: Destroy the barrier at the current location. Always returns True.', 'navigate_around_barrier': 'Action: Navigate around the barrier while still heading towards the goal. Always returns True.', 'is_barrier_nearby': 'Condition: Check if a barrier is within range. Returns True if a barrier is detected, False otherwise.', 'is_barrier_destroyed': 'Condition: Check if the designated barrier has been successfully destroyed. Returns True if the barrier is destroyed, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: Generate a behavior tree for a robot to destroy barriers while navigating towards a goal.
7.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_barrier_nearby</Condition><Action>destroy_barrier</Action></Sequence><Action>wander</Action></Selector><Sequence><Condition>is_barrier_destroyed</Condition><Action>move_towards_goal</Action></Sequence><Action>navigate_around_barrier</Action></BehaviorTree>
###
4.// INSTRUCTIONS: Use only the following behaviors {'move_forward': 'Action: Move the robot one step forward in the current direction. Always returns True.', 'turn_left': 'Action: Turn the robot 90 degrees to the left. Always returns True.', 'turn_right': 'Action: Turn the robot 90 degrees to the right. Always returns True.', 'read_barcode': "Action: Use the barcode reader to scan and read a barcode. Returns True if a barcode is successfully read, False otherwise.", 'is_target_reached': 'Condition: Check if the robot has reached the target destination. Returns True if the target is reached, False otherwise.', 'is_barcode_valid': 'Condition: Check if the barcode is a valid code. Returns True if the barcode is valid, False otherwise.', 'is_path_clear': 'Condition: Check if the path in the current direction is clear and safe to navigate. Returns True if the path is clear, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Construct a behavior tree for a robot to navigate to a specified location, using a barcode as a guide.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_barcode_valid</Condition><Action>read_barcode</Action></Sequence><Sequence><Condition>is_target_reached</Condition><Action>stop_movement</Action></Sequence><Sequence><Condition>is_path_clear</Condition><Selector><Action>turn_left</Action><Action>turn_right</Action></Selector></Sequence></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'move_forward': 'Action: Move the robot one step forward in the current direction. Always returns True.', 'turn_left': 'Action: Turn the robot 90 degrees to the left. Always returns True.', 'turn_right': 'Action: Turn the robot 90 degrees to the right. Always returns True.', 'gather_food': "Action: Gather food from the surrounding environment. Returns True if food is successfully collected, False otherwise.", 'is_food_available': 'Condition: Check if there is food available in the robot's surroundings. Returns True if food is available, False otherwise.', 'is_nest_reached': 'Condition: Check if the robot has reached the designated nest location. Returns True if the nest is reached, False otherwise.', 'is_full': 'Condition: Check if the robot is carrying maximum capacity of food. Returns True if the robot is full, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Create a behavior tree to gather food from the environment and deliver it to the nest.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_full</Condition><Action>return_to_nest</Action></Sequence><Sequence><Condition>is_nest_reached</Condition><Action>drop_food</Action></Sequence><Action>gather_food</Action></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'move_forward': 'Action: Move the robot one step forward in the current direction. Always returns True.', 'turn_left': 'Action: Turn the robot 90 degrees to the left. Always returns True.', 'turn_right': 'Action: Turn the robot 90 degrees to the right. Always returns True.', 'detect_colors': "Action: Use the color sensor to detect and categorize different colors in the environment. Returns True if colors are successfully detected, False otherwise.", 'is_target_reached': 'Condition: Check if the robot has reached the designated target location. Returns True if the target is reached, False otherwise.', 'is_obstacle_detected': 'Condition: Check if there is an obstacle in front of the robot. Returns True if an obstacle is detected, False otherwise.', 'is_color_match': 'Condition: Check if the detected color matches the designated target color. Returns True if a match is found, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Construct a behavior tree for a robot to navigate to a target location while avoiding obstacles and identifying the color of the surrounding environment.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_obstacle_detected</Condition><Action>navigate_around_obstacle</Action></Sequence><Sequence><Condition>is_target_reached</Condition><Action>stop_movement</Action></Sequence><Sequence><Condition>is_color_match</Condition><Action>continue_movement</Action></Sequence><Action>detect_colors</Action></Selector></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'move_forward': 'Action: Move the robot one step forward in the current direction. Always returns True.', 'turn_left': 'Action: Turn the robot 90 degrees to the left. Always returns True.', 'turn_right': 'Action: Turn the robot 90 degrees to the right. Always returns True.', 'detect_light': "Action: Use the light sensor to detect and measure the intensity of light in the environment. Returns True if light is successfully detected, False otherwise.", 'change_direction': 'Action: If light is too bright, change direction and continue moving forward. Returns True if direction is successfully changed, False otherwise.', 'is_target_reached': 'Condition: Check if the robot has reached the designated target location. Returns True if the target is reached, False otherwise.', 'is_light_detected': 'Condition: Check if the light sensor has detected any light in front of the robot. Returns True if light is detected, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: Create a behavior tree for a robot to navigate towards a target location while avoiding bright sources of light.
7.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_target_reached</Condition><Action>stop_movement</Action></Sequence><Sequence><Condition>is_light_detected</Condition><Action>change_direction</Action></Sequence><Action>detect_light</Action></Selector></BehaviorTree>Note: The tree will continuously check for the target, if found, will change color to green and go back to wandering. Once in the nest, the agent will change color to white and freeze movement.

###
3.// INSTRUCTIONS: Use only the following behaviors {'lift_weight': 'Action: Lift weight using robotic arm. Returns True if weight is successfully lifted, False otherwise.', 'rotate_90_degrees': 'Action: Rotate the robot 90 degrees clockwise. Always returns True.', 'move_backwards': 'Action: Move the robot backwards 2 units. Always returns True.', 'is_obstacle_detected': 'Condition: Check for obstacles in the current direction. Returns True if an obstacle is detected, False otherwise.', 'is_weight_detected': 'Condition: Check if weight is within range of robotic arm. Returns True if weight is within range, False otherwise.', 'is_weight_lifted': 'Condition: Check if weight has been successfully lifted. Returns True if weight is lifted, False otherwise.', 'is_target_reached': 'Condition: Check if the robot has reached the target location. Returns True if target location is reached, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3.// USER COMMAND: generate behavior tree for a robot to navigate through an obstacle course, lift a weight, and place it at the target location.
3.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>is_obstacle_detected</Condition><Action>rotate_90_degrees</Action><Action>move_backwards</Action></Sequence><Action>move_randomly</Action></Selector><Sequence><Condition>is_weight_detected</Condition><Selector><Sequence><Condition>is_weight_lifted</Condition><Action>move_to_target_location</Action><Action>lift_weight</Action></Sequence><Action>rotate_90_degrees</Action><Action>move_backwards</Action></Selector></Sequence></Sequence></BehaviorTree>

###
4.// INSTRUCTIONS: Use only the following behaviors {'move_to_next_node': 'Action: Move to next node in the graph. Returns True if successful, False if node does not exist.', 'exploit_environment': 'Action: Scan and exploit the resources in the current node. Returns True if successful, False otherwise.', 'is_next_node_available': 'Condition: Check if there is a next node in the graph. Returns True if next node is available, False otherwise.', 'is_resources_available': 'Condition: Check if there are resources to exploit in the current node. Returns True if resources are available, False otherwise.', 'is_goal_reached': 'Condition: Check if the goal node has been reached. Returns True if goal node is reached, False otherwise.', 'return_to_start': 'Action: Return to the starting node using the shortest path. Returns True if successful, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to navigate through a resource-gathering graph, exploit resources and return to starting node.
4.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>is_next_node_available</Condition> <Action>move_to_next_node</Action> <Action>exploit_environment</Action> </Sequence> <Action>return_to_start</Action> </Selector> <Action>move_randomly</Action> </Sequence> </BehaviorTree>
Note: The tree will continuously check for the next node, if available, will move and exploit resources. Once all resources have been collected, the robot will return to the starting node using the shortest path.

###
5.// INSTRUCTIONS: Use only the following behaviors {'pick_up_item': 'Action: Pick up the item located in front of the robot. Returns True if item is successfully picked up, False otherwise.', 'drop_item': 'Action: Drop the currently held item. Returns True if item is successfully dropped, False otherwise.', 'move_left': 'Action: Move the robot 10 units to the left. Always returns True.', 'move_right': 'Action: Move the robot 10 units to the right. Always returns True.', 'is_item_detected': 'Condition: Check if an item is located in front of the robot. Returns True if an item is detected, False otherwise.', 'is_item_held': 'Condition: Check if an item is currently held by the robot. Returns True if an item is held, False otherwise.', 'is_robot_in_position': 'Condition: Check if the robot has reached its designated position. Returns True if the robot is in the correct position, False otherwise.', 'is_movement_blocked': 'Condition: Check if the robot's movement is blocked by an obstacle. Returns True if the movement is blocked, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree for a robot to navigate through an obstacle course, pick up and drop items, and reach a designated position.
5.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>is_movement_blocked</Condition><Selector><Sequence><Condition>is_item_detected</Condition><Action>pick_up_item</Action><Action>move_right</Action></Sequence><Action>move_left</Action></Selector></Sequence><Action>move_randomly</Action></Selector><Sequence><Condition>is_item_held</Condition><Selector><Sequence><Condition>is_robot_in_position</Condition><Action>drop_item</Action></Sequence><Action>move_to_designated_position</Action></Selector></Sequence></Sequence></BehaviorTree>
Note: The tree will continuously check for obstacles, if blocked, will move left or pick up item and then move right. Once an item is held, the robot will move to the designated position and drop the item there.

###
6.// INSTRUCTIONS: Use only the following behaviors {'find_next_target': 'Action: Find the next target by scanning the environment. Returns True if a target is found, False otherwise.', 'chase_target': 'Action: Move towards the target while maintaining a safe distance. Returns True if target is still in range, False otherwise.', 'avoid_obstacles': 'Action: Use sensors to detect obstacles and move accordingly. Always returns True.', 'is_target_reached': 'Condition: Check if the robot has reached the target. Returns True if the target is reached, False otherwise.', 'is_obstacle_detected': 'Condition: Check if any obstacles are detected in the surroundings. Returns True if an obstacle is detected, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree for a robot to navigate through a dynamic environment, chase and avoid obstacles to reach a target.
6.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>is_obstacle_detected</Condition><Action>avoid_obstacles</Action></ 
###
3.// INSTRUCTIONS: Use only the following behaviors {'detect_object': 'Subtree node: Represents a behavior tree for detecting objects in the environment.', 'move_to_object': 'Action: Makes the agent move towards a specified object. Returns True when the agent reaches the object.', 'grab_object': 'Action: Makes the agent grab the detected object. Returns True if successful, False otherwise.', 'drop_object': 'Action: Makes the agent drop any held object. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3.// USER COMMAND: Detect a nearby object and move towards it. Once reached, grab the object and drop it in a designated location.
3.// OUTPUT:
<BehaviorTree><Sequence><Subtree>detect_object</Subtree><Action>move_to_object</Action><Action>grab_object</Action><Action>move_to_location</Action><Action>drop_object</Action></Sequence></BehaviorTree>

###
4.// INSTRUCTIONS: Use only the following behaviors {'identify_target': 'Subtree node: Represents a behavior tree for identifying targets in the environment.', 'aim_and_shoot': 'Action: Makes the agent aim and shoot at the identified target. Returns True when target is hit, False otherwise.', 'switch_weapon': 'Action: Makes the agent switch to a different weapon. Returns True if successful, False otherwise.', 'has_target': 'Condition: Checks if the agent has a target in their line of sight. Returns True if there is a target, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Identify and aim at nearby targets. If no targets available, switch to a different weapon.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>has_target</Condition><Subtree>identify_target</Subtree><Action>aim_and_shoot</Action></Sequence><Action>switch_weapon</Action></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'analyze_environment': 'Subtree node: Represents a behavior tree for analyzing the environment.', 'calculate_shortest_path': 'Action: Makes the agent calculate the shortest path to a designated location. Returns True if successful, False otherwise.', 'move_on_path': 'Action: Makes the agent move along the calculated path. Returns True when destination is reached, False otherwise.', 'is_blocked': 'Condition: Checks if the agent's current path is blocked. Returns True if blocked, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Analyze the environment and calculate and move along the shortest path to a designated location. If path is blocked, recalculate and try again.
5.// OUTPUT:
<BehaviorTree><Sequence><Subtree>analyze_environment</Subtree><Action>calculate_shortest_path</Action><Sequence><Condition>is_blocked</Condition><Action>calculate_shortest_path</Action></Sequence><Action>move_on_path</Action></Sequence></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'collect_resources': 'Subtree node: Represents a behavior tree for collecting resources in the environment.', 'check_inventory': 'Action: Makes the agent check their inventory for a specific resource. Returns True if resource is present, False otherwise.', 'use_item': 'Action: Makes the agent use the specified item from their inventory. Returns True if successful, False otherwise.', 'is_inventory_full': 'Condition: Checks if the agent's inventory is full. Returns True if full, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Collect resources in the environment and use them to craft a specific item. If inventory is full, drop unnecessary resources before collecting.
6.// OUTPUT:
<BehaviorTree><Sequence><Subtree>collect_resources</Subtree><Sequence><Action>check_inventory</Action><Subtree>use_item</Subtree></Sequence><Condition>is_inventory_full</Condition></Sequence></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'search_for_signs': 'Action: Makes the agent search for signs of a specific enemy in the environment. Returns True if found, False otherwise.', 'move_carefully': 'Action: Makes the agent move carefully while searching for signs. Always returns True.', 'engage_enemy': 'Action: Makes the agent engage with the identified enemy. Returns True when enemy is defeated, False otherwise.', 'on_enemy_detected': "Event: Triggers when the agent detects a specific enemy. Returns True if enemy is identified, False otherwise."}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: Search for signs of a specific enemy and engage with them when detected. If unable to find any signs, move carefully and keep searching.
7.// OUTPUT:
<BehaviorTree><Selector><Sequence><Trigger>on_enemy_detected</Trigger><Action>engage_enemy</Action></Sequence><Sequence><Action>search_for_signs</Action><Action>move_carefully</Action></Sequence></Selector></BehaviorTree>###
3.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3.// USER COMMAND: generate behavior tree to 'navigate to a specific location while avoiding obstacles and staying within a certain boundary' Output only the XML behavior tree without extra text.
3.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_target_detected</Condition><Action>move_forward</Action><Action>update_map</Action></Sequence><Sequence><Condition>is_obstacle_detected</Condition><Action>avoid_obstacle</Action><Action>update_map</Action></Sequence><Sequence><Condition>is_path_blocked</Condition><Action>turn_left</Action></Sequence><Action>wander</Action></Selector></BehaviorTree>
###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'gather objects from a set of predefined locations and return to base' Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_target_detected</Condition><Action>move_forward</Action><Action>update_map</Action></Sequence><Sequence><Condition>is_obstacle_detected</Condition><Action>avoid_obstacle</Action><Action>update_map</Action></Sequence><Sequence><Condition>is_path_blocked</Condition><Action>turn_left</Action></Sequence><Action>wander</Action></Selector></BehaviorTree>
###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'coordinate with other robots to cover the entire area' Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_target_detected</Condition><Action>move_forward</Action><Action>update_map</Action></Sequence><Sequence><Condition>is_obstacle_detected</Condition><Action>avoid_obstacle</Action><Action>update_map</Action></Sequence><Sequence><Condition>is_area_mapped</Condition><Action>wander###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'obliterate_target': 'Action: Use weapon to obliterate target. Always returns True.', 'is_weapon_equipped': 'Condition: Check if the agent has a weapon equipped. Returns True if a weapon is equipped, False otherwise.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'When a weapon is equipped, attack the target, otherwise explore for one'.
4.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_weapon_equipped</Condition><Sequence><Condition>is_target_detected</Condition><Action>obliterate_target</Action><Action>task_completed</Action></Sequence><Action>wander</Action></Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'move_to_target': 'Action: Move towards the designated target location. Returns True when the target is reached.', 'target_reached': 'Condition: Checks if the target location has been reached. Returns True if target location is reached, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Move to a specific location (5,3)'.
5.// OUTPUT:
<BehaviorTree><Sequence><Condition>target_reached</Condition><Action>move_to_target 5,3</Action></Sequence></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'survey_surroundings': 'Action: Use sensors to gather information about the surroundings. Always returns True.', 'ignore_enemy': 'Condition: Checks if there are any enemies nearby. Returns False if there are enemies nearby, True otherwise.', 'retaliate': 'Action: Attack any nearby enemies. Always returns True.', 'flee': 'Action: Run away from nearby enemies. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'If enemies are nearby, retaliate, otherwise survey surroundings'.
6.// OUTPUT:
<BehaviorTree><Selector><Condition>ignore_enemy</Condition><Sequence><Condition>survey_surroundings</Condition><Action>attack</Action></Sequence><Action>flee</Action></Selector></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'find_path_to_target': 'Action: Find the optimal path to the designated target. Returns True when the path is found.', 'map_values': 'Function: Calculates the perceived value of each location on the map. Returns a list of values.', 'evaluate_paths': 'Function: Evaluates the values of different paths and returns the optimal path.', 'move_along_path': 'Action: Move along the designated path. Returns True when reaching the end.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: generate behavior tree to 'Find the best path to reach a target location that maximizes the perceived value of the path'.
7.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>find_path_to_target</Action><Action>map_values</Action><Action>evaluate_paths</Action></Sequence><Action>move_along_path</Action></Selector></BehaviorTree> 
###
4.// INSTRUCTIONS: Use only the following behaviors {'detect_sign': 'Condition: Check for a sign in the environment. Returns True if a sign is detected, False otherwise.', 'follow_sign': 'Subtree node: Represents a behavior tree for following a sign.', 'stop_following': 'Action: Stop following the sign. Always returns True.', 'get_close': 'Action: Move closer to the sign. Always returns True.', 'take_picture': 'Action: Take a picture of the sign. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Follow the sign, move closer, and take a picture. If no sign is present, do nothing.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>detect_sign</Condition><Sequence><Action>follow_sign</Action><Action>get_close</Action><Action>take_picture</Action></Sequence></Sequence><Action>stop_following</Action></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'change_color_to_red': "Action: Change agent's color to red. Always returns True.", 'signal_for_help': "Action: Send a distress signal to nearby agents. Always returns True.", 'search_for_debris': "Subtree node: Represents a behavior tree for searching for debris.", 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Search for debris and if target is found, send distress signal and change color to red.
5.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_target_detected</Condition><Sequence><Action>search_for_debris</Action><Action>change_color_to_red</Action><Action>signal_for_help</Action></Sequence></Sequence></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'change_direction_left': "Action: Change agent's direction to left. Always returns True.", 'change_direction_right': "Action: Change agent's direction to right. Always returns True.", 'keep_moving': 'Action: Continue agent's movement. Always returns True.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: If obstacle is detected, turn left or right and continue moving.
6.// OUTPUT:
<BehaviorTree><Selector><Condition>is_obstacle_detected</Condition><Sequence><Action>change_direction_left</Action><Action>keep_moving</Action></Sequence><Sequence><Action>change_direction_right</Action><Action>keep_moving</Action></Sequence></Selector></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'count_neighbors': "Action: Count the number of neighbors within a radius. Returns True if neighbors are present, False otherwise.", 'validate_neighbors': "Condition: Check if number of neighbors is within desired range. Returns True if neighbor count is within range, False otherwise.", 'coordinate_with_neighbors': 'Subtree node: Represents a behavior tree for coordinating with neighbors.', 'is_in_position': 'Condition: Check if in position. Returns True if in position, False otherwise.', 'repair': 'Action: Repair or fix any issues. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: Count neighbors, validate number, coordinate with neighbors, and if in position, repair any issues.
7.// OUTPUT:
<BehaviorTree><Sequence><Action>count_neighbors</Action><Condition>validate_neighbors</Condition><Action>coordinate_with_neighbors</Action><Condition>is_in_position</Condition><Action>repair</Action></Sequence></BehaviorTree>###

3.// INSTRUCTIONS: Use only the following behaviors {'move_forward': 'Action: Move the robot one step forward in the current direction. Always returns True.', 'rotate_left': 'Action: Rotate the robot 90 degrees counterclockwise. Always returns True.', 'rotate_right': 'Action: Rotate the robot 90 degrees clockwise. Always returns True.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3.// USER COMMAND: Move forward, if obstacle is detected on the right, rotate left, if obstacle is detected on the left, rotate right.
3.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>move_forward</Action></Sequence><Sequence><Condition>is_obstacle_detected</Condition><Action>rotate_left</Action></Sequence><Sequence><Condition>is_obstacle_detected</Condition><Action>rotate_right</Action></Sequence></Selector></BehaviorTree>

###
4.// INSTRUCTIONS: Use only the following behaviors {'detect_flame': 'Condition: Check for the presence of fire. Returns True if fire is detected, False otherwise.', 'move_closer_to_flame': 'Action: Move toward the flame until within 5 units. Always returns True.', 'collect_water': 'Action: Collect water from nearby source. Always returns True.', 'drop_water': 'Action: Drop water on fire. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Detect fire, move closer if found, collect water, and drop on fire.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>detect_flame</Condition><Sequence><Action>move_closer_to_flame</Action><Action>collect_water</Action><Action>drop_water</Action><Action>task_completed</Action></Sequence></Sequence><Action>Say (Sorry, I can't do the task)</Action></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'sense_light': 'Condition: Check if light is detected. Returns True if light is detected, False otherwise.', 'approach_light': 'Action: Move toward the light source. Always returns True.', 'avoid_obstacle': 'Action: Avoid obstacles by moving in a circular motion. Always returns True.', 'stop_movement': 'Action: Stop all movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Sense light, approach light source, if obstacle is detected, avoid and continue approaching light, and stop when light is reached.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>sense_light</Condition><Sequence><Action>approach_light</Action><Sequence><Condition>avoid_obstacle</Condition><Action>approach_light</Action></Sequence><Action>stop_movement</Action><Action>task_completed</Action></Sequence></Sequence><Action>Say (Sorry, I can't do the task)</Action></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'detect_target': 'Condition: Check for the presence of target. Returns True if target is detected, False otherwise.', 'move_toward_target': 'Action: Move towards the target until within 10 units. Always returns True.', 'grab_target': 'Action: Grab the target. Always returns True.', 'carry_target': 'Action: Carry the target while moving forward. Always returns True.', 'drop_target': 'Action: Drop the target once reaching the designated location. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Detect target, move towards it, grab it, carry it while moving forward, and drop it at designated location.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>detect_target</Condition><Sequence><Action>move_toward_target</Action><Action>grab_target</Action><Action>carry_target</Action><Action>drop_target</Action><Action>task_completed</Action></Sequence></Sequence><Action>Say (Sorry, I can't do the task)</Action></Selector></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'search_for_target': 'Subtree node: Represents a behavior tree for searching and locating the target.', 'collect_resource': 'Subtree node: Represents a behavior tree for collecting resources.', 'return_to_nest': 'Action: Return to the nest. Always returns True.', 'deposit_resource': 'Action: Deposit collected resources at the nest. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: Find target, collect resources, return to nest, and deposit resources.
7.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>search_for_target</Action><Selector><Sequence><Action>collect_resource</Action><Sequence><Action>return_to_nest</Action><Action>deposit_resource</Action><Action>task_completed</Action></Sequence></Selector></Selector><Action>Say (Sorry, I can't do the task)</Action></Selector></BehaviorTree> 
###
4.// INSTRUCTIONS: Use only the following behaviors {'check_weather': 'Action: Check current weather conditions. Always returns True.', 'is_weather_good': 'Condition: Check if weather conditions are favorable. Returns True if weather is good, False otherwise.', 'is_weather_bad': 'Condition: Check if weather conditions are unfavorable. Returns True if weather is bad, False otherwise.', 'return_to_nest': 'Action: Return to the designated nest location. Always returns True.', 'gather_resources': 'Action: Gather resources for the upcoming weather. Always returns True.', 'check_resources': 'Condition: Check if enough resources have been gathered. Returns True if enough resources have been gathered, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Check the current weather, if it's good, continue exploring. If it's bad, gather resources and return to the designated nest location.' Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree><Sequence><Action>check_weather</Action><Selector><Condition>is_weather_good</Condition><Action>explore</Action><Sequence><Action>gather_resources</Action><Condition>check_resources</Condition></Sequence><Action>return_to_nest</Action></Selector></Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'detect_target': 'Action: Scan the environment for potential targets. Always returns True.', 'identify_target': 'Action: Identify the target based on predefined criteria. Always returns True.', 'is_target_identified': 'Condition: Check if the target has been identified. Returns True if the target has been identified, False otherwise.', 'navigate_to_target': 'Action: Navigate towards the identified target. Always returns True.', 'attack_target': 'Action: Engage in attack behavior towards the target. Always returns True.', 'is_target_dead': 'Condition: Check if the target has been eliminated. Returns True if the target has been eliminated, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Scan the environment for potential targets, identify the target, navigate towards it, and attack until the target is eliminated' Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree><Sequence><Action>detect_target</Action><Sequence><Action>identify_target</Action><Condition>is_target_identified</Condition></Sequence><Sequence><Action>navigate_to_target</Action><Sequence><Action>attack_target</Action><Condition>is_target_dead</Condition></Sequence></Sequence></Sequence></BehaviorTree>  

###
6.// INSTRUCTIONS: Use only the following behaviors {'explore': 'Action: Explore the environment to find potential targets. Always returns True.', 'detect_group': 'Action: Scan the environment for a group of robots. Always returns True.', 'identify_leader': 'Action: Identify the leader of the group based on predefined criteria. Always returns True.', 'is_leader_identified': 'Condition: Check if the leader has been identified. Returns True if the leader has been identified, False otherwise.', 'follow_leader': 'Action: Follow the identified leader. Always returns True.', 'is_follower_close': 'Condition: Check if any other followers are already close to the leader. Returns True if other followers are already close, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Explore the environment to find potential targets, detect a group of robots, identify the leader, and follow them while ensuring other followers are not too close' Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree><Sequence><Sequence><Action>explore</Action><Sequence><Action>detect_group</Action><Condition>is_group_detected</Condition></Sequence></Sequence><Sequence><Action>identify_leader</Action><Condition>is_leader_identified</Condition></Sequence><Sequence><Action>follow_leader</Action><Condition>is_follower_close</Condition></Sequence></Sequence></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'detect_hazard': 'Action: Scan the environment for any hazards. Always returns True.', 'avoid_hazard': 'Action: Avoid the detected hazard. Always returns True.', 'is_hazard_safe': 'Condition: Check if the area is clear of hazards. Returns True if the area is clear, False otherwise.', 'detect_target': 'Action: Scan the environment for a potential target. Always returns True.', 'navigate_to_target': 'Action: Navigate towards the identified target. Returns True.', 'check_target_state': 'Condition: Check the state of the target. Returns True if the target is in a vulnerable state, False otherwise.', 'attack_target': 'Action: Engage in attack behavior towards the target. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: generate behavior tree to 'Scan the environment for hazards, avoid them until it is safe, then scan for a potential target, navigate towards it, and attack it if in a vulnerable state'. Output only the XML behavior tree without extra text.
7.// OUTPUT:
<BehaviorTree><Sequence><Action>detect_hazard</Action><Sequence><Action>avoid_hazard</Action><Condition>is_hazard_safe</Condition></Sequence><Sequence><Action>detect_target</Action><Sequence><Action>navigate_to_target</Action><Condition>check_target_state</Condition></Sequence><Sequence><Action>attack_target</Action></Sequence></Sequence></BehaviorTree>
###
4.// INSTRUCTIONS: Use only the following behaviors {'fly_to_next_location': 'Action: Fly the drone to the next designated location. Always returns True.', 'take_photo': 'Action: Take a photo of the current location using the onboard camera. Always returns True.', 'analyze_photo': 'Action: Analyze the photo for any anomalies or objects of interest. Always returns True.', 'return_to_base': 'Action: Return the drone to the base station. Always returns True.', 'is_mission_complete': 'Condition: Check if the entire designated area has been scanned and analyzed. Returns True if mission is complete, False otherwise.', 'is_target_detected': 'Condition: Check if a target is detected in the current location. Returns True if a target is detected, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Generate behavior tree for a drone to conduct aerial surveillance and return to base once mission is complete
4.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_mission_complete</Condition><Action>return_to_base</Action><Action>fly_to_next_location</Action><Action>take_photo</Action><Selector><Sequence><Condition>is_target_detected</Condition><Action>analyze_photo</Action></Sequence></Selector></Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'move_forward': 'Action: Move the robot forward. Always returns True.', 'turn_left': 'Action: Turn the robot to the left. Returns True if successfully turned, False otherwise.', 'turn_right': 'Action: Turn the robot to the right. Returns True if successfully turned, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles in front of the robot. Returns True if an obstacle is detected, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Generate behavior tree to navigate a maze and reach the end point
5.// OUTPUT:
<BehaviorTree><Sequence><Selector><Condition>is_obstacle_detected</Condition><Selector><Sequence><Action>turn_left</Action><Action>move_forward</Action></Sequence><Action>turn_right</Action></Selector></Selector><Selector><Condition>is_obstacle_detected</Condition><Selector><Sequence><Action>turn_right</Action><Action>move_forward</Action></Sequence><Action>turn_left</Action></Selector></Selector></Sequence></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'detect_objects': 'Action: Use sensors to detect objects in 360 degree radius. Always returns True.', 'navigate': 'Action: Navigate towards a specified location. Returns True once the location is reached, False if navigation fails.', 'collect_object': 'Action: Pick up the detected object and store it for transport. Returns True if successfully collected, False if no objects are detected.', 'drop_off_object': 'Action: Drop off the collected object at a specified location. Returns True if successfully dropped off, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Generate behavior tree for a robot to collect and transport objects from one location to another
6.// OUTPUT:
<BehaviorTree><Sequence><Action>detect_objects</Action><Sequence><Action>navigate</Action><Selector><Sequence><Condition>is_object_detected</Condition><Action>collect_object</Action></Sequence><Selector><Condition>is_object_collected</Condition><Action>drop_off_object</Action></Selector></Selector></Sequence></Sequence></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'detect_people': 'Action: Use sensors to detect people in the surrounding area. Always returns True.', 'analyze_people': 'Action: Analyze the detected people for specific features. Always returns True.', 'track_person': 'Action: Track the movements of the person and maintain a safe distance. Always returns True.', 'call_for_assistance': 'Action: If a person with specific features is detected, call for assistance. Returns True if assistance is called, False otherwise.', 'is_person_detected': 'Condition: Check if a person has been detected. Returns True if a person is detected, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: Generate behavior tree for a robot to assist in monitoring for specific individuals in a building
7.// OUTPUT:
<BehaviorTree><Action>detect_people</Action><Action>analyze_people</Action><Selector><Condition>is_person_detected</Condition><Sequence><Action>track_person</Action><Sequence><Condition>call_for_assistance</Condition><Action>wait_for_assistance</Action></Sequence></Selector></BehaviorTree> 
###
4.// INSTRUCTIONS: Use only the following behaviors {'move_forward': 'Action: Move in the forward direction. Always returns True.', 'rotate_right': 'Action: Rotate 90 degrees to the right. Always returns True.', 'rotate_left': 'Action: Rotate 90 degrees to the left. Always returns True.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_target_detected': 'Condition: Check if target is within 5 units. Returns True if the target is within 5 units, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 2 units. Returns True if the target is within 2 units, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Navigate towards the target, avoiding obstacles on the way.
4.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>is_target_reached</Condition> <Action>task_completed</Action> </Sequence> <Selector> <Sequence> <Condition>is_obstacle_detected</Condition> <Action>rotate_left</Action> </Sequence> <Selector> <Sequence> <Condition>is_obstacle_detected</Condition> <Action>rotate_right</Action> </Sequence> <Sequence> <Condition>is_target_detected</Condition> <Action>move_forward</Action> </Sequence> </Selector> </Sequence> </Sequence> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'signal_friend': 'Action: Signal a nearby friend robot. Always returns True.', 'get_signal': 'Function: Receive signal from a nearby friend robot. Returns True if signal received, False otherwise.', 'transform_to_tower': 'Action: Transform into a tower for defensive purposes. Always returns True.', 'run_from_enemy': 'Action: Run away from enemy robots. Always returns True.', 'attack_enemy': 'Action: Attack enemy robots in sight. Always returns True.', 'is_friend_nearby': 'Condition: Check if a friend robot is nearby. Returns True if friend robot is within 10 units, False otherwise.', 'is_enemy_nearby': 'Condition: Check if an enemy robot is nearby. Returns True if enemy robot is within 20 units, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Group up with friends and transform into a tower to defend against enemy robots.
5.// OUTPUT:
<BehaviorTree> <Selector> <Condition>is_friend_nearby</Condition> <Action>signal_friend</Action> <Sequence> <Condition>get_signal</Condition> <Action>transform_to_tower</Action> <Action>task_completed</Action> </Sequence> <Sequence> <Condition>is_enemy_nearby</Condition> <Selector> <Condition>is_friend_nearby</Condition> <Action>signal_friend</Action> <Action>run_from_enemy</Action> </Selector> <Selector> <Condition>is_enemy_nearby</Condition> <Action>attack_enemy</Action> </Selector> </Sequence> </Selector> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'start_moving': 'Action: Start moving. Always returns True.', 'stop_moving': 'Action: Stop moving. Always returns True.', 'is_target_detected': 'Condition: Check if target is within 3 units. Returns True if the target is within 3 units, False otherwise.', 'move_to_target': 'Action: Move towards the target. Always returns True.', 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_reached': 'Condition: Check if target is within 1 unit. Returns True if the target is within 1 unit, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Navigate towards the target while avoiding obstacles and stop within 5 units of it.
6.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>is_path_clear</Condition> <Sequence> <Action>move_to_target</Action> <Sequence><Condition>is_obstacle_detected</Condition><Action>avoid_obstacle</Action></Sequence> </Sequence> <Condition>is_target_reached</Condition> <Action>stop_moving</Action> <Action>task_completed</Action> </Sequence> <Sequence> <Condition>is_target_detected</Condition> <Action>start_moving</Action> </Sequence> </Selector> </BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'start_moving': 'Action: Start moving. Always returns True.', 'stop_moving': 'Action: Stop moving. Always returns True.', 'is_target_detected': 'Condition: Check if target is within 3 units. Returns True if the target is within 3 units, False otherwise.', 'move_to_target': 'Action: Move towards the target. Always returns True.', 'wait': 'Action: Wait for a specified amount of time. Always returns True.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_reached': 'Condition: Check if target is within 1 unit. Returns True if the target is within 1 unit, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: Move towards the target while waiting 2 seconds before continuing straight to it.
7.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Action>wait</Action> <Action>start_moving</Action> <Sequence> <Condition>is_path_clear</Condition> <Action>move_to_target</Action> <Selector> <Condition>is_obstacle_detected</Condition> <Sequence> <Condition>is_path_clear</Condition> <Action>move_to_target</Action> </Sequence> <Action>stop_moving</Action> </Selector> <Condition>is_target_reached</Condition> <Action>task_completed</Action> </Sequence> </Sequence> </BehaviorTree>Note: This is just a partial behavior tree that only covers some of the behaviors necessary for the task.

###
4.// INSTRUCTIONS: Use only the following behaviors {'geolocate_target': 'Condition: Checks if the target has been geolocated. Returns True if the target has been geolocated, False otherwise.', 'navigate_to_target': 'Action: Navigate the swarm to the geolocated target. When target is reached, returns True.', 'search_target': 'Action: Use swarm tactics to search for the target in the environment. Returns True when target is located.', 'land_at_target': 'Action: Land the swarm as close as possible to the target. Returns True when the swarm has successfully landed at the target.', 'recharge_batteries': 'Action: Recharge the swarm's batteries. Returns True when the batteries are fully charged.', 'send_message': 'Action: Send a message to the target location. Returns True when the message is successfully sent.', 'detect_obstacles': 'Condition: Check for obstacles in the environment. Returns True if an obstacle is detected, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'locate and deliver supplies to a target location while avoiding obstacles and recharging batteries'
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>detect_obstacles</Condition><Action>avoid_obstacles</Action></Sequence><Sequence><Condition>geolocate_target</Condition><Action>navigate_to_target</Action><Action>send_message</Action></Sequence><Sequence><Condition>is_battery_low</Condition><Action>recharge_batteries</Action></Sequence><Sequence><Condition>search_target</Condition><Action>land_at_target</Action></Sequence></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'follow_path': 'Action: Follow the designated path. When the end of the path is reached, returns True.', 'detect_obstacles': 'Condition: Check for obstacles in the current environment and path. Returns True if an obstacle is detected, False otherwise.', 'avoid_obstacles': 'Action: Avoid detected obstacles by adjusting the robot's path. Always returns True.', 'mark_visited': 'Action: Mark a specific location as visited on the robot's internal map. Always returns True.', 'communicate_location': 'Action: Send the robot's current location to a designated central communication point. Always returns True.', 'countdown_timer': 'Condition: Check for a specific amount of time to have passed. Returns True when the timer is up, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Generate a behavior tree for a swarm of robots to collectively map an unknown environment while avoiding obstacles and communicating their progress.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>detect_obstacles</Condition><Action>avoid_obstacles</Action><Action>mark_visited</Action></Sequence><Sequence><Condition>countdown_timer</Condition><Action>communicate_location</Action></Sequence><Sequence><Condition>follow_path</Condition></Sequence></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'calculate_distance': 'Condition: Calculate and return the distance between the robot and a designated target location. Returns True and the calculated distance.', 'is_position_confined': 'Condition: Check if the robot is currently in a confined space or needs to navigate through a narrow opening. Returns True if in a confined space, False otherwise.', 'is_target_visible': 'Condition: Check if the designated target location is currently visible to the robot. Returns True if the target is visible, False otherwise.', 'move_towards_target': 'Action: Move the robot towards the designated target location. Always returns True.', 'search_for_target': 'Action: Utilize swarm tactics to search for the designated target location within the current environment. Returns True when the target is located.', 'send_message': 'Action: Send a message to the designated target location. Returns True when the message is successfully sent.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'navigate through a maze and reach the target location while avoiding collisions'
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_position_confined</Condition><Action>calculate_distance</Action><Action>move_towards_target</Action></Sequence><Selector><Sequence><Condition>is_target_visible</Condition><Action>move_towards_target</Action><Action>send_message</Action></Sequence><Sequence><Condition>is_target_visible</Condition><Action>search_for_target</Action></Sequence></Selector></Selector></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'detect_wall': 'Condition: Check for any walls within a certain range of the robot. Returns True if a wall is detected, False otherwise.', 'move_forward': 'Action: Move one step forward while maintaining a certain orientation. Always returns True.', 'turn_left': 'Action: Turn the robot 90 degrees to the left. Always returns True.', 'turn_right': 'Action: Turn the robot 90 degrees to the right. Always returns True.', 'notify_wall_detected': 'Action: Notify other robots in the swarm of a detected wall. Always returns True.', 'update_map': 'Action: Update the robot's internal map of the environment based on its current location and sensor readings. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: Generate a behavior tree for a swarm of robots to navigate through a maze while coordinating with each other using wall detection
7.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>detect_wall</Condition><Action>notify_wall_detected</Action></Sequence><Selector><Sequence><Condition>detect_wall</Condition><Action>turn_left</Action></Sequence><Sequence><Condition>detect_wall</Condition><Action>turn_right</Action></Sequence></Selector><Sequence><Condition>detect_wall</Condition><Action>update_map</Action><Action>move_forward</Action></Sequence></Selector></BehaviorTree> 
###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_blue': "Action: Change agent's color to blue. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_triangle': 'Action: Form a triangular shape with two other agents. Always returns True.', 'is_agent_in_triangle': 'Condition: Check if agent is in a triangular formation. Returns True if agent is in a triangular formation, False otherwise.', 'is_blue': 'Condition: Check if agent's color is blue. Returns True if agent's color is blue, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Form a triangle with two other agents and change color to blue when in formation.'Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>is_agent_in_triangle</Condition> <Condition>is_blue</Condition> <Action>agent_movement_freeze</Action> <Action>task_completed</Action> </Sequence> <Sequence> <Action>form_triangle</Action> <Action>change_color_to_blue</Action> </Sequence> </Selector> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_red': "Action: Change agent's color to red. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_square': 'Action: Form a square shape with three other agents. Always returns True.', 'is_agent_in_square': 'Condition: Check if agent is in a square formation. Returns True if agent is in a square formation, False otherwise.', 'is_red': 'Condition: Check if agent's color is red. Returns True if agent's color is red, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Form a square with three other agents and change color to red when in formation.'Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>is_agent_in_square</Condition> <Condition>is_red</Condition> <Action>agent_movement_freeze</Action> <Action>task_completed</Action> </Sequence> <Sequence> <Action>form_square</Action> <Action>change_color_to_red</Action> </Sequence> </Selector> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'move_to_target': 'Action: Move towards the target location. Always returns True.', 'navigate_to_obstacle': 'Action: Navigate around the obstacle. Always returns True.', 'pick_up_object': 'Action: Pick up the object at current location. Always returns True.', 'place_object': 'Action: Place object in designated location. Always returns True.', 'is_location_reached': 'Condition: Check if target location is reached. Returns True if target location is reached, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_object_available': 'Condition: Check if an object is available at the current location. Returns True if an object is available, False otherwise.', 'is_object_carried': 'Condition: Check if an object is currently being carried. Returns True if an object is carried, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Navigate to target location, pick up object, and place it in designated location.'Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree> <Sequence> <Action>navigate_to_target</Action> <Sequence> <Condition>is_object_available</Condition> <Action>pick_up_object</Action> <Condition>is_object_carried</Condition> <Action>place_object</Action> </Sequence> </Sequence> </BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'call_for_back_up': "Action: Call for back up from nearby agents. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'find_enemies': 'Action: Scan the environment to locate enemy agents. Always returns True.', 'hunt': 'Action: Engage in combat with enemy agents. Always returns True.', 'is_enemy_detected': 'Condition: Check if enemy agents are detected within 10 units. Returns
###
4.// INSTRUCTIONS: Use only the following behaviors {'explore_area': 'Action: Move around the environment to explore new areas. Always returns True.', 'look_for_resources': 'Action: Search for resources in the environment. Always returns True.', 'gather_resources': 'Action: Gather resources found in the environment. Always returns True.', 'is_resource_available': 'Condition: Check if a resource is available in the environment. Returns True if a resource is present, False otherwise.', 'is_inventory_full': 'Condition: Checks if the inventory is full. Returns True if the inventory is at maximum capacity, False otherwise.', 'is_energy_low': 'Condition: Checks if energy is below a specific threshold. Returns True if energy is low, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Gather resources while exploring the environment. If inventory is full, return to base to deposit resources. If energy is low, stop gathering and recharge.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>explore_area</Action><Sequence><Condition>is_resource_available</Condition><Action>look_for_resources</Action><Action>gather_resources</Action></Sequence></Sequence><Sequence><Condition>is_inventory_full</Condition><Action>return_to_base</Action><Action>deposit_resources</Action></Sequence><Condition>is_energy_low</Condition><Action>stop_gathering</Action><Action>recharge</Action></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'follow_leader': 'Action: Follow the designated leader in the swarm. Always returns True.', 'get_leader_location': 'Action: Retrieve the current location of the designated leader. Always returns True.', 'move_to_leader': 'Action: Move towards the leader using given location. Always returns True.', 'is_leader_nearby': 'Condition: Check if the designated leader is within a certain distance. Returns True if the leader is within the distance, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Swarm robots should move towards the leader while maintaining a safe distance. Output only the XML behavior tree without any extra text.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>follow_leader</Action></Sequence><Selector><Sequence><Action>get_leader_location</Action><Action>move_to_leader</Action></Sequence><Sequence><Condition>is_leader_nearby</Condition><Action>maintain_safe_distance</Action></Sequence></Selector></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'inform_neighbors': 'Action: Share information with neighboring robots. Always returns True.', 'receive_information': 'Subtree node: Represents a behavior tree for receiving and processing information from neighboring robots.', 'update_map': 'Action: Update the map with new information. Always returns True.', 'is_obstacle_present': 'Condition: Check for obstacles on the map. Returns True if an obstacle is detected, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Share and update map with information from neighboring robots while navigating through the environment. End behavior tree with output 'Map updated.'
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>inform_neighbors</Action><Action>update_map</Action><Action>output (Map updated.)</Action></Sequence><Action>receive_information</Action></Selector></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'go_to_recharge_station': 'Action: Move towards the designated recharge station in the environment. Always returns True.', 'charge_battery': 'Action: Charge the robot's battery at the recharge station. Always returns True.', 'is_battery_low': 'Condition: Checks if the battery level is below a specific threshold. Returns True if the battery is low, False otherwise.', 'is_in_recharge_station': 'Condition: Checks if the robot is in the designated recharge station. Returns True if the robot is in the station, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: Navigate to the designated recharge station while maintaining a minimum battery level of 50%. If battery is low, charge at station. Output the XML behavior tree only without extra text.
7.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_battery_low</Condition><Action>go_to_recharge_station</Action><Action>charge_battery</Action></Sequence><Condition>is_in_recharge_station</Condition><Action>maintain_battery_level</Action></Selector></BehaviorTree>    
###
3.// INSTRUCTIONS: Use only the following behaviors {'follow_target': 'Action: Follow designated target. Returns True if target is in sight, False otherwise.', 'search_target': 'Action: Scans area and returns nearest detected target. Returns True if a target is detected, False if no target is found.', 'stay_in_formation': 'Condition: Check if agent is within designated formation. Returns True if agent is within formation, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3.// USER COMMAND: Follow designated target while staying in formation with other agents.
3.// OUTPUT:
<BehaviorTree><Action>follow_target</Action><Condition>stay_in_formation</Condition></BehaviorTree>

###
4.// INSTRUCTIONS: Use only the following behaviors {'pick_up_resource': 'Action: Pick up a resource located in the nearby area. Returns True if resource is picked up successfully, False if no resource is found.', 'deposit_resource': 'Action: Deposit the collected resource in the designated area. Returns True if resource is deposited successfully, False otherwise.', 'count_resources': 'Condition: Checks current number of resources collected. Returns True if agent has collected at least 5 resources, False otherwise.', 'defend_nest': 'Action: Defend the nest from nearby threats. Returns True if agent successfully defends the nest, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Collect at least 5 resources, deposit them in the designated area, and defend the nest from nearby threats.
4.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Action>pick_up_resource</Action><Condition>count_resources</Condition><Action>deposit_resource</Action></Sequence><Action>defend_nest</Action></Selector><Action>deposit_resource</Action></Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'identify_enemy': 'Action: Scans surroundings and identifies nearby enemy. Returns True if enemy is detected, False otherwise.', 'retreat': 'Action: Moves away from the nearest enemy. Returns True if retreat is successful, False otherwise.', 'attack': 'Action: Attacks the nearest enemy. Returns True if attack is successful, False otherwise.', 'is_agent_hidden': 'Condition: Checks if the agent is hiding. Returns True if the agent is currently hidden, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Identify nearby enemy, retreat if agent is currently hiding, otherwise attack enemy.
5.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Action>identify_enemy</Action><Condition>is_agent_hidden</Condition><Action>retreat</Action></Sequence><Action>attack</Action></Selector></Sequence></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'gather_food': 'Action: Collect and gather food located in the nearby area. Returns True if food is gathered successfully, False otherwise.', 'analyze_food': 'Action: Analyze the gathered food and determine properties. Returns True if food is successfully analyzed, False otherwise.', 'avoid_predator': 'Condition: Check for nearby predator and avoid if found. Returns True if predator is avoided, False otherwise.', 'flee': 'Action: Flee from the nearest predator. Returns True if flee is successful, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Gather and analyze food while avoiding predators. If a predator is detected, flee to safety.
6.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Action>gather_food</Action><Action>analyze_food</Action></Sequence><Condition>avoid_predator</Condition><Action>flee</Action></Selector></Sequence></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'navigate_to_location': 'Action: Move to a specific location. Returns True if successfully arrived at location, False otherwise.', 'search_for_resource': 'Action: Search the area for a specific resource. Returns True if resource is found, False otherwise.', 'pick_up_resource': 'Action: Pick up the specified resource. Returns True if resource is successfully picked up, False otherwise.', 'is_area_safe': 'Condition: Checks if the area is safe for navigation and resource collection. Returns True if there are no obstacles or enemies in the area, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: Navigate to a specific location, search for a specific resource, and pick it up if the area is safe.
7.// OUTPUT:
<BehaviorTree><Sequence><Action>navigate_to_location</Action><Selector><Sequence><Action>search_for_resource</Action><Condition>is_area_safe</Condition><Action>pick_up_resource</Action></Sequence><Action>navigate_to_location</Action></Selector></Sequence></BehaviorTree>###
3.// INSTRUCTIONS: Use only the following behaviors {'move_to_target': 'Action: Move towards the designated target. Always returns True.', 'is_target_reached': 'Condition: Check if the target is within 10 units of distance. Returns True if the target is within 10 units of distance, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles in the path. Returns True if an obstacle is detected, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3.// USER COMMAND: Move to a target location while avoiding obstacles along the way.
3.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_obstacle_detected</Condition><Action>move_to_target</Action><Trigger>is_target_reached</Trigger></Sequence></BehaviorTree>

###
4.// INSTRUCTIONS: Use only the following behaviors {'explore_area': 'Action: Explore the designated area. Always returns True.', 'is_stuck': "Condition: Check if the agent is stuck. Returns True if the agent's movement is blocked or restricted, False otherwise.", 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'backup_and_turn': "Action: Move backwards for 2 seconds and then turn clockwise. Always returns True."}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Explore the area and if the agent gets stuck, backup and turn to try and unblock itself before resuming exploration.
4.// OUTPUT:
<BehaviorTree><Sequence><Action>explore_area</Action><Trigger>is_stuck</Trigger><Sequence><Action>backup_and_turn</Action><Action>explore_area</Action></Sequence></Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'scan_area': 'Subtree node: Scans the designated area for targets.', 'is_target_detected': 'Condition: Check if a target is within 15 units of distance. Returns True if a target is detected, False otherwise.', 'move_to_target_deadzone': 'Subtree node: Move towards the target while maintaining a safe distance in the deadzone perimeter.', 'is_agent_in_deadzone': 'Condition: Check if the agent is within the deadzone perimeter. Returns True if the agent is within the designated perimeter, False otherwise.', 'navigate_to_nest': 'Subtree node: Guides the agent back to the nest for drop-off.', 'drop_target': 'Action: Drops the target at the designated location. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Scan the area for targets, approach and drop off the target at the nest while staying within the designated deadzone perimeter.
5.// OUTPUT:
<BehaviorTree><Sequence><Action>scan_area</Action><Trigger>is_target_detected</Trigger><Sequence><Action>move_to_target_deadzone</Action><Condition>is_agent_in_deadzone</Condition><Selector><Sequence><Action>drop_target</Action><Action>task_completed</Action></Sequence><Action>navigate_to_nest</Action></Selector></Sequence></Sequence></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'determine_best_path': 'Action: Calculate the most efficient path to take based on input parameters. Always returns True.', 'follow_path': 'Action: Follow the generated path until reaching the destination. Always returns True.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_destination_reached': 'Condition: Check if the agent has reached its destination. Returns True if the agent has reached the designated location, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Determine the best path to take given a start and end location, and then follow the path while avoiding obstacles along the way.
6.// OUTPUT:
<BehaviorTree><Sequence><Action>determine_best_path</Action><Condition>is_obstacle_detected</Condition><Action>follow_path</Action><Trigger>is_destination_reached</Trigger></Sequence></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'survey_area': 'Action: Use sensors to scan and create a map of the designated area. Always returns True.', 'navigate_path': 'Action: Follow the generated path until reaching the destination. Always returns True.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_area_mapped': 'Condition: Check if the designated area has been fully mapped. Returns True if the area has been mapped, False otherwise.', 'plot_route': 'Action: Use the generated map to plot the most efficient route to take. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: Survey the designated area, map it, and then navigate the most efficient route to desired location while avoiding obstacles.
7.// OUTPUT:
<BehaviorTree><Sequence><Action>survey_area</Action><Condition>is_obstacle_detected</Condition><Sequence><Action>plot_route</Action><Action>navigate_path</Action></Sequence><Trigger>is_area_mapped</Trigger></Sequence></BehaviorTree>
###
4.// INSTRUCTIONS: Use only the following behaviors {'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_red': "Action: Change agent's color to red. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Returns True if movement continues successfully, False otherwise.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. 
If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Form a line, change color to green, continue movement, form another line, then change color to red'. Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree> <Sequence> <Action>form_line</Action> <Selector> <Sequence> <Condition>is_line_formed</Condition> <Action>change_color_to_green</Action> <Action>continue_movement_agent</Action> </Sequence> <Action>wander</Action> </Selector> <Action>form_line</Action> <Action>change_color_to_red</Action> <Action>task_completed</Action> </Sequence> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'follow_path': "Action: Follow a predetermined path. Always returns True.", 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_finished': 'Condition: Check if the agent has reached the end of the path. Returns True if the agent has reached the end, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.'}, to construct behavior tree in XML format to the following command.
If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Follow the path to the target location, avoid obstacles along the way, and return to the nest if the task is not completed within 10 minutes'. Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Action>follow_path</Action> <Sequence> <Condition>is_path_finished</Condition> <Action>task_completed</Action> </Sequence> </Sequence> <Sequence> <Condition>is_obstacle_detected</Condition> <Action>avoid_obstacle</Action> <Action>agent_movement_freeze</Action> <Action>follow_path</Action> </Sequence> <Action>agent_movement_freeze</Action> </Selector> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Form a line, avoid obstacles while moving towards the target, change color to green upon reaching the target, and return to the nest if the task is not completed within 15 minutes'. Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Action>form_line</Action> <Sequence> <Condition>is_target_detected</Condition> <Action>change_color_to_green</Action> </Sequence> <Action>follow_path</Action> <Sequence> <Condition>is_path_finished</Condition> <Action>task_completed</Action> </Sequence> </Sequence> <Sequence> <Condition>is_obstacle_detected</Condition> <Action>avoid_obstacle</Action> <Action>follow_path</Action> </Sequence> <Sequence> <Condition>is_agent_in_nest</Condition> <Action>change_color_to_white</Action> <Action>agent_movement_freeze</Action> </Sequence> </Selector> </BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'random_movement': 'Action: Move randomly within the environment. Returns True if movement successfully occurs, False otherwise.'}, to construct behavior tree in XML format to the following command.
If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: generate behavior tree to 'Move randomly until the target is detected, form 
###
3.// INSTRUCTIONS: Use all of the following behaviors {'analyze_environment': 'Action: Analyze the environment and perform data processing. Always returns True.', 'move_towards_food': 'Action: Move towards the nearest source of food. Always returns True.', 'gather_food': 'Action: Gather food once it is reached. Always returns True.', 'create_path_to_nest': 'Action: Create a path towards the nest based on the current location and mapped environment. Always returns True.', 'enter_nest': 'Action: Enter the nest once it is reached. Always returns True.', 'is_food_reached': 'Condition: Check if the food source has been reached. Returns True if the food source has been reached, False otherwise.', 'is_nest_reached': 'Condition: Check if the nest has been reached. Returns True if the nest has been reached, False otherwise.' }, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3.// USER COMMAND: Generate behavior tree for a swarm of robots to search for and gather food, and return it to the nest.
3.// OUTPUT:
<BehaviorTree><Sequence><Selector><Condition>is_food_reached</Condition><Sequence><Action>gather_food</Action><Action>move_towards_food</Action></Sequence></Selector><Sequence><Condition>is_nest_reached</Condition><Sequence><Action>enter_nest</Action><Action>create_path_to_nest</Action></Sequence></Sequence></BehaviorTree>

###
4.// INSTRUCTIONS: Use all of the following behaviors {'detect_fire': 'Condition: Detect if there is a fire in the environment. Returns True if a fire is detected, False otherwise.', 'fight_fire': 'Action: Use available resources to extinguish the fire. Always returns True.', 'move_to_fire': 'Action: Move towards the nearest detected fire. Always returns True.', 'request_help': 'Action: Send a signal for other robots to come and help fight the fire. Always returns True.', 'is_help_requested': 'Condition: Check if a help signal has been sent. Returns True if a help signal has been sent, False otherwise.', 'is_fire_extinguished': 'Condition: Check if the fire has been fully extinguished. Returns True if the fire is extinguished, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Generate behavior tree for a swarm of robots to detect and fight a fire in the environment.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_fire_extinguished</Condition><Selector><Condition>is_help_requested</Condition><Action>request_help</Action></Selector></Sequence><Selector><Condition>detect_fire</Condition><Selector><Sequence><Action>fight_fire</Action><Action>move_to_fire</Action></Sequence><Sequence><Action>wander</Action><Action>update_map</Action></Sequence></Selector></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use all of the following behaviors {'detect_object': 'Condition: Detect if there are any objects in the environment. Returns True if an object is detected, False otherwise.', 'move_to_object': 'Action: Move towards the nearest detected object. Always returns True.', 'pick_up_object': 'Action: Pick up the object once it is reached. Always returns True.', 'drop_object': 'Action: Drop the object at a specific location. Always returns True.', 'is_object_picked_up': 'Condition: Check if the object has been picked up. Returns True if the object has been picked up, False otherwise.', 'is_target_reached': 'Condition: Check if the target location has been reached. Returns True if the target location has been reached, False otherwise.' }, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Generate behavior tree for a robot to navigate to a specified location, pick up an object and drop it at another specified location.
5.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_target_reached</Condition><Action>move_to_object</Action></Sequence><Sequence><Condition>is_object_picked_up</Condition><Action>drop_object</Action></Sequence><Sequence><Condition>detect_object</Condition><Action>pick_up_object</Action></Sequence></BehaviorTree>

###
6.// INSTRUCTIONS: Use all of the following behaviors {'move_to_light': 'Action: Move towards the nearest source of light in the environment. Always returns True.', 'stop_and_look_around': 'Action: Stop movement and look around for a brief period of time. Always returns True.', 'turn_towards_light': 'Action: Turn towards the brightest source of light. Always returns True.', 'is_light_detected': 'Condition: Check if there is a source of light nearby. Returns True if a light source is detected, False otherwise.', 'is_light_reached': 'Condition: Check if the robot has reached the source of light. Returns True if the light source is reached, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Generate behavior tree for a swarm of robots to navigate towards and gather light sources in the environment.
6.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_light_detected</Condition><Selector><Sequence><Action>move_to_light</Action><Action>stop_and_look_around</Action></Sequence><Sequence><Action>turn_towards_light</Action><Action>keep_moving</Action></Sequence></Selector></Sequence><Sequence><Condition>is_light_reached</Condition><Action>gather_light_source</Action></Sequence></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'search_for_target': 'Action: Search for a specific target in the environment. Always returns True.', 'move_away_from_obstacle': 'Action: Move the robot away from any detected obstacles. Always returns True.', 'move_to_center': 'Action: Move towards the center of the environment. Always returns True.', 'detect_target': 'Action: Detect if the target is within range. Always returns True.', 'is_target_detected': 'Condition: Check if the target has been detected. Returns True if the target has been detected, False otherwise.', 'is_target_reached': 'Condition: Check if the robot has reached the target location. Returns True if the robot has reached the target location, False otherwise.' }, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: Generate behavior tree for a robot to navigate towards a specific target location in the environment.
7.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_target_reached</Condition><Selector><Condition>detect_target</Condition><Action>
###
3.// INSTRUCTIONS: Use only the following behaviors {'go_to_location': "Action: Move the agent to a specific location. Always returns True.", 'avoid_collision': "Action: Make the agent avoid collisions with other agents. Always returns True.", 'is_at_location': 'Condition: Check if the agent is at a specific location. Returns True if the agent is at the location, False otherwise.', 'is_collision': 'Condition: Check if collision is detected. Returns True if a collision is detected, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'rest': 'Action: Make the agent stop and rest. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3.// USER COMMAND: guide the swarm of robots to a specific location while avoiding collisions and obstacles, then rest.
3.// OUTPUT:
<BehaviorTree><Sequence><Action>avoid_collision</Action><Action>go_to_location</Action><Selector><Sequence><Condition>is_path_clear</Condition><Action>rest</Action></Sequence><Sequence><Condition>is_collision</Condition><Action>avoid_collision</Action></Sequence></Selector></Sequence></BehaviorTree>

###
4.// INSTRUCTIONS: Use only the following behaviors {'pause_movement': "Action: Pause the agent's movement. Always returns True.", 'set_home_location': "Action: Set a specific location as the agent's home location. Always returns True.", 'wait': "Action: Make the agent wait for a specified amount of time. Always returns True.", 'is_home_reached': 'Condition: Check if the agent has reached the set home location. Returns True if the agent has reached the set location, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'navigate_home': 'Action: Navigate the agent back to the home location. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: set a home location, navigate to a new location, pause movement, wait for 10 seconds, then navigate back to the home location and resume movement.
4.// OUTPUT:
<BehaviorTree><Sequence><Action>set_home_location</Action><Action>go_to_location</Action><Action>pause_movement</Action><Action>wait (10 seconds)</Action><Action>navigate_home</Action></Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'approach_target': "Action: Move towards the target. Always returns True.", 'check_battery_level': "Action: Check the agent's battery level. Always returns True.", 'is_battery_low': 'Condition: Check if the agent's battery level is below a specific threshold. Returns True if the battery level is below the threshold, False otherwise.', 'is_target_reached': 'Condition: Check if the agent has reached the target. Returns True if the agent is at the target, False otherwise.', 'recharge_battery': 'Action: Make the agent recharge its battery. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: move towards the target and check battery level. If the battery is low, recharge and then continue towards the target. If the target is reached, signal task completion.
5.// OUTPUT:
<BehaviorTree> <Sequence> <Action>approach_target</Action> <Action>check_battery_level</Action> <Selector> <Sequence> <Condition>is_battery_low</Condition> <Action>recharge_battery</Action> </Sequence> <Sequence> <Condition>is_target_reached</Condition> <Action>task_completed</Action> </Sequence> </Selector> </Sequence> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'build_structure': "Subtree node: Represents a behavior tree for building a structure.", 'get_resources': "Subtree node: Represents a behavior tree for collecting resources.", 'is_structure_built': 'Condition: Check if the structure has been built. Returns True if the structure has been built, False otherwise.', 'is_resource_available': 'Condition: Check if resources are available. Returns True if resources are available, False otherwise.', 'move_to_location': "Action: Move the agent to a specific location. Always returns True.", 'harvest': 'Action: Collect resources at the current location. Always returns True.', 'build': 'Action: Build a structure at the current location. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: collect resources and build a structure at a specific location.
6.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Action>get_resources</Action> <Action>move_to_location</Action> <Selector> <Sequence> <Condition>is_resource_available</Condition> <Action>harvest</Action> </Sequence> <Sequence> <Condition>is_structure_built</Condition> <Action>build</Action> </Sequence> </Selector> </Sequence> </Selector> </BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'search_for_target': "Action: Search for the target in the environment. Always returns True.", 'check_signal_strength': "Action: Check the signal strength between the agent and the target. Always returns True. ", 'is_target_found': 'Condition: Check if the target has been found. Returns True if the target has been found, False otherwise.', 'is_signal_weak': 'Condition: Check if the signal strength is below a specific threshold. Returns True if the signal strength is below the threshold, False otherwise.', 'navigate_to_target': 'Action: Navigate to the target. Always returns True.'}, to construct behavior tree in XML format to the following command. Item if the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: search for the target and check the signal strength. If the signal is weak, navigate to the target. If the target is reached, signal task completion.
7.// OUTPUT:
<BehaviorTree> <Sequence> <Action>search_for_target</Action> <Action>check_signal_strength</Action> <Selector> <Sequence> <Condition>is_signal_weak</Condition> <Action>navigate_to_target</Action> </Sequence> <Sequence> <Condition>is_target_found</Condition> <Action>task_completed
###