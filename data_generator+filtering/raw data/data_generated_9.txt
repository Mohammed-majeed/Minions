 
###
3.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'change_color_to_blue': "Action: Change agent's color to blue. Always returns True.", 'follow_target': 'Action: Move towards the target location. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_agent_moving': 'Condition: Check if the agent is currently in motion. Returns True if the agent is moving, False otherwise.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3.// USER COMMAND: create behavior tree to 'Follow a target while checking for its presence and changing color to blue when it is near'Output only the XML behavior tree without extra text.
3.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>is_target_detected</Condition><Action>change_color_to_blue</Action></Sequence><Action>follow_target</Action></Selector><Selector><Sequence><Condition>is_target_reached</Condition><Action>agent_movement_freeze</Action></Sequence><Action>wander</Action></Selector></Sequence></BehaviorTree>

###
4.// INSTRUCTIONS: Use only the following behaviors{'avoid_obstacle_complicated': 'Action: Navigate around obstacles using complex algorithms. Returns True if successful, False otherwise.', 'detect_color': 'Action: Detect the color of the target. Returns True if detected, False otherwise.', 'is_color_yellow': 'Condition: Check if the detected color is yellow. Returns True if the color is yellow, False otherwise.', 'is_color_blue': 'Condition: Check if the detected color is blue. Returns True if the color is blue, False otherwise.', 'pick_up_target': 'Action: Pick up the target and hold it. Returns True if successful, False otherwise.', 'place_target_in_nest': 'Action: Place the target in the nest. Returns True if successful, False otherwise.', 'search_for_target': 'Action: Search for the target using a combination of movement and color detection. Returns True if successful, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Search for a yellow target, pick it up, and place it in the nest'Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>is_color_yellow</Condition><Action>pick_up_target</Action></Sequence><Action>search_for_target</Action></Selector><Selector><Sequence><Condition>is_agent_in_nest</Condition><Action>place_target_in_nest</Action></Sequence><Action>search_for_target</Action></Selector></Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors{'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'feed': 'Action: Feed the target with a stored energy source. Returns True if successful, False otherwise.', 'is_energy_available': 'Condition: Check if the robot has enough stored energy to perform a task. Returns True if energy is available, False otherwise.', 'navigate_to_area': 'Action: Navigate to a specific area based on coordinates provided. Returns True if successful, False otherwise.', 'pick_up_energy': 'Action: Pick up energy source from the environment. Returns True if successful, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Navigate to a specific area, avoid obstacles, and gather energy for a given task'Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>is_energy_available</Condition><Action>pick_up_energy</Action></Sequence><Action>feed</Action></Selector><Selector><Sequence><Action>avoid_obstacle</Action><Action>navigate_to_area</Action></Sequence><Action>wander</Action></Selector></Sequence></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors{'change_velocity': 'Action: Change the robot's velocity based on input parameters. Returns: True if successful, False otherwise.', 'check_velocity_greater': 'Condition: Check if the robot's current velocity is greater than a given value. Returns True if the velocity is greater, False otherwise.', 'check_velocity_less': 'Condition: Check if the robot's current velocity is less than a given value. Returns True if the velocity is less, False otherwise.', 'move_forward': 'Action: Move the robot one step forward in the current direction. Returns True if successful, False otherwise.', 'stop': 'Action: Stop the robot's movement. Returns True if successful, False otherwise.', 'reverse_direction': 'Action: Reverse the direction of the robot. Returns True if successful, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Move the robot forward until it reaches a certain velocity, then reverse its direction'Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree><Sequence><Condition>check_velocity_less</Condition><Action>change_velocity</Action></Sequence><Sequence><Condition>check_velocity_greater</Condition><Action>move_forward</Action></Sequence><Action>reverse_direction</Action></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors{'is_formation_created': 'Condition: Check if a specific formation has been created by the robots. Returns True if the formation is created, False otherwise.', 'create_formation': 'Action: Create a formation by coordinating the actions of multiple robots. Returns True if successful, False otherwise.', 'execute_formation': 'Action: Execute a predefined formation by controlling the movements of the robots. Returns True if successful, False otherwise.', 'follow_target': 'Action: Move towards the target location. Returns True if successful, False otherwise.', 'stop_movement': 'Action: Stop the robot's movement. Returns True if successful, False otherwise.', }, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: generate behavior tree to 'Create and execute a specific formation to surround the target'Output only the XML behavior tree without extra text.
7.// OUTPUT:
<BehaviorTree><Selector><Sequence 
###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'go_to_target': 'Action: Move towards the target. Returns True when the target is reached, False otherwise.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Move towards the target, avoid obstacles, and form a vertical line at the center if the target is reached.'Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>is_target_detected</Condition><Action>go_to_target</Action></Sequence><Action>form_line</Action></Selector><Selector><Sequence><Condition>is_obstacle_detected</Condition><Action>avoid_obstacle</Action></Sequence><Action>wander</Action></Selector></Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'go_to_target': 'Action: Move towards the target. Returns True when Target is reached, False otherwise.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'reach_target_in_groups': 'Action: Move towards the target in groups of 3. Returns True when the target is reached, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Detect obstacles, move towards the target in groups of 3, and form a line when the target is reached.'Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_target_detected</Condition><Action>reach_target_in_groups</Action></Sequence><Sequence><Condition>is_target_reached</Condition><Action>form_line</Action></Sequence></Sequence><Selector><Sequence><Condition>is_obstacle_detected</Condition><Action>avoid_obstacle</Action></Sequence><Action>wander</Action></Selector></BehaviorTree>
 
###
6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'explore_area': 'Action: Randomly explore the area. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_reached_max_distance': 'Condition: Check if the maximum distance has been reached. Returns True if the maximum distance has been reached, False otherwise.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'pick_up_object': 'Action: Pick up an object if one is detected. Returns True if an object is picked up, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Explore the area, avoid obstacles, and pick up any detected objects.'Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>is_obstacle_detected</Condition><Action>avoid_obstacle</Action></Sequence><Selector><Sequence><Condition>is_target_detected</Condition><Action>pick_up_object</Action><Action>task_completed</Action></Sequence><Action>explore_area</Action></Selector></Selector><Sequence><Condition>is_reached_max_distance</Condition><Action>task_completed</Action></Sequence></Sequence></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_red': "Action: Change agent's color to red.  
###
4.// INSTRUCTIONS: Use only the following behaviors {'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_red': "Action: Change agent's color to red. Always returns True.", 'is_agent_full': 'Condition: Check if agent has reached capacity. Returns True if agent is full, False otherwise.', 'is_agent_hungry': 'Condition: Check if agent is hungry. Returns True if agent's energy level is low, False otherwise.', 'feed_agent': 'Action: Feed the agent. Always returns True.', 'sleep_agent': "Action: Send agent to sleep. Always returns True."}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Check if agent is full, if not, feed agent. If agent is full, send agent to sleep.'Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_agent_full</Condition><Action>sleep_agent</Action></Sequence><Sequence><Condition>is_agent_hungry</Condition><Action>feed_agent</Action></Sequence><Action>change_color_to_green</Action></Selector></BehaviorTree>
 
###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_nest_safe': 'Condition: Check if nest is safe from intruders. Returns True if there are no intruders, False otherwise.', 'go_to_nest': 'Action: Move towards the nest. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'If agent is in nest, check for intruders, if no intruders, go to target.'Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_agent_in_nest</Condition><Selector><Sequence><Condition>is_nest_safe</Condition><Selector><Sequence><Condition>is_target_detected</Condition><Action>continue_movement_agent</Action></Sequence><Action>go_to_nest</Action></Selector></Sequence></Selector><Action>agent_movement_freeze</Action></Sequence><Action>continue_movement_agent</Action></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Form a line and continue moving while detecting obstacles. If target is reached, form a line and stay still.'Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>form_line</Action><Action>wander</Action></Sequence><Selector><Sequence><Action>is_target_reached</Action><Action>form_line</Action></Sequence><Selector><Condition>is_obstacle_detected</Condition><Action>continue_movement_agent</Action></Selector></Selector></Selector></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'feed_agent': 'Action: Feed the agent. Always returns True.', 'is_agent_hungry': 'Condition: Check if agent is hungry. Returns True if agent's energy level is low, False otherwise.', 'pickup_item': 'Action: Pick up an item. Always returns True.', 'is_item_nearby': 'Condition: Check if an item is within 10 units. Returns True if an item is within 10 units of distance, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: generate behavior tree to 'If agent is hungry, find and pick up an item. Otherwise, continue moving while avoiding obstacles.'Output only the XML behavior tree without extra text.
7.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_agent_hungry</Condition><Selector><Sequence><Condition>is_item_nearby</Condition><Action>pickup_item</Action></Sequence><Action>continue_movement_agent</Action></Selector></Sequence><Selector><Condition>is_obstacle_detected</Condition><Action>avoid_obstacle</Action></Selector></Selector></BehaviorTree>
###
3.// INSTRUCTIONS: Use only the following behaviors {'approach_target': "Action: Move towards the target. Always returns True.", 'change_color_to_blue': "Action: Change agent's color to blue. Always returns True.", 'detect_target': 'Condition: Check for the presence of the target. Returns True if target is detected, False otherwise.', 'is_agent_healthy': 'Condition: Check if agent is healthy. Returns True if agent's health is above 50%, False otherwise.', 'is_hungry': 'Condition: Check if agent is hungry. Returns True if agent's hunger level is above 75%, False otherwise.', 'is_out_of_energy': 'Condition: Check if agent is out of energy. Returns True if agent's energy level is below 25%, False otherwise.', 'is_target_in_range': 'Condition: Check if target is within 10 units. Returns True if target is within 10 units of distance, False otherwise.', 'move_randomly': 'Action: Move randomly within a specified area. Always returns True.', 'rest': 'Action: Rest and replenish energy. Always returns True.', 'send_signal': 'Action: Send a signal to other agents. Always returns True.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3.// USER COMMAND: generate behavior tree to 'Find and approach the target, send a signal to other agents, rest, and change color to blue.'
Output only the XML behavior tree without extra text.
3.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>detect_target</Condition><Action>approach_target</Action></Sequence><Action>send_signal</Action></Selector><Action>rest</Action><Action>change_color_to_blue</Action><Action>task_completed</Action></Sequence></BehaviorTree>

###
4.// INSTRUCTIONS: Use only the following behaviors {'alert_guard': "Action: Alert the guard in case of danger. Always returns True.", 'call_for_backup': "Action: Call for backup when facing a difficult situation. Always returns True.", 'detect_intruder': 'Condition: Check for the presence of an intruder. Returns True if an intruder is detected, False otherwise.', 'fire_weapon': 'Action: Shoot at the intruder. Always returns True.', 'get_info_from_informant': 'Action: Gather information from an informant. Always returns True.', 'is_guard_nearby': 'Condition: Check if a guard is within 10 units. Returns True if a guard is within 10 units of distance, False otherwise.', 'is_hostile': 'Condition: Check if the intruder is displaying hostile behavior. Returns True if the intruder is behaving in a hostile manner, False otherwise.', 'is_safe': "Condition: Check if the agent's current location is safe. Returns True if the area is deemed safe, False otherwise.", 'is_weapon_equipped': 'Condition: Check if the agent is carrying a weapon. Returns True if the agent is equipped with a weapon, False otherwise.', 'move_to_cover': 'Action: Move to a safe, covered area. Always returns True.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Find the intruder, assess the hostile behavior, gather information from an informant, call for backup, and move to a safe location.'
Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>detect_intruder</Condition><Condition>is_hostile</Condition><Action>get_info_from_informant</Action></Sequence><Action>call_for_backup</Action><Selector><Sequence><Condition>is_guard_nearby</Condition><Condition>is_weapon_equipped</Condition><Condition>is_safe</Condition></Sequence><Action>fire_weapon</Action><Action>move_to_cover</Action></Selector><Action>task_completed</Action></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'charge_battery': "Action: Recharge the robot's battery. Always returns True.", 'dance': "Action: Perform a dance routine. Always returns True.", 'detect_light_level': 'Condition: Check for the light level in the environment. Returns True if the light level is above 80%, False otherwise.', 'move_towards_light': 'Action: Move towards the source of light. Always returns True.', 'move_towards_sound': 'Action: Move towards the source of sound. Always returns True.', 'play_sound': 'Action: Play a recorded sound. Always returns True.', 'random_movement': 'Action: Move randomly within the environment. Always returns True.', 'start_recording': 'Action: Start recording the environment. Always returns True.', 'stop_recording': 'Action: Stop recording the environment. Always returns True.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Detect the light level, move towards the light source, play a sound, and dance.'
Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree><Sequence><Condition>detect_light_level</Condition><Action>move_towards_light</Action></Sequence><Action>play_sound</Action><Action>dance</Action><Action>task_completed</Action></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'attack_enemy': "Action: Engage in combat with an enemy. Always returns True.", 'change_outfit': "Action: Change the agent's outfit. Always returns True.", 'detect_enemy': 'Condition: Check for the presence of an enemy. Returns True if an enemy is detected, False otherwise.', 'follow_leader': 'Action: Follow the designated leader. Always returns True.', 'hide_in_bush': 'Action: Hide in a nearby bush to conceal presence. Always returns True.', 'is_alert': 'Condition: Check if the agent is on high alert. Returns True if the agent is on high alert, False otherwise.', 'is_disguised': 'Condition: Check if the agent is currently in disguise. Returns True if the agent is in disguise, False otherwise.', 'is_enemy_nearby': 'Condition: Check if an enemy is within 20 units. Returns True if an enemy is within 20 units of distance, False otherwise.', 'move_to_checkpoint': 'Action: Move towards a designated checkpoint. Always returns True.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task
###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_blue': "Action: Change agent's color to blue. Always returns True.", 'change_color_to_red': "Action: Change agent's color to red. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'move_to_target': 'Action: Move towards the target location. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 10 units. Returns True if the target is within 10 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. Output only the XML behavior tree without extra text.
4.// USER COMMAND: generate behavior tree to 'Move towards target, avoid obstacles, then change color to red and finally move back to original location.'
4.// OUTPUT:
<BehaviorTree> <Sequence> <Action>move_to_target</Action> <Selector> <Sequence> <Condition>is_obstacle_detected</Condition> <Action>avoid_obstacle</Action> </Sequence> <Sequence> <Condition>is_target_reached</Condition> <Action>change_color_to_red</Action> <Action>move_to_target</Action> </Sequence> </Selector> <Action>continue_movement_agent</Action> </Sequence> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles and change direction. Always returns True.', 'change_color_to_yellow': "Action: Change agent's color to yellow. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'find_way_home': 'Action: Find the shortest path back to the nest. Always returns True.', 'is_agent_at_nest': 'Condition: Check if the agent is at the nest. Returns True if the agent is at the nest, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 10 units. Returns True if the target is within 10 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Find the shortest path back to the nest while avoiding obstacles and change color to yellow when the agent reaches the nest.'Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Action>find_way_home</Action> <Selector> <Sequence> <Condition>is_obstacle_detected</Condition> <Action>avoid_obstacle</Action> </Sequence> <Sequence> <Condition>is_agent_at_nest</Condition> <Action>change_color_to_yellow</Action> </Sequence> </Selector> <Action>continue_movement_agent</Action> </Sequence> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'check_battery_level': 'Action: Check the battery level of the agent. Returns True if battery level is above 20%, False otherwise.', 'charge_battery': 'Action: Move to a charging station and recharge the battery. Always returns True.', 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'formation_1': 'Action: Form a line of two agents, one in front of the other. Always returns True.', 'formation_2': 'Action: Form a triangle formation with two agents on the base and one on top. Always returns True.', 'is_agent_low_battery': 'Condition: Check if the agent's battery level is below 30%. Returns True if battery level is below 30%, False otherwise.', 'is_charging': 'Condition: Check if the agent is currently charging. Returns True if charging, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'If battery level is low, move to a charging station and form a triangle formation. If not, form a line of two agents.'Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>is_agent_low_battery</Condition> <Action>charge_battery</Action> <Action>formation_2</Action> </Sequence> <Sequence> <Condition>check_battery_level</Condition> <Action>formation_1</Action> </Sequence> <Action>continue_movement_agent</Action> </Selector> </BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'detect_intruders': 'Action: Keep scanning the environment for any intruders. Always returns True.', 'is_intruder_detected': 'Condition: Check if an intruder is detected. Returns True if an intruder is detected, False otherwise.', 'is_patrolling': 'Condition: Check if the agent is currently patrolling the assigned area. Returns True if patrolling, False otherwise.', 'patrol_area': 'Action: Patrol the assigned area in a predetermined pattern. Always returns True.', 'target_detection': 'Action: Detect a target within the assigned area and move towards it. Always returns True.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.'}, to construct behavior tree in XML format to the following command.If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: generate behavior tree to 'While patrolling, detect a target and avoid obstacles. If an intruder is detected, stop patrolling and 
###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'move_towards_target': 'Action: Move towards the target object. Always returns True.', 'random_turn': 'Action: Turn the robot randomly. Always returns True.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Move towards target, but avoid obstacles and randomly turn if needed'
Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>is_target_reached</Condition> <Action>task_completed</Action> </Sequence> <Sequence> <Condition>is_path_clear</Condition> <Action>continue_movement_agent</Action> </Sequence> <Sequence> <Condition>is_obstacle_detected</Condition> <Action>avoid_obstacle</Action> <Action>random_turn</Action> </Sequence> </Selector> <Action>move_towards_target</Action> </Sequence> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'back_off': 'Action: Move back until obstacle is no longer detected. Always returns True.', 'change_color_to_blue': "Action: Change agent's color to blue. Always returns True.", 'change_color_to_red': "Action: Change agent's color to red. Always returns True.", 'form_spiral': 'Action: Form a spiral shape while moving. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'rotate_clockwise': 'Action: Rotate the agent clockwise by 45 degrees. Always returns True.', 'rotate_counterclockwise': 'Action: Rotate the agent counterclockwise by 45 degrees. Always returns True.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'If obstacle is detected, rotate clockwise, if not move in spiral'
Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree> <Sequence> <Condition>is_obstacle_detected</Condition> <Action>rotate_clockwise</Action> </Sequence> <Sequence> <Action>wander</Action> <Sequence> <Action>form_spiral</Action> <Action>task_completed</Action> </Sequence> </Sequence> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'avoid_other_robots': 'Action: Avoid collision with other robots. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_red': "Action: Change agent's color to red. Always returns True.", 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'move_towards_average_position': 'Action: Move towards the average position of all robots in the swarm. Always returns True.', 'move_towards_target': 'Action: Move towards the target object. Always returns True.', 'send_message': 'Action: Send a message to other robots to coordinate actions. Always returns True.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'While moving towards target, avoid other robots and send message to coordinate'
Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree> <Sequence> <Condition>is_target_detected</Condition> <Action>move_towards_target</Action> <Condition>is_path_clear</Condition> <Action>avoid_other_robots</Action> </Sequence> <Action>send_message</Action> <Action>task_completed</Action> </Sequence> </BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_red': "Action: Change agent's color###
3.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'change_color_to_blue': "Action: Change agent's color to blue. Always returns True.", 'change_color_to_red': "Action: Change agent's color to red. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'drop_cargo': 'Action: Drop cargo at specified location. To check for valid location, use x,y coordinates. If location is invalid, task fails. Returns True if cargo successfully dropped, False otherwise.', 'go_to_point': 'Action: Move agent to specified location. To check for valid location, use x,y coordinates. If location is invalid, task fails. Returns True if agent reaches destination, False otherwise.', 'load_cargo': 'Action: Load cargo from specified location. To check for valid location, use x,y coordinates. If location is invalid, task fails. Returns True if cargo successfully loaded, False otherwise.', 'pick_up_item': 'Action: Pick up specified item at current location. If item is not found, task fails. Returns True if item successfully picked up, False otherwise.', 'is_agent_at_point': 'Condition: Check if agent is at specified location. To check for valid location, use x,y coordinates. Returns True if agent is at the specified location, False otherwise.', 'is_agent_home': 'Condition: Check if agent is at home base. Returns True if agent is at home base, False otherwise.', 'is_cargo_full': 'Condition: Check if agent's cargo is full. Returns True if cargo is full, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3. // USER COMMAND: generate behavior tree to 'Pick up item at current location and deliver it to home base'. Output only the XML behavior tree without extra text.
3. // OUTPUT:
<BehaviorTree><Sequence><Action>pick_up_item</Action><Sequence><Condition>is_agent_home</Condition><Action>drop_cargo</Action></Sequence></Sequence></BehaviorTree>

###
4. // INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_red': "Action: Change agent's color to red. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'go_to_point': 'Action: Move agent to specified location. To check for valid location, use x,y coordinates. If location is invalid, task fails. Returns True if agent reaches destination, False otherwise.', 'is_agent_at_point': 'Condition: Check if agent is at specified location. To check for valid location, use x,y coordinates. Returns True if agent is at the specified location, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4. // USER COMMAND: generate behavior tree to 'Move agent to specified location and change color to red upon arrival'. Output only the XML behavior tree without extra text.
4. // OUTPUT:
<BehaviorTree><Sequence><Action>go_to_point</Action><Action>change_color_to_red</Action></Sequence></BehaviorTree>

###
5. // INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'change_color_to_blue': "Action: Change agent's color to blue. Always returns True.", 'change_color_to_red': "Action: Change agent's color to red. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'capture_opponent': 'Action: Move agent to opponent's location and capture them. To check for valid location, use x,y coordinates. If opponent is not captured, task fails. Returns True if opponent is successfully captured, False otherwise.', 'is_opponent_captured': 'Condition: Check if opponent is captured. Returns True if opponent is captured, False otherwise.', 'is_enemy_nearby': 'Condition: Check for nearby enemy agents. Returns True if an enemy is detected within a certain radius, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5. // USER COMMAND: generate behavior tree to 'Capture enemy agent located at (5, 10) and change color to blue upon capture'. Output only the XML behavior tree without extra text.
5. // OUTPUT:
<BehaviorTree><Sequence><Action>capture_opponent</Action><Action>change_color_to_blue</Action></Sequence></BehaviorTree>

###
6. // INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'is_agent_at_point': 'Condition: Check if agent is at specified location. To check for valid location, use x,y coordinates. Returns True if agent is at the specified location, False otherwise.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'charge_battery': 'Action: Move agent to charging station and charge battery. To check for valid location, use x,y coordinates. If location is invalid, task fails. Returns True if battery is fully charged, False otherwise.', 'is_battery_full': 'Condition: Check if battery is fully charged. Returns True if battery is fully charged, False otherwise.', 'is_battery_low': 'Condition: Check if battery is low. Returns True if battery is below 20% capacity, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6. // USER COMMAND: generate behavior tree to 'Charge battery at charging station and return to nest'. Output only the XML behavior tree without extra text.
6. // OUTPUT:
<BehaviorTree><Sequence><Action>charge_battery</Action><Action>continue_movement_agent</Action></Sequence></BehaviorTree>

###
7. // INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 
###
4.// INSTRUCTIONS: Use only the following behaviors {'move_forward': 'Action: Move one step forward while maintaining formation. Always returns True.', 'move_backward': 'Action: Move one step backward while maintaining formation. Always returns True.', 'turn_left': 'Action: Rotate the formation to the left by 90 degrees. Always returns True.', 'turn_right': 'Action: Rotate the formation to the right by 90 degrees. Always returns True.', 'is_target_in_sight': 'Condition: Check if the target is within the line of sight for the formation. Returns True if the target is visible, False otherwise.', 'is_target_reached': 'Condition: Check if the target is within 15 units of distance from the formation. Returns True if the target is within 15 units of distance, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Generate a behavior tree for a formation of robots to navigate and capture a target using a combination of movement and turns.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_target_in_sight</Condition><Action>turn_right</Action><Sequence><Condition>is_target_reached</Condition><Action>capture_target</Action></Sequence></Selector><Sequence><Action>move_forward</Action><Action>turn_right</Action><Action>move_forward</Action><Action>turn_left</Action><Action>move_forward</Action></Sequence></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'avoid_enemy': 'Action: Deviate from the enemy's line of fire to avoid being hit. Always returns True.','attack_enemy': 'Action: Fire at the enemy while maintaining formation. Always returns True.','reform_formation': 'Action: Reorganize and reform the formation for better targeting and defense. Always returns True.','is_enemy_detected': 'Condition: Check if enemy is within range. Returns True if an enemy is detected, False otherwise.','is_shot_fired': 'Condition: Check if the enemy has fired a shot. Returns True if a shot is fired, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Generate a behavior tree for a swarm of robots to engage in a battle against an enemy, while constantly monitoring for incoming shots and adapting their formation.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_enemy_detected</Condition><Action>attack_enemy</Action><Sequence><Condition>is_shot_fired</Condition><Action>avoid_enemy</Action></Sequence></Selector><Sequence><Condition>is_formation_broken</Condition><Action>reform_formation</Action></Sequence></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'find_food_source': 'Action: Search for nearby food sources. Always returns True.','gather_food': 'Action: Collect and gather food from a food source. Always returns True.','eat_food': 'Action: Consume and replenish energy from gathered food. Always returns True.','is_food_source_nearby': 'Action: Check for food sources within the vicinity. Returns True if a food source is detected, False otherwise.','is_hungry': 'Condition: Check if the robot's energy level is low. Returns True if energy is low, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Generate a behavior tree for a robot to hunt for food, gather it, and replenish its energy levels.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_hungry</Condition><Selector><Sequence><Condition>is_food_source_nearby</Condition><Action>gather_food</Action></Sequence><Action>find_food_source</Action></Selector></Sequence><Action>eat_food</Action></Selector></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'detect_cliff': 'Condition: Check if robot is near a cliff or drop-off. Returns True if a cliff is detected, False otherwise.','back_away': 'Action: Move backward to avoid falling off the cliff. Always returns True.','turn_around': 'Action: Turn around and change direction to avoid falling. Always returns True.','jump': 'Action: Use jumping mechanism to cross the gap. Always returns True.','is_jumping_possible': 'Condition: Check if there is enough distance for the robot to successfully jump. Returns True if a successful jump can be made, False otherwise.','is_safe_distance': 'Condition: Check if robot is a safe distance away from the cliff to continue walking. Returns True if a safe distance is maintained, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: Generate a behavior tree for a robot to navigate and cross a potentially dangerous cliff or drop-off.
7.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>detect_cliff</Condition><Selector><Sequence><Condition>is_jumping_possible</Condition><Action>jump</Action></Sequence><Action>back_away</Action><Action>turn_around</Action></Selector></Sequence><Sequence><Condition>is_safe_distance</Condition><Action>walk_forward</Action></Sequence><Action>detect_cliff</Action></Selector></BehaviorTree>
###
3.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_red': "Action: Change agent's color to red. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3.// USER COMMAND: generate behavior tree to 'Set a target and move towards it, avoid obstacles on the way, form a line with other robots and change color to green'. Output only the XML behavior tree without extra text.
3.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_target_detected</Condition><Action>continue_movement_agent</Action><Condition>is_path_clear</Condition><Action>avoid_obstacle</Action></Sequence><Sequence><Action>form_line</Action><Action>change_color_to_green</Action></Sequence></Selector></BehaviorTree>

###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_red': "Action: Change agent's color to red. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Patrol an area, if target is detected, move towards it and signal task completion'. Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>wander</Action><Sequence><Condition>is_target_detected</Condition><Action>continue_movement_agent</Action></Sequence><Condition>is_target_reached</Condition><Action>task_completed</Action></Sequence></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_red': "Action: Change agent's color to red. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Gather all robots to the nest, form a line and change color to white'. Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree><Sequence><Selector><Condition>is_agent_in_nest</Condition><Action>continue_movement_agent</Action></Selector><Sequence><Action>wander</Action><Condition>is_line_formed</Condition><Note: This is a simplified example, and the actual behavior tree may include more nodes and conditions for specific scenarios.

###
4. //INSTRUCTIONS: Use only the following behaviors {'move_forward': 'Action: Move one step forward. Always returns True.', 'move_backward': 'Action: Move one step backward. Always returns True.', 'move_right': 'Action: Move one step to the right. Always returns True.', 'move_left': 'Action: Move one step to the left. Always returns True.', 'is_wall_ahead': 'Condition: Check if a wall is detected ahead. Returns True if a wall is detected, False otherwise.', 'detect_line': 'Condition: Check if a black line is detected under the agent. Returns True if a black line is detected, False otherwise.', 'reach_goal': 'Action: Signal goal reached by freezing movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4. //USER COMMAND: Generate a behavior tree for the agent to move towards the goal, avoiding walls and following a black line on the ground.
4. // OUTPUT:
<BehaviorTree> <Sequence> <Action>move_forward</Action> </Sequence> <Selector> <Sequence> <Condition>is_wall_ahead</Condition> <Selector> <Sequence> <Action>move_right</Action> <Condition>detect_line</Condition> <Action>move_left</Action> </Sequence> <Action>move_backward</Action> </Selector> </Sequence> <Action>reach_goal</Action> </BehaviorTree>

###
5. // INSTRUCTIONS: Use only the following behaviors {'is_red_light_detected': 'Condition: Check if a red light is detected. Returns True if a red light is detected, False otherwise.', 'stop_vehicle': 'Action: Stop the vehicle. Always returns True.', 'change_to_green_light': 'Action: Change traffic light to green. Always returns True.', 'change_to_red_light': 'Action: Change traffic light to red. Always returns True.', 'turn_left': 'Action: Turn the vehicle left. Always returns True.', 'turn_right': 'Action: Turn the vehicle right. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5. // USER COMMAND: Generate a behavior tree for a self-driving car to navigate through a traffic intersection, obeying traffic lights and turning left or right when necessary.
5. // OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>is_red_light_detected</Condition> <Action>stop_vehicle</Action> <Action>change_to_green_light</Action> </Sequence> <Selector> <Sequence> <Action>turn_left</Action> <Condition>is_green_light_detected</Condition> </Sequence> <Sequence> <Action>turn_right</Action> <Condition>is_red_light_detected</Condition> </Sequence> <Action>change_to_red_light</Action> </Selector> </BehaviorTree>

###
6. // INSTRUCTIONS: Use only the following behaviors {'is_object_detected': 'Condition: Check if an object is detected within 10 units from the agent. Returns True if an object is detected, False otherwise.', 'pick_up_object': 'Action: Pick up the object with the agent's arm. Always returns True.', 'place_object_on_platform': 'Action: Place the object on the designated platform. Always returns True.', 'move_forward': 'Action: Move one step forward. Always returns True.', 'move_backward': 'Action: Move one step backward. Always returns True.', 'move_left': 'Action: Move one step to the left. Always returns True.', 'move_right': 'Action: Move one step to the right. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6. // USER COMMAND: Generate a behavior tree for the agent to pick up a detected object and place it on a designated platform while avoiding obstacles.
6. // OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>is_object_detected</Condition> <Action>pick_up_object</Action> <Selector> <Sequence> <Condition>obstacle_ahead</Condition> <Action>move_right</Action> <Selector> <Sequence> <Condition>obstacle_ahead</Condition> <Action>move_backward</Action> <Selector> <Sequence> <Condition>is_object_detected</Condition> <Action>place_object_on_platform</Action> </Sequence> <Action>move_forward</Action> </Selector> </Sequence> <Action>move_left</Action> </Selector> </Sequence> </Selector> </BehaviorTree>

###
7. //INSTRUCTIONS: Use only the following behaviors {'follow_leader': 'Action: Follow the specified leader. Always returns True.', 'detect_collision': 'Condition: Check if a collision with another robot is detected. Returns True if a collision is detected, False otherwise.', 'avoid_collision': 'Action: Move away from the detected collision. Always returns True.', 'scout_area': 'Action: Scout the surrounding area for potential obstacles or targets. Always returns True.', 'is_area_clear': 'Condition: Check if the nearby area is clear. Returns True if no obstacles or targets are detected, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7. // USER COMMAND: Generate a behavior tree for a swarm of robots to follow a specific leader, avoiding collisions and scouting the area for potential obstacles or targets.
7. // OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>detect_collision</Condition> <Action>avoid_collision</Action> </Sequence> <Sequence> <Condition>is_area_clear</Condition> <Action>scout_area</Action> </Sequence> <Action>follow_leader</Action> </Selector> </BehaviorTree>
###
3.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sample input with condition: if the environment is dark, move towards the light otherwise, form a line.)
3.// USER COMMAND: generate behavior tree to 'Move towards light if environment is dark, otherwise form a line' Output only the XML behavior tree without extra text.
3.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>is_agent_in_nest</Condition> <Action>form_line</Action> </Sequence> <Sequence> <Condition>is_obstacle_detected</Condition> <Action>avoid_obstacle</Action> <Condition>is_path_clear</Condition> <Action>continue_movement_agent</Action> </Sequence> <Action>wander</Action> </Selector> </BehaviorTree>


###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sample input with condition: if the target is within range, move towards it, otherwise freeze movement and form a line.)
4.// USER COMMAND: generate behavior tree to 'Move towards target if within range, otherwise form a line and freeze movement' Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>is_target_detected</Condition> <Action>continue_movement_agent</Action> </Sequence> <Sequence> <Action>form_line</Action> <Action>agent_movement_freeze</Action> </Sequence> </Selector> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Move towards the target while avoiding obstacles.)
5.// USER COMMAND: generate behavior tree to 'Move towards the target while avoiding obstacles' Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>is_obstacle_detected</Condition> <Action>avoid_obstacle</Action> <Condition>is_path_clear</Condition> <Action>continue_movement_agent</Action> </Sequence> <Sequence> <Condition>is_target_detected</Condition> <Action>continue_movement_agent</Action> </Sequence>  
###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Move in a straight line until an obstacle is detected, then avoid the obstacle and continue forward until the target is reached, change color to green, and then return to the nest and freeze movement.'Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_path_clear</Condition><Action>continue_movement_agent</Action><Selector><Sequence><Condition>is_target_detected</Condition><Action>change_color_to_green</Action><Action>task_completed</Action></Sequence><Action>wander</Action></Selector></Sequence><Sequence><Condition>is_agent_in_nest</Condition><Action>change_color_to_white</Action><Action>agent_movement_freeze</Action></Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Move towards the targets, avoiding obstacles and forming a line with other agents along the way, then return to the nest, change color to white, and freeze movement.'Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_path_clear</Condition><Action>continue_movement_agent</Action><Condition>is_agent_in_nest</Condition></Sequence><Action>agent_movement_freeze</Action></Selector><Sequence><Condition>is_target_detected</Condition><Action>change_color_to_green</Action><Action>task_completed</Action></Sequence><Selector><Condition>is_obstacle_detected</Condition><Action>avoid_obstacle</Action><Sequence><Condition>is_line_formed</Condition><Action>form_line</Action></Sequence></Selector></BehaviorTree>
  
###
6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Move towards the food, while avoiding obstacles and coordinating with other agents to encircle 
###
3.// INSTRUCTIONS: Use only the following behaviors {'move_forward': 'Action: Move the agent forward by 1 unit. Returns True if movement is successful, False otherwise.', 'rotate_clockwise': 'Action: Rotate the agent clockwise by 90 degrees. Returns True if rotation is successful, False otherwise.', 'rotate_anticlockwise': 'Action: Rotate the agent anticlockwise by 90 degrees. Returns True if rotation is successful, False otherwise.', 'check_for_obstacle': 'Condition: Check for any obstacles ahead. Returns True if an obstacle is detected, False otherwise.', 'check_for_goal': 'Condition: Check if the goal is within 5 units. Returns True if the goal is within 5 units of distance, False otherwise.', 'is_color_purple': 'Condition: Check if the agent's color is purple. Returns True if the agent's color is purple, False otherwise.', 'is_color_yellow': 'Condition: Check if the agent's color is yellow. Returns True if the agent's color is yellow, False otherwise.', 'change_color_to_purple': 'Action: Change agent's color to purple. Always returns True.', 'change_color_to_yellow': 'Action: Change agent's color to yellow. Always returns True.', 'rotate_towards_goal': 'Action: Rotate the agent towards the goal. Returns True if rotation is successful, False otherwise.', 'move_towards_goal': 'Action: Move the agent towards the goal. Returns True if movement is successful, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3.// USER COMMAND: generate behavior tree to 'Reach the goal while avoiding obstacles and changing colors from purple to yellow in the process.'Output only the XML behavior tree without extra text.
3.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence><Condition>is_color_purple</Condition> <Action>change_color_to_yellow</Action>  <Action>rotate_anticlockwise</Action> </Sequence> <Selector> <Sequence> <Condition>check_for_obstacle</Condition> <Action>rotate_clockwise</Action> <Action>move_forward</Action> </Sequence> <Action>move_towards_goal</Action> </Selector> </Sequence> </BehaviorTree>

###
4.// INSTRUCTIONS: Use only the following behaviors {'detect_enemy': 'Condition: Check for enemies within 10 units. Returns True if enemies are detected, False otherwise.', 'detect_friend': 'Condition: Check for friendly agents within 5 units. Returns True if friendly agents are detected, False otherwise.', 'move_towards_target': 'Action: Move towards the target enemy. Returns True if movement is successful, False otherwise.', 'move_away_from_target': 'Action: Move away from the target enemy. Returns True if movement is successful, False otherwise.', 'attack_target': 'Action: Attack the target enemy. Always returns True.', 'orient_towards_closest_friend': 'Action: Orient towards the closest friendly agent. Returns True if orientation is successful, False otherwise.', 'form_circle_around_friend': 'Action: Form a circle around the closest friendly agent. Returns True if formation is successful, False otherwise.', 'is_circle_formed': 'Condition: Check if a complete circle is formed around the closest friend. Returns True if a complete circle is formed, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Join with friendly agents, attack enemy targets, and maintain a circular formation around each friendly agent.'Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>detect_enemy</Condition> <Action>move_towards_target</Action> <Action>attack_target</Action> </Sequence> <Selector> <Sequence> <Condition>detect_friend</Condition> <Action>orient_towards_closest_friend</Action> <Sequence> <Condition>is_circle_formed</Condition> <Action>attack_target</Action> </Sequence> <Sequence> <Action>form_circle_around_friend</Action> <Action>attack_target</Action> </Sequence> </Selector> </Selector> <Selector> <Sequence> <Condition>detect_friend</Condition> <Action>move_away_from_target</Action> </Sequence> <Action>wander</Action> </Selector> </Sequence> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'move_to_water_source': 'Action: Move towards the nearest water source. Returns True if movement is successful, False otherwise.', 'drink_water': 'Action: Drink water from the nearest water source. Always returns True.', 'avoid_predator': 'Action: Move away from nearby predators. Always returns True.', 'is_thirsty': 'Condition: Check if the agent's thirst level is below 50%. Returns True if thirst level is below 50%, False otherwise.', 'is_not_thirsty': 'Condition: Check if the agent's thirst level is above or equal to 50%. Returns True if thirst level is above or equal to 50%, False otherwise.', 'is_predator_nearby': 'Condition: Check if a predator is within 10 units. Returns True if a predator is within 10 units of distance, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Survive in the desert by finding water, drinking when thirsty, and avoiding predators.'Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>is_thirsty</Condition> <Action>move_to_water_source</Action> <Action>drink_water</Action> </Sequence> <Sequence> <Condition>is_predator_nearby</Condition> <Action>avoid_predator</Action> </Sequence> <Action>wander</Action> </Selector> </Sequence> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'do_task': 'Action: Start performing the given task. Returns True if successful, False otherwise.', 'gather_resources': 'Action: Gather resources along the way. Returns True if successful, False otherwise.', 'is_target_reached': 'Condition: Check if the final target is reached. Returns True if the final target is reached, False otherwise.', 'move_towards_final_target': 'Action: Move towards the final target. Returns True if movement is successful, False otherwise.', 'is_resource_available': 'Condition: Check if resources are available. Returns True if resources are available, False otherwise.', 'is_resource_reached': 'Condition: Check if the agent has reached the resource. Returns True if the agent has reached the resource, False otherwise.', 'collect_resource': 'Action: Collect the resource and store it. Returns True if successful, False otherwise.', '###
3.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3.// USER COMMAND: generate behavior tree to 'Wander around'Output only the XML behavior tree without extra text.
3.// OUTPUT:
<BehaviorTree> <Sequence> <Action>wander</Action> </Sequence> </BehaviorTree>
###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Move forward while avoiding obstacles and stop when target is reached.'Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree> <Sequence> <Action>continue_movement_agent</Action> <Selector> <Sequence> <Condition>is_path_clear</Condition> <Action>avoid_obstacle</Action> </Sequence> <Condition>is_target_reached</Condition> <Action>task_completed</Action> </Selector> </Sequence> </BehaviorTree>
###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Move forward and change color to green when target is detected, then change back to white when target is reached.'Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree> <Sequence> <Action>continue_movement_agent</Action> <Selector> <Sequence> <Condition>is_target_detected</Condition> <Action>change_color_to_green</Action> </Sequence> <Condition>is_target_reached</Condition> <Action>change_color_to_white</Action> </Selector> </Sequence> </BehaviorTree>
###
6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 
###
4.//INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do
the task)
4.// USER COMMAND: generate behavior tree to 'navigate to target while avoiding obstacles and performing random movement to find target' Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree> <Sequence> <Condition>is_target_detected</Condition> <Action>move_forward</Action> <Selector> <Sequence> <Condition>is_line_formed</Condition> <Action>wander</Action> </Sequence> <Sequence> <Condition>is_obstacle_detected</Condition> <Action>avoid_obstacle</Action> </Sequence> </Selector> </Sequence> </BehaviorTree>

###
5.//INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do
the task)
5.// USER COMMAND: generate behavior tree to 'create a formation, move to target, and perform task while remaining in formation' Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree> <Sequence> <Condition>is_target_detected</Condition> <Action>move_forward</Action> <Action>form_line</Action> <Selector> <Sequence> <Condition>is_task_completed</Condition> <Action>continue_movements_agent</Action> </Sequence> <Sequence> <Condition>is_obstacles_detected</Condition> <Action>avoid_obstacles</Action> </Sequence> </Selector> </Sequence> </BehaviorTree>

###
6.//INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander_min_distance': "Action: Move randomly within the environment, ensuring a minimum distance of 5 units from any obstacles. Always returns True."}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do
the task)
6.// USER COMMAND: generate behavior tree to 'safely navigate through an obstacle course while maintaining a minimum distance from obstacles' Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Action>move_forward</Action> <Condition>is_obstacle_detected</Condition> <Action>avoid_obstacle</Action> </Sequence> <Sequence> <Condition>is_path_clear
###
4.// INSTRUCTIONS: Use only the following behaviors {'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'detect_target': 'Action: Scan environment for target. Returns True if target is found, False otherwise.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'move_to_target': 'Action: Move towards target. Always returns True.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Scan environment for obstacle, change color to green, move towards target' Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>is_obstacle_detected</Condition> <Action>avoid_obstacle</Action> </Sequence> <Action>detect_target</Action> </Selector> <Selector> <Sequence> <Condition>detect_target</Condition><Action>change_color_to_green</Action> <Action>move_to_target</Action> </Sequence> <Action>wander</Action> </Selector> </Sequence> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'change_color_to_black': "Action: Change agent's color to black. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'detect_target': 'Action: Scan environment for target. Returns True if target is found, False otherwise.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'stay_still': 'Action: Stay still and do not move. Always returns True.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Find target, stay still, change color to black, and continue moving' Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>is_agent_in_nest</Condition> <Action>detect_target</Action> </Sequence> <Action>stay_still</Action> </Selector> <Action>change_color_to_black</Action> <Action>continue_movement_agent</Action> </Sequence> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'detect_food_source': 'Action: Scan environment for food source. Returns True if food source is found, False otherwise.', 'eat_food': 'Action: Consume food from food source. Returns True if food is available, False otherwise.', 'follow_food_trail': 'Action: Follow trail of food scent. Returns True if trail is detected, False otherwise.', 'is_hungry': 'Condition: Check if agent is hungry. Returns True if agent's hunger level is above a certain threshold, False otherwise.', 'is_food_source_detected': 'Condition: Check if food source is within 30 units. Returns True if food source is within 30 units of distance, False otherwise.', 'is_food_source_reached': 'Condition: Check if food source is within 10 units. Returns True if food source is within 10 units of distance, False otherwise.', 'stop_movement': 'Action: Halt agent's movement. Returns True if movement is stopped, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Detect food source, follow food trail, and eat food' Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>is_hungry</Condition> <Action>detect_food_source</Action> </Sequence> <Action>follow_food_trail</Action> </Selector> <Selector> <Sequence> <Condition>is_food_source_detected</Condition><Action>eat_food</Action> <Action>task_completed</Action> </Sequence> <Action>wander</Action> </Selector> </Sequence> </BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'detect_target': 'Action: Scan environment for target. Returns True if target is found, False otherwise.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I 
###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Complete a series of predefined tasks, such as moving to a specific location, avoiding obstacles, and changing color'Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_target_detected</Condition><Action>change_color_to_green</Action></Sequence><Sequence><Condition>is_obstacle_detected</Condition><Action>avoid_obstacle</Action></Sequence><Sequence><Condition>task_completed</Condition><Action>continue_movement_agent</Action></Sequence></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'form_square': 'Action: Form a square with the other agents. Returns True if a square is formed, False otherwise.', 'is_all_agents_in_square': 'Condition: Check if all agents are within a formed square. Returns True if all agents are in the square, False otherwise.', 'move_towards_nearest_agent': 'Action: Move towards the nearest agent. Returns True if movement is successful, False otherwise.', 'is_agent_in_square': 'Condition: Check if the agent is already in a formed square. Returns True if the agent is in the square, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Form a square with other agents and maintain position within the square'Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_all_agents_in_square</Condition><Action>agent_movement_freeze</Action></Sequence><Sequence><Condition>is_agent_in_square</Condition><Action>move_towards_nearest_agent</Action></Sequence><Action>form_square</Action></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'change_speed': "Action: Change agent's movement speed. Returns True if speed is successfully changed, False otherwise.", 'is_in_field_of_view': 'Condition: Check if a target is within the agent's field of view. Returns True if target is within field of view, False otherwise.', 'move_towards_target': 'Action: Move towards the target. Returns True if movement is successful, False otherwise.', 'stop_movement': 'Action: Stop agent's movement. Returns True if movement is successfully stopped, False otherwise.', 'wait': 'Action: Wait for a specified amount of time. Returns True once the waiting time is completed, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Chase a moving target and adapt movement speed to catch up'Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_in_field_of_view</Condition><Action>change_speed</Action><Action>move_towards_target</Action></Sequence><Sequence><Action>stop_movement</Action></Sequence><Sequence><Action>wait</Action><Action>agent_movement_freeze</Action></Sequence></Selector></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'check_battery_level': 'Condition: Check the agent's battery level. Returns True if battery level is above 20%, False if below 20%.', 'return_to_charging_station': 'Action: Move towards the charging station. Returns True if movement is successful, False otherwise.', 'charge_battery': 'Action: Initiate charging of battery. Returns True if charging is initiated, False otherwise.', 'is_battery_charged': 'Condition: Check if the agent's battery is fully charged. Returns True if battery is fully charged, False otherwise.', 'wait': 'Action: Wait for a specified amount of time. Returns True once the waiting time is completed, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: generate behavior tree to 'Monitor and maintain battery levels, return to charging station if necessary, and resume previous task'Output only the XML behavior tree without extra text.
7.// OUTPUT:
<BehaviorTree><Selector><Condition>check_battery_level</Condition><Action>return_to_charging_station</Action><Sequence><Condition>is_battery_charged</Condition><Action>agent_movement_freeze</Action></Sequence></Selector></BehaviorTree>
###
3.// INSTRUCTIONS: Use only the following behaviors {'move_to_target': "Action: Move towards the target. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_yellow': "Action: Change agent's color to yellow. Always returns True.", 'form_square': 'Action: Form a square with other agents. Returns True when the square is completed.', 'is_square_formed': 'Condition: Check if a square is formed. Returns True if the square is formed with other agents, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_target_in_sight': 'Condition: Check if the target is in the agent's line of sight. Returns True if the target is within the agent's field of view, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 10 units. Returns True if the target is within 10 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3.// USER COMMAND: generate behavior tree to 'Move towards the target, form a square with other agents when target is in sight, and change color to yellow'. Output only the XML behavior tree without extra text.
3.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_target_in_sight</Condition><Sequence><Action>form_square</Action><Action>change_color_to_yellow</Action></Sequence></Sequence><Action>move_to_target</Action></Selector></BehaviorTree>

###
4.// INSTRUCTIONS: Use only the following behaviors {'move_to_target': "Action: Move towards the target. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_blue': "Action: Change agent's color to blue. Always returns True.", 'form_circle': 'Action: Form a circle with other agents. Returns True when the circle is completed.', 'is_circle_formed': 'Condition: Check if a circle is formed. Returns True if the circle is formed with other agents, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_target_in_range': 'Condition: Check if the target is within a specified range. Returns True if the target is within the specified range, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 5 units. Returns True if the target is within 5 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Move towards the target, form a circle with other agents when the target is within range, and change color to blue'. Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_target_in_range</Condition><Sequence><Action>form_circle</Action><Action>change_color_to_blue</Action></Sequence></Sequence><Action>move_to_target</Action></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'move_to_target': "Action: Move towards the target. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_red': "Action: Change agent's color to red. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Detect and avoid obstacles while moving towards the target, and change color to red when the target is reached'. Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_target_reached</Condition><Action>change_color_to_red</Action></Sequence><Selector><Sequence><Condition>is_obstacle_detected</Condition><Action>avoid_obstacle</Action></Sequence><Action>move_to_target</Action></Selector></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'move_to_target': "Action: Move towards the target. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'rotate_left': 'Action: Rotate agent to the left by 90 degrees. Always returns True.', 'rotate_right': 'Action: Rotate agent to the right by 90 degrees. Always returns True.', 'form_cross': 'Action: Form a cross with other agents. Returns True when the cross is completed.', 'is_cross_formed': 'Condition: Check if a cross is formed. Returns True if the cross is formed with other agents, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_target_in_range': 'Condition: Check if the target is within a specified range. Returns True if the target is within the specified range, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 5 units. Returns True if the target is within 5 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the
###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_red': "Action: Change agent's color to red. Always returns True.", 'change_color_to_blue': "Action: Change agent's color to blue. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_rectangular_grid': 'Action: Form a rectangular grid at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_grid_formed': 'Condition: Check if a rectangular grid is formed. Returns True if the grid is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Form a rectangular grid at the center and change color to blue, then check for obstacles and avoid them while moving towards the target.'Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree><Sequence><Action>form_rectangular_grid</Action><Action>change_color_to_blue</Action><Selector><Action>continue_movement_agent</Action><Sequence><Condition>is_obstacle_detected</Condition><Action>avoid_obstacle</Action></Sequence></Selector><Condition>is_target_detected</Condition><Action>task_completed</Action><Selector><Condition>is_path_clear</Condition><Action>wander</Action></Selector></Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'check_environment': 'Action: Check the environment for any changes. Returns True if there are changes, False otherwise.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_red': "Action: Change agent's color to red. Always returns True.", 'change_color_to_yellow': "Action: Change agent's color to yellow. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_circle': 'Action: Form a circle at the center. Always returns True.', 'is_environment_changed': 'Condition: Check if the environment has changed. Returns True if changes are detected, False otherwise.', 'is_circle_formed': 'Condition: Check if a circle is formed. Returns True if the circle is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Monitor environment and form a circle at the center when changes are detected, then change color to yellow and continue monitoring for changes.'Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Selector><Action>check_environment</Action><Condition>is_environment_changed</Condition><Sequence><Action>form_circle</Action><Action>change_color_to_yellow</Action></Sequence></Selector><Selector><Action>continue_movement_agent</Action><Condition>is_obstacle_detected</Condition><Action>wander</Action></Selector></Sequence><Action>form_circle</Action></Selector><Condition>is_environment_changed</Condition><Action>task_completed</Action></Sequence></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_red': "Action: Change agent's color to red. Always returns True.", 'change_color_to_blue': "Action: Change agent's color to blue. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_triangle': 'Action: Form a triangle at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_triangle_formed': 'Condition: Check if a triangle is formed. Returns True if the triangle is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Avoid obstacles and form a triangle at the center, then change color to red and return to the nest.'Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree><Sequence><Action>avoid_obstacle</Action><Action>form_triangle</Action><Sequence><Condition>is_obstacle_detected</Condition><Condition>is_path_clear</Condition><Action>wander</Action></Sequence><Action>change_color_to_red</Action><Sequence>< 
###
3.// INSTRUCTIONS: Use only the following behaviors {'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3.// USER COMMAND: generate behavior tree to 'Navigate through a maze, avoiding obstacles and forming a line at the center upon reaching the end.' Output only the XML behavior tree without extra text.
3.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>is_path_clear</Condition><Action>continue_movement_agent</Action></Sequence><Action>avoid_obstacle</Action></Selector><Condition>is_path_clear</Condition><Action>form_line</Action></Sequence></BehaviorTree>

###
4.// INSTRUCTIONS: Use only the following behaviors {'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_red': "Action: Change agent's color to red. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'escape': 'Action: Move away from detected danger. Always returns True.', 'is_danger_detected': 'Condition: Check if danger is detected. Returns True if danger is detected, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Escape from danger and change color to red, then return to original position and change color to green.' Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_danger_detected</Condition><Condition>is_obstacle_detected</Condition><Action>escape</Action><Action>change_color_to_red</Action><Action>continue_movement_agent</Action><Action>change_color_to_green</Action></Sequence><Action>wander</Action></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'check_in_range': 'Condition: Check if other robots are within range. Returns True if other robots are detected, False otherwise.', 'is_leader': 'Condition: Check if the agent is the leader. Returns True if the agent is the leader, False otherwise.', 'join_formation': 'Action: Join other robots in formation. Always returns True.', 'move_to_leader': 'Action: Move towards the leader. Always returns True.', 'move_to_position': 'Action: Move to a specific position. Always returns True.', 'scan_area': 'Action: Scan the environment for other robots. Always returns True.', 'stop_formation': 'Action: Stop current formation and return to normal movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Scan the area for other robots, join formation and move to specific position, then become leader and stop the formation.' Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>scan_area</Action><Condition>check_in_range</Condition><Action>join_formation</Action><Action>move_to_position</Action><Condition>is_leader</Condition><Action>move_to_leader</Action><Action>stop_formation</Action></Sequence><Action>scan_area</Action></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'change_color_to_blue': "Action: Change agent's color to blue. Always returns True.", 'collect_resource': 'Action: Collect resource from environment. Always returns True.', 'deposit_resource': 'Action: Deposit resource in storage. Always returns True.', 'is_resource_available': 'Condition: Check if resource is available in the environment. Returns True if resource is available, False otherwise.', 'is_storage_full': 'Condition: Check if storage for resources is full. Returns True if storage is full, False otherwise.', 'move_towards_resource': 'Action: Move towards nearest resource. Always returns True.', 'move_towards_storage': 'Action: Move towards storage for resources. Always returns True.', 'search_for_resource': 'Action: Search the environment for available resources. Always returns True.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Search for available resources, collect and deposit in storage, then return to original position and change color to blue.' Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_resource_available</Condition><Action>move_towards_resource</Action><Action>collect_resource</Action><Condition>is_storage_full</Condition><Action>move_towards_storage</Action><Action>deposit_resource</Action><Action>task_completed</Action></Sequence><Action>search_for_resource</Action><Action>task_completed</Action></Selector></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'capture_enemy': 'Action: Capture enemy agent. Always return True.', 'change_color_to_red': "Action: Change agent's color to red. Always returns True.", 'express_dominance': 'Action: Express dominance over captured enemy agent. Always returns True.', 'is_agent_captured': 'Condition: Check if an enemy agent is captured. Returns True if an enemy agent is captured, False otherwise.', 'is_dominant': 'Condition: Check if the agent is dominant. Returns True if the agent is dominant, False otherwise.', 'move_to_enemy': 'Action: Move towards nearest enemy agent. Always returns True.', 'suppress_enemy': 'Action: Suppress enemy agent by interrupting its actions. Always returns True.'###
3.// INSTRUCTIONS: Use only the following behaviors {'follow_path': 'Action: Follow a predefined path. Always returns True.', 'move_to_target': "Action: Move towards the target. Returns True if target is reached, False otherwise.", 'reach_destination': 'Action: Signal arrival at destination and stop. Always returns True.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_reached': 'Condition: Check if target is within 5 units. Returns True if the target is within 5 units of distance, False otherwise.', 'is_at_destination': 'Condition: Check if agent has reached the destination. Returns True if the agent is at the destination, False otherwise.', 'wait_for_task': 'Condition: Wait for task instructions. Returns True if a new task is received, False otherwise.', 'stop_motion': 'Action: Stop all movement and remain stationary. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3.// USER COMMAND: generate behavior tree to 'Follow a specific path, stop and wait for task instructions, move to target and reach destination.'Output only the XML behavior tree without extra text.
3.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Sequence> <Action>stop_motion</Action> <Condition>wait_for_task</Condition> </Sequence> <Action>follow_path</Action> </Selector> <Selector> <Sequence> <Condition>is_path_clear</Condition> <Action>move_to_target</Action> <Sequence> <Condition>is_target_reached</Condition> <Action>reach_destination</Action> </Sequence> </Selector> </BehaviorTree>
###
4.// INSTRUCTIONS: Use only the following behaviors {'move_forward': 'Action: Move forward in a straight line. Always returns True.', 'move_backward': "Action: Move backward in a straight line. Always returns True.", 'rotate_left': 'Action: Rotate left by 45 degrees. Always returns True.', 'rotate_right': 'Action: Rotate right by 45 degrees. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Move forward, rotate left, move forward, rotate right, then move backward.'Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree> <Sequence> <Action>move_forward</Action> <Action>rotate_left</Action> <Sequence> <Action>move_forward</Action> <Action>rotate_right</Action> </Sequence> <Action>move_backward</Action> </Sequence> </BehaviorTree>
###
5.// INSTRUCTIONS: Use only the following behaviors {'detect_obstacles': 'Action: Detect nearby obstacles. Always returns True.', 'avoid_obstacles': 'Action: Avoid detected obstacles. Returns True if obstacle is successfully avoided, False otherwise.', 'move_to_target': 'Action: Move towards the target. Returns True if target is reached, False otherwise.', 'stay_within_bounds': 'Action: Stay within the boundaries of the environment. Always returns True.', 'is_target_reached': 'Condition: Check if target is within 10 units. Returns True if the target is within 10 units of distance, False otherwise.', 'should_go_initial_position': 'Condition: Check if the agent should return to the initial position. Returns True if the agent has strayed too far from the initial position, False otherwise.', 'reset_to_initial_position': 'Action: Return to the initial position. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Detect obstacles, avoid obstacles if necessary, move towards the target, and stay within the boundaries. If the agent strays too far, return to the initial position.'Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Action>detect_obstacles</Action> <Condition>is_target_reached</Condition> <Condition>should_go_initial_position</Condition> <Action>avoid_obstacles</Action> <Action>move_to_target</Action> </Sequence> <Action>stay_within_bounds</Action> </Selector> <Sequence> <Condition>should_go_initial_position</Condition> <Action>reset_to_initial_position</Action> </Sequence> </BehaviorTree>
###
6.// INSTRUCTIONS: Use only the following behaviors {'get_weather_data': 'Action: Retrieve current weather data. Returns True if data is successfully retrieved, False otherwise.', 'set_temperature_threshold': 'Action: Set the temperature threshold for the swarm robots. Returns True if the threshold is successfully changed, False otherwise.', 'check_temperature': 'Condition: Check if the current temperature exceeds the threshold. Returns True if the temperature is above the set threshold, False otherwise.', 'open_windows': 'Action: Open windows to regulate the temperature. Always returns True.', 'close_windows': 'Action: Close windows to maintain desired temperature. Always returns True.', 'activate_air_conditioning': 'Action: Activate air conditioning to cool down the environment. Returns True if successful, False otherwise.', 'deactivate_air_conditioning': 'Action: Deactivate the air conditioning. Returns True if successful, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Get weather data, set temperature threshold, check temperature, and adjust the environment to maintain desired temperature.'Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree> <Sequence> <Sequence> <Action>get_weather_data</Action> <Action>set_temperature_threshold</Action> <Condition>check_temperature</Condition> </Sequence> <Selector> <Action>open_windows</Action> <Sequence> <Action>close_windows</Action> <Selector> <Action>activate_air_conditioning</Action> <Sequence> <Condition>check_temperature</Condition> <Action>deactivate_air_conditioning</Action> </Sequence> </Selector> </Sequence> </Selector> </Sequence> </BehaviorTree>
###
7.// INSTRUCTIONS: Use only the following behaviors {'scan_environment': 'Action: Scan the environment. Returns True if the scan is successful, False otherwise.', 'analyze_data': 'Action: Analyze the scanned data. Returns True if data is successfully analyzed, False otherwise.', 'generate_map': 'Action: Generate a map of the environment using the analyzed data. Returns True if the map is successfully generated, False otherwise.', 'navigate_using_map': 'Action: Use the generated map to navigate towards the target location. Returns True if the target is reached, False otherwise.', 'is_map_generated': 'Condition: Check if a map of the environment is 
###
4.// INSTRUCTIONS: Use only the following behaviors {'increase_speed': 'Action: Increase the robot's speed by 50%. Always returns True.', 'reduce_speed': 'Action: Reduce the robot's speed by 50%. Always returns True.', 'set_target_to_nearest_object': 'Action: Set the target location to the nearest object in the environment. Always returns True.', 'set_target_to_specific_location': 'Action: Set the target location to a predefined specific location. Always returns True.', 'is_object_reached': 'Condition: Check if the robot has reached the target object. Returns True if the robot has reached the object, False otherwise.', 'is_obstacle_in_path': 'Condition: Check if there is an obstacle in the path to the target. Returns True if an obstacle is detected, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Generate a behavior tree for a robot to navigate to a specific target object while avoiding obstacles and adjusting its speed.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_obstacle_in_path</Condition><Action>reduce_speed</Action></Sequence><Sequence><Condition>is_object_reached</Condition><Action>agent_movement_freeze</Action></Sequence><Sequence><Condition>is_target_detected</Condition><Action>set_target_to_specific_location</Action><Action>increase_speed</Action></Sequence></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'move_forward': 'Action: Move one step forward in the current direction. Always returns True.', 'turn_left': 'Action: Turn the robot 90 degrees to the left. Always returns True.', 'turn_right': 'Action: Turn the robot 90 degrees to the right. Always returns True.', 'check_battery_level': 'Condition: Check the battery level of the robot. Returns True if battery level is above 20%, False otherwise.', 'charge_battery': 'Action: Charge the robot's battery. Always returns True.', 'find_charging_station': 'Action: Navigate to the nearest charging station. Returns True when charging is complete.', 'is_charging': 'Condition: Check if the robot is currently being charged. Returns True if the robot is being charged, False otherwise.', 'is_location_known': 'Condition: Check if the robot has a known location. Returns True if the robot has a known location, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Generate a behavior tree for a robot to autonomously manage its battery and charging needs while exploring an unknown environment.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_location_known</Condition><Action>move_forward</Action><Selector><Sequence><Condition>check_battery_level</Condition><Selector><Sequence><Condition>is_charging</Condition><Action>find_charging_station</Action></Sequence><Action>charge_battery</Action></Selector></Sequence><Sequence><Condition>check_battery_level</Condition><Action>move_forward</Action><Selector><Sequence><Condition>is_charging</Condition><Action>charge_battery</Action></Sequence><Action>turn_left</Action></Selector></Sequence></Selector></Sequence></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'move_forward': 'Action: Move one step forward in the current direction. Always returns True.', 'turn_left': 'Action: Turn the robot 90 degrees to the left. Always returns True.', 'turn_right': 'Action: Turn the robot 90 degrees to the right. Always returns True.', 'is_object_detected': 'Condition: Check for objects nearby. Returns True if an object is detected, False otherwise.', 'pick_up_object': 'Action: Pick up object and add to inventory. Always returns True.', 'use_inventory': 'Action: Use the objects in the inventory to solve a puzzle. Returns True when the puzzle is solved.', 'is_inventory_full': 'Condition: Check if the inventory is full. Returns True if the inventory is full, False otherwise.', 'is_puzzle_solved': 'Condition: Check if the puzzle has been solved. Returns True if the puzzle is solved, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Generate a behavior tree for a robot to explore an environment, collect objects, and use them to solve a puzzle.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_object_detected</Condition><Action>move_forward</Action><Action>pick_up_object</Action></Selector><Sequence><Condition>is_inventory_full</Condition><Action>use_inventory</Action></Sequence><Sequence><Condition>is_puzzle_solved</Condition><Action>agent_movement_freeze</Action></Sequence></Selector></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'move_to_position': 'Action: Move robot to a specific position on the grid. Returns True when robot reaches the target position.', 'detect_obstacle': 'Condition: Check for obstacles in front of the robot. Returns True if an obstacle is detected, False otherwise.', 'detect_object': 'Condition: Check for objects in the environment. Returns True if an object is detected, False otherwise.', 'pick_up_object': 'Action: Pick up object and add to inventory. Returns True when object is successfully picked up.', 'drop_object': 'Action: Drop the currently held object at the designated location. Returns True when object is successfully dropped.', 'map_area': 'Action: Map the current area and include any new discoveries in the robot's internal map. Always returns True.', 'is_robot_moving': 'Condition: Check if the robot is currently in motion. Returns True if the robot is moving, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: Generate a behavior tree for a robot to collect all objects in the environment and deliver them to a designated location while mapping the area.
7.// OUTPUT:
<BehaviorTree><Sequence><Action>move_to_position</Action><Selector><Sequence><Condition>is_robot_moving</Condition><Selector><Sequence><Condition>detect_obstacle</Condition><Action>turn_left</Action></Sequence><Action>move_forward</Action></Selector></Sequence><Sequence><Condition>detect_object</Condition><Action>pick_up_object</Action><Action>map_area</Action><Action>move_to_position</Action><Action>drop_object</Action></Sequence></Selector></Sequence></BehaviorTree>###
3.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'detect_targets': 'Condition: Check for nearby targets. Returns True if targets are detected in the environment, False otherwise.', 'move_to_target': 'Action: Move towards the nearest target. Always returns True.', 'random_rotation': 'Action: Rotate randomly. Always returns True.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3.// USER COMMAND: generate behavior tree to 'collect all targets in the environment by moving to each target and then turning 180 degrees'Output only the XML behavior tree without extra text.
3.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>detect_targets</Condition> <Action>move_to_target</Action> <Action>task_completed</Action> </Sequence> <Sequence> <Action>random_rotation</Action> <Action>task_completed</Action> </Sequence> </Selector> </BehaviorTree>

###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'follow_path': 'Action: Follow a predetermined path. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'navigate through a maze and reach the end while avoiding obstacles, then change color to green and freeze movement.' Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>is_obstacle_detected</Condition> <Action>avoid_obstacle</Action> <Action>wander</Action> </Sequence> <Sequence> <Condition>is_target_reached</Condition> <Action>follow_path</Action> <Action>change_color_to_green</Action> <Action>agent_movement_freeze</Action> </Sequence> </Selector> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'communicate_with_other_robots': 'Action: Send and receive information to and from other robots. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'find the nearest robot, communicate and share locations, then move together towards a target and change color to green.' Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree> <Sequence> <Condition>is_target_detected</Condition> <Action>communicate_with_other_robots</Action> <Action>change_color_to_green</Action> <Action>agent_movement_freeze</Action> </Sequence> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'detect_possible_collisions': 'Condition: Check for potential collisions with other robots. Returns True if a potential collision is detected, False otherwise.', 'move_away_from_other_robots': 'Action: Move away from other robots to avoid potential collisions. Always returns True.', 'spin_around_central_point': 'Action: Rotate around the center point. Always returns True.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'avoid collisions with other robots while staying within a designated area, then change color to white and freeze movement.' Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree> <Sequence> <Condition>detect_possible_collisions</Condition> <Action>move_away_from_other_robots</Action> <Action>move_within_designated_area</Action> </Sequence> <Sequence> <Action>spin_around_central_point###
3.// INSTRUCTIONS: Use only the following behaviors {'scan_surroundings': 'Action: Continuously scan the surroundings for any changes or new information. Always returns True.', 'identify_target': 'Action: Identify a specific target within the environment. Returns True if the target is successfully identified, False otherwise.', 'move_to_target': 'Action: Move towards a designated target while avoiding obstacles. Returns True once the target is reached.', 'perform_task': 'Action: Perform a specific task designated by the user. Returns True once the task is completed.', 'detect_collaborator': 'Action: Continuously scan for the presence of a collaborating robot. Returns True if a collaborator is detected, False otherwise.', 'exchange_information': 'Action: Exchange information with the collaborating robot. Returns True once the information is successfully exchanged.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3.// USER COMMAND: Generate a behavior tree for a pair of collaborating robots to identify a target, exchange information, and perform a task.
3.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>is_collaborator_detected</Condition><Action>exchange_information</Action><Action>scan_surroundings</Action></Sequence><Action>perform_task</Action></Selector><Selector><Sequence><Condition>is_target_detected</Condition><Action>move_to_target</Action></Sequence><Sequence><Condition>is_obstacle_detected</Condition><Action>avoid_obstacle</Action></Sequence></Selector></Sequence></BehaviorTree>
###
4.// INSTRUCTIONS: Use only the following behaviors {'explore': 'Action: Continuously explore the environment while avoiding obstacles. Always returns True.', 'detect_food_source': 'Action: Continuously scan for a food source within the environment. Returns True if a food source is detected, False otherwise.', 'move_to_food_source': 'Action: Move towards the identified food source while avoiding obstacles. Returns True once the food source is reached.', 'collect_food': 'Action: Collect the food source once reached. Returns True once the food is collected.', 'return_to_nest': 'Action: Return to the designated nest area. Returns True once the nest is reached.', 'deposit_food': 'Action: Deposit the collected food into the nest area. Returns True once the food is deposited.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_food_deposited': 'Condition: Check if the food has been successfully deposited. Returns True if the food is deposited, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Generate a behavior tree for a swarm of robots to collect and deposit food sources while navigating obstacles and returning to a designated nest area.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_food_deposited</Condition><Selector><Sequence><Condition>is_obstacle_detected</Condition><Action>explore</Action></Sequence><Action>return_to_nest</Action></Selector></Sequence><Sequence><Condition>is_food_source_detected</Condition><Selector><Sequence><Condition>is_obstacle_detected</Condition><Action>avoid_obstacle</Action></Sequence><Action>move_to_food_source</Action></Selector></Sequence><Sequence><Condition>is_food_collected</Condition><Action>collect_food</Action></Sequence></Selector></BehaviorTree>
###
5.// INSTRUCTIONS: Use only the following behaviors {'detect_enemy': 'Action: Continuously scan for enemy presence within the environment. Returns True if an enemy is detected, False otherwise.', 'change_color_to_red': 'Action: Change the robot's color to red to indicate an enemy presence. Always returns True.', 'run_away': 'Action: Move away from enemy while avoiding obstacles. Returns True once the robot has escaped the enemy range.', 'attack_enemy': 'Action: Attack the enemy once within range. Returns True once the enemy has been defeated.', 'is_enemy_detected': 'Condition: Check for enemy presence nearby. Returns True if an enemy is detected, False otherwise.', 'is_in_safe_zone': 'Condition: Check if the robot is within the designated safe zone area. Returns True if in safe zone, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Generate a behavior tree for a swarm of robots to detect and attack enemies while staying within a designated safe zone.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_enemy_detected</Condition><Selector><Sequence><Condition>is_in_safe_zone</Condition><Action>attack_enemy</Action></Sequence><Action>change_color_to_red</Action></Selector></Sequence><Sequence><Condition>is_enemy_attacking</Condition><Action>run_away</Action></Sequence></Selector><Sequence><Condition>is_enemy_defeated</Condition><Action>wander</Action></Sequence></BehaviorTree>
###
6.// INSTRUCTIONS: Use only the following behaviors {'form_close_circle': 'Action: Form a close circle with other robots in the swarm. Always returns True.', 'detect_waste': 'Action: Continuously scan for waste within the environment. Returns True if waste is detected, False otherwise.', 'pick_up_waste': 'Action: Pick up the waste once detected. Returns True once the waste is picked up.', 'transport': 'Action: Transport the waste to a designated disposal area. Returns True once the waste is successfully disposed.', 'return_to_formation': 'Action: Return to the close circle formation. Always returns True.', 'is_waste_detected': 'Condition: Check for waste presence nearby. Returns True if waste is detected, False otherwise.', 'is_waste_disposed': 'Condition: Check if the waste has been successfully disposed. Returns True if the waste is disposed, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Generate a behavior tree for a swarm of robots to detect, pick up, transport, and dispose waste while maintaining a close circle formation.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_waste_disposed</Condition><Action>detect_waste</Action><Selector><Sequence><Condition>is_waste_detected</Condition><Action>pick_up_waste</Action></Sequence><Sequence><Condition>is_waste_picked_up</Condition><Action>transport</Action></Sequence></Selector></Sequence><Sequence><Condition>is_formation_broken</Condition><Action>reform_formation</Action></Sequence><Sequence><Condition>is_robot_lost</Condition><Action>return_to_formation</Action></Sequence></Selector><Sequence><Condition>is_robot_lost</Condition><Action>w        
###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)

4.// USER COMMAND: generate behavior tree to 'use avoidance behavior when approaching an obstacle.'Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree> <Sequence> <Condition>is_obstacle_detected</Condition> <Action>avoid_obstacle</Action> <Action>continue_movement_agent</Action> </Sequence> <Action>task_completed</Action> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)

5.// USER COMMAND: generate behavior tree to 'check for obstacles while moving towards the target.'Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree> <Sequence> <Condition>is_obstacle_detected</Condition> <Action>avoid_obstacle</Action> <Action>continue_movement_agent</Action> </Sequence> <Condition>is_target_detected</Condition> <Action>continue_movement_agent</Action> <Action>task_completed</Action> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)

6.// USER COMMAND: generate behavior tree to 'form a vertical line, then avoid obstacles while moving towards the target.'Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree> <Sequence> <Condition>is_line_formed</Condition> <Action>continue_movement_agent</Action> <Selector> <Sequence> <Condition>is_obstacle_detected</Condition> <Action>avoid_obstacle</Action> <Action>continue_movement_agent</Action> </Sequence> <Condition>is_target_detected</Condition> <Action>continue_movement_agent</Action> <Action>task_completed</Action> </Selector> </Sequence> <Action>form_line</Action> </BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle 
###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_stop': "Action: Stop agent's movement. Always returns True.", 'go_to_goal': 'Action: Move towards the designated goal. Returns True once goal is reached.', 'is_at_goal': 'Condition: Check if agent is at the designated goal. Returns True if at the goal, False otherwise.', 'is_goal_reached': 'Condition: Check if goal is within 10 units of distance. Returns True if goal is within reach, False otherwise.', 'task_completed': 'Action: Signal task completion by stopping movement. Always returns True.', 'turn_left': 'Action: Turn the agent 90 degrees to the left. Always returns True.', 'turn_right': 'Action: Turn the agent 90 degrees to the right. Always returns True.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Follow the path towards the goal while avoiding obstacles. If an obstacle is detected, turn 180 degrees and continue towards the goal.' Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>is_obstacle_detected</Condition> <Action>turn_left</Action> <Action>turn_left</Action> </Sequence> <Sequence> <Condition>is_at_goal</Condition> <Action>task_completed</Action> </Sequence> </Selector> <Action>go_to_goal</Action> </Sequence> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'change_color_to_blue': "Action: Change agent's color to blue. Always returns True.", 'change_color_to_red': "Action: Change agent's color to red. Always returns True.", 'follow_target': 'Action: Follow the designated target. Returns True once target is reached.', 'is_target_detected': 'Condition: Check if target is within 15 units. Returns True if target is within 15 units, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 5 units. Returns True if target is within reach, False otherwise.', 'is_target_lost': 'Condition: Check if target is lost. Returns True if target cannot be detected, False otherwise.', 'move_to_center': 'Action: Move towards the designated center. Returns True once center is reached.', 'is_at_center': 'Condition: Check if agent is at the designated center. Returns True if at the center, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Follow the moving target, but if the target is lost, move to the center and change color to blue.' Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_target_lost</Condition><Selector><Sequence><Condition>is_at_center</Condition><Action>change_color_to_blue</Action></Sequence><Action>move_to_center</Action></Selector></Sequence><Sequence><Condition>is_target_reached</Condition><Sequence><Condition>is_at_center</Condition><Action>change_color_to_red</Action></Sequence></Sequence></Selector><Sequence><Condition>is_target_detected</Condition><Action>follow_target</Action></Sequence></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'change_fuel_level': "Action: Change agent's fuel level. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'deposit_fuel': 'Action: Deposit a certain amount of fuel into the designated location. Returns True once fuel is deposited.', 'is_at_fuel_depot': 'Condition: Check if agent is at the designated fuel depot. Returns True if at the fuel depot, False otherwise.', 'is_fuel_depleted': 'Condition: Check if agent's fuel level is depleted. Returns True if fuel level is below a certain threshold, False otherwise.', 'is_fuel_needed': 'Condition: Check if agent's fuel level is below a certain threshold. Returns True if fuel level is low, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 20 units. Returns True if target is within reach, False otherwise.', 'move_to_target': 'Action: Move towards the designated target. Returns True once target is reached.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Deposit fuel into the designated location until fuel level is depleted, then move towards the target.' Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>is_fuel_depleted</Condition><Action>move_to_target</Action></Sequence><Action>deposit_fuel</Action></Selector><Sequence><Condition>is_target_reached</Condition><Selector><Sequence><Condition>is_at_fuel_depot</Condition><Action>change_fuel_level</Action></Sequence><Action>continue_movement_agent</Action></Selector></Sequence></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'follow_target': 'Action: Follow the designated target. Returns True once target is reached.', 'is_target_detected': 'Condition: Check if target is within 15 units. Returns True if target is within 15 units, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 5 units. Returns True if target is within reach, False otherwise.', 'move_to_center': 'Action: Move towards the designated center. Returns True once center is reached.', 'is_at_center': 'Condition: Check if agent is at the designated center. Returns True if at the center, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: generate behavior tree to 'Move towards the target, and if not detected, move to the center and change color to green.' Output only the XML behavior tree without extra text.
7.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_target_detected</Condition><Action>change_color_to_green</Action></Sequence><Selector><Sequence><Condition>is_at_center</Condition><Action>change_color_to_green</Action></Sequence><Action>move_to_center</Action></Selector></Selector><Condition>is_target_reached</Condition><Action>follow
###
3.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'change_color_to_blue': "Action: Change agent's color to blue. Always returns True.", 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_red': "Action: Change agent's color to red. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'follow_path': 'Action: Follow given path. Returns True when the path is successfully followed, False otherwise.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_agent_nearby': 'Condition: Check if any agents are nearby. Returns True if an agent is detected within 10 units, False otherwise.', 'is_curve_detected': 'Condition: Check if a curve is detected. Returns True if a curve is detected in the environment, False otherwise.', 'is_junction_detected': 'Condition: Check if a junction is detected. Returns True if a junction is detected in the environment, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_wall_detected': 'Condition: Check if a wall is detected in front. Returns True if a wall is detected within 5 units, False otherwise.', 'move_forward': 'Action: Move forward at a constant speed. Always returns True.', 'rotate_left': 'Action: Rotate left by 45 degrees. Always returns True.', 'rotate_right': 'Action: Rotate right by 45 degrees. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3.// USER COMMAND: generate behavior tree to 'Explore the environment and change colors to blue, green, or red when encountering a curve or junction respectively, then continue movement until an obstacle is detected and stop'. Output only the XML behavior tree without extra text.
3.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence><Condition>is_curve_detected</Condition> <Action>change_color_to_blue</Action> </Sequence> <Sequence><Condition>is_junction_detected</Condition> <Action>change_color_to_green</Action> </Sequence> <Sequence><Condition>is_obstacle_detected</Condition> <Action>agent_movement_freeze</Action> <Action>change_color_to_red</Action> </Sequence> <Action>wander</Action> </Selector> <Sequence> <Condition>is_wall_detected</Condition> <Action>rotate_left</Action> <Action>move_forward</Action> <Condition>follow_path</Condition> </Sequence> </Sequence> </BehaviorTree>

###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'change_color_to_black': "Action: Change agent's color to black. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'clear_path': 'Action: Clear any obstacles in the path. Returns True when the path is cleared, False otherwise.', 'follow_path': 'Action: Follow given path. Returns True when the path is successfully followed, False otherwise.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_path_blocked': 'Condition: Check if the path ahead is blocked. Returns True if there is an obstacle in the path, False otherwise.', 'is_target_detected': 'Condition: Check if target is within 10 units. Returns True if the target is within 10 units of distance, False otherwise.', 'move_forward': 'Action: Move forward at a constant speed. Always returns True.', 'rotate_left': 'Action: Rotate left by 90 degrees. Always returns True.', 'rotate_right': 'Action: Rotate right by 90 degrees. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Clear path and reach the target, changing colors to black and white alternatively while moving'. Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>is_path_blocked</Condition> <Action>agent_movement_freeze</Action> <Action>clear_path</Action> </Sequence> <Sequence> <Condition>is_target_detected</Condition> <Action>change_color_to_black</Action> <Action>follow_path</Action> </Sequence> </Selector> <Sequence> <Condition>is_agent_in_nest</Condition> <Action>change_color_to_white</Action> <Action>agent_movement_freeze</Action> </Sequence> <Action>wander</Action> </Sequence> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'change_color_to_blue': "Action: Change agent's color to blue. Always returns True.", 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_red': "Action: Change agent's color to red. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'circle_area': 'Action: Move in a circular path with a 10 unit radius. Always returns True.', 'is_agent_nearby': 'Condition: Check if any agents are nearby. Returns True if an agent is detected within 15 units, False otherwise.', 'is_dead_end_detected': 'Condition: Check if a dead end is detected. Returns True if a dead end is detected in the environment, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Explore the environment in a circular path, changing colors to green if encountering another agent and red if reaching a dead end, then stop once the target is detected'. Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>is_agent_nearby</Condition> <Action>change_color_to_green</Action> </Sequence> <Sequence> <Condition>is_dead_end_detected</Condition> <
###
3.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'attack_other_agent': 'Action: Attack another agent within 10 units. Returns True if successful, False otherwise.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_red': "Action: Change agent's color to red. Always returns True.", 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_enemy_detected': 'Condition: Check if an enemy agent is within 30 units. Returns True if enemy is detected, False otherwise.', 'is_health_low': 'Condition: Check if agent's health is below 50%. Returns True if health is low, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3.// USER COMMAND: generate behavior tree to 'Attack enemy agents within 30 units, change color to green, and return to nest when health is low.'Output only the XML behavior tree without extra text.
3.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>is_enemy_detected</Condition> <Action>change_color_to_green</Action> <Action>attack_other_agent</Action> </Sequence> <Sequence> <Condition>is_health_low</Condition> <Action>change_color_to_red</Action> <Action>agent_movement_freeze</Action> </Sequence> <Sequence> <Condition>is_agent_in_nest</Condition> <Action>change_color_to_green</Action> <Action>task_completed</Action> </Sequence> <Action>wander</Action> </Selector> </BehaviorTree>

###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'change_direction_to_clockwise': 'Action: Change agent's direction of movement to clockwise. Always returns True.', 'change_direction_to_counterclockwise': 'Action: Change agent's direction of movement to counterclockwise. Always returns True.', 'finish_circle': 'Action: Finish forming a complete circle with agents. Returns True when circle is complete, False otherwise.', 'is_agent_in_circle': 'Condition: Check if agent is within 5 units of distance to another agent. Returns True if in circle formation, False otherwise.', 'is_circle_formed': 'Condition: Check if a complete circle is formed. Returns True when circle is complete, False otherwise.', 'is_colliding': 'Condition: Check if agent is currently colliding with another agent. Returns True if collision occurs, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'move_forward': 'Action: Move forward in current direction. Always returns True.', 'move_backward': 'Action: Move backward in current direction. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Form a circle with at least 4 agents, move clockwise until collision, then move counterclockwise until circle is complete.'Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree> <Sequence> <Action>change_direction_to_clockwise</Action> <Action>move_forward</Action> <Condition>is_circle_formed</Condition> </Sequence> <Selector> <Sequence> <Condition>is_agent_in_circle</Condition> <Action>move_forward</Action> </Sequence> <Sequence> <Condition>is_colliding</Condition> <Action>agent_movement_freeze</Action> <Action>change_direction_to_counterclockwise</Action> </Sequence> </Selector> <Selector> <Sequence> <Condition>is_circle_formed</Condition> <Action>move_backward</Action> </Sequence> <Action>finish_circle</Action> </Selector> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_collision': 'Action: Avoid collisions with other agents. Always returns True.', 'change_color_to_blue': "Action: Change agent's color to blue. Always returns True.", 'change_color_to_red': "Action: Change agent's color to red. Always returns True.", 'follow_target': 'Action: Follow a target agent within 10 units. Returns True if successful, False otherwise.', 'is_agent_in_target_range': 'Condition: Check if another agent is within 10 units of distance. Returns True if target is in range, False otherwise.', 'is_at_target': 'Condition: Check if agent has reached target. Returns True when at target, False otherwise.', 'is_collision_detected': 'Condition: Check if agent is currently colliding with another agent. Returns True if collision occurs, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Avoid obstacles and collisions, follow agent with blue color, and change color to red when target is reached.'Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>is_obstacle_detected</Condition> <Action>avoid_collision</Action> </Sequence> <Sequence> <Condition>is_collision_detected</Condition> <Action>agent_movement_freeze</Action> <Action>avoid_collision</Action> </Sequence> </Selector> <Selector> <Sequence> <Condition>is_agent_in_target_range</Condition> <Action>follow_target</Action> </Sequence> <Sequence> <Condition>is_at_target</Condition> <Action>change_color_to_red</Action> <Action  
###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format for the following task: Assemble a formation by forming a line, then have the agents continue their movement in the formation until reaching the target location.
4.// USER COMMAND: generate behavior tree for assembling a formation and reaching the target location
4.// OUTPUT:
<BehaviorTree> <Sequence> <Action>form_line</Action> <Condition>is_line_formed</Condition> <Action>continue_movement_agent</Action> <Selector> <Sequence> <Condition>is_target_detected</Condition> <Action>continue_movement_agent</Action> </Sequence> <Action>wander</Action> </Selector> <Condition>is_target_reached</Condition> <Action>task_completed</Action> </Sequence> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_circle': 'Action: Form a circle with the other agents. Always returns True.', 'is_circle_formed': 'Condition: Check if a circle is formed. Returns True if a circle is formed with the other agents, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format for the following task: Form a circle while avoiding obstacles.
5.// USER COMMAND: generate behavior tree for forming circle and avoiding obstacles
5.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>is_obstacle_detected</Condition> <Action>avoid_obstacle</Action> </Sequence> <Action>wander</Action> </Selector> <Sequence> <Action>form_circle</Action> <Condition>is_circle_formed</Condition> </Sequence> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'flag_movement': 'Action: Move towards the flagged area. Always returns True.'}, to construct behavior tree in XML format for the following task: Move towards a target location while avoiding obstacles and staying within a designated area.
6.// USER COMMAND: generate behavior tree for moving towards target, avoiding obstacles, and staying within designated area
6.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>is_obstacle_detected</Condition> <Action>avoid_obstacle</Action> </Sequence> <Sequence> <Condition>is_agent_in_nest</Condition> <Action>flag_movement</Action> </Sequence> </Selector> <Selector> <Sequence> <Condition>is_target_detected</Condition> <Action>continue_movement_agent</Action> </Sequence> <Action>wander</Action> </Selector> </BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_square': 'Action: Form a square with the other agents. Always returns True.', 'is_square_formed': 'Condition: Check if a square is formed. Returns True if a square is formed with the other agents, False otherwise.', 'is_obstacle_detected': 'Condition: Check for 
###
3.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_blue': "Action: Change agent's color to blue. Always returns True.", 'change_color_to_red': "Action: Change agent's color to red. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'go_to_nest': 'Action: Move towards the nest. Always returns True.', 'has_item': 'Condition: Check if the agent has the item. Returns True if the agent is carrying an item, False otherwise.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_item_nearby': 'Condition: Check if an item is nearby. Returns True if an item is within 5 units of distance, False otherwise.', 'pick_up_item': 'Action: Pick up the nearest item. Always returns True.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wait': 'Action: Wait for 5 seconds before continuing. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3.// USER COMMAND: generate behavior tree to 'Pick up the nearest item and return it to the nest, change color to blue, and freeze movement.'Output only the XML behavior tree without extra text.
3.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>is_item_nearby</Condition> <Action>pick_up_item</Action> <Action>continue_movement_agent</Action> </Sequence> <Sequence> <Condition>has_item</Condition> <Action>go_to_nest</Action> <Action>change_color_to_blue</Action> <Action>wait</Action> </Sequence> <Sequence> <Condition>is_agent_in_nest</Condition> <Action>change_color_to_red</Action> <Action>agent_movement_freeze</Action> <Action>task_completed</Action> </Sequence> </Selector> </Sequence> </BehaviorTree>

###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'go_to_nest': 'Action: Move towards the nest. Always returns True.', 'is_light_detected': 'Condition: Check if light is detected. Returns True if light is detected, False otherwise.', 'is_nest_reached': 'Condition: Check if nest is within 10 units. Returns True if the nest is within 10 units of distance, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_source_detected': 'Condition: Check if source is within 20 units. Returns True if the source is within 20 units of distance, False otherwise.', 'return_to_source': 'Action: Return to the source. Always returns True.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wait': 'Action: Wait for 10 seconds before continuing. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Find the source and return to the nest, change color to green, and freeze movement.'Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>is_source_detected</Condition> <Action>return_to_source</Action> <Action>continue_movement_agent</Action> </Sequence> <Sequence> <Condition>is_path_clear</Condition> <Action>go_to_nest</Action> <Action>wait</Action> </Sequence> <Sequence> <Condition>is_nest_reached</Condition> <Action>change_color_to_green</Action> <Action>agent_movement_freeze</Action> <Action>task_completed</Action> </Sequence> </Selector> </Sequence> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'change_color_to_blue': "Action: Change agent's color to blue. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'go_to_target': 'Action: Move towards the target. Always returns True.', 'is_agent_in_field': 'Condition: Check if the agent is in the designated field. Returns True if the agent is in the field, False otherwise.', 'is_item_nearby': 'Condition: Check if an item is nearby. Returns True if an item is within 5 units of distance, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'pick_up_item': 'Action: Pick up the nearest item. Always returns True.', 'search_clues': 'Action: Move around to search for clues. Always returns True.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wait': 'Action: Wait for 5 seconds before continuing. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Pick up the nearest item and return to the designated field, change color to blue, and freeze movement.'Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>is_item_nearby</Condition> <Action>pick_up_item</Action> <Action>continue_movement_agent</Action> </Sequence> <Sequence> <Condition>is_obstacle_detected</Condition> <Action>search_clues</Action> <Action>wait</Action> </Sequence> <Sequence> <Condition>is_agent_in_field</Condition> <Action>go_to_target</Action> <Action>change_color_to_blue</Action> <Action>wait</Action> </Sequence> <Sequence> <Condition>is_target_reached</Condition> <Action>agent_movement_freeze</Action> <Action>task_completed</Action> </Sequence> </Selector> </Sequence> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement.
###
4.// INSTRUCTIONS: Use only the following behaviors {'avoid_collision': 'Action: Avoid collisions with other robots. Always returns True.', 'change_direction': 'Action: Change direction to a random angle. Always returns True.', 'fire_laser': 'Action: Fire a laser beam at the target. Returns True if the target was hit, False otherwise.', 'is_at_target': 'Condition: Check if the robot has reached the designated target location. Returns True if at the target, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles ahead. Returns True if an obstacle is detected, False otherwise.', 'is_target_hit': 'Condition: Check if the laser beam has hit the target. Returns True if the target was hit, False otherwise.', 'move_to_target': 'Action: Move towards the designated target location. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Patrol the area, firing lasers at any intruders that are detected but continuing on patrol regardless of hits until another robot reaches the target'. Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree><Sequence><Action>move_to_target</Action><Selector><Sequence><Condition>is_obstacle_detected</Condition><Action>avoid_collision</Action><Selector><Condition>is_target_hit</Condition><Action>change_direction</Action></Selector><Action>fire_laser</Action></Sequence><Selector><Condition>is_at_target</Condition><Action>move_to_target</Action></Selector></Selector></Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'change_direction': 'Action: Change direction to a random angle. Always returns True.', 'hunt_target': 'Action: Hunt and chase the designated target. Always returns True.', 'is_target_found': 'Condition: Check if the target has been located. Returns True if the target is found, False otherwise.', 'move_to_target': 'Action: Move towards the designated target location. Always returns True.', 'track_target': 'Action: Track the movement of the target. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Hunt down and chase the escaped target, tracking its movements and adapting hunting strategy accordingly until the target is captured'. Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Action>hunt_target</Action><Sequence><Action>track_target</Action><Action>change_direction</Action></Sequence><Selector><Condition>is_target_found</Condition><Action>move_to_target</Action></Selector></Sequence><Selector><Condition>is_target_found</Condition><Action>move_to_target</Action></Selector></Selector></Sequence></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'build_bridge': 'Action: Collaborate with other robots to build a bridge over a gap. Returns True once the bridge is complete.', 'cross_bridge': 'Action: Cross the bridge once it is built. Returns True when the robot has successfully crossed.', 'drop_resource': 'Action: Drop the resource being carried. Always returns True.', 'fetch_resource': 'Action: Fetch the resource from a designated location. Returns True once the resource is obtained.', 'is_at_resource_location': 'Condition: Check if the robot has reached the designated location to fetch the resource. Returns True if at the location, False otherwise.', 'is_bridge_built': 'Condition: Check if the bridge has been built by the collaboration of robots. Returns True if the bridge is completed, False otherwise.', 'is_resource_carried': 'Condition: Check if the resource is currently being carried. Returns True if the resource is being carried, False otherwise.', 'is_resource_reached': 'Condition: Check if the robot has reached the designated location to drop the resource. Returns True if at the location, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Collaborate with other robots to build a bridge and cross it to reach the designated location, while also obtaining and transporting a resource along the way'. Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree><Sequence><Action>avoid_obstacle</Action><Selector><Sequence><Condition>is_bridge_built</Condition><Action>cross_bridge</Action><Selector><Condition>is_resource_carried</Condition><Action>drop_resource</Action></Selector></Sequence><Selector><Condition>is_at_resource_location</Condition><Action>fetch_resource</Action></Selector></Selector></Sequence></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'search_for_resource': 'Action: Work together with other robots to search for the designated resource. Returns True once the resource is found.', 'is_resource_found': 'Condition: Check if the designated resource has been located. Returns True if the resource is found, False otherwise.', 'move_to_resource': 'Action: Move towards the designated resource location. Always returns True.', 'pick_up_resource': 'Action: Pick up the resource. Returns True once the resource is obtained.', 'return_to_nest': 'Action: Return to the nest while carrying the resource. Returns True once the robot has reached the nest.', 'is_nest_reached': 'Condition: Check if the robot has reached the nest. Returns True if at the nest, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: generate behavior tree to 'Search for and obtain the designated resource together with other robots, then return to the nest while avoiding obstacles'. Output only the XML behavior tree without extra text.
7.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_resource_found</Condition><Action>move_to_resource</Action><Action>pick_up_resource</Action></Sequence><Sequence><Condition>is_nest_reached</Condition><Action>return_to_nest</Action></Sequence><Selector><Condition>is_resource_found</Condition><Action>search_for_resource</Action></Selector><Action>avoid_obstacle</Action></Selector></BehaviorTree>
###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'follow_target': "Action: Follow and maintain a certain distance from the target. Always returns True.", 'face_target': "Action: Turn towards the target. Always returns True.", 'wait': "Action: Stand still for a set amount of time. Always returns True.", 'adjust_speed': "Action: Adjust the robot's speed based on its proximity to obstacles. Always returns True."}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Follow and maintain a safe distance from the target, while adjusting speed based on obstacle proximity.' Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree> <Sequence> <Action>face_target</Action> <Sequence> <Condition>is_target_detected</Condition> <Action>follow_target</Action> </Sequence> <Sequence> <Condition>is_obstacle_detected</Condition> <Action>adjust_speed</Action> <Action>wait</Action> </Sequence> </Sequence> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'navigate_path': "Action: Follow a predetermined path using GPS coordinates. Always returns True.", 'check_battery_level': "Condition: Check the robot's current battery level. Returns True if the battery level is above 20%, False if it is below 20%.", 'recharge': 'Action: Return to the nest and recharge the robot. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Navigate to specific GPS coordinates, but return to nest to recharge if battery is low.' Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>check_battery_level</Condition> <Action>navigate_path</Action> </Sequence> <Action>recharge</Action> </Selector> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'detect_group_size': "Action: Count the number of robots in the swarm. Always returns True.", 'circle_up': "Action: Move in a circular motion, maintaining a fixed distance from other robots in the swarm. Always returns True.", 'form_grid': "Action: Form a grid pattern with other robots in the swarm. Always returns True."}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with 
###
3.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'form_square': 'Action: Form a square shape with 4 agents. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_square_formed': 'Condition: Check if a square shape is formed with 4 agents. Returns True if the square is formed, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3.// USER COMMAND: generate behavior tree to 'Form a square shape with 4 robots, then move towards target and avoid obstacles.'Output only the XML behavior tree without extra text.
3.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>is_square_formed</Condition> <Action>change_color_to_green</Action> <Action>continue_movement_agent</Action> </Sequence> <Action>form_square</Action> </Selector> <Sequence> <Condition>is_obstacle_detected</Condition> <Action>avoid_obstacle</Action> <Action>wander</Action> </Sequence> <Sequence> <Condition>is_target_detected</Condition> <Action>change_color_to_white</Action> <Action>continue_movement_agent</Action> </Sequence> </BehaviorTree>

###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'follow_pattern': 'Action: Follow a predefined pattern of movements. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_pattern_followed': 'Condition: Check if the predefined pattern is followed. Returns True when the pattern is completed, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Follow a predefined pattern, then change color to green when target is detected, and finally return to the nest and freeze movement.'Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence><Condition>is_pattern_followed</Condition> <Action>change_color_to_green</Action> <Action>task_completed</Action> </Sequence> <Action>follow_pattern</Action> <Sequence><Condition>is_agent_in_nest</Condition> <Action>change_color_to_white</Action> <Action>agent_movement_freeze</Action> </Sequence> </Selector> </Sequence> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_red': "Action: Change agent's color to red. Always returns True.", 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_blue': "Action: Change agent's color to blue. Always returns True.", 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Move towards target and avoid obstacles, while changing color to red or green if target is red or green respectively.'Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>is_obstacle_detected</Condition> <Action>avoid_obstacle</Action> <Action>wander</Action> </Sequence> <Sequence> <Condition>is_target_detected</Condition> <Selector> <Sequence> <Condition>is_target_red</Condition> <Action>change_color_to_red</Action> <Action>continue_movement_agent</Action> </Sequence> <Sequence> <Condition>is_target_green</Condition> <Action>change_color_to_green</Action> <Action>continue_movement_agent</Action> </ 
###
4.// INSTRUCTIONS: Use only the following behaviors {'check_battery_level': 'Action: Check the current battery level and store the value. Always returns True.', 'move_to_charging_station': 'Action: Move to the nearest charging station location. Always returns True.', 'recharge_battery': 'Action: Recharge the battery to 100%. Always returns True.', 'is_charging': 'Condition: Check if the robot is currently charging. Returns True if the robot is charging, False otherwise.', 'is_charging_station_found': 'Condition: Check if a charging station has been located. Returns True if a charging station is found, False otherwise.', 'is_battery_low': 'Condition: Check if the battery level is below 20%. Returns True if the battery level is below 20%, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'recharge battery to 100% and move to the charging station'
4.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>is_battery_low</Condition> <Action>recharge_battery</Action> </Sequence> <Sequence> <Condition>is_charging_station_found</Condition> <Action>move_to_charging_station</Action> </Sequence> </Selector> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'move_forward': 'Action: Move one step forward. Always returns True.', 'turn_left': 'Action: Turn the robot left by 90 degrees. Always returns True.', 'turn_right': 'Action: Turn the robot right by 90 degrees. Always returns True.', 'pick_up_object': 'Action: Pick up the designated object in front of the robot. Always returns True.', 'place_object': 'Action: Place the held object on a specified location. Always returns True.', 'detect_obstacle': 'Condition: Check if an obstacle is present in front of the robot. Returns True if an obstacle is detected, False otherwise.', 'detect_object': 'Condition: Check if a designated object is present in front of the robot. Returns True if the object is detected, False otherwise.', 'is_carried_object': 'Condition: Check if the robot is currently holding an object. Returns True if an object is being carried, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'pick up the red ball, turn left, and place it at the designated location'
5.// OUTPUT:
<BehaviorTree> <Sequence> <Condition>detect_object</Condition> <Action>pick_up_object</Action> </Sequence> <Sequence> <Action>turn_left</Action> <Action>place_object</Action> </Sequence> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'detect_color': 'Condition: Check the color of the object in front of the robot. Returns True if the object is blue, False otherwise.', 'detect_obstacle': 'Condition: Check if an obstacle is present in front of the robot. Returns True if an obstacle is detected, False otherwise.', 'detect_object': 'Condition: Check if a designated object is present in front of the robot. Returns True if the object is detected, False otherwise.', 'detect_gesture': "Condition: Check for specific hand gestures. Returns True if the specified gesture is detected, False otherwise.", 'move_forward': 'Action: Move one step forward. Always returns True.', 'move_backward': 'Action: Move one step backward. Always returns True.', 'rotate_left': 'Action: Rotate the robot to the left by 90 degrees. Always returns True.', 'rotate_right': 'Action: Rotate the robot to the right by 90 degrees. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'move forward, rotate left, and detect if the object in front is blue'
6.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Action>move_forward</Action> <Sequence> <Condition>detect_color</Condition> <Action>rotate_left</Action> </Sequence> </Selector> </BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'move_forward': 'Action: Move one step forward. Always returns True.', 'move_backward': 'Action: Move one step backward. Always returns True.', 'move_randomly': 'Action: Move randomly within the environment. Always returns True.', 'is_formation_broken': 'Condition: Check if the formation has become misaligned or broken. Returns True if the formation is broken, False otherwise.', 'is_obstacle_nearby': 'Condition: Check if there is an obstacle present within a 10 unit radius around the robot. Returns True if an obstacle is detected, False otherwise.', 'is_target_reached': 'Condition: Check if the target location has been reached. Returns True if the target has been reached, False otherwise.', 'play_sound': 'Action: Make a sound to attract attention or signal completion of a task. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: generate behavior tree to 'move to target location, avoid obstacles, and play sound upon arrival'
7.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>is_target_reached</Condition> <Action>play_sound</Action> </Sequence> <Sequence> <Condition>is_obstacle_nearby</Condition> <Action>move_randomly</Action> </Sequence> <Sequence> <Condition>is_formation_broken</Condition> <Action>move_forward</Action> </Sequence> </Selector> </BehaviorTree> 
###
4.// INSTRUCTIONS: Use only the following behaviors {'detect_cluster': 'Condition: Check if a cluster of objects is detected in the environment. Returns True if a cluster is detected, False otherwise.', 'analyze_cluster': 'Action: Analyze the detected cluster to determine the number of objects and their color distribution. Always returns True.', 'collect_object': 'Action: Collect an object from the cluster for analysis and transport. Always returns True.', 'deposit_object': 'Action: Deposit the collected object at the designated location. Always returns True.', 'random_movement': 'Action: Move randomly within the environment. Always returns True.', 'sort_objects': 'Action: Sort the collected objects into groups based on their color distribution. Always returns True.', 'is_object_collected': 'Condition: Check if an object has been collected from the cluster. Returns True if an object has been collected, False otherwise.', 'is_at_designated_location': 'Condition: Check if the robot has reached the designated location for depositing objects. Returns True if at the designated location, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Create a behavior tree for a swarm of robots to autonomously collect and sort a cluster of objects, analyzing their color distribution and depositing them at the designated location.
4.// OUTPUT:
<BehaviorTree><Sequence><Condition>detect_cluster</Condition><Action>analyze_cluster</Action></Sequence><Sequence><Condition>is_object_collected</Condition><Sequence><Condition>is_at_designated_location</Condition><Action>deposit_object</Action></Sequence></Sequence><Selector><Sequence><Condition>is_object_collected</Condition><Action>sort_objects</Action></Sequence><Sequence><Condition>is_object_detected</Condition><Action>collect_object</Action></Sequence></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'detect_target': 'Condition: Check if the target object is detected within the environment. Returns True if the target is detected, False otherwise.', 'track_target': 'Action: Navigate towards and track the movement of the target object. Always returns True.', 'lift_object': 'Action: Lift and grab onto the target object. Always returns True.', 'release_object': 'Action: Release and put down the target object at the designated location. Always returns True.', 'avoid_obstacle': 'Action: Avoid detected obstacles while tracking the target object. Always returns True.', 'charge': 'Action: Increase speed and charge towards the target object. Always returns True.', 'is_object_lifted': 'Condition: Check if the target object is currently being lifted and carried. Returns True if the object is being carried, False otherwise.', 'is_at_designated_location': 'Condition: Check if the robot has reached the designated location for releasing the target object. Returns True if at the designated location, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Generate a behavior tree for a swarm of robots to track and capture a moving target object, avoiding obstacles and releasing it at the designated location.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>detect_target</Condition><Action>track_target</Action></Sequence><Sequence><Condition>is_object_detected</Condition><Selector><Sequence><Condition>is_obstacle_detected</Condition><Action>avoid_obstacle</Action></Sequence><Selector><Sequence><Condition>is_at_designated_location</Condition><Action>release_object</Action></Sequence><Action>charge</Action></Selector></Sequence></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'detect_object': 'Condition: Check if an object is detected in the environment. Returns True if an object is detected, False otherwise.', 'inspect_object': 'Action: Inspect and analyze the detected object for information. Always returns True.', 'move_towards_object': 'Action: Move towards the object to get within inspecting distance. Always returns True.', 'lift_object': 'Action: Lift and grab onto the object for further analysis. Always returns True.', 'release_object': 'Action: Release and put down the object at the designated location. Always returns True.', 'rotate_camera': 'Action: Rotate the camera for a different view of the object. Always returns True.', 'is_object_inspected': 'Condition: Check if the object has been inspected. Returns True if the object has been inspected, False otherwise.', 'is_object_lifted': 'Condition: Check if the object is currently being lifted and analyzed. Returns True if the object is being analyzed, False otherwise.', 'is_at_designated_location': 'Condition: Check if the robot has reached the designated location for releasing the object. Returns True if at the designated location, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Construct a behavior tree for a swarm of robots to inspect and analyze a detected object, utilizing various methods for information gathering and analysis before putting it down at the designated location.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>detect_object</Condition><Selector><Sequence><Condition>is_object_inspected</Condition><Sequence><Condition>is_at_designated_location</Condition><Action>release_object</Action></Sequence></Sequence><Sequence><Condition>is_object_inspected</Condition><Action>rotate_camera</Action></Sequence><Sequence><Condition>is_object_inspected</Condition><Selector><Sequence><Condition>is_object_lifted</Condition><Sequence><Condition>is_at_designated_location</Condition><Action>release_object</Action></Sequence></Sequence><Sequence><Condition>is_object_lifted</Condition><Action>inspect_object</Action></Sequence></Selector></Sequence></Selector></Sequence><Sequence><Condition>is_object_detected</Condition><Action>move_towards_object</Action></Sequence><Sequence><Condition>is_object_detected</Condition><Action>lift_object</Action></Sequence></Selector></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'detect_object': 'Condition: Check if an object is detected in the environment. Returns True if an object is detected, False otherwise.', 'identify_color': 'Action: Identify the color of the detected object. Always returns True.', 'identify_shape': 'Action: Identify the shape of the detected object. Always returns True.', 'observe_surroundings': 'Action: Utilize camera and sensors to observe the surrounding environment. Always returns True.', 'navigate_to_object': 'Action: Navigate towards the detected object. Always returns True.', 'grab_object': 'Action: Grab and lift the object if it is within reach. Always returns True.', 'drop_object': 'Action: Drop the object at the designated location. Always returns True.', 'is_object_color_identified': 'Condition: Check if the color of the object has been identified. Returns True if the color is identified, False otherwise.', 'is_object_shape_identified': 
###
3.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'form_square': 'Action: Form a square with other agents. Returns True if all agents form a square, False otherwise.', 'is_square_formed': 'Condition: Check if a square is formed by agents. Returns True if agents form a square, False otherwise.', 'move_towards_target': 'Action: Move towards a target point. Always returns True.', 'perform_taskA': 'Action: Perform task A. Always returns True.', 'perform_taskB': 'Action: Perform task B. Always returns True.', 'is_taskA_completed': 'Condition: Check if task A is completed. Returns True if task A is completed, False otherwise.', 'is_taskB_completed': 'Condition: Check if task B is completed. Returns True if task B is completed, False otherwise.'} to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3.// USER COMMAND: generate behavior tree to 'Move towards target, perform task A, form a square with other agents, and perform task B.'Output only the XML behavior tree without extra text.
3.// OUTPUT:
<BehaviorTree> <Sequence> <Action>move_towards_target</Action> <Selector> <Sequence> <Action>perform_taskA</Action> </Sequence> <Sequence> <Action>form_square</Action> <Condition>is_square_formed</Condition> <Action>perform_taskB</Action> </Sequence> </Selector> </Sequence> </BehaviorTree>
 
###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'collect_item': 'Action: Collect the closest item within range and return to the nest. Returns True if an item is collected, False otherwise.', 'deposit_item': 'Action: Return to the nest and deposit the collected item. Returns True if item is deposited, False otherwise.', 'is_item_in_range': 'Condition: Check if an item is within range to be collected. Returns True if an item is within range, False otherwise.', 'is_nest_reached': 'Condition: Check if the robot has reached the nest. Returns True if the robot has reached the nest, False otherwise.', 'is_item_collected': 'Condition: Check if an item is collected. Returns True if an item is collected, False otherwise.', 'no_items_left': 'Condition: Check if there are any items left in the environment. Returns True if there are no more items, False otherwise.'} to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Collect all items within range, deposit them in the nest, and return to the starting point.'Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>is_item_in_range</Condition> <Action>collect_item</Action> <Sequence> <Condition>is_nest_reached</Condition> <Action>deposit_item</Action> <Sequence> <Condition>is_item_collected</Condition> </Sequence> <Action>agent_movement_freeze</Action> </Sequence> </Sequence> <Sequence> <Condition>no_items_left</Condition> <Action>agent_movement_freeze</Action> </Sequence> </Selector> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'detect_invalid_target': 'Condition: Check if the target location is invalid. Returns True if the target location is invalid, False otherwise.', 'move_to_valid_location': 'Action: Move to a valid location. Returns True if the agent reaches a valid location, False otherwise.', 'is_valid_location': 'Condition: Check if the current location is valid. Returns True if the current location is valid, False otherwise.', 'perform_actionA': 'Action: Perform action A. Returns True if action A is performed, False otherwise.', 'perform_actionB': 'Action: Perform action B. Returns True if action B is performed, False otherwise.', 'is_actionA_done': 'Condition: Check if action A is completed. Returns True if action A is completed, False otherwise.', 'is_actionB_done': 'Condition: Check if action B is completed. Returns True if action B is completed, False otherwise.'} to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Perform action A, check for invalid target, move to a valid location, perform action B, and check for valid location.'Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Action>perform_actionA</Action> <Sequence> <Condition>detect_invalid_target</Condition> <Action>move_to_valid_location</Action> <Sequence> <Condition>is_valid_location</Condition> <Action>perform_actionB</Action> </Sequence> </Sequence> </Sequence> </Selector> </BehaviorTree>
 
###
6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'fire_distance_measurement': 'Action: Fire a distance measurement beam. Returns True if the beam is fired, False otherwise.', 'measure_distance': 'Action: Measure the distance of an object using a sensor. Returns distance value if object is within range, None otherwise.', 'compare_distance_to_threshold': 'Condition: Check if the measured distance is within a specified threshold. Returns True if distance is within threshold, False otherwise.', 'is_target_detected': 'Condition: Check if the target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'move_towards_target': 'Action: Move towards a target point. Always returns True.', 'is_target_reached': 'Condition: Check if target is within 10 units. Returns True if the target is within 10 units of distance, False otherwise.'} to construct behavior tree
// Explanation: This behavior tree will first check for any intruders and grab the target if there is one. It will then proceed to check if it's at the designated drop-off location and drop the target object. If there are no intruders, it will continue to check if the target object is grabbed and drop it off if so. If there are obstacles detected, the robot will avoid them. Otherwise, it will wander around until a target is detected. This behavior tree reflects the importance of coordination and communication in swarm robotics, as the robot is prioritizing alerting other robots of an intruder's presence.  
###
3.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'gather_resources': 'Action: Gather resources from the environment. Always returns True.', 'is_resource_available': 'Condition: Check if resources are available nearby. Returns True if resources are within range, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3.// USER COMMAND: generate behavior tree to 'Gather resources from the environment, form a vertical line, and then change color to white.' Output only the XML behavior tree without extra text.
3.// OUTPUT:
<BehaviorTree> <Sequence> <Sequence> <Condition>is_resource_available</Condition> <Action>gather_resources</Action> </Sequence> <Selector> <Sequence> <Condition>is_line_formed</Condition> <Action>change_color_to_white</Action> <Action>agent_movement_freeze</Action> <Action>task_completed</Action> </Sequence> <Action>form_line</Action> </Selector> </Sequence> </BehaviorTree>

###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'scan_environment': 'Action: Scan the environment for any changes or updates before proceeding. Always returns True.', 'is_update_needed': 'Condition: Check if any updates or changes are needed based on the environment scan. Returns True if updates are needed, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Scan the environment for changes, form a vertical line, and then continue movement.' Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree> <Sequence> <Sequence> <Action>scan_environment</Action> <Condition>is_update_needed</Condition> </Sequence> <Action>form_line</Action> <Sequence> <Condition>is_line_formed</Condition> <Action>continue_movement_agent</Action> </Sequence> </Sequence> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'calibrate_sensors': 'Action: Calibrate sensors for accurate readings. Always returns True.', 'check_sensor_accuracy': 'Condition: Check if sensor readings are accurate. Returns True if sensors are accurate, False if adjustments are needed.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Calibrate sensors, scan the environment, and then continue 
###
3.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'count_direction_changes': 'Action: Count direction changes. Returns True if the direction changes at any point, False otherwise.', 'detect_environment_changes': 'Condition: Check for changes in environment. Returns True if any changes are detected, False if no changes are detected.', 'detect_object': 'Condition: Check for a specific object. Returns True if the specific object is detected, False otherwise.', 'detect_sound': 'Condition: Check for sound. Returns True if sound is detected, False otherwise.', 'find_object': 'Action: Find and approach the specified object. Returns True if the object is found and approached, False otherwise.', 'is_agent_idle': 'Condition: Check if the agent is idle. Returns True if no movements are detected for 3 consecutive seconds, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format for the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3.// USER COMMAND: generate behavior tree to 'Search for an object, approach it and change color to green, then wander until sound is detected and change color to white when idle'
3.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>detect_object</Condition><Action>find_object</Action><Action>change_color_to_green</Action></Sequence><Selector><Condition>detect_sound</Condition><Action>change_color_to_white</Action></Selector></Selector><Selector><Condition>detect_environment_changes</Condition><Action>wander</Action></Selector><Sequence><Condition>is_agent_idle</Condition><Action>change_color_to_white</Action></Sequence></BehaviorTree>

###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Returns True if no obstacles are detected, False if an obstacle is detected.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_red': "Action: Change agent's color to red. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'move_forward': 'Action: Move forward one step. Returns True if the agent successfully moved forward, False otherwise.', 'move_backward': 'Action: Move backward one step. Returns True if the agent successfully moved backward, False otherwise.', 'turn_left': 'Action: Turn left 90 degrees. Returns True if the agent successfully turned left, False otherwise.', 'turn_right': 'Action: Turn right 90 degrees. Returns True if the agent successfully turned right, False otherwise.', 'have_enough_energy': 'Condition: Check if agent has enough energy. Returns True if the agent has more than 10% energy, False otherwise.', 'is_agent_at_target': 'Condition: Check if agent is at the specified target. Returns True if the agent has reached the target, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'return_home': 'Action: Return to the starting point. Always returns True.'}, to construct behavior tree in XML format for the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Scout the environment by moving forward, avoiding obstacles, and return home when energy level is low'
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>have_enough_energy</Condition><Action>move_forward</Action></Sequence><Action>wander</Action></Selector><Sequence><Condition>have_enough_energy</Condition><Sequence><Action>avoid_obstacle</Action><Condition>have_enough_energy</Condition><Sequence><Action>move_backward</Action><Condition>have_enough_energy</Condition><Action>turn_left</Action></Sequence><Sequence><Action>move_backward</Action><Condition>have_enough_energy</Condition><Action>turn_right</Action></Sequence></Sequence></Sequence><Action>return_home</Action></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Returns True if no obstacles are detected, False if an obstacle is detected.', 'change_color_to_blue': "Action: Change agent's color to blue. Always returns True.", 'change_color_to_red': "Action: Change agent's color to red. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'detect_intruder': 'Condition: Check for intruders in the monitored area. Returns True if any intruders are detected, False otherwise.', 'detect_sound': 'Condition: Check for sound. Returns True if sound is detected, False otherwise.', 'follow_sound': 'Action: Move towards the source of the sound until within 10 units. Returns True if the agent successfully moves towards the source, False otherwise.', 'is_agent_at_target': 'Condition: Check if agent is at the specified target. Returns True if the agent has reached the target, False otherwise.', 'return_home': 'Action: Return to the starting point. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format for the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'If an intruder is detected, follow the sound and change color to red when at the source, then return home and change color to blue'
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>detect_intruder</Condition><Selector><Sequence><Condition>detect_sound</Condition><Action>follow_sound</Action><Action>change_color_to_red</Action></Sequence><Action>wander</Action></Selector></Sequence><Sequence><Condition>detect_intruder</Condition><Action>return_home</Action><Action>change_color_to_blue</Action></Sequence></Selector><Sequence><Condition>is_agent_at_target</Condition><Action>return_home</Action></Sequence></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze3. // INSTRUCTIONS: Use only the following behaviors {'move_up': "Action: Move one step forward. Always returns True.", 'move_down': 'Action: Move one step backward. Always returns True.', 'move_left': 'Action: Move one step to the left. Always returns True.', 'move_right': 'Action: Move one step to the right. Always returns True.', 'pick_up_item': 'Action: Pick up item at current location. Returns True if item is successfully picked up, False otherwise.', 'drop_item': 'Action: Drop the current item being carried at current location. Returns True if item is successfully dropped, False otherwise.', 'is_item_picked_up': 'Condition: Check if the agent is currently holding an item. Returns True if an item is being held, False otherwise.', 'is_item_dropped': 'Condition: Check if the agent has successfully dropped an item. Returns True if an item has been dropped, False otherwise.', 'is_item_present': 'Condition: Check if there is an item at the agent's current location. Returns True if an item is present, False otherwise.', 'is_target_reached': 'Condition: Check if the agent has reached the designated target location. Returns True if the target is reached, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3. // USER COMMAND: generate behavior tree for an agent to follow a set of instructions and complete a delivery task.
3. // OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_target_reached</Condition><Action>drop_item</Action><Action>wander</Action></Sequence><Sequence><Condition>is_item_dropped</Condition><Action>move_right</Action></Sequence><Sequence><Condition>is_item_present</Condition><Action>pick_up_item</Action></Sequence></Selector></BehaviorTree>  
###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.',}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Move forward until a target is detected, then stop the agent's movement and change color to green.'
4.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Action>continue_movement_agent</Action><Condition>is_target_detected</Condition><Action>change_color_to_green</Action></Sequence><Action>agent_movement_freeze</Action></Selector></Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.',}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Move in a zigzag pattern until an obstacle is detected, then avoid the obstacle.'
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>continue_movement_agent</Action><Condition>is_obstacle_detected</Condition><Action>avoid_obstacle</Action></Sequence><Selector><Action>continue_movement_agent</Action><Action>wander</Action></Selector></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.',}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Move to the nearest unexplored area, form a line, and change color to white.'
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>continue_movement_agent</Action><Action>is_agent_in_nest</Action><Action>task_completed</Action></Sequence><Selector><Action>form_line</Action><Condition>is_line_formed</Condition><Action>change_color_to_white</Action></Selector></Selector></BehaviorTree>
 
###
7.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always 
4.// INSTRUCTIONS: Use only the following behaviors {'move_forward': 'Action: Move one step forward. Always returns True.', 'turn_left': 'Action: Turn left 90 degrees. Always returns True.', 'turn_right': 'Action: Turn right 90 degrees. Always returns True.', 'is_obstacle_ahead': 'Condition: Check if there is an obstacle directly ahead. Returns True if an obstacle is detected, False otherwise.', 'is_target_reached': 'Condition: Check if the target has been reached. Returns True if the target is within 1 unit of distance, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Generate a behavior tree for a robot to navigate a maze and reach the target at the end.
4.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>is_target_reached</Condition> <Action>task_completed</Action> </Sequence> <Selector> <Sequence> <Condition>is_obstacle_ahead</Condition> <Action>turn_left</Action> </Sequence> <Sequence> <Condition>is_obstacle_ahead</Condition> <Action>turn_right</Action> </Sequence> <Action>move_forward</Action> </Selector> </BehaviorTree>

5.// INSTRUCTIONS: Use only the following behaviors {'move_forward_individual': 'Action: Move one step forward. Always returns True.', 'form_circle': 'Action: Form a circular shape with surrounding robots. Always returns True.', 'avoid_collision': 'Action: Adjust movement to avoid colliding with other robots. Always returns True.', 'is_nearby_robot_detected': 'Condition: Check if a nearby robot is detected. Returns True if a robot is within 10 units of distance, False otherwise.', 'is_circle_formed': 'Condition: Check if a circular shape is formed. Returns True if a circle is formed, False otherwise.', 'is_collision_imminent': 'Condition: Check if a collision with another robot is imminent. Returns True if a collision is likely, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Generate a behavior tree for a swarm of robots to form a circular shape while avoiding collisions with each other.
5.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>is_circle_formed</Condition> <Action>task_completed</Action> </Sequence> <Sequence> <Condition>is_nearby_robot_detected</Condition> <Selector> <Sequence> <Condition>is_collision_imminent</Condition> <Action>avoid_collision</Action> </Sequence> <Action>move_forward_individual</Action> </Selector> </Sequence> <Action>form_circle</Action> </Selector> </BehaviorTree>

6.// INSTRUCTIONS: Use only the following behaviors {'move_randomly': 'Action: Move randomly within the environment. Always returns True.', 'move_towards_light': 'Action: Move towards the nearest source of light. Always returns True.', 'collect_light': 'Action: Collect light particles from the environment. Always returns True.', 'transfer_light': 'Action: Transfer light particles to nearby robots. Always returns True.', 'is_at_source': 'Condition: Check if the current location is a source of light. Returns True if at a light source, False otherwise.', 'is_light_available': 'Condition: Check if there is available light in the environment. Returns True if light is present, False if no light is found.', 'is_light_transferred': 'Condition: Check if light has been successfully transferred to another robot. Returns True if transfer is successful, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Generate a behavior tree for a swarm of robots to collect and transfer light particles from the environment.
6.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>is_light_transferred</Condition> <Action>task_completed</Action> </Sequence> <Selector> <Sequence> <Condition>is_at_source</Condition> <Action>collect_light</Action> </Sequence> <Sequence> <Condition>is_light_available</Condition> <Action>transfer_light</Action> </Sequence> <Action>move_randomly</Action> </Selector> <Action>move_towards_light</Action> </Selector> </BehaviorTree>

7.// INSTRUCTIONS: Use only the following behaviors {'move_forward_individual': 'Action: Move one step forward. Always returns True.', 'form_triangle': 'Action: Form a triangular shape with surrounding robots. Always returns True.', 'align_orientations': 'Action: Align orientations with surrounding robots. Always returns True.', 'is_nearby_robot_detected': 'Condition: Check if a nearby robot is detected. Returns True if a robot is within 10 units of distance, False otherwise.', 'is_triangle_formed': 'Condition: Check if a triangular shape is formed. Returns True if a triangle is formed, False otherwise.', 'is_orientation_aligned': 'Condition: Check if orientations are aligned with surrounding robots. Returns True if orientations are aligned, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: Generate a behavior tree for a swarm of robots to form a triangular shape while aligning their orientations with each other.
7.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>is_triangle_formed</Condition> <Action>task_completed</Action> </Sequence> <Sequence> <Condition>is_orientation_aligned</Condition> <Action>move_forward_individual</Action> </Sequence> <Selector> <Sequence> <Condition>is_nearby_robot_detected</Condition> <Action>align_orientations</Action> </Sequence> <Action>move_forward_individual</Action> </Selector> <Action>form_triangle</Action> </Selector> </BehaviorTree> 
###
4.// INSTRUCTIONS: Use only the following behaviors {'move_randomly': 'Action: Move randomly within the environment. Always returns True.', 'move_in_direction': 'Action: Move in a specific direction. Always returns True.', 'detect_food': 'Condition: Check for the presence of food nearby. Returns True if food is detected, False otherwise.', 'is_nest_nearby': 'Condition: Check for the presence of the nest nearby. Returns True if the nest is in close proximity, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Generate a behavior tree for a swarm of robots to forage for food while avoiding obstacles and returning to the nest.
4.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>is_nest_nearby</Condition> <Action>return_to_nest</Action> </Sequence> <Sequence> <Condition>detect_food</Condition> <Action>gather_food</Action> </Sequence> <Sequence> <Condition>detect_obstacle</Condition> <Action>avoid_obstacle</Action> </Sequence> <Sequence> <Action>move_randomly</Action> </Sequence> </Selector> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'detect_enemy': 'Condition: Check for the presence of enemy robots. Returns True if an enemy is detected, False otherwise.', 'gather_resources': 'Action: Collect resources from the environment and store them in the robot. Always returns True.', 'move_to_base': 'Action: Move towards the base. Always returns True.', 'follow_leader': 'Action: Follow the designated leader robot. Always returns True.', 'build_defense': 'Action: Build a defensive structure. Always returns True.', 'protect_leader': 'Action: Protect the designated leader robot. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Generate a behavior tree for a swarm of robots to secure their base and defend against enemy attacks while gathering resources and following a designated leader.
5.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>detect_enemy</Condition> <Action>protect_leader</Action> </Sequence> <Sequence> <Condition>detect_resource</Condition> <Action>gather_resource</Action> </Sequence> <Sequence> <Condition>detect_defense_structure</Condition> <Action>build_defense</Action> </Sequence> <Sequence> <Action>follow_leader</Action> </Sequence> <Sequence> <Condition>detect_obstacle</Condition> <Action>avoid_obstacle</Action> </Sequence> <Sequence> <Condition>is_base_nearby</Condition> <Action>move_to_base</Action> </Sequence> </Selector> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'approach_object': 'Action: Move towards the given object. Always returns True.', 'pickup_object': 'Action: Pick up the given object. Always returns True.', 'drop_object': 'Action: Drop the object currently being carried. Always returns True.', 'is_object_picked_up': 'Condition: Check if the given object is currently being carried by the robot. Returns True if the object is being carried, False otherwise.', 'is_target_visible': 'Condition: Check if the given target is within the robot's line of sight. Returns True if the target is visible, False otherwise.', 'navigate_obstacles': 'Action: Navigate around obstacles to reach the given target. Always returns True.', 'detect_obstacles': 'Condition: Check for the presence of obstacles in the robot's path. Returns True if an obstacle is detected, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Generate a behavior tree for a single robot to pick up a specific object and navigate obstacles to reach a designated target while carrying the object.
6.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>is_target_visible</Condition> <Action>approach_object</Action> <Sequence> <Condition>detect_obstacles</Condition> <Action>navigate_obstacles</Action> </Sequence> </Sequence> <Sequence> <Condition>is_object_picked_up</Condition> <Action>drop_object</Action> </Sequence> <Sequence> <Condition>detect_target</Condition> <Action>pickup_object</Action> </Sequence> </Selector> </BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'move_to_goal': 'Action: Move towards the given goal location. Always returns True.', 'detect_goal_reached': 'Condition: Check if the robot has reached the given goal location. Returns True if the goal is reached, False otherwise.', 'detect_obstacle': 'Condition: Check for the presence of obstacles in the robot's path. Returns True if an obstacle is detected, False otherwise.', 'make_decision': 'Action: Make a decision based on the available information. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: Generate a behavior tree for a single robot to navigate through a maze and reach a designated goal while making decisions based on obstacles and other information.
7.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>detect_goal_reached</Condition> <Action>task_completed</Action> </Sequence> <Sequence> <Condition>detect_obstacle</Condition> <Action>make_decision</Action> </Sequence> <Sequence> <Action>move_to_goal</Action> </Sequence> </Selector> </BehaviorTree>###
3.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'follow_target': 'Action: Follow the target in a straight line. Returns True if the target is reached, False otherwise.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'move_to_nest': 'Action: Move towards the nest in a straight line. Always returns True.', 'search_for_target': 'Action: Search for the target in a random pattern. Always returns True.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3.// USER COMMAND: generate behavior tree to 'Search for target, avoid obstacles if detected, follow target in straight line, and return to nest. Output only the XML behavior tree without extra text.
3.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>search_for_target</Action><Sequence><Condition>is_obstacle_detected</Condition><Action>avoid_obstacle</Action></Sequence><Action>follow_target</Action></Sequence><Sequence><Action>move_to_nest</Action><Condition>is_agent_in_nest</Condition></Sequence></Selector></BehaviorTree>

###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'change_color_to_red': "Action: Change agent's color to red. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_square': 'Action: Form a square shape at the center. Returns True if the square is formed, False otherwise.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_square_formed': 'Condition: Check if a square shape is formed. Returns True if the square is formed with the center, False otherwise.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'move_to_target': 'Action: Move towards the target in a straight line. Returns True if the target is reached, False otherwise.', 'repeat_sequence': 'Action: Repeat the sequence of actions 3 times. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Form a square, repeat 3 times, move to target, and change color to red. Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree><Sequence><Action>form_square</Action><Action>repeat_sequence</Action><Action>move_to_target</Action><Action>change_color_to_red</Action></Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_blue': "Action: Change agent's color to blue. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a horizontal line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'move_to_target': 'Action: Move towards the target in a straight line. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Filter out unnecessary colors, avoid obstacles, form a line, move to target, and change color to blue. Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>avoid_obstacle</Action><Action>form_line</Action><Action>move_to_target</Action><Action>change_color_to_blue</Action></Sequence><Selector><Sequence><Condition>is_agent_in_nest</Condition><Action>continue_movement_agent</Action></Sequence><Sequence><Condition>is_target_detected</Condition><Action>move_to_target</Action></Sequence></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'follow_path': 'Action: Follow the designated path, which includes turning left, right, and moving forward. Returns True if the final destination is reached, False otherwise.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_on_horizontal_path': 'Condition: Check if the agent is on 
###
3.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_blue': "Action: Change agent's color to blue. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'detect_enemy': 'Action: Use sensors to detect enemies in the area. Always returns True.', 'is_antenna_intact': 'Condition: Check if the agent's antenna is still intact. Returns True if intact, False otherwise.', 'is_enemy_detected': 'Condition: Check if enemy is within 30 units. Returns True if enemy is within 30 units of distance, False otherwise.', 'is_in_safe_zone': 'Condition: Check if the agent is in a safe zone. Returns True if agent is in a safe zone, False otherwise.', 'is_pheromone_detected': 'Condition: Check if a pheromone trail is detected. Returns True if a pheromone trail is detected, False otherwise.', 'move_to_safe_zone': 'Action: Move to the nearest safe zone. Returns True once agent is in safe zone.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3.// USER COMMAND: generate behavior tree to 'Use sensors to detect enemies, if enemy detected, change color to blue and move to the nearest safe zone'. Output only the XML behavior tree without extra text.
3.// OUTPUT:
<BehaviorTree><Sequence><Sequence><Action>detect_enemy</Action><Condition>is_enemy_detected</Condition><Action>change_color_to_blue</Action></Sequence><Action>move_to_safe_zone</Action></Sequence></BehaviorTree>

###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'broadcast_message': 'Action: Broadcast a message to all nearby robots. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'detect_food': 'Action: Use sensors to detect food sources in the area. Always returns True.', 'explore_area': 'Action: Move randomly and explore the area. Always returns True.', 'is_food_detected': 'Condition: Check if food source is within 10 units. Returns True if food is within 10 units of distance, False otherwise.', 'is_food_full': 'Condition: Check if the agent's food storage is full. Returns True if full, False otherwise.', 'is_antenna_intact': 'Condition: Check if the agent's antenna is still intact. Returns True if intact, False otherwise.', 'pick_up_food': 'Action: Pick up food source and store in agent's storage. Returns True once food source is picked up.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Explore the area, if food source is detected within 10 units, pick it up and broadcast a message to nearby robots that food is found'. Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree><Selector><Action>explore_area</Action><Sequence><Action>detect_food</Action><Condition>is_food_detected</Condition><Action>pick_up_food</Action><Action>broadcast_message</Action></Sequence></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'change_color_to_red': "Action: Change agent's color to red. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'detect_water': 'Action: Use sensors to detect water sources in the area. Always returns True.', 'drop_water': 'Action: Drop water on designated area. Returns True once water is dropped.', 'is_area_designated': 'Condition: Check if the agent has reached designated area. Returns True if area is reached, False otherwise.', 'is_water_source_detected': 'Condition: Check if water source is within 20 units. Returns True if water is within 20 units of distance, False otherwise.', 'is_agent_in_water': 'Condition: Check if the agent is in the water. Returns True if agent is in the water, False otherwise.', 'move_to_designated_area': 'Action: Move towards the designated area. Returns True once agent reaches designated area.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Find and drop water on designated area, if agent enters water, change color to red'. Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Action>detect_water</Action><Condition>is_water_source_detected</Condition><Action>drop_water</Action><Condition>is_area_designated</Condition></Sequence><Action>move_to_designated_area</Action></Sequence><Condition>is_agent_in_water</Condition><Action>change_color_to_red</Action></Sequence></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_yellow': "Action: Change agent's color to yellow. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'detect_pollution': 'Action: Use sensors to detect pollution levels in the area. Always returns True.', 'is_pollution_detected': 'Condition: Check if pollution levels are above threshold. Returns True if pollution levels are above threshold, False otherwise.', 'is_pollution_clear': 'Condition: Check if pollution levels are below threshold. Returns True if pollution levels are below threshold, False otherwise.', 'purify_air': 'Action: Release purified air into the environment. Returns True once air is released.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Detect pollution levels and release purified air if pollution levels are above threshold, change color to yellow when done. Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree><Sequence><Action>detect_pollution</Action><Condition>is_pollution_detected</Condition><Action>purify_air</Action></Sequence><Condition>is_pollution_clear</Condition><Action>change_color_to_yellow</Action></Sequence></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent
###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_triangle': 'Action: Form a triangle with two other robots. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_triangle_formed': 'Condition: Check if a triangle is formed with two other robots. Returns True if the triangle is formed, False otherwise.', 'join_triangle': 'Action: Join the formed triangle with two other robots. Always returns True.', 'leave_triangle': 'Action: Leave the formed triangle and continue movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Form a triangle with two other robots and move forward'. Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_triangle_formed</Condition><Action>agent_movement_freeze</Action><Action>leave_triangle</Action></Sequence><Sequence><Condition>is_line_formed</Condition><Action>agent_movement_freeze</Action><Action>form_triangle</Action></Sequence><Action>agent_movement_continue</Action></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_red': "Action: Change agent's color to red. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'move_to_nest': 'Action: Move towards the nest. Always returns True.', 'scan_area': 'Action: Use sensors to scan the environment for any obstacles or targets. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Scan the area, avoid obstacles and move towards the nest'. Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_target_reached</Condition><Action>agent_movement_freeze</Action></Sequence><Sequence><Condition>is_obstacle_detected</Condition><Action>avoid_obstacle</Action><Sequence><Condition>is_agent_in_nest</Condition><Action>continue_movement_agent</Action></Sequence></Sequence><Sequence><Condition>is_target_detected</Condition><Action>move_to_nest</Action></Sequence><Action>scan_area</Action></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'stop_at_target': 'Condition: Check if the agent is at the designated target. Returns True if at the target, False otherwise.', 'is_task_completed': 'Condition: Check if the task has been completed. Returns True if task is completed, False otherwise.', 'move_forward': 'Action: Move forward. Always returns True.', 'move_backward': 'Action: Move backwards. Always returns True.', 'rotate_right': 'Action: Rotate the agent 45 degrees to the right. Always returns True.', 'rotate_left': 'Action: Rotate the agent 45 degrees to the left. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Move forward until reaching the target, then rotate 45 degrees to the right and continue moving forward until task is completed'. Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_agent_in_nest</Condition><Action>change_color_to_green</Action><Action>move_forward</Action></Sequence><Sequence><Condition>stop_at_target</Condition><Action>agent_movement_freeze</Action><Action>move_backward</Action></Sequence><Sequence><Condition>is_task_completed</Condition><Action>agent_movement_freeze</Action><Action>rotate_right</Action></Sequence><Action>continue_movement_agent</Action></Selector></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'follow_path': 'Action: Follow a predetermined path. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'reach_target': 'Condition: Check if the agent has reached the designated target point. Returns True if at target, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: generate behavior tree to 'Follow a predetermined path while avoiding obstacles and reaching the designated target'. Output only the XML behavior tree without extra text.
7.// OUTPUT:
< 
###
3. // INSTRUCTIONS: Use only the following behaviors {'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_direction': 'Action: Change robot direction to random angle. Always returns True.', 'continue_movement_robot': 'Action: Continue robot movement. Always returns True.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_robot_facing_goal': 'Condition: Check if robot is facing the goal. Returns True if the robot is facing the goal, False otherwise.', 'is_robot_in_zone1': 'Condition: Check if robot is in Zone 1. Returns True if the robot is in Zone 1, False otherwise.', 'move_to_goal': 'Action: Move towards the goal at a constant speed. Always returns True.', 'set_goal_zone2': 'Action: Set the goal to Zone 2. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3. // USER COMMAND: generate behavior tree to 'Explore the environment, if obstacle is detected, avoid it, if facing the goal, move directly towards it, if in Zone 1, set goal to Zone 2 and continue'. Output only the XML behavior tree without extra text.
3. // OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_obstacle_detected</Condition><Action>avoid_obstacle</Action></Sequence><Sequence><Condition>is_robot_facing_goal</Condition><Action>move_to_goal</Action></Sequence><Sequence><Condition>is_robot_in_zone1</Condition><Action>set_goal_zone2</Action></Sequence><Action>continue_movement_robot</Action></Selector></BehaviorTree>

###
4. // INSTRUCTIONS: Use only the following behaviors {'detect_target': 'Action: Scan environment for targets. Always returns True.', 'follow_path': 'Action: Follow the designated path. Always returns True.', 'halt_movement': 'Action: Halt robot movement. Always returns True.', 'is_dead_end': 'Condition: Check if the path ahead leads to a dead end. Returns True if the path is a dead end, False otherwise.', 'is_target_detected': 'Condition: Check if target is within 10 units. Returns True if the target is within 10 units of distance, False otherwise.', 'retrace_path': 'Action: Retrace previous path. Always returns True.', 'take_evasive_action': 'Action: Make evasive movement to avoid obstacles. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4. // USER COMMAND: generate behavior tree to 'Scan surroundings, follow path, if dead end, retrace path and take evasive action if needed to avoid obstacles, if target is detected within 10 units, halt movement'. Output only the XML behavior tree without extra text.
4. // OUTPUT:
<BehaviorTree><Selector><Sequence><Action>detect_target</Action><Action>follow_path</Action></Sequence><Sequence><Condition>is_dead_end</Condition><Sequence><Action>retrace_path</Action><Action>take_evasive_action</Action></Sequence></Sequence><Sequence><Condition>is_target_detected</Condition><Action>halt_movement</Action></Sequence></Selector></BehaviorTree>

###
5. // INSTRUCTIONS: Use only the following behaviors {'change_speed': 'Action: Change robot speed to specified value. Always returns True.', 'continue_movement_robot': 'Action: Continue robot movement. Always returns True.', 'follow_path': 'Action: Follow the designated path. Always returns True.', 'is_obstacle_nearby': 'Condition: Check if an obstacle is within specified distance. Returns True if an obstacle is within the specified distance, False otherwise.', 'is_reaching_destination': 'Condition: Check if robot is reaching destination. Returns True if the robot is within a specified distance of the destination, False otherwise.', 'is_target_detected': 'Condition: Check if target is within specified distance. Returns True if the target is within the specified distance, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5. // USER COMMAND: generate behavior tree to 'Travel to a specific location, if an obstacle is detected within 5 units, change speed to 2.0, if reaching destination, halt movement, if target is detected within 10 units, continue movement.'. Output only the XML behavior tree without extra text.
5. // OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_obstacle_nearby</Condition><Action>change_speed</Action></Sequence><Sequence><Condition>is_reaching_destination</Condition><Action>halt_movement</Action></Sequence><Sequence><Condition>is_target_detected</Condition><Action>continue_movement_robot</Action></Sequence></Selector></BehaviorTree> 

###
6. // INSTRUCTIONS: Use only the following behaviors {'detect_target': 'Action: Search for targets within the environment. Always returns True.', 'follow_path': 'Action: Follow the designated path. Always returns True.', 'is_object_nearby': 'Condition: Check if an object is nearby. Returns True if an object is found within a specified distance, False otherwise.', 'is_robot_facing_obstacle': 'Condition: Check if robot is facing an obstacle. Returns True if the robot is facing an obstacle, False otherwise.', 'navigate_around_obstacle': 'Action: Navigate around obstacle to continue following the path. Always returns True.', 'pick_up_object': 'Action: Pick up the object found nearby. Always returns True.', 'place_object_in_designated_zone': 'Action: Place the object in the designated zone. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6. // USER COMMAND: generate behavior tree to 'Search for objects, if found, pick up and place in designated zone, if robot is facing obstacle, navigate around and continue following path'. Output only the XML behavior tree without extra text.
6. // OUTPUT:
<BehaviorTree><Selector><Sequence><Action>detect_target</Action><Sequence><Condition>is_object_nearby</Condition><Action>pick_up_object</Action><Action>place_object_in_designated_zone</Action></Sequence></Sequence><Sequence><Condition>is_robot_facing_obstacle</Condition><Action>navigate_around_obstacle</Action></Sequence><Action>follow_path</Action></Selector></BehaviorTree>

###
7. // INSTRUCTIONS: Use only the following behaviors {'change_direction': 'Action: Change robot direction to specified angle. Always returns True.', 'continue_movement_robot': 'Action: Continue robot movement. Always returns True.', 'detect_target': 'Action: Search for targets within the environment. Always returns True.', 'is_robot_facing_target': 'Condition: Check if robot is facing the target. Returns True if the robot is facing the target, False otherwise.', 'is_target 
###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_blue': "Action: Change agent's color to blue. Always returns True.", 'change_color_to_red': "Action: Change agent's color to red. Always returns True.", 'change_color_to_yellow': "Action: Change agent's color to yellow. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_square': 'Action: Form a square shape with other agents. Always returns True.', 'is_agent_in_position': 'Condition: Check if agent is in specified position. Returns True if agent is in the desired position, False otherwise.', 'is_square_formed': 'Condition: Check if square shape is formed. Returns True if all agents are in position to form a square, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Work together to form a square shape with blue and red agents, and then change color to yellow when complete.'Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>is_square_formed</Condition> <Action>change_color_to_yellow</Action> <Action>agent_movement_freeze</Action> <Action>task_completed</Action> </Sequence> <Sequence> <Condition>is_agent_in_position</Condition> <Action>change_color_to_red</Action> <Action>continue_movement_agent</Action> </Sequence> <Sequence> <Condition>is_agent_in_position</Condition> <Action>change_color_to_blue</Action> <Action>continue_movement_agent</Action> </Sequence> <Action>form_square</Action> </Selector> </Sequence> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'change_target': 'Action: Change the current target to a new random target. Always returns True.', 'follow_target': 'Action: Move towards the current target. Returns True when the target is reached, False if target is lost.', 'is_target_lost': 'Condition: Check if target is lost. Returns True if the target is not within 30 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'return_to_nest': "Action: Move towards the nest. Returns True when the nest is reached, False if obstacles are detected or nest is lost."}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Hunt for a target, change target if lost, and return to nest when target is reached.'Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>is_target_lost</Condition> <Action>change_target</Action></Sequence><Sequence><Condition>is_target_lost</Condition><Action>return_to_nest</Action></Sequence> <Sequence> <Condition>is_target_reached</Condition> <Action>return_to_nest</Action></Sequence> <Sequence> <Condition>is_target_reached</Condition> <Action>agent_movement_freeze</Action> </Sequence> <Sequence> <Condition>is_target_lost</Condition> <Action>account_for_lost_target</Action> </Sequence> <Action>follow_target</Action> </Selector> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'change_target': 'Action: Change the current target to a new random target. Always returns True.', 'follow_target': 'Action: Move towards the current target. Returns True when the target is reached, False if target is lost.', 'is_colony_fed': 'Condition: Check if colony has enough food. Returns True if there is enough food, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'return_to_nest': "Action: Move towards the nest. Returns True when the nest is reached, False if obstacles are detected or nest is lost.", 'share_target': 'Action: Share target coordinates with nearby agents. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Find food until the colony is fed, then share the target location with nearby agents and return home.'Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>is_colony_fed</Condition> <Action>share_target</Action> <Action>return_to_nest</Action> </Sequence> <Sequence> <Condition>is_colony_fed</Condition> <Action>agent_movement_freeze</Action> </Sequence> <Sequence> <Condition>is_target_reached</Condition> <Action>return_to_nest</Action> </Sequence> <Sequence> <Condition>is_target_reached</Condition> <Action>account_for_lost_target</Action> </Sequence> <Action>follow_target</Action> </Selector> </BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'change_target': 'Action: Change the current target to a new random target. Always returns True.', 'follow_target': 'Action: Move towards the current target. Returns True when the target is reached, False if target is lost.', 'is_colony_safe': 'Condition: Check if colony is safe. Returns True if there are no detected threats, False if danger is present.', 'is_target_lost': 'Condition: Check if target is lost. Returns True if the target is not within 30 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'return_to_nest': "Action: Move towards the nest. Returns True when the nest is reached, False if obstacles are detected or nest is lost.", 'send_alert': 'Action: Send an
###
3.// INSTRUCTIONS: Use only the following behaviors {'check_battery_level': 'Condition: Check the battery level of the robot. Returns True if battery level is above 50%, False otherwise.', 'go_to_charging_station': 'Action: Move towards the designated charging station. Returns True once at the station.', 'is_agent_idle': 'Condition: Check if the agent is idle. Returns True if the agent is not performing any actions, False otherwise.', 'navigate_to_goal': 'Action: Move towards the designated goal. Returns True once at the goal.', 'pick_up_object': 'Action: Pick up an object within reach. Returns True once the object is picked up.', 'place_object_in_storage': 'Action: Place the picked up object into designated storage area. Returns True once the object is stored.', 'return_to_nest': 'Action: Return to the nest. Returns True once at the nest.', 'search_for_object': 'Action: Move around and search for an object within reach. Returns True once the object is found.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3.// USER COMMAND: generate behavior tree to 'Perform a delivery task - navigate to the designated goal, pick up the package, return to the nest, and place the package in storage'. Output only the XML behavior tree without extra text.
3.// OUTPUT:
<BehaviorTree> <Sequence> <Action>navigate_to_goal</Action> <Selector> <Sequence> <Condition>is_agent_idle</Condition> <Action>pick_up_object</Action> <Action>return_to_nest</Action> <Selector> <Sequence> <Condition>is_agent_idle</Condition> <Selector> <Action>place_object_in_storage</Action> <Action>go_to_charging_station</Action> </Selector> </Sequence> <Action>search_for_object</Action> </Selector> </Sequence> </Sequence> </BehaviorTree>

###
4.// INSTRUCTIONS: Use only the following behaviors {'approach_leader': 'Action: Move towards the designated leader. Returns True once close enough to the leader.', 'avoid_bumping_into_leader': 'Condition: Check if the agent is too close to the leader. Returns True if the agent is within the danger zone, False otherwise.', 'change_color_to_blue': 'Action: Change agent's color to blue. Always returns True.', 'detect_other_robots': 'Condition: Check if there are other robots within range. Returns True if other robots are detected, False otherwise.', 'display_confidence_level': 'Action: Display the agent's confidence level. Always returns True.', 'follow_directions': 'Action: Follow the leader's instructions. Returns True once the task is completed.', 'is_leader_in_sight': 'Condition: Check if the leader is within the agent's field of view. Returns True if the leader is visible, False otherwise.', 'join_formation': 'Action: Join the formation with other robots. Returns True once in formation.', 'scan_surroundings': 'Action: Scan the surroundings for any potential threats or obstacles. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Coordinate with other robots in a formation - scan for threats, follow leader's instructions, avoid bumping into the leader, and display confidence level'. Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree> <Sequence> <Action>scan_surroundings</Action> <Selector> <Sequence> <Condition>is_leader_in_sight</Condition> <Selector> <Sequence> <Action>approach_leader</Action> <Selector> <Condition>avoid_bumping_into_leader</Condition> <Action>change_color_to_blue</Action> </Selector> <Action>follow_directions</Action> </Sequence> <Action>display_confidence_level</Action> </Selector> </Sequence> <Selector> <Condition>detect_other_robots</Condition> <Action>join_formation</Action> </Selector> </Sequence> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'check_status': 'Condition: Check the status of the robot. Returns True if the robot is functional, False if the robot is damaged.', 'defend_nest': 'Action: Defend the nest from intruders. Returns True once the intruder has been deterred or captured.', 'explore_environment': 'Action: Explore the environment for potential resources or threats. Always returns True.', 'gather_resources': 'Action: Gather resources from the environment. Returns True once the resource is collected.', 'move_to_location': 'Action: Move to a designated location within the environment. Returns True once at the location.', 'navigate_to_nest': 'Action: Return to the nest. Returns True once at the nest.', 'return_resources': 'Action: Return gathered resources to the nest. Returns True once resources are returned.', 'search_for_food': 'Action: Search for food within the environment. Returns True once food is found.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Gather resources and defend the nest - explore environment, gather resources, return to nest, and defend against intruders'. Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Condition>check_status</Condition> <Selector> <Sequence> <Action>explore_environment</Action> <Selector> <Condition>gather_resources</Condition> <Action>return_resources</Action> </Selector> </Sequence> <Action>move_to_location</Action> </Selector> <Action>navigate_to_nest</Action> </Sequence> <Selector> <Condition>check_status</Condition> <Action>defend_nest</Action> </Selector> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'avoid_collision': 'Action: Avoid colliding with other robots. Always returns True.', 'change_color_to_cyan': 'Action: Change agent's color to cyan. Always returns True.', 'collect_object': 'Action: Collect an object within reach. Returns True once the object is collected.', 'drop_object': 'Action: Drop the collected object. Returns True once the object is dropped.', 'is_same_color': 'Condition: Check if the agent's color matches the color of another robot. Returns True if the same color, False otherwise.', 'is_object_in_sight': 'Condition: Check if an object is within the agent's field of view. Returns True if an object is visible, False otherwise.', 'move_to_conveyor_belt': 'Action: Move towards the designated conveyor belt. Returns True once at the belt.', 'place_on_conveyor_belt': 'Action: Place the collected object onto the conveyor belt. Returns True once the object is placed.'}, to construct behavior tree  
###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'form_square': 'Action: Form a square with neighboring agents. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_square_formed': 'Condition: Check if a square is formed. Returns True if the agent is in a square with neighbors, False otherwise.', 'move_to_square': 'Action: Move towards neighboring agent to form a square. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following task.Input a detailed scenario that requires the use of at least 4 different behaviors.
4.// INPUT: The swarm robots need to form a square pattern with neighboring agents to collect information at a specific waypoint and return to the nest. The square pattern must be formed before reaching the waypoint and must remain intact during the return journey.
4.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Selector> <Sequence> <Action>wander</Action> <Condition>is_agent_in_nest</Condition> <Action>change_color_to_green</Action> </Selector> <Action>task_completed</Action> </Sequence> <Sequence> <Condition>is_square_formed</Condition> <Action>move_to_square</Action> <Action>form_square</Action> </Sequence> </Selector> <Sequence> <Condition>is_agent_in_nest</Condition> <Action>change_color_to_white</Action> <Action>agent_movement_freeze</Action> </Sequence> </BehaviorTree>  

###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Find and collect resources, avoid obstacles, and return to the nest.'Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Selector> <Sequence> <Action>wander</Action> <Selector> <Condition>is_agent_in_nest</Condition> <Action>change_color_to_green</Action> </Selector> </Sequence> <Action>task_completed</Action> </Selector> <Sequence> <Condition>is_obstacle_detected</Condition> <Action>avoid_obstacle</Action> </Sequence> </Selector> <Sequence> <Sequence> <Condition>is_target_detected</Condition> <Condition>is_path_clear</Condition> </Sequence> <Sequence> <Action>continue_movement_agent</Action> <Action>task_completed</Action> </Sequence> </Sequence> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'spread_out': 'Action: Move to a random far location from other agents. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'return_to_nest': 'Action: Return to the nest. Always returns True.'}, to construct behavior tree in XML format to the following task.Input a detailed scenario that requires the use of at least 4 different behaviors.
6.// INPUT: A large number of swarm robots are deployed to explore an unknown environment with a high concentration of obstacles. The robots must avoid obstacles and spread out to cover a larger area, while constantly checking for any targets within a specific proximity. If a target is detected, the robots must return to the nest to deposit any collected information.
6.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Sequence> <Selector> <Sequence> <Action>return_to_nest</Action> <Selector> <Condition>is_agent_in_nest</Condition> <Action>change_color_to_green</Action> </Selector> </Sequence> <Action>task_completed</Action> </Selector> <Sequence> <Condition>is_obstacle_detected</Condition> <Action>avoid_obstacle</Action> </Sequence> <Sequence> <Condition>is_path_clear</Condition> <Action>spread_out</Action> <Action>wander</Action> </Sequence> </Sequence> <Sequence> <Condition>is_target_detected</Condition> <Condition>is_path_clear</Condition> <Action>return_to_nest</Action> </Sequence> </Selector> </BehaviorTree>

###
7.// INSTRUCTIONS
###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'change_color_to_random': "Action: Change agent's color to a random color. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_close': 'Condition: Check if target is within 10 units. Returns True if the target is within 10 units of distance, False otherwise.', 'move_to_target': "Action: Move towards the target. Always returns True.", 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Find and move towards a target within 10 units, then form a line and change color to a random color'. Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_target_close</Condition><Action>move_to_target</Action><Selector><Sequence><Condition>is_target_close</Condition><Action>move_to_target</Action><Action>change_color_to_random</Action></Sequence><Sequence><Action>form_line</Action><Action>change_color_to_random</Action></Sequence></Selector></Sequence><Action>wander</Action></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'change_color_to_blue': "Action: Change agent's color to blue. Always returns True.", 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'move_to_target': "Action: Move towards the target. Always returns True.", 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Find and avoid obstacles while moving towards a target, then change color to blue'. Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_obstacle_detected</Condition><Action>avoid_obstacle</Action></Sequence><Action>wander</Action><Sequence><Condition>is_target_close</Condition><Action>move_to_target</Action><Action>change_color_to_blue</Action></Sequence></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_spotted': 'Condition: Check if the target object is in sight. Returns True if the target is spotted, False otherwise.', 'move_to_target': "Action: Move towards the target. Always returns True.", 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Find and follow the target while avoiding obstacles, then form a line and change color to green'. Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_obstacle_detected</Condition><Action>avoid_obstacle</Action></Sequence><Action>wander</Action><Sequence><Condition>is_target_spotted</Condition><Action>move_to_target</Action><Action>change_color_to_green</Action></Sequence></Selector></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'change_color_to_yellow': "Action: Change agent's color to yellow. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'move_to_target': "Action: Move towards the target. Always returns True.", 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. 
###
3.// INSTRUCTIONS: Use only the following behaviors {'forward': 'Action: Move forward 1 unit. Always returns True.', 'complete_taskA': 'Action: Complete task A. Always returns True.', 'complete_taskB': 'Action: Complete task B. Always returns True.', 'detect_obstacle': 'Condition: Check for obstacles ahead. Returns True if obstacle is present, False otherwise.', 'detect_taskA': 'Condition: Check if task A is detected. Returns True if task A is detected, False otherwise.', 'detect_taskB': 'Condition: Check if task B is detected. Returns True if task B is detected, False otherwise.', 'is_completed': 'Condition: Check if both task A and B are completed. Returns True if both tasks are completed, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3.// USER COMMAND: generate behavior tree to 'Complete task A, then continue forward until task B is detected, and finally complete task B.'Output only the XML behavior tree without extra text.
3.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Action>complete_taskA</Action> <Action>forward</Action> </Sequence> <Condition>detect_taskB</Condition> </Selector> <Action>complete_taskB</Action> </Sequence> </BehaviorTree>

###
4.// INSTRUCTIONS: Use only the following behaviors {'collect_item': 'Action: Collect an item and add it to inventory. Always returns True.', 'drop_item': 'Action: Drop an item from inventory. Returns True if item is successfully dropped, False otherwise.', 'is_inventory_full': 'Condition: Check if inventory is full. Returns True if inventory is full, False otherwise.', 'is_item_detected': 'Condition: Check if item is within range. Returns True if item is within range, False otherwise.', 'is_item_collected': 'Condition: Check if item has been collected. Returns True if item has been collected, False otherwise.', 'move_to_item': 'Action: Move towards the detected item. Returns True if successfully moved, False otherwise.', 'random_search': 'Action: Perform a random search for an item in the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Collect items until inventory is full, then drop all items.'Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>is_inventory_full</Condition> <Action>drop_item</Action> </Sequence> <Action>collect_item</Action> </Selector> </Sequence> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'forward': 'Action: Move forward 1 unit. Always returns True.', 'backward': 'Action: Move backward 1 unit. Always returns True.', 'turn_left': 'Action: Turn left 90 degrees. Always returns True.', 'turn_right': 'Action: Turn right 90 degrees. Always returns True.',  'circle': 'Action: Move in a circle pattern. Always returns True.', 'is_near_target': 'Condition: Check if target is within 5 units. Returns True if target is within 5 units of distance, False otherwise.', 'is_at_target': 'Condition: Check if agent is directly at the target location. Returns True if agent is directly at target location, False otherwise.', 'is_path_blocked': 'Condition: Check if path ahead is blocked. Returns True if path is blocked, False otherwise.', 'move_to_target': 'Action: Move towards the target location. Returns True if successfully moved, False otherwise.', 'move_back_to_start': 'Action: Move back to the starting location. Returns True if successfully moved, False otherwise.'}, to construct behaviorTree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Move forward, turn left, circle around, then move towards the target and return to the starting location if path is not blocked.'Output only the XML behaviorTree without extra text.
5.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>is_path_blocked</Condition> <Action>move_back_to_start</Action> </Sequence> <Action>move_to_target</Action> </Selector> <Selector> <Selector> <Sequence> <Condition>is_near_target</Condition> <Action>circle</Action> </Sequence> <Sequence> <Action>turn_left</Action> <Action>forward</Action> </Sequence> </Selector> <Action>turn_right</Action> </Selector> </Sequence> 

###
6.// INSTRUCTIONS: Use only the following behaviors {'detect_other_robots': 'Condition: Check for other robots within range. Returns True if other robots are detected, False otherwise.', 'is_leader': 'Condition: Check if the robot is the designated leader. Returns True if the robot is the leader, False otherwise.', 'follow_leader': 'Action: Follow the designated leader. Returns True if successfully following, False otherwise.', 'wait_for_leader': 'Action: Wait for the designated leader to give a signal. Returns True if the signal is received, False otherwise.', 'create_formation': 'Action: Create a formation by positioning robots according to leader's instructions. Returns True if successfully formed, False otherwise.', 'move_to_goal': 'Action: Move towards the designated goal. Returns True if successfully moved, False otherwise.', 'wait_for_instructions': 'Action: Wait for instructions from the leader. Returns True once instructions are received, False if no instructions are given.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'In a swarm, wait for designated leader to give signal, create a formation, and follow instructions to move to goal.'Output only the XML behavior tree without extra text.
6.//OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>detect_other_robots</Condition> <Action>wait_for_leader</Action> </Sequence> <Selector> <Action>wait_for_instructions</Action> <Action>create_formation</Action> </Selector> <Action>follow_leader</Action> </Selector> <Action>move_to_goal</Action> </Sequence> </BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'detect_other_robots': 'Condition: Check for other robots within range. Returns True if other robots are detected, False otherwise.', 'is_at_goal': 'Condition: Check if robot is at the designated goal. Returns True if robot is at goal, False otherwise.', 'leader_signal': 'Action: Send a signal to designated robot to assign as leader. Returns True if signal is sent, 
###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Find the shortest path to target and continue moving' Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>is_target_detected</Condition> <Action>continue_movement_agent</Action> </Sequence> <Action>wander</Action> </Selector> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Move towards the target, avoid obstacles, and change color to white when target is reached.' Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree> <Sequence> <Condition>is_target_detected</Condition> <Sequence> <Condition>is_obstacle_detected</Condition> <Action>avoid_obstacle</Action> <Action>change_color_to_white</Action> <Action>continue_movement_agent</Action> </Sequence> </Sequence> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_red': "Action: Change agent's color to red. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Move towards the target, avoid obstacles, signal task completion and freeze movement when target is reached.' Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree> <Sequence> <Condition>is_target_reached</Condition> <Action>agent_movement_freeze</Action> <Action>task_completed</Action> </Sequence> <Condition>is_target_detected</Condition> <Action>continue_movement_agent</Action> <Condition>is_obstacle_detected</Condition> <Action>avoid_obstacle</Action> </BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_red': "Action: Change agent's color to red. Always###
3.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3.// USER COMMAND: generate behavior tree to 'Avoid obstacles and move towards the target'Output only the XML behavior tree without extra text.
3.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>is_obstacle_detected</Condition> <Action>avoid_obstacle</Action> </Sequence> <Sequence> <Condition>is_target_detected</Condition> <Action>continue_movement_agent</Action> </Sequence> </Selector> </BehaviorTree>
###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Reach the target and form a vertical line with the center' Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>is_target_reached</Condition> <Action>change_color_to_green</Action> </Sequence> <Sequence> <Condition>is_target_detected</Condition> <Action>continue_movement_agent</Action> </Sequence> </Selector> <Action>form_line</Action> </Sequence> </BehaviorTree>
###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Move towards the target and avoid obstacles while forming a vertical line with the center' Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>is_target_detected</Condition> <Action>continue_movement_agent</Action> </Sequence> <Sequence> <Selector> <Sequence> <Condition>is_obstacle_detected</Condition> <Action>avoid_obstacle</Action> </Sequence> <Sequence> <Condition>is_line_formed</Condition> <Action>continue_movement_agent</Action> </Sequence> </Selector> </Sequence> </Selector> <Action>form_line</Action> </Sequence> </BehaviorTree>
 
###
3.// INSTRUCTIONS: Use only the following behaviors {'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'follow_path': "Action: Follow the specified path. Returns True if the agent reaches the end of the path, False otherwise.", 'rotate_by_90': 'Action: Rotate the agent by 90 degrees. Always returns True.', 'rotate_towards_target': 'Action: Rotate towards the target. Returns True if the agent is facing the target, False otherwise.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3.// USER COMMAND: generate behavior tree to 'Rotate towards the target, then follow a specified path to reach the target'. Output only the XML behavior tree without extra text.
3.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>is_target_detected</Condition> <Action>rotate_towards_target</Action> </Sequence> <Action>continue_movement_agent</Action> </Selector> <Selector> <Sequence> <Condition>is_target_detected</Condition> <Action>change_color_to_green</Action> <Action>form_line</Action> <Action>rotate_by_90</Action> <Action>follow_path</Action> </Sequence> <Action>change_color_to_white</Action> </Selector> </Sequence> </BehaviorTree>

###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'create_pheromone': 'Action: Create a pheromone. Always returns True.', 'detect_pheromone': 'Condition: Check for nearby pheromones. Returns True if a pheromone is detected, False otherwise.', 'is_near_nest': 'Condition: Check if the agent is near the nest. Returns True if the agent is within a certain distance of the nest, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'When near the nest, freeze movement and create a pheromone. Otherwise, continue movement and detect pheromones'. Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>is_near_nest</Condition> <Action>agent_movement_freeze</Action> <Action>create_pheromone</Action> </Sequence> <Action>continue_movement_agent</Action> </Selector> <Selector> <Condition>detect_pheromone</Condition> <Action>continue_movement_agent</Action> </Selector> </Sequence> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'attack_enemy': 'Action: Attack the enemy. Returns True if the enemy is defeated, False otherwise.', 'detect_enemy': 'Condition: Check for nearby enemies. Returns True if an enemy is detected, False otherwise.', 'is_health_low': 'Condition: Check if agent's health is below 20%. Returns True if health is below 20%, False otherwise.', 'is_enemy_detected': 'Condition: Check if an enemy is within 20 units. Returns True if an enemy is within 20 units of distance, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'If health is low, freeze movement and avoid obstacles. If enemy is detected, attack the enemy. Otherwise, continue movement and detect enemies'. Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>is_health_low</Condition> <Action>agent_movement_freeze</Action> <Action>avoid_obstacle</Action> </Sequence> <Action>continue_movement_agent</Action> </Selector> <Selector> <Sequence> <Condition>is_enemy_detected</Condition> <Action>attack_enemy</Action> </Sequence> <Action>continue_movement_agent</Action> </Selector> <Selector> <Condition>detect_enemy</Condition> <Action>continue_movement_agent</Action> </Selector> </Sequence> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'follow_leader': "Action: Follow the leader robot. Returns True if the leader is within 3 units of distance, False otherwise.", 'rotate_towards_target': 'Action: Rotate towards the target. Returns True if the agent is facing the target, False otherwise.', 'is_leader_reached': 'Condition: Check if the leader robot is within 3 units distance. Returns True if the leader is within 3 units of distance, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Rotate towards the target, then follow the leader robot'. Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>is_leader_reached</Condition> <Action>rotate_towards_target</Action> </Sequence> <Action>follow_leader</Action> </Selector> <Selector> <Condition>is_leader_reached</Condition> <Action>continue_movement_agent</Action> </Selector> </Sequence> </BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'is_target_in_front': "Condition: Check if the target is directly in front of the agent's current direction. Returns True if the target is in front, False otherwise.", 'is_goal_reached': 'Condition: Check if the goal is within 20 units. Returns True if the goal is within 20 units of distance, False otherwise.', 'move_towards_target': 'Action: Move towards the target. Returns True if the agent reaches the target, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: generate behavior tree to 'If target is directly
###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.', 'explore_area': 'Action: Continuously move around the environment to explore the area. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Explore the entire environment and return to the nest'. Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_path_clear</Condition><Action>move_forward</Action><Action>explore_area</Action></Sequence><Sequence><Condition>is_obstacle_detected</Condition><Action>avoid_obstacle</Action><Action>explore_area</Action></Sequence><Sequence><Condition>is_path_blocked</Condition><Action>turn_left</Action></Sequence><Condition>is_agent_in_nest</Condition></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'move_to_target': 'Action: Move towards the detected target. Returns True when the target is reached.', 'freeze_at_target': "Action: Freeze agent's movement at the target location. Always returns True.", 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Move towards a detected target and freeze at the target location'. Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_target_detected</Condition><Action>move_to_target</Action><Action>freeze_at_target</Action></Sequence><Action>wander</Action></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.', 'gather_resources': 'Action: Continuously move towards and gather resources. Returns True when all resources are gathered.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Gather all available resources and return to the nest'. Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_path_clear</Condition><Action>move_forward</Action><Action>gather_resources</Action></Sequence><Sequence><Condition>is_obstacle_detected</Condition><Action>avoid_obstacle</Action><Action>gather_resources</Action></Sequence><Sequence><Condition>is_path_blocked</Condition><Action>turn_left</Action></Sequence><Condition>is_agent_in_nest</Condition><Action>task_completed</Action></ 
###
4.// INSTRUCTIONS: Use only the following behaviors {'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Move towards target, avoiding obstacles and forming a line along the way, until target is reached.'Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>is_target_detected</Condition> <Action>change_color_to_green</Action> <Action>task_completed</Action> </Sequence> <Action>wander</Action> </Selector> </Sequence><Sequence><Selector> <Sequence> <Condition>is_agent_in_nest</Condition> <Action>change_color_to_white</Action> <Action>agent_movement_freeze</Action> </Sequence> </Sequence> <Selector> <Sequence> <Condition>is_obstacle_detected</Condition> <Action>form_line</Action> <Action>continue_movement_agent</Action> </Sequence> </Selector></Sequence> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'find_teammate': 'Action: Move towards closest teammate and assist in completing their task. Returns True if teammate is found, False otherwise.', 'follow_path': 'Action: Follow a predetermined path. Always returns True.', 'is_teammate_in_trouble': 'Condition: Check if a teammate is facing obstacles or challenges. Returns True if a teammate needs assistance, False otherwise.', 'navigate_to_goal': 'Action: Move towards the designated goal. Always returns True.', 'scan_environment': 'Action: Scan the environment for any changes or obstacles. Always returns True.', 'team_lift': 'Action: Lift heavy objects with the help of teammates. Returns True if the object is lifted, False otherwise.', 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'is_target_detected': 'Condition: Check if the target is within visible range. Returns True if the target is visible, False otherwise.', 'is_target_reached': 'Condition: Check if the target is within grasp of the team. Returns True if the target is close enough to be retrieved, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command.
5.// USER COMMAND: generate behavior tree to 'Assist teammates in retrieving a heavy object by navigating to the goal and using team lift.'Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>is_teammate_in_trouble</Condition> <Action>find_teammate</Action> </Sequence> <Selector> <Sequence> <Condition>is_target_detected</Condition> <Action>scan_environment</Action> <Action>navigate_to_goal</Action> </Sequence> <Action>team_lift</Action> </Selector> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'determine_status': 'Action: Determine the status of the environment, including any potential threats or important objects. Always returns True.', 'find_cover': 'Action: Search for nearby cover or safe spots. Returns True if a safe spot is found, False otherwise.', 'identify_target': 'Action: Identify the target object or location. Returns True if the target is identified, False otherwise.', 'move_to_cover': 'Action: Move towards the designated safe spot. Always returns True.', 'scan_area': 'Action: Scan the surrounding area for any changes or anomalies. Always returns True.', 'shoot_target': 'Action: Shoot at the target object. Returns True if the target is hit, False otherwise.', 'avoid_hazard': 'Action: Avoid any detected hazards. Returns True if the hazard is avoided, False otherwise.', 'is_enemy_detected': 'Condition: Check if an enemy is detected within the area. Returns True if an enemy is detected, False otherwise.', 'is_target_reached': 'Condition: Check if the target is within range. Returns True if the target is within shooting range, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command.
6.// USER COMMAND: generate behavior tree to 'Assess the environment, find cover, identify the target, and shoot at the target until it is defeated.'Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>is_enemy_detected</Condition> <Action>scan_area</Action> <Action>find_cover</Action> <Action>move_to_cover</Action> </Sequence> <Selector> <Action>determine_status</Action> </Selector> </Sequence> <Sequence> <Condition>identify_target</Condition> <Action>shoot_target</Action> <Action>task_completed</Action> </Sequence> <Action>wander</Action> </BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'search_for_food': 'Action: Search for nearby food sources. Returns True if a food source is found, False otherwise.', 'gather_food': 'Action: Gather the food from the source. Returns True if the food is collected, False otherwise.', 'share_food': 'Action: Share food with nearby ants. Returns True if food is shared, False otherwise.', 'is_ants_full': ' 
###
4.// INSTRUCTIONS: Use only the following behaviors{'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_direction_left': "Action: Change agent's direction to left. Always returns True.", 'change_direction_right': "Action: Change agent's direction to right. Always returns True.", 'change_speed_slow': "Action: Change agent's speed to slow. Always returns True.", 'change_speed_fast': "Action: Change agent's speed to fast. Always returns True.", 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'reorient': 'Action: Reorient agent to face the target. Always returns True.', 'scan_environment': 'Action: Scan the environment for potential obstacles. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Scan for obstacles, change direction to left, and move slowly while facing the target.'Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree> <Sequence> <Action>scan_environment</Action> <Sequence> <Condition>is_path_clear</Condition> <Sequence> <Condition>is_target_detected</Condition> <Action>reorient</Action> <Action>change_speed_slow</Action> <Action>change_direction_left</Action> </Sequence> </Sequence> <Action>agent_movement_freeze</Action> </Sequence> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors{'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_direction_left': "Action: Change agent's direction to left. Always returns True.", 'change_direction_right': "Action: Change agent's direction to right. Always returns True.", 'detour': 'Action: Change the agent's direction to avoid obstacles and continue along the path.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'reorient': 'Action: Reorient agent to face the target. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Avoid obstacles while moving towards the target, and change direction left if necessary.'Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Action>detour</Action> <Condition>is_path_clear</Condition> <Action>reorient</Action> </Sequence> <Action>change_direction_left</Action> </Selector> <Action>wander</Action> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'collect_resource_1': 'Action: Collect the first type of resource. Returns True if the resource is successfully collected, False otherwise.', 'collect_resource_2': 'Action: Collect the second type of resource. Returns True if the resource is successfully collected, False otherwise.', 'deposit_resource_1': 'Action: Deposit the first type of resource. Returns True if the resource is successfully deposited, False otherwise.', 'deposit_resource_2': 'Action: Deposit the second type of resource. Returns True if the resource is successfully deposited, False otherwise.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_resource_1_available': 'Condition: Check if the first type of resource is available. Returns True if the resource is available, False otherwise.', 'is_resource_2_available': 'Condition: Check if the second type of resource is available. Returns True if the resource is available, False otherwise.', 'is_resource_1_collected': 'Condition: Check if the first type of resource is collected. Returns True if the resource is collected, False otherwise.', 'is_resource_2_collected': 'Condition: Check if the second type of resource is collected. Returns True if the resource is collected, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Collect resource 1, deposit resource 2, and return to the nest.'Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>is_resource_1_available</Condition> <Action>collect_resource_1</Action> <Condition>is_resource_2_collected</Condition> <Action>deposit_resource_2</Action> <Condition>is_agent_in_nest</Condition> <Action>task_completed</Action> </Sequence> <Sequence> <Action>deposit_resource_2</Action> <Action>collect_resource_1</Action> </Sequence> </Selector> <Action>wander</Action> </Sequence> </BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'collect_resource_1': 'Action: Collect the first type of resource. Returns True if the resource is successfully collected, False otherwise.', 'collect_resource_2': 'Action: Collect the second type of resource. Returns True if the resource is successfully collected, False otherwise.', 'deposit_resource_1': 'Action: Deposit the first type of resource. Returns True if the resource is successfully deposited, False otherwise.', 'deposit_resource_2': 'Action: Deposit the second type of resource. Returns True if the resource is successfully deposited, False otherwise###
3.// INSTRUCTIONS: Use only the following behaviors {'move_forward': 'Action: Move one step forward in a straight line. Always returns True.', 'turn_left': 'Action: Turn 90 degrees to the left. Always returns True.', 'turn_right': 'Action: Turn 90 degrees to the right. Always returns True.', 'is_obstacle_detected': 'Condition: Check for obstacles in the environment. Returns True if an obstacle is detected, False otherwise.', 'is_node_visited': 'Condition: Check if the current node in the map has been visited. Returns True if the node has been visited, False otherwise.', 'is_map_complete': 'Condition: Check if the entire map has been explored. Returns True if all nodes have been visited, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3.// USER COMMAND: Use swarm robots to navigate through a maze and explore every corner without getting stuck or missing any nodes.
3.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>is_obstacle_detected</Condition><Selector><Sequence><Condition>is_node_visited</Condition><Action>move_forward</Action></Sequence><Selector><Sequence><Condition>is_map_complete</Condition><Action>restart_exploration</Action></Sequence></Selector></Selector></Sequence><Selector><Sequence><Condition>is_obstacle_detected</Condition><Action>turn_left</Action></Sequence><Action>turn_right</Action></Sequence></Selector></Sequence></BehaviorTree>

###
4.// INSTRUCTIONS: Use only the following behaviors {'move_forward': 'Action: Move forward in a continuous line while avoiding obstacles. Always returns True.', 'avoid_obstacle': 'Action: Avoid obstacles detected on the sides of the robot. Always returns True.', 'turn_left': 'Action: Turn 90 degrees to the left. Always returns True.', 'turn_right': 'Action: Turn 90 degrees to the right. Always returns True.', 'is_obstacle_detected': 'Condition: Check for obstacles in the environment. Returns True if an obstacle is detected, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Guide a swarm of robots towards a known target location while avoiding any obstacles in the environment.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_obstacle_detected</Condition><Selector><Sequence><Action>avoid_obstacle</Action></Sequence><Action>move_forward</Action></Selector></Sequence><Selector><Sequence><Condition>is_obstacle_detected</Condition><Action>turn_left</Action></Sequence><Action>turn_right</Action></Selector></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'move_forward': 'Action: Move one step forward while checking for any nearby obstacles. Always returns True.', 'turn_left': 'Action: Turn 90 degrees to the left. Always returns True.', 'turn_right': 'Action: Turn 90 degrees to the right. Always returns True.', 'go_to_nest': 'Action: Guide the robot back to the nest. Always returns True.', 'is_obstacle_ahead': 'Condition: Check for obstacles ahead of the robot. Returns True if an obstacle is detected, False otherwise.', 'is_target_detected': 'Condition: Check if the target location is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Use swarm robots to locate and retrieve objects from a distant location, while being able to avoid obstacles and return to the nest with the object.
5.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_obstacle_ahead</Condition><Selector><Sequence><Action>turn_left</Action></Sequence><Action>move_forward</Action></Selector></Sequence><Selector><Sequence><Condition>is_target_detected</Condition><Selector><Sequence><Condition>is_obstacle_ahead</Condition><Action>turn_right</Action></Sequence><Action>move_forward</Action></Selector></Sequence><Selector><Sequence><Condition>is_obstacle_ahead</Condition><Action>go_to_nest</Action></Sequence><Action>go_to_target</Action></Selector></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'track_target': 'Action: Continuously track and follow the target. Always returns True.', 'stop_tracking': 'Action: Stop tracking the target. Always returns True.', 'evade_obstacle': 'Action: Quickly evade obstacles detected in the path. Always returns True.', 'avoid_target': 'Action: Avoid getting too close to the target while tracking. Always returns True.', 'is_obstacle_detected': 'Condition: Check for obstacles in the environment. Returns True if an obstacle is detected, False otherwise.', 'is_target_visible': 'Condition: Check if the target is currently visible. Returns True if the target is in the robot's line of sight, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: In a dynamic environment, use swarm robots to track and follow a moving target while avoiding any sudden obstacles in the path.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_target_visible</Condition><Selector><Sequence><Condition>is_obstacle_detected</Condition><Action>evade_obstacle</Action></Sequence><Action>track_target</Action></Selector></Sequence><Selector><Sequence><Condition>is_obstacle_detected</Condition><Action>avoid_target</Action></Sequence><Action>stop_tracking</Action></Selector></Selector></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'collect_item': 'Action: Collect and hold onto a target item. Always returns True.', 'drop_item': 'Action: Drop the collected item in a designated location. Always returns True.', 'move_to_location': 'Action: Move to a specific location on the map. Always returns True.', 'is_item_detected': 'Condition: Check if a target item is within sight. Returns True if an item is detected, False otherwise.', 'is_item_collected': 'Condition: Check if the item has been successfully collected. Returns True if the item is currently held, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: Use a swarm of robots to efficiently collect and transport items to a designated location while avoiding any obstacles in the environment.
7.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_item_detected</Condition><Selector><Sequence><Condition>is_item_collected</Condition><Action>move_to_location</Action></Sequence><Action>collect_item</Action></Selector 
###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Task sequence: Find the target, then form a line' Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>is_target_detected</Condition><Action>form_line</Action><Action>task_completed</Action></Sequence><Action>wander</Action></Selector></Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Move forward, avoid obstacles, and turn left if an obstacle is detected' Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_path_clear</Condition><Action>move_forward</Action></Sequence><Sequence><Condition>is_obstacle_detected</Condition><Action>avoid_obstacle</Action><Action>turn_left</Action></Sequence></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Check if the target is within 10 units, move towards it if it is, otherwise continue moving' Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_target_detected</Condition><Condition>is_target_reached</Condition><Action>continue_movement_agent</Action></Sequence><Sequence><Condition>is_target_detected</Condition><Action>move_forward</Action></Sequence></Selector></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's  
###
4.// INSTRUCTIONS: Use only the following behaviors {'move_to_target': "Action: Move towards a specified target location. Always returns True.", 'orient_with_target': "Action: Orient the agent's position and direction towards the target. Always returns True.", 'collect_resource': 'Action: Collect a resource located at the target location. Always returns True.', 'drop_off_resource': 'Action: Drop off any collected resource at a designated location. Always returns True.', 'is_resource_available': 'Condition: Check if there is a resource present at the target location. Returns True if a resource is present, False otherwise.', 'is_agent_aligned': 'Condition: Check if the agent's position and direction are aligned with the target location. Returns True if aligned, False otherwise.', 'is_resource_delivered': 'Condition: Check if the collected resource has been successfully delivered. Returns True if resource is delivered, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Generate a behavior tree for a swarm of robots to collectively gather and transport resources from various locations to a designated drop-off point.
4.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>is_resource_available</Condition> <Sequence> <Action>move_to_target</Action> <Condition>is_agent_aligned</Condition> <Action>collect_resource</Action> </Sequence> </Sequence> <Sequence> <Condition>is_resource_delivered</Condition> <Action>drop_off_resource</Action> </Sequence> </Selector> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'move_to_point_a': "Action: Move towards point A. Returns True when the agent reaches point A.", 'move_to_point_b': "Action: Move towards point B. Returns True when the agent reaches point B.", 'move_to_point_c': "Action: Move towards point C. Returns True when the agent reaches point C.", 'check_point_a': 'Condition: Check if the agent has reached point A. Returns True if the agent is at point A, False otherwise.', 'check_point_b': 'Condition: Check if the agent has reached point B. Returns True if the agent is at point B, False otherwise.', 'check_point_c': 'Condition: Check if the agent has reached point C. Returns True if the agent is at point C, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Generate a behavior tree for the swarm of robots to cooperatively move through a series of checkpoints A, B, and C in a specific order.
5.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Action>move_to_point_a</Action> <Sequence> <Condition>check_point_a</Condition> <Action>move_to_point_b</Action> <Sequence> <Condition>check_point_b</Condition> <Action>move_to_point_c</Action> </Sequence> </Sequence> </Sequence> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'find_target': "Action: Search the environment for a specified target. Returns True when the target is found.", 'move_to_target': "Action: Move towards the target. Returns True when the agent reaches the target location.", 'track_target': 'Action: Continuously track the target location. Always returns True.', 'identify_target': 'Action: Identify and label the target. Returns True when the target is successfully identified.', 'is_target_in_sight': 'Condition: Check if the target is within the agent's field of view. Returns True if the target is in sight, False otherwise.', 'is_target_tracked': 'Condition: Check if the target is being continuously tracked. Returns True if the target is being tracked, False otherwise.', 'is_target_detected': 'Condition: Check if the target is detected in the environment. Returns True if the target is detected, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Generate a behavior tree for a swarm of robots to collaboratively search for and identify a designated target in the environment.
6.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Action>find_target</Action> <Sequence> <Condition>is_target_in_sight</Condition> <Action>move_to_target</Action> <Condition>is_target_detected</Condition> <Action>identify_target</Action> <Sequence> <Condition>is_target_tracked</Condition> <Action>track_target</Action> </Sequence> </Sequence> </Selector> </BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'move_to_center': "Action: Move towards the center of the designated area. Returns True when the agent reaches the center.", 'gather_data': "Action: Collect and record data from the surrounding environment. Always returns True.", 'analyze_data': 'Action: Analyze the collected data. Returns True when the analysis is complete.', 'return_to_base': 'Action: Return to the base location. Returns True when the agent reaches the base.', 'is_center_reached': 'Condition: Check if the agent has reached the center of the designated area. Returns True if the center is reached, False otherwise.', 'is_data_collected': 'Condition: Check if the agent has successfully gathered and recorded data. Returns True if data is collected, False otherwise.', 'is_data_analyzed': 'Condition: Check if the data has been analyzed. Returns True if the data is analyzed, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: Generate a behavior tree for a swarm of robots to collect and analyze data from a designated area, and return the data to a base location.
7.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Action>move_to_center</Action> <Sequence> <Condition>is_center_reached</Condition> <Sequence> <Action>gather_data</Action> <Condition>is_data_collected</Condition> <Sequence> <Action>analyze_data</Action> <Condition>is_data_analyzed</Condition> </Sequence> </Sequence> </Sequence> <Sequence> <Action>return_to_base</Action> <Condition>is_base_reached</Condition> </Sequence> </Selector> </BehaviorTree> 
###
3.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_red': "Action: Change agent's color to red. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'collect_data': 'Action: Collect data from the environment. Always returns True.', 'detect_hazard': 'Condition: Check for hazards nearby. Returns True if a hazard is detected, False otherwise.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_data_collected': 'Condition: Check if necessary data has been collected. Returns True if data is collected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3.// USER COMMAND: generate behavior tree to 'Collect data while avoiding hazards, then return to the nest and change color to red.'Output only the XML behavior tree without extra text.
3.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>detect_hazard</Condition> <Action>avoid_obstacle</Action> </Sequence> <Action>wander</Action> </Selector> <Action>collect_data</Action> <Sequence><Condition>is_agent_in_nest</Condition> <Action>change_color_to_red</Action> <Action>agent_movement_freeze</Action> </Sequence> </Sequence> </BehaviorTree>

###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'collect_resource': 'Action: Collect nearest resource. Always returns True.', 'drop_resource': 'Action: Drop collected resource. Always returns True.', 'go_to_next_resource_area': 'Action: Move to the next resource area. Always returns True.', 'is_resource_available': 'Condition: Check if resource is available. Returns True if resource is available, False otherwise.', 'is_resource_collected': 'Condition: Check if resource has been collected. Returns True if resource is collected, False otherwise.', 'is_resource_dropped': 'Condition: Check if resource has been dropped. Returns True if resource is dropped, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 10 units. Returns True if the target is within 10 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Collect resources and deposit them at designated areas, then return to starting point and freeze movement.'Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>is_resource_available</Condition> <Action>go_to_next_resource_area</Action> </Sequence> <Action>wander</Action> </Selector> <Action>collect_resource</Action> <Selector> <Sequence> <Condition>is_target_reached</Condition> <Action>drop_resource</Action> </Sequence> <Action>wander</Action> </Selector> <Sequence> <Condition>is_resource_dropped</Condition> <Action>go_to_next_resource_area</Action> <Action>wander</Action> </Sequence> </Sequence> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'disperse': 'Action: Disperse from the group. Always returns True.', 'follow_leader': 'Action: Follow the designated leader. Always returns True.', 'is_leader_detected': 'Condition: Check if leader is within 10 units. Returns True if the leader is within 10 units of distance, False otherwise.', 'is_leader_moving': 'Condition: Check if leader is currently moving. Returns True if the leader is moving, False otherwise.', 'is_swarm_dispersed': 'Condition: Check if the swarm has dispersed. Returns True if the swarm is dispersed, False otherwise.', 'is_swarm_formatted': 'Condition: Check if the swarm is in a specified formation. Returns True if the swarm is in formation, False otherwise.', 'regroup': 'Action: Regroup with the rest of the swarm. Always returns True.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Disperse from the current group, follow the leader, regroup with the rest of the swarm, and freeze movement.'Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>is_leader_detected</Condition> <Condition>is_leader_moving</Condition> <Action>follow_leader</Action> </Sequence> <Action>wander</Action> </Selector> <Selector> <Sequence> <Condition>is_swarm_dispersed</Condition> <Action>regroup</Action> </Sequence> <Action>wander</Action> </Selector> <Sequence> <Condition>is_swarm_formatted</Condition> <Action>disperse</Action> <Action>agent_movement_freeze</Action> </Sequence> </Sequence> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_yellow': "Action: Change agent's color to yellow. Always returns True.", 'change_color_to_black': "Action: Change agent's color to black. Always returns True.", 'change_color_to_red': "Action: Change agent's color to red. Always returns True.", 'form_circle': 'Action: Form a circle with the other agents. Always returns True.', 'is_circle_formed': 'Condition: Check if a circle is formed.4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'find_and_pickup_object': 'Action: Find and pick up object in the environment. Always returns True.', 'is_hold_object': 'Condition: Check if the agent is currently holding an object. Returns True if the agent is holding an object, False otherwise.', 'is_object_in_vicinity': 'Condition: Check if there is an object within 10 units. Returns True if an object is within 10 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Find a nearby object, pick it up, change color to green, and return to the nest.'
Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Selector> <Sequence> <Condition>is_object_in_vicinity</Condition> <Action>find_and_pickup_object</Action> <Action>change_color_to_green</Action> </Sequence> <Action>wander</Action> </Selector> <Sequence> <Condition>is_hold_object</Condition> <Action>task_completed</Action> <Sequence> </Selector> <Sequence> <Selector> <Condition>is_hold_object</Condition> <Action>continue_movement_agent</Action> <Action>agent_movement_freeze</Action> </Sequence> <Selector> <Condition>is_hold_object</Condition> <Action>wander</Action> </Selector> </Sequence> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_collision': 'Action: Avoid potential collisions with other robots. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'form_square': 'Action: Form a square shape with other robots. Always returns True.', 'is_in_formation': 'Condition: Check if the robot is currently in formation with other robots. Returns True if in formation, False otherwise.', 'is_object_detected': 'Condition: Check if an object is detected within 15 units. Returns True if an object is detected, False otherwise.', 'follow_leader': 'Action: Follow the designated leader robot. Always returns True.', 'search_for_object': 'Action: Search for and approach an object within the environment. Always returns True.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Approach a detected object, change color to green, form a square shape with other robots, change color to white, and follow the leader to the nest.'Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>is_object_detected</Condition> <Action>search_for_object</Action> </Sequence> <Action>wander</Action> </Selector> <Action>change_color_to_green</Action> <Sequence> <Condition>is_in_formation</Condition> <Sequence> <Action>continue_movement_agent</Action> <Action>avoid_collision</Action> </Sequence> <Action>form_square</Action> </Sequence> <Action>change_color_to_white</Action> <Sequence> <Condition>is_in_formation</Condition> <Follow_leader>follow_leader</Follow_leader> <Action>task_completed</Action> </Sequence> </Sequence> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_collision': 'Action: Avoid potential collisions with other robots. Always returns True.', 'change_color_to_blue': "Action: Change agent's color to blue. Always returns True.", 'is_at_specific_location': 'Condition: Check if the agent has reached a specific location. Returns True if at the specified location, False otherwise.', 'is_in_formation': 'Condition: Check if the robot is currently in formation with other robots. Returns True if in formation, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'move_to_destination': 'Action: Move towards a specified destination. Always returns True.', 'rotate_left': 'Action: Rotate the robot left by 90 degrees. Always returns True.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Move towards a specific location while avoiding obstacles, rotate left, change color to blue, and form a line with other robots.'
Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree> <Selector> <Selector> <Sequence> <Condition>is_at_specific_location</Condition> <Action>move_to_destination</Action> </Sequence> <Action>rotate_left</Action> </Selector> <Sequence> <Condition>is_path_clear</Condition> <Sequence> <Condition>is_obstacle_detected</Condition> <Action>avoid_collision</Action> </Sequence> <Action>wander</Action> </Sequence> <Action>change_color_to_blue</Action> <Sequence> <Condition>is_in_formation</Condition> <Sequence> <Action>continue_movement_agent</Action> <Action>avoid_collision</Action> </Sequence> <Action>form_line</Action> </Sequence> </Selector> </BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_red': "Action: Change agent's color to red. Always returns<BehaviorTree></BehaviorTree>

###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'move forward, avoid obstacles, and stop at the white line' Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_path_clear</Condition><Selector><Sequence><Condition>is_line_formed</Condition><Action>change_color_to_white</Action></Sequence><Selector><Sequence><Condition>is_obstacle_detected</Condition><Action>avoid_obstacle</Action><Action>continue_movement_agent</Action></Sequence><Action>continue_movement_agent</Action></Selector></Selector></Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'find path to target while avoiding obstacles, pick up target, and return to nest'
Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>is_target_detected</Condition><Action>avoid_obstacle</Action><Action>continue_movement_agent</Action><Condition>is_target_reached</Condition><Action>wander</Action><Action>form_line</Action></Sequence></Selector><Selector><Sequence><Selector><Action>change_color_to_green</Action></Selector><Selector><Action>wander</Action></Selector></Sequence><Selector><Condition>is_agent_in_nest</Condition><Sequence><Action>form_line</Action><Action>change_color_to_white</Action></Sequence></Selector></Selector></Sequence></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'pick up target while avoiding obstacles, return to nest, form line, and change to white'
Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>is_target_reached</Condition
###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 
'avoid_obstacle_with_different_speeds': 'Action: Avoid obstacles with different speeds. Always returns True.', 'continue_movement_agent': 
"Action: Continue agent's movement. Always returns True.", 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_successful': 'Condition: Check if the previous action was successful. Returns True if the action was successful, False otherwise.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns 
True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'move_to_target': 'Action: Move towards the target at a constant speed. Returns True once the target is reached.', 'move_with_maximum_speed': 'Action: Move with maximum speed. Always returns True.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.'}, to construct behavior tree in XML format for the following scenario. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree for 'Avoid obstacles while trying to reach the target'. Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>is_obstacle_detected</Condition> <Action>avoid_obstacle</Action> </Sequence> <Action>move_to_target</Action> </Selector> <Sequence> <Condition>is_successful</Condition> <Selector> <Action>move_with_maximum_speed</Action> <Action>continue_movement_agent</Action> </Selector> </Sequence> </Sequence> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'change_color_randomly': "Action: Change agent's color to a random color. Always returns True.", 'circle_pattern': 'Action: Move in a circular pattern. Always returns True.', 'is_color_blue': 'Condition: Check if agent's color is blue. Returns True if the agent's color is blue, False otherwise.', 'is_north_direction': 'Condition: Check if agent's orientation is facing north. Returns True if the agent's orientation is north, False otherwise.', 'is_obstacle_front': 'Condition: Check if there is an obstacle in front of the agent. Returns True if there is an obstacle, False otherwise.', 'is_obstacle_left': 'Condition: Check if there is an obstacle to the left of the agent. Returns True if there is an obstacle, False otherwise.', 'is_obstacle_right': 'Condition: Check if there is an obstacle to the right of the agent. Returns True if there is an obstacle, False otherwise.', 'move_forward': 'Action: Move forward. Always returns True.', 'turn_left': 'Action: Turn left. Always returns True.', 'turn_right': 'Action: Turn right. Always returns True.'}, to construct behavior tree in XML format for the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree for 'Perform a random movement pattern while avoiding obstacles and changing color to blue when facing north'. Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Action>change_color_randomly</Action> <Selector> <Sequence> <Condition>is_north_direction</Condition> <Action>change_color_to_blue</Action> </Sequence> <Sequence> <Condition>is_obstacle_front</Condition> <Action>turn_left</Action> </Sequence> </Selector> <Sequence> <Condition>is_obstacle_left</Condition> <Action>turn_right</Action> </Sequence> <Sequence> <Condition>is_obstacle_right</Condition> <Action>move_forward</Action> </Sequence> </Sequence> <Selector> <Action>circle_pattern</Action> </Selector> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'avoid_middle_obstacles': 'Action: Avoid obstacles in the middle of the environment. Always returns True.', 'avoid_edge_obstacles': 'Action: Avoid obstacles at the edges of the environment. Always returns True.', 'circle_pattern': 'Action: Move in a circular pattern. Always returns True.', 'form_square': 'Action: Form a square shape. Always returns True.', 'is_color_black': 'Condition: Check if agent's color is black. Returns True if the agent's color is black, False otherwise.', 'is_move_successful': 'Condition: Check if the previous action was successful. Returns True if the action was successful, False otherwise.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'move_to_target': 'Action: Move towards the target at a constant speed. Returns True once the target is reached.', 'move_with_maximum_speed': 'Action: Move with maximum speed. Always returns True.', 'rotate_left': 'Action: Rotate left. Always returns True.', 'rotate_right': 'Action: Rotate right. Always returns True.'}, to construct behavior tree in XML format for the following scenario. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree for 'Avoid obstacles while circling the environment and form a square shape when the target is detected'. Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Action>avoid_middle_obstacles</Action> <Action>circle_pattern</Action> </Sequence> <Sequence> <Condition>is_target_detected</Condition> <Sequence> <Action>rotate_left</Action> <Selector> <Action>move_with_maximum_speed</Action> <Action>move_to_target</Action> <Action>rotate_right</Action> </Selector> </Sequence> </Sequence> <Action>avoid_edge_obstacles</Action> </Selector> <Sequence> <Condition>is_move_successful</Condition> <Action>form_square</Action> </Sequence> </BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'move_in_grid_pattern': 'Action: Move in a grid pattern. Always returns True.', 'is_agent_in_nest': 'Condition 
 ###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_triangle': 'Action: Form a triangle with three agents. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_triangle_formed': 'Condition: Check if a triangle is formed with three agents. Returns True if the triangle is formed, False otherwise.', 'is_circle_formed': 'Condition: Check if a circle is formed with all agents. Returns True if a circle is formed, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Form a triangle with three agents and continue movement.'Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree> <Sequence> <Action>form_triangle</Action> <Sequence> <Condition>is_triangle_formed</Condition> <Action>continue_movement_agent</Action> </Sequence> </Sequence> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'deploy_beacon': "Action: Deploy a beacon at the current location. Always returns True.", 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_beacon_deployed': 'Condition: Check if a beacon has been deployed. Returns True if a beacon has been deployed, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'move_towards_beacon': "Action: Move towards the deployed beacon. Always returns True.", 'return_to_nest': "Action: Return to the nest by following the path previously taken. Always returns True.", 'scan_environment': 'Action: Scan the environment for nearby targets. Always returns True.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Deploy a beacon, scan the environment, move towards the beacon, return to the nest, and change color to white.'Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Action>deploy_beacon</Action> <Sequence> <Condition>is_beacon_deployed</Condition> <Action>scan_environment</Action> <Action>move_towards_beacon</Action> <Sequence> <Condition>is_agent_in_nest</Condition> <Action>change_color_to_white</Action> <Action>agent_movement_freeze</Action> </Sequence> </Sequence> </Selector> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'choose_random_target': 'Action: Choose a random target within the environment. Always returns True.', 'explore_target': 'Action: Move towards and explore the chosen target. Always returns True.', 'get_distance_to_target': 'Action: Retrieve the distance to the chosen target. Always returns True.', 'get_random_point': 'Action: Get the coordinates of a random point within the environment. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'search_for_target': 'Action: Search for the chosen target if not found at current location. Always returns True.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Choose a random target, get the distance to the target, explore the target, and search for the target if not found at current location.'Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Action>choose_random_target</Action> <Sequence> <Action>get_distance_to_target</Action> <Action>explore_target</Action> <Sequence> <Condition>is_agent_in_nest</Condition> <Action>search_for_target</Action> </Sequence> </Sequence> </Selector> </BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'choose_random_point': 'Action: Choose a random point within the environment. Always returns True.', 'move_to_location': 'Action: Move towards the chosen location. Returns True if the agent reaches the chosen location, False if blocked or stuck.', 'set_recharge_point': 'Action: Set the chosen
###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_circle': 'Action: Form a circle with other agents. Always returns True.', 'is_circle_formed': 'Condition: Check if a circle is formed with other agents. Returns True if a circle is formed, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_reached': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'switch_to_circleformation': 'Action: Switch to forming circle with other agents. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Avoid obstacles, form a circle with other agents, and continue movement.'Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree> <Sequence> <Condition>is_obstacle_detected</Condition> <Action>avoid_obstacle</Action> <Selector> <Sequence> <Action>switch_to_circleformation</Action> <Condition>is_circle_formed</Condition> </Sequence> <Action>wander</Action> </Selector> <Action>continue_movement_agent</Action> </Sequence> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'detect_lightsource': 'Condition: Check if a light source is detected. Returns True if a light source is detected, False otherwise.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'move_toward_light': 'Action: Move towards the detected light source. Always returns True.', 'recharge': 'Action: Recharge the agent by moving back to the nest. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Find the nearest light source, move towards it and recharge at the nest.'Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree> <Sequence> <Condition>detect_lightsource</Condition> <Action>move_toward_light</Action> <Selector> <Sequence> <Condition>is_agent_in_nest</Condition> <Action>agent_movement_freeze</Action> <Action>recharge</Action> </Sequence> <Action>wander</Action> </Selector> </Sequence> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'collect_resource': 'Action: Collect resource at current location. Returns True if resource is successfully collected, False otherwise.', 'drop_resource': 'Action: Drop off collected resource at designated location. Returns True if resource is successfully dropped off, False otherwise.', 'is_agent_at_hive': 'Condition: Check if the agent is at the hive. Returns True if the agent is at the hive, False otherwise.', 'is_collecting_resource': 'Condition: Check if the agent is currently collecting resource. Returns True if the agent is collecting resource, False otherwise.', 'is_resource_available': 'Condition: Check if there is resource available at current location. Returns True if resource is available, False otherwise.', 'navigate_to_resource': 'Action: Navigate to the nearest resource. Always returns True.', 'return_to_hive': 'Action: Return to the hive. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Collect resources until the hive is full, then return to the hive and drop off all collected resources.'Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree> <Sequence> <Condition>is_collecting_resource</Condition> <Selector> <Sequence> <Condition>is_resource_available</Condition> <Action>collect_resource</Action> </Sequence> <Action>navigate_to_resource</Action> </Selector> </Sequence> <Sequence> <Condition>is_agent_at_hive</Condition> <Action>agent_movement_freeze</Action> <Action>drop_resource</Action> <Action>return_to_hive</Action> </Sequence> </BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'detect_food_source': 'Condition: Check if a food source is detected. Returns True if a food source is detected, False otherwise.', 'eat_food': 'Action: Eat food at current location. Always returns True.', 'is_food_consumed': 'Condition: Check if food at current location is consumed. Returns True if food is consumed, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'move_toward_food': 'Action: Move towards the detected food source. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: generate behavior tree to 'Avoid obstacles, find and eat food sources, and continue movement.'Output only the XML behavior tree without extra text.
7.// OUTPUT:
<BehaviorTree> <Sequence> <Condition>is_food_consumed</Condition> <Selector> <Sequence> <Condition>is_food_detected</Condition> <Action>eat_food</Action> </Sequence> <Action>wander</Action> </Selector> <Selector> <Sequence> <Condition>is_obstacle_detected</Condition> <Action>avoid_obstacle</Action> </Sequence> <Action>wander###
4.// INSTRUCTIONS: Use only the following behaviors {'follow_path': 'Action: Follow the designated path while avoiding obstacles and adjusting formation. Always returns True.', 'reform_formation': 'Action: Reform and maintain the desired formation. Always returns True.', 'detect_person': 'Action: Use sensors to detect a human within the vicinity. Returns True if a human is detected, False otherwise.', 'navigate_to_entrance': 'Action: Navigate to the nearest entrance. Always returns True.', 'stop_movement': 'Action: Stop all movement and hold position. Always returns True.', 'is_destination_reached': 'Condition: Check if the designated destination has been reached. Returns True if the destination is reached, False otherwise.', 'is_formation_active': 'Condition: Check if the formation is currently active and functioning. Returns True if formation is active, False otherwise.', 'is_person_authorized': 'Condition: Check if the detected person is authorized to access the designated area. Returns True if person is authorized, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Generate a behavior tree for a team of robots to secure a restricted area, using sensors to detect unauthorized individuals and guiding them to the nearest entrance if detected.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_destination_reached</Condition><Sequence><Condition>is_person_authorized</Condition><Action>stop_movement</Action></Sequence><Action>navigate_to_entrance</Action></Sequence><Sequence><Condition>is_destination_reached</Condition><Action>reform_formation</Action></Sequence><Sequence><Condition>is_formation_active</Condition><Selector><Sequence><Condition>is_person_detected</Condition><Action>detect_person</Action></Sequence><Action>follow_path</Action></Selector></Sequence></Selector></BehaviorTree>
###
5.// INSTRUCTIONS: Use only the following behaviors {'move_to_marker': 'Action: Move to a designated marker within the environment. Always returns True.', 'use_tools': 'Action: Use specialized tools for specific tasks. Always returns True.', 'check_marker_status': 'Condition: Check the status of the designated marker. Returns True if the marker is active and functioning, False otherwise.', 'are_tools_available': 'Condition: Check if the necessary tools for a specific task are available. Returns True if tools are available, False otherwise.', 'is_location_safe': 'Condition: Check if the current location is safe for the robot. Returns True if the location is safe, False otherwise.', 'is_marker_reachable': 'Condition: Check if the designated marker is reachable by the robot. Returns True if the marker is reachable, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Generate a behavior tree for a robot to move to a designated marker, check its status, and use necessary tools if available and the location is deemed safe.
5.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_marker_reachable</Condition><Action>move_to_marker</Action><Sequence><Condition>is_location_safe</Condition><Selector><Sequence><Condition>are_tools_available</Condition><Action>use_tools</Action></Sequence><Condition>check_marker_status</Condition></Selector></Sequence></Sequence></BehaviorTree>
###
6.// INSTRUCTIONS: Use only the following behaviors {'navigate_to_hazard': 'Action: Navigate to the nearest hazardous area within the environment. Always returns True.', 'confirm_hazard': 'Action: Confirm the presence of a hazardous object or substance within the designated area. Returns True if hazard is confirmed, False otherwise.', 'avoid_hazard': 'Action: Avoid the hazardous area while maintaining formation. Always returns True.', 'report_hazard': 'Action: Report the presence of a hazardous object or substance to the designated authority. Returns True if report is successful, False otherwise.', 'is_hazard_detected': 'Condition: Check for the presence of a hazardous object or substance within the environment. Returns True if a hazard is detected, False otherwise.', 'is_report_successful': 'Condition: Check if the hazardous object or substance has been successfully reported to the designated authority. Returns True if report is successful, False otherwise.', 'is_formation_safe': 'Condition: Check if the formation is currently in a safe position. Returns True if formation is safe, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Generate a behavior tree for a swarm of robots to detect, avoid, and report hazardous objects or substances within a designated area while maintaining formation.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_report_successful</Condition><Action>report_hazard</Action></Sequence><Sequence><Condition>is_hazard_detected</Condition><Selector><Sequence><Condition>is_formation_safe</Condition><Action>avoid_hazard</Action></Sequence><Action>confirm_hazard</Action></Selector></Sequence><Action>navigate_to_hazard</Action></Selector></BehaviorTree>
###
7.// INSTRUCTIONS: Use only the following behaviors {'follow_path': 'Action: Follow the designated path while avoiding obstacles and adjusting formation. Always returns True.', 'gather_object': 'Action: Gather objects or resources from a designated area. Always returns True.', 'sort_objects': 'Action: Sort gathered objects according to specified criteria. Always returns True.', 'move_to_resource': 'Action: Move to the nearest resource within the environment. Always returns True.', 'is_resource_available': 'Condition: Check if the designated resource is currently available for gathering. Returns True if resource is available, False otherwise.', 'is_gathered_objects_sorted': 'Condition: Check if the gathered objects have been sorted properly according to specified criteria. Returns True if objects are sorted, False otherwise.', 'is_resource_exhausted': 'Condition: Check if the designated resource has been exhausted. Returns True if resource is exhausted, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: Generate a behavior tree for a swarm of robots to gather resources, sort them, and move them to a designated area, continually checking for resource availability and exhaustion.
7.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_resource_exhausted</Condition><Action>move_to_resource</Action></Sequence><Selector><Sequence><Condition>is_resource_available</Condition><Selector><Sequence><Condition>is_gathered_objects_sorted</Condition><Action>sort_objects</Action></Sequence><Action>gather_object</Action></Selector></Sequence></Selector><Sequence><Condition>is_resource_exhausted</Condition><Selector><Sequence><Condition>is_formation_active</Condition><Action>reform_formation</Action></Sequence><Action>follow_path</Action></Selector></Sequence></Selector></BehaviorTree>
###
4.// INSTRUCTIONS: Use only the following behaviors {'move_forward': 'Action: Move one step forward while avoiding obstacles. Always returns True.', 'turn_left': 'Action: Turn the robot 90 degrees to the left. Always returns True.', 'turn_right': 'Action: Turn the robot 90 degrees to the right. Always returns True.', 'detect_food': 'Condition: Check if food source is detected. Returns True if food is detected within range, False otherwise.', 'is_obstacle_ahead': 'Condition: Check if there is an obstacle blocking the path ahead. Returns True if an obstacle is detected, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Locate and gather food while avoiding obstacles.'
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>detect_food</Condition><Action>gather_food</Action></Sequence><Sequence><Condition>is_obstacle_ahead</Condition><Selector><Sequence><Action>turn_right</Action><Action>move_forward</Action></Sequence><Sequence><Action>turn_left</Action><Action>move_forward</Action></Sequence></Selector></Sequence></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'move_to_target': 'Action: Move towards the designated target. Returns True when target is reached, False otherwise.', 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'is_target_reached': 'Condition: Check if the target has been reached. Returns True if target is within range, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Guide a specific robot to a given target while avoiding any obstacles.'
5.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_target_reached</Condition><Action>task_completed</Action></Sequence><Action>move_to_target</Action><Action>avoid_obstacle</Action></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'move_forward': 'Action: Move one step forward while maintaining distance from other robots. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'is_neighbor_detected': 'Condition: Check if a neighboring robot is within a certain distance. Returns True if a neighbor is detected within the specified range, False otherwise.', 'is_fully_aligned': 'Condition: Check if the current robot is fully aligned with other neighboring robots. Returns True if the robot is properly aligned and in sync with other robots, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Maintain proper distance and alignment with neighboring robots, while changing color to indicate synchronization.'
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_fully_aligned</Condition><Action>agent_movement_freeze</Action></Sequence><Sequence><Condition>is_neighbor_detected</Condition><Selector><Sequence><Condition>is_current_color_green</Condition><Action>change_color_to_white</Action></Sequence><Sequence><Condition>is_current_color_white</Condition><Action>change_color_to_green</Action></Sequence></Selector></Sequence><Selector><Sequence><Condition>is_neighbor_detected</Condition><Action>move_forward</Action></Sequence><Action>wander</Action></Selector></Selector></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'move_to_target': 'Action: Move towards the designated target. Returns True when target is reached, False otherwise.', 'detect_hazard': 'Condition: Check for potential hazards in the environment. Returns True if any hazards are detected, False otherwise.', 'detect_obstacle': 'Condition: Check for obstacles on the path. Returns True if an obstacle is detected, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: generate behavior tree to 'Navigate to a target while checking for potential hazards and avoiding obstacles.'
7.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>detect_hazard</Condition><Selector><Sequence><Condition>detect_obstacle</Condition><Action>move_to_target</Action></Sequence><Selector><Sequence><Action>wander</Action></Sequence><Sequence><Condition>is_obstacle_ahead</Condition><Action>avoid_obstacle</Action><Action>move_to_target</Action></Sequence></Selector></Sequence></Selector></Sequence></BehaviorTree><BehaviorTree></BehaviorTree>

###
3.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.', 'play_sound': 'Action: Play a sound to attract the target. Always returns True.', 'is_sound_playing': 'Condition: Check if a sound is currently being played. Returns True if a sound is playing, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3.// USER COMMAND: generate behavior tree to 'Attract the target by playing a sound until it is within 5 units and then continue moving towards it' Output only the XML behavior tree without extra text.
3.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_sound_playing</Condition><Action>play_sound</Action></Sequence><Sequence><Condition>is_target_detected</Condition><Condition>is_target_reached</Condition><Action>continue_movement_agent</Action></Sequence><Sequence><Condition>is_obstacle_detected</Condition><Action>avoid_obstacle</Action><Action>play_sound</Action></Sequence><Sequence><Condition>is_path_clear</Condition><Action>move_forward</Action><Action>play_sound</Action></Sequence></Selector></BehaviorTree>

###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.', 'detect_boundary': 'Condition: Check if the agent has reached the boundaries of the environment. Returns True if boundaries are reached, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'explore the environment while avoiding obstacles and staying within the boundaries' Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>detect_boundary</Condition><Action>wander</Action></Sequence><Sequence><Condition>is_obstacle_detected</Condition><Action>avoid_obstacle</Action><Action>explore_around</Action></Sequence><Sequence><Condition>is_path_clear</Condition><Action>move_forward</Action><Action>explore_around</Action></Sequence></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.', 'move_backward': 'Action: Move the robot one step backward in the current direction. Always returns True.'}, to construct behavior tree in XML format to the following command
###
3.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_target_detected': 'Condition: Check if target is within 5 units. Returns True if the target is within 5 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 3 units. Returns True if the target is within 3 units of distance, False otherwise.', 'move_to_target': "Action: Move towards the target at a set speed. Always returns True.", 'pick_up_object': 'Action: Pick up the object at agent's current location. Always returns True.', 'place_object': 'Action: Place the held object at the target location. Always returns True.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.'} to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3.// USER COMMAND: generate behavior tree to 'Pick up object, move towards target, and place object at target.' Output only the XML behavior tree without extra text.
3.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Action>pick_up_object</Action> <Sequence> <Condition>is_target_detected</Condition> <Action>move_to_target</Action> </Sequence> <Action>place_object</Action> <Action>task_completed</Action> </Sequence> <Action>agent_movement_freeze</Action> </Selector> </BehaviorTree>

###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'change_color_to_blue': "Action: Change agent's color to blue. Always returns True.", 'change_color_to_yellow': "Action: Change agent's color to yellow. Always returns True.", 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_target_detected': 'Condition: Check if target is within 10 units. Returns True if the target is within 10 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 5 units. Returns True if the target is within 5 units of distance, False otherwise.', 'move_to_target': "Action: Move towards the target at a set speed. Always returns True.", 'random_color_change': 'Action: Change agent's color randomly from blue to yellow and vice versa. Always returns True.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.'} to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Move towards target, randomly change colors between blue and yellow, and freeze movement when target is reached.' Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>is_target_detected</Condition> <Action>move_to_target</Action> </Sequence> <Action>random_color_change</Action> <Sequence> <Condition>is_target_reached</Condition> <Action>task_completed</Action> </Sequence> </Selector> <Action>agent_movement_freeze</Action> </Sequence> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_red': "Action: Change agent's color to red. Always returns True.", 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'move_to_target': "Action: Move towards the target at a set speed. Always returns True.", 'stop_movement': 'Action: Stop the agent's movement. Always returns True.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'turn_around': 'Action: Turn the agent around 180 degrees. Always returns True.'} to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Move towards target, avoid obstacles, turn around 180 degrees, and stop movement when agent is in the nest.' Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Action>move_to_target</Action> <Action>avoid_obstacle</Action> <Sequence> <Condition>is_agent_in_nest</Condition> <Action>turn_around</Action> </Sequence> <Action>stop_movement</Action> <Action>task_completed</Action> </Sequence> <Action>agent_movement_freeze</Action> </Selector> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'change_color_to_cyan': "Action: Change agent's color to cyan. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_target_detected': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'random_movement': 'Action: Move randomly within the environment. Always returns True.', 'return_to_nest': 'Action: Move back to the nest. Always returns True.', 'start_movement': 'Action: Start agent's movement. Always returns True.', 'stop_movement': 'Action: Stop the agent's movement. Always returns True.'} to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Randomly move within the environment, stop movement when target is detected, start movement again when back in the nest, and change color to cyan.' Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Action>random_movement</Action> <Sequence> <Condition>is_target_detected</Condition> <Action>stop 
###
3.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task) 3.// USER COMMAND: generate behavior tree to 'Move towards target while avoiding obstacles and reaching the target.'Output only the XML behavior tree without extra text.
3.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>is_target_detected</Condition> <Action>continue_movement_agent</Action> </Sequence> <Sequence> <Condition>is_obstacle_detected</Condition> <Action>avoid_obstacle</Action> </Sequence> </Selector> </BehaviorTree>

###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task) 4.// USER COMMAND: generate behavior tree to 'Move towards the target while avoiding obstacles and completing other tasks on the way.'Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>is_target_detected</Condition> <Action>continue_movement_agent</Action> </Sequence> <Sequence> <Condition>is_obstacle_detected</Condition> <Action>avoid_obstacle</Action> </Sequence> <Action>form_line</Action> </Selector> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task) 5.// USER COMMAND: generate behavior tree to 'Avoid obstacles and reach the target using a combination of movements and target detection.'Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>is_target_detected</Condition> <Action>continue_movement_agent</Action> </Sequence> <Sequence> <Condition>is_obstacle_detected</Condition> <Action>avoid_obstacle</Action> </Sequence> </Selector> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color
###
3.// INSTRUCTIONS: Use only the following behaviors {'wander': 'Action: Create a random path for the robot to follow. Always returns True.', 'navigate_to_target': 'Action: Follow the shortest path to reach the designated target. Always returns True.', 'is_path_clear': 'Condition: Check if the path ahead is clear. Returns True if no obstacles are detected, False otherwise.', 'is_target_reached': 'Condition: Check if the target has been reached. Returns True if the target is within a certain distance, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3.// USER COMMAND: Generate a behavior tree for a single robot to navigate through a maze and reach the end point.
3.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_target_reached</Condition><Action>wander</Action></Sequence><Sequence><Condition>is_path_clear</Condition><Action>navigate_to_target</Action></Sequence><Action>navigate_to_target</Action><Action>wander</Action></Selector></BehaviorTree>

###
4.// INSTRUCTIONS: Use only the following behaviors {'detect_incoming_threat': 'Action: Use sensors to detect any potential threats approaching the swarm. Always returns True.', 'activate_defensive_shield': 'Action: Activate a defensive shield to protect the swarm against any incoming threats. Always returns True.', 'collect_data': 'Action: Collect data and analyze potential threats to the swarm. Always returns True.', 'evade': 'Action: Move in a zigzag pattern to avoid a potential threat. Always returns True.', 'is_threat_detected': 'Condition: Check if a potential threat has been detected by the sensors. Returns True if a threat is detected, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Generate a behavior tree for a swarm of robots to detect and defend against incoming threats while collecting data.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_threat_detected</Condition><Action>activate_defensive_shield</Action></Sequence><Sequence><Condition>is_threat_detected</Condition><Action>collect_data</Action></Sequence><Selector><Sequence><Condition>is_threat_detected</Condition><Action>evade</Action></Sequence><Action>wander</Action></Selector></Selector><Action>detect_incoming_threat</Action></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'detect_gathering_area': 'Action: Use sensors to detect a potential gathering area for the swarm. Always returns True.', 'form_circle': 'Action: Form a circle formation with the swarm in the center of the detected gathering area. Always returns True.', 'explore_area': 'Action: Explore and map the detected gathering area. Always returns True.', 'move_to_next_gathering_area': 'Action: Move to the next potential gathering area. Always returns True.', 'is_area_mapped': 'Condition: Check if the current area has been fully mapped and explored. Returns True if the area is completely mapped, False otherwise.', 'is_gathering_area_detected': 'Condition: Check if a potential gathering area has been detected by the sensors. Returns True if a gathering area is detected, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Generate a behavior tree for a swarm of robots to search and map multiple gathering areas in a large environment.
5.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_gathering_area_detected</Condition><Action>explore_area</Action></Sequence><Selector><Sequence><Condition>is_area_mapped</Condition></Sequence><Sequence><Condition>is_gathering_area_detected</Condition><Action>form_circle</Action></Sequence><Action>move_to_next_gathering_area</Action></Selector><Action>detect_gathering_area</Action></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'recognize_signs': "Action: Use sensors to recognize and interpret sign language gestures. Always returns True.", 'process_gesture': "Action: Process the recognized sign gesture and convert it into a command. Always returns True.", 'send_command': 'Action: Send the processed command to the rest of the swarm. Always returns True.', 'is_sign_detected': 'Condition: Check if a sign language gesture has been detected by the sensors. Returns True if a gesture is detected, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Create a behavior tree for a swarm of robots to understand and follow sign language commands.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_sign_detected</Condition><Action>process_gesture</Action><Action>send_command</Action></Sequence><Action>recognize_signs</Action><Action>send_command</Action><Action>wander</Action></Selector></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'search_and_rescue': 'Action: Use sensors to search for any signs of life in a disaster-stricken area. Always returns True.', 'relocate_debris': 'Action: Remove debris and clear a path for potential survivors. Always returns True.', 'evacuate': 'Action: Move potential survivors to safety. Always returns True.', 'is_survivor_detected': 'Condition: Check if any potential survivors have been detected by the sensors. Returns True if survivors are detected, False otherwise.', 'are_all_survivors_rescued': 'Condition: Check if all potential survivors have been rescued. Returns True if all survivors have been rescued, False otherwise.', 'is_debris_cleared': 'Condition: Check if all debris has been cleared and a path is safe for evacuation. Returns True if debris is cleared, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: Generate a behavior tree for a swarm of robots to search and rescue survivors in a disaster-stricken area.
7.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_survivor_detected</Condition><Action>evacuate</Action><Action>search_and_rescue</Action><Action>relocate_debris</Action></Sequence><Selector><Sequence><Condition>are_all_survivors_rescued</Condition><Action>evacuate</Action></Sequence><Sequence><Condition>is_debris_cleared</Condition><Action>evacuate</Action></Sequence><Action>wander</Action></Selector></Selector></BehaviorTree>3.// INSTRUCTIONS: Use only the following behaviors {'detect_goal': 'Action: Detect the location of the goal. Always returns True.', 'move_towards_goal': 'Action: Move towards the goal until within 10 units. Always returns True.', 'stop': 'Action: Stop robot movement. Always returns True.', 'check_formation': 'Condition: Check if all robots are in formation. Returns True if all robots are in formation, False otherwise.', 'are_goals_reached': 'Condition: Check if all goals have been reached. Returns True if all goals have been reached, False otherwise.', 'is_obstacle_ahead': 'Condition: Check for obstacles in front. Returns True if an obstacle is detected, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3.// USER COMMAND: Construct a behavior tree for a swarm of robots to navigate through a maze towards multiple goals, while avoiding obstacles and staying in formation.
3.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>check_formation</Condition><Action>detect_goal</Action><Selector><Sequence><Condition>is_obstacle_ahead</Condition><Action>reform_formation</Action></Sequence><Action>move_towards_goal</Action></Selector></Sequence><Sequence><Condition>are_goals_reached</Condition><Action>stop</Action></Sequence></Selector></BehaviorTree>
4.// INSTRUCTIONS: Use only the following behaviors {'detect_enemy': 'Action: Detect nearby enemy robots and their location. Always returns True.', 'defend': 'Action: Move towards the enemy and engage in defense mode. Always returns True.', 'retreat': 'Action: Move towards the home base and disengage from any enemy engagement. Always returns True.', 'is_enemy_in_range': 'Condition: Check if enemy robots are within 15 units. Returns True if enemy robots are within 15 units of distance, False otherwise.', 'is_robot_injured': 'Condition: Check if the robot is injured and requires retreat. Returns True if the robot is injured, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Create a behavior tree for a swarm of robots to defend their territory against enemy robots, while also maintaining their own safety and wellbeing.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_robot_injured</Condition><Action>retreat</Action></Sequence><Sequence><Condition>is_enemy_in_range</Condition><Action>detect_enemy</Action><Selector><Sequence><Condition>is_enemy_in_range</Condition><Action>defend</Action></Sequence><Action>retreat</Action></Selector></Sequence></Selector></BehaviorTree>
5.// INSTRUCTIONS: Use only the following behaviors {'avoid_obstacle': 'Action: Move in the opposite direction to avoid the obstacle. Always returns True.', 'find_food': 'Action: Search the environment for food. Always returns True.', 'feed': 'Action: Move towards food source and feed on it for energy. Always returns True.', 'is_thirsty': 'Condition: Check if the robot's energy levels are low and it needs to find food. Returns True if energy levels are low, False otherwise.', 'is_tired': 'Condition: Check if the robot has been active for too long and needs to rest. Returns True if the robot needs rest, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Build a behavior tree for a swarm of robots to forage for food and rest when necessary to maintain their energy levels.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_thirsty</Condition><Action>find_food</Action><Selector><Sequence><Condition>is_obstacle_ahead</Condition><Action>avoid_obstacle</Action></Sequence><Action>move_towards_food</Action></Selector></Sequence><Sequence><Condition>is_tired</Condition><Action>rest</Action></Sequence></Selector></BehaviorTree>
6.// INSTRUCTIONS: Use only the following behaviors {'detect_danger': 'Action: Detect any potential danger or threats in the surrounding area. Always returns True.', 'flee': 'Action: Move away from the detected danger at full speed. Always returns True.', 'explore': 'Action: Move towards unexplored areas within the environment. Always returns True.', 'is_danger_present': 'Condition: Check if any potential danger has been detected. Returns True if danger is detected, False otherwise.', 'is_threshold_reached': 'Condition: Check if the robot has reached a certain distance within the environment. Returns True if the robot has reached the distance, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Create a behavior tree for a swarm of robots to explore their environment while being aware of potential danger and avoiding it.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_danger_present</Condition><Action>detect_danger</Action><Selector><Sequence><Condition>is_danger_present</Condition><Action>flee</Action></Sequence><Action>explore</Action></Selector></Sequence><Sequence><Condition>is_threshold_reached</Condition><Action>stop</Action></Sequence></Selector></BehaviorTree>
7.// INSTRUCTIONS: Use only the following behaviors {'detect_group': 'Action: Detect nearby robots from the same swarm and their relative positions. Always returns True.', 'coordinate_movement': 'Action: Move towards a specific location in coordination with other robots. Always returns True.', 'gather_resources': 'Action: Collaboratively gather resources from the environment. Always returns True.', 'is_resource_present': 'Condition: Check if resources are located within a certain range. Returns True if resources are within range, False otherwise.', 'is_robot_lost': 'Condition: Check if a robot has strayed too far away from the group. Returns True if the robot is not within a certain distance from the group, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: Design a behavior tree for a swarm of robots to work together to gather resources and maintain their group cohesion.
7.// OUTPUT:
<BehaviorTree><Sequence><Sequence><Condition>is_resource_present</Condition><Action>detect_resources</Action><Selector><Sequence><Condition>is_resource_present</Condition><Action>gather_resources</Action></Sequence><Action>coordinate_movement</Action></Selector></Sequence><Sequence><Condition>is_robot_lost</Condition><Action>call_back</Action></Sequence></Sequence></BehaviorTree> 
###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'carry_object': 'Action: Pick up and carry object. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'hunt_for_food': 'Action: Search for and collect food. Always returns True.', 'is_food_collected': 'Condition: Check if food is currently being carried. Returns True if food is being carried, False otherwise.', 'is_food_remaining': 'Condition: Check for remaining food in the environment. Returns True if food is still available, False otherwise.', 'is_object_detected': 'Condition: Check for food or objects within range. Returns True if an object is detected, False otherwise.', 'recharge_energy': 'Action: Return to charging station and recharge energy. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Hunt for and collect food, recharge energy, and change color to green.'Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>is_food_remaining</Condition> <Action>hunt_for_food</Action> <Action>carry_object</Action> <Action>change_color_to_green</Action> </Sequence> <Sequence> <Condition>is_food_collected</Condition> <Action>recharge_energy</Action> <Action>change_color_to_green</Action> </Sequence> </Selector> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_collision': 'Action: Avoid collision with other agents. Always returns True.', 'change_color_to_blue': "Action: Change agent's color to blue. Always returns True.", 'change_color_to_red': "Action: Change agent's color to red. Always returns True.", 'follow_lead_agent': 'Action: Follow the designated lead agent. Always returns True.', 'is_leader': 'Condition: Check if the agent is designated as the leader. Returns True if the agent is the leader, False otherwise.', 'is_collision_detected': 'Condition: Check if a collision with another agent is imminent. Returns True if a collision is predicted, False otherwise.', 'is_lead_agent_reached': 'Condition: Check if the lead agent is within 10 units. Returns True if the lead agent is within 10 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 10 units. Returns True if the target is within 10 units of distance, False otherwise.', 'set_lead_agent': 'Action: Designate the current agent as the lead agent. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Change color to blue, follow designated lead agent, and avoid collision.'Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>is_leader</Condition> <Action>change_color_to_blue</Action> </Selector> <Sequence> <Condition>is_lead_agent_reached</Condition> <Action>avoid_collision</Action> <Action>agent_movement_freeze</Action> </Sequence> <Sequence> <Condition>is_collision_detected</Condition> <Action>change_color_to_red</Action> <Action>follow_lead_agent</Action> </Sequence> </Selector> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'collect_resource': 'Action: Pick up and collect resource. Always returns True.', 'deposit_resource': 'Action: Deposit collected resources. Always returns True.', 'execute_strategy': 'Action: Execute the designated strategy. Always returns True.', 'move_to_base': 'Action: Move to designated base. Always returns True.', 'is_base_reached': 'Condition: Check if the designated base has been reached. Returns True if the base is reached, False otherwise.', 'is_resource_available': 'Condition: Check for availability of resources. Returns True if resources are available, False otherwise.', 'is_resource_depleted': 'Condition: Check if the resources in the environment have been depleted. Returns True if all resources are used up, False otherwise.', 'is_resource_full': 'Condition: Check if the resource storage is full. Returns True if the storage is full, False otherwise.', 'is_strategy_executed': 'Condition: Check if the designated strategy has been executed. Returns True if the strategy is complete, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Collect resources until storage is full, then deposit and execute designated strategy.'Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree> <Selector> <Sequence><Condition>is_resource_depleted</Condition> <Action>execute_strategy</Action> </Sequence> <Sequence> <Condition>is_resource_available</Condition> <Action>collect_resource</Action> </Sequence> <Sequence> <Condition>is_resource_full</Condition> <Action>deposit_resource</Action> </Sequence> <Sequence> <Condition>is_base_reached</Condition> <Action>move_to_base</Action> </Sequence> </Selector> </BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'approach_object': 'Action: Move towards the target object. Returns True when the target object is within 10 units.', 'charge_battery': 'Action: Charge the agent's battery. Always returns True.', 'change_direction': 'Action: Change agent's direction to a random angle. Always returns True.', 'collect_resource': 'Action: Collect the resource if within range. Returns True when the resource is picked up.', 'deposit_resource': 'Action: Deposit collected resources. Always returns True.', 'idle': 'Action: Do nothing and wait. Always returns True.', 'is_battery_low': 'Condition: Check if battery is low. Returns True when battery level is less than 20 percent.', 'is_recharging': 'Condition: Check if currently recharging. Returns True when recharging, False otherwise.', 'is_resource_depleted': 'Condition: Check if the environment has run out of resources. Returns True when all resources are used up, False otherwise.', 'is_resource_replenished': 'Condition: Check if the environment has been replenished with new resources. Returns True when resources have been added, False otherwise.', 'pick_random_resource': 'Action: Pick a random resource object within range. Returns True when an object is selected.', 'start_idle    
###
3.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3.// USER COMMAND: generate behavior tree to 'form a line and move towards the target if no obstacles are detected'. Output only the XML behavior tree without extra text.
3.// OUTPUT:
<BehaviorTree><Sequence><Action>form_line</Action><Condition>is_path_clear</Condition><Action>move_towards_target</Action></Sequence><Action>wander</Action></BehaviorTree>

###
4.// INSTRUCTIONS: Use only the following behaviors {'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'check if the agent is in the nest'. Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree><Condition>is_agent_in_nest</Condition></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", is_agent_in_nest: 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'if agent is in the nest, freeze agent movement'. Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree><Condition>is_agent_in_nest</Condition><Action>agent_movement_freeze</Action></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', is_agent_in_nest: 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'complete task if agent is in the nest'. Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_agent_in_nest</Condition><Action>task_completed</Action></Sequence><Action>wander</Action></Selector></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: generate behavior tree to 'if target is detected, change color to green. if target is reached, freeze agent'. Output only the XML behavior tree without extra text.
7.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_target_detected</Condition><Action>change_color_to_green</Action></Sequence><Sequence><Condition>is_target_reached</Condition><Action>agent_movement_freeze</Action></Sequence></Selector></BehaviorTree>
###
3.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_blue': "Action: Change agent's color to blue. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'disperse': 'Action: Move away from other agents. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_same_color': 'Condition: Check if all agents have the same color. Returns True if all agents have the same color, False otherwise.', 'is_within_cohesion_distance': 'Condition: Check if agent is within cohesion distance from other agents. Returns True if within cohesion distance, False otherwise.', 'reunite': 'Action: Move towards other agents to reunite. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3.// USER COMMAND: generate behavior tree to 'Disperse from other agents and change color to blue, then reunite with other agents.'Output only the XML behavior tree without extra text.
3.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>disperse</Action><Action>change_color_to_blue</Action></Sequence><Sequence><Condition>is_within_cohesion_distance</Condition><Action>reunite</Action></Sequence></Selector></BehaviorTree>

###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'change_color_to_red': "Action: Change agent's color to red. Always returns True.", 'change_color_to_blue': "Action: Change agent's color to blue. Always returns True.", 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'move_to_nest': 'Action: Move towards the nest. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_same_color': 'Condition: Check if all agents have the same color. Returns True if all agents have the same color, False otherwise.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'move_to_target': 'Action: Move towards the target. Always returns True.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Move to the target, change color to red, and then move to the nest to signal task completion.'Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>move_to_target</Action><Action>change_color_to_red</Action><Action>move_to_nest</Action><Action>task_completed</Action></Sequence><Sequence><Condition>is_target_detected</Condition><Action>task_completed</Action></Sequence></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_purple': "Action: Change agent's color to purple. Always returns True.", 'get_back_to_herd': 'Action: Move towards other agents to reunite. Always returns True.', 'is_agent_in_group': 'Condition: Check if the agent is in a group with other agents. Returns True if the agent is in a group, False otherwise.', 'is_color_changed': 'Condition: Check if the agent's color has changed to purple. Returns True if the agent's color is purple, False otherwise.', 'is_target_detected': 'Condition: Check if target is within 30 units. Returns True if the target is within 30 units of distance, False otherwise.', 'move_in_random_direction': 'Action: Move in a random direction. Always returns True.', 'surround_target': 'Action: Suround the target to prevent it from escaping. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Surround the target, change color to purple, and then reunite with other agents.'Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>is_target_detected</Condition><Action>surround_target</Action></Sequence><Sequence><Condition>is_color_changed</Condition><Action>get_back_to_herd</Action></Sequence></Selector><Action>change_color_to_purple</Action></Sequence></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'collect_food': "Action: Collect food within range. Always returns True.", 'drop_food': 'Action: Drop collected food. Always returns True.', 'drop_mating_pheromone': 'Action: Release a mating pheromone in the environment. Always returns True.', 'is_food_nearby': 'Condition: Check if there is food within range. Returns True if there is food nearby, False otherwise.', 'is_nest_reached': 'Condition: Check if agent has reached the nest. Returns True if agent is in the nest, False otherwise.', 'is_majority_food': 'Condition: Check if the majority of agents are carrying food. Returns True if majority of agents are carrying food, False if majority are not carrying food.', 'is_mating_pheromone_released': 'Condition: Check if mating pheromone is released. Returns True if mating pheromone is released, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Collect food, drop food at the nest, and release mating pheromone when majority of agents have food.'Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence>< 
###
4.// INSTRUCTIONS: Use only the following behaviors {'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_red': "Action: Change agent's color to red. Always returns True.", 'change_color_to_blue': "Action: Change agent's color to blue. Always returns True.", 'find_optimal_path': 'Action: Find the optimul path to the designated target location using a mix of behaviors. Always returns True.', 'follow_leader': 'Action: Follow the leading agent in the swarm. Always returns True.', 'is_leader': 'Condition: Check if the agent is the leader of the swarm. Returns True if the agent is the leader, False otherwise.', 'is_leader_detected': 'Condition: Check if a leader agent is detected within 10 units. Returns True if a leader is detected, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_following': 'Condition: Check if the agent is currently following the leader. Returns True if the agent is following, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.', 'turn_left': 'Action: Turn the robot 90 degrees to the left. Always returns True.', 'turn_right': 'Action: Turn the robot 90 degrees to the right. Always returns True.', 'pick_up_target': 'Action: Pick up a designated target object. Always returns True.', 'drop_down_target': 'Action: Drop down a designated target object. Always returns True.', 'is_target_picked': 'Condition: Check if the designated target object has been picked up. Returns True if the target is picked up, False otherwise.', 'is_target_dropped': 'Condition: Check if the designated target object has been dropped. Returns True if the target is dropped, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Follow the leader robot, pick up objects along the way and drop them off at the designated location, then change color to red'. Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_leader_detected</Condition><Sequence><Condition>is_leader</Condition><Action>wander</Action><Action>follow_leader</Action></Sequence></Sequence><Sequence><Condition>is_target_picked</Condition><Action>drop_down_target</Action></Sequence><Sequence><Condition>is_target_dropped</Condition><Action>pick_up_target</Action><Action>drop_down_target</Action></Sequence><Selector><Sequence><Condition>is_following</Condition><Action>find_optimal_path</Action></Sequence><Sequence><Condition>is_obstacle_detected</Condition><Action>avoid_obstacle</Action><Action>wander</Action></Sequence></Selector></Selector></BehaviorTree>
###
5.// INSTRUCTIONS: Use only the following behaviors {'move_forward': 'Action: Move one step forward while maintaining formation. Always returns True.', 'shift_left': 'Action: Shift the entire formation one step to the left. Always returns True.', 'shift_right': 'Action: Shift the entire formation one step to the right. Always returns True.', 'form_line': 'Action: Form a horizontal line at the bottom of the formation. Always returns True', 'is_target_detected': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 10 units. Returns True if the target is within 10 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'release_object': 'Action: Release and put down the transportable object. Always returns True.', 'is_formation_broken': 'Condition: Check if the formation has become misaligned or broken. Returns True if the formation is broken, False otherwise.', 'is_object_detected': 'Condition: Check if the transportable object is within reach. Returns True if the object is within reach, False otherwise.','wait_for_leader': 'Action: Wait for the leader to give command. Always returns True.', 'follow_leader': 'Action: Follow the leading agent in the swarm. Always returns True.', 'is_leader_detected': 'Condition: Check if a leader agent is detected within 10 units. Returns True if a leader is detected, False otherwise.'} to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Follow the leader robot, wait for their command, form a line and navigate to the designated target location, then release the object'. Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_leader_detected</Condition><Sequence><Condition>is_object_detected</Condition><Action>follow_leader</Action><Action>wait_for_leader</Action></Sequence></Sequence><Sequence><Condition>is_target_detected</Condition><Sequence><Condition>is_target_reached</Condition><Action>move_forward</Action></Sequence><Sequence><Condition>is_target_reached</Condition><Action>shift_right</Action></Sequence></Sequence><Action>release_object</Action><Action>wander</Action></BehaviorTree>
 
###
6.// INSTRUCTIONS: Use only the following behaviors {'move_forward': 'Action: Move one step forward while maintaining formation. Always returns True.', 'move_backward': 'Action: Move one step backward while maintaining formation. Always returns True.', 'rotate_left': 'Action: Rotate the formation 90 degrees to the left. Always returns True.', 'rotate_right': 'Action: Rotate the formation 90 degrees to the right. Always returns True.', 'move_to_target': 'Action: Move the formation to the designated target location. Always returns True.', 'move_around_obstacle': 'Action: Move the formation around an obstacle. Always returns True.', 'is_target_detected': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 10 units. Returns True if the target is within 10 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'is_formation_stuck': 'Condition: Check if the formation is stuck in one location. Returns True if formation is not moving, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Move the formation to the designated target location, avoiding obstacles and rotating as needed, until the target is reached'. Output only the XML behavior tree
###
4.// INSTRUCTIONS: Use only the following behaviors {'reset_position': 'Action: Reset the agent to its starting position. Always returns True.', 'move_forward': 'Action: Move the agent one step forward. Always returns True.', 'turn_left': 'Action: Turn the agent 90 degrees to the left. Always returns True.', 'turn_right': 'Action: Turn the agent 90 degrees to the right. Always returns True.', 'send_message': 'Action: Send a message to other agents in the swarm. Always returns True.', 'check_message': 'Condition: Check for incoming messages from other agents. Returns True if there are new messages, False otherwise.', 'is_destination_reached': 'Condition: Check if the agent has reached its designated destination. Returns True if the destination is reached, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Coordinate with other agents to reach a common destination while avoiding obstacles.'Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_destination_reached</Condition><Action>reset_position</Action><Action>send_message</Action><Action>move_forward</Action></Sequence><Sequence><Condition>check_message</Condition><Action>turn_left</Action></Sequence><Sequence><Condition>check_message</Condition><Action>turn_right</Action></Sequence></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'return_to_nest': 'Action: Return to the nest for recharging. Always returns True.', 'explore_area': 'Action: Explore the surrounding area. Always returns True.', 'collect_resource': 'Action: Collect a nearby resource. Returns True if successfully collected, False otherwise.', 'deposit_resource': 'Action: Deposit the collected resource at the nest. Returns True if successfully deposited, False otherwise.', 'is_nest_full': 'Condition: Check if the nest is full and cannot accept any more resources. Returns True if the nest is full, False otherwise.', 'is_resource_detected': 'Condition: Check for nearby resources. Returns True if a resource is detected, False otherwise.', 'is_resource_collected': 'Condition: Check if a resource has been successfully collected. Returns True if a resource has been collected, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Collect resources and deposit them at the nest while monitoring nest capacity.'Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_nest_full</Condition><Action>return_to_nest</Action></Sequence><Sequence><Condition>is_resource_collected</Condition><Action>deposit_resource</Action></Sequence><Sequence><Condition>is_resource_detected</Condition><Action>explore_area</Action><Action>collect_resource</Action></Sequence></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'search_target': 'Action: Search the environment for the designated target. Always returns True.', 'move_to_destination': 'Action: Move towards the designated destination. Always returns True.', 'pick_up_target': 'Action: Pick up the target object. Returns True if successfully picked up, False otherwise.', 'drop_target': 'Action: Drop the target object. Returns True if successfully dropped, False otherwise.', 'is_target_visible': 'Condition: Check if the designated target is in view. Returns True if the target is visible, False otherwise.', 'is_target_picked': 'Condition: Check if the target object has been successfully picked up. Returns True if the object is picked up, False otherwise.', 'is_target_released': 'Condition: Check if the target object has been successfully dropped. Returns True if the object is dropped, False otherwise.', 'is_blocked': 'Condition: Check if the agent is blocked and unable to move. Returns True if the agent is blocked, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Search for and retrieve a designated target object while avoiding obstacles.'Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_target_visible</Condition><Action>move_to_destination</Action></Sequence><Sequence><Condition>is_target_picked</Condition><Action>drop_target</Action><Action>pick_up_target</Action></Sequence><Sequence><Condition>is_blocked</Condition><Action>turn_left</Action></Sequence><Action>search_target</Action></Selector></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'detect_obstacle': 'Action: Use sensors to detect and avoid obstacles. Always returns True.', 'identify_target': 'Action: Use sensors to identify the designated target. Returns True if successfully identified, False otherwise.', 'move_to_target': 'Action: Move towards the designated target. Always returns True.', 'is_target_reached': 'Condition: Check if the agent has reached the designated target. Returns True if the target is reached, False otherwise.', 'is_target_lost': 'Condition: Check if the agent has lost sight of the target. Returns True if the target is lost, False otherwise.', 'is_obstacle_cleared': 'Condition: Check if the agent has successfully avoided the obstacle. Returns True if the obstacle is avoided, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: generate behavior tree to 'Find and reach the designated target while avoiding obstacles and staying within a specific area.'Output only the XML behavior tree without extra text.
7.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_target_reached</Condition><Action>detect_obstacle</Action><Action>move_to_target</Action></Sequence><Sequence><Condition>is_target_lost</Condition><Action>detect_obstacle</Action></Sequence><Sequence><Condition>is_obstacle_cleared</Condition><Action>move_to_target</Action></Sequence></Selector></BehaviorTree>
3.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3.// USER COMMAND: generate behavior tree to 'Avoid obstacles while moving towards the target, and signal task completion when target is reached.Output only the XML behavior tree without extra text.
3.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>is_obstacle_detected</Condition><Action>avoid_obstacle</Action><Action>continue_movement_agent</Action></Sequence><Condition>is_target_reached</Condition><Action>task_completed</Action></Selector></Sequence></BehaviorTree>

4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Search for the target while avoiding obstacles, and change color to green when target is detected.'Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_obstacle_detected</Condition><Action>avoid_obstacle</Action><Action>continue_movement_agent</Action></Sequence><Sequence><Condition>is_target_detected</Condition><Action>change_color_to_green</Action><Action>task_completed</Action></Sequence></Selector><Action>wander</Action></BehaviorTree>

5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Form a line at the center, then move towards target while avoiding obstacles and change color to white when target is reached.'Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree><Sequence><Action>form_line</Action></Sequence><Selector><Sequence><Condition>is_obstacle_detected</Condition><Action>avoid_obstacle</Action><Action>continue_movement_agent</Action></Sequence><Sequence><Condition>is_target_reached</Condition><Action>change_color_to_white</Action></Sequence></Selector><Selector><Condition>is_target_detected</Condition><Action>change_color_to_green</Action></Selector></BehaviorTree>

6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement 
###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_lines': 'Action: Form horizontal and vertical lines at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Form horizontal and vertical lines at the center, change color to green, then freeze movement.'Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Action>form_line</Action> <Action>change_color_to_green</Action> </Sequence> <Selector> <Sequence> <Condition>is_agent_in_nest</Condition> <Action>task_completed</Action> </Sequence> <Sequence> <Condition>is_line_formed</Condition> <Action>form_line</Action> </Sequence> </Selector> <Action>agent_movement_freeze</Action> </Selector> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'grab_item': 'Action: Grab an item from the environment. Returns True if an item is grabbed, False if no items are available.', 'make_noise': "Action: Make noise to attract other agents. Returns True if other agents are attracted, False otherwise.", 'move_forward': 'Action: Move forward 1 unit. Always returns True.', 'move_back': 'Action: Move backward 1 unit. Always returns True.', 'turn_left': 'Action: Turn left 90 degrees. Always returns True.', 'turn_right': 'Action: Turn right 90 degrees. Always returns True.', 'wait': 'Action: Stay in current position for 1 second. Always returns True.', 'is_item_nearby': 'Condition: Check if an item is within 1 unit. Returns True if an item is near, False otherwise.', 'is_target_reached': 'Condition: Check if target location is reached. Returns True if the target location is reached, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Move forward, grab an item, turn left, then make noise to attract other agents.'Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree> <Sequence> <Action>move_forward</Action> <Sequence> <Condition>is_item_nearby</Condition> <Action>grab_item</Action> </Sequence> <Selector> <Sequence> <Action>turn_left</Action> <Action>make_noise</Action> </Sequence> <Action>wander</Action> </Selector> </Sequence> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_blue': "Action: Change agent's color to blue. Always returns True.", 'change_color_to_red': "Action: Change agent's color to red. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'follow_leader': 'Action: Follow the designated leader agent. Returns True if following successfully, False otherwise.', 'is_leader_nearby': 'Condition: Check if the leader agent is within 10 units. Returns True if the leader agent is nearby, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_target_in_sight': 'Condition: Check if the target is within the agent's field of view. Returns True if the target is in sight, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Follow the leader, change color to blue, avoid obstacles, then change color to red.'Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>is_leader_nearby</Condition> <Action>change_color_to_blue</Action> </Sequence> <Sequence> <Condition>is_obstacle_detected</Condition> <Action>avoid_obstacle</Action> </Sequence> <Selector> <Action>follow_leader</Action> <Action>wander</Action> </Selector> <Action>change_color_to_red</Action> </Selector> </BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'change_speed_to_2': 'Action: Change agent's speed to 2. Always returns True.', 'change_speed_to_1': 'Action: Change agent's speed to 1. Always returns True.', 'change_speed_to_3': 'Action: Change agent's speed to 3. Always returns True.', 'move_forward': 'Action: Move forward 1 unit. Always returns True.', 'move_back': 'Action: Move backward 1 unit. Always returns True.', 'turn_left': 'Action: Turn left 90 degrees. Always returns True.', 'turn_right': 'Action: Turn right 90 degrees. Always returns True.', 'wait': 'Action: Stay in current position for 
###
3.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'attack_enemy': 'Action: Attack the enemy using available weapons. Returns True if the enemy is successfully attacked, False otherwise.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'gather_resources': 'Action: Gather resources from the environment. Returns True if resources are successfully gathered, False otherwise.', 'is_enemy_detected': 'Condition: Check for enemies nearby. Returns True if an enemy is detected, False otherwise.', 'is_agent_low_on_energy': 'Condition: Check if agent's energy is below 50 units. Returns True if energy is low, False otherwise.', 'is_resource_available': 'Condition: Check if resources are available in the environment. Returns True if resources are present, False otherwise.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3.// USER COMMAND: generate behavior tree to 'Gather resources, attack enemy, and return home'Output only the XML behavior tree without extra text.
3.// OUTPUT:
<BehaviorTree><Sequence><Action>gather_resources</Action><Selector><Sequence><Condition>is_enemy_detected</Condition><Action>attack_enemy</Action></Sequence><Action>wander</Action></Selector><Action>task_completed</Action></Sequence></BehaviorTree>

###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'move_to_target': 'Action: Move towards the specified target. Returns True if the target is reached, False otherwise.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'is_task_complete': 'Condition: Check if the specified task is complete. Returns True if the task is completed, False otherwise.', 'return_to_nest': 'Action: Return to the nest. Returns True if the nest is reached, False otherwise.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Move to target, complete task, and return to nest'Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree><Sequence><Action>move_to_target</Action><Condition>is_task_complete</Condition><Selector><Sequence><Condition>is_agent_in_nest</Condition><Action>change_color_to_white</Action></Sequence><Action>return_to_nest</Action></Selector></Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'detect_enemy': 'Action: Detect nearby enemies and send a signal. Returns True if enemies are detected, False otherwise.', 'group_movement': 'Action: Move together with other robots in the swarm. Returns True if successfully moving together, False otherwise.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_formation_completed': 'Condition: Check if the swarm robots are in formation. Returns True if formation is completed, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Detect enemies, move in formation, and complete task'Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>is_agent_in_nest</Condition><Action>change_color_to_white</Action></Sequence><Action>group_movement</Action></Selector><Action>detect_enemy</Action><Condition>is_formation_completed</Condition><Selector><Sequence><Condition>is_obstacle_detected</Condition><Action>avoid_obstacle</Action></Sequence><Action>task_completed</Action></Selector></Sequence></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'move_to_target': 'Action: Move towards the specified target. Returns True if the target is###
4.// INSTRUCTIONS: Use only the following behaviors {'move_forward': 'Action: Move one step forward. Always returns True.', 'turn_left': 'Action: Turn 90 degrees to the left. Always returns True.', 'turn_right': 'Action: Turn 90 degrees to the right. Always returns True.', 'backtrack': 'Action: Move backwards one step. Returns True if the current path is blocked, False otherwise.', 'is_obstacle_ahead': 'Condition: Check if there is an obstacle blocking the path ahead. Returns True if an obstacle is detected, False otherwise.', 'is_target_reached': 'Condition: Check if target has been reached. Returns True if the target has been reached, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Generate a behavior tree for a single agent to navigate a maze and reach the target at the end.
4.// OUTPUT:
<BehaviorTree><Sequence><Action>move_forward</Action></Sequence><Selector><Sequence><Condition>is_target_reached</Condition><Action>agent_success</Action></Sequence><Sequence><Condition>is_obstacle_ahead</Condition><Selector><Sequence><Action>turn_left</Action><Action>wander</Action></Sequence><Selector><Sequence><Action>turn_right</Action><Action>wander</Action></Sequence><Selector><Action>backtrack</Action></Selector></Sequence></Selector></Sequence></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'search_target': 'Action: Continuously search the environment for the target. Always returns True.', 'move_to_target': 'Action: Move towards the target. Always returns True.', 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'pick_up_object': 'Action: Pick up the target object when it is detected. Always returns True.', 'drop_object': 'Action: Drop the object once it has been successfully transported to a specified location. Always returns True.', 'is_target_detected': 'Condition: Check if the target object is within the agent's field of view. Returns True if the target is detected, False otherwise.', 'is_object_picked_up': 'Condition: Check if the target object has been successfully picked up. Returns True if the object is being carried, False otherwise.', 'is_object_dropped': 'Condition: Check if the object has been dropped at the specified location. Returns True if the object has been dropped, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Generate a behavior tree for a single agent to search, pick up, and deliver a target object to a specified location.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>search_target</Action><Action>move_to_target</Action></Sequence><Sequence><Condition>is_target_detected</Condition><Selector><Sequence><Action>pick_up_object</Action><Action>drop_object</Action></Sequence><Selector><Action>avoid_obstacle</Action></Selector></Sequence></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'move_forward': 'Action: Move one step forward while maintaining formation. Always returns True.', 'circle_up': 'Action: Form a circular shape by moving upwards. Always returns True.', 'circle_down': 'Action: Form a circular shape by moving downwards. Always returns True.', 'form_line': 'Action: Form a straight line by moving in one direction. Always returns True.', 'is_formation_broken': 'Condition: Check if the formation has become misaligned or broken. Returns True if the formation is broken, False otherwise.', 'is_in_formation': 'Condition: Check if the agent is currently in formation. Returns True if the agent is in formation, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Generate a behavior tree for a swarm of robots to perform synchronized movements to form various shapes.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_in_formation</Condition><Selector><Sequence><Condition>is_formation_broken</Condition><Selector><Sequence><Action>circle_up</Action></Sequence><Selector><Sequence><Action>circle_down</Action></Sequence><Selector><Action>form_line</Action></Selector></Sequence></Selector></Sequence><Selector><Sequence><Action>form_line</Action><Selector><Sequence><Condition>is_formation_broken</Condition><Selector><Sequence><Action>circle_up</Action></Sequence><Selector><Sequence><Action>circle_down</Action></Sequence><Selector><Action>form_line</Action></Selector></Sequence></Selector></Sequence></Selector></Sequence></Selector></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'cluster': 'Action: Move towards the center to create a tight cluster formation. Always returns True.', 'dispel': 'Action: Move away from the center to disperse from the cluster formation. Always returns True.', 'form_line': 'Action: Form a straight line by moving in one direction. Always returns True.', 'is_cluster_formed': 'Condition: Check if the cluster formation has been created. Returns True if the agents are tightly clustered, False otherwise.', 'is_line_formed': 'Condition: Check if a straight line formation has been created. Returns True if the agents are in a straight line, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: Generate a behavior tree for a swarm of robots to form either a tight cluster or a straight line depending on the situation.
7.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_cluster_formed</Condition><Action>dispel</Action></Sequence><Sequence><Condition>is_line_formed</Condition><Selector><Action>cluster</Action><Action>form_line</Action></Selector></Sequence></Selector></BehaviorTree> 
###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'wander': 'Action: Move randomly within the environment. Returns True if successful, False otherwise.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.'}. Use a random number generator to determine whether the agent should turn left or right during the "avoid_obstacle" behavior.
4.// USER COMMAND: generate behavior tree to 'Avoid obstacles and continue movement, randomly turning left or right to navigate'. Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>is_agent_in_nest</Condition> <Action>agent_movement_freeze</Action> </Sequence> <Sequence> <Condition>is_obstacle_detected</Condition> <Sequence> <Action>agent_movement_freeze</Action> <Selector> <Action>continue_movement_agent</Action> <Selector> <Action>avoid_obstacle</Action> <Selector> <Action>turn_left</Action> <Action>turn_right</Action> </Selector> </Selector> </Selector> </Sequence> <Action>wander</Action> </Sequence> </Selector> </BehaviorTree>
 
###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_circle': 'Action: Form a circular formation with other agents. Returns True if formation is complete, False otherwise.', 'is_agent_in_position': 'Condition: Check if the agent is in its designated position for the circular formation. Returns True if the agent is in position, False otherwise.'}, to construct behavior tree. Include a condition to check for other agents nearby and trigger the "form_circle" behavior only if other agents are present.
5.// USER COMMAND: generate behavior tree to 'Form a circular formation with other agents and freeze movement when formation is complete'. Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>is_agent_in_position</Condition> <Action>agent_movement_freeze</Action> </Sequence> <Selector> <Condition>is_agent_in_nest</Condition> <Action>agent_movement_freeze</Action> </Selector> <Sequence> <Condition>other_agents_nearby</Condition> <Action>form_circle</Action> <Action>agent_movement_freeze</Action> </Sequence> <Selector> <Sequence> <Condition>is_agent_in_nest</Condition> <Action>agent_movement_freeze</Action> <Action>task_completed</Action> </Sequence> <Action>continue_movement_agent</Action> </Selector> </Selector> </BehaviorTree>
 
###
6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.'}. Construct a behavior tree that triggers the "agent_movement_freeze" action when the agent is in the nest, and the "continue_movement_agent" action otherwise. Output the XML behavior tree without extra text.
6.// USER COMMAND: generate behavior tree to 'Move towards the nest and stop when inside the nest'. Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>is_agent_in_nest</Condition> <Action>agent_movement_freeze</Action> </Sequence> <Selector> <Action>continue_movement_agent</Action> <Sequence> <Condition>is_agent_in_nest</Condition> <Selector> <Action>continue_movement_agent</Action> <Action>task_completed</Action> </Selector> </Sequence> </Selector> </BehaviorTree>
 
###
7.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'task_virtual_flag': 'Action: Trigger task completion. Returns True if successful, False otherwise.', 'continue_movement_agent': "Action: Continue agent's movement. Returns True if successful, False otherwise.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'deploy_payload': 'Action: Deploy a payload to complete a task. Returns True if successful, False otherwise.'}. Use a nested sequence with conditionals to deploy a payload and signal task completion only when the agent is in the nest and the virtual task flag is triggered.
7.// USER COMMAND: generate behavior tree to 'Move towards the nest, deploy a payload and then trigger task completion'. Output only the XML behavior tree without extra text.
7.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Action>deploy_payload</Action> <Condition>task_virtual_flag</Condition> <Action>agent_movement_freeze</Action> </Sequence> <Selector> <Sequence> <Condition>is_agent_in_nest</Condition> <Action>agent_movement_freeze</Action> <Action>task_completed</Action> </Sequence> <Action>continue_movement_agent</Action> </Selector> </BehaviorTree>###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'change_speed_to_slow': "Action: Change agent's speed to slow. Always returns True.", 'change_speed_to_fast': "Action: Change agent's speed to fast. Always returns True.", 'form_square': 'Action: Form a square with other agents. Always returns True.', 'is_agent_in_square': 'Condition: Check if the agent is in a square formation with other agents. Returns True if the agent is in a square, False otherwise.', 'is_leader': 'Condition: Check if the agent is the designated leader of the group. Returns True if the agent is the leader, False otherwise.', 'is_near_target': 'Condition: Check if the agent is near the target. Returns True if the agent is within 10 units of distance from the target, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_other_agents_moving_slow': 'Condition: Check if other agents are moving at a slow speed. Returns True if at least one agent is moving slow, False if all agents are moving fast.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Form a square with other agents, move slowly to target, and freeze movement.' Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>is_agent_in_square</Condition> <Action>form_square</Action> <Action>change_speed_to_slow</Action> <Action>task_completed</Action> </Sequence> <Action>change_speed_to_fast</Action> </Selector> <Sequence> <Condition>is_near_target</Condition> <Action>change_speed_to_slow</Action> </Sequence> <Sequence> <Condition>is_obstacle_detected</Condition> <Action>avoid_obstacle</Action> <Action>change_speed_to_slow</Action> </Sequence> <Action>agent_movement_freeze</Action> </BehaviorTree>
###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'change_color_to_red': "Action: Change agent's color to red. Always returns True.", 'change_color_to_blue': "Action: Change agent's color to blue. Always returns True.", 'move_to_point': 'Action: Move to a specified point. Always returns True.', 'is_at_point': 'Condition: Check if the agent is at the specified point. Returns True if the agent is at the point, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_random_point_reached': 'Condition: Check if a randomly generated point has been reached. Returns True if the agent has reached a randomly generated point, False otherwise.', 'is_robot_moving_slow': 'Condition: Check if the agent is moving slowly. Returns True if the agent's speed is low, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Move to a randomly generated point, change color to red, and then move to specified point (x=5, y=10).' Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Action>move_to_point</Action> <Action>change_color_to_red</Action> <Action>agent_movement_freeze</Action> <Action>continue_movement_agent</Action> <Action>task_completed</Action> </Sequence> <Selector> <Sequence> <Action>move_to_point</Action> <Action>is_at_point</Action> <Action>change_color_to_blue</Action> <Action>agent_movement_freeze</Action> <Action>continue_movement_agent</Action> </Sequence> <Sequence> <Condition>is_random_point_reached</Condition> <Action>move_to_point</Action> <Action>is_robot_moving_slow</Action> <Action>change_color_to_red</Action> <Action>continue_movement_agent</Action> </Sequence> </Selector> </BehaviorTree>
###
6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'change_color_to_yellow': "Action: Change agent's color to yellow. Always returns True.", 'change_color_to_pink': "Action: Change agent's color to pink. Always returns True.", 'circle_around_point': 'Action: Move in a circle around a specified point. Always returns True.', 'is_agent_in_circle': 'Condition: Check if the agent is moving in a circle around the specified point. Returns True if the agent is in a circle, False otherwise.', 'is_near_target': 'Condition: Check if the agent is near the target. Returns True if the agent is within 10 units of distance from the target, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_random_point_reached': 'Condition: Check if a randomly generated point has been reached. Returns True if the agent has reached a randomly generated point, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Circle around the target, change color to yellow, and then move to a randomly generated point.'Output only the XML behavior tree without extra text.6.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Action>circle_around_point</Action> <Action>change_color_to_yellow</Action> <Action>agent_movement_freeze</Action> <Action>continue_movement_agent</Action> <Action><Sequence><Condition>is_target_detected</Condition><Action>form_line</Action><Action>change_color_to_red</Action></Sequence></BehaviorTree>

###
3.// INSTRUCTIONS: Use only the following behaviors {'wait': 'Action: Wait for 2 seconds. Always returns True.', 'check_distance_to_target': 'Condition: Check if the distance to the target is less than 10 units. Returns True if the distance is less than 10 units, False otherwise.', 'check_distance_to_obstacle': 'Condition: Check if the distance to the obstacle is less than 5 units. Returns True if the distance is less than 5 units, False otherwise.', 'check_battery_level': 'Condition: Check if the battery level is above 50%. Returns True if the level is above 50%, False otherwise.', 'shutdown': 'Action: Turn off the robot. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3.// USER COMMAND: generate behavior tree to 'Check battery level, if it's above 50% then move towards the target, if the target is not within reach then wait for 2 seconds, if the obstacle is nearby check if the battery level is above 30%, if it is then avoid the obstacle, if the battery level is below 30% then shutdown.'Output only the XML behavior tree without extra text.
3.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>check_battery_level</Condition><Sequence><Condition>check_distance_to_target</Condition><Action>move_towards_target</Action><Sequence><Condition>check_distance_to_obstacle</Condition><Condition>check_battery_level</Condition><Action>avoid_obstacle</Action></Sequence></Sequence></Sequence><Sequence><Condition>check_battery_level</Condition><Sequence><Condition>!check_distance_to_target</Condition><Action>wait</Action></Sequence></Sequence><Sequence><!Condition>check_battery_level</Condition><Action>shutdown</Action></Sequence></Selector>></BehaviorTree>

###
4.// INSTRUCTIONS: Use only the following behaviors {'patrol': 'Action: Move back and forth between two predetermined locations to patrol the area. Always returns True.', 'wait_for_signal': 'Action: Wait for a signal from other robot to start a coordinated action. Always return True.', 'send_signal': 'Action: Send a signal to other robot to start a coordinated action. Always returns True.', 'check_temperature': 'Condition: Check the environment temperature. Returns True if the temperature is within the optimal range, False otherwise.', 'stop': 'Action: Stop the current action. Always returns True.', 'change_color_to_yellow': 'Action: Change the robot's color to yellow. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Patrol an area, when the temperature exceeds 25°C, send a signal to other robots to change their color to red and stop patrolling. When the temperature drops below 20°C, send a signal to other robots to change their color back to yellow and resume patrolling.' Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>check_temperature</Condition><Action>send_signal</Action><Sequence><Condition>check_temperature</Condition><Condition>!check_temperature</Condition><Action>send_signal</Action></Sequence><Sequence><Condition>check_temperature</Condition><Action>check_temperature</Action></Sequence></Sequence><Sequence><Condition>check_temperature</Condition><Action>patrol</Action></Sequence><Sequence><Condition>check_temperature</Condition><Action>stop</Action></Sequence><Sequence><!Condition>!check_temperature</Condition><Action>wait_for_signal</Action></Sequence><Action>change_color_to_red</Action></Selector><Sequence><Condition>check_temperature</Condition><Action>send_signal</Action></Sequence><Action>change_color_to_yellow</Action></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'move_left': 'Action: Move 1 unit to the left. Always returns True.', 'move_right': 'Action: Move 1 unit to the right. Always returns True.', 'move_forward': 'Action: Move 1 unit forward. Always returns True.', 'move_backward': 'Action: Move 1 unit backward. Always returns True.', 'check_position': 'Condition: Check position of the robot. Returns True if the robot is within the designated area, False otherwise.', 'check_distance_to_center': 'Condition: Check distance to the center. Returns True if the distance is less than 5 units, False otherwise.', 'stop': 'Action: Stop current action. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Move to the left for 3 units, then move to the right for 2 units, then move forward for 3 units, then check if the robot is within a specific area, if it is not then move back 2 units, finally stop at the center and check if the distance to the center is less than 5 units.' Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Action>move_left</Action><Action>move_left</Action><Action>move_left</Action></Sequence><Sequence><Condition>check_position</Condition><Sequence><!Condition>!check_position</Condition><Sequence><!Condition>!check_position</Condition><Action>move_back</Action><Sequence><!Condition>!check_position</Condition><Action>stop</Action></Sequence></Sequence></Sequence></Sequence></Selector><Sequence><Condition>check_distance_to_center</Condition><Action>stop</Action></Sequence></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'follow_leader': 'Action: Follow the movement of the leader robot. Always returns True.', 'leader_started_moving': 'Condition: Check if the leader robot has started moving. Returns True if the leader has started moving, False otherwise.', 'leader_stopped_moving': 'Condition: Check if the leader robot has stopped moving. Returns True if the leader has stopped moving, False otherwise.', 'retrieve_object': 'Action: Retrieve an object and bring it back to the designated location. Always returns True.', 'place_object': 'Action: Place the retrieved object at the designated location. Always returns True.', 'check_nest_capacity': 'Condition: Check the current number of objects at the nest. Returns True if the nest is not at full capacity, False otherwise.', 'stop': 'Action: Stop the current action. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree###

4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise. 
###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Search for and collect resources, avoid obstacles, return to nest and deposit resources, then freeze movement.'Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree><Sequence> <Selector> <Sequence> <Condition>is_target_detected</Condition> <Action>continue_movement_agent</Action> <Action>change_color_to_green</Action> </Sequence> <Action>wander</Action> </Selector> <Sequence><Condition>is_agent_in_nest</Condition> <Action>change_color_to_white</Action> <Action>agent_movement_freeze</Action> </Sequence> </Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Find the target, follow it while avoiding obstacles, move in a line formation, and signal task completion.'Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree> <Sequence> <Condition>is_target_detected</Condition> <Action>follow_target</Action> <Action>avoid_obstacle</Action> <Action>form_line</Action> <Action>task_completed</Action> </Sequence> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_blue': 'Action: Change agent's color to blue. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'find_target': 'Action: Move towards the target location. Returns True when the target is reached, False if the target is not found.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_blue_object_detected': 'Condition: Check for blue objects nearby. Returns True if a blue object is detected, False otherwise.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Search for blue objects, change color to blue, then find the target and change color to green.'Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>is_blue_object_detected</Condition> <Action>change_color_to_blue</Action> <Action>wander</Action> </Sequence> <Sequence> <Action>find_target</Action> <Action>change_color_to_green</Action> </Sequence> </Selector> </BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_circle': 'Action: Form a circular formation with other robots. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_circle_formed': 'Condition: Check if a circle formation is formed. Returns True if the robots are in a circular formation, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby
3.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3.// USER COMMAND: generate behavior tree to 'Move towards the target and avoid obstacles.' Output only the XML behavior tree without extra text.
3.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>is_target_detected</Condition> <Action>agent_movement_freeze</Action> <Action>task_completed</Action> </Sequence> <Action>avoid_obstacle</Action> </Selector> </Sequence> </BehaviorTree>

###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Form a vertical line and then continue moving.'Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>is_line_formed</Condition> <Action>continue_movement_agent</Action> </Sequence> <Action>form_line</Action> </Selector> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Form a vertical line and then change color to white, but only if target is reached.' Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>is_target_reached</Condition> <Action>change_color_to_white</Action> <Action>agent_movement_freeze</Action> <Action>task_completed</Action> </Sequence> <Action>form_line</Action></Selector> </Sequence> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the 
###
4.// INSTRUCTIONS: Use only the following behaviors {'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.', 'align_to_center': 'Action: Align the robot to the center of the environment. Always returns True.', 'go_to_target': 'Action: Move towards the target object. Returns True if successful, False if unable to reach the target.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Align to center, move towards target, and freeze when target is reached.' Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Action>align_to_center</Action><Action>go_to_target</Action><Selector><Condition>is_target_detected</Condition><Action>task_completed</Action></Selector></Sequence><Action>wander</Action></Selector></Sequence></BehaviorTree>
 
###
5.// INSTRUCTIONS: Use only the following behaviors {'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'is_agent_away': 'Condition: Check if the agent is at least 10 units from its starting position. Returns True if the agent is at least 10 units away, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.', 'move_to_target': 'Action: Move towards the target object. Returns True if successful, False if unable to reach the target.', 'return_to_start': 'Action: Move back to the starting position. Returns True if successful, False if unable to return to start.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Move towards target, change color to green, and return to starting position.' Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_agent_away</Condition><Action>move_to_target</Action><Selector><Condition>is_target_detected</Condition><Action>change_color_to_green</Action></Selector></Sequence><Selector><Condition>is_agent_away</Condition><Action>return_to_start</Action></Selector></Selector><Action>wander</Action></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'is_at_nest': 'Condition: Check if the agent is at the nest. Returns True if the agent is at the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.', 'retrieve_item': 'Action: Retrieve the target object if it is within reach. Returns True if successful, False if unable to retrieve the target.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Avoid obstacles, retrieve target if within reach, and return to nest to signal task completion.'Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Selector><Condition>is_obstacle_detected</Condition><Action>avoid_obstacle</Action></Selector><Action>retrieve_item</Action><Selector><Condition>is_target_reached</Condition><Action>task_completed</Action></Selector></Sequence><Sequence><Condition>is_agent_at_nest</Condition><Action>task_completed</Action></Sequence></Selector><Action>wander</Action></BehaviorTree>
 
###
7.// INSTRUCTIONS: Use only the following behaviors {'move_to_target': 'Action: Move towards the target object. Returns True if successful, False if unable to reach the target.', 'patrol_area': 'Action: Patrol the designated area. Returns True if successful, False if unable to patrol.', 'change_color_to_red': "Action: Change agent's color to red. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_grabbed': 'Condition: Check if the target object has been grabbed. Returns True if the target is grabbed, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'patrol_complete': 'Condition: Check if the designated area has been fully patrolled. Returns True if complete, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: generate behavior tree to 'Patrol designated area until target is detected, grab target, and return to nest.' Output only the XML behavior tree without extra text.
7.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action> 
###
4.// INSTRUCTIONS: Use only the following behaviors {'is_agent_at_origin': 'Condition: Check if the agent is at the origin. Returns True if the agent is at the origin, False otherwise.', 'is_agent_at_target': 'Condition: Check if the agent is at the target. Returns True if the agent is at the target, False otherwise.', 'move_agent_forward': 'Action: Move the agent forward by 1 unit. Always returns True.', 'rotate_agent_left': 'Action: Rotate the agent 90 degrees left. Always returns True.', 'rotate_agent_right': 'Action: Rotate the agent 90 degrees right. Always returns True.', 'catch_target': 'Action: Catch the target if within 1 unit of distance. Returns True if the target is caught, False otherwise.', 'release_target': 'Action: Release the target. Returns True if the target is successfully released, False otherwise.', 'pick_up_target': 'Action: Pick up the target. Returns True if the target is successfully picked up, False otherwise.', 'put_down_target': 'Action: Put down the target. Returns True if the target is successfully put down, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task).
4.// USER COMMAND: generate behavior tree to 'Pick up the target, move forward, rotate left, release target, then move forward.' Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree> <Sequence><Sequence><Condition>is_agent_at_target</Condition> <Action>pick_up_target</Action> </Sequence> <Sequence> <Action>move_agent_forward</Action> <Action>rotate_agent_left</Action> <Action>release_target</Action> </Sequence> <Action>move_agent_forward</Action> </Sequence> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'is_agent_below_horizontal_line': 'Condition: Check if the agent is below the horizontal line. Returns True if the agent is below the line, False otherwise.', 'is_agent_above_horizontal_line': 'Condition: Check if the agent is above the horizontal line. Returns True if the agent is above the line, False otherwise.', 'is_agent_in_square': 'Condition: Check if the agent is within the square. Returns True if the agent is within the square, False otherwise.', 'move_agent_forward': 'Action: Move the agent forward by 1 unit. Always returns True.', 'rotate_agent_left': 'Action: Rotate the agent 45 degrees left. Always returns True.', 'rotate_agent_right': 'Action: Rotate the agent 45 degrees right. Always returns True.', 'move_agent_to_center': 'Action: Move the agent towards the center of the square. Returns True if the agent is successfully moved to the center, False otherwise.', 'change_color_to_blue': "Action: Change agent's color to blue. Always returns True."}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task).
5.// USER COMMAND: generate behavior tree to 'Move to center, rotate left twice, move forward, change color to blue, then rotate right twice.'Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree> <Sequence> <Condition>is_agent_in_square</Sequence> <Sequence> <Action>move_agent_to_center</Action> <Action>rotate_agent_left</Action> <Action>rotate_agent_left</Action> <Action>move_agent_forward</Action> <Action>change_color_to_blue</Action> <Action>rotate_agent_right</Action> <Action>rotate_agent_right</Action> </Sequence> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 10 units. Returns True if the target is within 10 units of distance, False otherwise.', 'move_towards_target': 'Action: Move the agent towards the target. Returns True if the agent successfully moves towards the target, False otherwise.', 'move_away_from_target': 'Action: Move the agent away from the target. Returns True if the agent successfully moves away from the target, False otherwise.', 'avoid_obstacles': 'Action: Avoid detected obstacles and move towards the target. Returns True if the agent successfully avoids obstacles and moves towards the target, False otherwise.'}, to construct behavior tree in XML format to the following command.If the available behaviors do not fit with the user command say (Sorry, I can't do the task).
6.// USER COMMAND: generate behavior tree to 'Move towards target, avoid obstacles, then freeze movement when target is reached.' Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree> <Sequence><Condition>is_target_reached</Condition> <Action>freeze_agent_movement</Action> </Sequence> <Selector> <Action>move_towards_target</Action> <Selector> <Action>move_away_from_target</Action> <Action>avoid_obstacles</Action> </Selector> </Selector> </BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'is_corner_reached': 'Condition: Check if the agent has reached the corner. Returns True if the agent has reached the corner, False otherwise.', 'move_to_next_corner': 'Action: Move the agent to the next corner. Returns True if the agent successfully moves to the next corner, False otherwise.', 'rotate_agent_left': 'Action: Rotate the agent 90 degrees left. Always returns True.', 'rotate_agent_right': 'Action: Rotate the agent 90 degrees right. Always returns True.', 'find_exit': 'Action: Move the agent towards the exit. Returns True if the agent successfully moves towards the exit, False otherwise.', 'move_past_exit': 'Action: Move the agent past the exit. Returns True if the agent successfully moves past the exit, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task).
7.// USER COMMAND: generate behavior tree to 'Move to the next corner, rotate left, find exit, then move past exit.'Output only the XML behavior tree without extra text.
7.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>is_corner_reached</Condition> <Action>move_to_next_corner</Action> </Sequence> <Selector> <Action>rotate_agent_left</Action> <Action>rotate_agent_right</Action> </Selector> </Selector> <Selector> <Condition>find_exit</Condition> <Action>move_past_exit</Action> </Selector> </BehaviorTree> 
###
3.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_square': 'Action: Form a square with four agents at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3.// USER COMMAND: generate behavior tree to 'Form a square with four agents, then move towards the target, change color to white, and freeze movement if target is reached.'Output only the XML behavior tree without extra text.
3.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Action>form_square</Action> <Sequence> <Condition>is_target_detected</Condition> <Action>change_color_to_white</Action> <Action>task_completed</Action> </Sequence> </Sequence> <Sequence> <Condition>is_agent_in_nest</Condition> <Action>change_color_to_green</Action> <Action>task_completed</Action> </Sequence> </Sequence> <Sequence> <Condition>is_target_reached</Condition> <Action>agent_movement_freeze</Action> </Sequence> </BehaviorTree>

###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'return_to_nest': 'Action: Return to the nest and freeze movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Form a vertical line and change color to green, then move towards the target, change color to white, and return to the nest.'Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Action>form_line</Action> <Sequence> <Condition>is_line_formed</Condition> <Action>change_color_to_green</Action> </Sequence> </Sequence> <Sequence> <Condition>is_target_detected</Condition> <Action>change_color_to_white</Action> <Action>wander</Action> </Sequence> <Sequence> <Condition>is_agent_in_nest</Condition> <Action>change_color_to_white</Action> <Action>return_to_nest</Action> </Sequence> </Selector> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'return_to_nest': 'Action: Return to the nest and freeze movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Move towards the target, change color to green, and return to the nest.'Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>is_target_detected</Condition> <Action>change_color_to_green</Action> <Sequence> <Condition>is_agent_in_nest</Condition> <Action>change_color_to_white</Action> <Action>return_to_nest</Action> <Sequence> <Condition>is_target_reached</Condition> <Action>agent_movement_freeze</Action> </Sequence> </Sequence> </Selector> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the
3.// INSTRUCTIONS: Use only the following behaviors {'get_input_command': 'Action: Receive input command. Always returns True.', 'interpret_command': 'Action: Interpret the input command. Always returns True.', 'execute_command': 'Action: Execute the interpreted command. Always returns True.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'rotate_clockwise': 'Action: Rotate the robot clockwise by a specified amount. Always returns True.', 'rotate_counterclockwise': 'Action: Rotate the robot counterclockwise by a specified amount. Always returns True.', 'move_forward': 'Action: Move the robot one step forward in the current direction. Always returns True.', 'move_backward': 'Action: Move the robot one step backward in the current direction. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task).
3.// USER COMMAND: generate behavior tree to 'Move forward, rotate 90 degrees to the right, then move backward.' Output only the XML behavior tree without extra text.
3.// OUTPUT:
<BehaviorTree><Sequence><Action>get_input_command</Action><Action>interpret_command</Action><Selector><Sequence><Condition>is_target_reached</Condition><Action>move_forward</Action></Sequence><Sequence><Selector><Sequence><Condition>is_target_reached</Condition><Action>rotate_clockwise</Action></Sequence><Selector><Sequence><Condition>is_target_reached</Condition><Action>rotate_counterclockwise</Action></Sequence></Selector></Sequence><Action>move_backward</Action></Sequence></Selector></Sequence></BehaviorTree>

4.// INSTRUCTIONS: Use only the following behaviors {'detect_food': 'Condition: Check if food is detected. Returns True if food is detected, False otherwise.', 'is_nest_reached': 'Condition: Check if the nest is within 20 units. Returns True if the nest is within 20 units of distance, False otherwise.', 'pick_up_food': 'Action: Pick up the detected food. Always returns True.', 'drop_food': 'Action: Drop the food at the current location. Always returns True.', 'move_forward': 'Action: Move the robot one step forward in the current direction. Always returns True.'}, to construct behavior tree in XML format to the following task scenario.
4.// INSTRUCTIONS: The robot starts at the nest. Move forward until food is detected. Pick up the food and return to the nest. Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree> <Sequence> <Condition>is_nest_reached</Condition> <Action>move_forward</Action> <Selector> <Sequence> <Condition>detect_food</Condition> <Action>pick_up_food</Action> </Sequence> <Action>move_forward</Action> </Selector> <Action>drop_food</Action> </Sequence> </BehaviorTree>

5.// INSTRUCTIONS: Use only the following behaviors {'detect_person': 'Condition: Check if a person is detected. Returns True if a person is detected, False otherwise.', 'approach_person': 'Action: Move towards the detected person. Always returns True.', 'greet_person': "Action: Greet the person by waving. Returns True if the person responds, False otherwise.", 'is_robot_happy': 'Condition: Check if the robot is happy from the interaction. Returns True if the robot is happy, False otherwise.', 'is_robot_sad': 'Condition: Check if the robot is sad from the interaction. Returns True if the robot is sad, False otherwise.', 'is_robot_angry': 'Condition: Check if the robot is angry from the interaction. Returns True if the robot is angry, False otherwise.', 'dance': 'Action: Dance to express happiness. Always returns True.', 'cry': 'Action: Cry to express sadness. Always returns True.', 'punch': 'Action: Punch to express anger. Always returns True.'}, to construct behavior tree in XML format to the following task scenario.
5.// INSTRUCTIONS: The robot interacts with a person. If the person responds to the robot's greeting, the robot will dance. If the person does not respond, the robot will cry. If the person responds angrily, the robot will punch. Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>detect_person</Condition> <Action>approach_person</Action> <Action>greet_person</Action> <Selector> <Sequence> <Condition>is_robot_happy</Condition> <Action>dance</Action> </Sequence> <Sequence> <Condition>is_robot_sad</Condition> <Action>cry</Action> </Sequence> <Sequence> <Condition>is_robot_angry</Condition> <Action>punch</Action> </Sequence> </Selector> </Sequence> </Selector> </BehaviorTree>

6.// INSTRUCTIONS: Use only the following behaviors {'detect_friend': 'Condition: Check if a friend is detected. Returns True if a friend is detected, False otherwise.', 'acknowledge_friend': 'Action: Acknowledge the detected friend. Always returns True.', 'follow_friend': 'Action: Follow the detected friend. Returns True if the friend is within following distance, False otherwise.', 'stop_following': 'Action: Stop following the friend. Always returns True.', 'is_stopped': 'Condition: Check if the robot is currently stopped. Returns True if the robot is stopped, False otherwise.', 'continue_movement': 'Action: Continue the robot's movement. Always returns True.'}, to construct behavior tree in XML format to the following task scenario.
6.// INSTRUCTIONS: The robot is in a group of friends and needs to follow the designated leader. When the leader is acknowledged, the robot will follow until instructed to stop. Once stopped, the robot will wait for the next instruction from the leader. Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>detect_friend</Condition> <Action>acknowledge_friend</Action> <Selector> <Sequence> <Condition>is_stopped</Condition> <Action>follow_friend</Action> </Sequence> <Sequence> <Condition>is_stopped</Condition> <Action>stop_following</Action> </Sequence> </Selector> </Sequence> <Action>continue_movement</Action> </Selector> </BehaviorTree>

7.// INSTRUCTIONS: Use only the following behaviors {'detect_intruder': 'Condition: Check if an intruder is detected. Returns True if an intruder is detected, False otherwise.', 'approach_intruder': 'Action: Move towards the detected intruder. Always returns True.', 'confront_intruder': 'Action: Confront the detected intruder. Always returns True.', 'intimidate_intruder': 'Action: Intimidate the detected intruder by making loud noises. Returns True if the intruder is scared and runs away, False otherwise.', 'chase_intruder': 'Action: 
###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Find the nearest target object, pick it up, and deliver it to the designated drop-off location.' Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_target_detected</Condition><Action>continue_movement_agent</Action><Action>grab_target</Action><Sequence><Condition>is_target_reached</Condition><Action>continue_movement_agent</Action></Sequence><Sequence><Condition>is_at_dropoff</Condition><Action>drop_target</Action><Action>task_completed</Action></Sequence></Sequence><Sequence><Condition>is_obstacle_detected</Condition><Action>avoid_obstacle</Action></Sequence><Action>wander</Action></Selector></BehaviorTree> 

###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Collect all objects within a designated area and bring them to the specified drop-off location.' Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_target_detected</Condition><Action>continue_movement_agent</Action><Action>grab_target</Action><Sequence><Condition>is_target_reached</Condition><Action>continue_movement_agent</Action></Sequence><Sequence><Condition>is_at_dropoff</Condition><Action>drop_target</Action><Action>task_completed</Action></Sequence></Sequence><Sequence><Condition>is_path_blocked</Condition><Action>turn_left</Action></Sequence><Action>wander</Action></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Remove obstacles from a designated area and clear the path for other robots to follow.' Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_obstacle_detected</Condition><Action>avoid_obstacle</Action><Action>update_map</Action></Sequence><Sequence><Condition>is_path_blocked</Condition><Action>grab_target</Action><Sequence><Condition>is_area_mapped</Condition><Action> 
###
4.// INSTRUCTIONS: Use only the following behaviors {'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_at_location': 'Condition: Check if the agent is at the designated location. Returns True if the agent is at the specified location, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.', 'move_to_location': 'Action: Move towards the designated location until it is reached. Always returns True.', 'rotate_to_direction': 'Action: Rotate the agent to face a specific direction. Always returns True.', 'charge_battery': 'Action: Charge the robot's battery to full capacity. Always returns True.', 'is_battery_low': 'Condition: Check if the robot's battery is low. Returns True if the battery is below 20%, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Check battery level, if low then charge battery, if battery is at 100% then move to designated location and form a line'. Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_battery_low</Condition><Action>charge_battery</Action></Sequence><Sequence><Condition>is_battery_full</Condition><Sequence><Condition>is_agent_at_location</Condition><Sequence><Action>move_to_location</Action><Action>form_line</Action>></Sequence></Sequence></Sequence><Sequence><Condition>is_line_formed</Condition><Action>task_completed</Action></Sequence></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'deploy_tool': 'Action: Deploy a tool for a specific task. Always returns True.', 'is_tool_deployed': 'Condition: Check if a tool has been deployed. Returns True if a tool is deployed, False otherwise.', 'retire_tool': 'Action: Retire a tool that is no longer needed. Always returns True.', 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'move_to_location': 'Action: Move towards the designated location until it is reached. Always returns True.', 'is_agent_at_location': 'Condition: Check if the agent is at the designated location. Returns True if the agent is at the specified location, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Go to a designated location, deploy a tool, and retire the tool once the task is completed'. Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_agent_at_location</Condition><Sequence><Action>move_to_location</Action><Action>deploy_tool</Action></Sequence><Action>retire_tool</Action></Sequence><Sequence><Condition>is_tool_deployed</Condition><Sequence><Condition>is_target_reached</Condition><Action>retire_tool</Action></Sequence></Sequence><Sequence><Condition>is_agent_at_location</Condition><Action>continue_movement_agent</Action></Sequence></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'halt_movement': 'Action: Halt agent's movement. Always returns True.', 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'move_to_location': 'Action: Move towards the designated location until it is reached. Always returns True.', 'is_agent_at_location': 'Condition: Check if the agent is at the designated location. Returns True if the agent is at the specified location, False otherwise.', 'fetch_object': 'Action: Fetch an object at the designated location. Always returns True.', 'is_object_fetched': 'Condition: Check if the desired object has been fetched. Returns True if the object is fetched, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Go to designated location, check if path is clear, fetch object, and return to original location'. Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree> <Sequence> <Condition>is_agent_at_location</Condition> <Sequence> <Condition>is_path_clear</Condition> <Sequence> <Action>move_to_location</Action> <Action>fetch_object</Action> </Sequence> <Action>return_to_original_location</Action> </Sequence> <Action>change_color_to_green</Action> </Sequence> </BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'adjust_speed': 'Action: Adjust speed to avoid collision with other robots. Always returns True.', 'align_with_grid': 'Action: Align agent's movement to an invisible grid for precision. Always returns True.', 'is_agent_aligned': 'Condition: Check if the agent is aligned with the grid. Returns True if the agent is aligned, False otherwise.', 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'move_to_location': 'Action: Move towards the designated location until it is reached. Always returns True.', 'is_agent_at_location': 'Condition: Check if the agent is at the designated location. Returns True if the agent is at the specified location, False otherwise.', 'collect_data': 'Action: Collect data from the environment. Always returns True.', 'is_data_collected': 'Condition: Check if the desired data has been collected. Returns True if the data is collected, False otherwise.', 'upload_data': 'Action: Upload collected data to a central 
###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_yellow': "Action: Change agent's color to yellow. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_agent_solo': "Condition: Check if the agent is the only one in the environment. Returns True if the agent is alone, False otherwise.", 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'If the other robots are not in the nest, change color to yellow and signal for help.'Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>is_agent_solo</Condition> <Action>change_color_to_yellow</Action> <Action>agent_movement_freeze</Action> <Action>task_completed</Action> </Sequence> <Action>continue_movement_agent</Action> </Selector> </Sequence> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_blue': "Action: Change agent's color to blue. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'is_agent_alone': 'Condition: Check if the agent is the only one in the environment. Returns True if the agent is alone, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'If the robot gets lost, change color to blue and continue moving.'Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>is_agent_alone</Condition> <Action>change_color_to_blue</Action> <Action>agent_movement_freeze</Action> <Action>task_completed</Action> </Sequence> <Action>continue_movement_agent</Action> </Selector> </Sequence> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'disperse_agents': 'Action: Disperse the agents in different directions. Always returns True.', 'form_circle': 'Action: Form a circle with the agents at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'When instructed, form a circle in the center with the other agents and change color to green.'Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>is_target_detected</Condition> <Action>form_circle</Action> <Action>change_color_to_green</Action> <Action>agent_movement_freeze</Action> <Action>task_completed</Action> </Sequence> <Action>disperse_agents</Action> </Selector> </Sequence> </BehaviorTree>
 
###
7.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'is_agent_alone': 'Condition: Check if the agent is the only one in the environment. Returns True if the agent is alone, False otherwise.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'join_circle': 'Action: Join the circle formed by the other agents at the center. Always returns True
###
4.// INSTRUCTIONS: Use only the following behaviors {'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_blue': "Action: Change agent's color to blue. Always returns True.", 'is_agent_near_front': 'Condition: Check if the agent is near the front of the pack. Returns True if the agent is near the front, False otherwise.', 'is_agent_near_back': 'Condition: Check if the agent is near the back of the pack. Returns True if the agent is near the back, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'move_forward': 'Action: Move forward a set distance. Always returns True.', 'move_backward': 'Action: Move backward a set distance. Always returns True.', 'turn_left': 'Action: Turn the robot 90 degrees to the left. Always returns True.', 'turn_right': 'Action: Turn the robot 90 degrees to the right. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Guide the swarm robots to move forward and change color to blue when near the front of the pack, and move backward and change color to red when near the back of the pack.'Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>is_agent_near_front</Condition> <Action>change_color_to_blue</Action> <Action>move_forward</Action> </Sequence> <Sequence> <Condition>is_agent_near_back</Condition> <Action>change_color_to_red</Action> <Action>move_backward</Action> </Sequence> </Selector> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_target_grabbed': 'Condition: Check if the target object has been grabbed. Returns True if the target is grabbed, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.', 'turn_right': 'Action: Turn the robot 90 degrees to the right. Always returns True.', 'move_forward': 'Action: Move forward a set distance. Always returns True.', 'move_backward': 'Action: Move backward a set distance. Always returns True.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Move forward 10 units, turn right, avoid obstacle, move backward 5 units, and change color to green when in the nest'. Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree> <Sequence> <Action>move_forward</Action> <Action>turn_right</Action> <Sequence> <Condition>is_obstacle_detected</Condition> <Action>avoid_obstacle</Action> </Sequence> <Action>move_backward</Action> <Sequence> <Condition>is_agent_in_nest</Condition> <Action>change_color_to_green</Action> <Action>task_completed</Action> </Sequence> </Sequence> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'deploy_chain': 'Action: Deploy a chain for communication. Always returns True.', 'drop_message': 'Action: Drop a message for other robots to retrieve. Always returns True.', 'pick_up_message': 'Action: Pick up a message previously dropped by another robot. Always returns True.', 'is_no_messages': 'Condition: Check if there are no messages left in the environment. Returns True if there are no messages, False otherwise.', 'is_at_communication_range': 'Condition: Check if the robot is within communication range of another robot. Returns True if within range, False otherwise.', 'is_finished_delivering_message': 'Condition: Check if the robot has finished delivering the message. Returns True if the message has been delivered, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Deploy a chain for communication, move towards nearest robot and drop a message, then return to original position and signal task completion.' Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Action>deploy_chain</Action> <Action>move_towards_nearest_robot</Action> <Action>drop_message</Action> <Action>task_completed</Action> </Sequence> <Sequence> <Condition>is_no_messages</Condition> <Action>wander</Action> </Sequence> </Selector> </BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_red': "Action: Change agent's color to red. Always returns True.", 'is_agent_in_base': 'Condition: Check if the agent is in the home base. Returns True if the agent is in the base, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_target_grabbed': 'Condition: Check if the target object has been grabbed. Returns True if the target is grabbed, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action
###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'store_food': 'Action: Store nearby food in storage. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Collect food from the environment, form a vertical line, and store the food in storage.'Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>is_target_detected</Condition><Action>store_food</Action><Action>task_completed</Action></Sequence><Action>wander</Action></Selector><Sequence><Condition>is_line_formed</Condition><Action>form_line</Action></Sequence></Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'start_digging': 'Action: Begin digging a hole. Returns True when digging has started, False while still searching.', 'is_agent_at_home': 'Condition: Check if the agent is at home base. Returns True if the agent is at home base, False otherwise.', 'is_hole_dug': 'Condition: Check if a hole has been dug. Returns True if a hole has been dug, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Dig a hole at home base and then change color to green.'Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>is_hole_dug</Condition> <Action>change_color_to_green</Action> <Action>agent_movement_freeze</Action> </Sequence> <Sequence> <Condition>is_agent_at_home</Condition> <Action>start_digging</Action> </Sequence> </Selector> </Sequence> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_square': 'Action: Form a square shape, using surrounding objects as corners. Always returns True.', 'is_on_edge': 'Condition: Check if agent is on the edge of the environment. Returns True if on the edge, False otherwise.', 'is_square_formed': 'Condition: Check if a square shape is formed. Returns True if a square is formed, False otherwise.', 'is_object_nearby': 'Condition: Check for any objects within 10 units. Returns True if an object is detected, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Form a square using surrounding objects, avoid obstacles, and change color to green.'Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>is_object_nearby</Condition><Action>avoid_obstacle</Action><Action>form_square</Action><Action>task_completed</Action></Sequence><Action>wander</Action></Selector><Sequence><Condition>is_square_formed</Condition><Action>change_color_to_green</Action></Sequence></Sequence></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion 
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_square': 'Action: Form a square shape using the agent. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_square_formed': 'Condition: Check if a square shape is formed. Returns True if a square shape is formed with the agent, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.', 'turn_left': 'Action: Turn the agent 90 degrees to the left. Always returns True.', 'turn_right': 'Action: Turn the agent 90 degrees to the right. Always returns True.', 'move_backward': 'Action: Move the agent one step backward in the current direction. Always returns True.', 'stop_movement_agent': "Action: Stop the agent's movement. Always returns True.", 'drop_item': 'Action: Drop an item carried by the agent. Always returns True.', 'pick_up_item': 'Action: Pick up an item from the ground. Always returns True.', 'is_item_held': 'Condition: Check if the agent is holding an item. Returns True if the agent is holding an item, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Collect items, form a square with the agent and items, then return to the nest and drop off the items.'Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>is_agent_in_nest</Condition><Action>change_color_to_green</Action><Action>pick_up_item</Action><Action>form_square</Action><Action>agent_movement_freeze</Action></Sequence><Sequence><Condition>is_target_detected</Condition><Action>wander</Action><Action>continue_movement_agent</Action><Action>stop_movement_agent</Action></Sequence></Selector></Sequence></BehaviorTree>

5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_circle': 'Action: Form a circle with other agents. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_circle_formed': 'Condition: Check if a circle is formed with other agents. Returns True if a circle is formed, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.', 'join_circle': 'Action: Join an existing circle with other agents. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Join and form a circle with other agents, then return to the nest.'Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>is_circle_formed</Condition><Action>change_color_to_green</Action><Action>agent_movement_freeze</Action></Sequence><Sequence><Condition>is_agent_in_nest</Condition><Action>change_color_to_white</Action><Action>join_circle</Action></Sequence><Action>wander</Action></Selector><Sequence><Condition>is_target_detected</Condition><Action>continue_movement_agent</Action><Action>stop_movement_agent</Action></Sequence></Sequence></BehaviorTree>

6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// 
###
3.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'detect_neighbors': 'Condition: Check if any neighbors are detected within a certain radius. Returns True if neighbors are detected, False otherwise.', 'follow_path': 'Action: Follow specified path. Returns True when path is completed.', 'reset_position': 'Action: Reset agent to initial position. Always returns True.', 'rotate_left': 'Action: Rotate agent 90 degrees to the left. Always returns True.', 'rotate_right': 'Action: Rotate agent 90 degrees to the right. Always returns True.', 'stay_within_bounds': 'Action: Ensure agent stays within specified boundaries. Always returns True.', 'switch_target': 'Action: Switch to a new target within a given range. Returns True when target is successfully switched.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3.// USER COMMAND: generate behavior tree to 'Find and follow a path towards the target while staying within boundaries, rotate 90 degrees to the left, then switch to a new target within 10 units.'Output only the XML behavior tree without extra text.
3.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>detect_neighbors</Condition> <Action>follow_path</Action> <Action>task_completed</Action> </Sequence> <Action>stay_within_bounds</Action> </Sequence> <Sequence> <Action>rotate_left</Action> <Condition>switch_target</Condition> </Sequence> </BehaviorTree>

###
4.// INSTRUCTIONS: Use only the following behaviors {'approach_target': 'Action: Move towards the target. Returns True when target is reached.', 'change_color_to_blue': "Action: Change agent's color to blue. Always returns True.", 'detect_target': 'Condition: Check if target is within range. Returns True if target is within specified range, False otherwise.', 'look_out_for_obstacles': 'Condition: Check for obstacles in the environment. Returns True if any obstacles are detected, False otherwise.', 'move_randomly': 'Action: Move in random directions. Always returns True.', 'protect_leader': 'Action: Protect designated leader. Always returns True.', 'report_status': 'Action: Report status to designated leader. Always returns True.', 'stop_movement': 'Action: Stop agent's movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Protect leader, approach target, and report status to leader once target is reached.'Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree> <Sequence> <Action>protect_leader</Action> <Condition>detect_target</Condition> <Selector> <Sequence> <Condition>report_status</Condition> <Action>stop_movement</Action> </Sequence> <Sequence> <Action>approach_target</Action> <Condition>detect_target</Condition> <Condition>look_out_for_obstacles</Condition> </Sequence> </Selector> </Sequence> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'attack_enemy': 'Action: Attack designated enemy. Returns True when enemy is successfully attacked.', 'change_color_to_red': "Action: Change agent's color to red. Always returns True.", 'detect_enemy': 'Condition: Check if enemy is present within a certain range. Returns True if enemy is detected, False otherwise.', 'follow_leader': 'Action: Follow designated leader. Returns True when leader is successfully followed.', 'get_into_position': 'Action: Get into position for attack. Returns True when position is reached.', 'keep_moving': 'Action: Keep moving towards a designated direction. Always returns True.', 'protect_teammate': 'Action: Protect designated teammate. Always returns True.', 'search_for_leader': 'Action: Search for designated leader. Returns True when leader is found.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Search for leader, follow leader, get into position for attack, attack enemy, and protect teammate.'Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Action>search_for_leader</Action> <Condition>follow_leader</Condition> </Sequence> <Selector> <Sequence> <Action>get_into_position</Action> <Condition>attack_enemy</Condition> </Sequence> <Action>keep_moving</Action> </Selector> <Action>detect_enemy</Action> <Condition>protect_teammate</Condition> </Selector> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'detect_water': 'Condition: Check for water in the environment. Returns True if water is present, False otherwise.', 'fetch_water': 'Action: Fetch water from a designated source. Returns True when water is successfully fetched.', 'find_nest': 'Action: Find the designated nest. Returns True when the nest is found.', 'lay_eggs': 'Action: Lay eggs in the designated nest. Returns True when eggs are successfully laid.', 'navigate_to_source': 'Action: Navigate to a designated water source. Returns True when the source is reached.', 'start_loop': 'Action: Start a loop of actions. Returns True when loop is completed.', 'stop_loop': 'Action: Stop current loop. Returns True when loop is stopped.', 'visit_plants': 'Action: Visit designated plants. Returns True when all plants are visited.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Visit plants, find nest, navigate to source, start loop of fetching water and laying eggs until water source is empty, then stop loop.'Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Action>visit_plants</Action> <Condition>find_nest</Condition> </Sequence> <Selector> <Sequence> <Condition>detect_water</Condition> <Action>fetch_water</Action> <Action>lay_eggs</Action> </Sequence> <Action>stop_loop</Action> </Selector> <Sequence> <Action>start_loop</Action> <Action>navigate_to_source</Action> </Sequence> </Selector> </BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'avoid_collision': 'Action: Avoid collision with other robots. Always returns True.', 'communicate_with_other': 'Action: Communicate valuable information with other robots. Always 
###
3.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3.// USER COMMAND: generate behavior tree to 'Avoid obstacles and reach the target. If the target is not reached within 5 minutes, return home.'Output only the XML behavior tree without extra text.
3.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>is_obstacle_detected</Condition><Action>avoid_obstacle</Action><Action>continue_movement_agent</Action></Sequence><Action>task_completed</Action></Selector><Sequence><Condition>is_target_detected</Condition><Sequence><Sequence><Condition>is_target_reached</Condition><Action>continue_movement_agent</Action></Sequence><Action>wander</Action></Sequence></Sequence><Sequence><Condition>is_agent_in_nest</Condition><Action>task_completed</Action></Sequence></Sequence></BehaviorTree>

###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Change color to green, then avoid obstacles and reach the target. If the target is not reached, change color to white and continue moving.'Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Action>change_color_to_green</Action><Sequence><Condition>is_obstacle_detected</Condition><Action>avoid_obstacle</Action><Action>continue_movement_agent</Action></Sequence><Action>wander</Action></Sequence><Selector><Sequence><Condition>is_target_reached</Condition><Action>change_color_to_white</Action><Action>continue_movement_agent</Action></Sequence><Action>task_completed</Action></Selector></Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'If there is an obstacle, change color to green, avoid the obstacle and form a line. If no obstacle, continue moving and change color to white.'Output only the XML behavior tree without 
###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.', 'reach_target': 'Action: Move towards the target at full speed. Returns True when target is reached.', 'reorient': 'Action: Reorient the agent. Returns True when the agent has successfully turned towards the target.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Navigate to the target, avoiding obstacles, and reorient if needed.' Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_obstacle_detected</Condition><Action>avoid_obstacle</Action></Sequence><Sequence><Condition>is_target_detected</Condition><Action>reorient</Action><Sequence><Action>reach_target</Action><Action>task_completed</Action></Sequence></Sequence><Action>wander</Action></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.', 'rotate_left': 'Action: Rotate agent 90 degrees to the left. Always returns True.', 'rotate_right': 'Action: Rotate agent 90 degrees to the right. Always returns True.' }, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Navigate to the target, avoiding obstacles, and rotate left if the target is on the left side, or rotate right if the target is on the right side.'
Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_obstacle_detected</Condition><Action>avoid_obstacle</Action></Sequence><Sequence><Condition>is_target_detected</Condition><Selector><Sequence><Condition>is_target_on_left</Condition><Action>rotate_left</Action><Action>continue_movement_agent</Action></Sequence><Sequence><Condition>is_target_on_right</Condition><Action>rotate_right</Action><Action>continue_movement_agent</Action></Sequence></Selector></Sequence><Action>wander</Action></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.', 'detect_color': 'Condition: Check the color of a nearby object. Returns True if the object color matches the agent color, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Find the target and change color to match the target object, then continue wandering.' Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_target_detected</Condition><Selector><Sequence><Action>detect_color</Action><Action>task_completed</Action></Sequence><Sequence><Action>change_color_to_target</Action><Action>task_completed</Action></Sequence></Selector></Sequence><Action>wander</Action></Selector></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.', 'rotate_180_degrees': 'Action: Rotate agent 180 degrees. Always returns True.', 'move_towards_target': 'Action: Move towards the target at a constant speed. Returns True when target is reached.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: generate behavior tree to 'Navigate to the target, avoid obstacles, rotate 180 degrees if target is behind, and continue moving towards the target.' Output only the XML behavior tree without extra text.
7.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_obstacle_detected</Condition><Action>avoid_obstacle</Action></Sequence><Sequence><Condition>is_target_detected</Condition><Selector><Sequence><Condition>is_target_behind</Condition><Action>rotate_180_degrees</Action><Action>move_towards_target</Action></Sequence><Sequence><Condition>is_target_ahead</Condition><Action>continue_movement_agent</Action></Sequence></Selector></Sequence><Action>wander</Action></Selector></BehaviorTree>
###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_red': "Action: Change agent's color to red. Always returns True.", 'change_color_to_blue': "Action: Change agent's color to blue. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'follow_path': 'Action: Follows a predefined path. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_color_blue': 'Condition: Check if the agent's color is blue. Returns True if the color is blue, False otherwise.', 'is_color_red': 'Condition: Check if the agent's color is red. Returns True if the color is red, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Find the blue object, change color to red, and return to the nest.' Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>is_obstacle_detected</Condition><Action>avoid_obstacle</Action></Sequence><Action>wander</Action></Selector><Sequence><Condition>is_color_blue</Condition><Action>change_color_to_red</Action><Action>follow_path</Action></Sequence><Sequence><Condition>is_agent_in_nest</Condition><Action>task_completed</Action></Sequence></Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_yellow': "Action: Change agent's color to yellow. Always returns True.", 'change_color_to_pink': "Action: Change agent's color to pink. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'follow_path': 'Action: Follows a predefined path. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_color_yellow': 'Condition: Check if the agent's color is yellow. Returns True if the color is yellow, False otherwise.', 'is_color_pink': 'Condition: Check if the agent's color is pink. Returns True if the color is pink, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Find the pink object and avoid obstacles until the yellow object is found, then change color to pink.' Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>is_obstacle_detected</Condition><Action>avoid_obstacle</Action></Sequence><Action>wander</Action></Selector><Sequence><Condition>is_color_pink</Condition><Action>change_color_to_pink</Action><Action>follow_path</Action><Sequence><Condition>is_color_yellow</Condition><Action>change_color_to_yellow</Action><Action>avoid_obstacle</Action></Sequence></Sequence></Sequence></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_circle': 'Action: Form a circle with other robots. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_circle_formed': 'Condition: Check if a circle is formed with other robots. Returns True if the circle is formed, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Form a circle with other robots and move towards the target while avoiding obstacles.' Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>is_target_detected</Condition><Action>continue_movement_agent</Action><Action>form_circle</Action><Action>task_completed</Action></Sequence><Action>wander</Action></Selector><Sequence><Condition>is_obstacle_detected</Condition><Action>avoid_obstacle</Action></Sequence></Sequence></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. AlwaysNote: This behavior tree utilizes the 'grab_target' and 'drop_target' actions as a way to simulate monitoring an area. When an intruder is detected, the robot will grab and drop a target object, indicating an alarm or alert. 

###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", "communicate": 'Action: Send a message to other robots. Always returns True.', 'form_circle': 'Action: Form a circle with other robots by moving in a circular path. Returns True when the formation is complete, False otherwise.', 'get_close_to_target': 'Action: Move towards the target object until within 5 units of distance. Returns True when close to the object, False otherwise.', 'is_agent_in_position': 'Condition: Check if the agent is in the designated position. Returns True if the agent is in position, False otherwise.', 'is_message_received': 'Condition: Check if a message has been received from other robots. Returns True if a message is received, False otherwise.', 'is_target_detected': 'Condition: Check if the target object is within a specific range. Returns True if the target is within range, False otherwise.', 'send_message': "Action: Send a message to other robots with the robot's ID. Always returns True.", 'wait': 'Action: Wait for a specified number of seconds before continuing. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Form a circle with other robots, send a message with robot ID, then move towards the target object'.
4.// OUTPUT:
<BehaviorTree><Action>wait</Action><Selector><Sequence><Selector><Sequence><Condition>is_message_received</Condition><Action>communicate</Action></Sequence><Action>send_message</Action></Selector><Selector><Sequence><Condition>is_target_detected</Condition><Action>get_close_to_target</Action></Sequence><Action>agent_movement_freeze</Action></Selector></Sequence><Selector><Sequence><Condition>is_message_received</Condition><Action>communicate</Action></Sequence><Selector><Condition>is_agent_in_position</Condition><Selector><Condition>is_message_received</Condition><Action>communicate</Action></Selector><Action>form_circle</Action></Selector></Selector></Selector></BehaviorTree>
Note: This behavior tree utilizes a combination of 'send_message' and 'is_message_received' nodes to allow for communication between the robots in order to coordinate their behavior and form a circle formation. Once the formation is complete, the robots will continue to monitor the environment for the target object. 

###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'change_color_to_black': "Action: Change agent's color to black. Always returns True.", 'change_color_to_blue': "Action: Change agent's color to blue. Always returns True.", 'change_color_to_red': "Action: Change agent's color to red. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'go_to_target': 'Action: Move the robot towards the target object. Returns True when the target is reached, False otherwise.', 'is_at_target': 'Condition: Check if the robot has reached the target object. Returns True if at the target object, False otherwise.', 'is_color_red': 'Condition: Check if the agent's color is red. Returns True if the color is red, False otherwise.', 'is_color_white': 'Condition: Check if the agent's color is white. Returns True if the color is white, False otherwise.', 'is_target_detected': 'Condition: Check if the target object is within a specific range. Returns True if the target is within range, False otherwise.', 'move_randomly': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Move to the target object and change color to red if the current color is white.'
5.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_target_detected</Condition><Action>go_to_target</Action></Sequence><Selector><Sequence><Condition>is_color_white</Condition><Action>change_color_to_red</Action></Sequence><Selector><Condition>is_color_red</Condition><Action>agent_movement_freeze</Action></Selector></Selector><Action>move_randomly</Action></BehaviorTree>
Note: This behavior tree utilizes the 'is_color_red' and 'is_color_white' conditions to check the current color of the robot and adjust its behavior accordingly. If the color is white, the robot will move towards the target object and change its color to red upon reaching it. Otherwise, it will freeze its movement and continue to move randomly. 

###
6.// INSTRUCTIONS: Use only the following behaviors {'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_red': "Action: Change agent's color to red. Always returns True.", 'go_to_target': 'Action: Move the robot towards the target object. Returns True when the target is reached, False otherwise.', 'is_at_target': 'Condition: Check if the robot has reached the target object. Returns True if at the target object, False otherwise.', 'is_target_detected': 'Condition: Check if the target object is within a specific range. Returns True if the target is within range, False otherwise.', 'wait': 'Action: Wait for a specified number of seconds before continuing. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Detect an obstacle, avoid it, wait for 5 seconds, then move to the target object and change color to red.'
6.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_target_detected</Condition><Action>go_to_target</Action></Sequence><Selector><Sequence><Condition>is_target_detected</Condition><Action>avoid_obstacle</Action></Sequence><Action>wait</Action></Selector><Selector><Sequence><Condition>is_at_target</Condition><Action>change_color_to_red</Action></Sequence><Action>agent_movement_freeze</Action></Selector></BehaviorTree>
Note: This behavior tree utilizes the 'wait' action to simulate a temporary pause in the robot's behavior before moving towards the target object. This adds a delay and potential obstacle avoidance before completing the task. 

###
7.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'change_color_to_black': "Action: Change agent's color to black. Always returns True.", 'change_color_to_green': "Action: Change agent's color to green. Always returns 
###
3.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'move_to_nest': 'Action: Move towards the nest. Always returns True.', 'move_to_target': 'Action: Move towards the target. If the target is not reached within 10 moves, return False', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3.// USER COMMAND: generate behavior tree to 'Ensure that the robot reaches the nest within 10 moves'. Output only the XML behavior tree without extra text.
3.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>is_agent_in_nest</Condition> <Action>continue_movement_agent</Action> <Action>task_completed</Action> </Sequence> <Sequence> <Condition>is_target_reached</Condition> <Selector> <Sequence> <Condition>move_to_nest</Condition> <Action>task_completed</Action> </Sequence> <Action>move_to_target</Action> </Selector> </Sequence> </Selector> </BehaviorTree>

###
4.// INSTRUCTIONS: Use only the following behaviors {'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'move_to_nest': 'Action: Move towards the nest. Always returns True.', 'rotate_left': 'Action: Rotate left by 90 degrees. Always returns True.', 'rotate_right': 'Action: Rotate right by 90 degrees. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Move towards the nest, avoiding obstacles and changing direction if necessary.'Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>is_obstacle_detected</Condition> <Action>avoid_obstacle</Action> <Selector> <Sequence> <Condition>rotate_left</Condition> <Selector> <Condition>rotate_right</Condition> <Action>move_to_nest</Action> </Selector> </Sequence> <Action>continue_movement_agent</Action> </Selector> </Sequence> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'move_to_point_a': 'Action: Move towards point A on the grid. Always returns True.', 'move_to_point_b': 'Action: Move towards point B on the grid. Always returns True.', 'move_to_point_c': 'Action: Move towards point C on the grid. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Form a line by moving to point A, B, and C in sequence.'Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Action>form_line</Action> <Selector> <Sequence> <Selector> <Sequence> <Condition>move_to_point_a</Condition> <Action>move_to_point_b</Action> </Sequence> <Action>move_to_point_c</Action> </Selector> <Action>continue_movement_agent</Action> </Selector> </Sequence> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_red': "Action: Change agent's color to red. Always returns True.", 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'move_to_target': 'Action: Move towards the target. Always returns True.', 'return_to_nest': 'Action: Return to the nest. If the agent is not in the nest, continue moving towards the nest.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit.
6.// USER COMMAND: generate behavior tree to 'Search for target, change color to red when target is detected, and return to the nest when target is reached.' Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>is_target_detected</Condition> <Sequence> <Action>change_color_to_red</Action> <Action>move_to_target</Action> </Sequence> </Sequence> <Sequence> <Condition>is_target_reached</Condition> <Selector> <Sequence> <Condition>move_to_target</Condition> <Action>return_to_nest</Action> </Sequence> <Action>return_to_nest</Action> </Selector> </Sequence> </Selector> </BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_drone_within_range': 'Condition: Check if a drone is within range. Returns True if a drone is within 10 units of distance, False otherwise.', 'move_to_safe_location': 'Action: Move to a safe location. Always returns True.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander':###
4.// INSTRUCTIONS: Use only the following behaviors {'move_to_target': 'Action: Move towards a specific target location. Always returns True.', 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'start_navigation': 'Action: Start the navigation towards the target location. Always returns True.', 'is_obstacle_ahead': 'Condition: Check if there is an obstacle blocking the path ahead. Returns True if an obstacle is detected, False otherwise.', 'has_reached_target': 'Condition: Check if the target location has been reached. Returns True if the target has been reached, False otherwise.', 'is_navigation_started': 'Condition: Check if navigation towards the target has been initiated. Returns True if navigation has started, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Generate a behavior tree for a swarm of robots to navigate to a specific target location while avoiding obstacles.
4.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>is_navigation_started</Condition><Action>move_to_target</Action></Sequence><Action>start_navigation</Action></Selector><Selector><Sequence><Condition>has_reached_target</Condition><Action>stop_movement</Action></Sequence><Action>avoid_obstacle</Action></Selector></Sequence></BehaviorTree>

###

5.// INSTRUCTIONS: Use only the following behaviors {'identify_color': 'Condition: Check the color of the detected object. Returns True if the color matches the user input, False otherwise.', 'grab_object': 'Action: Grab the detected object. Always returns True.', 'move_to_object': 'Action: Move towards the detected object. Always returns True.', 'release_object': 'Action: Release the currently held object. Always returns True.', 'is_object_detected': 'Condition: Check if an object is currently detected. Returns True if an object is detected, False otherwise.', 'is_object_grabbed': 'Condition: Check if an object is currently held by the robot. Returns True if an object is grabbed, False otherwise.', 'is_object_released': 'Condition: Check if an object has been released by the robot. Returns True if an object is released, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Generate a behavior tree for a swarm of robots to collectively identify, grab, and release objects based on user input.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_object_detected</Condition><Selector><Sequence><Condition>is_object_grabbed</Condition><Action>identify_color</Action></Sequence><Action>grab_object</Action></Selector></Sequence><Sequence><Condition>is_object_released</Condition><Action>release_object</Action></Sequence></Selector><Selector><Sequence><Condition>is_object_detected</Condition><Action>move_to_object</Action></Sequence></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'search_area': 'Action: Move in a spiral pattern to search a specific area. Always returns True.', 'is_object_detected': 'Condition: Check if an object is currently detected. Returns True if an object is detected, False otherwise.', 'reposition_robot': 'Action: Reposition the robot to a different location. Always returns True.', 'grab_object': 'Action: Grab the detected object. Always returns True.', 'drop_object': 'Action: Drop the currently held object. Always returns True.', 'is_robot_repositioned': 'Condition: Check if the robot has been repositioned. Returns True if the robot has been repositioned, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Generate a behavior tree for a swarm of robots to search for an object in a specific area, reposition if needed, and grab the object when detected.
6.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>is_object_detected</Condition><Selector><Sequence><Condition>is_robot_repositioned</Condition><Action>reposition_robot</Action></Sequence><Action>grab_object</Action></Selector></Sequence><Sequence><Condition>is_object_detected</Condition><Action>drop_object</Action></Sequence></Selector></Sequence><Selector><Sequence><Condition>is_object_detected</Condition><Action>move_to_object</Action></Sequence><Action>search_area</Action></Selector></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'follow_path': 'Action: Follow a predefined path. Always returns True.', 'obstacle_avoidance': 'Action: Use ultrasonic sensors to avoid obstacles. Always returns True.', 'search_goal': 'Action: Search for the target goal using visual sensors. Always returns True.', 'check_battery_level': 'Action: Check the battery level of the robot. Returns True if the battery level is sufficient, False otherwise.', 'recharge_battery': 'Action: Recharge the battery of the robot. Always returns True.', 'is_obstacle_detected': 'Condition: Check if an obstacle is within 10 units. Returns True if an obstacle is detected within 10 units, False otherwise.', 'is_goal_reached': 'Condition: Check if the target goal has been reached. Returns True if the goal has been reached, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: Generate a behavior tree for a swarm of robots to autonomously navigate towards a goal while avoiding obstacles and monitoring battery level.
7.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>check_battery_level</Condition><Action>follow_path</Action></Sequence><Action>recharge_battery</Action></Selector><Selector><Sequence><Condition>is_obstacle_detected</Condition><Action>obstacle_avoidance</Action></Sequence><Action>search_goal</Action></Selector></Sequence></BehaviorTree>
 
###
4.// INSTRUCTIONS: Use only the following behaviors {'is_agent_moving': "Condition: Check if the agent is moving. Returns True if the agent is in motion, False otherwise.", 'rotate_agent': "Action: Rotate the agent 90 degrees clockwise. Always returns True.", 'change_light_color': 'Action: Change the color of the light section attached to the agent. Always returns True.', 'is_light_on': 'Condition: Check if the light attached to the agent is turned on. Returns True if the light is on, False otherwise.', 'detect_flame': 'Condition: Check for flames nearby. Returns True if flames are detected, False otherwise.', 'avoid_flame': 'Action: Move away from the detected flames. Always returns True.', 'is_flame_extinguished': 'Condition: Check if the flame has been extinguished. Returns True if the flame is no longer detected, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
m4.// USER COMMAND: generate behavior tree to 'Detect and extinguish flames, then turn on the attached light.'Output only the XML behavior tree without extra text.
m4.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>detect_flame</Condition> <Action>rotate_agent</Action> <Sequence> <Condition>is_agent_moving</Condition> <Action>avoid_flame</Action> </Sequence> </Sequence> <Sequence> <Condition>is_flame_extinguished</Condition> <Action>change_light_color</Action> <Action>task_completed</Action> </Sequence> </Selector></Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'check_available_space': 'Condition: Check for available space. Returns True if there is enough space to move, False otherwise.', 'move_forward': 'Action: Move forward in the environment. Always returns True.', 'rotate_180': 'Action: Rotate the agent 180 degrees. Always returns True.', 'is_in_safe_spot': 'Condition: Check if the agent is in a safe spot. Returns True if the agent is within a designated safety zone, False otherwise.', 'avoid_obstacle_backwards': 'Action: Move backwards to avoid detected obstacles. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Move forward until an obstacle is detected, then rotate 180 degrees and continue moving forward until reaching a safe spot.'Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>check_available_space</Condition> <Action>move_forward</Action> <Sequence> <Condition>is_obstacle_detected</Condition> <Action>rotate_180</Action> <Sequence> <Condition>is_in_safe_spot</Condition> <Action>move_forward</Action> </Sequence> </Sequence> </Sequence> <Selector> <Condition>is_obstacle_detected</Condition> <Action>avoid_obstacle_backwards</Action> </Selector> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'is_agent_moving': "Condition: Check if the agent is moving. Returns True if the agent is in motion, False otherwise.", 'rotate_agent': "Action: Rotate the agent 90 degrees clockwise. Always returns True.", 'change_light_color': 'Action: Change the color of the light section attached to the agent. Always returns True.', 'is_light_on': 'Condition: Check if the light attached to the agent is turned on. Returns True if the light is on, False otherwise.', 'detect_object': 'Condition: Check for objects nearby. Returns True if an object is detected, False otherwise.', 'grab_object': 'Action: Grab the detected object if it is within reach. Always returns True.', 'is_object_grabbed': 'Condition: Check if the object has been grabbed. Returns True if the object is grabbed, False otherwise.', 'detect_obstacle': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'avoid_obstacle': 'Action: Move away from the detected obstacles. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Detect and grab object, turn on light, avoid obstacles.'Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>detect_object</Condition> <Action>grab_object</Action> <Sequence> <Condition>is_object_grabbed</Condition> <Action>change_light_color</Action> <Sequence> <Condition>detect_obstacle</Condition> <Action>rotate_agent</Action> </Sequence> </Sequence> <Sequence> <Condition>is_agent_moving</Condition> <Action>avoid_obstacle</Action> <Action>task_completed</Action> </Sequence> </Selector> </BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'is_at_start_position': 'Condition: Check if the agent is at the starting position. Returns True if the agent is at the starting position, False otherwise.', 'move_to_next_checkpoint': 'Action: Move to the next designated checkpoint. Always returns True.', 'is_checkpoint_reached': 'Condition: Check if the current checkpoint has been reached. Returns True if the checkpoint is reached, False otherwise.', 'do_pushups': 'Action: Perform pushups. Always returns True.', 'is_pushups_completed': 'Condition: Check if the pushups have been completed. Returns True if the pushups are completed, False otherwise.', 'wait': 'Action: Wait for a designated amount of time. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: generate behavior tree to 'Complete 10 checkpoints, waiting 5 seconds at each checkpoint and performing pushups at every other checkpoint.'Output only the XML behavior tree without extra text.
7.// OUTPUT:
<BehaviorTree> <Sequence> <Condition>is_at_start_position</Condition> <Sequence> <Action>move_to_next_checkpoint</Action> <Condition>is_checkpoint_reached</Condition> <Sequence> <Condition>wait</Condition> <Sequence> <Condition>do_pushups</Condition> <Condition>is_pushups_completed</Condition> </Sequence> <Condition>is_checkpoint_reached</Condition> </Sequence> <Action>task_completed</Action> </Sequence> <Selector> <Condition>is_checkpoint_reached</Condition> <Action>move_to_next_checkpoint</Action> <Condition>wait</ 
###
3.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_blue': "Action: Change agent's color to blue. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_square': 'Action: Form a square with sides of 10 units. Always returns True.', 'is_line_formed': 'Condition: Check if four agents have formed a square. Returns True if a square is formed, False otherwise.', 'is_near_nest': 'Condition: Check if the agent is within 10 units of the nest. Returns True if the agent is near the nest, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'move_up': 'Action: Move the agent upwards by 5 units. Always returns True.', 'move_right': 'Action: Move the agent to the right by 5 units. Always returns True.', 'move_left': 'Action: Move the agent to the left by 5 units. Always returns True.', 'move_to_nest': 'Action: Move towards the nest with a speed of 2 units. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3.// USER COMMAND: generate behavior tree to 'Form a square with 4 agents, by moving 10 units up, 10 units right, and 10 units down'. Output only the XML behavior tree without extra text.
3.// OUTPUT:
<BehaviorTree><Sequence><Action>move_up</Action><Action>move_right</Action><Action>move_down</Action><Condition>is_near_nest</Condition><Action>move_to_nest</Action></Sequence><Action>move_left</Action><Sequence><Action>move_up</Action><Action>move_right</Action><Action>move_down</Action><Condition>is_line_formed</Condition></Sequence><Sequence><Action>move_right</Action><Action>move_up</Action><Action>move_left</Action><Condition>is_obstacle_detected</Condition></Sequence><Sequence><Action>move_right</Action><Action>move_down</Action><Action>move_left</Action><Condition>is_obstacle_detected</Condition></Sequence><Action>move_up</Action><Sequence><Action>move_down</Action><Action>move_right</Action><Action>move_left</Action><Condition>is_obstacle_detected</Condition></Sequence><Sequence><Action>move_left</Action><Action>move_right</Action><Condition>is_line_formed</Condition></Sequence><Action>form_square</Action></BehaviorTree>

###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_blue': "Action: Change agent's color to blue. Always returns True.", 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'move_diagonally': 'Action: Move agent diagonally downwards by 10 units. Always returns True.', 'search_area': 'Action: Move randomly within a designated search area. Always returns True.', 'is_corner_found': 'Condition: Check if a corner is detected nearby. Returns True if a corner is detected, False otherwise.', 'is_green_color_detected': 'Condition: Check if a green colored obstacle is detected within 5 units. Returns True if a green obstacle is detected, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'pick_up_object': 'Action: Grab and pick up object within 2 units. Returns True if an object is successfully picked up, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Search for a green object within a designated area, move diagonally downwards to a corner, then pick up the object'. Output only the XML behavior tree without extra text.
1.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>search_area</Action><Condition>is_green_color_detected</Condition><Action>move_diagonally</Action><Condition>is_corner_found</Condition><Action>pick_up_object</Action></Sequence><Action>wander</Action></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'change_color_to_red': "Action: Change agent's color to red. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_circle': 'Action: Form a circular shape with a radius of 7 units. Always returns True.', 'is_agent_in_shelter': 'Condition: Check if the agent is within a shelter. Returns True if the agent is inside a shelter, False otherwise.', 'is_destination_reached': 'Condition: Check if the agent has reached the designated destination. Returns True if the destination is reached, False otherwise.', 'is_predator_detected': 'Condition: Check if a predator is detected within 10 units. Returns True if a predator is detected, False otherwise.', 'is_safe': 'Condition: Check if the environment is safe for the agent. Returns True if no predators are detected, False otherwise.', 'move_dodge': 'Action: Move randomly to dodge predators. Always returns True.', 'move_to_destination': 'Action: Move towards the designated destination with a speed of 5 units. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Move towards the next shelter, form a circle with a radius of 7 units, while avoiding predators'. Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_destination_reached</Condition><Action>wander</Action><Condition>is_agent_in_shelter</Condition><Action>form_circle</Action></Sequence><Sequence><Condition>is_predatorNote: This behavior tree assumes that the agent will continue to search for the target even after changing color to green. If the target is lost, the agent will continue to wander until it is found again. 

###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Search for the target and form a line with the other agents when found'Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>is_target_detected</Condition><Action>form_line</Action></Sequence><Action>wander</Action></Selector><Sequence><Condition>is_line_formed</Condition><Action>task_completed</Action></Sequence></Sequence></BehaviorTree>
Note: This behavior tree assumes that there are other agents in the environment to form a line with. If the target is lost, the agent will continue to search for it while forming a line with the other agents. 

###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Find the target and stop when 3 agents have found him, else continue searching'Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>task_completed</Condition><Action>agent_movement_freeze</Action></Sequence><Sequence><Selector><Sequence><Condition>is_target_reached</Condition><Action>task_completed</Action></Sequence><Action>move_forward</Action></Selector><Action>continue_movement_agent</Action></Sequence><Sequence><Condition>is_agent_in_nest</Condition><Action>form_line</Action></Sequence><Action>wander</Action></Selector></BehaviorTree>
Note: This behavior tree assumes that there are multiple agents searching for the target and will stop searching when 3 agents have found the target. If the target is lost, the agent will continue to search while the other agents form a line. 

###
6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Search for the target and update the map while moving'Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>
###
4.// INSTRUCTIONS: Use only the following behaviors {'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'dance': 'Action: Perform a celebratory dance. Always returns True.', 'follow_waypoints': 'Action: Follow a set of predefined waypoints. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_goal_reached': 'Condition: Check if the goal is reached. Returns True if the agent reaches the designated goal, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 10 units. Returns True if the target is within 10 units of distance, False otherwise.', 'play_sound': 'Action: Play a sound. Always returns True.', 'stop_movement': "Action: Stop agent's movement. Always returns True.", 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Avoid obstacles, follow waypoints, and play a sound when the goal is reached.'Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>is_obstacle_detected</Condition> <Action>stop_movement</Action> <Action>play_sound</Action> <Action>dance</Action> </Sequence> <Sequence> <Condition>is_path_clear</Condition> <Action>follow_waypoints</Action> <Sequence> <Condition>is_target_detected</Condition><Action>play_sound</Action> <Action>change_color_to_green</Action> </Sequence> </Sequence> </Selector> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_red': "Action: Change agent's color to red. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'fire_laser': "Action: Fire a laser beam. Returns True if target is destroyed, False otherwise.", 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_goal_reached': 'Condition: Check if the goal is reached. Returns True if the agent reaches the designated goal, False otherwise.', 'is_laser_ready': 'Condition: Check if laser is fully charged and ready to fire. Returns True if laser is fully charged, False otherwise.', 'is_target_detected': 'Condition: Check if target is within 10 units. Returns True if the target is within 10 units of distance, False otherwise.', 'move_to_location': 'Action: Move to a specific location on the map. Always returns True.', 'reload_laser': 'Action: Reload the laser. Always returns True.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Fire the laser at the target, then move to a specific location on the map and reload the laser.'Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree> <Sequence> <Sequence> <Condition>is_target_detected</Condition> <Sequence> <Condition>is_laser_ready</Condition> <Action>fire_laser</Action> </Sequence> <Sequence> <Condition>is_laser_ready</Condition><Action>reload_laser</Action> <Action>task_completed</Action> </Sequence> </Sequence> <Action>move_to_location</Action> </Sequence> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_blue': "Action: Change agent's color to blue. Always returns True.", 'change_color_to_red': "Action: Change agent's color to red. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'detect_position': 'Action: Measure the agent's current position. Returns True if position is successfully detected, False otherwise.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_position_detected': 'Condition: Check if the position is detected. Returns True if the agent successfully measures its position, False otherwise.', 'is_target_detected': 'Condition: Check if target is within 10 units. Returns True if the target is within 10 units of distance, False otherwise.', 'move_to_position': 'Action: Move to a specific position on the map. Always returns True.', 'rotate_agent': 'Action: Rotate the agent by a specified angle. Always returns True.', 'stop_movement': "Action: Stop agent's movement. Always returns True.", 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Measure the agent's position, rotate by 45 degrees, then move to a specific position on the map.'Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree> <Sequence> <Sequence> <Action>detect_position</Action> <Sequence> <Condition>is_position_detected</Condition> <Action>rotate_agent</Action> </Sequence> <Action>stop_movement</Action> <Action>fire_laser</Action> </Sequence> <Action>move_to_position</Action> </Sequence> </BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_goal_reached': 'Condition: Check if the goal is reached. Returns True if the agent reaches the designated goal, False otherwise.', 'is_nearby_obstacle': 'Condition: Check if there is an obstacle within 5 units. Returns True if there is an obstacle within 5 units of distance, False otherwise.', 'move_to_target': 'Action: Move towards the designated target. Always returns True.', 'random_movement': 'Action: Move randomlyNote: The behavior tree is not a complete representation of all necessary behaviors for this task, but provides a general structure for the robots to follow.

###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'go_to_coord': "Action: Move towards a specific coordinate. Always returns True.", 'is_enemy_detected': 'Condition: Check if an enemy is detected within the agent's line of sight. Returns True if an enemy is detected, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_coord_reached': 'Condition: Check if the agent has reached the specified coordinate. Returns True if the coordinate is reached within a certain distance, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Generate a behavior tree for a robot to stealthily navigate to a specific coordinate, avoiding enemies and obstacles along the way.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_enemy_detected</Condition><Sequence><Condition>is_obstacle_ahead</Condition><Action>avoid_obstacle</Action></Sequence></Sequence><Sequence><Condition>is_coord_reached</Condition><Action>agent_movement_freeze</Action></Sequence><Sequence><Condition>is_enemy_detected</Condition><Action>go_to_coord</Action></Sequence></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'move_towards_light': 'Action: Move towards the nearest source of light. Always returns True.', 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'emit_chemical_signal': 'Action: Emit a chemical signal to alert other robots of the location of light. Always returns True.', 'is_light_detected': 'Condition: Check for sources of light within a certain range. Returns True if light is detected, False otherwise.', 'is_boundary_reached': 'Condition: Check if the robot has reached the boundary of its assigned area. Returns True if the boundary is reached, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Generate a behavior tree for a swarm of robots to navigate within a designated area, while seeking out and emitting chemical signals to alert others of sources of light.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_light_detected</Condition><Sequence><Condition>is_boundary_reached</Condition><Action>avoid_obstacle</Action></Sequence></Sequence><Sequence><Condition>is_light_detected</Condition><Action>emit_chemical_signal</Action></Sequence><Action>move_towards_light</Action></Selector></Action></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'move_forward': 'Action: Move one step forward while maintaining formation. Always returns True.', 'rotate_left': 'Action: Rotate the robot to the left by 90 degrees. Always returns True.', 'rotate_right': 'Action: Rotate the robot to the right by 90 degrees. Always returns True.', 'is_boundary_reached': 'Condition: Check if the robot has reached the boundary of its assigned area. Returns True if the boundary is reached, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Generate a behavior tree for a robot to explore and map out its designated area, adjusting direction when reaching a boundary.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_boundary_reached</Condition><Sequence><Selector><Sequence><Condition>rotate_left</Condition><Action>move_forward</Action></Sequence><Sequence><Condition>rotate_right</Condition><Action>move_forward</Action></Sequence></Selector><Action>move_forward</Action</Sequence></Sequence><Action>move_forward</Action></Selector></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'move_forward': 'Action: Move one step forward while maintaining formation. Always returns True.', 'rotate_left': 'Action: Rotate the robot to the left by 90 degrees. Always returns True.', 'rotate_right': 'Action: Rotate the robot to the right by 90 degrees. Always returns True.', 'follow_leader': 'Action: Sync movement with the designated leader. Always returns True.', 'is_in_formation': 'Condition: Check if the robot is in proper formation with the designated leader. Returns True if in formation, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: Generate a behavior tree for a group of robots to follow a designated leader and maintain proper formation.
7.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_in_formation</Condition><Action>follow_leader</Action></Sequence><Selector><Sequence><Condition>rotate_left</Condition><Action>move_forward</Action></Sequence><Sequence><Condition>rotate_right</Condition><Action>move_forward</Action></Sequence><Action>move_forward</Action></Selector></BehaviorTree> 
3.// INSTRUCTIONS: Use only the following behaviors {'change_direction_right': "Action: Change agent's direction to the right. Always returns True.", 'change_direction_up': "Action: Change agent's direction upwards. Always returns True.", 'change_direction_left': "Action: Change agent's direction to the left. Always returns True.", 'change_direction_down': "Action: Change agent's direction downwards. Always returns True.", 'go_back_to_point': 'Action: Return to a designated point. Always returns True.', 'set_speed': 'Action: Set agent's speed to 0.5 units. Always returns True.', 'is_agent_stopped': 'Condition: Check if agent is stopped. Returns True if agent's speed is 0, False otherwise.', 'has_been_to_point': 'Condition: Check if agent has visited designated point. Returns True if agent has been to the point, False otherwise.', 'is_agent_in_area': 'Condition: Check if agent is within specified area. Returns True if agent's coordinates fall within the specified area, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_target_within_area': 'Condition: Check if target is within a specified area. Returns True if target's coordinates fall within the specified area, False otherwise.', 'perform_task': 'Action: Perform a predetermined task. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3.// USER COMMAND: generate behavior tree to 'Follow designated path and stop at specified point, then perform designated task.'
3.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Action>change_direction_right</Action><Action>set_speed</Action><Condition>is_agent_stopped</Condition></Sequence><Action>go_back_to_point</Action></Selector><Sequence><Condition>has_been_to_point</Condition><Action>perform_task</Action></Sequence></Sequence></BehaviorTree>

4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Avoid obstacles and continue movement until target is reached.'
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_obstacle_detected</Condition><Action>avoid_obstacle</Action></Sequence><Action>continue_movement_agent</Action></Selector><Condition>is_target_reached</Condition></BehaviorTree>

5.// INSTRUCTIONS: Use only the following behaviors {'move_forward': 'Action: Move agent forward. Always returns True.', 'move_backward': 'Action: Move agent backward. Always returns True.', 'turn_left': 'Action: Turn agent left. Always returns True.', 'turn_right': 'Action: Turn agent right. Always returns True.', 'align_with_target': 'Action: Align agent's movement with target. Always returns True.', 'is_agent_in_position': 'Condition: Check if agent is in desired position. Returns True if agent's coordinates match desired position, False otherwise.', 'has_reached_target': 'Condition: Check if agent has reached target. Returns True if agent's coordinates match target's, False otherwise.', 'detect_obstacle': 'Condition: Scan for obstacles. Returns True if an obstacle is detected, False otherwise.', 'detect_target': 'Condition: Scan for target. Returns True if target is detected, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Navigate to target while avoiding obstacles and aligning movement with target.'
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>detect_obstacle</Condition><Action>move_backward</Action></Sequence><Sequence><Condition>detect_target</Condition><Action>align_with_target</Action></Sequence></Selector><Selector><Sequence><Condition>is_agent_in_position</Condition><Action>move_forward</Action></Sequence><Action>turn_right</Action></Selector></BehaviorTree>

6.// INSTRUCTIONS: Use only the following behaviors {'move_forward': 'Action: Move agent forward. Always returns True.', 'move_backward': 'Action: Move agent backward. Always returns True.', 'turn_left': 'Action: Turn agent left. Always returns True.', 'turn_right': 'Action: Turn agent right. Always returns True.', 'update_map': 'Action: Update map with current surroundings. Always returns True.', 'is_agent_at_intersection': 'Condition: Check if agent is at an intersection. Returns True if agent's position is at an intersection, False otherwise.', 'is_target_reached': 'Condition: Check if agent has reached target. Returns True if agent's coordinates match target's, False otherwise.', 'detect_obstacle': 'Condition: Scan for obstacles. Returns True if an obstacle is detected, False otherwise.', 'detect_target': 'Condition: Scan for target. Returns True if target is detected, False otherwise.', 'navigate_to_intersection': 'Action: Move agent towards nearest intersection. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Navigate to target while avoiding obstacles and updating map and navigating to intersections.'
6.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>detect_obstacle</Condition><Action>move_backward</Action></Sequence><Sequence><Condition>detect_target</Condition 
###
4.// INSTRUCTIONS: Use only the following behaviors {'detect_leak': 'Condition: Check for any leaks in the pipes. Returns True if a leak is detected, False otherwise.', 'fix_leak': 'Action: If a leak is detected, fix the leak and return True. If no leak, return False.', 'inspect_pipes': 'Action: Inspect and assess the overall condition of the pipes. Always returns True.', 'move_to_location': 'Action: Move to a specific pre-defined location. Always returns True.', 'navigate_to_target': 'Sequence: First, use action move_to_location to get to a pre-defined location. Then use condition detect_leak to determine if there is a leak. If yes, use action fix_leak to fix the leak and signal task completion by freezing movement using action agent_movement_freeze. Otherwise, use action inspcect_pipes continue to move to the target location. If target is reached, signal task completion by freezing movement.'} to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'inspect and fix any leaks in the pipes, then move to a target location.' Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree> <Sequence> <Action>inspect_pipes</Action> <Selector> <Sequence> <Condition>detect_leak</Condition> <Action>fix_leak</Action> <Action>agent_movement_freeze</Action> </Sequence> <Action>move_to_location</Action> </Selector> <Action>navigate_to_target</Action> </Sequence> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'take_pickup_order': 'Action: Take the pickup order from the customer. Returns True if successfully taken, False otherwise.', 'deliver_order': 'Action: Deliver the order to the appropriate location. Returns True if successfully delivered, False otherwise.', 'is_customer_at_location': 'Condition: Check if the customer is at the designated location. Returns True if the customer is present, False otherwise.', 'is_order_ready': 'Condition: Check if the order is ready for pickup. Returns True if the order is ready, False otherwise.', 'is_order_delivered': 'Condition: Check if the order has been successfully delivered. Returns True if the order is delivered, False otherwise.', 'confirm_order': 'Action: Confirm the pickup or delivery of the order. Returns True if the order is successfully confirmed, False otherwise.', 'navigate_to_location': 'Action: Navigate to a specified location. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'take customer's order, navigate to location, confirm delivery.' Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Action>take_pickup_order</Action> <Action>agent_movement_freeze</Action> </Sequence> <Sequence> <Action>navigate_to_location</Action> <Selector> <Condition>is_customer_at_location</Condition> <Action>confirm_order</Action> </Selector> <Selector> <Condition>is_order_ready</Condition> <Action>deliver_order</Action> <Action>agent_movement_freeze</Action> </Selector> </Sequence> </Selector> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'detect_enemy': 'Condition: Check for enemies within a specified range. Returns True if enemies are detected, False otherwise.', 'is_health_low': 'Condition: Check if the agent's health is below a certain threshold. Returns True if health is low, False otherwise.', 'is_weapon_ready': 'Condition: Check if the agent's weapon is ready to use. Returns True if weapon is ready, False otherwise.', 'chase_enemy': 'Action: Move towards the nearest detected enemy while staying in cover. Returns True once enemy is within range.', 'take_cover': 'Action: Find and take cover to defend against incoming enemy attacks. Returns True if successfully found cover, False otherwise.', 'reload_weapon': 'Action: Reload the agent's weapon. Returns True once weapon is reloaded.', 'emit_distress_signal': 'Action: Signal for backup by emitting a distress signal. Returns True if successfully sent, False otherwise.', 'drop_weapon': 'Action: Drop the agent's current weapon. Returns True if successfully dropped, False otherwise.'},to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'detect enemies, take cover if low on health, chase enemy and emit distress signal.' Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>detect_enemy</Condition> <Selector> <Condition>is_health_low</Condition> <Selector> <Condition>is_weapon_ready</Condition> <Sequence> <Action>chase_enemy</Action> <Selector> <Condition>detect_enemy</Condition> <Action>take_cover</Action> </Selector> </Sequence> <Selector> <Condition>is_health_low</Condition> <Action>emit_distress_signal</Action> </Selector> </Selector> </Sequence> </Selector> </BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'detect_water_leak': 'Condition: Check for any leaks in the pipes that are carrying water. Returns True if a leak is detected, False otherwise.', 'fix_water_leak': 'Action: If a leak is detected, fix the leak in the water pipes and return True. If no leak, return False.', 'detect_electrical_failure': 'Condition: Check for any electrical failures in the system. Returns True if a failure is detected, False otherwise.', 'repair_electricity': 'Action: If a failure is detected, repair the electrical system. Returns True if successfully repaired, False otherwise.', 'is_water_supply_low': 'Condition: Check if the water supply is running low. Returns True if water supply is low, False otherwise.', 'is_reservoir_full': 'Condition: Check if the reservoir is full. Returns True if the reservoir is full, False otherwise.', 'refill_water': 'Action: Refill the water supply by tapping into the reservoir. Returns True if water supply is successfully refilled, False otherwise.'},to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: generate behavior tree to 'detect and fix any water leaks, detect and repair any electrical failures, refill water if supply is low.' Output only the XML behavior tree without extra text.
7.// OUTPUT:
<BehaviorTree> <Selector> <Action>detect_water_leak</Action> <Selector> <Condition>is_water_supply_low</Condition> <Action>refill
###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'get_to_safe_zone': 'Action: Move to a designated safe zone. Returns True when the agent reaches the safe zone.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'avoid obstacles, form a line, and get to a designated safe zone'. Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>avoid_obstacle</Action><Action>form_line</Action><Action>get_to_safe_zone</Action></Sequence><Sequence><Condition>is_line_formed</Condition><Action>change_color_to_white</Action></Sequence></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'follow_path': 'Action: Follow the designated path. Returns True when the agent reaches the end of the path.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'follow a designated path and avoid obstacles' Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>follow_path</Action></Sequence><Sequence><Action>avoid_obstacle</Action></Sequence></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'follow_path': 'Action: Follow the designated path. Returns True when the agent reaches the end of the path.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'search_target': 'Action: Search for a target within a designated area. Returns True when the target is found.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'search for a target within a designated area and continue movement'. Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>search_target</Action></Sequence><Action>continue_movement_agent</Action></Selector></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_circle': 'Action: Form a circle around the target point. Returns True when the circle is formed.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND:###
4.// INSTRUCTIONS: Use only the following behaviors {'gather_resource': "Action: Gather resources from the environment and store them in the robot's storage. Always returns True.", 'deposit_resource': "Action: Deposit stored resources at the designated location. Always returns True.", 'is_storage_full': 'Condition: Check if the robot's storage is full. Returns True if full, False otherwise.', 'is_recharging': 'Condition: Check if the robot is currently at a recharging station. Returns True if at station, False otherwise.', 'move_to_resource': 'Action: Move the robot towards the closest resource node. Always returns True.', 'move_to_recharge': "Action: Move the robot towards the closest recharging station. Always returns True.", 'is_resource_available': 'Condition: Check if there are any resources available in the environment. Returns True if resources are present, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Generate a behavior tree for a swarm of robots to gather resources from the environment and deposit them at a designated location while also recharging and avoiding obstacles.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_recharging</Condition><Action>move_to_resource</Action><Sequence><Condition>is_resource_available</Condition><Action>move_to_resource</Action></Sequence></Sequence><Condition>is_storage_full</Condition><Action>deposit_resource</Action><Sequence><Action>gather_resource</Action><Sequence><Condition>is_obtaining_resource</Condition><Action>gather_resource</Action></Sequence><Action>move_to_recharge</Action></Sequence></Selector></BehaviorTree>
###
5.// INSTRUCTIONS: Use only the following behaviors {'follow_leader': 'Action: Follow the designated leader robot. Always returns True.', 'stop_following': 'Action: Stop following the leader and move independently. Always returns True.', 'turn_left': 'Action: Turn the robot 90 degrees to the left. Always returns True.', 'turn_right': 'Action: Turn the robot 90 degrees to the right. Always returns True.', 'move_forward': 'Action: Move one step forward while maintaining formation. Always returns True.', 'shift_left': 'Action: Shift the entire formation one step to the left. Always returns True.', 'shift_right': 'Action: Shift the entire formation one step to the right. Always returns True.', 'is_obstacle_ahead': 'Condition: Check if there is an obstacle blocking the path ahead for the formation. Returns True if an obstacle is detected, False otherwise.', 'leader_detected': 'Condition: Check if the leader robot is within range. Returns True if the leader is detected, False otherwise.', 'is_formation_broken': 'Condition: Check if the formation has become misaligned or broken. Returns True if the formation is broken, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Generate a behavior tree for a swarm of robots to maintain a formation while following a designated leader and navigating obstacles.
5.// OUTPUT:
<BehaviorTree><Selector><Condition>leader_detected</Condition><Action>stop_following</Action><Action>follow_leader</Action><Sequence><Condition>is_obstacle_ahead</Condition><Selector><Sequence><Condition>is_obstacle_ahead</Condition><Action>shift_right</Action></Sequence><Action>move_forward</Action></Selector></Sequence><Condition>is_formation_broken</Condition><Action>reform_formation</Action></Selector></BehaviorTree>
###
6.// INSTRUCTIONS: Use only the following behaviors {'forward_left': 'Action: Move diagonally forward and left. Always returns True.', 'forward_right': 'Action: Move diagonally forward and right. Always returns True.', 'backward_left': 'Action: Move diagonally backward and left. Always returns True.', 'backward_right': 'Action: Move diagonally backward and right. Always returns True.', 'teleport': 'Action: Use teleportation to quickly move to a different location within range. Always returns True.', 'is_at_destination': 'Condition: Check if the robot has reached the designated destination. Returns True if at the destination, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_teleporting': 'Condition: Check if the robot is currently using teleportation. Returns True if teleporting, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Generate a behavior tree for a single robot to quickly teleport to a designated destination while avoiding obstacles along the way.
6.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_teleporting</Condition><Action>teleport</Action></Sequence><Condition>is_obstacle_detected</Condition><Selector><Sequence><Condition>is_obstacle_detected</Condition><Action>forward_right</Action></Sequence><Selector><Sequence><Condition>is_obstacle_detected</Condition><Action>forward_left</Action></Sequence><Action>move_forward</Action></Selector></Selector><Condition>is_at_destination</Condition><Action>stop_movement</Action></BehaviorTree>
###
7.// INSTRUCTIONS: Use only the following behaviors {'move_forward': 'Action: Move one step forward while maintaining formation. Always returns True.', 'shift_left': 'Action: Shift the entire formation one step to the left. Always returns True.', 'shift_right': 'Action: Shift the entire formation one step to the right. Always returns True.', 'follow_leader': 'Action: Follow the designated leader robot. Always returns True.', 'stop_following': 'Action: Stop following the leader and move independently. Always returns True.', 'is_leader_detected': 'Condition: Check if the leader robot is within range. Returns True if the leader is detected, False otherwise.', 'is_obstacle_ahead': 'Condition: Check if there is an obstacle blocking the path ahead for the formation. Returns True if an obstacle is detected, False otherwise.', 'is_formation_broken': 'Condition: Check if the formation has become misaligned or broken. Returns True if the formation is broken, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: Generate a behavior tree for a swarm of robots to adapt to changing environments by following a designated leader while maintaining formation and avoiding obstacles.
7.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_leader_detected</Condition><Action>stop_following</Action><Action>follow_leader</Action></Sequence><Condition>is_formation_broken</Condition><Action>reform_formation</Action></Selector><Sequence><Condition>is_obstacle_ahead</Condition><Selector><Sequence><Condition>is_obstacle_ahead</Condition><Action>shift_right 
###
3.// INSTRUCTIONS: Use only the following behaviors {'initiate_communication': 'Action: Initiate communication with other robots. Always returns True.', 'send_message': 'Action: Send a message to other robots. Always returns True.', 'receive_message': 'Condition: Check for incoming messages. Returns True if a message is received, False otherwise.', 'follow_leader': 'Action: Follow the movement of the leader robot. Always returns True.', 'align_with_leader': 'Action: Align with the orientation of the leader robot. Always returns True.', 'is_leader_detected': 'Condition: Check if the leader robot is detected within 10 units. Returns True if the leader is detected, False otherwise.', 'is_obstacle_ahead': 'Condition: Check if there is an obstacle blocking the path ahead while following the leader. Returns True if an obstacle is detected, False otherwise.', 'is_in_position': 'Condition: Check if the robot is in the correct position behind the leader. Returns True if the robot is in position, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3.// USER COMMAND: generate behavior tree to 'Communicate with other robots, follow the leader, and avoid obstacles while maintaining formation.'
3.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>is_leader_detected</Condition> <Sequence> <Condition>is_obstacle_ahead</Condition> <Action>follow_leader</Action> <Action>avoid_obstacle</Action> </Sequence> <Sequence> <Condition>is_in_position</Condition> <Sequence> <Condition>receive_message</Condition> <Action>align_with_leader</Action> </Sequence> </Sequence> </Sequence> <Sequence> <Condition>receive_message</Condition> <Sequence> <Condition>is_obstacle_ahead</Condition> <Action>send_message</Action> <Action>initiate_communication</Action> </Sequence> <Action>follow_leader</Action> </Sequence> </Selector> </BehaviorTree>

###
4.// INSTRUCTIONS: Use only the following behaviors {'initialize_swarm': 'Action: Initialize swarm of robots by assigning roles and tasks. Always returns True.', 'scan_area': 'Action: Scan the area for potential obstacles or targets. Always returns True.', 'locate_target': 'Action: Use sensors to locate a target within the area. Always returns True.', 'detect_obstacles': 'Action: Use sensors to detect obstacles within the area. Always returns True.', 'is_target_detected': 'Condition: Check if a target is located within 30 units. Returns True if a target is detected, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles within 10 units. Returns True if an obstacle is detected, False otherwise.', 'is_target_accessible': 'Condition: Check if the target is within reach of the swarm. Returns True if the target is accessible, False otherwise.', 'is_all_robots_in_position': 'Condition: Check if all robots are in their designated positions. Returns True if all robots are in position, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Initiate swarm, scan the area, locate the target, and move towards the target while avoiding obstacles.'
4.// OUTPUT:
<BehaviorTree> <Sequence> <Action>initialize_swarm</Action> <Selector> <Sequence> <Action>scan_area</Action> <Selector> <Sequence> <Condition>is_target_detected</Condition> <Sequence> <Condition>is_obstacle_detected</Condition> <Action>detect_obstacles</Action> </Sequence> <Sequence> <Condition>is_target_accessible</Condition> <Action>locate_target</Action> </Sequence> </Selector> </Sequence> <Action>move_towards_target</Action> </Selector> </Sequence> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'navigate_to_base': 'Action: Navigate back to the base station for recharging. Always returns True.', 'identify_resource': 'Action: Use sensors to identify a resource within the area. Always returns True.', 'collect_resource': 'Action: Collect the identified resource. Always returns True.', 'is_base_reached': 'Condition: Check if the robot has reached the base station. Returns True if the base is reached, False otherwise.', 'is_resource_detected': 'Condition: Check if a resource is identified within 20 units. Returns True if a resource is detected, False otherwise.', 'is_resource_collected': 'Condition: Check if the robot has successfully collected the resource. Returns True if the resource is collected, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Navigate back to the base station for recharging, identify a nearby resource, and collect it.'
5.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>is_base_reached</Condition> <Sequence> <Condition>is_resource_detected</Condition> <Selector> <Sequence> <Condition>is_resource_collected</Condition> <Action>navigate_to_base</Action> </Sequence> <Action>collect_resource</Action> </Selector> </Sequence> </Selector> <Action>identify_resource</Action> </Sequence> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'scan_area': "Action: Use sensors to scan the area for potential targets. Always returns True.", 'move_to_nearest_target': "Action: Move towards the nearest detected target. Always returns True.", 'is_target_detected': "Condition: Check if a target is detected within the area. Returns True if a target is detected, False otherwise.", 'pickup_target': "Action: Use manipulator to pick up the target. Returns True once the target is successfully picked up.", 'move_to_base': "Action: Move towards the base station for unloading the target. Always returns True.", 'is_target_picked_up': "Condition: Check if the target has been successfully picked up and held by the manipulator. Returns True if the target is picked up, False otherwise.", 'is_base_reached': "Condition: Check if the robot has reached the base station. Returns True if the base is reached, False otherwise."}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Scan the area for targets, move towards the nearest target, pick it up, and then move to the base station for unloading.'
6.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>is_target_picked_up</Condition> <Sequence> <Condition>is_base_reached</Condition> <Action>move_to_nearest_target</Action> 
###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_blue': "Action: Change agent's color to blue. Always returns True.", 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'explore': 'Action: Explore the environment by moving in a circular pattern. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_color_blue': 'Condition: Check if agent's color is blue. Returns True if the color is blue, False otherwise.', 'is_color_green': 'Condition: Check if agent's color is green. Returns True if the color is green, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 10 units. Returns True if the target is within 10 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 5 units. Returns True if the target is within 5 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Explore, change color to green if in an obstacle-free area, change color to blue if near target and return to nest, and freeze movement.'Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree> <Sequence> <Action>explore</Action> <Selector> <Sequence> <Condition>is_path_clear</Condition> <Action>change_color_to_green</Action> <Action>continue_movement_agent</Action> </Sequence> <Sequence> <Condition>is_target_detected</Condition> <Action>change_color_to_blue</Action> <Action>continue_movement_agent</Action> </Sequence> <Action>continue_movement_agent</Action> </Selector> <Sequence> <Condition>is_agent_in_nest</Condition> <Action>explore</Action> <Action>agent_movement_freeze</Action> </Sequence> </Sequence> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'follow_path': 'Action: Follow a predefined path. Always returns True.', 'is_agent_at_destination': 'Condition: Check if agent has reached the destination. Returns True if reached, False otherwise.', 'is_agent_in_position': 'Condition: Check if the agent is at the given coordinates. Returns True if at given coordinates, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'move_to_position': 'Action: Move to the given coordinates. Returns True once at given coordinates.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Avoid obstacles, follow path to target coordinates, and freeze movement.'Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Action>follow_path</Action> <Action>agent_movement_freeze</Action> </Sequence> <Action>avoid_obstacle</Action> </Selector> <Sequence> <Condition>is_path_clear</Condition> <Action>move_to_position</Action> <Action>agent_movement_freeze</Action> </Sequence> </Sequence> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_blue': "Action: Change agent's color to blue. Always returns True.", 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'go_to_next_point': 'Action: Move to the next predetermined point. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_color_blue': 'Condition: Check if agent's color is blue. Returns True if the color is blue, False otherwise.', 'is_color_green': 'Condition: Check if agent's color is green. Returns True if the color is green, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 5 units. Returns True if the target is within 5 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 2 units. Returns True if the target is within 2 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Change color to blue, navigate to each predetermined point in order, and freeze movement when target is reached.'Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Action>go_to_next_point</Action> <Sequence> <Condition>is_target_detected</Condition> <Action>change_color_to_blue</Action> <Action>agent_movement_freeze</Action> </Sequence> </Sequence> <Sequence> <Condition>is_obstacle_detected</Condition> <Action>avoid_obstacle
###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'navigate to a designated zone, check if the zone is occupied, and form a line if it is unoccupied or halt movement if it is occupied'. Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree> <Sequence> <Condition>is_target_detected</Condition> <Sequence> <Condition>is_path_clear</Condition> <Sequence> <Action>form_line</Action> <Action>task_completed</Action> </Sequence> <Sequence> <Condition>is_target_detected</Condition> <Action>continue_movement_agent</Action> </Sequence> </Sequence> <Sequence> <Action>agent_movement_freeze</Action> <Action>task_completed</Action> </Sequence> </Sequence> </BehaviorTree>

 ###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'find and collect items within a designated area, then return to the nest, change color to green, and halt movement'. Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>is_target_detected</Condition> <Sequence> <Action>form_line</Action> <Action>task_completed</Action> </Sequence> <Condition>is_agent_in_nest</Condition> <Sequence> <Action>change_color_to_green</Action> <Action>agent_movement_freeze</Action> </Sequence> </Sequence> <Sequence> <Condition>is_target_detected</Condition> <Sequence> <Action>continue_movement_agent</Action> </Sequence> <Condition>is_agent_in_nest</Condition> <Sequence> <Action>change_color_to_white</Action> <Action>agent_movement_freeze</Action> <Action>task_completed</Action> </Sequence> </Sequence> <Action>wander</Action> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'collect items within a designated area and form a line at the center, unless an obstacle is detected, then avoid the obstacle and continue collecting items'. Output only the XML behavior tree without extra text.
6.// OUTPUT:
< 
---
3.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format for a swarm of 3 robots to follow a specified leader robot and form a straight line behind it. Provide a specific scenario where the leader robot starts at (0,0) and the other robots are at (-5,0) and (5,0).
3.// OUTPUT:
<BehaviorTree> <Action>change_color_to_green</Action> <Sequence> <Action>form_line</Action> <Action>agent_movement_freeze</Action> <Sequence> <Condition>is_agent_in_nest</Condition> <Action>wander</Action> </Sequence> </Sequence> <Repeat> <Action>continue_movement_agent</Action> <Selector> <Sequence> <Condition>is_line_formed</Condition> <Action>change_color_to_white</Action> </Sequence> <Action>continue_movement_agent</Action> <Action>agent_movement_freeze</Action> </Selector> </Repeat> </BehaviorTree>

---
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to complete the task of collecting resource items (e.g. food, supplies) scattered in the environment using a swarm of 5 robots. Output the XML behavior tree with a specific scenario of 3 resource items at (-5,0), (0,3), and (5,0).
4.// OUTPUT:
<BehaviorTree> <Repeat> <Selector> <Sequence> <Sequence> <Action>change_color_to_green</Action> <Action>form_line</Action> <Action>agent_movement_freeze</Action> </Sequence> <Sequence> <Action>agent_movement_freeze</Action> <Action>change_color_to_green</Action> <Action>agent_movement_freeze</Action> </Sequence> <Sequence> <Action>continue_movement_agent</Action> <Sequence> <Condition>is_agent_in_nest</Condition> <Action>form_line</Action> </Sequence> </Sequence> <Sequence> <Selector> <Condition>is_target_detected</Condition> <Sequence> <Action>change_color_to_white</Action> </Sequence> <Action>continue_movement_agent</Action> </Selector> <Selector> <Condition>is_obstacle_detected</Condition> <Action>avoid_obstacle</Action> </Selector> </Sequence> </Selector> </Repeat> </BehaviorTree>

---
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns<BehaviorTree><Selector><Sequence><Condition>is_target_detected</Condition><Action>grab_target</Action><Sequence><Condition>is_at_dropoff</Condition><Action>drop_target</Action><Condition>is_agent_in_nest</Condition><Action>drop_target</Action><Sequence><Condition>is_target_grabbed</Condition><Action>drop_target</Action><Sequence><Condition>is_line_formed</Condition><Action>change_color_to_red</Action><Action>form_line</Action><Sequence><Condition>is_obstacle_detected</Condition><Action>avoid_obstacle</Action></Sequence></Sequence><Action>change_color_to_red</Action><Action>form_line</Action></Sequence></Sequence></Sequence></Selector></BehaviorTree> 
###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.', 'remember_position': 'Action: Store the current position of the robot in memory for future reference. Always returns True.', 'go_to_position': 'Action: Move the robot to a specific position. Returns True if the robot successfully reaches the position, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Remember the current position and then return to it after completing a task' Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>remember_position</Action><Action>task_completed</Action></Sequence><Sequence><Condition>is_agent_in_nest</Condition><Action>task_completed</Action></Sequence><Sequence><Condition>is_line_formed</Condition><Action>change_color_to_white</Action><Action>form_line</Action><Action>task_completed</Action></Sequence><Sequence><Condition>is_target_detected</Condition><Action>go_to_position</Action><Action>task_completed</Action></Sequence><Action>change_color_to_green</Action></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.', 'scan_surroundings': 'Action: Use sensors to scan the environment for any obstacles or targets. Always returns True.', 'navigate_towards_target': 'Action: Move towards the target, while avoiding obstacles. Returns True if the target is reached, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Scan surroundings, navigate towards target and perform a specific task'Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree><Sequence><Action>scan_surroundings</Action><Selector><Sequence><Condition>is_target_detected</Condition><Action>navigate_towards_target</Action><Action>task_completed</Action></Sequence><Action>wander</Action></Selector></Sequence></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.', 'retrieve_object': 'Action: Retrieve an object from a specific location. Returns True if the object is successfully retrieved, False otherwise.'}, to construct behavior tree in XML format to the following
###
4.// INSTRUCTIONS: Use only the following behaviors {'change_speed_to_max': 'Action: Change agent's speed to maximum value. Always returns True.', 'change_speed_to_min': 'Action: Change agent's speed to minimum value. Always returns True.', 'change_speed_to_half': 'Action: Change agent's speed to half of maximum speed. Always returns True.', 'change_direction': 'Action: Change agent's direction by 90 degrees. Always returns True.', 'check_distance_from_target': 'Condition: Check the distance between the agent and the target. Returns True if the distance is less than 10 units, False otherwise.', 'check_distance_from_home': 'Condition: Check the distance between the agent and its home location. Returns True if the distance is less than 5 units, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 10 units. Returns True if the target is within 10 units of distance, False otherwise.', 'is_home_reached': 'Condition: Check if home location is within 5 units. Returns True if the agent has reached its home location, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Move toward the target, change direction, and slow down when close to home.'Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree> <Sequence> <Action>change_speed_to_max</Action> <Sequence> <Condition>is_target_reached</Condition> <Action>change_direction</Action> </Sequence> <Selector> <Sequence> <Condition>check_distance_from_home</Condition> <Action>change_speed_to_half</Action> <Action>task_completed</Action> </Sequence> <Action>change_speed_to_min</Action> </Selector> </Sequence> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'move_forward': 'Action: Move the agent forward. Always returns True.', 'move_backward': 'Action: Move the agent backward. Always returns True.', 'strafe_left': 'Action: Move the agent to the left. Always returns True.', 'strafe_right': 'Action: Move the agent to the right. Always returns True.', 'rotate_left': 'Action: Rotate the agent to the left by 45 degrees. Always returns True.', 'rotate_right': 'Action: Rotate the agent to the right by 45 degrees. Always returns True.', 'detect_target': 'Condition: Check for target within 10 units. Returns True if target is within 10 units, False otherwise.', 'detect_obstacle': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_at_boundary': 'Condition: Check if agent is at the boundary of the environment. Returns True if the agent is at the edge, False otherwise.', 'is_turn_complete': 'Condition: Check if the agent has turned completely. Returns True if the agent is facing the desired direction, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Move towards the target, avoid obstacles, and rotate left when at the boundary.'Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>detect_obstacle</Condition> <Selector> <Sequence> <Condition>is_at_boundary</Condition> <Action>rotate_left</Action> <Condition>is_turn_complete</Condition> <Action>move_forward</Action> <Condition>task_completed</Condition> </Sequence> <Action>strafe_right</Action> </Selector> </Sequence> <Sequence> <Condition>detect_target</Condition> <Action>move_forward</Action> <Action>task_completed</Action> </Sequence> </Selector> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'approach_target': 'Action: Move towards target until within 10 units. Always returns True.', 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'return_home': 'Action: Return to home location. Always returns True.', 'find_food': 'Action: Search for food within a 5 unit radius. Always returns True.', 'search_area': 'Action: Search for targets or obstacles in a designated area. Always returns True.', 'is_food_found': 'Condition: Check if food is detected within 5 units. Returns True if food is found, False otherwise.', 'is_target_found': 'Condition: Check if target is detected within 10 units. Returns True if target is found, False otherwise.', 'is_home_reached': 'Condition: Check if home location is reached. Returns True if the agent is back at home location, False otherwise.', 'is_area_clear': 'Condition: Check if designated area is clear. Returns True if no obstacles or targets are detected, False otherwise.', 'is_within_radius': 'Condition: Check if agent is within designated radius. Returns True if agent is within specified range, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Approach the target, avoid obstacles, and return home when food is found.'Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree> <Sequence> <Action>approach_target</Action> <Selector> <Sequence> <Condition>is_food_found</Condition> <Action>avoid_obstacle</Action> <Action>return_home</Action> <Action>task_completed</Action> </Sequence> <Action>find_food</Action> </Selector> </Sequence> </BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'move_forward': 'Action: Move the agent forward. Always returns True.', 'move_backward': 'Action: Move the agent backward. Always returns True.', 'turn_left': 'Action: Turn the agent to the left by 90 degrees. Returns True if the agent is facing the desired direction, False otherwise.', 'turn_right': 'Action: Turn the agent to the right by 90 degrees. Returns True if the agent is facing the desired direction, False otherwise.', 'move_to_target': 'Action: Move towards the target. Always returns True.', 'check_distance_from_target': 'Condition: Check the distance between the agent and the target. Returns True if the distance is less than 10 units, False otherwise.', 'check_distance_from_origin': 'Condition: Check the distance between the agent and the origin. Returns True if the distance is less than 5 units, False otherwise.', 'isNote: The behavior tree may be more complex and should include additional conditions and actions, but this is a basic example.

###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'follow_path': 'Action: Follow a predetermined path. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_reached': 'Condition: Check if target is within 10 units. Returns True if the target is within 10 units of distance, False otherwise.', 'is_item_detected': 'Condition: Check if an item is detected in the environment. Returns True if an item is detected within 5 units, False otherwise.', 'pick_up_item': 'Action: Pick up the detected item. Always returns True.', 'deliver_item': 'Action: Deliver the picked up item to a predetermined location. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'collect and deliver items to a specific location' Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_item_detected</Condition><Action>pick_up_item</Action><Action>follow_path</Action><Condition>is_path_clear</Condition><Action>deliver_item</Action><Selector><Sequence><Condition>is_target_reached</Condition></Sequence><Action>follow_path</Action></Selector></Sequence></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'change_speed_fast': 'Action: Increase robot's speed to the faster option. Always returns True.', 'change_speed_slow': 'Action: Decrease robot's speed to the slower option. Always returns True.', 'change_direction_left': 'Action: Change robot's direction to the left. Always returns True.', 'change_direction_right': 'Action: Change robot's direction to the right. Always returns True.', 'spin': 'Action: Spin in place for 5 seconds. Always returns True.', 'move_to_point_A': 'Action: Move to predetermined point A. Returns True once the robot reaches point A.', 'move_to_point_B': 'Action: Move to predetermined point B. Returns True once the robot reaches point B.', 'is_obstacle_detected': 'Condition: Check if an obstacle is detected in the environment. Returns True if an obstacle is detected, False otherwise.', 'is_point_reached': 'Condition: Check if the robot has reached a predetermined point. Returns True if the robot is at the point, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: create a behavior tree to 'navigate through a maze avoiding obstacles, starting at point A and finishing at point B'. Output only the XML behavior tree without extra text.
5.//OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_obstacle_detected</Condition><Selector><Sequence><Condition>is_point_reached</Condition></Sequence><Action>move_to_point_B</Action><Action>change_direction_right</Action></Selector><Action>change_speed_slow</Action></Sequence><Sequence><Condition>is_point_reached</Condition><Selector><Action>spin</Action><Sequence><Condition>is_obstacle_detected</Condition></Sequence></Selector></Sequence></Selector></BehaviorTree>
Note: This is a basic behavior tree and can be further expanded upon for more complex mazes.

###
6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_blue': "Action: Change agent's color to blue. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'communicate_message': 'Action: Send a message to nearby agents. Always returns True.', 'form_formation': 'Action: Form a specific formation with nearby agents. Returns True once the formation is complete and all agents are in place.', 'is_formation_broken': 'Condition: Check if the formation has become misaligned or broken. Returns True if the formation is broken, False otherwise.', 'is_message_received': 'Condition: Check if a message has been received from another agent. Returns True if a message is received, False otherwise.', 'is_team_complete': 'Condition: Check if all necessary agents are present for a team. Returns True if all agents are present, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'form a designated team, communicate a message, and maintain formation while navigating obstacles' Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_team_complete</Condition><Action>form_formation</Action><Condition>is_message_received</Condition><Action>change_color_to_blue</Action><Action>communicate_message</Action></Sequence><Sequence><Condition>is_formation_broken</Condition><Action>continue_movement_agent</Action><Action>avoid_obstacle</Action></Sequence></Selector></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'move_left': 'Action: Move one step to the left while avoiding obstacles. Always returns True.', 'move_right': 'Action: Move one step to the right while avoiding obstacles. Always returns True.', 'move_forward': 'Action: Move one step forward while avoiding obstacles. Always returns True.', 'move_backward': 'Action: Move one step backward while avoiding obstacles. Always returns True.', 'stop': 'Action: Stop all movement. Always returns True.', 'scan_surroundings': 'Action: Scan the surrounding environment for obstacles or targets. Returns True once the scan is complete.', 'is_obstacle_ahead': 'Condition: Check if there is an obstacle blocking the path ahead for the robot. Returns True if an obstacle is detected, False otherwise.', 'is_target_reached': 'Condition: Check if the target location has been reached. Returns True if the target is reached, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)

###
3.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'at_nest': 'Condition: Check if the agent is at the nest. Returns True if the agent is at the nest, False otherwise.', 'change_color_to_blue': "Action: Change agent's color to blue. Always returns True.", 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_triangle': 'Action: Form a triangular shape with two other agents. Always returns True.', 'is_line_formed': 'Condition: Check if a triangular shape is formed. Returns True if the shape is formed, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'move_to_nest': 'Action: Move towards the nest. Always returns True.', 'move_to_target': 'Action: Move towards the detected target. Always returns True.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 10 units. Returns True if the target is within 10 units of distance, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3.// USER COMMAND: generate behavior tree to 'Coordinate with other agents to form a triangular shape, move towards target while avoiding obstacles, and return to nest when target is reached.'Output only the XML behavior tree without extra text.
3.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_line_formed</Condition><Action>continue_movement_agent</Action><Sequence><Condition>at_nest</Condition><Action>change_color_to_blue</Action><Action>move_to_target</Action></Sequence><Selector><Condition>is_obstacle_detected</Condition><Action>avoid_obstacle</Action></Selector><Sequence><Condition>is_target_detected</Condition><Action>move_to_nest</Action></Sequence></Sequence></BehaviorTree>

###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'detect_target': 'Condition: Check if target is within 30 units. Returns True if the target is within 30 units of distance, False otherwise.', 'move_to_target': 'Action: Move towards the detected target. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Move towards a target within 30 units and change color to green when target is reached.'Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>detect_target</Condition><Action>move_to_target</Action></Sequence><Sequence><Condition>detect_target</Condition><Action>change_color_to_green</Action></Sequence></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'change_color_to_yellow': "Action: Change agent's color to yellow. Always returns True.", 'detect_target': 'Condition: Check if target is within 25 units. Returns True if the target is within 25 units of distance, False otherwise.', 'move_backward': 'Action: Move the robot one step backward in the current direction. Always returns True.', 'turn_left': 'Action: Turn the robot 90 degrees to the left. Always returns True.', 'turn_right': 'Action: Turn the robot 90 degrees to the right. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Detect target within 25 units and move towards it, change color to yellow when target is reached, and avoid obstacles on the way by turning left or right or moving backward.' Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree><Sequence><Condition>detect_target</Condition><Action>move_backward</Action><Action>move_backward</Action></Sequence><Sequence><Condition>detect_target</Condition><Action>move_backward</Action><Action>turn_left</Action></Sequence><Sequence><Condition>detect_target</Condition><Action>move_backward</Action><Action>turn_right</Action></Sequence><Sequence><Condition>detect_target</Condition><Action>move_backward</Action><Sequence><Condition>detect_target</Condition><Action>change_color_to_yellow</Action></Sequence></Sequence></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_red': "Action: Change agent's color to red. Always returns True.", 'detect_target': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'move_to_target': 'Action: Move towards the detected target. Always returns True.', 'wait': 'Action: Remain stationary for 5 seconds. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Move towards target and change color to green when within 15 units, wait for 5 seconds, then change color to red.' Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree><Sequence><Condition>detect_target</Condition><Action>move_to_target</Action></Sequence><Sequence><Condition>detect_target</Condition><Action>change_color_to_green</Action><Sequence><Action>wait</Action></Sequence><Sequence><Condition>detect_target</Condition><Action>change_color_to_red</Action></Sequence></Sequence></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'detect_obstacle': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'move_to_origin': 'Action: Move the robot towards the origin point (0,0). Always returns True.', 'rotate_left_for_distance': 'Action: Rotate the robot to the left for a given distance (in radians). Always returns True.', 'stop': 'Action: Stop the robot's movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say###
3.// INSTRUCTIONS: Use only the following behaviors {'is_home_area_reached': 'Condition: Check if the robot has reached the designated home area. Returns True if the robot is within the designated home area, False otherwise.', 'go_to_home_area': 'Action: Move towards the designated home area. Always returns True.', 'wait_1_minute': 'Action: Wait for 1 minute. Always returns True.', 'is_battery_low': 'Condition: Check if the robot's battery is low. Returns True if the battery is below 20%, False otherwise.', 'charge_battery': 'Action: Charge the robot's battery. Always returns True.', 'scan_environment': 'Action: Scan the environment for any potential hazards. Always returns True.', 'is_hazard_detected': 'Condition: Check if any hazards are detected in the environment. Returns True if hazards are present, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3.// USER COMMAND: generate behavior tree to 'Scan environment, if hazard is detected, go to home area, charge battery and wait for 1 minute. If no hazard is detected, continue scanning.'
3.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>is_hazard_detected</Condition> <Sequence> <Action>scan_environment</Action> <Sequence> <Condition>is_battery_low</Condition> <Action>charge_battery</Action> </Sequence> <Sequence> <Condition>is_home_area_reached</Condition> <Action>go_to_home_area</Action> </Sequence> <Action>wait_1_minute</Action> </Sequence> <Action>wait_1_minute</Action> </Sequence> <Sequence> <Condition>is_battery_low</Condition> <Action>charge_battery</Action> </Sequence> </Selector> </BehaviorTree>
###
4.// INSTRUCTIONS: Use only the following behaviors {'is_mine_found': 'Condition: Check if a mine is detected. Returns True if a mine is detected, False otherwise.', 'defuse_mine': 'Action: Defuse and disarm the detected mine. Always returns True.', 'is_enemy_detected': 'Condition: Check for enemies within a 15 unit radius. Returns True if an enemy is detected, False otherwise.', 'take_cover': 'Action: Take cover behind a nearby object. Always returns True.', 'is_cover_taken': 'Condition: Check if cover is successfully taken. Returns True if cover is successfully taken, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Detect enemies, take cover if enemy is detected, search for mines in the surroundings and disarm them if found.'
4.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>is_enemy_detected</Condition> <Action>take_cover</Action> </Sequence> <Sequence> <Condition>is_mine_found</Condition> <Action>defuse_mine</Action> </Sequence> </Selector> </Sequence> <Sequence> <Condition>is_enemy_detected</Condition> <Action>take_cover</Action> </Sequence> </BehaviorTree>
###
5.// INSTRUCTIONS: Use only the following behaviors {'is_object_detected': 'Condition: Check if an object is detected in the environment. Returns True if an object is detected, False otherwise.', 'pick_up_object': 'Action: Pick up the detected object. Always returns True.', 'is_obstacle_detected': 'Condition: Check for obstacles in the path. Returns True if an obstacle is detected, False otherwise.', 'navigate_around': 'Action: Navigate around the detected obstacle. Always returns True.', 'is_destination_reached': 'Condition: Check if the robot has reached the designated destination. Returns True if the robot has reached the destination, False otherwise.', 'move_to_destination': 'Action: Move towards the designated destination. Always returns True.', 'drop_object': 'Action: Drop the carried object. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Navigate to pick up an object, avoid obstacles, and deliver the object to the destination.'
5.// OUTPUT:
<BehaviorTree> <Sequence> <Condition>is_object_detected</Condition> <Action>pick_up_object</Action> <Sequence> <Condition>is_obstacle_detected</Condition> <Action>navigate_around</Action> </Sequence> <Sequence> <Condition>is_destination_reached</Condition> <Action>drop_object</Action> </Sequence> <Selector> <Action>move_to_destination</Action> <Action>drop_object</Action> </Selector> </BehaviorTree>
###
6.// INSTRUCTIONS: Use only the following behaviors {'is_resource_detected': 'Condition: Check if a resource is detected. Returns True if a resource is detected, False otherwise.', 'collect_resource': 'Action: Collect the detected resource. Always returns True.', 'is_home_reached': 'Condition: Check if the robot has reached the designated home location. Returns True if the robot is within the designated home location, False otherwise.', 'move_to_home': 'Action: Move towards the designated home location. Always returns True.', 'is_resource_depleted': 'Condition: Check if the collected resource is depleted. Returns True if the resource is depleted, False otherwise.', 'is_storage_full': 'Condition: Check if the robot's storage is full. Returns True if the storage is full, False otherwise.', 'drop_resource': 'Action: Drop the collected resource at the designated location. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Collect resources, deposit resources at home, and return to collect more until the storage is full or resources are depleted.'
6.// OUTPUT:
<BehaviorTree> <Sequence> <Condition>is_resource_detected</Condition> <Action>collect_resource</Action> <Selector> <Condition>is_home_reached</Condition> <Action>move_to_home</Action> </Selector> </Sequence> <Sequence> <Condition>is_resource_depleted</Condition> <Selector> <Action>drop_resource</Action> <Action>move_to_home</Action> </Selector> </Sequence> <Sequence> <Condition>is_storage_full</Condition> <Action>move_to_home</Action> <Selector> <Sequence> <Condition>is_resource_detected</Condition> <Action>collect_resource</Action> <Selector> <Condition>is_home_reached</Condition> <Action>move_to_home</Action> </Selector> </Sequence> <Sequence> <Condition>is_resource_depleted</Condition> <Selector> <Action>drop_resource</Action> <Action>move_to_home</Action> </Selector> </Sequence> </###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'follow_target': 'Action: Follow the target. Always returns True.', 'stop_following_target': 'Action: Stop following the target. Always returns True.', 'hold_position': 'Action: Hold current position. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Follow target, but stop if target is out of sight. If target is back in sight, resume following.'Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>is_target_detected</Condition> <Action>follow_target</Action> <Action>task_completed</Action> </Sequence> <Sequence> <Condition>is_target_detected</Condition> <Action>stop_following_target</Action> <Action>task_completed</Action> </Sequence> <Action>hold_position</Action> </Selector> </Sequence> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Move towards target, but stop if there is an obstacle. When the obstacle is cleared, resume moving towards target.'Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>is_target_detected</Condition> <Action>continue_movement_agent</Action> <Action>task_completed</Action> </Sequence> <Sequence> <Condition>is_obstacle_detected</Condition> <Action>avoid_obstacle</Action> <Action>task_completed</Action> </Sequence> </Selector> </Sequence> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_red': "Action: Change agent's color to red. Always returns True.", 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_target_grabbed': 'Condition: Check if the target object has been grabbed. Returns True if the target is grabbed, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.', 'drop_target': 'Action: Drop the target object at the designated drop-off location. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Pick up target, drop it at nest. Signal completion once target is dropped.'Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>is_target_grabbed</Condition> <Action>drop_target</Action> <Action>task_completed</Action> </Sequence> <Sequence> <Condition>is_agent_in_nest</Condition> <Sequence> <Condition>is_obstacle_detected</Condition> <Action>avoid_obstacle</Action> <Action>wander</Action> </Sequence> <Action>change_color_to_green</Action> <Action>agent_movement_freeze</Action> </Sequence> </Selector> </BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True ifNote: 'reform_formation' would be a custom action node implemented for this specific task.

###
4.// INSTRUCTIONS: Use only the following behaviors {'approach_player': 'Action: Move towards the player with a speed of 2 units/second. Returns True when within 2 units of distance from the player.', 'retreat_from_player': 'Action: Move away from the player with a speed of 4 units/second. Returns True when outside 5 units of distance from the player.', 'attack': 'Action: Attack the player with a ranged weapon. Returns True when player's health is decreased by 20 points.', 'idle': 'Action: Remain stationary and do nothing while waiting for further instructions. Always returns True.', 'is_player_in_attack_range': 'Condition: Check if the player is within 10 units of distance with the robot. Returns True if the player is in range, False otherwise.', 'is_player_seen': 'Condition: Check if the player is within the robot's line of sight. Returns True if the player is visible, False otherwise.', 'is_player_moving': 'Condition: Check if the player is moving. Returns True if the player's movement is detected, False otherwise.', 'is_player_hurt': 'Condition: Check if the player's health has decreased. Returns True if the player's health has dropped, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Approach and attack the player if seen, retreat if player gets too close, and idle if player is not in sight.'
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_player_seen</Condition><Action>approach_player</Action></Sequence><Sequence><Condition>is_player_in_attack_range</Condition><Action>attack</Action></Sequence><Sequence><Condition>is_player_moving</Condition><Action>retreat_from_player</Action></Sequence></Selector><Action>idle</Action></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'navigate_to_target': 'Action: Move towards the specified target location at a speed of 5 units/second. Always returns True.', 'check_battery_level': 'Action: Check the battery level and act accordingly. Always returns True.', 'recharge': 'Action: Return to the charging station and recharge batteries. Returns True when fully recharged.', 'scan_surroundings': 'Action: Scan the surrounding environment using sensors. Always returns True.', 'is_battery_low': 'Condition: Check if the battery level is below 20%. Returns True if battery is low, False otherwise.', 'is_target_reached': 'Condition: Check if the target location has been reached. Returns True if the target has been reached, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles in the surroundings. Returns True if an obstacle is detected, False otherwise.', 'is_station_in_range': 'Condition: Check if the charging station is within 10 units of distance. Returns True if the station is in range, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Navigate to specified target location while avoiding obstacles, recharge batteries if low, and keep scanning surroundings.'
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_obstacle_detected</Condition><Action>navigate_around_obstacle</Action></Sequence><Sequence><Condition>is_battery_low</Condition><Action>recharge</Action></Sequence><Sequence><Condition>is_target_reached</Condition><Action>navigate_to_target</Action></Sequence></Selector><Action>scan_surroundings</Action></BehaviorTree>
Note: 'navigate_around_obstacle' would be a custom action node implemented for this specific scenario.

###
6.// INSTRUCTIONS: Use only the following behaviors {'move_forward': 'Action: Move one step forward at a speed of 3 units/second. Always returns True.', 'turn_left': 'Action: Rotate the robot 45 degrees to the left. Always returns True.', 'turn_right': 'Action: Rotate the robot 45 degrees to the right. Always returns True.', 'activate_sensor': 'Action: Activate a specific sensor. Always returns True.', 'deactivate_sensor': 'Action: Deactivate a specific sensor. Always returns True.', 'check_sensor_reading': 'Action: Check the output reading of a specific sensor. Always returns True.', 'is_obstacle_detected': 'Condition: Check if any obstacles are detected by active sensors. Returns True if an obstacle is detected, False otherwise.', 'is_sensor_working': 'Condition: Check if a specific sensor is currently active. Returns True if the sensor is active, False otherwise.', 'is_north_direction': 'Condition: Check if the robot is facing north. Returns True if the robot is facing north, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Navigate to the end point, while rotating the robot 90 degrees to the left, and checking sensor readings every 5 steps.'
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_sensor_working</Condition><Action>deactivate_sensor</Action></Sequence><Sequence><Condition>is_obstacle_detected</Condition><Selector><Sequence><Condition>is_north_direction</Condition><Action>turn_left</Action></Sequence><Action>turn_right</Action></Selector><Action>move_forward</Action></Sequence></Selector><Sequence><Action>activate_sensor</Action><Action>check_sensor_reading</Action><Action>move_forward</Action></Sequence><Sequence><Condition>is_sensor_working</Condition><Action>deactivate_sensor</Action></Sequence></BehaviorTree>
Note: The first Sequence node is for turning the robot to face north, the second Sequence node is used to check sensor readings every 5 steps, and the final Sequence node is used to turn off the sensor used for checking readings. These additional actions are necessary to achieve the desired behavior of rotating the robot to the left and constantly checking sensor readings while navigating. 

###
7.// INSTRUCTIONS: Use only the following behaviors {'detect_nearest_hazard': 'Action: Detect the nearest hazard in the environment and mark it as danger. Always returns True.', 'evade_hazard': 'Action: Move away from the nearest hazard at a speed of 4 units/second. Always returns True.', 'defend_against_hazard': 'Action: Deploy a defensive mechanism to protect against the nearest hazard. Returns True when the hazard is no longer a threat.', 'explore': 'Action: Explore the environment by moving in a random direction. Always returns True.', 'is_hazard_detected': 'Condition: Check if any hazards are detected in the environment. Returns True if a hazard is detected, False otherwise.', 'is_defensive_mechanism_deployed': 'Condition: Check if the defensive 
###
4.// INSTRUCTIONS: Use only the following behaviors {'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Avoid obstacles, continue gathering resources, and return to the nest if resources are full.'
4.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>is_obstacle_detected</Condition> <Action>avoid_obstacle</Action> </Sequence> <Sequence> <Condition>is_agent_in_nest</Condition> <Action>task_completed</Action> </Sequence> </Selector> <Sequence> <Condition>is_path_clear</Condition> <Action>continue_movement_agent</Action> </Sequence> <Sequence> <Condition>is_target_detected</Condition> <Action>continue_movement_agent</Action> </Sequence> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'patrol': 'Action: Patrol between two designated locations. Returns True if successful, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Patrol between two designated locations, avoid obstacles, and change color to green when reaching the first location.'
5.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>is_obstacle_detected</Condition> <Action>avoid_obstacle</Action> </Sequence> <Action>continue_movement_agent</Action> </Selector> <Sequence> <Condition>is_agent_in_nest</Condition> <Action>change_color_to_green</Action> <Action>patrol</Action> </Sequence> <Sequence> <Condition>is_agent_in_nest</Condition> <Action>task_completed</Action> </Sequence> </Sequence> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'random_movement': 'Action: Move randomly for a set amount of time. Returns True if completed successfully, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Randomly explore the environment while avoiding obstacles and change color to green after 10 seconds of movement.'
6.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>is_obstacle_detected</Condition> <Action>avoid_obstacle</Action> </Sequence> <Action>continue_movement_agent</Action> </Selector> <Sequence> <Condition>is_target_reached</Condition> <Action>change_color_to_green</Action> <Action>random_movement</Action> </Sequence> <Sequence> <Condition>is_target_reached</Condition> <Action>task_completed</Action> </Sequence> </Sequence> </BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical
###
3.// INSTRUCTIONS: Use only the following behaviors {'change_color_to_red': 'Action: Change agent's color to red. Always returns True.', 'change_color_to_yellow': 'Action: Change agent's color to yellow. Always returns True.', 'move_forward': 'Action: Move the agent forward 1 unit. Always returns True.', 'turn_left': 'Action: Turn the agent 90 degrees to the left. Always returns True.', 'turn_right': 'Action: Turn the agent 90 degrees to the right. Always returns True.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 5 units. Returns True if the target is within 5 units of distance, False otherwise.', 'stop': 'Action: Stop the agent's movement. Always returns True.', 'is_at_edge': 'Condition: Check if agent is at the edge of the environment. Returns True if agent is at the edge, False otherwise.', 'is_obstacle_detected': 'Condition: Check if an obstacle is detected. Returns True if an obstacle is detected, False otherwise.', 'is_wall_detected': 'Condition: Check if a wall is detected in front of the agent. Returns True if a wall is detected, False otherwise.', 'update_map': 'Action: Update the map with agent's current location. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3.// USER COMMAND: generate behavior tree to 'move forward, if target is detected, turn left, if at edge, stop and update map.'
3.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>is_target_detected</Condition> <Action>turn_left</Action> </Sequence> <Sequence> <Condition>is_wall_detected</Condition> <Action>stop</Action> <Action>update_map</Action> </Sequence> <Sequence> <Condition>is_obstacle_detected</Condition> <Action>move_forward</Action> </Sequence> </Selector> </BehaviorTree>

###
4.// INSTRUCTIONS: Use only the following behaviors {'send_signal_to_team': 'Action: Send a signal to other robots. Always returns True.', 'is_team_member_inrange': 'Condition: Check if a team member is within communication range. Returns True if a team member is within range, False otherwise.', 'is_team_member_disabled': 'Condition: Check if a team member has been disabled. Returns True if a team member is disabled, False otherwise.', 'enable_support_mode': 'Action: Enable support mode to assist team members. Always returns True.', 'disable_support_mode': 'Action: Disable support mode. Always returns True.', 'navigate_to_target': 'Action: Move towards the target location. Always returns True.', 'is_target_reached': 'Condition: Check if target is within 2 units. Returns True if the target is within 2 units, False otherwise.', 'log_location': 'Action: Log current location in the environment. Always returns True.', 'collect_data': 'Action: Collect data from the environment. Always returns True.', 'analyze_data': 'Action: Analyze collected data for decision-making. Always returns True.', 'is_environment_safe': 'Condition: Check if the environment is safe. Returns True if environment is safe, False otherwise.', 'is_task_completed': 'Condition: Check if the task has been completed. Returns True if task is completed, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'log current location, if team member is disabled, send signal to other robots and enable support mode, navigate to target location, collect and analyze data, if environment is safe, disable support mode and log current location again'
4.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>is_team_member_disabled</Condition> <Action>send_signal_to_team</Action> <Action>enable_support_mode</Action> </Sequence> <Sequence> <Condition>is_target_reached</Condition> <Action>collect_data</Action> <Action>analyze_data</Action> </Sequence> <Sequence> <Condition>is_task_completed</Condition> <Condition>is_environment_safe</Condition> <Action>disable_support_mode</Action> </Sequence> <Sequence> <Action>log_location</Action> <Action>collect_data</Action> <Action>analyze_data</Action> </Sequence> </Selector> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'increment_score': 'Action: Increment the agent's score. Always returns True.', 'is_enemy_detected': 'Condition: Check if an enemy is detected. Returns True if an enemy is detected, False otherwise.', 'move_to_enemy': 'Action: Move towards the detected enemy. Always returns True.', 'attack_enemy': 'Action: Engage in combat with the enemy. Always returns True.', 'is_agent_damaged': 'Condition: Check if the agent has been damaged. Returns True if agent is damaged, False otherwise.', 'flee': 'Action: Flee from the enemy. Always returns True.', 'is_safe_spot_reached': 'Condition: Check if a safe spot is within 10 units. Returns True if a safe spot is within 10 units, False otherwise.', 'rest': 'Action: Rest and regain health. Always returns True.', 'is_score_threshold_reached': 'Condition: Check if the agent's score has reached a threshold. Returns True if score is equal to or greater than threshold, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'if enemy is detected, move towards and attack, if agent is damaged, flee and rest at a safe spot, repeat until score threshold is reached'
5.// OUTPUT:
<BehaviorTree> <Sequence> <Condition>is_enemy_detected</Condition> <Action>move_to_enemy</Action> <Action>attack_enemy</Action> </Sequence> <Sequence> <Condition>is_agent_damaged</Condition> <Action>flee</Action> <Condition>is_safe_spot_reached</Condition> <Action>rest</Action> </Sequence> <Condition>is_score_threshold_reached</Condition> <Action>increment_score</Action> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'collect_item': 'Action: Collect the specified item. Always returns True.', 'is_item_detected': 'Condition: Check if a specific item is detected. Returns True if item is detected, False otherwise.', 'navigate_to_storage': 'Action: Move towards the designated storage location. Always returns True.', 'drop_item': 'Action: Drop the collected item at the designated storage location. Always returns True.', 'is_storage_full': 'Condition 
###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Follow a set path of coordinates, form a vertical line, and then change color to white.'Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Sequence> <Condition>is_line_formed</Condition> <Action>change_color_to_white</Action> <Action>agent_movement_freeze</Action> <Action>task_completed</Action> </Sequence> <Action>form_line</Action> </Sequence> <Action>follow_coordinates</Action> </Selector> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'attack_target': "Action: Move towards and attack a detected target. Returns False if unable to attack, True if successful.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Search the environment for the target, form a line, and attack the target.'Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>is_target_detected</Condition> <Action>change_color_to_green</Action> <Action>attack_target</Action> </Sequence> <Action>wander</Action> </Selector> <Sequence> <Condition>is_line_formed</Condition> <Action>form_line</Action> </Sequence> </Sequence> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_collision': 'Action: Avoid colliding with other agents. Always returns True.', 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'form_grid': 'Action: Form a grid pattern with other agents. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_formed_grid': 'Condition: Check if the grid pattern is formed. Returns True if the agent is in the grid pattern, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Avoid obstacles and other agents, form a grid pattern, and change color to green.'Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Sequence> <Condition>is_obstacle_detected</Condition> <Action>avoid_obstacle</Action> </Sequence> <Action>avoid_collision</Action> </Sequence> <Sequence> <Condition>is_formed_grid</Condition> <Action>change_color_to_green</Action> <Action>task_completed</Action> </Sequence> <Action>form_grid</Action> </Selector> </BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze
###
4.// INSTRUCTIONS: Use only the following behaviors {'move_to_coordinates': 'Action: Move to designated coordinates. Always returns True.', 'return_to_base': 'Action: Return to the base/starting point. Always returns True.', 'collect_sample': 'Action: Collect a sample object at the current location. Returns True if a sample is successfully collected, False if no sample is present.', 'load_sample': 'Action: Load the collected sample into the designated container. Returns True if the sample is successfully loaded, False if the container is full or unavailable.', 'unload_sample': 'Action: Unload the sample from the designated container. Returns True if the sample is successfully unloaded, False if the container is empty or unavailable.', 'has_sample': 'Condition: Check if the robot is currently carrying a sample. Returns True if the robot is carrying a sample, False otherwise.', 'is_eta_within_range': 'Condition: Check if the estimated arrival time to the designated location is within the specified range. Returns True if the ETA is within range, False otherwise.', 'is_container_available': 'Condition: Check if the designated container for sample storage is currently available. Returns True if the container is available, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Generate a behavior tree for a robotic vehicle to autonomously collect and transport samples to a designated location for analysis and unload them at the base.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_container_available</Condition><Action>collect_sample</Action><Sequence><Condition>has_sample</Condition><Action>load_sample</Action></Sequence></Sequence><Sequence><Condition>is_eta_within_range</Condition><Action>move_to_coordinates</Action><Sequence><Condition>is_at_designated_location</Condition><Action>unload_sample</Action></Sequence></Sequence><Sequence><Condition>is_sample_detected</Condition><Action>collect_sample</Action></Sequence><Sequence><Condition>is_at_base</Sequence><Action>return_to_base</Action></Sequence></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'scan_surroundings': 'Action: Use sensors to scan the surroundings. Always returns True.', 'identify_objects': 'Action: Analyze the data from the scan to identify objects and their characteristics. Returns True if objects are successfully identified, False otherwise.', 'collect_data': 'Action: Collect data from the identified objects. Returns True if data is successfully collected, False if no objects are detected.', 'store_data': 'Action: Store the collected data in the internal memory. Returns True if data is successfully stored, False if memory is full.', 'retrieve_data': 'Action: Retrieve previously stored data from memory. Returns True if data is successfully retrieved, False otherwise.', 'is_object_detected': 'Condition: Check if any objects were detected during the scan. Returns True if objects were detected, False otherwise.', 'is_data_collected': 'Condition: Check if any data was collected from the identified objects. Returns True if data was collected, False otherwise.', 'is_data_stored': 'Condition: Check if any data has been stored in the internal memory. Returns True if data has been stored, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Generate a behavior tree for a drone to autonomously scan and collect data from the environment to be stored and retrieved for analysis.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_object_detected</Condition><Sequence><Condition>is_data_collected</Condition><Action>store_data</Action></Sequence><Action>collect_data</Action></Sequence><Sequence><Condition>is_data_stored</Condition><Action>retrieve_data</Action></Sequence><Sequence><Action>scan_surroundings</Action></Sequence></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'approach_target': 'Action: Move towards the designated target. Always returns True.', 'search_pattern': 'Action: Utilize a predefined search pattern to scan the area. Returns True if target is detected during the search, False otherwise.', 'communicate_location': 'Action: Communicate the location of the target to other robots. Returns True if the location is successfully communicated, False otherwise.', 'identify_target': 'Action: Identify the target using sensors and data analysis. Returns True if the target is successfully identified, False if no target is present.', 'surround_target': 'Action: Surround the target to prevent escape. Always returns True.', 'has_target': 'Condition: Check if the robot is currently in possession of the target. Returns True if the robot has the target, False otherwise.', 'is_target_detected': 'Condition: Check if the target is in the vicinity. Returns True if the target is within sensor range, False otherwise.', 'is_target_lost': 'Condition: Check if the target has been lost during pursuit or search. Returns True if the target is lost, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Generate a behavior tree for a swarm of robots to collectively search and capture a designated target.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_target_detected</Condition><Sequence><Condition>is_target_lost</Condition><Action>communicate_location</Action></Sequence><Action>approach_target</Action></Sequence><Sequence><Condition>is_target_detected</Condition><Action>identify_target</Action><Action>surround_target</Action></Sequence><Sequence><Condition>is_target_detected</Condition><Action>search_pattern</Action><Sequence><Condition>is_target_detected</Condition><Action>surround_target</Action></Sequence></Sequence></Selector></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'maintain_formation': 'Action: Maintain the current formation and direction. Always returns True.', 'follow_leader': 'Action: Follow the designated leader robot. Always returns True.', 'rotate_right': 'Action: Rotate the robot 45 degrees to the right. Always returns True.', 'is_leader_within_range': 'Condition: Check if the designated leader is within sensor range. Returns True if leader is within range, False otherwise.', 'is_formation_disrupted': 'Condition: Check if the current formation and direction are disrupted or lost. Returns True if the formation is disrupted, False otherwise.', 'is_formation_complete': 'Condition: Check if all robots in the swarm have successfully joined the formation. Returns True if formation is complete, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: Generate a behavior tree for a swarm of robots to maintain formation while following a designated leader and avoiding disruptions.
7.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition<BehaviorTree> <Selector> <Sequence> <Condition>is_intruder_detected</Condition> <Sequence> <Action>form_line</Action> <Action>change_color_to_red</Action> </Sequence> </Sequence> <Action>wander</Action> <Action>monitor_area</Action> </Selector> </BehaviorTree>

###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_circle': 'Action: Form a circle with radius of 10 units. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_circle_formed': 'Condition: Check if a circle is formed with radius of 10 units. Returns True if the circle is formed, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Form a circle with a radius of 10 units and change color to green after'. Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree> <Sequence> <Action>form_circle</Action> <Condition>is_circle_formed</Condition> <Action>change_color_to_green</Action> </Sequence> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_circle': 'Action: Form a circle with radius of 10 units. Always returns True.', 'is_circle_formed': 'Condition: Check if a circle is formed with radius of 10 units. Returns True if the circle is formed, False otherwise.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Avoid obstacles while moving towards the target and form a circle with a radius of 10 units when target is reached'. Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Action>avoid_obstacle</Action> <Condition>is_path_clear</Condition> <Action>move_towards_target</Action> <Condition>is_target_reached</Condition> <Action>form_circle</Action> </Sequence> <Action>wander</Action> </Selector> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_polygon': 'Action: Form a polygon with 6 sides and radius of 5 units. Always returns True.', 'is_polygon_formed': 'Condition: Check if a polygon with 6 sides and radius of 5 units is formed. Returns True if the polygon is formed, False otherwise.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Perform a coordinated polygon formation with 6 robots using a radius of 5 units'. Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Action>form_polygon</Action> <Condition>is_polygon_formed</Condition> </Sequence 
###
4.// INSTRUCTIONS: Use only the following behaviors {'move_forward': 'Action: Move one step forward. Always returns True.', 'rotate_left': 'Action: Rotate the agent 90 degrees to the left. Always returns True.', 'rotate_right': 'Action: Rotate the agent 90 degrees to the right. Always returns True.', 'turn_around': 'Action: Turn the agent completely around. Always returns True.', 'detect_cone': 'Condition: Check if the agent is facing a cone obstacle. Returns True if a cone obstacle is detected, False otherwise.', 'detect_wall': 'Condition: Check if the agent is facing a wall obstacle. Returns True if a wall obstacle is detected, False otherwise.', 'is_target_reached': 'Condition: Check if the agent has reached its designated target. Returns True if the target is reached, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Generate a behavior tree for a swarm of robots to navigate through a maze and reach the designated target.Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_target_reached</Condition><Action>turn_around</Action></Sequence><Sequence><Condition>detect_cone</Condition><Selector><Sequence><Condition>detect_wall</Condition><Action>rotate_right</Action></Sequence><Action>rotate_left</Action></Selector></Sequence><Action>move_forward</Action></Selector></BehaviorTree>
 
###
5.// INSTRUCTIONS: Use only the following behaviors {'fly_towards_light': 'Action: Fly towards the nearest light source. Always returns True.', 'fly_away_from_light': 'Action: Fly away from the nearest light source. Always returns True.', 'circle_around_light': 'Action: Fly in circles around the nearest light source. Always returns True.', 'collect_nectar': 'Action: Collect nectar from flowers on the ground. Always returns True.', 'deposit_nectar': 'Action: Deposit collected nectar into the hive. Always returns True.', 'detect_enemy': 'Condition: Check if an enemy is spotted nearby. Returns True if an enemy is detected, False otherwise.', 'detect_hive': 'Condition: Check if the agent is near the hive. Returns True if the hive is detected, False otherwise.', 'has_nectar': 'Condition: Check if the agent has collected nectar. Returns True if nectar has been collected, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Generate a behavior tree for a swarm of honey bees to collect nectar from flowers and defend against predators while returning to the hive once nectar is collected.
5.// OUTPUT:
<BehaviorTree><Sequence><Action>fly_towards_light</Action><Condition>is_nectar_detected</Condition><Action>collect_nectar</Action><Condition>detect_enemy</Condition><Action>fly_away_from_light</Action><Condition>is_hive_detected</Condition><Action>deposit_nectar</Action></Sequence></BehaviorTree> 
 
###
6.// INSTRUCTIONS: Use only the following behaviors {'move_forward': 'Action: Move one unit forward. Always returns True.', 'move_backward': 'Action: Move one unit backward. Always returns True.', 'strafe_left': 'Action: Strafe one unit to the left. Always returns True.', 'strafe_right': 'Action: Strafe one unit to the right. Always returns True.', 'turn_left': 'Action: Turn 90 degrees to the left. Always returns True.', 'turn_right': 'Action: Turn 90 degrees to the right. Always returns True.', 'start_engines': 'Action: Start the engines. Always returns True.', 'stop_engines': 'Action: Stop the engines. Always returns True.', 'is_flying': 'Condition: Check if the agent is currently flying. Returns True if in flight, False otherwise.', 'is_at_destination': 'Condition: Check if the agent has reached its destination. Returns True if the destination has been reached, False otherwise.', 'is_engine_running': 'Condition: Check if the engines are currently running. Returns True if the engines are running, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Generate a behavior tree for a swarm of mini drones to navigate through a maze and reach a designated landing spot while avoiding obstacles.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_at_destination</Condition><Action>stop_engines</Action></Sequence><Sequence><Condition>is_engine_running</Condition><Sequence><Condition>is_obstacle_ahead</Condition><Selector><Sequence><Condition>is_obstacle_to_left</Condition><Action>strafe_left</Action></Sequence><Action>strafe_right</Action></Selector></Sequence></Sequence><Sequence><Condition>is_flying</Condition><Action>turn_right</Action></Sequence><Action>move_forward</Action></Selector></BehaviorTree>
 
###
7.// INSTRUCTIONS: Use only the following behaviors {'detect_incoming_object': 'Action: Detect and track incoming objects. Always returns True.', 'avoid_collision': 'Action: Use path planning to avoid a detected object. Returns True if avoided, False if not.', 'change_speed': 'Action: Change speed of movement. Always returns True.', 'change_direction': 'Action: Change direction of movement. Always returns True.', 'follow_path': 'Action: Follow a predefined path. Returns True if path is successfully followed, False otherwise.', 'approach_target': 'Action: Approach a designated target. Returns True if target is reached, False otherwise.', 'is_collision_detected': 'Condition: Check if a collision is detected. Returns True if a collision is detected, False otherwise.', 'is_target_visible': 'Condition: Check if the designated target is within the agent's line of sight. Returns True if target is visible, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: Generate a behavior tree for a swarm of autonomous cars to navigate through traffic while reaching a designated destination.
7.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_target_visible</Condition><Selector><Sequence><Condition>is_collision_detected</Condition><Action>avoid_collision</Action></Sequence><Selector><Sequence><Condition>is_path_clear</Condition><Action>follow_path</Action></Sequence><Selector><Sequence><Condition>is_object_nearby</Condition><Action>change_speed</Action></Sequence><Action>change_direction</Action></Selector></Selector></Sequence><Sequence><Condition>detect_incoming_object</Condition><Action> 
###
3.// INSTRUCTIONS: Use only the following behaviors {'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_task': 'Action: Change the current task being performed. Always returns True.', 'follow_line': 'Action: Follow a designated line path. Returns True when the line is followed correctly, False otherwise.', 'is_line_reached': 'Condition: Check if the robot reaches the end of a line path. Returns True if the end of the line is reached, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3.// USER COMMAND: generate behavior tree to 'Follow the designated path, avoid obstacles, and change tasks if necessary'. Output only the XML behavior tree without extra text.
3.// OUTPUT:
<BehaviorTree><Sequence><Sequence><Condition>is_target_detected</Condition><Action>task_completed</Action></Sequence><Action>wander</Action></Sequence><Sequence><Condition>is_obstacle_detected</Condition><Action>avoid_obstacle</Action></Sequence><Sequence><Condition>is_line_reached</Condition><Action>change_task</Action></Sequence></BehaviorTree>

###
4.// INSTRUCTIONS: Use only the following behaviors {'change_direction': 'Action: Change the robot's current direction. Always returns True.', 'is_direction_correct': 'Condition: Check if the robot is in the correct direction. Returns True if facing the correct direction, False otherwise.', 'move_forward': 'Action: Move the robot forward. Return True as long as the robot is moving.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'rotate_left_45': 'Action: Rotate the robot 45 degrees to the left. Always returns True.', 'rotate_right_45': 'Action: Rotate the robot 45 degrees to the right. Always returns True.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Navigate through a maze, rotate if facing a dead end, and reach the target'. Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_target_reached</Condition><Action>task_completed</Action></Sequence><Sequence><Condition>is_direction_correct</Condition><Action>move_forward</Action></Sequence><Sequence><Action>wander</Action></Sequence></Selector><Selector><Sequence><Condition>is_direction_correct</Condition><Sequence><Condition>rotate_left_45</Condition><Action>change_direction</Action></Sequence><Sequence><Action>wander</Action></Sequence></Sequence><Sequence><Condition>is_direction_correct</Condition><Sequence><Condition>rotate_right_45</Condition><Action>change_direction</Action></Sequence><Sequence><Action>wander</Action></Sequence></Sequence></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'adjust_heading': 'Action: Adjust the agent's heading based on environmental conditions. Always returns True.', 'avoid_collision': 'Action: Avoid potential collisions by adjusting heading. Always returns True.', 'is_heading_correct': 'Condition: Check if the agent's heading is aligned with the target direction. Returns True if heading is correct, False otherwise.', 'reach_destination': 'Action: Move towards the designated destination. Returns True as long as the destination is not reached.', 'predict_collision': 'Condition: Check for potential collisions along the current heading. Returns True if a collision is predicted, False otherwise.', 'move_straight': 'Action: Move the agent straight in the current heading. Returns True as long as the agent is moving straight.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Avoid collisions while reaching the designated destination'. Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>reach_destination</Condition><Action>task_completed</Action></Sequence><Sequence><Condition>is_heading_correct</Condition><Action>move_straight</Action></Sequence><Sequence><Condition>predict_collision</Condition><Action>avoid_collision</Action></Sequence><Action>wander</Action></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'move_forward': 'Action: Move the agent forward. Return True as long as the agent is moving.', 'turn_left_90': 'Action: Turn the agent 90 degrees to the left. Returns True if successfully turned, False otherwise.', 'turn_right_90': 'Action: Turn the agent 90 degrees to the right. Returns True if successfully turned, False otherwise.', 'follow_magnetic_field': 'Action: Follow the magnetic field towards the target. Returns True as long as the agent follows the field.', 'is_at_target': 'Condition: Check if the agent has reached the target. Returns True if the agent is at the target, False otherwise.', 'is_magnetic_field_detected': 'Condition: Check for the presence of a magnetic field. Returns True if a magnetic field is detected, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Follow the magnetic field to reach the target location'. Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_at_target</Condition><Action>task_completed</Action></Sequence><Sequence><Condition>is_magnetic_field_detected</Condition><Action>follow_magnetic_field</Action></Sequence><Action>wander</Action></Selector><Selector><Sequence><Condition>is_magnetic_field_detected</Note: This is just an example and additional nodes and behaviors can be added as needed. 

###
3.// INSTRUCTIONS: Use only the following behaviors {'move_left': 'Action: Move one unit to the left. Always returns True.', 'move_right': 'Action: Move one unit to the right. Always returns True.', 'move_up': 'Action: Move one unit up. Always returns True.', 'move_down': 'Action: Move one unit down. Always returns True.', 'power_on': 'Action: Power on the robot. Always returns True.', 'power_off': 'Action: Power off the robot. Always returns True.', 'is_obstacle_detected': 'Condition: Check for obstacles in the surrounding area. Returns True if an obstacle is detected, False otherwise.', 'is_self_powered': 'Condition: Check if the robot has sufficient power. Returns True if the battery level is above 20%, False otherwise.', 'is_reaching_destination': 'Condition: Check if the robot is within 5 units of the destination. Returns True if the robot is close to the destination, False otherwise.', 'is_stuck': 'Condition: Check if the robot is unable to move. Returns True if the robot is stuck, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3.// USER COMMAND: Generate a behavior tree for a single robot to navigate through a maze while conserving battery power and avoiding obstacles.
3.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_obstacle_detected</Condition><Action>power_off</Action></Sequence><Sequence><Condition>is_obstacle_detected</Condition><Selector><Sequence><Condition>is_stuck</Condition><Action>power_off</Action></Sequence><Selector><Sequence><Condition>is_self_powered</Condition><Selector><Sequence><Condition>is_reaching_destination</Condition><Action>power_off</Action></Sequence><Sequence><Action>move_left</Action></Sequence></Selector></Sequence><Sequence><Selector><Sequence><Condition>is_self_powered</Condition><Selector><Sequence><Condition>is_reaching_destination</Condition><Action>power_off</Action></Sequence><Sequence><Action>move_right</Action></Sequence></Selector></Sequence><Sequence><Selector><Sequence><Condition>is_self_powered</Condition><Selector><Sequence><Condition>is_reaching_destination</Condition><Action>power_off</Action></Sequence><Sequence><Action>move_up</Action></Sequence></Selector></Sequence><Selector><Sequence><Condition>is_self_powered</Condition><Selector><Sequence><Condition>is_reaching_destination</Condition><Action>power_off</Action></Sequence><Sequence><Selector><Sequence><Condition>is_self_powered</Condition><Selector><Sequence><Condition>is_reaching_destination</Condition><Action>power_off</Action></Sequence><Sequence><Action>move_down</Action></Sequence></Selector></Sequence><Action>power_on</Action></Sequence></Selector></Sequence><Action>power_on</Action></Sequence></Selector></Sequence></Sequence></BehaviorTree>

###
4.// INSTRUCTIONS: Use only the following behaviors {'open_door': 'Action: Open target door. Always returns True.', 'close_door': 'Action: Close target door. Returns True if the door is closed successfully, False otherwise.', 'unlock_door': 'Action: Unlock target door. Returns True if the door is unlocked successfully, False otherwise.', 'is_door_closed': 'Condition: Check if the target door is currently closed. Returns True if the door is closed, False otherwise.', 'is_door_locked': 'Condition: Check if the target door is currently locked. Returns True if the door is locked, False otherwise.', 'is_door_obstacle_detected': 'Condition: Check for obstacles near the door. Returns True if an obstacle is detected, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Generate a behavior tree for a swarm of robots to work together to unlock and open a locked door while avoiding potential obstacles.
4.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_door_obstacle_detected</Condition><Action>wander</Action></Sequence><Sequence><Condition>is_door_locked</Condition><Action>unlock_door</Action></Sequence><Sequence><Condition>is_door_closed</Condition><Selector><Sequence><Condition>is_door_obstacle_detected</Condition><Action>avoid_obstacle</Action></Sequence><Selector><Sequence><Action>open_door</Action><Condition>task_completed</Condition></Sequence><Sequence><Action>close_door</Action><Condition>task_completed</Condition></Sequence></Selector></Sequence></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'detect_water_source': 'Action: Attempt to detect a nearby water source. Always returns True.', 'collect_water': 'Action: Collect water from detected source. Returns True if water is successfully collected, False otherwise.', 'transport_water': 'Action: Transport collected water to designated location. Always returns True.', 'is_water_detected': 'Condition: Check if water source has been detected. Returns True if a water source is detected, False otherwise.', 'is_water_collected': 'Condition: Check if water has been successfully collected. Returns True if water is collected, False otherwise.', 'is_destination_reached': 'Condition: Check if the designated location has been reached. Returns True if the destination is reached, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles while traveling. Returns True if an obstacle is detected, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Generate a behavior tree for a single robot to locate, collect, and transport water while navigating through obstacles.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_obstacle_detected</Condition><Action>avoid_obstacle</Action></Sequence><Sequence><Condition>is_water_detected</Condition><Selector><Sequence><Condition>is_obstacle_detected</Condition><Action>avoid_obstacle</Action></Sequence><Selector><Sequence><Condition>is_water_collected</Condition><Action>transport_water</Action></Sequence><Sequence><Action>collect_water</Action><Condition>task_completed</Condition></Sequence></Selector></Sequence></Selector></Sequence></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'detect_intruder': 'Action: Scan surroundings for potential intruder. Returns True if an intruder is detected, False otherwise.', 'alert_team': 'Action: Alert team members of potential intrusion. Always returns True.', 'stop_intruder': 'Action: Physically intervene and stop the intruder. Returns True if the intruder is successfully stopped, False otherwise.', 'is_intruder_detected': 'Condition: Check if an intruder has been detected. Returns True if an intruder is detected, False otherwise.', 'is_intruder_in_range': 'Condition: Check if the intruder is within physical reach. 
###
4.// INSTRUCTIONS: Use only the following behaviors {'move_forward': 'Action: Move one step forward while maintaining formation. Always returns True.', 'scan_surroundings': 'Action: Scan the surrounding area for any possible threats or obstacles. Always returns True.', 'react_to_attack': 'Action: React to any attacking threat detected. Always returns True.', 'repair_network': 'Action: Repair and reestablish connections within the robot network. Always returns True.', 'is_obstacle_detected': 'Condition: Check if there is an obstacle blocking the path ahead for the formation. Returns True if an obstacle is detected, False otherwise.', 'is_network_broken': 'Condition: Check if the robot network is broken or disconnected. Returns True if the network is broken, False otherwise.', 'is_threat_detected': 'Condition: Check if there are any potential threats in the immediate surroundings. Returns True if a threat is detected, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Scan for threats, then move forward while repairing network and reacting to any attacks from detected threats.'
4.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>is_network_broken</Condition><Action>repair_network</Action></Sequence><Action>move_forward</Action></Selector><Sequence><Condition>is_threat_detected</Condition><Action>scan_surroundings</Action><Action>react_to_attack</Action></Sequence></Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'move_towards_friend': 'Action: Move towards the nearest friendly robot in need of assistance. Always returns True.', 'move_to_safety': 'Action: Move to a predetermined safe location. Always returns True.', 'broadcast_location': 'Action: Broadcast the robot's current location to the rest of the swarm. Always returns True.', 'is_friend_in_danger': 'Condition: Check if there is a nearby friend in danger. Returns True if a friend is in danger, False otherwise.', 'is_in_safe_zone': 'Condition: Check if the robot is currently in a safe zone. Returns True if the robot is in a safe zone, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Move towards a friend in danger while staying in a safe zone and broadcasting location.'
5.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>is_friend_in_danger</Condition><Action>move_towards_friend</Action></Sequence><Action>wander</Action></Selector><Condition>is_in_safe_zone</Condition><Action>broadcast_location</Action></Sequence></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'move_forward': 'Action: Move one step forward while maintaining formation. Always returns True.', 'circle_around_target': 'Action: Circle around a target while maintaining a safe distance. Always returns True.', 'return_to_base': 'Action: Return to the base/nest location. Always returns True.', 'is_target_reached': 'Condition: Check if the target has been reached. Returns True if the target is within a certain distance, False otherwise.', 'is_enemy_detected': 'Condition: Check if an enemy is detected in the vicinity. Returns True if an enemy is detected, False otherwise.', 'is_blocked': 'Condition: Check if the path is blocked by an obstacle. Returns True if the path is blocked, False otherwise.', 'is_formation_broken': 'Condition: Check if the robot formation is broken or misaligned. Returns True if the formation is broken, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Defend the base by circling around the target while maintaining formation, and return to base if the target is destroyed.'
6.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>is_enemy_detected</Condition><Action>circle_around_target</Action><Condition>is_blocked</Condition><Action>return_to_base</Action></Sequence><Action>move_forward</Action></Selector><Condition>is_formation_broken</Condition><Action>reform_formation</Action></Sequence></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'move_towards_target': 'Action: Move towards the designated target location. Always returns True.', 'drop_pheromones': 'Action: Drop a trail of pheromones behind the robot. Always returns True.', 'follow_pheromones': 'Action: Follow the trail of pheromones left by other robots. Always returns True.', 'is_target_reached': 'Condition: Check if the target has been reached. Returns True if the target is within a certain distance, False otherwise.', 'is_pheromone_detected': 'Condition: Check if pheromones are detected in the vicinity. Returns True if pheromones are detected, False otherwise.', 'is_pheromone_trail_followed': 'Condition: Check if the robot is currently following a pheromone trail. Returns True if the robot is following a trail, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: generate behavior tree to 'Find and reach the designated target location by dropping and following a trail of pheromones.'
7.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>is_pheromone_detected</Condition><Sequence><Action>drop_pheromones</Action><Action>move_forward</Action></Sequence></Sequence><Condition>is_pheromone_trail_followed</Condition><Action>follow_pheromones</Action></Selector> <Condition>is_target_reached</Condition></Sequence></BehaviorTree>###
3.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'enter_red_zone': 'Condition: Check if agent is within a red zone. Returns True if agent is in the red zone, False otherwise.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'move_to_target': 'Action: Move towards the target. Always returns True.', 'scan_surroundings': 'Action: Scan the surroundings for targets. Always returns True.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3.// USER COMMAND: generate behavior tree to 'Scan surroundings for targets, if red zone detected move towards target, once target reached, change color to green, then return to nest and change color to white.'Output only the XML behavior tree without extra text.
3.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>scan_surroundings</Action><Condition>is_target_detected</Condition><Sequence><Selector><Condition>is_agent_in_nest</Condition><Action>change_color_to_white</Action></Selector><Sequence><Condition>enter_red_zone</Condition><Action>move_to_target</Action><Action>change_color_to_green</Action><Action>task_completed</Action></Sequence></Sequence></Sequence><Sequence><Condition>is_agent_in_nest</Condition><Action>change_color_to_white</Action></Sequence></Selector></BehaviorTree>
###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_red': "Action: Change agent's color to red. Always returns True.", 'change_speed_fast': 'Action: Change agent movement speed to fast. Always returns True.', 'do_nothing': 'Action: Do nothing. Always returns True.', 'is_agent_idle': 'Condition: Check if agent is idle. Returns True if the agent is not currently performing any tasks, False otherwise.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'move_in_spiral': 'Action: Move in a spiral motion. Always returns True.', 'move_to_obstacle': 'Action: Move towards the detected obstacle. Always returns True.', 'scan_surroundings': 'Action: Scan the surroundings for obstacles. Always returns True.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Scan surroundings for obstacles, if obstacle detected move towards it, else move in spiral motion. Once target reached, change color to red, then return to nest and change speed to fast.'Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>scan_surroundings</Action><Condition>is_agent_idle</Condition><Selector><Sequence><Condition>is_agent_in_nest</Condition><Action>change_speed_fast</Action></Sequence><Sequence><Condition>is_agent_in_nest</Condition><Action>move_in_spiral</Action></Sequence><Sequence><Action>move_to_obstacle</Action><Action>change_color_to_red</Action><Condition>is_agent_in_nest</Condition><Action>change_speed_fast</Action></Sequence></Selector></Sequence><Sequence><Condition>is_agent_in_nest</Condition><Action>change_speed_fast</Action></Sequence></Selector></BehaviorTree>
###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_blue': "Action: Change agent's color to blue. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'do_nothing': 'Action: Do nothing. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'move_to_specific_location': 'Action: Move to a specific location. Always returns True.', 'reset_agent_position': 'Action: Reset agent position to starting point. Always returns True.', 'scan_surroundings': 'Action: Scan the surroundings for obstacles. Always returns True.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Start wandering, if obstacle detected move to specific location, change color to blue, then reset agent position and return to navigating.'Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>wander</Action><Selector><Condition>is_agent_in_nest</Condition><Action>scan_surroundings</Action></Selector><Selector><Condition>is_agent_idle</Condition><Action>move_to_specific_location</Action><Action>change_color_to_blue</Action><Condition>is_agent_in_nest</Condition><Action>reset_agent_position</Action><Action>continue_movement_agent</Action></Selector></Sequence></Selector></BehaviorTree>
###
6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_red': "Action: Change agent's color to red. Always returns True.", 'do_nothing': 'Action: Do nothing. Always returns True.', 'explore_zone_1': 'Action: Explore and gather data in zone 1. Always returns True.', 'explore_zone_2': 'Action: Explore and 
###
3.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'fly_to_target': 'Action: Fly towards the target. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_in_sight': 'Condition: Check if target is within the agent's line of sight. Returns True if the target is visible, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'land_on_target': 'Action: Land on the target. Always returns True.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3.// USER COMMAND: generate behavior tree to 'Fly to the target, land on it, and change color to green.'
Output only the XML behavior tree without extra text.
3.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>is_path_clear</Condition> <Action>fly_to_target</Action> <Condition>is_target_reached</Condition> <Action>land_on_target</Action> <Action>change_color_to_green</Action> <Action>agent_movement_freeze</Action> <Action>task_completed</Action> </Sequence> <Action>avoid_obstacle</Action> </Selector> </BehaviorTree>
 
###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'follow_path': 'Action: Follow the predefined path. Returns True if the path is completed, False otherwise.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'navigate_to_target': 'Action: Navigate to the target. Returns True if the target is reached, False otherwise.', 'stop': 'Action: Stop all movement of the agent. Always returns True.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Navigate to target and stop.'
Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>is_path_clear</Condition> <Action>navigate_to_target</Action> <Condition>is_target_reached</Condition> <Action>stop</Action> <Action>task_completed</Action> </Sequence> <Action>avoid_obstacle</Action> </Selector> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'change_color_to_blue': "Action: Change agent's color to blue. Always returns True.", 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_red': "Action: Change agent's color to red. Always returns True.", 'explore_surroundings': "Action: Explore the surroundings. Always returns True.", 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_blue_target_found': 'Condition: Check if a blue target is detected. Returns True if a blue target is found, False otherwise.', 'is_green_target_found': 'Condition: Check if a green target is detected. Returns True if a green target is found, False otherwise.', 'is_red_target_found': 'Condition: Check if a red target is detected. Returns True if a red target is found, False otherwise.', 'reach_blue_target': 'Action: Move towards the blue target. Returns True if the target is reached, False otherwise.', 'reach_green_target': 'Action: Move towards the green target. Returns True if the target is reached, False otherwise.', 'reach_red_target': 'Action: Move towards the red target. Returns True if the target is reached, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Explore the surroundings and reach red target.'
Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>is_red_target_found</Condition> <Action>reach_red_target</Action> <Action>agent_movement_freeze</Action> </Sequence> <Action>explore_surroundings</Action> </Selector> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'change_color_to_orange': "Action: Change agent's color to orange. Always returns True.", 'change_distance_threshold': 'Action: Change the distance threshold to trigger behavior. Returns True if the threshold is successfully changed, False otherwise.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_orange_object_detected': 'Condition: Check if an orange object is detected. Returns True if an orange object is found, False otherwise.', 'locate_object': 'Action: Move towards the detected object. Returns True if the object is 
###
3.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3.// USER COMMAND: generate behavior tree to 'Form a vertical line, check for obstacles, avoid and continue movement if none detected.' Output only the XML behavior tree without extra text.
3.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Action>form_line</Action> <Condition>is_obstacle_detected</Condition> <Action>avoid_obstacle</Action> </Sequence> <Action>agent_movement_freeze</Action> </Selector> <Action>continue_movement_agent</Action> </Sequence> </BehaviorTree>
 
###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Change agent's color to white, move towards target and form a line upon reaching within 20 units' Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>is_target_detected</Condition> <Action>change_color_to_white</Action> <Action>agent_movement_freeze</Action> </Sequence> <Action>continue_movement_agent</Action> <Condition>is_target_reached</Condition> <Action>form_line</Action> <Action>task_completed</Action> </Selector> </Sequence> </BehaviorTree>
 
###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Form a line, detect obstacles and avoid if present, continue movement regardless' Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Action>form_line</Action> <Condition>is_obstacle_detected</Condition> <Action>avoid_obstacle</Action> </Sequence> <Action>agent_movement_freeze</Action> </Selector> <Action>continue_movement_agent</Action> </Sequence> </BehaviorTree>
 
###
6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle
###
3.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3.// USER COMMAND: generate behavior tree to 'Navigate to a specific target' Output only the XML behavior tree without extra text.
3.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_path_clear<Condition><Condition>is_target_detected</Condition><Action>continue_movement_agent</Action></Sequence><Condition>is_target_reached</Condition><Action>agent_movement_freeze</Action></BehaviorTree>

###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Form a vertical line at the center and change color to green' Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree><Sequence><Action>form_line</Action><Action>change_color_to_green</Action></Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Change color to green when target is detected' Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_target_detected</Condition><Action>change_color_to_green</Action></Sequence></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Return to nest (stop when in nest)' Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_agent_in_nest</Condition><Action>agent_movement_freeze</Action></Sequence><Action>continue_movement_agent</Action></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'change_color_to_white': "Action: Change agent's color to white. Always returns True."}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: generate behavior tree to 'Go to a specific location, change color to white, then return to nest' Output only the XML behavior tree without extra text.
7.// OUTPUT:
<BehaviorTree><Sequence><Action>continue_movement_agent</Action><Condition>is_agent_in_nest</Condition><Action>change_color_to_white</Action></Sequence><Action>agent_movement_freeze</Action></BehaviorTree>
Note: The behavior tree assumes that the robots are already in a formation and have the ability to detect and lift the object.

###
3.// INSTRUCTIONS: Use only the following behaviors {'move_forward': 'Action: Move one step forward. Always returns True.', 'turn_left': 'Action: Turn 90 degrees left. Always returns True.', 'turn_right': 'Action: Turn 90 degrees right. Always returns True.', 'is_wall_detected': 'Condition: Check if a wall or obstacle is detected in front of the robot. Returns True if a wall is detected, False otherwise.', 'is_junction_reached': 'Condition: Check if a junction or intersection is reached. Returns True if a junction is reached, False otherwise.', 'is_target_reached': 'Condition: Check if the target location is reached. Returns True if the target location is reached, False otherwise.', 'retrace_path': 'Action: Retrace the traveled path to return to the starting location. Always returns True.', 'grab_object': 'Action: Grab an object in front of the robot. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3.// USER COMMAND: Create a behavior tree for a single robot to navigate a maze, reach a target location, and pick up an object along the way if possible.
3.//OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>is_wall_detected</Condition><Selector><Sequence><Condition>is_junction_reached</Condition><Selector><Sequence><Condition>is_object_detected</Condition><Action>grab_object</Action></Sequence><Action>turn_right</Action></Selector></Sequence><Action>move_forward</Action></Selector></Sequence><Sequence><Condition>is_target_reached</Condition><Action>retrace_path</Action></Sequence></Selector></Sequence></BehaviorTree>

###
4.//INSTRUCTIONS: Use only the following behaviors {'move_forward': 'Action: Move one step forward and maintain distance from other robots. Always returns True.', 'move_backward': 'Action: Move one step backward while maintaining distance from other robots. Always returns True.', 'turn_left': 'Action: Turn 90 degrees left and maintain distance from other robots. Always returns True.', 'turn_right': 'Action: Turn 90 degrees right and maintain distance from other robots. Always returns True.', 'move_to_closest_neighbor': 'Action: Move towards the closest neighbor while maintaining a safe distance. Always returns True.', 'is_any_neighbor_near': 'Condition: Check if any other robots are detected within a certain distance. Returns True if at least one neighbor is detected, False otherwise.', 'is_leader': 'Condition: Check if the robot is the designated leader of the swarm. Returns True if the robot is the leader, False otherwise.', 'is_movement_complete': 'Condition: Check if the designated movement distance has been completed. Returns True if the distance is reached, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Design a behavior tree for a swarm of robots to maintain a safe distance from each other while exploring a large area and following a designated leader.
4.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>is_leader</Condition><Selector><Sequence><Condition>is_any_neighbor_near</Condition><Action>move_to_closest_neighbor</Action></Sequence><Selector><Sequence><Condition>is_movement_complete</Condition><Action>turn_right</Action></Sequence><Action>move_forward</Action></Selector></Selector></Sequence><Sequence><Condition>is_any_neighbor_near</Condition><Selector><Sequence><Condition>is_movement_complete</Condition><Action>move_backward</Action></Sequence><Selector><Sequence><Condition>is_movement_complete</Condition><Action>turn_left</Action></Sequence><Action>move_forward</Action></Selector></Selector></Sequence></Selector></Sequence></BehaviorTree>
Note: The behavior tree assumes that each robot has a designated movement distance and that the designated leader has a larger movement distance.

###
5.//INSTRUCTIONS: Use only the following behaviors {'move_to_neighbors_position': 'Action: Move to the position of the closest neighbor. Always returns True.', 'circle_current_position': 'Action: Circle around the current position. Always returns True.', 'is_obstacle_detected': 'Condition: Check if an obstacle is detected within a certain distance. Returns True if an obstacle is detected, False otherwise.', 'is_neighbor_in_perimeter': 'Condition: Check if the closest neighbor is within a certain distance. Returns True if the neighbor is in range, False otherwise.', 'is_neighbor_in_sight': 'Condition: Check if the closest neighbor is within the line of sight. Returns True if the neighbor is in sight, False otherwise.', 'is_movement_complete': 'Condition: Check if the designated movement distance has been completed. Returns True if the distance is reached, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Construct a behavior tree for a swarm of robots to navigate an environment filled with obstacles and maintain a safe distance from each other while following the path of the closest neighbor.
5.// OUTPUT:
<BehaviorTree><Sequence><Selector><Condition>is_neighbor_in_perimeter</Condition><Action>move_to_neighbors_position</Action></Selector><Selector><Condition>is_obstacle_detected</Condition><Sequence><Condition>is_neighbor_in_sight</Condition><Selector><Sequence><Condition>is_movement_complete</Condition><Action>move_to_neighbors_position</Action></Sequence><Selector><Sequence><Condition>is_neighbor_in_sight</Condition><Action>circle_current_position</Action></Sequence><Action>move_forward</Action></Selector></Selector></Sequence></Selector></Sequence></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'move_forward': 'Action: Move one step forward and maintain formation. Always returns True.', 'rotate_cw': 'Action: Rotate clockwise 45 degrees while maintaining formation. Always returns True.', 'rotate_ccw': 'Action: Rotate counterclockwise 45 degrees while maintaining formation. Always returns True.', 'is_object_detected': 'Condition: Check if an object is detected within a certain distance. Returns True if an object is detected, False otherwise.', 'is_leader_near': 'Condition: Check if the designated leader robot is within a certain distance. Returns True if the leader is near, False otherwise.', 'is_formation_intact': 'Condition: Check if the current formation is intact and aligned. Returns True if the formation is intact, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.//USER COMMAND: Create a behavior tree for a swarm of robots to maintain a tight diamond formation while navigating through a cluttered environment and following the designated leader.
6.//OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is###
3.// INSTRUCTIONS: Use only the following behaviors {'move_forward': 'Action: Move forward in a straight line for 5 seconds. Always returns True.', 'move_backward': 'Action: Move backward in a straight line for 5 seconds. Always returns True.', 'rotate_clockwise': 'Action: Rotate the robot 90 degrees clockwise. Always returns True.', 'rotate_counterclockwise': 'Action: Rotate the robot 90 degrees counterclockwise. Always returns True.', 'move_diagonally_right': 'Action: Move diagonally to the right for 5 seconds. Always returns True.', 'move_diagonally_left': 'Action: Move diagonally to the left for 5 seconds. Always returns True.', 'is_agent_moving': 'Condition: Check if the agent is currently moving. Returns True if the agent's velocity is greater than 0.1, False otherwise.', 'is_agent_stuck': 'Condition: Check if the agent is stuck against an obstacle or wall. Returns True if the agent's velocity is 0 for a continuous period of 5 seconds, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3.// USER COMMAND: generate behavior tree to 'Move forward for 5 seconds, then rotate clockwise, then move diagonally to the right for 5 seconds, and finally rotate counterclockwise to return to starting point.' Output only the XML behavior tree without extra text.
3.// OUTPUT:
<BehaviorTree> <Sequence> <Action>move_forward</Action> <Sequence> <Condition>is_agent_moving</Condition> <Action>rotate_clockwise</Action> </Sequence> <Action>move_diagonally_right</Action> <Sequence> <Condition>is_agent_moving</Condition> <Action>rotate_counterclockwise</Action> </Sequence> </Sequence> </BehaviorTree>

###
4.// INSTRUCTIONS: Use only the following behaviors {'move_forward': 'Action: Move forward for 5 seconds. Always returns True.', 'move_backward': 'Action: Move backward for 5 seconds. Always returns True.', 'rotate_clockwise': 'Action: Rotate the robot 90 degrees clockwise. Always returns True.', 'rotate_counterclockwise': 'Action: Rotate the robot 90 degrees counterclockwise. Always returns True.', 'follow_path': 'Action: Follow a predefined path consisting of 5 waypoints. Always returns True.', 'is_agent_moving': 'Condition: Check if the agent is currently moving. Returns True if the agent's velocity is greater than 0.1, False otherwise.', 'is_at_waypoint': 'Condition: Check if the agent is at a specified waypoint. Returns True if the agent's position is within 0.5 units of the waypoint, False otherwise.', 'is_path_clear': 'Condition: Check if the path ahead is clear. Returns True if there are no obstacles within 5 units ahead, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Follow a predefined path consisting of 5 waypoints, avoiding obstacles along the way.' Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Action>follow_path</Action> <Sequence> <Condition>is_at_waypoint</Condition> <Action>rotate_counterclockwise</Action> </Sequence> </Sequence> <Sequence> <Condition>is_path_clear</Condition> <Action>move_forward</Action> </Sequence> </Selector> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'detect_fire': 'Condition: Check if fire is detected. Returns True if fire is detected within a 10-unit radius, False otherwise.', 'extinguish_fire': 'Action: Use a fire extinguisher to put out the fire. Always returns True.', 'create_water_barrier': 'Action: Create a water barrier around the fire to contain it. Always returns True.', 'move_towards_fire': 'Action: Move towards the detected fire. Always returns True.', 'move_away_from_fire': 'Action: Move away from the fire to a safer location. Always returns True.', 'call_for_help': 'Action: Call for assistance from other robots. Always returns True.', 'is_rover_in_water': 'Condition: Check if the rover is in water. Returns True if the rover is submerged in water, False otherwise.', 'check_battery_level': 'Condition: Check the battery level of the rover. Returns True if the battery level is above 30%, False if it is below 30%.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'If fire is detected, move towards it and extinguish it. If the rover is in water, create a water barrier and wait for assistance. If the battery level is below 30%, call for help.'Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>detect_fire</Condition> <Action>move_towards_fire</Action> <Sequence> <Condition>is_rover_in_water</Condition> <Action>create_water_barrier</Action> </Sequence> <Action>extinguish_fire</Action> </Sequence> <Sequence> <Condition>check_battery_level</Condition> <Action>call_for_help</Action> </Sequence> </Selector> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'detect_intruder': 'Condition: Check if an intruder is detected. Returns True if an intruder is detected within a 15-unit radius, False otherwise.', 'approach_intruder': 'Action: Move towards the detected intruder. Always returns True.', 'scan_surroundings': 'Action: Rotate 360 degrees to scan the surroundings for potential intruders. Always returns True.', 'is_agent_at_center': 'Condition: Check if the agent is at the center of the environment. Returns True if the agent's position is within 2 units of the center, False otherwise.', 'hide_at_corner': 'Action: Move to the nearest corner and hide. Always returns True.', 'signal_for_backup': 'Action: Signal for backup from other robots. Always returns True.', 'is_agent_hidden': 'Condition: Check if the agent is hiding. Returns True if the agent is currently hiding, False otherwise.', 'sneak_up_on_intruder': 'Action: Move slowly towards the intruder to avoid detection. Always returns True.'}, to construct behavior tree in XML format to###
3.// INSTRUCTIONS: Use only the following behaviors {'detect_nest': 'Condition: Check if the nest is in agent's view. Returns True if the nest is in view, False otherwise.', 'flee_from_predator': 'Action: Flee from predator if detected. Always returns True.', 'forage_food': 'Action: Forage for food within a 10 unit radius. Returns True if food is found, False otherwise.', 'follow_trail': 'Action: Follow scent trail left by other agents. Returns True if trail is followed successfully, False otherwise.', 'move_randomly': 'Action: Move randomly within the environment. Always returns True.', 'reach_nest': 'Action: Move towards the nest. Returns True if the nest is reached, False otherwise.', 'task_completed': 'Action: Signal task completion by returning to the nest. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3.// USER COMMAND: generate behavior tree to 'Forage for food, avoid predators, follow trail, and return to nest'Output only the XML behavior tree without extra text.
3.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Action>forage_food</Action> <Selector> <Sequence> <Condition>detect_nest</Condition> <Action>flee_from_predator</Action> </Sequence> <Action>avoid_obstacle</Action> </Selector> </Sequence> <Sequence> <Selector> <Sequence> <Condition>detect_nest</Condition> <Action>follow_trail</Action> </Sequence> <Action>avoid_obstacle</Action> </Selector> <Action>reach_nest</Action> <Action>task_completed</Action> </Sequence> </Selector> </BehaviorTree>
###
4.// INSTRUCTIONS: Use only the following behaviors {'detect_nest': 'Condition: Check if the nest is in agent's view. Returns True if the nest is in view, False otherwise.', 'is_agent_alone': 'Condition: Check if there are other agents nearby. Returns True if there are no other agents in a 5 unit radius, False otherwise.', 'is_environment_safe': 'Condition: Check if the environment is safe. Returns True if there are no predators nearby, False otherwise.', 'is_goal_reached': 'Condition: Check if the agent has reached the goal. Returns True if the agent reaches the goal, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'move_towards_goal': 'Action: Move towards the goal. Returns True if the goal is reached, False otherwise.', 'detect_food': 'Condition: Check if food is within 15 units. Returns True if food is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by returning to the nest. Always returns True.', 'fall_asleep': 'Action: Sleep for 2 minutes. Returns True after 2 minutes.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Detect and avoid any danger, find food, reach the goal, and return to nest.'Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>is_agent_alone</Condition> <Condition>is_environment_safe</Condition> <Selector> <Sequence> <Action>detect_food</Action> <Action>fall_asleep</Action> </Sequence> <Action>avoid_obstacle</Action> </Selector> </Sequence> <Sequence> <Selector> <Sequence> <Condition>detect_nest</Condition> <Condition>is_path_clear</Condition> <Action>move_towards_goal</Action> </Sequence> <Action>detect_food</Action> </Selector> <Action>task_completed</Action> </Sequence> </Selector> </BehaviorTree>
###
5.// INSTRUCTIONS: Use only the following behaviors {'detect_goal': 'Condition: Check if the goal is within 10 units. Returns True if the goal is within 10 units of distance, False otherwise.', 'detect_target': 'Condition: Check if the target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'follow_scent': 'Action: Follow scent trail left by other agents. Returns True if trail is followed successfully, False otherwise.', 'get_batteries': 'Action: Collect batteries from specific location. Returns True if batteries are successfully collected, False otherwise.', 'is_battery_low': 'Condition: Check if agent's battery is below 25%. Returns True if battery is below 25%, False otherwise.', 'move_towards_target': 'Action: Move towards the target. Returns True if the target is reached, False otherwise.', 'navigate_obstacles': 'Action: Navigate around obstacles. Always returns True.', 'task_completed': 'Action: Signal task completion by returning to the nest. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Navigate around obstacles, collect batteries, move towards target, and return to nest'Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Action>get_batteries</Action> <Selector> <Sequence> <Condition>detect_goal</Condition> <Action>navigate_obstacles</Action> </Sequence> <Action>navigate_obstacles</Action> </Selector> </Sequence> <Sequence> <Selector> <Sequence> <Condition>detect_target</Condition> <Action>follow_scent</Action> </Sequence> <Action>navigate_obstacles</Action> </Selector> <Action>move_towards_target</Action> <Action>task_completed</Action> </Sequence> </Selector> </BehaviorTree>
###
6.// INSTRUCTIONS: Use only the following behaviors {'detect_nest': 'Condition: Check if the nest is in agent's view. Returns True if the nest is in view, False otherwise.', 'has_food': 'Condition: Check if the agent is carrying food. Returns True if the agent is carrying food, False otherwise.', 'leave_food_at_nest': 'Action: Drop off food at the nest. Returns True after food is dropped off.', 'move_in_direction': 'Action: Move in a specified direction. Returns True after successfully moving in the specified direction.', 'forage_food': 'Action: Forage for food within a 10 unit radius. Returns True if food is found, False otherwise.', 'run_away': 'Action: Run away from predator if detected. Returns True if successfully escaped, False otherwise.', 'task_completed': 'Action: Signal task completion by returning to the nest 
###
3.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3.// USER COMMAND: generate behavior tree to 'Reach the target location while avoiding obstacles, form a line with three other robots, and return to starting position.'Output only the XML behavior tree without extra text.
3.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>is_obstacle_detected</Condition> <Sequence> <Condition>is_path_clear</Condition> <Action>continue_movement_agent</Action> </Sequence> <Action>avoid_obstacle</Action> </Sequence> <Sequence> <Condition>is_target_detected</Condition> <Selector> <Action>form_line</Action> <Action>task_completed</Action> </Selector> </Sequence> <Sequence> <Condition>is_target_reached</Condition> <Action>agent_movement_freeze</Action> </Sequence> <Action>wander</Action> </Selector> </BehaviorTree>
 
###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Collect ten objects while avoiding obstacles, change color to green for every second object collected, and return to starting position.'Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>is_obstacle_detected</Condition> <Sequence> <Condition>is_path_clear</Condition> <Action>continue_movement_agent</Action> </Sequence> <Action>avoid_obstacle</Action> </Sequence> <Sequence> <Condition>is_target_detected</Condition> <Selector> <Sequence> <Condition>is_target_reached</Condition> <Selector> <Action>form_line</Action> <Action>task_completed</Action> </Selector> </Sequence> <Sequence> <Condition>is_target_reached</Condition> <Sequence> <Condition>is_agent_in_nest</Condition> <Action>agent_movement_freeze</Action> </Sequence> </Selector> </Sequence> <Sequence> <Condition>is_target_detected</Condition> <Action>change_color_to_green</Action> </Sequence> <Action>wander</Action> </Selector> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing###
3.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3.// USER COMMAND: generate behavior tree to 'Form a line, avoid obstacles, and continue movement while target is within 15 units. Output only the XML behavior tree without extra text.
3.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>is_agent_in_nest</Condition><Action>form_line</Action><Action>continue_movement_agent</Action></Sequence><Sequence><Condition>is_target_detected</Condition><Action>avoid_obstacle</Action></Sequence></Selector><Action>continue_movement_agent</Action></Sequence></BehaviorTree>
###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Navigate through obstacles and change color to white if obstacle is detected. Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_obstacle_detected</Condition><Action>change_color_to_white</Action></Sequence><Action>continue_movement_agent</Action></Selector></BehaviorTree>
###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Form a line, check if target is within 20 units, then change color to green. Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>is_agent_in_nest</Condition><Action>form_line</Action></Sequence><Condition>is_target_detected</Condition><Action>change_color_to_green</Action></Selector></BehaviorTree>
###
6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent###
3.// INSTRUCTIONS: Use only the following behaviors {'drop_food_pheromones': "Action: Drop food pheromones at current location. Always returns True.", 'explore': "Action: Explore the environment by moving in different directions. Always returns True.", 'follow_pheromones': "Condition: Check for food pheromones nearby. Returns True if food pheromones are detected within 5 units, False otherwise.",'is_food_detected': 'Condition: Check if food is detected at current location. Returns True if food is detected, False otherwise.', 'is_food_collected': 'Condition: Check if food has been collected previously. Returns True if food has been collected, False otherwise.', 'pick_up_food': 'Action: Pick up food at current location. Always returns True.', 'return_to_nest': 'Action: Return to the nest location. Always returns True.', 'set_target_location': 'Action: Set a specific location as the target for the agent. Always returns True.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.' }, to construct behavior tree in XML format using the following command.
3.// USER COMMAND: generate behavior tree to 'Explore the environment, drop food pheromones, set a target location, follow pheromones, pick up food at current location, and return to nest.'
3.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Action>explore</Action> <Action>drop_food_pheromones</Action> <Action>set_target_location</Action> <Sequence> <Condition>follow_pheromones</Condition> <Sequence> <Condition>is_food_detected</Condition> <Action>pick_up_food</Action> </Sequence> </Sequence> <Action>return_to_nest</Action> <Action>task_completed</Action> </Selector> </BehaviorTree>

###
4.// INSTRUCTIONS: Use only the following behaviors {'deactivate_shield': "Action: Deactivate the agent's shield if active. Always returns True.", 'defend_nest': "Action: Stay in the nest location and defend it. Always returns True.", 'detect_enemy': "Condition: Check for enemy agents within 10 units. Returns True if enemy agents are detected, False otherwise.", 'move_to_target': "Action: Move towards a given target location. Always returns True.", 'move_to_nest': "Action: Move towards the nest location. Always returns True.", 'power_up': "Action: Use nearby resources to power up the agent. Always returns True.", 'refill_health': "Action: Refill agent's health using nearby resources. Always returns True.", 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.'}, to construct behavior tree in XML format using the following command.
4.// USER COMMAND: generate behavior tree to 'Detect enemy agents, move to target, deactivate shield, power up, refill health, move to nest and defend.'
4.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>detect_enemy</Condition> <Action>move_to_target</Action> <Action>deactivate_shield</Action> <Sequence> <Action>power_up</Action> <Action>refill_health</Action> </Sequence> <Action>move_to_nest</Action> <Action>defend_nest</Action> <Action>task_completed</Action> </Selector> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_blue': "Action: Change agent's color to blue. Always returns True.", 'change_color_to_red': "Action: Change agent's color to red. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'eat_food': 'Action: Consume food from current location. Always returns True.', 'is_food_available': "Condition: Check if food is available at current location. Returns True if food is available, False otherwise.", 'is_hungry': 'Condition: Check agent's hunger level. Returns True if agent's hunger level is above a certain threshold, False otherwise.', 'pick_up_food': 'Action: Pick up food at current location. Always returns True.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.' }, to construct behavior tree in XML format using the following command.
5.// USER COMMAND: generate behavior tree to 'Avoid obstacles, check for food, pick up food, eat food, change color to blue or red depending on hunger level.'
5.// OUTPUT:
<BehaviorTree> <Selector> <Selector> <Sequence> <Action>avoid_obstacle</Action> <Sequence> <Condition>is_food_available</Condition> <Action>pick_up_food</Action> <Sequence> <Condition>is_hungry</Condition> <Action>eat_food</Action> <Sequence> <Condition>is_hungry</Condition> <Action>change_color_to_red</Action> </Sequence> <Sequence> <Action>change_color_to_blue</Action> </Sequence> </Sequence> </Sequence> <Action>wander</Action> </Selector> <Action>continue_movement_agent</Action> </Selector> <Action>task_completed</Action> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'charge_battery': "Action: Charge the agent's battery if not at max capacity. Always returns True.", 'collect_resources': "Action: Collect nearby resources. Always returns True.", 'is_battery_low': "Condition: Check if agent's battery is below a certain threshold. Returns True if battery is low, False otherwise.", 'is_battery_full': "Condition: Check if agent's battery is at max capacity. Returns True if battery is full, False otherwise.", 'is_resource_available': "Condition: Check if resources are available nearby. Returns True if resources are available, False otherwise.", 'move_to_resource': "Action: Move towards the nearest available resource. Always returns True.", 'return_to_base': "Action: Return to the base location. Always returns True.", 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.'}, to construct behavior tree in XML format using the following command.
6.// USER COMMAND: generate behavior tree to 'Collect resources, move to resource, charge battery if low, return to base when battery full.'
6.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Selector> <Condition>is_battery_full</Condition> <Action>return_to_base</Action> <Sequence> <Condition>is_resource_available</Condition> <Selector> <Action>move_to_resource</Action> <Sequence> <Condition>is_battery_low</Condition> <Action>charge_battery</Action> </Sequence> </Selector> <Action>collect_resources</Action> </Sequence> </Selector> <Action>task_completed</Action> </BehaviorTree>

###
7. // INSTRUCTIONS: Use only the following behaviors {'collect_nearest_resource': "Action 
###
4.// INSTRUCTIONS: Use only the following behaviors {'detect_collisions': 'Action: Use sensor data to detect potential collisions. Always returns True.', 'evade_obstacle': 'Action: Shift direction to avoid obstacles. Always returns True.', 'follow_target': 'Action: Follow the designated target. Always returns True.', 'is_colliding': 'Condition: Check if collision has occurred. Returns True if collision has occurred, False otherwise.', 'is_target_visible': 'Condition: Check if the target is within the robot's view. Returns True if the target is visible, False otherwise.', 'move_forward': 'Action: Move forward. Always returns True.', 'stop_movement': 'Action: Stop all movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'navigate through a maze while avoiding obstacles and reaching the end goal.' Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_colliding</Condition><Action>stop_movement</Action></Sequence><Sequence><Condition>is_target_visible</Condition><Action>follow_target</Action></Sequence><Sequence><Condition>detect_collisions</Condition><Action>evade_obstacle</Action><Action>move_forward</Action></Sequence></Selector></BehaviorTree>
 
###
5.// INSTRUCTIONS: Use only the following behaviors {'charge_battery': 'Action: Charge the robot's battery. Always returns True.', 'conduct_maintenance': 'Action: Conduct routine maintenance on the robot. Always returns True.', 'move_to_target_location': 'Action: Move to the specified target location. Always returns True.', 'is_battery_low': 'Condition: Check if the robot's battery is low. Returns True if battery is low, False otherwise.', 'is_maintenance_required': 'Condition: Check if the robot requires routine maintenance. Returns True if maintenance is required, False otherwise.', 'is_target_reached': 'Condition: Check if the robot has reached the target location. Returns True if the target location has been reached, False otherwise.', 'is_battery_charged': 'Condition: Check if the robot's battery is fully charged. Returns True if battery is fully charged, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Charge battery, perform maintenance and then move to target location.' Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_maintenance_required</Condition><Action>conduct_maintenance</Action></Sequence><Sequence><Condition>is_battery_low</Condition><Action>charge_battery</Action></Sequence><Sequence><Condition>is_battery_charged</Condition><Action>move_to_target_location</Action></Sequence></Selector></BehaviorTree>
 
###
6.// INSTRUCTIONS: Use only the following behaviors {'detect_enemy': 'Action: Use sensors to detect nearby enemy robots. Always returns True.', 'attack_enemy': 'Action: Engage in combat and attack the enemy robots. Always returns True.', 'move_to_target': 'Action: Move towards the designated target. Always returns True.', 'is_enemy_detected': 'Condition: Check if an enemy is detected within a 30 unit radius. Returns True if an enemy is detected, False otherwise.', 'is_target_reached': 'Condition: Check if the target has been reached. Returns True if the target location has been reached, False otherwise.', 'is_enemy_destroyed': 'Condition: Check if the enemy robot has been destroyed. Returns True if the enemy is destroyed, False otherwise.', 'is_target_visible': 'Condition: Check if the target is within the robot's view. Returns True if the target is visible, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'detect and attack enemy robots while moving to a designated target location.' Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_enemy_detected</Condition><Action>attack_enemy</Action></Sequence><Sequence><Condition>is_target_visible</Condition><Action>move_to_target</Action></Sequence><Sequence><Condition>is_target_reached</Condition><Action>move_forward</Action></Sequence></Selector></BehaviorTree>
 
###
7.// INSTRUCTIONS: Use only the following behaviors {'change_speed': 'Action: Change the robot's speed. Always returns True.', 'rotate_left': 'Action: Rotate the robot left by 90 degrees. Always returns True.', 'rotate_right': 'Action: Rotate the robot right by 90 degrees. Always returns True.', 'guard_area': 'Action: Guard a designated area. Always returns True.', 'move_away_from_obstacle': 'Action: Move away from obstacles. Always returns True.', 'is_target_reached': 'Condition: Check if the target location has been reached by the robot. Returns True if the target location has been reached, False otherwise.', 'is_obstacle_detected': 'Condition: Check if an obstacle is detected nearby. Returns True if an obstacle is detected, False otherwise.', 'is_speed_changed': 'Condition: Check if the robot's speed has been changed. Returns True if speed has been changed, False otherwise.', 'is_robot_moving': 'Condition: Check if the robot is currently moving. Returns True if the robot is moving, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: generate behavior tree to 'Guard an area while avoiding obstacles and adjusting speed if necessary.' Output only the XML behavior tree without extra text.
7.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_obstacle_detected</Condition><Action>change_speed</Action></Sequence><Sequence><Condition>is_speed_changed</Condition><Action>move_away_from_obstacle</Action></Sequence><Sequence><Condition>is_target_reached</Condition><Action>rotate_left</Action><Action>rotate_right</Action><Action>guard_area</Action></Sequence></Selector></BehaviorTree>

###
3.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3.// USER COMMAND: generate behavior tree to 'Navigate through a maze to reach the target at the end' Output only the XML behavior tree without extra text.
3.// OUTPUT:
<BehaviorTree><Sequence><Action>continue_movement_agent</Action><Selector><Sequence><Condition>is_obstacle_detected</Condition><Action>avoid_obstacle</Action></Sequence><Action>wander</Action></Selector></Sequence></BehaviorTree>

###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Gather resources and return to the nest to deposit them.' Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>is_obstacle_detected</Condition><Action>avoid_obstacle</Action></Sequence><Action>wander</Action></Selector><Action>continue_movement_agent</Action><Selector><Sequence><Condition>is_target_reached</Condition><Action>change_color_to_green</Action><Action>update_map</Action></Sequence><Sequence><Condition>is_agent_in_nest</Condition><Action>change_color_to_white</Action></Sequence></Selector></Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Collect and deliver an item to a specified location while avoiding obstacles and other robots.' Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_target_detected</Condition><Selector><Sequence><Condition>is_obstacle_detected</Condition><Action>avoid_obstacle</Action></Sequence><Action>wander</Action></Selector></Sequence><Sequence><Selector><Sequence><Condition>is_target_reached</Condition><Action>continue_movement_agent</Action></Sequence><Selector><Sequence><Condition>is_agent_in_nest</Condition><Action>change_color_to_white</Action><Action>task_completed</Action></Sequence><Action>continue_movement_agent</Action></Selector></Sequence></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green 
###
3.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_red': "Action: Change agent's color to red. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'rotate_left': 'Action: Rotate to the left by 30 degrees. Always returns True.', 'rotate_right': 'Action: Rotate to the right by 30 degrees. Always returns True.', 'is_agent_downhill': 'Condition: Check if the agent is on a downhill slope. Returns True if the agent is on a downhill slope, False otherwise.', 'is_agent_uphill': 'Condition: Check if the agent is on an uphill slope. Returns True if the agent is on an uphill slope, False otherwise.', 'is_color_green': 'Condition: Check if the agent's color is green. Returns True if the agent's color is green, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3.// USER COMMAND: generate behavior tree to 'Move downhill while changing color to green, then rotate left until the color is red, then move uphill while changing color to green.'Output only the XML behavior tree without extra text.
3.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>is_agent_downhill</Condition><Action>change_color_to_green</Action></Sequence><Action>continue_movement_agent</Action></Selector><Sequence><Condition>is_color_green</Condition><Action>rotate_left</Action><Action>continue_movement_agent</Action></Sequence><Sequence><Condition>is_agent_uphill</Condition><Action>change_color_to_red</Action></Sequence></Sequence><Action>change_color_to_green</Action><Action>continue_movement_agent</Action></BehaviorTree>
 
###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_stop': "Action: Stop agent's movement. Always returns True.", 'circle_around': 'Action: Circle around the target in a circular motion. Always returns True.', 'follow_target': 'Action: Follow the target while maintaining a safe distance. Always returns True.', 'is_agent_in_group': 'Condition: Check if the agent is in a group with other robots. Returns True if the agent is in a group, False otherwise.', 'is_distance_safe': 'Condition: Check if the distance to the target is safe. Returns True if the distance to the target is greater than 10 units, False otherwise.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'join_group': 'Action: Join a group of other robots. Always returns True.', 'task_completed': 'Action: Signal task completion by stopping movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Circle around the target while maintaining safety distance, then join the group when target is reached.'Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>is_target_reached</Condition><Action>task_completed</Action></Sequence><Selector><Sequence><Condition>is_distance_safe</Condition><Action>follow_target</Action><Sequence><Condition>is_target_detected</Condition><Action>circle_around</Action></Sequence></Selector></Selector><Selector><Sequence><Condition>is_agent_in_group</Condition><Action>wander</Action></Sequence><Action>join_group</Action></Selector></Sequence></BehaviorTree>
 
###
5.// INSTRUCTIONS: Use only the following behaviors {'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_red': "Action: Change agent's color to red. Always returns True.", 'is_color_green': 'Condition: Check if the agent's color is green. Returns True if the agent's color is green, False otherwise.', 'is_color_red': 'Condition: Check if the agent's color is red. Returns True if the agent's color is red, False otherwise.', 'move_forward': 'Action: Move forward in a straight line. Always returns True.', 'move_backward': 'Action: Move backward in a straight line. Always returns True.', 'move_left': 'Action: Move to the left in a straight line. Always returns True.', 'move_right': 'Action: Move to the right in a straight line. Always returns True.', 'task_completed': 'Action: Signal task completion by changing color to red. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Move forward, then to the left, then move backward while changing color to green, and finally move to the right while changing color to red.'Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Action>move_forward</Action><Action>move_left</Action><Action>move_backward</Action></Sequence><Selector><Sequence><Condition>is_color_green</Condition><Action>wander</Action></Sequence><Action>change_color_to_green</Action><Action>task_completed</Action></Selector></Selector><Action>move_right</Action><Selector><Sequence><Condition>is_color_red</Condition><Action>wander</Action></Sequence><Action>change_color_to_red</Action></Selector></Sequence></BehaviorTree>
 
###
6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'change_color_to_blue': "Action: Change agent's color to blue. Always returns True.", 'is_color_blue': "Condition: Check if the agent's color is blue. Returns True if the agent's color is blue, False otherwise.", 'move_forward': 'Action: Move forward in a straight line. Always returns True.', 'move_left': 'Action: Move to the left in a straight line. Always returns True.', 'move_right': 'Action: Move to the right in a straight line. Always returns True.', 'move_backward': 'Action: Move backward in
###
4.// INSTRUCTIONS: Use only the following behaviors {'move_forward': 'Action: Move agent forward 1 unit. Always returns True.', 'move_backward': 'Action: Move agent backward 1 unit. Always returns True.', 'turn_right': 'Action: Turn agent right 90 degrees. Always returns True.', 'turn_left': 'Action: Turn agent left 90 degrees. Always returns True.', 'is_agent_at_edge': 'Condition: Check if agent is at the edge. Returns True if agent is at the edge of the environment, False otherwise.', 'is_agent_facing_obstacle': 'Condition: Check if agent is facing an obstacle. Returns True if agent is facing an obstacle, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Navigate through obstacles to reach the target'. Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>is_agent_at_edge</Condition> <Action>move_forward</Action> </Sequence> <Action>turn_right</Action> </Selector> <Selector> <Sequence> <Condition>is_agent_facing_obstacle</Condition> <Action>move_backward</Action> <Action>turn_left</Action> </Sequence> <Action>task_completed</Action> </Selector> </Sequence> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'avoid_object': 'Action: Avoid obstacles and objects in the environment. Always returns True.', 'move_to_target': "Action: Move towards the designated target. Always returns True.", 'is_object_detected': 'Condition: Check if an object is detected within 10 units. Returns True if an object is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_in_view': 'Condition: Check if the target is within the agent's field of view. Returns True if the target is in view, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Avoid obstacles while searching for the target'. Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>is_object_detected</Condition> <Action>avoid_obstacle</Action> </Sequence> <Action>wander</Action> </Selector> <Selector> <Sequence> <Condition>is_target_in_view</Condition> <Action>move_to_target</Action> </Sequence> <Action>task_completed</Action> </Selector> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'move_to_position': 'Action: Move agent to a specific position. Returns True if target position is reached, False otherwise.', 'is_position_reached': 'Condition: Check if agent has reached the designated position. Returns True if agent has reached the position, False otherwise.', 'avoid_obstacles': 'Action: Avoid obstacles as agent moves. Always returns True.', 'track_target': 'Action: Continuously move towards the designated target. Always returns True.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Track and reach a moving target while avoiding obstacles'. Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>is_target_detected</Condition> <Action>track_target</Action> </Sequence> <Action>wander</Action> </Selector> <Selector> <Sequence> <Condition>is_path_clear</Condition> <Action>avoid_obstacles</Action> <Sequence> <Action>move_to_position</Action> <Condition>is_position_reached</Condition> </Sequence> </Sequence> <Action>task_completed</Action> </Selector> </BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'move_to_direction': 'Action: Move agent to a specified direction. Returns True if direction is reached, False otherwise.', 'change_color_random': 'Action: Change agent's color randomly to red or green. Always returns True.', 'is_agent_at_edge': 'Condition: Check if agent is at the edge. Returns True if agent is at the edge of the environment, False otherwise.', 'is_agent_facing_obstacle': 'Condition: Check if agent is facing an obstacle. Returns True if agent is facing an obstacle, False otherwise.', 'rotate_clockwise': 'Action: Rotate agent clockwise 90 degrees. Always returns True.', 'rotate_counterclockwise': 'Action: Rotate agent counterclockwise 90 degrees. Always returns True.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: generate behavior tree to 'Rotate and move towards the target while avoiding obstacles by changing color to green and then red'. Output only the XML behavior tree without extra text.
7.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>is_agent_at_edge</Condition> <Selector> <Sequence> <Condition>is_agent_facing_obstacle</Condition> <Action>change_color_random</Action> </Sequence> <Action>rotate_counterclockwise</Action> </Selector> <Action>rotate_clockwise</Action> </Sequence> <Selector> <Sequence> <Condition>is_target_detected</Condition> <Action>move_to_direction</Action> </Sequence> <Action>task_completed</Action> </Selector> </BehaviorTree> ###
4.// INSTRUCTIONS: Use only the following behaviors
{'choose_random_destination': 'Action: Choose a random destination from a list of available options. Always returns True.', 'move_to_destination': 'Action: Move towards the chosen destination. Always returns True.', 'is_destination_reached': 'Condition: Check if the chosen destination has been reached. Returns True if the destination has been reached, False otherwise.', 'wander': 'Action: Move randomly within the environment. Always returns True.', 'shuffle_list': 'Action: Shuffle the list of destinations to ensure that the agent does not always pick the same one. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate a behavior tree for the agent to move to a random destination from a list of options while avoiding obstacles and shuffling the list of destinations at each iteration.
4.// OUTPUT:
<BehaviorTree> <Sequence> <Action>shuffle_list</Action> <Selector> <Sequence> <Action>move_to_destination</Action> <Sequence> <Condition>is_destination_reached</Condition> <Action>choose_random_destination</Action> </Sequence> </Sequence> <Action>wander</Action> </Selector> </Sequence> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors
{'choose_next_target': 'Action: Choose the next target location based on predefined rules. Always returns True.', 'move_to_target': 'Action: Move towards the chosen target. Always returns True.', 'is_target_reached': 'Condition: Check if the target has been reached. Returns True if the target has been reached, False otherwise.', 'avoid_obstacles': 'Action: Avoid any obstacles in the way. Always returns True.', 'is_obstacle_detected': 'Condition: Check if there are any obstacles detected. Returns True if an obstacle is detected, False otherwise.', 'is_target_detected': 'Condition: Check if the target is within the agent's field of view. Returns True if the target is detected, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate a behavior tree for the agent to navigate to the next target location while avoiding obstacles and detecting any new potential targets.
5.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Action>choose_next_target</Action> <Sequence> <Condition>is_target_detected</Condition> <Selector> <Sequence> <Condition>is_obstacle_detected</Condition> <Action>avoid_obstacles</Action> </Sequence> <Action>move_to_target</Action> </Selector> </Sequence> </Selector> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors
{'reach_x_coordinate': 'Action: Move towards a specified x-coordinate. Always returns True.', 'reach_y_coordinate': 'Action: Move towards a specified y-coordinate. Always returns True.', 'is_x_reached': 'Condition: Check if the specified x-coordinate has been reached. Returns True if the coordinate has been reached, False otherwise.', 'is_y_reached': 'Condition: Check if the specified y-coordinate has been reached. Returns True if the coordinate has been reached, False otherwise.', 'is_target_reached': 'Condition: Check if both x and y coordinates have been reached. Returns True if both coordinates have been reached, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate a behavior tree for the agent to navigate to a specific point in the environment while avoiding obstacles and reaching both x and y coordinates.
6.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Action>reach_x_coordinate</Action> <Sequence> <Condition>is_x_reached</Condition> <Action>reach_y_coordinate</Action> </Sequence> </Sequence> <Selector> <Sequence> <Condition>is_target_reached</Condition> <Action>avoid_obstacles</Action> </Sequence> <Action>wander</Action> </Selector> </Sequence> </BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors
{'follow_leader': 'Action: Follow the designated leader's movement. Always returns True.', 'disperse_from_leader': 'Action: Maintain designated distance from the leader. Always returns True.', 'is_leader_nearby': 'Condition: Check if the leader is within a certain distance. Returns True if the leader is within the designated distance, False otherwise.', 'is_leader_moving': 'Condition: Check if the leader is currently moving. Returns True if the leader is moving, False otherwise.', 'is_follower_drifting': 'Condition: Check if the distance from the leader has increased or decreased. Returns True if the follower is drifting from the leader, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: generate a behavior tree for the follower to maintain distance from the leader while following its movement and avoiding drifting.
7.// OUTPUT:
<BehaviorTree> <Sequence> <Condition>is_leader_nearby</Condition> <Selector> <Sequence> <Condition>is_leader_moving</Condition> <Action>follow_leader</Action> </Sequence> <Action>disperse_from_leader</Action> </Selector> </Sequence> <Condition>is_follower_drifting</Condition> </BehaviorTree> 
###
3.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'follow_path': 'Action: Follow a predefined path. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'move_to_target': 'Action: Move towards the target. Always returns True.', 'search_area': 'Action: Search within a specific area. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3.// USER COMMAND: generate behavior tree to 'search for an object within a given area and return to nest' Output only the XML behavior tree without extra text.
3.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>is_path_clear</Condition><Action>search_area</Action><Action>follow_path</Action></Sequence><Action>wander</Action></Selector><Sequence><Condition>is_agent_in_nest</Condition><Action>change_color_to_white</Action></Sequence></Sequence></BehaviorTree>
 
###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_circle': 'Action: Form a circle with other agents. Always returns True.', 'is_agent_near': 'Condition: Check if another agent is within 10 units of distance. Returns True if an agent is nearby, False otherwise.', 'is_circle_complete': 'Condition: Check if circle is formed with all nearby agents. Returns True if circle is complete, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'form a circle with nearby agents and move towards target once circle is complete' Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>is_agent_near</Condition><Action>form_circle</Action><Condition>is_circle_complete</Condition><Action>move_to_target</Action></Sequence><Action>wander</Action></Selector></BehaviorTree>
 
###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'move_to_marker': 'Action: Move towards a specific marker. Always returns True.', 'is_marker_detected': 'Condition: Check if the marker is within 10 units. Returns True if the marker is detected, False otherwise.', 'is_target_in_sight': 'Condition: Check if target is in the agent's line of sight. Returns True if target is visible, False otherwise.', 'wait': 'Action: Wait for a specific amount of time. Returns True once the time has elapsed.', 'sit': 'Action: Stop all movements and remain in place. Always returns True.', 'destroy_obstacle': 'Action: Destroy an obstructing obstacle. Always returns True.', 'collect_resources': 'Action: Collect resources from the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'destroy an obstacle in the way, collect resources, and return to the nest' Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_obstacle_detected</Condition><Action>destroy_obstacle</Action></Sequence><Sequence><Action>collect_resources</Action></Sequence><Sequence><Action>move_to_marker</Action><Condition>is_marker_detected</Condition><Action>wait</Action></Sequence><Sequence><Condition>is_agent_in_nest</Condition><Action>change_color_to_white</Action></Sequence></BehaviorTree>
 
###
6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'move_to_target': 'Action: Move towards the target. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'powerup': 'Action: Activate a power-up ability. Returns True if successful, False otherwise.', 'is_powerup 
###
4.// INSTRUCTIONS: Use only the following behaviors {'change_color_to_blue': "Action: Change agent's color to blue. Always returns True.", 'change_color_to_red': "Action: Change agent's color to red. Always returns True.", 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_square': 'Action: Form a square shape with other robots. Always returns True.', 'is_agent_in_square': 'Condition: Check if agent is in a square formation. Returns True if agent is within 2 units of other robots, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_shape_completed': 'Condition: Check if a specific shape is completed. Returns True if the shape is completed with the required number of robots, False otherwise.', 'is_square_formed': 'Condition: Check if a square shape is formed. Returns True if the square shape is formed with the required number of robots, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Form a square with 4 robots and change color to blue, then move towards the target and change color to red when reached.'Output only the XML behavior tree without extra text.
4.// OUTPUT: 
<BehaviorTree> <Selector> <Sequence> <Condition>is_agent_in_square</Condition> <Action>form_square</Action> </Sequence> <Selector> <Sequence> <Action>change_color_to_blue</Action> <Action>task_completed</Action> </Sequence> <Action>wander</Action> </Selector> </Selector> <Sequence> <Condition>is_target_reached</Condition> <Action>change_color_to_red</Action> </Sequence> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'divide_and_conquer': 'Action: Have a subset of robots divide and conquer to complete a task. Always returns True.', 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_even_number_robots': 'Condition: Check if there is an even number of robots in the swarm. Returns True if the number of robots is even, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_not_homogeneous': 'Condition: Check if the swarm robots are not all of the same type. Returns True if there are different types of robots in the swarm, False if all robots are the same type.', 'is_task_completed': 'Condition: Check if the task is completed. Returns True if the task is completed by the swarm, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Divide the 8 robots into 2 teams, have each team form a line and change color to green, then come together and form a line again.'Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>is_even_number_robots</Condition> <Action>divide_and_conquer</Action> </Sequence> <Selector> <Sequence> <Action>form_line</Action> <Action>change_color_to_green</Action> </Sequence> <Action>wander</Action> </Selector> </Selector> <Sequence> <Condition>is_not_homogeneous</Condition> <Selector> <Sequence> <Action>form_line</Action> <Sequence></Sequence> </Sequence> <Selector> </Selector> </Sequence> <Sequence> <Condition>is_line_formed</Condition> <Action>form_line</Action> <Action>task_completed</Action> </Sequence> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'divide_and_conquer': 'Action: Have a subset of robots divide and conquer to complete a task. Always returns True.', 'genetic_crossover': 'Action: Perform genetic crossover with other robots. Always returns True.', 'is_age_greater_than_10': 'Condition: Check if the agent's age is greater than 10. Returns True if age is greater than 10, False otherwise.', 'is_alone_in_area': 'Condition: Check if the agent is alone in a specific area. Returns True if the agent is the only one in the area, False otherwise.', 'is_goal_reached': 'Condition: Check if the goal is reached. Returns True if the goal is reached, False otherwise.', 'is_task_completed': 'Condition: Check if the task is completed. Returns True if the task is completed, False otherwise.', 'move_to_line': 'Action: Move to a line formation with other robots. Always returns True.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Move to a specific location and perform genetic crossover with another robot, then move to a line formation with other robots and freeze movement.'Output only the XML behavior tree without extra text.
6.// OUTPUT: 
<BehaviorTree><Selector><Sequence><Selector><Condition>is_alone_in_area</Condition><Action>genetic_crossover</Action></Selector><Action>move_to_line</Action></Sequence><Selector><Condition>is_goal_reached</Condition><Sequence><Condition>is_age_greater_than_10</Condition><Action>divide_and_conquer</Action></Sequence></Selector></Selector><Sequence><Condition>is_task_completed</Condition><Action>task_completed</Action></Sequence></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'change_color_to_blue': "Action: Change agent's color to blue. Always returns True.", ' 
###
3.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_forward': "Action: Move agent one step forward. Returns True if successful, False otherwise.", 'agent_movement_rotate': "Action: Rotate agent 90 degrees clockwise. Returns True if successful, False otherwise.", 'agent_movement_reverse': "Action: Move agent one step backward. Returns True if successful, False otherwise.", 'check_battery_level': "Condition: Check current battery level. Returns True if battery level is above 20%, False otherwise.", 'check_proximity': "Condition: Check for nearby obstacles. Returns True if obstacles are detected, False otherwise.", 'communicate_with_swarm': "Action: Communicate with other swarm robots. Returns True if successful, False otherwise.", 'is_target_reached': 'Condition: Check if target is reached. Returns True if the target coordinates match the current coordinates of the agent, False otherwise.', 'is_target_visible': 'Condition: Check if target is visible within the agent's range. Returns True if the target is within range, False otherwise.', 'move_to_target': 'Action: Move towards target coordinates. Returns True if successful, False otherwise.', 'scan_surroundings': 'Action: Scan the surrounding environment for potential obstacles. Returns True if successful, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3.// USER COMMAND: generate behavior tree to 'Go towards the target coordinates, rotate, and scan the surroundings to avoid obstacles, then communicate with other swarm robots until target is reached.'Output only the XML behavior tree without extra text.
3.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>is_target_visible</Condition> <Action>move_to_target</Action> <Action>agent_movement_rotate</Action> <Action>scan_surroundings</Action> </Sequence> <Action>check_proximity</Action> </Selector> <Selector> <Sequence> <Condition>check_battery_level</Condition> <Action>communicate_with_swarm</Action> </Sequence> <Action>check_proximity</Action> </Selector> <Selector> <Sequence> <Condition>is_target_reached</Condition> <Action>task_completed</Action> </Sequence> <Action>agent_movement_forward</Action> </Selector> </Sequence> </BehaviorTree>

###
4.// INSTRUCTIONS: Use only the following behaviors {'change_speed': "Action: Change robot's speed. Returns True if successful, False otherwise.", 'check_available_space': "Condition: Check if there is space for the robot to move. Returns True if space is available, False otherwise.", 'check_collision': "Condition: Check for potential collisions. Returns True if a collision is possible with another robot, False otherwise.", 'check_distance': "Condition: Check the distance between the robot and another target. Returns True if the distance is within a specified range, False otherwise.", 'communicate_with_swarm': "Action: Communicate with other swarm robots. Returns True if successful, False otherwise.", 'move_to_target': 'Action: Move towards a designated target. Returns True if successful, False otherwise.', 'rotate_clockwise': 'Action: Rotate the robot 90 degrees clockwise. Returns True if successful, False otherwise.', 'rotate_counterclockwise': 'Action: Rotate the robot 90 degrees counterclockwise. Returns True if successful, False otherwise.', 'stop_movement': 'Action: Stop the robot's movement. Returns True if successful, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Check for potential collisions, rotate in a random direction, move towards the target, and stop movement once the target is reached.'Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>check_collision</Condition> <Action>rotate_clockwise</Action> </Sequence> <Action>rotate_counterclockwise</Action> </Selector> <Selector> <Sequence> <Condition>check_available_space</Condition> <Action>move_to_target</Action> </Sequence> <Action>communicate_with_swarm</Action> </Selector> <Selector> <Sequence> <Condition>check_distance</Condition> <Action>stop_movement</Action> </Sequence> <Action>communicate_with_swarm</Action> </Selector> </Sequence> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_forward': "Action: Move agent one step forward. Returns True if successful, False otherwise.", 'agent_movement_rotate': "Action: Rotate agent 180 degrees. Returns True if successful, False otherwise.", 'agent_movement_reverse': "Action: Move agent one step backward. Returns True if successful, False otherwise.", 'check_battery_level': "Condition: Check current battery level. Returns True if battery level is above 20%, False otherwise.", 'check_proximity': "Condition: Check for nearby obstacles. Returns True if obstacles are detected, False otherwise.", 'communicate_with_swarm': "Action: Communicate with other swarm robots. Returns True if successful, False otherwise.", 'is_target_reached': 'Condition: Check if target is reached. Returns True if the target coordinates match the current coordinates of the agent, False otherwise.', 'is_target_visible': 'Condition: Check if target is visible within the agent's range. Returns True if the target is within range, False otherwise.', 'move_to_target': 'Action: Move towards target coordinates. Returns True if successful, False otherwise.', 'scan_surroundings': 'Action: Scan the surrounding environment for potential obstacles. Returns True if successful, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Rotate and scan the surroundings to avoid obstacles, then go towards the target coordinates, communicate with other swarm robots, and signal task completion once the target is reached.'Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>check_proximity</Condition> <Action>agent_movement_rotate</Action> <Action>scan_surroundings</Action> </Sequence> <Action>check_proximity</Action> </Selector> <Selector> <Sequence> <Condition>is_target_visible</Condition> <Action>move_to_target</Action> <Action>communicate_with_swarm</Action> </Sequence> <Action>check_proximity</Action> </Selector> <Selector> <Sequence> <Condition>is_target_reached</Condition> <Action>task_completed</Action> </Selector> <Action>agent_movement_forward</Action> </Sequence> </BehaviorTree  
###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_red': "Action: Change agent's color to red. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_at_target': 'Condition: Check if agent has reached the target location. Returns True if target is reached, False otherwise.', 'move_to_target': 'Action: Move towards the designated target location. Always returns True.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Move towards the target location, change color to green, and return to the nest when target is reached, change color to white.' Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Action>move_to_target</Action> <Action>change_color_to_green</Action> </Sequence> <Action>agent_movement_freeze</Action> </Selector> <Sequence> <Condition>is_at_target</Condition> <Action>change_color_to_white</Action> <Action>continue_movement_agent</Action> </Sequence> </Sequence> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_red': "Action: Change agent's color to red. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_square': 'Action: Form a square pattern with other agents. Always returns True.', 'is_square_formed': 'Condition: Check if a square pattern is formed. Returns True if the pattern is formed, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Coordinate with other agents to form a square pattern, move towards the target location, and change color to green when target is reached, then return to the nest and change color to white.' Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>is_square_formed</Condition> <Action>form_square</Action> <Action>change_color_to_green</Action> </Sequence> <Action>agent_movement_freeze</Action> </Selector> <Sequence> <Action>move_to_target</Action> <Sequence> <Condition>is_at_target</Condition> <Action>change_color_to_white</Action> <Action>continue_movement_agent</Action> </Sequence> </Sequence> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_red': "Action: Change agent's color to red. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'follow_leader': 'Action: Follow the leader agent. Always returns True.', 'is_agent_leader': 'Condition: Check if the agent is the leader. Returns True if the agent is the leader, False otherwise.', 'is_leader_detected': 'Condition: Check if the leader agent is detected. Returns True if the leader agent is detected, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Follow the leader, change color to red when the leader is detected, and return to the nest and change color to white when the leader reaches the target location.' Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>is_agent_leader</Condition> <Sequence> <Sequence> <Action>follow_leader</Action> <Action>change_color_to_red</Action> </Sequence> <Agent_movement_freeze Action/> </Sequence> <Condition>is_leader_detected</Condition> <Sequence> <Action>change_color_to_white</Action> <Action>continue_movement_agent</Action> </Sequence> </Sequence> </BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_red': "Action: Change agent's color to red. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns
###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'explore': 'Action: Explore the environment in a zigzag pattern. Always returns True.', 'find_friends': 'Action: Search for other robots in the vicinity and form a group. Always returns True.', 'is_agent_in_group': 'Condition: Check if the agent is in a group with other robots. Returns True if the agent is in a group, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'reach_target': 'Action: Move towards the target until within 5 units. Always returns True.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Explore the environment, find friends and form a group, then reach the target and change color.'Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Action>explore</Action> <Sequence> <Condition>is_agent_in_group</Condition> <Action>reach_target</Action> <Action>task_completed</Action> </Sequence> </Sequence> <Action>find_friends</Action> <Action>change_color</Action> </Selector> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'move_to_target': 'Action: Move towards the target until within 10 units. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 10 units. Returns True if the target is within 10 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Move towards target, avoid obstacles, and return to nest.'Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Action>move_to_target</Action> <Action>task_completed</Action> </Sequence> <Sequence> <Condition>is_obstacle_detected</Condition> <Action>avoid_obstacle</Action> <Action>wander</Action> </Sequence> </Selector> <Condition>is_target_reached</Condition> <Action>agent_movement_freeze</Action> <Condition>is_agent_in_nest</Condition> </Sequence> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_neighbor_found': 'Condition: Check if a neighboring robot is detected. Returns True if a neighboring robot is detected, False otherwise.', 'move_towards_neighbors': 'Action: Move towards the neighboring robot until within 5 units. Always returns True.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Explore the environment, search for neighbors, and move towards them.'Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Action>explore</Action> <Sequence> <Condition>is_neighbor_found</Condition> <Action>move_towards_neighbors</Action> <Action>task_completed</Action> </Sequence> </Sequence> <Action>wander</Action> </Selector> </BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'move_to_target': 'Action: Move towards the target until within 10 units. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_light_detected': 'Condition: Check if light source is within 5 units. Returns True if light source is detected within 5 units, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 10 units. Returns True if the target is within 10 units of distance, False otherwise 
###
4.// INSTRUCTIONS: Use only the following behaviors {'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_direction_randomly': "Action: Change agent's direction to a random angle. Always returns True.", 'check_distance_to_target': 'Condition: Check the distance to the target. Returns True if the distance is within a specified range, False otherwise.', 'go_to_target': 'Action: Move towards the target. Always returns True.', 'is_agent_at_nest': 'Condition: Check if the agent is at the nest. Returns True if the agent is at the nest, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 10 units. Returns True if the target is within 10 units of distance, False otherwise.', 'resume_movement': 'Action: Resume the agent's movement. Always returns True.', 'stop_movement': 'Action: Stop the agent's movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.', 'wait': 'Action: Wait for 5 seconds. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Find the target, go to the target, and wait for 5 seconds before picking it up.' Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>is_target_detected</Condition> <Sequence> <Condition>check_distance_to_target</Condition> <Action>go_to_target</Action> <Action>wait</Action> </Sequence> </Sequence> <Action>wander</Action> </Selector> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_direction_randomly': "Action: Change agent's direction to a random angle. Always returns True.", 'check_distance_to_target': 'Condition: Check the distance to the target. Returns True if the distance is within a specified range, False otherwise.', 'go_to_target': 'Action: Move towards the target. Always returns True.', 'is_agent_at_nest': 'Condition: Check if the agent is at the nest. Returns True if the agent is at the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a horizontal line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_grabbed': 'Condition: Check if the target object has been grabbed. Returns True if the target is grabbed, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 10 units. Returns True if the target is within 10 units of distance, False otherwise.', 'resume_movement': 'Action: Resume the agent's movement. Always returns True.', 'stop_movement': 'Action: Stop the agent's movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Move towards target, grab it once reached, form a horizontal line, and avoid obstacles along the way.' Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>is_target_detected</Condition> <Sequence> <Action>go_to_target</Action> <Condition>is_target_reached</Condition> <Condition>is_path_clear</Condition> <Action>grab_target</Action> </Sequence> </Sequence> <Selector> <Sequence> <Condition>is_target_grabbed</Condition> <Condition>is_line_formed</Condition> <Action>stop_movement</Action> <Action>form_line</Action> </Sequence> </Selector> <Action>avoid_obstacle</Action> </Selector> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'evade_target': 'Action: Move away from the target. Always returns True.', 'flee_obstacle': 'Action: Move away from the obstacle. Always returns True.', 'move_to_random_location': "Action: Move to a random location within the environment. Always returns True.", 'obstacle_detected': 'Condition: Check if an obstacle is in the agent's path. Returns True if an obstacle is detected, False otherwise.', 'target_detected': 'Condition: Check if the target is within the agent's vicinity. Returns True if the target is within a specified range, False otherwise.', 'resume_movement': 'Action: Resume the agent's movement. Always returns True.', 'move_to_nest': 'Action: Move towards the nest. Always returns True.', 'wait_for_obstacle': 'Action: Wait for 3 seconds before continuing. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Evade the target, flee from obstacles, and return to the nest.' Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>target_detected</Condition> <Action>evade_target</Action> <Condition>obstacle_detected</Condition> <Action>flee_obstacle</Action> </Sequence> <Selector> <Sequence> <Condition>obstacle_detected</Condition> <Action>wait_for_obstacle</Action> </Sequence> </Selector> <Sequence> <Condition>obstacle_detected</Condition> <Action>resume_movement</Action> <Selector> <Condition>target_detected</Condition> <Sequence> <Action>evade_target</Action> <Action>move_to_nest</Action> </Sequence> </Selector> </Sequence> <Action>move_to_random_location</Action> </Selector> </BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'analyze_environment': 'Action: Analyze the robot's surroundings. Always returns True.', 'clear_memory': 'Action: Clear the robot's memory of past actions and conditions. Always returns True.', 'dock_to_charger': 'Action: Return to the<BehaviorTree> <Selector> <Sequence> <Condition>is_target_detected</Condition> <Action>change_color_to_green</Action> <Action>continue_movement_agent</Action> </Sequence> <Action>avoid_obstacle</Action> </Selector> <Selector> <Sequence> <Condition>is_target_reached</Condition> <Action>change_color_to_white</Action> <Action>task_completed</Action> </Sequence> <Action>wander</Action> </Selector> </BehaviorTree>

###
3.// INSTRUCTIONS: Use only the following behaviors {'avoid_collision': 'Action: Stop movement and change direction to avoid collision. Always returns True.', 'change_color_to_blue': "Action: Change agent's color to blue. Always returns True.", 'change_color_to_red': "Action: Change agent's color to red. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'is_blue_detector_active': 'Condition: Check if the blue detector is active. Returns True if the detector is active, False otherwise.', 'is_overlap_detected': 'Condition: Check if there is an overlap with another robot. Returns True if an overlap is detected, False otherwise.', 'is_red_detector_active': 'Condition: Check if the red detector is active. Returns True if the detector is active, False otherwise.', 'run_away': 'Action: Move away from the detected obstacle. Always returns True.', 'scan_area': 'Action: Rotate 360 degrees to scan the area. Always returns True.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3.// USER COMMAND: generate behavior tree to 'Avoid collision with other robots, scan the area, and change color to red.' Output only the XML behavior tree without extra text.
3.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>is_overlap_detected</Condition> <Action>change_color_to_blue</Action> <Action>continue_movement_agent</Action> </Sequence> <Action>avoid_collision</Action> </Selector> <Selector> <Sequence> <Action>scan_area</Action> <Condition>is_red_detector_active</Condition> <Action>change_color_to_red</Action> <Action>task_completed</Action> </Sequence> <Action>run_away</Action> </Selector> </Sequence> </BehaviorTree>

###
4.// INSTRUCTIONS: Use only the following behaviors {'change_speed': 'Action: Change the speed of the agent. Always returns True.', 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'detect_food_source': 'Condition: Check for nearby food sources. Returns True if a food source is within 10 units, False otherwise.', 'eat': 'Action: Consume the food source. Always returns True.', 'form_square': 'Action: Form a square shape by aligning with other agents. Always returns True.', 'is_food_collected': 'Condition: Check if food source is collected. Returns True if the food source is consumed, False otherwise.', 'is_square_formed': 'Condition: Check if square shape is formed. Returns True if agents are aligned in a square shape, False otherwise.', 'run_away': 'Action: Move away from the detected obstacle. Always returns True.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Find and consume a food source, form a square with other agents, and change speed to 2.' Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>detect_food_source</Condition> <Action>form_square</Action> <Condition>is_square_formed</Condition> <Action>change_speed</Action> </Sequence> <Action>continue_movement_agent</Action> </Selector> <Selector> <Sequence> <Condition>is_food_collected</Condition> <Action>task_completed</Action> </Sequence> <Action>run_away</Action> </Selector> </Sequence> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'avoid_fence': 'Action: Change direction to avoid a nearby fence. Always returns True.', 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'detect_fence': 'Condition: Check for nearby fences. Returns True if a fence is detected within 5 units, False otherwise.', 'detect_water': 'Condition: Check for nearby water. Returns True if water is detected within 5 units, False otherwise.', 'drink': 'Action: Drink water from nearby source. Always returns True.', 'eat': 'Action: Consume nearby food source. Always returns True.', 'forage': 'Action: Move towards a food source and consume it. Always returns True.', 'is_food_collected': 'Condition: Check if food source is collected. Returns True if the food source is consumed, False otherwise.', 'is_thirsty': 'Condition: Check if agent's thirst level is below 50%. Returns True if thirst level is below 50%, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Avoid fences, forage for food and water, and signal task completion when a food source is consumed.' Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>detect_fence</Condition> <Action>avoid_fence</Action> <Action>continue_movement_agent</Action> </Sequence> <Selector> <Sequence> <Condition>is_thirsty</Condition> <Action>forage</Action> <Action>drink</Action> </Sequence> <Sequence> <Condition>is_food_collected</Condition> <Action>task_completed</Action> </Sequence> </Selector> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'avoid_collision': 'Action: Stop movement and change direction to avoid collision. Always returns True.', 'change_color_to_blue': "Action: Change agent's color to blue. Always returns True.", 'change_color_to_red': "Action: Change agent's color to red. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_blue_detector_active': 'Condition: Check if the blue detector    
###
4.// INSTRUCTIONS: Use only the following behaviors {'change_color_to_red': "Action: Change agent's color to red. Always returns True.", 'change_color_to_blue': "Action: Change agent's color to blue. Always returns True.", 'is_near_obstacle': 'Condition: Check if the agent is near an obstacle. Returns True if the agent is within 10 units of an obstacle, False otherwise.', 'is_near_nest': 'Condition: Check if the agent is near the nest. Returns True if the agent is within 10 units of the nest, False otherwise.', 'move_forward': 'Action: Move forward by 5 units. Always returns True.', 'rotate_left': 'Action: Rotate left by 30 degrees. Always returns True.', 'rotate_right': 'Action: Rotate right by 30 degrees. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Avoid obstacles while moving towards the nest, change color to blue when near the nest.'Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree> <Sequence> <Action move_forward></Action> <Selector> <Sequence> <Condition>is_near_obstacle</Condition> <Action>rotate_left</Action> <Action>rotate_right</Action> </Sequence> </Selector> <Selector> <Sequence> <Condition>is_near_nest</Condition> <Action>change_color_to_blue</Action> </Sequence> </Selector> </Sequence> </BehaviorTree>
    
5.// INSTRUCTIONS: Use only the following behaviors {'wait': "Action: Wait for 1 second. Always returns True.", 'increase_speed': "Action: Increase agent's speed by 10%. Always returns True.", 'decrease_speed': "Action: Decrease agent's speed by 10%. Always returns True."}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Increase speed, wait for 1 second, then decrease speed.'Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree> <Sequence> <Action>increase_speed</Action> <Action>wait</Action> <Action>decrease_speed</Action> </Sequence> </BehaviorTree>

6.// INSTRUCTIONS: Use only the following behaviors {'wait': "Action: Wait for 1 second. Always returns True.", 'move_forward': 'Action: Move forward by 5 units. Always returns True.', 'rotate_left': 'Action: Rotate left by 30 degrees. Always returns True.', 'rotate_right': 'Action: Rotate right by 30 degrees. Always returns True.', 'detect_sign': "Condition: Check for a signpost. Returns True if a signpost is within 10 units of distance, False otherwise.", 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Move forward, rotate left when a signpost is detected, and avoid obstacles.'Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Action>move_forward</Action> <Condition>detect_sign</Condition> <Action>rotate_left</Action> </Sequence> <Action>wait</Action> </Selector> <Action>avoid_obstacle</Action> </Sequence> </BehaviorTree>

7.// INSTRUCTIONS: Use only the following behaviors {'change_color_to_yellow': "Action: Change agent's color to yellow. Always returns True.", 'form_circle': 'Action: Form a circle with a radius of 10 units. Always returns True.', 'is_circle_formed': 'Condition: Check if a circle is formed. Returns True if the circle is formed with a radius of 10 units, False otherwise.', 'rotate_left': 'Action: Rotate left by 30 degrees. Always returns True.', 'rotate_right': 'Action: Rotate right by 30 degrees. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: generate behavior tree to 'Form a circle, change color to yellow, and rotate left twice.'Output only the XML behavior tree without extra text.
7.// OUTPUT:
<BehaviorTree> <Sequence> <Action>form_circle</Action> <Action>change_color_to_yellow</Action> <Selector> <Sequence> <Action>rotate_left</Action> <Action>rotate_left</Action> </Sequence> </Selector> </Sequence> </BehaviorTree>###
4.// INSTRUCTIONS: Use only the following behaviors {'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_nest_clear': 'Condition: Check if the nest is clear. Returns True if no obstacles are detected in the nest, False if obstacles are present.', 'move_to_nest': "Action: Move towards the nest. Always returns True.", 'raise_flag': 'Action: Raise the flag. Always returns True.', 'lower_flag': 'Action: Lower the flag. Always returns True.', 'wait_for_signal': "Action: Wait for a signal from other agents. Always returns True."}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Move to the nest, raise the flag, and wait for a signal from other agents.'Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>is_agent_in_nest</Condition> <Selector> <Sequence> <Condition>is_nest_clear</Condition> <Action>raise_flag</Action> </Selector> <Action>move_to_nest</Action> </Sequence> <Action>lower_flag</Action> </Selector> <Action>wait_for_signal</Action> </Sequence> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'explore': "Action: Move towards an unexplored area. Returns True if the agent reaches the area, False otherwise.", 'go_to_target': 'Action: Move towards the target. Returns True if the agent reaches the target, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'leave_mark': 'Action: Leave a marking at the current location. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Explore the environment, go to the target, and leave a marking at the target location.'Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Selector> <Sequence> <Condition>is_obstacle_detected</Condition> <Action>avoid_obstacle</Action> </Sequence> <Action>explore</Action> </Selector> <Sequence> <Condition>is_target_detected</Condition> <Selector> <Sequence> <Condition>is_target_reached</Condition> <Action>leave_mark</Action> </Selector> <Action>go_to_target</Action> </Sequence> </Selector> </Sequence> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'move_closer': 'Action: Move closer to the nearest agent. Returns True if the agent reaches the nearest agent, False otherwise.', 'avoid_collision': 'Action: Avoid collision with other agents. Always returns True.', 'wait_for_signal': "Action: Wait for a signal from other agents. Always returns True.", 'is_collision_detected': 'Condition: Check for possible collisions with other agents. Returns True if a collision is detected, False otherwise.', 'is_distance_greater_than_10': 'Condition: Check if distance to nearest agent is greater than 10. Returns True if distance is greater than 10, False otherwise.', 'is_distance_less_than_5': 'Condition: Check if distance to nearest agent is less than 5. Returns True if distance is less than 5, False otherwise.', 'task_completed': 'Action: Signal task completion by stopping movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Move closer to the nearest agent, avoid collision, and wait for a signal from other agents.'Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>is_collision_detected</Condition> <Action>avoid_collision</Action> </Sequence> <Selector> <Sequence> <Condition>is_distance_greater_than_10</Condition> <Action>move_closer</Action> <Sequence> <Condition>is_distance_less_than_5</Condition> <Action>task_completed</Action> </Sequence> </Selector> <Action>wait_for_signal</Action> </Selector> </BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'explore': "Action: Move towards an unexplored area. Returns True if the agent reaches the area, False otherwise.", 'go_to_target': 'Action: Move towards the target. Returns True if the agent reaches the target, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'take_sample': 'Action: Take a sample from the environment. Returns True if a sample is successfully taken, False otherwise.', 'return_to_base': 'Action: Return to the base with the collected samples. Returns True if the agent reaches the base, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: generate behavior tree to 'Explore the environment, take a sample, and return to the base.'Output only the XML behavior tree without extra text.
7.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Selector> <Sequence> <Condition>is_obstacle_detected</Condition> <Action>avoid_obstacle</Action> </Sequence> <Action>explore</Action> </Selector> <Selector> <Sequence> <Condition>take_sample</Condition> <Selector> <Sequence> <Condition>is_target_reached</Condition> <Action>return_to_base</Action> </Selector> <Action>go_to_target</Action> </Sequence> </Selector> </Sequence> </                                                
###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Find the target, move towards it, and then form a line in front of it.'Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>is_target_detected</Condition><Action>continue_movement_agent</Action><Action>form_line</Action></Sequence><Action>wander</Action></Selector><Condition>is_line_formed</Condition></Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'synchronize_color': 'Action: Ensure all agents have the same color. Always returns True.', 'move_to_nest': 'Action: Move towards the nest at a constant speed of 1 unit per second. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Synchronize color, form a line, and then move to the nest and change color to green.'Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree><Sequence><Action>form_line</Action><Sequence><Condition>is_line_formed</Condition><Action>synchronize_color</Action></Sequence></Sequence><Selector><Sequence><Condition>is_agent_in_nest</Condition><Action>change_color_to_green</Action></Sequence><Action>move_to_nest</Action></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.', 'adjust_speed': 'Action: Set agent's speed to 0.5 units per second. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Avoid obstacles and adjust speed, find the target, and then form a line in front of it.'Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>is_obstacle_detected</Condition><Action>avoid_obstacle</Action><Action>adjust_speed</Action></Sequence><Action>continue_movement_agent</Action></Selector><Selector><Sequence><Condition>is_target_detected</Condition><Action>change_color_to 
###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'detect_food': 'Condition: Check if there is food nearby. Returns True if food is detected, False otherwise.', 'grasp_food': 'Action: Pick up the food. Always returns True.', 'in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'move_to_food': 'Action: Move towards the food. Always returns True.', 'move_to_nest': 'Action: Move towards the nest. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Find and pick up food, then return to nest and deposit food.' Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>detect_food</Condition> <Action>grasp_food</Action> <Action>move_to_nest</Action> </Sequence> <Sequence> <Condition>in_nest</Condition> <Action>move_to_food</Action> <Action>grasp_food</Action> </Sequence> </Selector> <Selector> <Sequence> <Action>move_to_food</Action> <Condition>detect_food</Condition> </Sequence> <Sequence> <Action>continue_movement_agent</Action> <Condition>in_nest</Condition> </Sequence> </Selector> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'detect_enemy': 'Condition: Check for enemy presence. Returns True if enemy is detected, False otherwise.', 'move_to_enemy': 'Action: Move towards enemy. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Patrol the perimeter and move towards enemies if detected.' Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Action>continue_movement_agent</Action> <Condition>detect_enemy</Condition> <Action>move_to_enemy</Action> </Sequence> <Sequence> <Action>continue_movement_agent</Action> <Action>agent_movement_freeze</Action> </Sequence> </Selector> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'detect_obstacle': 'Condition: Check for obstacle presence. Returns True if obstacle is detected, False otherwise.', 'move_around_obstacle': 'Action: Move in a circular path to avoid obstacle. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Navigate through a maze while avoiding obstacles.' Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>detect_obstacle</Condition> <Action>move_around_obstacle</Action> <Action>continue_movement_agent</Action> </Sequence> </Selector> <Sequence> <Action>continue_movement_agent</Action> <Action>agent_movement_freeze</Action> </Sequence> </BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'detect_person': 'Condition: Check for human presence. Returns True if human is detected, False otherwise.', 'alert_group': 'Action: Send an alert to the rest of the robot group. Always returns True.', 'escort_person': 'Action: Escort the human to a designated location. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: generate behavior tree to 'Act as a security guard and escort any detected humans to a safe location.' Output only the XML behavior tree without extra text.
7.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>detect_person</Condition> <Action>alert_group</Action> <Action>escort_person</Action> </Sequence> <Sequence> <Action>continue_movement_agent</Action> <Action>agent_movement_freeze</Action> </Sequence> </Selector> </BehaviorTree>
###
3.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'evaluate_target': 'Action: Evaluate the target and make a decision. Returns True if decision is made, False otherwise.', 'is_agent_nearby': 'Condition: Check if there is another agent nearby. Returns True if another agent is within 10 units, False otherwise.', 'is_color_green': 'Condition: Check if agent's color is green. Returns True if agent's color is green, False otherwise.', 'is_food_detected': 'Condition: Check if food is within 20 units. Returns True if food is within 20 units of distance, False otherwise.', 'is_movement_allowed': 'Condition: Check if agent's movement is allowed. Returns True if agent has clearance to move, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_reached': 'Condition: Check if target is within 10 units. Returns True if the target is within 10 units of distance, False otherwise.', 'pickup_food': 'Action: Pickup food item at current location. Returns True if food is successfully picked up, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3.// USER COMMAND: generate behavior tree to 'Find a nearby agent, evaluate the target, pick up food, change color to green, and return to the nest. If the target is too far, change color to white.'Output only the XML behavior tree without extra text.
3.// OUTPUT:
<BehaviorTree> <Sequence> <Condition>is_agent_nearby</Condition> <Action>evaluate_target</Action> <Selector> <Sequence> <Condition>is_movement_allowed</Condition> <Action>pickup_food</Action> <Action>change_color_to_green</Action> </Sequence> <Sequence> <Condition>is_target_reached</Condition> <Action>change_color_to_white</Action> </Sequence> </Selector> <Selector> <Condition>is_food_detected</Condition> <Action>move_to_food</Action> </Selector> <Selector> <Condition>is_color_green</Condition> <Action>move_to_nest</Action> </Selector> <Action>task_completed</Action> </Sequence> </BehaviorTree>

###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Returns True if agent successfully avoids obstacle, False otherwise.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'drill_for_resource': 'Action: Drill for the resource at current location. Returns True if resource is successfully drilled, False otherwise.', 'is_color_green': 'Condition: Check if agent's color is green. Returns True if agent's color is green, False otherwise.', 'is_movement_allowed': 'Condition: Check if agent's movement is allowed. Returns True if agent has clearance to move, False otherwise.', 'is_resource_detected': 'Condition: Check if resource is within 20 units. Returns True if resource is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 10 units. Returns True if the target is within 10 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Find nearby resource, drill for the resource, change color to green, and return to the nest. If the target is too far, change color to white.'Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree> <Sequence> <Condition>is_resource_detected</Condition> <Action>move_to_resource</Action> <Sequence> <Condition>is_movement_allowed</Condition> <Action>drill_for_resource</Action> <Action>change_color_to_green</Action> </Sequence> <Selector> <Condition>is_target_reached</Condition> <Action>change_color_to_white</Action> </Selector> <Selector> <Condition>is_color_green</Condition> <Action>move_to_nest</Action> </Selector> <Action>task_completed</Action> </Sequence> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'disperse': 'Action: Disperse from current location. Returns True if successfully dispersed, False otherwise.', 'is_color_green': 'Condition: Check if agent's color is green. Returns True if agent's color is green, False otherwise.', 'is_food_available': 'Condition: Check if food is available within 30 units. Returns True if food is detected within 30 units, False otherwise.', 'is_movement_allowed': 'Condition: Check if agent's movement is allowed. Returns True if agent has clearance to move, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 10 units. Returns True if the target is within 10 units of distance, False otherwise.', 'search_for_food': 'Action: Search for food within the environment. Returns True if food is successfully located, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Disperse from current location, search for food, and gather food if found. If no food is found, return to the nest and change color to green.'Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree> <Selector> <Action>disperse</Action> <Sequence> <Condition>is_movement_allowed</Condition> <Selector> <Sequence> <Condition>is_food_available</Condition> <Action 
###
3.// INSTRUCTIONS: Use only the following behaviors {'follow_path': 'Action: Follow a predefined path. Always returns True.', 'detect_obstacles': 'Action: Detect and avoid obstacles along the path. Always returns True.', 'recharge': 'Action: Return to the charging station and recharge. Always returns True.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_battery_low': 'Condition: Check if battery charge is below 20%. Returns True if battery charge is below 20%, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3.// USER COMMAND: Generate a behavior tree for a swarm of robots to navigate a maze while avoiding obstacles and recharging when necessary.
3.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_battery_low</Condition><Action>recharge</Action></Sequence><Selector><Sequence><Condition>is_path_clear</Condition><Action>follow_path</Action></Sequence><Sequence><Condition>is_obstacle_detected</Condition><Action>detect_obstacles</Action></Sequence></Selector></Selector></BehaviorTree>

###
4.// INSTRUCTIONS: Use only the following behaviors {'calculate_distance_to_target': 'Action: Calculate distance from current position to target. Returns True and outputs distance value.', 'move_towards_target': 'Action: Move towards the target. Always returns True.', 'scan_area': 'Action: Scan the area for potential targets. Returns True and outputs a list of targets.', 'is_target_detected': 'Condition: Check if target is within range. Returns True if target is detected within predefined range, False otherwise.', 'is_path_blocked': 'Condition: Check if path to target is blocked. Returns True if path is blocked, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Generate a behavior tree for a swarm of robots to find and collect a specific target while navigating through obstacles.
4.// OUTPUT:
<BehaviorTree><Sequence><Selector><Condition>is_path_blocked</Condition><Action>move_around_obstacle</Action></Selector><Sequence><Condition>is_target_detected</Condition><Selector><Sequence><Condition>is_path_blocked</Condition><Action>move_around_obstacle</Action></Sequence><Action>calculate_distance_to_target</Action><Action>move_towards_target</Action></Selector></Sequence><Action>scan_area</Action></Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'move_straight': 'Action: Move straight for a predefined distance. Always returns True.', 'turn_left': 'Action: Turn the robot left by 90 degrees. Always returns True.', 'turn_right': 'Action: Turn the robot right by 90 degrees. Always returns True.', 'detect_obstacles': 'Action: Detect and avoid obstacles while moving. Always returns True.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_at_edge': 'Condition: Check if the robot is at the edge of the environment. Returns True if at edge, False otherwise.', 'is_stuck': 'Condition: Check if the robot is stuck. Returns True if stuck, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Generate a behavior tree for a swarm of robots to explore and map an environment, avoiding obstacles and staying within the boundaries.
5.// OUTPUT:
<BehaviorTree><Sequence><Selector><Condition>is_stuck</Condition><Action>move_randomly</Action></Selector><Sequence><Condition>is_obstacle_detected</Condition><Action>detect_obstacles</Action></Sequence><Selector><Sequence><Condition>is_at_edge</Condition><Action>turn_around</Action></Sequence><Sequence><Condition>is_at_edge</Condition><Selector><Condition>is_obstacle_detected</Condition><Action>turn_left</Action></Selector><Selector><Action>turn_right</Action><Action>move_straight</Action></Selector></Sequence></Selector></Sequence></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'find_target': 'Action: Search for the target using a predefined algorithm. Returns True and outputs target location.', 'navigate_to_target': 'Action: Navigate to the target using a predefined path. Always returns True.', 'pause_movement': 'Action: Pause the robot's movement for a specified time. Always returns True.', 'is_target_reached': 'Condition: Check if the target has been reached. Returns True if target is reached, False otherwise.', 'is_target_lost': 'Condition: Check if the target has been lost. Returns True if target is lost, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Generate a behavior tree for a swarm of robots to find and retrieve a specific target while maintaining communication with the target.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_target_reached</Condition><Action>grab_target</Action></Sequence><Sequence><Condition>is_target_lost</Condition><Action>find_target</Action></Sequence><Sequence><Condition>is_target_detected</Condition><Selector><Action>pause_movement</Action><Action>navigate_to_target</Action></Selector></Sequence></Selector></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'move_circular': 'Action: Move in a circular path for a predefined distance. Always returns True.', 'move_to_higher_ground': 'Action: Move to a higher elevation for better visibility. Always returns True.', 'identify_objects': 'Action: Use image recognition to identify objects in the area. Returns True and outputs a list of objects.', 'is_object_detected': 'Condition: Check if an object is detected. Returns True if object is detected, False otherwise.', 'is_on_higher_ground': 'Condition: Check if the robot is currently at a higher elevation. Returns True if at higher elevation, False otherwise.', 'is_object_in_range': 'Condition: Check if the detected object is within range. Returns True if within range, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: Generate a behavior tree for a swarm of robots to patrol an area while identifying and investigating any detected objects.
7.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_on_higher_ground</Condition><Action>move_to_higher_ground</Action></Sequence><Sequence><Condition>
###
3.// INSTRUCTIONS: Use only the following behaviors {'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'detect_enemy': 'Condition: Check for enemies within 10 units. Returns True if an enemy is detected, False otherwise.', 'fight_enemy': 'Action: Attack the enemy when in range. Always returns True.', 'form_circle': 'Action: Form a circle with other robots. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_enemy_defeated': 'Condition: Check if enemy is defeated. Returns True if the enemy has been defeated, False otherwise.', 'is_line_formed': 'Condition: Check if a circle is formed. Returns True if the swarm is formed in a circle, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3.// USER COMMAND: generate behavior tree to 'Defend the nest by forming a circle with other robots and fighting against enemies until they are defeated'. Output only the XML behavior tree without extra text.
3.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_enemy_defeated</Condition><Selector><Sequence><Condition>is_agent_in_nest</Condition><Action>continue_movement_agent</Action></Sequence><Action>fight_enemy</Action><Sequence><Condition>is_line_formed</Condition><Action>form_circle</Action></Sequence></Selector></Sequence></BehaviorTree>

###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'change_color_to_black': "Action: Change agent's color to black. Always returns True.", 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'detect_light': 'Condition: Check for light intensity. Returns True if light is detected above a certain threshold, False otherwise.', 'follow_light': 'Action: Navigate towards the source of light. Always returns True.', 'noise_detection': 'Condition: Check for unusual noise levels. Returns True if noise levels exceed a certain threshold, False otherwise.', 'run_away': 'Action: Move away from the source of noise. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_light_source_reached': 'Condition: Check if the agent has reached the source of light. Returns True if the agent is within 5 units of distance from the light source, False otherwise.', 'is_noise_source_reached': 'Condition: Check if the agent has reached the source of noise. Returns True if the agent is within 5 units of distance from the noise source, False otherwise.', 'move_to_nest': 'Action: Move towards the nest. Always returns True.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Find and follow a source of light until reaching the nest, while avoiding sources of noise and changing color to black when near the light source'. Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_light_source_reached</Condition><Action>change_color_to_black</Action><Sequence><Condition>is_agent_in_nest</Condition><Action>agent_movement_freeze</Action></Sequence></Sequence><Selector><Sequence><Condition>detect_light</Condition><Action>follow_light</Action></Sequence><Action>wander</Action><Sequence><Condition>noise_detection</Condition><Action>run_away</Action></Sequence></Selector></Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'move_to_target': 'Action: Move towards the target. Always returns True.', 'collect_resource': 'Action: Pick up the resource at the target location. Always returns True.', 'is_resource_collected': 'Condition: Check if resource is successfully collected. Returns True if the agent is carrying the resource, False otherwise.', 'deposit_resource': 'Action: Deposit the collected resource at the nest. Always returns True.', 'is_deposited': 'Condition: Check if resource is successfully deposited. Returns True if the resource is deposited at the nest, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Collect resource at the target location, then deposit it at the nest'. Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_resource_collected</Condition><Sequence><Condition>is_agent_in_nest</Condition><Action>agent_movement_freeze</Action></Sequence></Sequence><Selector><Sequence><Condition>is_target_reached</Condition><Action>move_to_target</Action><Action>collect_resource</Action></Sequence><Action>wander</Action><Sequence><Condition>is_deposited</Condition><Action>deposit_resource</Action></Sequence></Selector></Sequence></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'change_color_to_red': "Action: Change agent's color to red. 
###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_blue': "Action: Change agent's color to blue. Always returns True.", 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_circle': 'Action: Form a circular shape with the agents. Always returns True.', 'form_triangle': 'Action: Form a triangular shape with the agents. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_circle_formed': 'Condition: Check if a circular shape is formed. Returns True if the circle is formed with the agents, False otherwise.', 'is_triangle_formed': 'Condition: Check if a triangular shape is formed. Returns True if the triangle is formed with the agents, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Form a triangle with the agents while avoiding obstacles'. Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_path_clear</Condition><Action>form_triangle</Action></Sequence><Sequence><Action>wander</Action><Sequence><Condition>is_triangle_formed</Condition><Action>avoid_obstacle</Action></Sequence></Sequence></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_red': "Action: Change agent's color to red. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Move towards the target while avoiding obstacles and changing color to red if an obstacle is detected'. Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_path_clear</Condition><Sequence><Condition>is_target_detected</Condition><Action>change_color_to_green</Action></Sequence></Sequence><Selector><Sequence><Condition>is_obstacle_detected</Condition><Action>change_color_to_red</Action></Sequence><Sequence><Condition>is_obstacle_detected</Condition><Action>avoid_obstacle</Action></Sequence><Sequence><Action>continue_movement_agent</Action></Sequence></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_red': "Action: Change agent's color to red. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'is_intruder_detected': 'Condition: Check if an intruder is detected in the monitored area. Returns True if an intruder is detected, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Move towards the target, form a line with other agents, and avoid obstacles along the way. If an intruder is detected, change color to red to warn others'. Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_path_clear</Condition><Action>form_line</Action><Selector><Sequence><Condition>is_agent_in_nest</Condition><Sequence><Condition>is_target_detected</Condition><Action>change_color_to_white</Action></Sequence></Sequence><Selector><Sequence><Condition>is_target_detected</Condition><Action>change_color_to_green</Action></Sequence><Sequence><Condition>is_intruder_detected</Condition><Action>change_color_to_red</Action></Sequence></Selector></Selector></Sequence 
###
4.// INSTRUCTIONS: Use only the following behaviors {'detect_network': 'Condition: Check if connection to the network is established. Returns True if connection is established, False otherwise.', 'join_network': 'Action: Initiate connection to the network. Always returns True.', 'leave_network': 'Action: Terminate connection to the network. Always returns True.', 'send_data': 'Action: Send collected data to the network. Always returns True.', 'receive_data': 'Action: Receive data from the network. Always returns True.', 'analyze_data': 'Action: Analyze received data. Always returns True.', 'is_data_available': 'Condition: Check if new data is available in the network. Returns True if data is available, False otherwise.', 'is_data_processed': 'Condition: Check if data has been processed. Returns True if data has been processed, False otherwise.}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Join network, send data, receive data, analyze data, and leave network when finished.'Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree> <Sequence> <Action>join_network</Action> <Action>send_data</Action> <Selector> <Sequence> <Condition>is_data_available</Condition> <Action>receive_data</Action> <Action>analyze_data</Action> </Sequence> <Action>leave_network</Action> </Selector> </Sequence> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'move_up': 'Action: Move up one unit. Always returns True.', 'move_down': 'Action: Move down one unit. Always returns True.', 'move_left': 'Action: Move left one unit. Always returns True.', 'move_right': 'Action: Move right one unit. Always returns True.', 'is_at_boundary': 'Condition: Check if agent is at the boundary of the environment. Returns True if at boundary, False otherwise.', 'is_visited': 'Condition: Check if current position has been visited. Returns True if visited, False otherwise.', 'is_moving_up': 'Condition: Check if agent is currently moving up. Returns True if moving up, False otherwise.', 'is_moving_down': 'Condition: Check if agent is currently moving down. Returns True if moving down, False otherwise.', 'is_moving_left': 'Condition: Check if agent is currently moving left. Returns True if moving left, False otherwise.', 'is_moving_right': 'Condition: Check if agent is currently moving right. Returns True if moving right, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Move to the top right corner of the environment, then move to the bottom left corner, and finally return to the starting point.'Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>is_moving_up</Condition> <Action>move_right</Action> </Sequence> <Sequence> <Condition>is_moving_down</Condition> <Action>move_left</Action> </Sequence> <Sequence> <Condition>is_at_boundary</Condition> <Action>wander</Action> </Sequence> <Action>task_completed</Action> </Selector> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'detect_barrier': 'Condition: Check if a barrier is detected in front of the agent. Returns True if a barrier is detected, False otherwise.', 'detect_water': 'Condition: Check if water is detected in the surrounding area. Returns True if water is detected, False otherwise.', 'collect_water': 'Action: Use a container to collect water. Always returns True.', 'dispose_water': 'Action: Dispose collected water. Always returns True.', 'check_container_level': 'Condition: Check if the water container is currently full. Returns True if container is full, False if not full.', 'check_water_quality': 'Condition: Check if the collected water is clean. Returns True if water is clean, False otherwise.', 'navigate_to_water_source': 'Action: Navigate to the nearest water source. Always returns True.', 'navigate_to_disposal_site': 'Action: Navigate to the designated water disposal site. Always returns True.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Detect water, navigate to the water source, collect water, navigate to disposal site, dispose water, and repeat until the container is full and water is clean.'Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Condition>detect_water</Condition> <Sequence> <Action>navigate_to_water_source</Action> <Sequence> <Condition>check_container_level</Condition> <Action>collect_water</Action> </Sequence> <Action>dispose_water</Action> </Sequence> </Selector> <Selector> <Sequence> <Condition>check_water_quality</Condition> <Action>navigate_to_disposal_site</Action> <Action>navigate_to_water_source</Action> </Sequence> <Action>task_completed</Action> </Selector> </Sequence> </BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'detect_target': 'Condition: Check if target is detected in the environment. Returns True if target is detected, False otherwise.', 'find_target': 'Action: Continuously rotate and scan the environment to find the target. Always returns True.', 'near_target': 'Condition: Check if agent is within 10 units of the target. Returns True if within 10 units, False otherwise.', 'approach_target': 'Action: Move towards the target. Always returns True.', 'grab_target': 'Action: Use an extendable arm to grab the target. Always returns True.', 'lift_target': 'Action: Lift the target off the ground. Always returns True.', 'transport_target': 'Action: Transport the target to a designated location. Always returns True.', 'release_target': 'Action: Release the target at the designated location. Always returns True.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: generate behavior tree to 'Find the 
###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Move from the nest to the target while avoiding obstacles.'
4.// OUTPUT:
<BehaviorTree> <Sequence> <Condition>is_agent_in_nest</Condition> <Action>form_line</Action> <Action>move_forward</Action> <Selector> <Sequence> <Condition>is_obstacle_detected</Condition> <Action>avoid_obstacle</Action> <Action>update_map</Action> <Action>task_completed</Action> </Sequence> <Action>continue_movement_agent</Action> </Selector> </Sequence> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Move towards the target while checking for obstacles and updating the map.'
5.// OUTPUT:
<BehaviorTree> <Sequence> <Action>move_forward</Action> <Selector> <Sequence> <Condition>is_obstacle_detected</Condition> <Action>avoid_obstacle</Action> <Action>update_map</Action> </Sequence> <Action>continue_movement_agent</Action> </Selector> </Sequence> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Continue movement towards the target until it is within 20 units, then stop moving.'
6.// OUTPUT:
<BehaviorTree> <Sequence> <Action>move_forward</Action> <Selector> <Sequence> <Condition>is_target_detected</Condition> <Action>agent_movement_freeze</Action> <Action>task_completed</Action> </Sequence> <Action>continue_movement_agent</Action> </Selector> </Sequence> </BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'} to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: generate behavior tree to 'Perform a random movement while checking for obstacles and updating the map.'
7.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>is_obstacle_detected</Condition> <Action>avoid_obstacle</Action> <Action>update_map</Action> </Sequence> <Action>continue_movement_agent</Action> </Selector> <Action>wander</Action> </Sequence> </BehaviorTree>###

3.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3.// USER COMMAND: generate behavior tree to 'Move towards the target, avoid obstacles and stop when the target is reached'. Output only the XML behavior tree without extra text.
3.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>is_target_detected</Condition> <Action>continue_movement_agent</Action> </Sequence> <Sequence> <Condition>is_obstacle_detected</Condition> <Action>avoid_obstacle</Action> </Sequence> </Selector> <Sequence> <Condition>is_target_reached</Condition> <Action>agent_movement_freeze</Action> </Sequence> </BehaviorTree>

###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Change agent's color to white if in nest, otherwise move towards the target'. Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>is_agent_in_nest</Condition> <Action>change_color_to_white</Action> </Sequence> <Sequence> <Condition>is_target_detected</Condition> <Action>continue_movement_agent</Action> </Sequence> </Selector> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Avoid obstacles and form a line at the center until target is reached, then change agent's color to green'. Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>is_obstacle_detected</Condition> <Action>avoid_obstacle</Action> </Sequence> <Sequence> <Condition>is_line_formed</Condition> <Action>form_line</Action> </Sequence> </Selector> <Sequence> <Condition>is_target_detected</Condition> <Selector> <Action>continue_movement_agent</Action> <Note: The behavior tree may vary depending on the specific behaviors and conditions chosen by the LLM model.

###
3.// INSTRUCTIONS: Use only the following behaviors {'move_forward': 'Action: Move one step forward while avoiding obstacles. Always returns True.', 'rotate_left': 'Action: Rotate the robot 90 degrees to the left. Always returns True.', 'rotate_right': 'Action: Rotate the robot 90 degrees to the right. Always returns True.', 'change_LED_color': 'Action: Change the robot's LED color to blue. Always returns True.', 'check_battery_level': 'Condition: Check if the robot's battery level is below 30%. Returns True if battery level is below 30%, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_battery_low': 'Condition: Check if the robot's battery level is below 10%. Returns True if battery level is below 10%, False otherwise.', 'is_target_reached': 'Condition: Check if the target is reached. Returns True if the robot is within 5 units of distance from the target, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3.// USER COMMAND: Create a behavior tree for a robot to navigate to a specific target location while ensuring battery level is sufficient and avoiding obstacles.
3.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>is_battery_low</Condition> <Action>change_LED_color('red')</Action> </Sequence> <Sequence> <Condition>is_obstacle_detected</Condition> <Selector> <Action>rotate_left</Action> <Action>rotate_right</Action> </Selector> </Sequence> <Sequence> <Condition>is_target_reached</Condition> <Action>move_forward</Action> </Sequence> </Selector> </BehaviorTree>

###
4.// INSTRUCTIONS: Use only the following behaviors {'take_photo': 'Action: Take a photo with the robot's camera. Always returns True.', 'upload_photo': 'Action: Upload the photo to an online platform. Always returns True.', 'detect_objects': 'Action: Detect objects in the robot's environment. Always returns True.', 'is_photo_uploaded': 'Condition: Check if the photo has been successfully uploaded. Returns True if the photo is uploaded, False otherwise.', 'is_object_detected': 'Condition: Check if any objects are detected in the robot's environment. Returns True if objects are present, False otherwise.', 'is_target_reached': 'Condition: Check if the target location is reached. Returns True if the robot is within 10 units of distance from the target, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Generate a behavior tree for a robot to identify and photograph objects of interest while navigating to a specific target location.
4.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>is_photo_uploaded</Condition> <Selector> <Action>detect_objects</Action> <Sequence> <Condition>is_object_detected</Condition> <Action>take_photo</Action> </Sequence> </Selector> </Sequence> <Sequence> <Condition>is_target_reached</Condition> <Action>upload_photo</Action> </Sequence> </Selector> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'start_recording': 'Action: Start recording audio with the robot's microphone. Always returns True.', 'analyze_audio': 'Action: Analyze the recorded audio for specific keywords. Always returns True.', 'send_message': 'Action: Send a message to a predetermined recipient. Always returns True.', 'is_keyword_detected': 'Condition: Check if the desired keyword is detected in the analyzed audio. Returns True if keyword is present, False otherwise.', 'is_message_sent': 'Condition: Check if the message has been successfully sent. Returns True if message is sent, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Create a behavior tree for a robot to listen for specific keywords, analyze the audio, and send a message if the keyword is detected.
5.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Action>start_recording</Action> <Selector> <Sequence> <Condition>is_keyword_detected</Condition> <Action>send_message</Action> </Sequence> <Action>analyze_audio</Action> </Selector> </Sequence> </Selector> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'detect_temperature': 'Action: Use the robot's temperature sensors to detect the surrounding temperature. Always returns True.', 'adjust_temperature': 'Action: Adjust the robot's internal temperature according to the surrounding temperature. Always returns True.', 'check_humidity': 'Action: Check the humidity levels in the environment. Always returns True.', 'is_temperature_optimal': 'Condition: Check if the surrounding temperature is within an optimal range. Returns True if temperature is optimal, False otherwise.', 'is_humidity_optimal': 'Condition: Check if the humidity levels are within an optimal range. Returns True if humidity levels are optimal, False otherwise.', 'is_target_reached': 'Condition: Check if the target location is reached. Returns True if the robot is within 10 units of distance from the target, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Build a behavior tree for a robot to adjust its internal temperature and check humidity levels while navigating to a specific target location.
6.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Action>detect_temperature</Action> <Selector> <Condition>is_temperature_optimal</Condition> <Action>adjust_temperature</Action> </Selector> </Sequence> <Sequence> <Action>check_humidity</Action> <Selector> <Condition>is_humidity_optimal</Condition> <Action>adjust_humidity</Action> </Selector> </Sequence> <Sequence> <Condition>is_target_reached</Condition> <Action>stop_all_actions</Action> </Sequence> </Selector> </BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'move_to_surface': 'Action: Move the submarine robot towards the surface of the water. Always returns True.', 'check_battery_level': 'Action: Check the battery level of the submarine robot. Always returns True.', 'detect_currents': 'Action: Use sensors to detect water currents. Always returns True.', 'is_battery_low': 'Condition: Check if the battery level of the submarine robot is below 40%. Returns True if battery level is below 40%, False otherwise.', 'is_current_present': 'Condition: Check if there are strong water currents in the surrounding area. Returns True if
###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Move towards target, avoid obstacles, and change color to green once target is reached.'Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>is_target_reached</Condition> <Action>change_color_to_green</Action> <Action>task_completed</Action> </Sequence> <Sequence> <Condition>is_obstacle_detected</Condition> <Action>avoid_obstacle</Action> <Action>continue_movement_agent</Action> </Sequence> <Sequence> <Condition>is_target_detected</Condition> <Action>continue_movement_agent</Action> </Sequence> <Action>wander</Action> </Selector> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'dance': 'Action: Perform a celebratory dance. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Perform celebratory dance once target is reached and then continue moving towards target.'Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>is_target_reached</Condition> <Action>dance</Action> <Action>continue_movement_agent</Action> </Sequence> <Sequence> <Condition>is_target_detected</Condition> <Action>continue_movement_agent</Action> </Sequence> <Action>wander</Action> </Selector> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'detect_light': 'Condition: Check for light source. Returns True if a light source is detected, False otherwise.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Avoid obstacles, move towards light source, and change color to white once reached.'Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>detect_light</Condition> <Action>continue_movement_agent</Action> </Sequence> <Sequence> <Condition>is_obstacle_detected</Condition> <Action>avoid_obstacle</Action
###
3.// INSTRUCTIONS: Use only the following behaviors {'detect_food': 'Condition: Check for food source nearby. Returns True if food source is detected, False otherwise.', 'move_to_food_source': 'Action: Move towards the nearest food source. Returns True once at the food source.', 'gather_food': 'Action: Gather food from the source. Returns True once food is gathered.', 'drop_food': 'Action: Drop food at designated storage location. Returns True once food is dropped.', 'is_food_available': 'Condition: Check if food is available in the storage. Returns True if food is available, False otherwise.', 'return_to_nest': 'Action: Return to the nest. Returns True once at the nest.', 'is_nest_full': 'Condition: Check if the nest is at full capacity. Returns True if the nest is at full capacity, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3.// USER COMMAND: generate behavior tree to 'Forage for food, gather and return to nest. Output only the XML behavior tree without extra text.
3.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_food_available</Condition><Action>gather_food</Action></Sequence><Sequence><Condition>is_nest_full</Condition><Action>return_to_nest</Action></Sequence><Sequence><Condition>detect_food</Condition><Action>move_to_food_source</Action></Sequence></Selector></BehaviorTree>

###
4.// INSTRUCTIONS: Use only the following behaviors {'detect_human': 'Condition: Check for human presence. Returns True if human is detected, False otherwise.', 'follow_human': 'Action: Follow the human. Returns True once following the human.', 'observe_environment': 'Action: Observe the surroundings for potential obstacles. Always returns True.', 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'play_music' : 'Action: Play music to attract attention. Returns True once music is played.', 'deliver_message': 'Action: Deliver a pre-programmed message to the human. Returns True once message is delivered.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Observe environment, when human is nearby, play music to attract attention and deliver message "Hello Human!"'. Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>detect_human</Condition><Action>play_music</Action></Sequence><Sequence><Condition>detect_human</Condition><Action>follow_human</Action></Sequence><Sequence><Condition>detect_human</Condition><Action>deliver_message</Action></Sequence><Sequence><Condition>observe_environment</Condition><Action>avoid_obstacle</Action></Sequence></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'detect_object': 'Condition: Check for objects nearby. Returns True if objects are detected, False otherwise.', 'move_to_object': 'Action: Move towards the nearest object. Returns True once at the object.', 'grab_object': 'Action: Grab the object if within reach. Returns True once object is grabbed.', 'drop_object': 'Action: Drop the object at designated location. Returns True once object is dropped.', 'is_object_grabbed': 'Condition: Check if the object has been grabbed. Returns True if object is grabbed, False otherwise.', 'return_to_home': 'Action: Return to the designated home location. Returns True once at the home location.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Find and retrieve lost object, return it to home location'. Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_object_grabbed</Condition><Action>return_to_home</Action></Sequence><Sequence><Condition>detect_object</Condition><Action>move_to_object</Action></Sequence><Sequence><Condition>is_object_grabbed</Condition><Action>drop_object</Action></Sequence></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'detect_intruders': 'Condition: Check for intruders in the area. Returns True if intruders are detected, False otherwise.', 'surround_intruders': 'Action: Surround and block the intruders. Returns True once intruders are surrounded.', 'guide_intruders_to_exit': 'Action: Guide the intruders to the designated exit. Returns True once intruders have reached the exit.', 'detect_fire': 'Condition: Check for fire hazards in the area. Returns True if fire hazards are detected, False otherwise.', 'extinguish_fire': 'Action: Extinguish the fire hazard. Returns True once fire is extinguished.', 'drop_fire_fighting_agent': 'Action: Drop a fire fighting agent near the fire hazard. Returns True once agent is dropped.', 'is_fire_extinguished': 'Condition: Check if fire has been extinguished. Returns True if fire is extinguished, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'In case of emergency, detect and handle intruders and fire hazards'. Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>detect_intruders</Condition><Action>surround_intruders</Action></Sequence><Sequence><Condition>detect_fire</Condition><Sequence><Condition>is_fire_extinguished</Condition><Action>drop_fire_fighting_agent</Action></Sequence><Sequence><Condition>is_fire_extinguished</Condition><Action>extinguish_fire</Action></Sequence></Sequence><Sequence><Condition>detect_fire</Condition><Action>guide_intruders_to_exit</Action></Sequence></Selector></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'detect_water': 'Condition: Check for water source nearby. Returns True if water source is detected, False otherwise.', 'gather_water': 'Action: Gather water from the source. Returns True once water is gathered.', 'drop_water': 'Action: Drop water at designated storage location. Returns True once water is dropped.', 'is_water_available': 'Condition: Check if water is available in the storage. Returns True if water is available, False otherwise.', 'return_to_nest': 'Action: Return to the nest. Returns True once at the nest.', 'is_nest_full': 'Condition: Check if the nest is at full capacity. Returns True if the nest is at full capacity, False otherwise.', 'rest': 'Action: Rest at current location. Always returns True.'}, to construct behavior tree in XML format to the following command. If
###
4.// INSTRUCTIONS: Use only the following behaviors {'change_color_to_purple': "Action: Change agent's color to purple. Always returns True.", 'change_color_to_yellow': "Action: Change agent's color to yellow. Always returns True.", 'create_cluster': 'Action: Create a cluster with neighboring agents. Always returns True.', 'disperse_cluster': "Action: Disperse cluster and return to individual movements. Always returns True.", 'is_cluster_formed': 'Condition: Check if a cluster is formed with neighboring agents. Returns True if a cluster is formed, False otherwise.', 'is_enemy_detected': 'Condition: Check if an enemy is detected within range. Returns True if an enemy is detected, False otherwise.', 'is_cluster_dispersed': 'Condition: Check if a cluster has been dispersed and agents have returned to individual movements. Returns True if the cluster is dispersed, False otherwise.', 'is_safe_zone_reached': 'Condition: Check if an agent has reached the designated safe zone. Returns True if the agent is in the safe zone, False otherwise.', 'attack_enemy': 'Action: Initiate an attack on the detected enemy. Returns True if the attack is successful, False otherwise.', 'wait_for_reinforcements': 'Action: Wait for reinforcements from neighboring agents. Returns False if no reinforcements are received within a designated time period.', 'is_reinforcements_received': 'Condition: Check if reinforcements have been received from neighboring agents. Returns True if reinforcements are received, False otherwise.', 'move_to_location': 'Action: Move agent to a designated location. Returns True if the agent reaches the location, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'form a cluster with neighboring agents, attack enemy if detected, and wait for reinforcements if attack fails until safe zone is reached' Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>is_cluster_formed</Condition> <Action>attack_enemy</Action> <Sequence> <Condition>is_enemy_detected</Condition> <Action>wait_for_reinforcements</Action> <Condition>is_reinforcements_received</Condition> </Sequence> <Condition>is_safe_zone_reached</Condition> </Selector> <Action>disperse_cluster</Action> </Sequence> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'change_color_to_orange': "Action: Change agent's color to orange. Always returns True.", 'change_color_to_pink': "Action: Change agent's color to pink. Always returns True.", 'move_to_origin': 'Action: Move agent back to the origin point. Always returns True.', 'move_to_target': "Action: Move agent towards the target object. Always returns True.", 'is_at_origin': 'Condition: Check if the agent is at the origin point. Returns True if at origin, False otherwise.', 'is_arrived_at_target': 'Condition: Check if the agent has arrived at the target location. Returns True if at target location, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'return to origin and grab target object, then move to target location and change color to pink' Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>is_at_origin</Condition> <Action>grab_target</Action> <Action>move_to_target</Action> </Sequence> <Selector> <Condition>is_arrived_at_target</Condition> <Action>change_color_to_pink</Action> <Action>task_completed</Action> </Selector> </Sequence> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'move_to_center': 'Action: Move agent to the center of the environment. Always returns True.', 'move_to_left': "Action: Move agent to the left side of the environment. Always returns True.", 'move_to_right': "Action: Move agent to the right side of the environment. Always returns True.", 'is_in_center': 'Condition: Check if the agent is in the center of the environment. Returns True if at the center, False otherwise.', 'is_at_left_edge': 'Condition: Check if the agent is at the left edge of the environment. Returns True if at left edge, False otherwise.', 'is_at_right_edge': 'Condition: Check if the agent is at the right edge of the environment. Returns True if at right edge, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'move to the center and stay, avoid obstacles, and then move to the right edge and change color to green' Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>is_in_center</Condition> <Action>agent_movement_freeze</Action> <Sequence> <Condition>is_obstacle_detected</Condition> <Action>avoid_obstacle</Action> </Sequence> <Action>change_color_to_green</Action> <Action>task_completed</Action> </Selector> <Sequence> <Condition>is_at_right_edge</Condition> <Action>wander</Action> </Sequence> </Sequence> </BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'change_color_to_teal': "Action: Change agent's color to teal. Always returns True.", 'start_circling': "Action: Start circling around the target object. Returns True if circle is complete and agent is back at original position, False otherwise.", 'move_to_target': "Action: Move agent towards the target object. Always returns True.", 'circle_target': 'Action: Move in a circular pattern around the target object. Always returns True.', 'is_stuck': 'Condition: Check if the agent is stuck. Returns True if agent is unable to move or is in an infinite loop, False otherwise.', 'is_target_reached': 'Condition: Check if target is within###
3.// INSTRUCTIONS: Use only the following behaviors {'scout': 'Action: Scout the environment for potential resources. Always returns True.', 'collect_resource': 'Action: Collect the resource found by the scout. Always returns True.', 'deliver_resource': 'Action: Deliver the collected resource to the designated location. Always returns True.', 'is_resource_nearby': 'Condition: Check if a resource is detected within a certain radius. Returns True if a resource is detected, False otherwise.', 'is_resource_collected': 'Condition: Check if the resource has been successfully collected. Returns True if the resource is collected, False otherwise.', 'is_deliver_location_reached': 'Condition: Check if the delivery location is reached. Returns True if the location is reached, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3.// USER COMMAND: generate behavior tree to 'scout, collect resource, deliver resource.'
3.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>scout</Action><Sequence><Condition>is_resource_nearby</Condition><Action>collect_resource</Action></Sequence><Sequence><Condition>is_resource_collected</Condition><Action>deliver_resource</Action></Sequence></Selector></BehaviorTree>

###
4.// INSTRUCTIONS: Use only the following behaviors {'move_forward': 'Action: Move one step forward. Always returns True.', 'move_backward': 'Action: Move one step backward. Always returns True.', 'attack_enemy_tower': 'Action: Attack an enemy tower. Always returns True.', 'retrieve_defense_tool': 'Action: Retrieve a defense tool from the base. Always returns True.', 'is_enemy_detected': 'Condition: Check if an enemy is detected within a certain range. Returns True if an enemy is detected, False otherwise.', 'is_enemy_tower_destroyed': 'Condition: Check if the enemy tower has been destroyed. Returns True if the tower is destroyed, False otherwise.', 'is_defense_tool_collected': 'Condition: Check if the defense tool has been successfully retrieved. Returns True if the tool is retrieved, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)

4.// USER COMMAND: generate behavior tree to 'retrieve defense tool, move towards enemy tower, attack enemy tower.'
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>retrieve_defense_tool</Action><Sequence><Condition>is_defense_tool_collected</Condition><Action>move_forward</Action></Sequence><Sequence><Condition>is_enemy_detected</Condition><Action>attack_enemy_tower</Action></Sequence></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'detect_fire': 'Condition: Check if there is a fire in the environment. Returns True if a fire is detected, False otherwise.', 'move_to_water_source': 'Action: Move towards the nearest water source. Always returns True.', 'collect_water': 'Action: Collect water from the source. Always returns True.', 'extinguish_fire': 'Action: Use collected water to extinguish the fire. Always returns True.', 'escape_fire': 'Action: Quickly move away from the fire to a safe location. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'detect fire, move towards water source, collect water, extinguish fire.'
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>detect_fire</Condition><Sequence><Action>move_to_water_source</Action><Action>collect_water</Action><Action>extinguish_fire</Action></Sequence></Sequence><Action>escape_fire</Action></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'get_free_resource': 'Action: Send a signal to nearby robots to get a free resource. Always returns True.', 'scout_resource_area': 'Action: Scout the area for a potential resource. Always returns True.', 'collect_resource': 'Action: Use the free resource to collect the discovered resource. Always returns True.', 'share_resource_with_others': 'Action: Share the collected resource with nearby robots. Always returns True.', 'is_resource_detected': 'Condition: Check if a resource is detected within a certain area. Returns True if a resource is detected, False otherwise.', 'is_resource_collected': 'Condition: Check if the resource has been successfully collected. Returns True if the resource is collected, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'share resource with others, scout resource area, collect resource.'
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>share_resource_with_others</Action><Sequence><Action>scout_resource_area</Action><Sequence><Condition>is_resource_detected</Condition><Action>collect_resource</Action></Sequence></Sequence></Sequence></Selector></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'move_to_food_source': 'Action: Move towards the nearest food source. Always returns True.', 'collect_food': 'Action: Collect food from the source. Always returns True.', 'return_to_nest': 'Action: Return to the nest with the collected food. Always returns True.', 'feed_nest': 'Action: Feed the food to other swarm bots in the nest. Always returns True.', 'is_food_detected': 'Condition: Check if there is food detected within a certain range. Returns True if food is detected, False otherwise.', 'is_food_collected': 'Condition: Check if the food has been successfully collected. Returns True if the food is collected, False otherwise.', 'is_nest_reached': 'Condition: Check if the nest has been reached. Returns True if the nest is reached, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: generate behavior tree to 'collect food, move towards food source, return to nest, feed nest.'
7.// OUTPUT:
<BehaviorTree><Selector><Sequence><Sequence><Action>collect_food</Action><Action>move_to_food_source</Action></Sequence><Sequence><Condition>is_food_detected</Condition><Sequence><Action>return_to_nest</Action><Sequence><Condition>is_nest_reached</Condition><Action>feed_nest</Action></Sequence></Sequence></Sequence><Condition>is_food_collected</Condition></Sequence></BehaviorTree>
###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'change_speed_to_max': 'Action: Change agent's speed to maximum. Always returns True.', 'change_speed_to_min': 'Action: Change agent's speed to minimum. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_circle': 'Action: Form a circular shape with other robots. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_circle_formed': 'Condition: Check if a circular shape is formed. Returns True if all robots are in a circular formation, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'form a circular shape with other robots, change speed to maximum and continue moving in the same direction'.Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_circle_formed</Condition><Sequence><Action>change_speed_to_max</Action><Action>continue_movement_agent</Action></Sequence></Sequence><Action>form_circle</Action></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'change_speed_to_max': 'Action: Change agent's speed to maximum. Always returns True.', 'change_speed_to_min': 'Action: Change agent's speed to minimum. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_square': 'Action: Form a square shape with other robots. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_square_formed': 'Condition: Check if a square shape is formed. Returns True if all robots are in a square formation, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'form a square with other robots, avoid obstacles and continue moving in the same direction'.Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_square_formed</Condition><Sequence><Action>continue_movement_agent</Action></Sequence></Sequence><Action>form_square</Action></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'change_speed_to_max': 'Action: Change agent's speed to maximum. Always returns True.', 'change_speed_to_min': 'Action: Change agent's speed to minimum. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'gather_objects': 'Action: Gather objects within a certain radius. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_object_collected': 'Condition: Check if an object is collected. Returns True if an object is within a certain radius, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'gather objects within a certain radius, change speed to minimum and continue moving towards the nest'. Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_object_collected</Condition><Sequence><Action>gather_objects</Action><Sequence><Action>change_speed_to_min</Action><Action>continue_movement_agent</Action></Sequence></Sequence></Sequence></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_red': "Action: Change agent's color to red. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'gather_objects': 'Action: Gather objects within a certain radius. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_object_collected': 'Condition: Check if an object is collected. Returns True if an object is within a certain radius, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are
###
3.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3.// USER COMMAND: generate behavior tree to 'Wander and avoid obstacles'Output only the XML behavior tree without extra text.
3.// OUTPUT:
<BehaviorTree> <Selector> <Action>wander</Action> <Sequence> <Condition>is_obstacle_detected</Condition> <Action>avoid_obstacle</Action> </Sequence> </Selector> </BehaviorTree>

###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Move towards target, but avoid obstacles along the way'Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree> <Sequence> <Condition>is_path_clear</Condition> <Action>continue_movement_agent</Action> <Selector> <Condition>is_obstacle_detected</Condition> <Action>avoid_obstacle</Action> </Selector> <Sequence> <Condition>is_target_detected</Condition> <Action>continue_movement_agent</Action> </Sequence> </Sequence> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Check if agent is in the nest, if not, move towards the nest and change color to green upon arrival'Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>is_agent_in_nest</Condition> <Action>change_color_to_green</Action> </Sequence> <Sequence> <Condition>is_agent_in_nest (negated)</Condition> <Action>continue_movement_agent</Action> <Condition>is_path_clear</Condition> <Action>continue_movement_agent</Action> </Sequence> </Selector> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle
###
4.// INSTRUCTIONS: Use only the following behaviors {'move_forward': 'Action: Move one step forward. Always returns True.', 'move_backward': 'Action: Move one step backward. Always returns True.', 'turn_left': 'Action: Turn left 90 degrees. Always returns True.', 'turn_right': 'Action: Turn right 90 degrees. Always returns True.', 'is_target_in_sight': 'Condition: Check if the target is in sight. Returns True if the target is within the field of view, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Generate a behavior tree for a robot to navigate a maze and reach the end goal.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_target_in_sight</Condition><Action>move_forward</Action></Sequence><Sequence><Condition>is_path_clear</Condition><Selector><Action>turn_left</Action><Action>turn_right</Action></Selector></Sequence><Action>move_backward</Action></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'move_forward': 'Action: Move one step forward. Always returns True.', 'move_backward': 'Action: Move one step backward. Always returns True.', 'turn_left': 'Action: Turn left 90 degrees. Always returns True.', 'turn_right': 'Action: Turn right 90 degrees. Always returns True.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Generate a behavior tree for a robot to explore and map an unknown environment.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_path_clear</Condition><Selector><Action>turn_left</Action><Action>turn_right</Action></Selector></Sequence><Sequence><Condition>is_obstacle_detected</Condition><Selector><Action>move_backward</Action><Action>turn_left</Action><Action>turn_right</Action></Selector></Sequence><Action>move_forward</Action></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'move_forward': 'Action: Move one step forward. Always returns True.', 'move_backward': 'Action: Move one step backward. Always returns True.', 'turn_left': 'Action: Turn left 90 degrees. Always returns True.', 'turn_right': 'Action: Turn right 90 degrees. Always returns True.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'start_timer': 'Action: Start a timer to keep track of time. Always returns True.', 'is_time_up': 'Condition: Check if the designated time has passed. Returns True if the timer has reached the designated time, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Generate a behavior tree for a robot to efficiently collect samples in a given time limit.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_time_up</Condition><Action>return_to_base</Action></Sequence><Sequence><Action>move_forward</Action><Sequence><Condition>is_obstacle_detected</Action><Selector><Action>turn_left</Action><Action>turn_right</Action></Selector></Sequence></Sequence><Action>start_timer</Action></Selector></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'move_forward': 'Action: Move one step forward. Always returns True.', 'move_backward': 'Action: Move one step backward. Always returns True.', 'turn_left': 'Action: Turn left 90 degrees. Always returns True.', 'turn_right': 'Action: Turn right 90 degrees. Always returns True.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'random_walk': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: Generate a behavior tree for a swarm of robots to cooperate in searching and tracking a target.
7.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_target_detected</Condition><Selector><Sequence><Action>move_forward</Action><Condition>is_target_in_sight</Condition></Sequence><Action>track_target</Action></Selector></Sequence><Sequence><Condition>is_path_clear</Condition><Selector><Action>turn_left</Action><Action>turn_right</Action></Selector></Sequence><Selector><Action>random_walk</Action><Sequence><Condition>is_obstacle_detected</Condition><Selector><Action>turn_left</Action><Action>turn_right</Action></Selector></Sequence></Selector></Selector></BehaviorTree>###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_red': "Action: Change agent's color to red. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'navigate_to_location': 'Action: Navigate to a specified location, given the coordinates. Returns True once the destination is reached.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'navigate to location (5,8) then form a green line to indicate arrival'. Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>navigate_to_location(5,8)</Action><Action>form_line</Action></Sequence><Selector><Condition>is_line_formed</Condition><Action>change_color_to_green</Action></Selector></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'approach_target': 'Action: Move towards the target. Returns True when within a certain distance to the target.', 'change_color_to_green': "Action: Change agent's color to green. Returns True when the color change is complete.", 'change_color_to_white': "Action: Change agent's color to white. Returns True when the color change is complete.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_not_in_danger': 'Condition: Check if the agent is not in danger. Returns True if the agent is not in danger, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'search_for_target': 'Action: Move randomly and search for the target. Returns True when the target is detected or after a certain amount of time.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Move towards target, if in danger, change to white color and search for target until target is found'. Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_agent_in_nest</Condition><Sequence><Action>continue_movement_agent</Action><Action>change_color_to_green</Action></Sequence></Sequence><Action>approach_target</Action><Sequence><Condition>is_not_in_danger</Condition><Action>change_color_to_white</Action><Action>search_for_target</Action></Sequence></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_collision': 'Action: Use collision avoidance algorithm to prevent collisions. Returns True when no collisions occur.', 'change_color_to_green': "Action: Change agent's color to green. Returns True when the color change is complete.", 'change_color_to_white': "Action: Change agent's color to white. Returns True when the color change is complete.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'drop_marker': 'Action: Drop a marker at the agent's current location. Returns True when the marker is dropped.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_followed': 'Condition: Check if the agent is following a line. Returns True if the agent is following a line, False otherwise.', 'is_marker_dropped': 'Condition: Check if the marker has been dropped. Returns True if the marker has been successfully dropped, False otherwise.', 'is_not_in_danger': 'Condition: Check if the agent is not in danger. Returns True if the agent is not in danger, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'move_to_marker': 'Action: Move towards the dropped marker. Returns 
###
3.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'change_color_to_blue': "Action: Change agent's color to blue. Always returns True.", 'change_color_to_red': "Action: Change agent's color to red. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'communicate': 'Action: Communicate with other robots. Always returns True.', 'detect_enemy': 'Condition: Check if enemy is detected. Returns True if enemy is detected, False otherwise.', 'detect_friend': 'Condition: Check if friendly robot is detected. Returns True if a friendly robot is detected, False otherwise.', 'enemy_danger': 'Action: Change color to red as a warning signal. Always returns True.', 'form_triangle': 'Action: Form a triangle with two other robots. Always returns True.', 'friend_location_known': 'Condition: Check if location of friendly robot is known. Returns True if the location is known, False otherwise.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_blue_detected': 'Condition: Check if blue object is detected. Returns True if a blue object is detected, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3.// USER COMMAND: generate behavior tree to 'Explore the environment, detect enemy and communicate location, form a triangle with friendly robots to defend against enemy'. Output only the XML behavior tree without extra text.
3.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>detect_enemy</Condition><Action>change_color_to_red</Action><Action>communicate</Action><Action>form_triangle</Action></Sequence><Sequence><Condition>detect_friend</Condition><Selector><Sequence><Condition>friend_location_known</Condition><Action>communicate</Action></Sequence><Action>form_triangle</Action></Selector></Sequence><Action>wander</Action></Selector></BehaviorTree>

###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_yellow': "Action: Change agent's color to yellow. Always returns True.", 'circle_around': 'Action: Circle around an object. Always returns True.', 'follow_path': 'Action: Follow a predetermined path. Always returns True.', 'is_agent_in_vehicle': 'Condition: Check if agent is in a vehicle. Returns True if agent is in a vehicle, False otherwise.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'start_engine': 'Action: Start the engine of a vehicle. Always returns True.', 'stop_engine': 'Action: Stop the engine of a vehicle. Always returns True.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Drive a vehicle to a specified location, circle around a target, and return to the nest'. Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_agent_in_vehicle</Condition><Action>start_engine</Action><Action>follow_path</Action><Action>circle_around</Action><Action>stop_engine</Action></Sequence><Sequence><Condition>is_target_detected</Condition><Action>wander</Action></Sequence><Selector><Sequence><Condition>is_agent_in_nest</Condition><Action>task_completed</Action></Sequence><Action>stop_engine</Action></Selector></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'alert_group': 'Action: Alert other robots in the group. Always returns True.', 'change_color_to_black': "Action: Change agent's color to black. Always returns True.", 'change_color_to_orange': "Action: Change agent's color to orange. Always returns True.", 'change_color_to_red': "Action: Change agent's color to red. Always returns True.", 'detect_wall': 'Condition: Check for wall ahead. Returns True if wall is detected, False otherwise.', 'follow_target': 'Action: Follow target within a specified range. Always returns True.', 'is_colliding': 'Condition: Check if collision with another robot is detected. Returns True if a collision is detected, False otherwise.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'leader_check': 'Condition: Check if agent is acting as a leader in the group. Returns True if agent is the leader, False otherwise.', 'pathfinding': 'Action: Use pathfinding algorithm to navigate to a specified location. Always returns True.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Lead the group to a target location, signal other robots when reaching the target, and return to starting point'. Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>leader_check</Condition><Action>change_color_to_red</Action><Selector><Sequence><Condition>is_target_detected</Condition><Action>alert_group</Action><Action>pathfinding</Action><Action>alert_group</Action></Sequence><Sequence><Condition>is_colliding</Condition><Action>wander</Action></Sequence></Selector><Sequence><Condition>is_colliding</Condition><Selector><Sequence><Condition>is_agent_in_nest</Condition><Action>task_completed</Action></Sequence><Action>pathfinding</Action></Selector></Sequence 
###
4.// INSTRUCTIONS: Use only the following behaviors {'move_forward': 'Action: Move one step forward. Always returns True.', 'return_to_start': 'Action: Return to the starting position. Always returns True.', 'start_conveyor_belt': 'Action: Start the conveyor belt. Always returns True.', 'stop_conveyor_belt': 'Action: Stop the conveyor belt. Always returns True.', 'is_object_detected': 'Condition: Check if an object is in front of the robot. Returns True if an object is detected, False otherwise.', 'is_at_start': 'Condition: Check if the robot is at the starting position. Returns True if at the starting position, False otherwise.', 'is_at_end': 'Condition: Check if the robot is at the end position. Returns True if at the end position, False otherwise.', 'is_object_moved': 'Condition: Check if the object has been moved by the conveyor belt. Returns True if the object has been moved, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Generate a behavior tree to automate a conveyor belt system for moving objects from one location to another.
4.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_object_detected</Condition><Selector><Sequence><Condition>is_at_end</Condition><Action>return_to_start</Action></Sequence><Action>stop_conveyor_belt</Action></Selector><Sequence><Condition>is_object_moved</Condition><Action>move_forward</Action><Action>start_conveyor_belt</Action></Sequence></Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'navigate_to_location': 'Action: Navigate towards the designated location. Always returns True.', 'target_object': 'Action: Target the specific object. Always returns True.', 'drop_cargo': "Action: Safely drop the cargo at the desired location. Always returns True.", 'take_off': 'Action: Take off from current location and initiate flying mode. Always returns True.', 'is_object_in_range': 'Condition: Check if the target object is within range. Returns True if the object is within range, False otherwise.', 'is_flying': 'Condition: Check if the robot is currently in flying mode. Returns True if the robot is flying, False otherwise.', 'is_cargo_loaded': 'Condition: Check if the cargo is successfully loaded onto the robot. Returns True if the cargo is loaded, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Generate a behavior tree to autonomously load and deliver cargo to a specified location using a flying drone.
5.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_cargo_loaded</Condition><Sequence><Condition>is_flying</Condition><Action>drop_cargo</Action><Sequence><Condition>is_object_in_range</Condition><Action>target_object</Action></Sequence><Action>take_off</Action></Sequence></Sequence><Action>navigate_to_location</Action></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'scan_area': 'Action: Scan the surrounding area for potential threats or targets. Always returns True.', 'seek_target': 'Action: Seek and locate the designated target. Always returns True.', 'engage_target': 'Action: Engage and attack the target with appropriate weapons. Always returns True.', 'escape': 'Action: Attempt to escape and evade any threats. Always returns True.', 'is_target_detected': 'Condition: Check if the target is detected within 50 meters. Returns True if the target is within range, False otherwise.', 'is_target_engaged': 'Condition: Check if the target is currently being engaged. Returns True if the target is engaged, False otherwise.', 'is_threat_detected': "Condition: Check if a threat is detected within the designated range. Returns True if a threat is detected, False otherwise."}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Generate a behavior tree for a military drone to perform reconnaissance, seek and engage targets, and evade threats.
6.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_target_engaged</Condition><Selector><Sequence><Condition>is_threat_detected</Condition><Action>escape</Action></Sequence><Action>scan_area</Action></Selector><Sequence><Condition>is_target_detected</Condition><Action>engage_target</Action></Sequence></Sequence><Action>seek_target</Action></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'scan_area': 'Action: Scan the surrounding area for potential hazards or targets. Always returns True.', 'defuse_bomb': 'Action: Defuse the bomb if it is located and within reach. Always returns True.', 'mark_safe_zone': 'Action: Mark a safe zone for the team to move to. Always returns True.', 'rescue_teammate': 'Action: Rescue a trapped teammate if located and within reach. Always returns True.', 'move_to_safe_zone': 'Action: Move to the closest designated safe zone while maintaining constant awareness. Always returns True.', 'is_threat_detected': 'Condition: Check for any potential threats in the surroundings. Returns True if a threat is detected, False otherwise.', 'is_bomb_detected': 'Condition: Check if a bomb has been detected within the designated range. Returns True if a bomb is detected, False otherwise.', 'is_teammate_trapped': 'Condition: Check if a teammate is trapped and in need of rescue. Returns True if a teammate is trapped, False otherwise.', 'is_safe_zone_marked': 'Condition: Check if a safe zone has been marked for the team to move to. Returns True if a safe zone is marked, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: Generate a behavior tree for a search and rescue robot to identify and disarm potential threats, rescue trapped teammates, and ensure the safety of the team in a hazardous environment.
7.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_threat_detected</Condition><Selector><Sequence><Condition>is_bomb_detected</Condition><Action>defuse_bomb</Action></Sequence><Action>scan_area</Action></Selector></Sequence><Sequence><Condition>is_teammate_trapped</Condition><Action>rescue_teammate</Action></Sequence></Selector><Sequence><Condition>is_safe_zone_marked</Condition><Action>move_to_safe_zone</Action></Sequence><Action>mark_safe_zone</Action></BehaviorTree>
 
###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_red': "Action: Change agent's color to red. Always returns True.", 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'move_backward': 'Action: Move the agent backwards. Always returns True.', 'move_forward': 'Action: Move the agent forward. Always returns True.', 'rotate_left': 'Action: Rotate the agent left. Always returns True.', 'rotate_right': 'Action: Rotate the agent right. Always returns True.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Move backwards while avoiding obstacles, then rotate right, and change color to red if target is detected.'
Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_obstacle_detected</Condition><Action>avoid_obstacle</Action><Action>move_backward</Action></Sequence><Sequence><Condition>is_target_detected</Condition><Action>rotate_right</Action><Action>change_color_to_red</Action><Action>task_completed</Action></Sequence><Action>wander</Action></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Find the target object, form a vertical line at the center, and drop the target object at the designated drop-off location.If the target is not found, continue wandering.'
Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_target_detected</Condition><Action>grab_target</Action><Action>form_line</Action><Sequence><Condition>is_at_dropoff</Condition><Action>drop_target</Action></Sequence></Sequence><Action>wander</Action></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_blue': "Action: Change agent's color to blue. Always returns True.", 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'move_backward': 'Action: Move the agent backwards. Always returns True.', 'move_forward': 'Action: Move the agent forward. Always returns True.', 'rotate_left': 'Action: Rotate the agent left. Always returns True.', 'rotate_right': 'Action: Rotate the agent right. Always returns True.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Change color to blue when in the nest, rotate left to avoid obstacle, then change color to green if target is detected.'
Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_agent_in_nest</Condition><Action>change_color_to_blue</Action></Sequence><Selector><Sequence><Condition>is_obstacle_detected</Condition><Action>rotate_left</Action><Sequence><Condition>is_target_detected</Condition><Action>change_color_to_green</Action></Sequence></Sequence><Action>task_completed</Action></Selector></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_red': "Action: Change agent's color to red. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'move_backward': 'Action: Move the agent backwards. Always returns True.', 'rotate_left': 'Action: Rotate the agent left. Always returns True.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.
###
4.// INSTRUCTIONS: Use only the following behaviors {'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_red': "Action: Change agent's color to red. Always returns True.", 'change_direction_left': "Action: Change agent's direction to left. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Returns True if no obstacles are detected ahead, False otherwise.", 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Move forward until obstacle is detected, then change color to red and turn left.' Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>is_obstacle_detected</Condition><Action>change_color_to_red</Action><Action>change_direction_left</Action><Action>task_completed</Action></Sequence><Action>wander</Action></Selector><Sequence><Condition>continue_movement_agent</Condition></Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_purple': "Action: Change agent's color to purple. Always returns True.", 'follow_path': "Action: Follow a predetermined path. Returns True if the path is clear, False otherwise.", 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Navigate through a series of checkpoints, avoiding obstacles and change color to purple at each checkpoint.'Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>is_obstacle_detected</Condition><Action>avoid_obstacle</Action></Sequence><Action>follow_path</Action><Action>change_color_to_purple</Action></Selector><Action>wander</Action></Sequence></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_yellow': "Action: Change agent's color to yellow. Always returns True.", 'form_circle': "Action: Form a circle with neighboring agents. Returns True if no obstacles are detected, False otherwise.", 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Form a circle with neighboring agents, avoiding obstacles and change color to yellow.' Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>is_obstacle_detected</Condition><Action>avoid_obstacle</Action></Sequence><Action>form_circle</Action><Action>change_color_to_yellow</Action><Action>task_completed</Action></Selector><Action>wander</Action></Sequence></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_blue': "Action: Change agent's color to blue. Always returns True.", 'follow_leader': "Action: Follow a designated leader. Returns True if leader is within sight, False otherwise.", 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: generate behavior tree to 'Follow a designated leader, avoiding obstacles and change color to blue.' Output only the XML behavior tree without extra text.
7.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>is_obstacle_detected</Condition><Action>avoid_obstacle</Action></Sequence><Action>follow_leader</Action><Action>change_color_to_blue</Action><Action>task_completed</Action></Selector><Action>wander</Action></Sequence></BehaviorTree>###
3.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'change_color_to_black': "Action: Change agent's color to black. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_color_changed_to_black': 'Condition: Check if agent's color is changed to black. Returns True if agent's color is black, False otherwise.', 'is_color_changed_to_white': 'Condition: Check if agent's color is changed to white. Returns True if agent's color is white, False otherwise.', 'is_walkway_clear': 'Condition: Check if the walkway is clear. Returns True if no obstacles are detected on the walkway, False otherwise.', 'move_in_rectangular_path': 'Action: Move in a rectangular path within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3.// USER COMMAND: generate behavior tree to 'Change agent's color to black, move in rectangular path, and change color to white.'Output only the XML behavior tree without extra text.
3.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Action>move_in_rectangular_path</Action> <Selector> <Sequence> <Condition>is_walkway_clear</Condition> <Action>change_color_to_white</Action> </Sequence> <Action>change_color_to_black</Action> </Selector> </Sequence> </BehaviorTree>

###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'change_color_to_red': "Action: Change agent's color to red. Always returns True.", 'follow_path': 'Action: Follow the given path. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_color_changed_to_red': 'Condition: Check if agent's color is changed to red. Returns True if agent's color is red, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'search_for_target': 'Action: Search for the target within the environment. Always returns True.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Change agent's color to red, follow the path, then search for the target.'Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Action>follow_path</Action> <Selector> <Sequence> <Condition>is_path_clear</Condition> <Action>search_for_target</Action> </Sequence> <Action>change_color_to_red</Action> </Selector> </Sequence> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'change_color_to_purple': "Action: Change agent's color to purple. Always returns True.", 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_color_changed_to_purple': 'Condition: Check if agent's color is changed to purple. Returns True if agent's color is purple, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Change agent's color to purple, move randomly, and then check if target is detected.'Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Action>wander</Action> <Selector> <Sequence> <Condition>is_target_detected</Condition> <Action>task_completed</Action> </Sequence> <Action>change_color_to_purple</Action> </Selector> </Sequence> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'move_in_spiral': 'Action: Move in a spiral pattern within the environment. Always returns True.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_movement_completed': 'Condition: Check if agent's movement is completed. Returns True if agent's movement is completed, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Perform spiral movement and check if movement is completed.'Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Action>move_in_spiral</Action> <Selector> <Sequence> <Condition>is_movement_completed</Condition> <Action>task_completed</Action> </Sequence> <Action>avoid_obstacle</Action> </Selector> </Sequence> </BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_blue': "Action: Change agent's color to blue. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_triangle': 'Action: Form a triangle shape within the environment. Always returns True.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_triangle_formed': 'Condition: Check if a triangle shape is formed. Returns True if a triangle shape is formed, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead isNote: This scenario showcases the 'form_line' action node and the 'is_line_formed' condition node being used in a Sequence node to create a simple behavior tree for forming a vertical line.

###
3.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command.
3.// USER COMMAND: generate behavior tree to 'Avoid all obstacles and reach the target location' Output only the XML behavior tree without extra text.
3.// OUTPUT:
<BehaviorTree> <Sequence> <Action>avoid_obstacle</Action> <Action>continue_movement_agent</Action> <Selector> <Condition>is_target_detected</Condition> <Sequence> <Action>continue_movement_agent</Action> <Action>avoid_obstacle</Action> </Sequence> </Selector> </Sequence> </BehaviorTree>
Note: This scenario showcases the use of 'avoid_obstacle' and 'continue_movement_agent' actions in a Sequence node, with the 'is_target_detected' condition being used in a Selector node to create a behavior tree for avoiding obstacles and reaching the target location.

###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command.
4.// USER COMMAND: generate behavior tree to 'Move to target location and change color to green when target is reached' Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree> <Sequence> <Action>continue_movement_agent</Action> <Selector> <Condition>is_target_detected</Condition> <Sequence> <Action>change_color_to_green</Action> <Action>is_target_reached</Action> </Sequence> </Selector> </Sequence> </BehaviorTree>
Note: This scenario showcases the use of 'continue_movement_agent' and 'change_color_to_green' actions in a Sequence node, with the 'is_target_detected' condition being used in a Selector node to create a behavior tree for reaching a target location and changing color when the target is reached.

###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command.
5.// USER COMMAND: generate behavior tree to 'Wander randomly but avoid obstacles' Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree> <Sequence> <Action>wander</Action> <Selector> <Condition>is_obstacle_detected</Condition> <Action>avoid_obstacle</Action> </Selector> </
###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_colored_yellow': 'Condition: Check if the agent is currently colored yellow. Returns True if the agent is yellow, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'move_to_center': 'Action: Move the agent to the center of the environment. Always returns True.', 'pick_up_object': 'Action: Pick up an object if one is detected within 10 units. Returns True if an object is picked up, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Pick up a yellow object and carry it to the center of the environment.' Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>is_target_reached</Condition> <Action>continue_movement_agent</Action> <Action>move_to_center</Action> </Sequence> <Action>pick_up_object</Action> </Selector> <Condition>is_colored_yellow</Condition> <Action>change_color_to_white</Action> <Action>task_completed</Action> </Sequence> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'detect_other_agents': 'Condition: Check if there are other agents within 10 units. Returns True if other agents are detected, False otherwise.', 'follow_path': 'Action: Follow a predetermined path. Always returns True.', 'is_near_object': 'Condition: Check if the agent is within 5 units of an object. Returns True if near an object, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'navigate_to_goal': 'Action: Navigate towards the goal point. Always returns True.', 'stop_movement': 'Action: Stop agent\'s movement. Always returns True.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'turn_left': 'Action: Turn the agent 90 degrees to the left. Always returns True.', 'turn_right': 'Action: Turn the agent 90 degrees to the right. Always returns True.', 'wait_for_other_agents': 'Condition: Check if there are other agents within 10 units. Returns True if other agents are detected, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Navigate to the goal point while avoiding obstacles and waiting for other agents if needed.'Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>is_near_object</Condition> <Action>stop_movement</Action> <Action>task_completed</Action> </Sequence> <Condition>detect_other_agents</Condition> <Action>wait_for_other_agents</Action> </Selector> <Selector> <Sequence> <Condition>is_obstacle_detected</Condition> <Selector> <Action>turn_left</Action> <Action>turn_right</Action> </Selector> <Action>continue_movement_agent</Action> <Action>follow_path</Action> </Sequence> <Condition>detect_other_agents</Condition> <Action>follow_path</Action> </Selector> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'detect_other_agents': 'Condition: Check if there are other agents within 10 units. Returns True if other agents are detected, False otherwise.', 'distribute_resource': 'Action: Distribute a resource to another agent within 10 units. Returns True if successfully distributed, False otherwise.', 'is_resource_available': 'Condition: Check if there is a resource within 10 units. Returns True if a resource is detected, False otherwise.', 'navigate_to_resource': 'Action: Navigate to the nearest resource. Always returns True.', 'navigate_to_target': 'Action: Navigate to the target location. Always returns True.', 'pick_up_resource': 'Action: Pick up a resource if within 2 units. Returns True if resource is picked up, False otherwise.', 'resource_collected': 'Action: Signal resource collection by changing agent\'s color to green. Always returns True.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'turn_left': 'Action: Turn the agent 90 degrees to the left. Always returns True.', 'turn_right': 'Action: Turn the agent 90 degrees to the right. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Collect a resource, distribute it to another agent, and navigate to a target location.'Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>detect_other_agents</Condition> <Selector> <Sequence> <Condition>is_resource_available</Condition> <Action>pick_up_resource</Action> <Sequence> <Condition>is_resource_available</Condition> <Action>distribute_resource</Action> </Sequence> </Sequence> <Action>resource_collected</Action> </Selector> <Condition>detect_other_agents</Condition> <Action>navigate_to_resource</Action> </Sequence> <Condition>is_resource_available</Condition> <Action>navigate_to_target</Action> <Selector> <Sequence> <Condition>is_resource
###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'gather_resources': 'Action: Gather resources in a specific area. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Form a vertical line, change color to white, gather resources, and then change color to green.'Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>is_line_formed</Condition> <Action>change_color_to_white</Action> </Sequence> <Action>gather_resources</Action> </Selector> <Action>change_color_to_green</Action> </Sequence> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'look_for_food': 'Action: Look for food in the environment. Always returns True.', 'return_to_nest': 'Action: Return to the nest. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_food_detected': 'Condition: Check if food is within 50 units. Returns True if food is within 50 units of distance, False otherwise.', 'is_food_reached': 'Condition: Check if food is within 10 units. Returns True if food is within 10 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'follow_closest_agent': 'Action: Follow the closest agent within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Find and reach food, follow the closest agent, and return to the nest.'Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>is_food_detected</Condition> <Selector> <Sequence> <Condition>is_food_reached</Condition> <Action>follow_closest_agent</Action> </Sequence> <Action>look_for_food</Action> </Selector> <Action>return_to_nest</Action> </Sequence> <Action>task_completed</Action> </Selector> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'follow_closest_agent': 'Action: Follow the closest agent within the environment. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_agent_nearby': 'Condition: Check if another agent is within 30 units. Returns True if another agent is within 30 units of distance, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'join_line': 'Action: Join a vertical line formed by other agents. Always returns True.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'move_randomly': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Join a line with other agents if nearby, otherwise move randomly within the environment.'Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree> <Sequence> <Condition>is_agent_nearby</Condition> <Sequence> <Condition>is_line_formed</Condition> <Action>join_line</Action> </Sequence> <Action>follow_closest_agent</Action> </Sequence> <Action>move_randomly</Action> </BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'move_to_location': 'Action: Move to a specific location within the environment. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_location_reached': 'Condition: Check if the agent has reached the designated location. Returns True if the location is reached, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'explore_area': 'Action: Explore a specific area within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: generate behavior tree to 'Explore a specific area within the environment and then move to a designated location.'Output only the XML behavior tree without extra text.
7.// OUTPUT:
<BehaviorTree> <Sequence> <Action>explore_area</Action> <Condition>is_location_reached</Condition> <Action>move_to_location</Action> </Sequence> <Action>task_completed</Action> </BehaviorTree>
###
4.// INSTRUCTIONS: Use only the following behaviors {'find_food_source': 'Action: Search for nearby food source. Always returns True.', 'collect_food': 'Action: Collect food from the source. Always returns True.', 'return_to_nest': 'Action: Return to the nest. Always returns True.', 'is_food_source_detected': 'Condition: Check if there is a food source within 10 units of distance. Returns True if a food source is detected, False otherwise.', 'is_nest_reached': 'Condition: Check if the robot has reached the nest. Returns True if the nest is reached, False otherwise.', 'is_food_collected': 'Condition: Check if the robot has successfully collected food. Returns True if food is collected, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Generate a behavior tree for a robot to navigate and collect food from a nearby source and return it to the nest.
4.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>is_food_source_detected</Condition><Action>find_food_source</Action><Action>collect_food</Action></Sequence><Selector><Sequence><Condition>is_nest_reached</Condition><Action>drop_food</Action></Sequence><Action>return_to_nest</Action></Selector></Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'search_for_target': 'Action: Randomly search for the target within the given environment. Always returns True.', 'navigate_to_target': 'Action: Navigate towards the target if it is within view. Always returns True.', 'take_cover': 'Action: Take cover and hide from the target if it is within a certain distance. Always returns True.', 'shoot_target': 'Action: Shoot at the target if it is within range. Always returns True.', 'is_target_within_view': 'Condition: Check if the target is within view. Returns True if target is within view, False otherwise.', 'is_target_within_range': 'Condition: Check if the target is within shooting range. Returns True if target is within shooting range, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Generate a behavior tree for a swarm of soldiers to engage and eliminate an enemy target while taking cover and navigating obstacles.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_target_within_view</Condition><Action>navigate_to_target</Action><Action>take_cover</Action></Sequence><Sequence><Condition>is_target_within_range</Condition><Action>shoot_target</Action></Sequence><Action>search_for_target</Action></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'pick_up_item': 'Action: Pick up an item that is within reach. Always returns True.', 'drop_item': 'Action: Drop the currently held item. Always returns True.', 'navigate_to_goal': 'Action: Navigate towards the goal location. Always returns True.', 'is_item_detected': 'Condition: Check if there is an item within reach. Returns True if item is detected, False otherwise.', 'is_goal_reached': 'Condition: Check if the goal has been reached. Returns True if goal location has been reached, False otherwise.', 'is_item_held': 'Condition: Check if an item is currently held. Returns True if item is held, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Generate a behavior tree for a robot to navigate and collect items from various locations and bring them to a designated goal location.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_item_detected</Condition><Action>pick_up_item</Action><Action>navigate_to_goal</Action></Sequence><Selector><Sequence><Condition>is_goal_reached</Condition><Action>drop_item</Action></Sequence><Action>navigate_to_goal</Action></Selector></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'build_structure': 'Action: Collect materials and build a planned structure. Returns True once the structure is completed.', 'gather_materials': 'Action: Search for and collect materials within the environment. Always returns True.', 'position_swarm': 'Action: Position the robots in a formation to build the structure. Always returns True.', 'is_material_available': 'Condition: Check if the required materials are available. Returns True if materials are available, False otherwise.', 'is_structure_complete': 'Condition: Check if the planned structure has been successfully built. Returns True if structure is complete, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
7.// USER COMMAND: Generate a behavior tree for a swarm of robots to work together and build a structure using available materials within their environment.
7.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>is_material_available</Condition><Action>gather_materials</Action></Sequence><Selector><Sequence><Condition>is_structure_complete</Condition><Action>position_swarm</Action><Action>build_structure</Action></Selecto 
###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Move straight until an obstacle is detected, then avoid it and continue.'Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>is_obstacle_detected</Condition> <Action>avoid_obstacle</Action> <Action>continue_movement_agent</Action> </Sequence> <Action>wander</Action></Selector> <Sequence><Action>continue_movement_agent</Action></Sequence></Sequence> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Find the target, form a line with it, and then move forward until the target is reached.'Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>is_target_detected</Condition><Action>form_line</Action><Action>task_completed</Action></Sequence><Action>wander</Action></Selector><Sequence><Condition>is_target_reached</Condition><Action>continue_movement_agent</Action></Sequence></Sequence></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Form a line and move back slightly if an obstacle is detected, then continue moving forward.'Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>is_line_formed</Condition><Action>avoid_obstacle</Action><Action>avoid_obstacle</Action><Action>continue_movement_agent</Action></Sequence><Action>wander</Action></Selector><Sequence><Action>continue_movement_agent</Action></Sequence></Sequence></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition
###
3.// INSTRUCTIONS: Use only the following behaviors {'detect_obstacles': 'Condition: Check for obstacles within a 10 unit radius. Returns True if an obstacle is detected, False otherwise.', 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'follow_path': 'Action: Follow a predetermined path. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'turn_left': 'Action: Turn the robot 90 degrees to the left. Always returns True.', 'turn_right': 'Action: Turn the robot 90 degrees to the right. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3.// USER COMMAND: generate behavior tree to 'Detect and avoid obstacles, then turn left and follow path until target is reached'. Output only the XML behavior tree without extra text.
3.// OUTPUT:
<BehaviorTree><Sequence><Condition>detect_obstacles</Condition><Action>avoid_obstacle</Action></Sequence><Sequence><Action>turn_left</Action><Condition>is_target_reached</Condition><Action>follow_path</Action></Sequence></BehaviorTree>

###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'drop_target': 'Action: Drop the target object at the designated drop-off location. Always returns True.', 'grab_target': 'Action: Grab the target object if it is within reach. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_at_dropoff': 'Condition: Check if the robot is at the designated drop-off location. Returns True if at the drop-off location, False otherwise.', 'is_at_intersection': 'Condition: Check if the robot is at a designated intersection. Returns True if at the intersection, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Move to intersection, grab target if possible, continue to next intersection, drop target at designated drop-off location if at intersection'. Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_at_intersection</Condition><Sequence><Condition>is_target_detected</Condition><Action>grab_target</Action></Sequence></Sequence><Sequence><Condition>is_target_grabbed</Condition><Action>wander</Action><Sequence><Condition>is_at_dropoff</Condition><Action>drop_target</Action></Sequence></Sequence><Action>wander</Action></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'change_color_to_blue': "Action: Change agent's color to blue. Always returns True.", 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_red': "Action: Change agent's color to red. Always returns True.", 'exit_nest': 'Action: Exit the nest and enter the environment. Always returns True.', 'grab_target': 'Action: Grab the target object if it is within reach. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'move_to_target': 'Action: Move towards the target object. Always returns True.', 'search_for_target': 'Action: Wander and search for the target object. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Search for the target object, move towards it and change color to blue when found'. Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>search_for_target</Action><Condition>is_target_detected</Condition><Action>grab_target</Action></Sequence><Sequence><Condition>is_target_grabbed</Condition><Action>move_to_target</Action></Sequence><Action>change_color_to_blue</Action></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'detect_obstacle': 'Condition: Check for obstacles within a 10 unit radius. Returns True if an obstacle is detected, False otherwise.', 'follow_path': 'Action: Follow a predetermined path. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_at_dropoff': 'Condition: Check if the robot is at the designated drop-off location. Returns True if at the drop-off location, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'move_to_dropoff': 'Action: Move towards the designated drop-off location. Always returns True.', 'take_detour': 'Action: Take a detour to avoid an obstacle. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Continue moving towards designated drop-off location, take detour if path is blocked by obstacles'. Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree><Sequence><Action>continue_movement_agent</Action><Condition>is_path_clear</Condition><Action>move_to_dropoff</Action></Sequence><Selector><Sequence><Condition>detect_obstacle</Condition><Action>take_detour</Action></Sequence><Selector><Action>continue_movement_agent</Action></Selector></Selector></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green':
###
3.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_direction': "Action: Change agent's direction to 'North'. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'gather_resource': 'Action: Collect nearby resources. Returns True if able to collect resources, False if no resources are available.', 'is_resource_loaded': 'Condition: Check if resources are loaded onto agent. Returns True if resources are loaded, False otherwise.', 'follow_path': 'Action: Follow a predetermined path. Returns True when path is completed, False if path cannot be completed.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wait_for_resource': 'Condition: Check if resources are available. Returns True if resources are available, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
3.// USER COMMAND: generate behavior tree to 'Collect resources and return to home base'Output only the XML behavior tree without extra text.
3.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Action>gather_resource</Action> <Condition>is_resource_loaded</Condition> <Action>follow_path</Action> </Sequence> <Condition>wait_for_resource</Condition> <Action>change_direction</Action> <Action>continue_movement_agent</Action> </Selector> <Sequence> <Condition>is_target_detected</Condition> <Condition>is_target_reached</Condition> <Action>task_completed</Action> </Sequence> </Sequence> </BehaviorTree>

###
4.// INSTRUCTIONS: Use only the following behaviors {'avoid_collision': 'Action: Move to avoid collision with other robots. Always returns True.', 'change_direction': "Action: Change agent's direction to 'South'. Always returns True.", 'clear_obstacles': 'Action: Use a tool to clear obstacles in the way. Returns True when all obstacles are cleared, False if obstacles are still present.', 'destroy_target': 'Action: Destroy target object. Returns True when target is destroyed, False if target cannot be destroyed.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_tool_available': 'Condition: Check if tool is available. Returns True if tool is available, False if tool is in use.', 'scan_environment': 'Action: Use sensors to scan environment. Always returns True.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wait_for_target': 'Condition: Check if target is available. Returns True if target is available, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Scan environment, avoid obstacles, and destroy target'Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree> <Sequence> <Action>scan_environment</Action> <Selector> <Sequence> <Condition>is_obstacle_detected</Condition> <Action>avoid_collision</Action> </Sequence> <Condition>wait_for_target</Condition> <Action>change_direction</Action> <Action>clear_obstacles</Action> </Selector> <Action>destroy_target</Action> <Action>task_completed</Action> </Sequence> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'avoid_collision': 'Action: Move to avoid collision with other robots. Always returns True.', 'change_direction': "Action: Change agent's direction to 'East'. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'follow_path': 'Action: Follow a predetermined path. Returns True when path is completed, False if path cannot be completed.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'move_to_target': 'Action: Navigate to target location. Returns True when target location is reached, False if target location is unreachable.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wait_for_path': 'Condition: Check if path is available. Returns True if path is available, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Navigate to target location while avoiding obstacles'Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>is_obstacle_detected</Condition> <Action>avoid_collision</Action> </Sequence> <Condition>wait_for_path</Condition> <Action>change_direction</Action> <Action>continue_movement_agent</Action> </Selector> <Action>follow_path</Action> <Action>move_to_target</Action> <Action>task_completed</Action> </Sequence> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'detect_anomaly': 'Action: Use sensors to detect anomalies. Returns True when anomaly is detected, False if no anomalies are present.', 'power_powered_down': 'Condition: Check if power is powered down. Returns True if power is powered down, False otherwise.', 'is_path_found': 'Condition: Check if path is found. Returns True if path is found, False if no path is available.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'recharge': 'Action: Recharge power. Returns True when power is fully recharged, False if recharge is still in progress.', 'repair_robot': 'Action: Repair damaged robot. Returns True when robot is fully repaired, False if repair is still in progress.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Detect anomalies 
###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_red': "Action: Change agent's color to red. Always returns True.", 'form_square': 'Action: Form a square shape with agent at center. Always returns True.', 'is_area_explored': 'Condition: Check if the entire area has been explored. Returns True if all areas are explored, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'navigate_to_target': 'Action: Move towards the designated target. Returns True if the target is reached, False otherwise.', 'update_map': "Action: Update the robot's internal map of the environment based on its current location and sensor readings. Always returns True.", 'clear_map': 'Action: Clear the internal map of the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Explore an unknown environment, form a square and move to designated target once area is fully explored.'Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_area_explored</Condition><Action>navigate_to_target</Action><Sequence><Condition>is_target_reached</Condition><Action>clear_map</Action></Sequence></Sequence><Sequence><Condition>is_obstacle_detected</Condition><Action>avoid_obstacle</Action></Sequence><Action>wander</Action></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_direction_random': 'Action: Change the agent's direction randomly. Always returns True.', 'drop_equipment': 'Action: Drop any attached equipment. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_equipment_attached': 'Condition: Check if equipment is attached to the agent. Returns True if equipment is attached, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_blocked': 'Condition: Check if the path in the current direction is blocked or impassable. True if the path is blocked, False otherwise.', 'pick_up_equipment': 'Action: Pick up any available equipment within reach. Always returns True.', 'return_to_nest': 'Action: Move towards the designated nest location. Return True if agent reaches the nest, False otherwise.', 'update_map': "Action: Update the robot's internal map of the environment based on its current location and sensor readings. Always returns True.", 'wait': 'Action: Wait for a designated amount of time before continuing. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Retrieve any available equipment in the environment, bring it back to the nest, and drop it off'Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_equipment_attached</Condition><Action>drop_equipment</Action></Sequence><Selector><Sequence><Condition>is_agent_in_nest</Condition><Sequence><Condition>is_equipment_attached</Condition><Action>drop_equipment</Action></Sequence></Sequence><Action>return_to_nest</Action></Selector><Sequence><Condition>is_obstacle_detected</Condition><Action>avoid_obstacle</Action><Sequence><Condition>is_path_blocked</Condition><Action>change_direction_random</Action></Sequence></Sequence><Selector><Sequence><Condition>is_equipment_attached</Condition><Action>return_to_nest</Action></Sequence><Sequence><Condition>is_equipment_attached</Condition><Action>pick_up_equipment</Action></Sequence><Sequence><Condition>is_line_formed</Condition><Action>update_map</Action></Sequence></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_direction_random': 'Action: Change the agent's direction randomly. Always returns True.', 'change_speed': 'Action: Change the agent's speed to a specific value. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_equipment_attached': 'Condition: Check if equipment is attached to the agent. Returns True if equipment is attached, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_blocked': 'Condition: Check if the path in the current direction is blocked or impassable. True if the path is blocked, False otherwise.', 'navigate_to_target': 'Action: Move towards the designated target. Returns True if the target is reached, False otherwise.', 'patrol': 'Action: Patrol a specific area or path. Always returns True.', 'wait': 'Action: Wait for a designated amount of time before continuing. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Patrol the designated area while avoiding obstacles and checking target conditions every 5 minutes'Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree><Sequence><Action>navigate_to_target</Action><Selector><Sequence><Condition>is_obstacle_detected</Condition><Action>avoid_obstacle</Action></Sequence><Sequence><Condition>is_path_blocked</Condition><Action>change_direction_random</Action><Action>wait</Action
###
4.// INSTRUCTIONS: Use only the following behaviors {'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.', 'avoid_agent': 'Action: Avoid any other agents in the environment. Always returns True.', 'is_agent_detected': 'Condition: Check if another agent is within the vicinity. Returns True if another agent is detected, False otherwise.', 'wait_time': 'Action: Wait for a designated amount of time. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Avoid obstacles, other agents and then return home'. Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_obstacle_detected</Condition><Action>avoid_obstacle</Action><Action>wander</Action></Sequence><Sequence><Condition>is_agent_detected</Condition><Action>avoid_agent</Action><Action>wander</Action></Sequence><Sequence><Condition>is_agent_in_nest</Condition><Action>task_completed</Action></Sequence></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'remove_obstacle': 'Action: Remove obstacle from the environment. Always returns True.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'change_direction_left': 'Action: Change agent's movement direction to the left. Always returns True.', 'change_direction_right': 'Action: Change agent's movement direction to the right. Always returns True.', 'go_straight': 'Action: Move forward in the current direction. Always returns True.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Go towards a target while avoiding obstacles and removing obstacles in the way'. Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_target_detected</Condition><Sequence><Condition>is_target_reached</Condition><Action>task_completed</Action></Sequence><Action>go_straight</Action></Sequence><Sequence><Condition>is_obstacle_detected</Condition><Sequence><Condition>is_obstacle_detected</Condition><Action>remove_obstacle</Action></Sequence><Sequence><Condition>is_obstacle_detected</Condition><Action>change_direction_left</Action></Sequence><Sequence><Condition>is_obstacle_detected</Condition><Action>change_direction_right</Action></Sequence></Sequence><Action>wander</Action></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_red': 'Action: Change agent's color to red. Always returns True.', 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_circle': 'Action: Form a circular formation with other agents. Always returns True.', 'is_agent_in_formation': 'Condition: Check if the agent is in the circular formation. Returns True if the agent is in the formation, False otherwise.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_circle_formed': 'Condition: Check if a circular formation is formed. Returns True if the formation is complete, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Form a circular formation with other agents, go to target and change color to red'. Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_target_detected</Condition><Sequence><Condition>is_circle_formed</Condition><Action>change_color_to_red</Action><Action>task_completed</Action></Sequence><Action>form_circle</Action></Sequence><Sequence><Condition>is_agent_in_formation</Condition><Action>continue_movement_agent</Action></Sequence></Selector></BehaviorTree>

###
7.// INSTRUCTIONS: Use only the following behaviors {'move_toward_point': 'Action: Move towards a designated point in the environment. Always returns True.', 'move_away_from_point': 'Action: Move away from a designated point in the environment. Always returns True.', 'change_direction_left': 'Action: Change agent's movement direction to the left. Always returns True.', 'change_direction_right': 'Action: Change agent's movement direction to the right