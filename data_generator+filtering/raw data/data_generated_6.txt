  
###
4.// INSTRUCTIONS: Use only the following behaviors {'move_forward': 'Action: Move forward 1 unit. Always returns True.', 'rotate_left': 'Action: Rotate left 90 degrees. Always returns True.', 'rotate_right': 'Action: Rotate right 90 degrees. Always returns True.', 'check_color': 'Condition: Check the color of the environment. Returns True if the color is green, False otherwise.', 'detect_wall': 'Condition: Detect a wall using sensors. Returns True if a wall is detected, False otherwise.', 'detect_object': 'Condition: Detect an object using sensors. Returns True if an object is detected, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate a behavior tree for a robot to move forward until it reaches a green-colored object.
4.// OUTPUT:
<BehaviorTree><Sequence><Condition>detect_object</Condition><Selector><Sequence><Condition>check_color</Condition><Action>task_completed</Action></Sequence><Sequence><Condition>detect_wall</Condition><Action>rotate_right</Action><Sequence><Action>move_forward</Action><Action>rotate_left</Action></Sequence></Sequence></Selector></Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'fly_towards_beacon': 'Action: Fly towards the given beacon. Always returns True.', 'follow_flight_path': 'Action: Follow the designated flight path. Always returns True.', 'scan_for_obstacles': 'Action: Scan the surrounding area for obstacles. Returns True if no obstacles are detected, False otherwise.', 'report_malfunction': 'Action: Send a report when a malfunction is detected. Always returns True.', 'is_target_reached': 'Condition: Check if the target location has been reached. Returns True if the target has been reached, False otherwise.', 'is_malfunction_detected': 'Condition: Check for any malfunction using sensors. Returns True if a malfunction is detected, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate a behavior tree for a drone to fly towards a given beacon, follow designated flight path, scan for obstacles, and report any malfunctions.
5.// OUTPUT:
<BehaviorTree><Sequence><Action>fly_towards_beacon</Action><Sequence><Action>follow_flight_path</Action><Selector><Action>scan_for_obstacles</Action><Sequence><Condition>is_malfunction_detected</Condition><Action>report_malfunction</Action></Sequence></Selector></Sequence></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'collect_food': 'Action: Collect nearby food from the environment. Always returns True.', 'drop_food': 'Action: Drop any food being carried. Always returns True.', 'found_food': 'Condition: Check if food is present in the environment. Returns True if food is found, False otherwise.', 'return_to_nest': 'Action: Return to the nest location. Always returns True.', 'is_nest_detected': 'Condition: Check if the nest is within range. Returns True if the nest is detected, False otherwise.', 'is_target_reached': 'Condition: Check if the target location has been reached. Returns True if the target has been reached, False otherwise.', 'is_food_carried': 'Condition: Check if food is being carried. Returns True if food is being carried, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate a behavior tree for a group of robots to collect food from the environment, return to the nest with the food, and drop the food at the nest location.
6.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>found_food</Condition><Action>collect_food</Action></Sequence><Sequence><Condition>is_food_carried</Condition><Selector><Condition>is_nest_detected</Condition><Sequence><Condition>is_target_reached</Condition><Action>drop_food</Action></Sequence><Action>return_to_nest</Action></Selector></Sequence></Selector></Sequence></BehaviorTree>###
4.// INSTRUCTIONS: Use only the following behaviors {'move_to_nest': 'Action: Move towards the designated nest location. Returns True if successfully reached, False otherwise.', 'check_neighbors': 'Action: Check with neighboring robots and report back. Always returns True.', 'interview_neighbor': 'Action: Interview a neighbor to gather information. Returns True if information is obtained, False otherwise.', 'search_for_food': 'Action: Search for food sources in the environment. Returns True if a food source is found, False otherwise.', 'pick_up_food': 'Action: Pick up food from a discovered source. Returns True if food is successfully collected, False otherwise.', 'drop_food_at_nest': 'Action: Drop food at the designated nest location. Returns True if food is successfully dropped, False otherwise.', 'is_food_detected': 'Condition: Check if a food source has been detected. Returns True if a food source is detected, False otherwise.', 'is_nest_reached': 'Condition: Check if the designated nest location has been reached. Returns True if the nest is reached, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Generate a behavior tree for cooperative food collection and delivery by a swarm of robots, including detecting and obtaining food, coordinating with neighboring robots, and delivering food to a designated nest location.
4.// OUTPUT:
<BehaviorTree> <Selector> <Sequence><Condition>is_nest_reached</Condition> <Action>drop_food_at_nest</Action> </Sequence> <Selector><Sequence> <Condition>is_food_detected</Condition> <Action>pick_up_food</Action> </Sequence><Selector><Sequence><Condition>is_neighbor_interviewed</Condition> <Action>interview_neighbor</Action></Sequence><Selector> <Condition>is_neighbor_available</Condition> <Action>check_neighbors</Sequence><Sequence> <Condition>is_neighbor_located</Condition> <Action>move_to_neighbor</Action> </Sequence></Selector> <Action>search_for_food</Action></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'gather_resources': 'Action: Scan and gather resources in the environment. Returns True if resources are successfully collected, False otherwise.', 'store_resources': 'Action: Store resources in designated storage location. Returns True if resources are successfully stored, False otherwise.', 'is_resource_available': 'Condition: Check if resources are available nearby. Returns True if resources are detected, False otherwise.', 'is_storage_full': 'Condition: Check if the designated storage location is full. Returns True if storage is full, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Generate a behavior tree for a swarm of robots to efficiently gather and store resources in a designated location within the environment.
5.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>is_resource_available</Condition> <Action>gather_resources</Action> </Sequence> <Selector> <Sequence> <Condition>is_storage_full</Condition> <Action>move_to_next_storage</Action> </Sequence> <Action>store_resources</Action> </Selector> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'generate_map': 'Action: Create a map of the environment based on sensor readings. Returns True if map is successfully generated, False otherwise.', 'optimize_map': 'Action: Optimize the map by removing redundant or inaccurate information. Returns True if map is successfully optimized, False otherwise.', 'check_map_accuracy': 'Action: Check for accuracy and completeness of the map. Returns True if map is deemed accurate, False otherwise.', 'is_map_complete': 'Condition: Check if the entire environment has been mapped and explored. Returns True if map is complete, False otherwise.', 'is_map_accurate': 'Condition: Check if the generated map is accurate and matches the physical environment. Returns True if map is accurate, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Generate a behavior tree for a swarm of robots to accurately and efficiently map and explore an unknown environment.
6.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>is_map_complete</Condition> <Action>stop_mapping</Action></Sequence> <Sequence> <Condition>is_map_accurate</Condition> <Action>check_map_accuracy</Action> </Sequence> </Selector> <Action>optimize_map</Action> </Sequence> <Selector> <Sequence> <Condition>is_new_map_generated</Condition> <Action>generate_map</Action> </Sequence> <Action>wander</Action> </Selector></BehaviorTree> 
###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_facing_direction': 'Action: Change the agent's facing direction to the opposite. Always returns True.', 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_circle': 'Action: Move the agent to form a circle with other agents. Always returns True.', 'idle': 'Action: Stay idle without any movement. Always returns True.', 'is_agent_in_circle': 'Condition: Check if the agent is currently part of a circle formation with other agents. Returns True if the agent is in a circle formation, False otherwise.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_circle_formed': 'Condition: Check if a circle formation is completed by all agents. Returns True if all agents are in a circle, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 10 units. Returns True if the target is within 10 units of distance, False otherwise.', 'join_circle': 'Action: Move towards and join an existing circle formation with other agents. Always returns True.', 'leave_circle': 'Action: Leave the current circle formation and continue movement. Always returns True.', 'move_towards_target': 'Action: Move towards a specified target location. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Coordinate with other agents in a swarm to reach a target location by forming a circle'Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree><Sequence><Sequence><Condition>is_agent_in_nest</Condition><Action>continue_movement_agent</Action></Sequence><Selector><Sequence><Condition>is_target_reached</Condition><Action>idle</Action></Sequence><Sequence><Condition>is_agent_in_circle</Condition><Action>join_circle</Action></Sequence><Sequence><Condition>is_circle_formed</Condition><Action>change_facing_direction</Action></Sequence><Sequence><Action>move_towards_target</Action></Sequence></Selector></Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'check_temperature': 'Action: Check the temperature of the environment. Always returns True.', 'change_temperature_to_warm': 'Action: Increase the temperature of the environment to warm. Returns True if temperature is successfully changed, False otherwise.', 'change_temperature_to_cold': 'Action: Decrease the temperature of the environment to cold. Returns True if temperature is successfully changed, False otherwise.', 'follow_temperature_gradient': "Action: Move towards the direction of the highest temperature gradient. Always returns True.", 'ignore_temperature': 'Action: Ignore temperature readings and continue movement. Always returns True.', 'is_environment_warm': 'Condition: Check if the environment temperature is warm. Returns True if the temperature is warm, False otherwise.', 'is_environment_cold': 'Condition: Check if the environment temperature is cold. Returns True if the temperature is cold, False otherwise.', 'is_object_detected': 'Condition: Check if an object is detected in the environment. Returns True if an object is detected, False otherwise.', 'is_target_reached': 'Condition: Check if the target location has reached. Returns True if the target location is reached, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Find and reach a warm and green object while avoiding cold and red objects' Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_target_reached</Condition><Action>task_completed</Action></Sequence><Sequence><Condition>is_object_detected</Condition><Selector><Condition>is_environment_warm</Condition><Action>follow_temperature_gradient</Action></Selector></Sequence><Sequence><Condition>is_environment_cold</Condition><Action>ignore_temperature</Action><Action>change_temperature_to_warm</Action></Sequence><Sequence><Action>change_temperature_to_cold</Action><Action>follow_temperature_gradient</Action></Sequence></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'communicate_with_swarm': 'Action: Communicate with other robots in the swarm to coordinate actions. Always returns True.', 'avoid_swarm_collision': 'Action: Avoid collisions with other robots in the swarm. Always returns True.', 'change_color_to_blue': "Action: Change agent's color to blue. Always returns True.", 'go_to_swarm_center': "Action: Move towards the center of the swarm formation. Always returns True.", 'form_triangular_pattern': 'Action: Form a triangular shape with other robots in the swarm. Always returns True.', 'is_agent_in_center': 'Condition: Check if the agent is in the center of the swarm. Returns True if the agent is in the center, False otherwise.', 'is_collision_detected': 'Condition: Check if a collision with another robot in the swarm is about to occur. Returns True if a collision is detected, False otherwise.', 'is_pattern_formed': 'Condition: Check if the triangular formation with other robots in the swarm is completed. Returns True if the formation is completed, False otherwise.', 'is_target_reached': 'Condition: Check if the target location has reached. Returns True if the target location is reached, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Navigate through a swarm of robots, reach the center and form a triangular pattern with them' Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>is_target_reached</Condition><Action>task_completed</Action></Sequence><Sequence><Condition>is_collision_detected</Condition><Action>avoid_swarm_collision</Action></Sequence><Sequence><Condition>is_agent_in_center</Condition><Action>communicate_with_swarm</Action></Sequence></Selector><Sequence><Selector><Condition>is_pattern_formed</Condition><Action>go_to_swarm_center</Action></Selector><Sequence><Condition>is_target_reached</Condition><Action>communicate_with_swarm</Action><Action>form_triangular_pattern</Action></Sequence></Sequence></Sequence></BehaviorTree> 
###
4.// INSTRUCTIONS: Use only the following behaviors {'move_forward': 'Action: Move the robot one step forward in the current direction. Always returns True.', 'turn_left': 'Action: Turn the robot 90 degrees to the left. Always returns True.', 'turn_right': 'Action: Turn the robot 90 degrees to the right. Always returns True.', 'detect_color': 'Action: Detect the color of the current location. Returns the color detected.', 'detect_objects': 'Action: Detect the objects in the environment and return a list of objects.', 'is_path_blocked': 'Condition: Check if the path in the current direction is blocked or impassable. Returns True if the path is blocked, False otherwise.', 'is_object_nearby': 'Condition: Check if an object is within 5 units of distance. Returns True if an object is nearby, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to explore an environment, detect color of current location, and avoid obstacles 
4.// OUTPUT:
<BehaviorTree> <Sequence> <Action>detect_color</Action> <Selector> <Sequence> <Condition>is_path_blocked</Condition> <Selector> <Action>turn_left</Action> <Action>turn_right</Action> </Selector> </Sequence> <Sequence> <Action>move_forward</Action> <Action>detect_objects</Action> <Action>is_object_nearby</Action> </Sequence> </Selector> </Sequence> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'move_forward': 'Action: Move the robot one step forward in the current direction. Always returns True.', 'turn_left': 'Action: Turn the robot 90 degrees to the left. Always returns True.', 'turn_right': 'Action: Turn the robot 90 degrees to the right. Always returns True.', 'detect_color': 'Action: Detect the color of the current location. Returns the color detected.', 'detect_objects': 'Action: Detect the objects in the environment and return a list of objects.', 'drop_object': 'Action: Drop the object currently held by robot. Always returns True.', 'pick_up_object': 'Action: Pick up specified object. Returns True when object is successfully picked up, False otherwise.', 'is_object_held': 'Condition: Check if robot is currently holding an object. Returns True if object is held, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to pick up a green object, move to a specified location, drop object, and change color to white
5.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Action>detect_objects</Action> <Action>pickup_object</Action> <Selector> <Sequence> <Condition>is_object_held</Condition> <Action>move_forward</Action> </Sequence> <Action>detect_color</Action> </Selector> </Sequence></Selector> <Action>drop_object</Action> <Action>change_color_to_white</Action> </Sequence> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'move_forward': 'Action: Move the robot one step forward in the current direction. Always returns True.', 'turn_left': 'Action: Turn the robot 90 degrees to the left. Always returns True.', 'turn_right': 'Action: Turn the robot 90 degrees to the right. Always returns True.', 'detect_noise': 'Action: Detect noise level in the environment. Returns the noise level detected.', 'move_towards_source': 'Action: Move towards the source of the detected noise. Always returns True.', 'rest': 'Action: Rest and recharge batteries. Always returns True.', 'is_battery_low': 'Condition: Check if robot's battery level is below 30%. Returns True if battery is low, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to detect noise level, move towards source of noise, and rest when battery is low
6.// OUTPUT:
<BehaviorTree> <Sequence> <Action>detect_noise</Action> <Selector> <Sequence> <Condition>is_battery_low</Condition> <Action>rest</Action> </Sequence> <Sequence> <Action>move_towards_source</Action> <Action>move_forward</Action> </Sequence> </Selector> </Sequence> </BehaviorTree> 
###
4.// INSTRUCTIONS: Use only the following behaviors {'is_robot_at_destination': 'Condition: Check if the robot has reached the specified destination. Returns True if destination is reached, False otherwise.', 'move_to_destination': 'Action: Move towards the specified destination. Always returns True.', 'switch_task': 'Action: Change current task to a different one. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Generate behavior tree to 'Deliver a package to a designated location, and then switch to patrolling the area'
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_robot_at_destination</Condition><Action>switch_task</Action></Sequence><Action>move_to_destination</Action></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'is_elapsed_time_greater_than': 'Function: Check if the elapsed time is greater than a specified threshold. Returns True if elapsed time is greater than threshold, False otherwise.', 'move_to_next_waypoint': 'Action: Move to the next waypoint in the predetermined path. Always returns True.', 'report_status': 'Action: Report current status and location to the team leader. Always returns True.', 'wait_for_signal': 'Action: Wait for a signal from the team leader before proceeding. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Generate behavior tree to 'Complete a reconnaissance mission within 30 minutes, reporting status and location every 10 minutes.'
5.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_elapsed_time_greater_than(30 minutes)</Condition><Action>report_status</Action><Sequence><Condition>is_elapsed_time_greater_than(10 minutes)</Condition><Action>report_status</Action><Action>wait_for_signal</Action></Sequence><Action>move_to_next_waypoint</Action></Sequence></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'detect_intruder': 'Action: Use sensors to detect potential intruders. Always returns True.', 'go_to_defense_mode': 'Action: Activate defense mechanisms and prepare for battle. Always returns True.', 'attack_intruder': 'Action: Attack any detected intruders. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Generate behavior tree to 'Defend the colony by detecting and attacking any potential intruders.'
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>detect_intruder</Condition><Action>go_to_defense_mode</Action><Action>attack_intruder</Action></Sequence><Action>go_to_defense_mode</Action></Selector></BehaviorTree> 
###
4.// INSTRUCTIONS: Use only the following behaviors {'launch_missile': 'Action: Launch a missile in the specified direction. Always returns True.', 'is_enemy_in_range': 'Condition: Checks if enemy is within range. Returns True if enemy is within range, False otherwise.', 'is_missile_launched': 'Condition: Checks if missile has been launched. Returns True if missile is in the air, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Launch a missile at the closest enemy robot, then retreat to safety.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Selector><Condition>is_enemy_in_range</Condition><Action>launch_missile</Action></Selector><Action>retreat_to_safety</Action></Sequence><Sequence><Selector><Condition>is_missile_launched</Condition><Action>retreat_to_safety</Action></Selector></Sequence></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'dig_tunnel': 'Action: Use specialized equipment to dig a tunnel in the specified direction. Always returns True.', 'is_obstacle_detected': 'Condition: Checks for any obstacle that may block the tunnel. Returns True if an obstacle is detected, False otherwise.', 'clear_tunnel': 'Action: Use explosives to clear any obstacles in the tunnel. Always returns True.', 'escape_tunnel': 'Action: Move quickly through the tunnel while avoiding any obstacles. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Construct a new tunnel from the base to the designated mining location, using specialized equipment and explosives to clear any obstacles along the way.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>dig_tunnel</Action><Condition>is_obstacle_detected</Condition><Action>clear_tunnel</Action></Sequence><Action>escape_tunnel</Action></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'identify_target': 'Action: Use sensors and scanning techniques to identify the target object. Always returns True.', 'destroy_target': 'Action: Attack and destroy the target object. Returns True if the target is destroyed, False otherwise.', 'is_target_identified': 'Condition: Checks if the target object has been identified. Returns True if the target is identified, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Locate and destroy the enemy fortress, using advanced sensors and targeting systems to ensure accuracy.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Selector><Condition>is_target_identified</Condition><Action>destroy_target</Action></Selector><Action>identify_target</Action></Sequence></Selector></BehaviorTree> 
###
4.// INSTRUCTIONS: Use only the following behaviors {'communicate': "Action: Send message to other robots in the swarm for coordination. Always returns True.", 'is_coordinated': 'Condition: Check if all robots in the swarm are coordinating their actions. Returns True if coordination is successful, False otherwise.', 'detect_dropoff': 'Condition: Check if a potential dropoff location is detected within 10 units. Returns True if a dropoff location is detected, False otherwise.', 'finish_task': 'Action: Finish the task by moving to the dropoff point and signaling completion. Always returns True.', 'follow_leader': "Action: Move towards and follow the designated leader robot's movements. Always returns True.", 'identify_leader': 'Action: Identify and designate a leader robot for the swarm to follow. Always returns True.', 'is_leader_in_sight': 'Condition: Check if the leader robot is within the swarm's line of sight. Returns True if the leader is in sight, False otherwise.', 'is_swarm_organized': 'Condition: Check if the swarm is properly organized and following designated roles. Returns True if the swarm is organized, False otherwise.', 'move_to_dropoff': 'Action: Move towards and reach the designated dropoff point. Always returns True.', 'restart_task': 'Action: Restart the task by returning to the starting point and following designated roles. Always returns True.', 'spot_dropoff': 'Action: Spot a potential dropoff location and send a signal to other robots for coordination. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Coordinate and complete a task as a swarm, including identifying and following a leader, spotting and moving to a designated dropoff location'. Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_swarm_organized</Condition><Selector><Action>identify_leader</Action><Sequence><Condition>is_leader_in_sight</Condition><Action>follow_leader</Action></Sequence></Selector></Sequence><Action>communicate</Action></Selector><Sequence><Condition>detect_dropoff</Condition><Sequence><Action>spot_dropoff</Action><Action>communicate</Action></Sequence></Sequence><Sequence><Condition>is_coordinated</Condition><Selector><Action>move_to_dropoff</Action><Action>finish_task</Action></Selector></Sequence><Action>restart_task</Action></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'adjust_heading': 'Action: Adjust the robot's heading alignment based on sensor readings. Always returns True.', 'detect_enemy': 'Condition: Check for enemy presence within a 30 unit range. Returns True if an enemy is detected, False otherwise.', 'engage_enemy': 'Action: Engage in battle with the detected enemy. Always returns True.', 'follow_path': 'Action: Follow the designated path to reach the target destination. Always returns True.', 'is_destination_reached': 'Condition: Check if the target destination has been reached. Returns True if the destination is reached, False otherwise.', 'is_path_available': 'Condition: Check if the designated path is available and free of obstacles. Returns True if the path is clear, False otherwise.', 'is_path_blocked': 'Condition: Check if the designated path is blocked by obstacles. Returns True if the path is blocked, False otherwise.', 'receive_command': 'Action: Receive and process commands from the designated leader robot. Always returns True.', 'scan_surroundings': 'Action: Use sensors to scan the surrounding environment for potential obstacles or enemies. Always returns True.', 'update_map': 'Action: Update the robot's internal map of the environment based on its current location and sensor readings. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Navigate through an unknown battlefield, scan for enemies and engage in battle if detected'. Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_path_available</Condition><Action>follow_path</Action><Action>update_map</Action></Sequence><Sequence><Condition>is_path_blocked</Condition><Action>adjust_heading</Action></Sequence><Action>scan_surroundings</Action></Selector><Sequence><Condition>detect_enemy</Condition><Selector><Action>engage_enemy</Action><Action>receive_command</Action></Selector></Sequence></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'activate_sensor': "Action: Activate the specified sensor. Always returns True.", "deactivate_sensor": "Action: Deactivate the specified sensor. Always returns True.", 'check_battery_level': "Condition: Check the battery level and return True (low battery) or False (battery level above 20%)", 'execute_task': 'Action: Execute the specified task using the activated sensor. Always returns True.', 'is_intruder_detected': 'Condition: Check if an intruder is detected by the active sensor. Returns True if an intruder is detected, False otherwise.', 'monitor_activity': 'Action: Run the active sensor and continuously monitor for activity. Always returns True.', 'navigate_to_activities': "Action: Navigate towards the area with the most activity detected by the active sensor. Always returns True."}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Activate a specific sensor, monitor for activity and navigate to the most active area'. Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree><Sequence><Action>activate_sensor</Action><Action>check_battery_level</Action></Sequence><Selector><Condition>is_intruder_detected</Condition><Selector><Action>deactivate_sensor</Action><Sequence><Action>monitor_activity</Action><Action>navigate_to_activities</Action></Sequence></Selector></Selector></BehaviorTree>
###
4.// INSTRUCTIONS: Use only the following behaviors {'collect_resource': "Action: Pick up a resource from the ground. Always returns True.", 'deposit_resource': "Action: Deposit a resource in the designated storage area. Always returns True.", 'calculate_distance_to_target': 'Condition: Calculate the distance to the target location. Returns the distance in units.', 'is_resource_available': 'Condition: Check if there is a resource available to collect in the current location. Returns True if a resource is available, False otherwise.', 'is_storage_full': 'Condition: Check if the designated storage area is full. Returns True if the storage is full, False otherwise.', 'navigate_to_target': 'Action: Move towards the designated target location. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Generate behavior tree for a robot to collect and deposit resources at designated locations until storage is full
4.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_storage_full</Condition><Selector><Action>deposit_resource</Action><If>Else<Condition>is_resource_available</Condition><Selector><Sequence><Action>calculate_distance_to_target</Action><Action>navigate_to_target</Action><Action>collect_resource</Action></Sequence><Action>wander</Action></Selector></If></Selector></Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'self_repair': 'Action: Perform self-repair on damaged parts. Always returns True.', 'wait_for_repair': 'Action: Wait for another robot to perform repairs on damaged parts. Always returns True.', 'check_status': 'Action: Check the status of the robot for any damage. Always returns True.', 'is_damaged': 'Condition: Check if the robot has any damaged parts. Returns True if any part is damaged, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Generate behavior tree for a robot to self-monitor and perform repairs when necessary
5.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_damaged</Condition><Sequence><Selector><Action>self_repair</Action><Action>wait_for_repair</Action></Selector><Action>check_status</Action></Sequence></Sequence></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'scan_surroundings': 'Action: Scan the surroundings for any potential targets or enemies. Always returns True.', 'identify_target': 'Action: Identify the type and location of the target. Always returns True.', 'move_to_target': 'Action: Move towards the designated target location. Always returns True.', 'attack_target': 'Action: Attack the designated target. Always returns True.', 'relocate': 'Action: Relocate to a safer location. Always returns True.', 'is_target_identified': 'Condition: Check if the target has been identified. Returns True if the target is identified, False otherwise.', 'is_target_reachable': 'Condition: Check if the target is within reach. Returns True if the target is within range, False otherwise.', 'is_enemy_detected': 'Condition: Check if an enemy is detected in the surroundings. Returns True if an enemy is detected, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Generate behavior tree for a robot to identify and attack enemies in the surroundings
6.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_enemy_detected</Condition><If><Condition>is_target_identified</Condition><Selector><Sequence><Action>identify_target</Action><Action>move_to_target</Action><If>Else<Condition>is_target_reachable</Condition><Action>attack_target</Action><Action>wait</Action></If></Sequence><Action>scan_surroundings</Action></Selector></If></Sequence></BehaviorTree> 
###
4.// INSTRUCTIONS: Use only the following behaviors {'move_forward': 'Action: Move robot forward. Always returns True.', 'turn_left': 'Action: Turn robot left. Always returns True.', 'turn_right': 'Action: Turn robot right. Always returns True.', 'is_object_detected': 'Condition: Check if an object is detected ahead. Returns True if an object is detected, False otherwise.', 'is_barrier_detected': 'Condition: Check if a barrier is detected ahead. Returns True if a barrier is detected, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Generate behavior tree for a robot to autonomously navigate through a maze.
4.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>is_barrier_detected</Condition> <Action>turn_right</Action> </Sequence> <Sequence> <Condition>is_object_detected</Condition> <Action>turn_left</Action> <Action>move_forward</Action> </Sequence> </Selector> </BehaviorTree>
 
###
5.// INSTRUCTIONS: Use only the following behaviors {'move_to_nearest_teammate': 'Action: Move to the nearest teammate within radio communication range. Always returns True.', 'request_assistance': 'Action: Request assistance from other teammates. Always returns True.', 'is_enough_teammates': 'Condition: Check if there are enough teammates present for a task. Returns True if there are enough teammates, False otherwise.', 'is_in_radio_range': 'Condition: Check if a teammate is within radio communication range. Returns True if a teammate is within range, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Generate behavior tree for a robot to coordinate with its teammates for a group task
5.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_in_radio_range</Condition><Selector><Condition>is_enough_teammates</Condition><Action>request_assistance</Action><Action>move_to_nearest_teammate</Action></Selector></Sequence></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'sense_environment': 'Action: Sense the environment using sensors. Always returns True.', 'move_to_light': 'Action: Move towards the light source. Returns True if the light is detected, False if no light is detected.', 'move_to_saline': 'Action: Move towards the nearest saline source. Returns True if a saline source is detected, False otherwise.', 'deposit_saline': 'Action: Deposit collected saline into the designated container. Always returns True.', 'is_saline_full': 'Condition: Check if the designated saline container is full. Returns True if the container is full, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Generate behavior tree for a robot to collect and deposit saline from the environment while also searching for a light source.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_saline_full</Condition><Action>move_to_light</Action></Sequence><Action>sense_environment</Action><Selector><Sequence><Condition>is_saline_full</Condition><Action>move_to_light</Action></Sequence><Action>move_to_saline</Action><Action>deposit_saline</Action></Selector></Selector></BehaviorTree> 
###
4.// INSTRUCTIONS: Use only the following behaviors {'is_waypoint_reached': 'Condition: Check if the robot has reached the designated waypoint. Returns True if the waypoint is reached, False otherwise.', 'is_in_cone_of_sight': 'Condition: Check if the target is within the cone of sight. Returns True if the target is within the cone, False otherwise.', 'move_to_random_waypoint': 'Action: Move the robot to a random waypoint within the designated search area. Always returns True.', 'move_to_target': 'Action: Move the robot towards the target. Always returns True.', 'scan_environment': 'Action: Scan the immediate environment for any targets. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Generate behavior tree for a robot to search and follow a target
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_waypoint_reached</Condition><Selector><Sequence><Condition>is_in_cone_of_sight</Condition><Action>move_to_target</Action></Sequence><Sequence><Action>move_to_random_waypoint</Action><Action>scan_environment</Action></Sequence></Selector></Sequence></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'is_waypoint_reached': 'Condition: Check if the robot has reached the designated waypoint. Returns True if the waypoint is reached, False otherwise.', 'is_target_detected': 'Condition: Check if the target is within the robot's detection range. Returns True if the target is detected, False otherwise.', 'move_to_next_waypoint': 'Action: Move the robot to the next waypoint in the designated route. Always returns True.', 'move_to_target': 'Action: Move the robot towards the target. Always returns True.', 'scan_environment': 'Action: Scan the immediate environment for any targets. Always returns True.', 'wait': 'Action: Wait for a specified amount of time. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Generate behavior tree for a robot to follow a designated path and scan for a target periodically
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_waypoint_reached</Condition><Selector><Sequence><Condition>is_target_detected</Condition><Action>move_to_target</Action></Sequence><Sequence><Action>scan_environment</Action><Action>wait</Action></Sequence></Selector></Sequence></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_at_dropoff': 'Condition: Check if the robot is at the designated drop-off location. Returns True if at the drop-off location, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.', 'stop_movement': 'Action: Stop all movement and activity. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Generate behavior tree to 'Search for target and avoid obstacles, and return to the nest to signal task completion'
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_target_detected</Condition><Sequence><Condition>is_obstacle_detected</Condition><Action>avoid_obstacle</Action></Sequence><Sequence><Condition>is_at_dropoff</Condition><Action>task_completed</Action></Sequence></Sequence><Action>wander</Action><Action>change_color_to_green</Action><Action>stop_movement</Action></Selector></BehaviorTree> 
###
4.// INSTRUCTIONS: Use only the following behaviors {'detect_intruder': 'Action: Use sensors to detect any intruders in the area. Always returns True.', 'move_to_intruder': 'Action: Move towards the detected intruder. Always returns True.', 'check_area': 'Action: Check the area for any potential threats. Always returns True.', 'take_cover': 'Action: Take cover to avoid potential threats. Always returns True.', 'is_intruder_detected': 'Condition: Check if an intruder has been detected in the area. Returns True if an intruder is detected, False otherwise.', 'is_area_safe': 'Condition: Check if the area is safe with no potential threats. Returns True if the area is safe, False if there are potential threats present.', 'is_intruder_near': 'Condition: Check if the intruder is within a certain distance. Returns True if the intruder is within the specified distance, False otherwise.', 'is_in_cover': 'Condition: Check if the agent is currently in cover. Returns True if the agent is in cover, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Protect a designated area by monitoring for intruders and taking necessary actions
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>detect_intruder</Action><Selector><Sequence><Condition>is_intruder_detected</Condition><Action>move_to_intruder</Action></Sequence><Sequence><Condition>is_intruder_near</Condition><Action>take_cover</Action></Sequence></Selector></Sequence><Sequence><Action>check_area</Action><Condition>is_area_safe</Condition></Sequence></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'move_to_target': 'Action: Move the robot towards the designated target. Always returns True.', 'scan_for_targets': 'Action: Scan the area for any potential targets. Always returns True.', 'target_detected': 'Action: Signal target detection and pause. Always returns True.', 'is_target_found': 'Condition: Check if the target has been located in the current area. Returns True if the target is found, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Search for and approach a designated target in the environment
5.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Action>scan_for_targets</Action><Condition>is_target_found</Condition><Action>target_detected</Action></Sequence><Action>move_to_target</Action></Selector></Sequence></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'move_to_target_area': 'Action: Move towards the designated target area. Always returns True.', 'attack_target': 'Action: Attack the designated target. Always returns True.', 'search_for_target': 'Action: Use sensors to search for the target in the surrounding area. Always returns True.', 'is_target_in_range': 'Condition: Check if the target is within attacking range. Returns True if the target is within range, False otherwise.', 'is_target_detected': 'Condition: Check if the target has been detected in the area. Returns True if the target is detected, False otherwise.', 'is_target_alive': 'Condition: Check if the target is still alive. Returns True if the target is alive, False if the target has been eliminated.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Plan and execute a coordinated attack on a designated target in the environment
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_target_detected</Condition><Action>move_to_target_area</Action><Selector><Sequence><Condition>is_target_in_range</Condition><Action>attack_target</Action></Sequence><Action>search_for_target</Action></Selector></Sequence><Condition>is_target_alive</Condition></Selector></BehaviorTree>
###
4.// INSTRUCTIONS: Use only the following behaviors {'explore': 'Action: Randomly move around and explore the environment. Always returns True.', 'track_odor': 'Subtree node: Represents a behavior tree for tracking a specific odor.', 'follow_odor_trail': 'Action: Follow the odor trail until reaching the source. Always returns True.', 'return_to_nest': 'Action: Return to the nest if the odor trail is lost. Always returns True.', 'is_odor_detected': 'Condition: Check if the robot can detect the desired odor. Returns True if the odor is detected, False otherwise.', 'is_at_nest': 'Condition: Check if the robot is at the nest. Returns True if at the nest, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task).
4.// USER COMMAND: Explore the environment and track a specific odor. If the odor is detected, follow the trail until reaching the source. Otherwise, return to the nest.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>explore</Action></Sequence><Sequence><Condition>is_odor_detected</Condition><Action>follow_odor_trail</Action></Sequence><Sequence><Condition>is_nest_detected</Condition><Action>return_to_nest</Action></Sequence></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'move_forward': 'Action: Move the robot one step forward in the current direction. Always returns True.', 'avoid_enemy': "Action: Move away from detected enemy. Always returns True.", 'wait_for_backup': 'Condition: Check if backup has arrived. Returns True if backup is present, False otherwise.', 'backup_arrived': 'Action: Signal that backup has arrived. Always returns True.', 'engage_enemy': 'Action: Engage with detected enemy. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task).
5.// USER COMMAND: Move towards enemy territory, but always keep a safe distance. Wait for backup to arrive and signal when backup has arrived. Then engage with the enemy.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>move_forward</Action><Action>avoid_enemy</Action></Sequence><Sequence><Condition>wait_for_backup</Condition><Action>backup_arrived</Action><Action>engage_enemy</Action></Sequence></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'follow_leader': 'Action: Follow the designated leader robot. Always returns True.', 'coordinate_position': 'Action: Coordinate position with other robots in the swarm. Always returns True.', 'interact_with_env': 'Action: Interact with the environment to collect samples or information. Always returns True.', 'wait_for_signal': 'Condition: Check if the leader has given a signal. Returns True if a signal is received, False otherwise.', 'send_signal': 'Action: Send a signal to other robots in the swarm. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task).
6.// USER COMMAND: Assemble a swarm of robots to explore and coordinate with each other while collecting samples from different locations. Wait for the leader to give a signal before sending a signal to the swarm.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>follow_leader</Action></Sequence><Sequence><Condition>is_leader_detected</Condition><Action>coordinate_position</Action><Action>interact_with_env</Action></Sequence><Sequence><Condition>wait_for_signal</Condition><Action>send_signal</Action></Sequence></Selector></BehaviorTree>  
###
4.// INSTRUCTIONS: Use only the following behaviors {'traverse_maze': 'Action: Traverse through a maze using left-hand rule. Always returns True.', 'is_obstacle_detected': 'Condition: Check for obstacles in front. Returns True if an obstacle is detected, False otherwise.', 'turn_left': 'Action: Rotate agent 90 degrees to the left. Always returns True.', 'turn_right': 'Action: Rotate agent 90 degrees to the right. Always returns True.', 'move_forward': 'Action: Move agent forward. Always returns True.', 'task_completed': 'Action: Signal task completion by rotating agent 180 degrees. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Generate behavior tree for a robot to navigate through a maze and signal task completion when reaching the exit.
4.// OUTPUT:
<BehaviorTree><Sequence><Action>traverse_maze</Action><Selector><Sequence><Condition>is_obstacle_detected</Condition><Selector><Sequence><Condition>is_obstacle_detected</Condition><Condition>is_obstacle_detected</Condition></Sequence><Sequence><Action>turn_right</Action><Action>move_forward</Action></Sequence></Selector></Sequence><Action>task_completed</Action></Sequence></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'take_off': 'Action: Makes the drone take off. Always returns True.', 'hover': 'Action: Make the drone hover for 5 seconds. Always returns True.', 'land': 'Action: Makes the drone land. Always returns True.', 'scan_environment': 'Condition: Check for obstacles in the environment using sensors. Returns True if obstacles are detected, False otherwise.', 'avoid_obstacle': 'Action: Move drone away from detected obstacle. Always returns True.', 'move_towards_target': 'Action: Move towards the designated target. Always returns True.', 'capture_video': 'Action: Capture a video of the environment using an onboard camera. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Generate behavior tree for a drone to take off, hover for 5 seconds, capture a video, move towards a target while avoiding obstacles, and land.
5.// OUTPUT:
<BehaviorTree> <Sequence> <Action>take_off</Action> <Action>hover</Action> <Action>capture_video</Action> <Selector> <Sequence> <Condition>scan_environment</Condition> <Action>avoid_obstacle</Action> </Sequence> <Action>move_towards_target</Action> </Selector> <Action>land</Action> </Sequence> </BehaviorTree>
 
###
6.// INSTRUCTIONS: Use only the following behaviors {'drop_bait': 'Action: Drop a bait for predators to distract them. Always returns True.', 'scan_for_predators': 'Condition: Check for nearby predators using sensors. Returns True if predators are detected, False otherwise.', 'run_away': 'Action: Move away from the detected predator. Always returns True.', 'wait': 'Action: Wait for 10 seconds. Always returns True.', 'call_for_help': 'Action: Call for reinforcement by signaling other robots. Always returns True.', 'engage_predator': 'Action: Engage with the predator to protect the swarm. Always returns True.', 'send_alert': 'Action: Send an alert message to the user. Always returns True.', 'return_to_nest': 'Action: Return to the nest for safety. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Generate behavior tree for swarm robots to protect the nest by dropping bait for predators, scanning for nearby predators, and engaging with them if detected. If reinforcements are needed, wait for 10 seconds and then call for help while sending an alert message to the user. Finally, return to the nest for safety.
6.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Action>drop_bait</Action> <Selector> <Condition>scan_for_predators</Condition> <Action>run_away</Action> </Selector> <Action>engage_predator</Action> </Sequence> <Selector> <Sequence> <Action>wait</Action> <Action>return_to_nest</Action> </Sequence> <Sequence> <Action>call_for_help</Action> <Action>send_alert</Action> </Sequence> </Selector> </Selector> </Sequence> </BehaviorTree>
###
4.// INSTRUCTIONS: Use only the following behaviors {'detect_objects': "Action: Detect and identify objects within the robot's range. Always returns True.", 'follow_object': 'Action: Follow the detected object. Always returns True.', 'grab_object': "Action: Grab the object in front of the robot's gripper. Always returns True.", 'release_object': 'Action: Release the object held by the robot's gripper. Always returns True.', 'object_in_front': 'Condition: Checks if an object is currently in front of the robot. Returns True if an object is found, False otherwise.', 'object_in_gripper': 'Condition: Checks if an object is currently held by the robot's gripper. Returns True if an object is found, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Pick up the blue box, then follow it and release it at a designated location.
4.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>object_in_front</Condition><Action>grab_object</Action><Action>follow_object</Action></Sequence><Sequence><Action>release_object</Action><Action>task_completed</Action></Sequence></Selector></Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'detect_obstacles': 'Action: Scan the environment for obstacles. Always returns True.', 'avoid_obstacle': 'Action: Move away from detected obstacles. Always returns True.', 'check_collision': 'Action: Continuously check for potential collisions. Always returns True.', 'change_speed': 'Action: Change the robot's speed and direction. Always returns True.', 'too_close_to_obstacle': 'Condition: Checks if the robot is too close to an obstacle. Returns True if the robot is within a certain distance from an obstacle, False otherwise.', 'moving_towards_obstacle': 'Condition: Checks if the robot is moving towards an obstacle. Returns True if the robot's direction is heading towards an obstacle, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Avoid obstacles while maintaining a safe distance and adjusting speed if necessary
5.// OUTPUT:
<BehaviorTree><Sequence><Action>detect_obstacles</Action><Condition>too_close_to_obstacle</Condition><Action>change_speed</Action></Sequence><Sequence><Condition>moving_towards_obstacle</Condition><Action>avoid_obstacle</Action></Sequence><Action>check_collision</Action></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'detect_sound': 'Action: Listen for sounds in the environment. Always returns True.', 'find_source': 'Action: Move towards the identified sound source. Always returns True.', 'stop_moving': "Action: Stop the robot's movement. Always returns True.", 'is_source_found': 'Condition: Checks if the source of the sound has been found. Returns True if the source is found, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Search for the source of a specific sound and stop once it is found
6.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>is_source_found</Condition><Action>stop_moving</Action><Action>task_completed</Action></Sequence><Sequence><Action>detect_sound</Action><Action>find_source</Action></Sequence></Selector></Sequence></BehaviorTree>
###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_circle': 'Action: Form a circle at the center. Always returns True.', 'form_triangle': 'Action: Form a triangle at the center. Always returns True.', 'form_square': 'Action: Form a square at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_circle_formed': 'Condition: Check if a circle is formed. Returns True if the circle is formed with the center, False otherwise.', 'is_triangle_formed': 'Condition: Check if a triangle is formed. Returns True if the triangle is formed with the center, False otherwise.', 'is_square_formed': 'Condition: Check if a square is formed. Returns True if the square is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Form a square or triangle if an obstacle is detected, otherwise form a circle' Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_obstacle_detected</Condition><Selector><Action>form_square</Action><Action>form_triangle</Action></Selector></Sequence><Action>form_circle</Action></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'search_area': 'Action: Search the designated area for the target. Returns True once the target is found, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Search designated area and change color to green when target is found, otherwise wander' Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree><Sequence><Action>search_area</Action><Action>change_color_to_green</Action></Sequence><Action>wander</Action></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'find_nearest_obstacle': 'Action: Find the nearest obstacle and move towards it. Returns True once the obstacle is reached, False otherwise.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Find and reach the nearest obstacle, then continue wandering' Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree><Sequence><Action>find_nearest_obstacle</Action><Action>continue_movement_agent</Action></Sequence><Action>wander</Action></BehaviorTree> 
###
4.// INSTRUCTIONS: Use only the following behaviors {'move_to_target': "Action: Move towards a given target. Returns True after reaching target.", 'detect_enemy': "Condition: Scan the area for enemy presence. Returns True if an enemy is detected, False otherwise.", 'attack': "Action: Attack the detected enemy. Returns True after successfully attacking the enemy.", 'is_health_low': "Condition: Check if the robot's health is below 50%. Returns True if health is low, False otherwise.", 'heal': "Action: Use a health pack to replenish the robot's health. Returns True after healing.", 'team_up': "Action: Call for other robots to join and form a team. Returns True after forming a team.", 'team_defend': "Action: Defend against enemy attacks as a team. Returns True after successfully defending.", 'is_team_member_down': "Condition: Check if a team member is down. Returns True if a team member is down, False otherwise."}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Form a team, detect enemies, and defend together as a team.'
4.// OUTPUT:
<BehaviorTree> <Sequence> <Action>team_up</Action> <Selector> <Sequence> <Condition>detect_enemy</Condition> <Action>team_defend</Action> </Sequence> <Selector> <Condition>is_team_member_down</Condition> <Action>heal</Action> </Selector> </Sequence> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'pick_item': "Action: Pick up a nearby item and add it to the inventory. Always returns True.", 'drop_item': "Action: Drop a selected item from the inventory. Returns True after successfully dropping the item.", 'detect_food': "Condition: Check the nearby area for any available food. Returns True if food is detected, False otherwise.", 'eat': "Action: Consume the detected food. Returns True after successfully eating the food.", 'is_hungry': "Condition: Check if the robot's hunger level is low. Returns True if hunger level is low, False otherwise."}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Search for food, pick it up, and eat when hungry.'
5.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>is_hungry</Condition> <Selector> <Condition>detect_food</Condition> <Action>pick_item</Action> <Action>eat</Action> <Action>task_completed</Action> </Selector> </Sequence> <Action>drop_item</Action> </Selector> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'move_to_destination': "Action: Move towards a given destination. Returns True after reaching destination.", 'detect_object': "Condition: Scan the area for any objects. Returns True if an object is detected, False otherwise.", 'pick_up_object': "Action: Pick up the detected object. Returns True after successfully picking up the object.", 'deposit_object': "Action: Deposit the carried object at the designated location. Returns True after successfully depositing the object.", 'is_carrying_object': "Condition: Check if the robot is currently carrying an object. Returns True if an object is being carried, False otherwise.", 'is_destination_reached': "Condition: Check if the destination has been reached. Returns True if destination is reached, False otherwise."}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Pick up an object, move to the designated location, and deposit the object.'
6.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>detect_object</Condition> <Action>pick_up_object</Action> <Action>move_to_destination</Action> <Action>deposit_object</Action> <Action>task_completed</Action> </Sequence> <Selector> <Condition>is_carrying_object</Condition> <Action>move_to_destination</Action> </Selector> </Sequence> </BehaviorTree>                    
###
4.// INSTRUCTIONS: Use only the following behaviors {'clear_obstacle': 'Action: Remove obstacles from the path. Always returns True.', 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'find_target': 'Action: Search for a specified target. Always returns True.', 'grab_object': "Action: Grab the specified object. Always returns True.", 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_grabbed': 'Condition: Check if the target object is grabbed. Returns True if the target object is grabbed, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'find a red block, grab it, then continue moving.'
4.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Action>find_target: 'red block'</Action> <Condition>is_target_detected</Condition> <Action>grab_object: 'red block'</Action> <Condition>is_target_grabbed</Condition> </Sequence> <Sequence> <Condition>is_path_clear</Condition> <Action>clear_obstacle</Action> <Action>continue_movement_agent</Action> </Sequence> </Selector> </Sequence> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'counter': 'Function: Keep track of number of times a task is completed. Returns the current value of the counter.', 'count_reached': 'Condition: Check if the counter has reached a specified value. Returns True if the counter is equal to the specified value, False otherwise.', 'form_circle': 'Action: Form a circular shape with other agents. Always returns True.', 'is_agent_nearby': 'Condition: Check if any other agents are within a 5-unit radius. Returns True if any agents are within a 5-unit radius, False otherwise.', 'is_circle_formed': 'Condition: Check if a circle is formed with other agents. Returns True if a circle is formed with other agents, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'join_circle': 'Action: Join the existing circular formation. Always returns True.', 'move_forward': 'Action: Move forward in a straight line. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'form a circle with other agents, count how many times the task is completed, and then move forward'
5.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>is_circle_formed</Condition> <Action>form_circle</Action> <Action>counter</Action> <Condition>count_reached: 3</Condition> </Sequence> <Action>join_circle</Action> </Selector> <Sequence> <Condition>is_path_clear</Condition> <Action>move_forward</Action> </Sequence> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'change_color_to_blue': "Action: Change agent's color to blue. Always returns True.", 'change_color_to_red': "Action: Change agent's color to red. Always returns True.", 'change_speed_slow': "Action: Change agent's speed to slow. Always returns True.", 'change_speed_fast': "Action: Change agent's speed to fast. Always returns True.", 'move_backward': 'Action: Move backward in a straight line. Always returns True.', 'move_forward': 'Action: Move forward in a straight line. Always returns True.', 'rotate_left': 'Action: Rotate left by 90 degrees. Always returns True.', 'rotate_right': 'Action: Rotate right by 90 degrees. Always returns True.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'find and approach target, rotate right 90 degrees, then move forward'
6.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>is_target_detected</Condition> <Action>move_forward</Action> <Condition>is_target_reached</Condition> </Sequence> <Sequence> <Action>rotate_right</Action> <Action>move_forward</Action> </Sequence> </Selector> </Sequence> </BehaviorTree>
###
4.// INSTRUCTIONS: Use only the following behaviors {'change_speed_to_slow': 'Action: Change the robot's speed to slow. Always returns True.', 'change_speed_to_fast': 'Action: Change the robot's speed to fast. Always returns True.', 'is_on_route': 'Condition: Check if the robot is on its designated route. Returns True if the robot is on the route, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Change speed to slow if off route, otherwise change speed to fast'Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Sequence> <Condition>is_on_route</Condition> <Action>change_speed_to_fast</Action> </Sequence> <Sequence> <Action>change_speed_to_slow</Action> <Action>task_completed</Action> </Sequence> </Sequence> <Action>wander</Action> </Selector> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'communicate_with_team': 'Condition: Check if the robot has successfully communicated with its team. Returns True if successful, False otherwise.', 'search_for_resource': 'Action: Search the area for any available resources. Always returns True.', 'gather_resource': 'Action: Gather the resource found. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Generate behavior tree for a resource gathering robot to communicate with its team, search for resources, and gather themOutput only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree> <Sequence> <Condition>communicate_with_team</Condition> <Sequence> <Action>search_for_resource</Action> <Action>gather_resource</Action> </Sequence> </Sequence> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'move_towards_target': 'Action: Move towards the designated target. Always returns True.', 'wait_for_signal': 'Action: Wait for a signal from the team leader. Always returns True.', 'arrive_at_target': 'Condition: Check if the robot has arrived at the designated target. Returns True if the robot has arrived, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Generate behavior tree for a team of robots to move towards a target and arrive simultaneously, while waiting for signal from the team leader.Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree> <Sequence> <Condition>arrive_at_target</Condition> <Action>task_completed</Action> </Sequence> <Selector> <Sequence> <Action>move_towards_target</Action> <Action>wait_for_signal</Action> <Action>task_completed</Action> </Sequence> <Action>wait</Action> </Selector> </BehaviorTree> 
###
4.// INSTRUCTIONS: Use only the following behaviors {'move_toward_beacon': 'Action: Move the robot towards the closest beacon using location data. Returns True when the robot reaches the beacon', 'take_battery_reading': 'Action: Take a reading of the robot's battery level for later use. Returns True when reading is complete.', 'is_battery_low': 'Condition: Check if the battery level is below a specific threshold. Returns True if the battery is low, False otherwise.', 'recharge_battery': 'Subtree node: Represents a behavior tree for finding and charging at a charging station.', 'is_charging_complete': 'Condition: Check if the robot has completed charging at the station. Returns True if charging is complete, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Continuously move towards the closest beacon. If battery level drops below a threshold, find a charging station and recharge.
4.// OUTPUT:
<BehaviorTree><Sequence><Action>take_battery_reading</Action><Selector><Sequence><Condition>is_battery_low</Condition><Action>recharge_battery</Action><Selector><Condition>is_charging_complete</Condition><Action>move_toward_beacon</Action></Selector></Sequence></Selector></Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'move_to_point_of_interest': 'Action: Move the robot to a designated point of interest. Always returns True.', 'scan_for_targets': 'Action: Scan the area for any potential targets, such as enemies or desired objects. Always returns True.', 'attack_target': 'Action: Attack the designated target using appropriate methods. Always returns True.', 'collect_item': 'Action: Collect the desired object from the environment. Always returns True.', 'is_enemy_detected': 'Condition: Checks if an enemy has been detected in the current area. Returns True if an enemy is detected, False otherwise.', 'is_item_collected': 'Condition: Checks if the desired object has been collected. Returns True if the object is collected, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Move to a designated point, scan for enemies or desired objects, and take appropriate action.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>move_to_point_of_interest</Action><Action>scan_for_targets</Action><Selector><Sequence><Condition>is_enemy_detected</Condition><Action>attack_target</Action></Sequence><Sequence><Condition>is_item_collected</Condition><Action>collect_item</Action></Sequence></Selector></Sequence></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'find_optimal_route': 'Action: Use path planning algorithms to find the most optimal route to a goal location. Returns True when the route is determined.', 'move_to_next_point': 'Action: Move the robot along the planned route. Returns True when the next point is reached.', 'inspect_environment': 'Action: Detect and analyze the environment at each point. Returns True when inspection is complete.', 'is_inspection_complete': 'Condition: Check if the entire route has been inspected. Returns True if inspection is complete, False otherwise.', 'is_target_reached': 'Condition: Check if the goal location has been reached. Returns True if the robot has reached the goal, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Use path planning algorithms to find an optimal route, move along the route while inspecting the environment, and stop when reaching the goal location.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>find_optimal_route</Action><Selector><Sequence><Condition>is_target_reached</Condition><Action>inspect_environment</Action></Sequence><Action>wait</Action></Selector></Sequence><Sequence><Condition>is_inspection_complete</Condition><Action>move_to_next_point</Action></Sequence></Selector></BehaviorTree>###
4.// INSTRUCTIONS: Use only the following behaviors {'detect_target': 'Condition: Check if target is within 10 units. Returns True if the target is within 10 units of distance, False otherwise.', 'move_towards_target': 'Action: Move towards the target. Always returns True.', 'follow_target_path': 'Action: Follow a predefined path towards the target. Always returns True.', 'wait_for_target': 'Action: Wait for target to be in range. Always returns True.', 'attack_target': 'Action: Attack the target. Always returns True.', 'escape': 'Action: Escape from target and move towards a safe location. Always returns True.', 'is_target_reached': 'Condition: Check if the target is within 5 units. Returns True if the target is within 5 units of distance, False otherwise.', 'is_target_lost': 'Condition: Check if the target is lost. Returns True if the target is no longer in range, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Create a behavior tree to attack and escape from the target, waiting for the target to be in range and following a predefined path to reach the target.
4.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Action>detect_target</Action> <Action>wait_for_target</Action> <Action>follow_target_path</Action> <Action>move_towards_target</Action> </Sequence> <Sequence> <Condition>is_target_lost</Condition> <Action>escape</Action> </Sequence> <Action>attack_target</Action> </Selector> <Action>task_completed</Action> </Sequence> </BehaviorTree>
###
5.// INSTRUCTIONS: Use only the following behaviors {'detect_food': 'Condition: Check if food is within 5 units. Returns True if food is within 5 units of distance, False otherwise.', 'move_towards_food': 'Action: Move towards food. Always returns True.', 'pick_up_food': 'Action: Pick up food. Always returns True.', 'eat_food': 'Action: Eat food to restore energy. Always returns True.', 'is_food_in_nest': 'Condition: Check if food is brought back to nest. Returns True if food is in the nest, False otherwise.', 'move_back_to_nest': 'Action: Move back to nest with food. Always returns True.', 'deposit_food': 'Action: Deposit food in the nest. Always returns True.', 'move_to_next_food_source': 'Action: Move to the next food source. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Create a behavior tree to gather and deposit food at the nest, ensuring the food is within range before picking it up.
5.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Action>is_food_in_nest</Action> <Action>move_to_next_food_source</Action> </Sequence> <Sequence> <Condition>detect_food</Condition> <Action>pick_up_food</Action> <Action>move_towards_food</Action> <Action>deposit_food</Action> <Action>move_back_to_nest</Action> </Sequence> <Action>eat_food</Action> </Selector> </BehaviorTree>
###
6.// INSTRUCTIONS: Use only the following behaviors {'detect_obstacle': 'Condition: Check for obstacles within 10 units ahead. Returns True if obstacles are detected, False otherwise.', 'turn_left': 'Action: Turn left by 45 degrees. Always returns True.', 'turn_right': 'Action: Turn right by 45 degrees. Always returns True.', 'avoid_obstacle': 'Action: Perform a series of left and right turns to avoid the obstacle. Always returns True.', 'detect_target': 'Condition: Check if target is within 8 units. Returns True if the target is within 8 units of distance, False otherwise.', 'move_towards_target': 'Action: Move towards the target. Always returns True.', 'is_target_reached': 'Condition: Check if the target is within 3 units. Returns True if the target is within 3 units of distance, False otherwise.', 'attack_target': 'Action: Attack the target. Always returns True.', 'signal_success': 'Action: Signal the successful completion of the task by turning in a full circle. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Create a behavior tree to avoid obstacles and attack the target, ensuring the target is within range before attacking and signaling success after attacking.
6.// OUTPUT:
<BehaviorTree> <Sequence> <Condition>detect_obstacle</Condition> <Selector> <Sequence> <Action>turn_left</Action> <Action>avoid_obstacle</Action> <Action>turn_right</Action> </Sequence> </Selector> <Sequence> <Action>detect_target</Action> <Action>move_towards_target</Action> <Condition>is_target_reached</Condition> <Action>attack_target</Action> <Action>signal_success</Action> </Sequence> </Sequence> </BehaviorTree> 
###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_blue': "Action: Change agent's color to blue. Always returns True.", 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_in_blue_region': 'Condition: Check if agent is in a blue region. Returns True if agent is in a blue region, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Move towards blue regions, change color to green when reached a blue region, and return to the nest.' Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>is_in_blue_region</Condition><Action>change_color_to_green</Action><Action>agent_movement_freeze</Action><Action>task_completed</Action></Sequence><Action>change_color_to_blue</Action></Selector><Sequence><Condition>is_agent_in_nest</Condition><Action>wander</Action></Sequence></Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_yellow': "Action: Change agent's color to yellow. Always returns True.", 'fly': 'Action: Fly to a designated location. Always returns True.', 'is_back_in_nest': 'Condition: Check if the agent has returned to the nest. Returns True if the agent is in the nest, False otherwise.', 'is_food_detected': 'Condition: Check if food is detected in the area. Returns True if food is detected, False otherwise.', 'is_landing_site': 'Condition: Check if agent has reached designated landing site. Returns True if the agent has reached the landing site, False otherwise.', 'task_completed': 'Action: Signal task completion by changing colors. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Fly to the food source, change color to yellow when food is found, and then return to the designated landing site.' Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>is_food_detected</Condition><Action>change_color_to_yellow</Action><Action>fly</Action><Action>task_completed</Action></Sequence><Action>is_back_in_nest</Action></Selector><Sequence><Condition>is_landing_site</Condition><Action>change_color_to_green</Action></Sequence></Sequence></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'move_to_location': 'Action: Move to a designated location. Always returns True.', 'follow_path': 'Action: Follow a designated path. Always returns True.', 'is_food_detected': 'Condition: Check if food is detected in the area. Returns True if food is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'must_return_to_nest': 'Condition: Check if the agent must return to the nest. Returns True if the agent has completed its task and must return to the nest, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Move to a designated location, check for food and if found, return to the nest.'Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Action>follow_path</Action><Action>move_to_location</Action><Condition>is_food_detected</Condition><Action>must_return_to_nest</Action></Sequence><Action>agent_movement_freeze</Action></Selector><Condition>task_completed</Condition></Sequence></BehaviorTree>
###
4.// INSTRUCTIONS: Use only the following behaviors {'collect_resource': 'Action: Collect nearby resources and add them to the robot's inventory. Always returns True.', 'deposit_resource': 'Action: Deposit the collected resources at the designated location. Always returns True.', 'move_towards_resource': 'Action: Move towards the nearest uncollected resource. Always returns True.', 'is_resource_available': 'Condition: Check if there are any uncollected resources nearby. Returns True if there are resources available, False otherwise.', 'is_inventory_full': 'Condition: Check if the robot's inventory is full. Returns True if the inventory is full, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Generate behavior tree for a robot to collect and deposit resources to a specified location until the inventory is full
4.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>is_inventory_full</Condition> <Action>deposit_resource</Action> </Sequence> <Selector> <Sequence> <Condition>is_resource_available</Condition> <Action>move_towards_resource</Action> <Action>collect_resource</Action> </Sequence> </Selector> </Selector> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'follow_leader': 'Action: Follow the designated leader robot. Always returns True.', 'move_to_specific_location': 'Action: Move to a pre-defined location within the environment. Always returns True.', 'identify_leader': 'Action: Identify and designate the leader robot. Always returns True.', 'is_leader_found': 'Condition: Check if the designated leader robot is found in the swarm. Returns True if the leader is found, False otherwise.', 'is_at_specific_location': 'Condition: Check if the robot has reached the specified location. Returns True if the robot is at the location, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Generate behavior tree for a robot to follow and support the designated leader robot
5.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>is_leader_found</Condition> <Action>follow_leader</Action> </Sequence> <Action>identify_leader</Action> </Selector> <Sequence> <Condition>is_at_specific_location</Condition> <Action>move_to_specific_location</Action> </Sequence> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'communicate_with_neighbors': 'Action: Send messages and information to neighboring robots. Always returns True.', 'coordinate_with_neighbors': 'Action: Coordinate actions and decisions with neighboring robots. Always returns True.', 'detect_collaborators': 'Condition: Check if there are any potential collaborators nearby. Returns True if there are potential collaborators, False otherwise.', 'is_taking_on_important_task': 'Condition: Check if the robot is currently taking on an important task or role within the swarm. Returns True if the robot is taking on an important task, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Generate behavior tree for a robot to collaborate and communicate with neighboring robots while taking on important tasks
6.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>is_taking_on_important_task</Condition> <Selector> <Sequence> <Condition>detect_collaborators</Condition> <Action>communicate_with_neighbors</Action> </Sequence> <Action>coordinate_with_neighbors</Action> </Selector> </Sequence> <Action>wander</Action> </BehaviorTree>
###
4.// INSTRUCTIONS: Use only the following behaviors {'follow_leader': 'Action: Follow the designated leader by maintaining a specific distance from them. Returns True once the leader is reached.', 'is_leader_reached': 'Condition: Check if the designated leader has been reached. Returns True if the leader is within a certain distance, False otherwise.', 'is_path_blocked': 'Condition: Check if the path to the leader is blocked. Returns True if the path is blocked, False otherwise.', 'move_forward': 'Action: Move forward in a set direction. Returns True when movement is completed.', 'wait': 'Action: Pause current actions and wait for further instructions. Returns True after specified wait time.', 'scan_environment': 'Action: Scan the environment for potential obstacles or targets. Returns True once the environment has been scanned.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Move towards designated leader, avoiding any obstacles along the way. If path is blocked, wait for 10 seconds before attempting to move again.
4.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_leader_reached</Condition><Action>follow_leader</Action></Sequence><Sequence><Condition>is_path_blocked</Condition><Sequence><Action>wait</Action><Action>scan_environment</Action></Sequence></Sequence><Action>move_forward</Action></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'is_energy_low': "Condition: Check if the agent's energy level is below a certain threshold. Returns True if energy is low, False otherwise.", 'is_energy_full': "Condition: Check if the agent's energy level is at maximum. Returns True if energy is full, False otherwise.", 'find_food_source': 'Subtree node: Represents a behavior tree for finding food sources.', 'restore_energy': 'Action: Makes the agent use a food source to restore energy. Always returns True.', 'search_for_food': 'Action: Search the environment for potential food sources. Returns True if a potential source is found, False otherwise.', 'on_low_energy': "Event: Triggers when the agent's energy falls below a threshold. Returns True if energy is low, False otherwise."}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Search for food sources and consume them to restore energy. If energy falls below a certain threshold, repeat the search process until energy is full.
5.// OUTPUT:
<BehaviorTree><Sequence><Action>find_food_source</Action><Sequence><Trigger>on_low_energy</Trigger><Sequence><Action>find_food_source</Action><Action>restore_energy</Action></Sequence></Sequence></Sequence></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'gather_resource': 'Action: Gather the nearest resource and bring it back to the designated location. Returns True once the resource is successfully gathered.', 'return_to_nest': 'Action: Return to the designated nest location. Returns True once the nest is reached.', 'is_resource_nearby': "Condition: Check if a resource is within a set distance. Returns True if a resource is found within the specified distance, False otherwise.", 'has_resource': 'Condition: Check if the agent is currently carrying a resource. Returns True if the agent is carrying a resource, False otherwise.', 'is_at_nest': 'Condition: Check if the agent is currently at the designated nest location. Returns True if the agent is at the nest, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Search for and gather resources, and return them to the nest location. Repeat this process until a certain amount of resources have been gathered.
6.// OUTPUT:
<BehaviorTree><Sequence><Action>gather_resource</Action><Sequence><Action>return_to_nest</Action></Sequence></Sequence><Action>gather_resource</Action></BehaviorTree>
###
4.// INSTRUCTIONS: Use only the following behaviors {'fire': 'Action: Fire at designated target. Always returns True.', 'approach_target': 'Action: Move towards designated target. Always returns True.', 'is_target_visible': 'Condition: Check if target is within line of sight. Returns True if target is visible, False otherwise.', 'is_ammo_available': 'Condition: Check if there is enough ammo to fire. Returns True if ammo is available, False otherwise.', 'reload': 'Action: Reload weapon. Always returns True.', 'check_surroundings': 'Action: Scan surroundings for enemies. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Create a behavior tree to reload weapon and fire at target if visible, otherwise approach the target.
4.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>is_target_visible</Condition> <Sequence> <Condition>is_ammo_available</Condition> <Action>reload</Action> </Sequence> <Action>fire</Action> </Sequence> <Action>approach_target</Action> </Selector> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'gather': 'Action: Gather resources. Always returns True.', 'build': 'Action: Build structure. Always returns True.', 'is_resource_available': 'Condition: Check if there are resources available nearby. Returns True if resources are available, False otherwise.', 'is_structure_complete': 'Condition: Check if structure is complete. Returns True if structure is complete, False otherwise.', 'move_to_resource': 'Action: Move towards nearest resource. Always returns True.', 'move_to_structure': 'Action: Move towards designated structure. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Create a behavior tree to build a structure by gathering resources and moving them to the designated structure.
5.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Action>gather</Action> <Condition>is_resource_available</Condition> <Action>move_to_structure</Action> <Condition>is_structure_complete</Condition> <Action>build</Action> </Sequence> </Selector> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'charge': 'Action: Charge towards designated target. Always returns True.', 'seek_cover': 'Action: Seek cover from enemy fire. Always returns True.', 'shoot': 'Action: Shoot at enemy. Always returns True.', 'check_ammo': 'Condition: Check if there is enough ammo. Returns True if ammo is available, False otherwise.', 'is_enemy_visible': 'Condition: Check if enemy is within line of sight. Returns True if enemy is visible, False otherwise.', 'is_cover_available': 'Condition: Check if there is cover nearby. Returns True if cover is available, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Create a behavior tree to charge towards enemy while seeking cover and shooting when in range.
6.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>is_enemy_visible</Condition> <Sequence> <Condition>check_ammo</Condition> <Action>shoot</Action> </Sequence> <Action>charge</Action> </Sequence> <Action>seek_cover</Action> <Condition>is_cover_available</Condition> </Selector> </BehaviorTree>
###
4.// INSTRUCTIONS: Use only the following behaviors {'send_signal': 'Action: Sends a signal to nearby agents. Always returns True.', 'receive_signal': 'Action: Receives a signal from another agent. Always returns True.', 'identify_leader': 'Action: Identifies the leader of the swarm. Always returns True.', 'follow_leader': 'Action: Follows the leader of the swarm. Always returns True.', 'prepare_for_attack': 'Action: Prepares the swarm for an attack. Always returns True.', 'wait_for_command': 'Action: Waits for a command from the leader. Always returns True.', 'is_leader_present': 'Condition: Checks if the leader is present in the swarm. Returns True if the leader is present, False otherwise.', 'is_attacking': 'Condition: Checks if the swarm is currently attacking. Returns True if the swarm is attacking, False otherwise.', 'is_defending': 'Condtion: Checks if the swarm is currently defending. Returns True if the swarm is defending, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Create a swarm behavior tree for a mission to attack the enemy base. Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree><Sequence><Action>identify_leader</Action><Selector><Sequence><Condition>is_leader_present</Condition><Sequence><Action>prepare_for_attack</Action><Action>send_signal</Action></Sequence></Sequence><Sequence><Condition>is_defending</Condition><Action>receive_signal</Action></Sequence><Action>wait_for_command</Action><Action>follow_leader</Action></Selector></Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'move_to_target': 'Subtree node: Represents a behavior tree for moving towards a specific target.', 'check_distance_to_target': 'Condition: Checks the distance to a specific target. Returns True if distance is within the specified range, False otherwise.', 'avoid_collision': 'Action: Avoids colliding with other swarm agents. Always returns True.', 'form_circle': 'Action: Forms a circle with other swarm agents. Always returns True.', 'is_circle_formed': 'Condition: Checks if a circle is formed with the swarm agents. Returns True if a circle is formed, False otherwise.', 'is_target_reached': 'Condition: Checks if the target has been reached. Returns True if the target is within 5 units, False otherwise.', 'is_swarm_complete': 'Condition: Checks if all swarm agents have reached the target. Returns True if all agents have reached the target, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Make the swarm agents move towards the target and form a circle around it once they reach it. Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>move_to_target</Action><Sequence><Condition>check_distance_to_target</Condition><Action>form_circle</Action></Sequence></Sequence><Sequence><Condition>is_target_reached</Condition><Action>avoid_collision</Action></Sequence><Sequence><Condition>is_swarm_complete</Condition><Action>form_circle</Action></Sequence></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'sense_barrier': 'Condition: Checks for a physical barrier in front. Returns True if a barrier is detected, False otherwise.', 'sense_enemy': 'Subtree node: Represents a behavior tree for detecting and engaging an enemy.', 'collect_resources': 'Action: Collects nearby resources. Always returns True.', 'navigate_to_resource': 'Action: Navigates to the closest available resource. Always returns True.', 'deliver_resources': 'Action: Delivers collected resources to the specified location. Always returns True.', 'is_resource_delivered': 'Condition: Checks if the resources have been delivered. Returns True if resources have been delivered, False otherwise.', 'is_resource_full': 'Condition: Checks if the agent's resource capacity is full. Returns True if resource capacity is full, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Set up a resource collection and delivery system for the swarm agents. Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>sense_barrier</Action><Sequence><Condition>sense_enemy</Condition><Sequence><Action>collect_resources</Action><Action>is_resource_full</Action></Sequence><Action>deliver_resources</Action><Condition>is_resource_delivered</Condition></Sequence></Selector></BehaviorTree><BehaviorTree><Sequence><Action>get_enemy_threat</Action><Selector><Condition>less_than_resource_urgency</Condition><Action>attack</Action><Action>explore</Action></Sequence></BehaviorTree>

###
4.// INSTRUCTIONS: Use only the following behaviors {'calculate_distance_to_target': 'Function: Calculate the exact distance in meters to the designated target location. Returns a float value.', 'calculate_bearing_to_target': 'Function: Calculate the orientation or bearing angle towards the designated target location. Returns a float value.', 'track_target': 'Condition: Check if the robot is on track and headed towards the designated target location. Returns True if the robot is on track, False otherwise.', 'arrived_at_target': 'Condition: Check if the robot has arrived at the designated target location. Returns True if the robot has arrived, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Utilize distance and bearing calculations to guide the robot to a specified target location and declare once the robot has arrived.
4.// OUTPUT:
<BehaviorTree><Sequence><Action>calculate_distance_to_target</Action><Action>calculate_bearing_to_target</Action><Selector><Sequence><Condition>track_target</Condition><Sequence><Action>move_to_next_waypoint</Action><Action>track_target</Action></Sequence></Sequence><Condition>arrived_at_target</Condition></Selector></Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'detect_intruders': 'Action: Use sensors to identify and track any intruders in the vicinity. Always returns True.', 'surround_intruder': 'Action: Surround the intruder from all sides to isolate and contain them. Always returns True.', 'wait_for_backup': 'Condition: Check if backup has arrived to assist with containing the intruder. Returns True if backup is present, False otherwise.', 'move_to_center': 'Action: Move to the center of the surrounding formation. Always returns True.', 'halt_intruder': 'Action: Hold the intruder in place using physical barriers. Always returns True.', 'intruder_captured': 'Condition: Check if the intruder has been successfully captured and detained. Returns True if the intruder has been captured, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Capture and contain an intruder by surrounding them with coordinated movements and waiting for backup if needed.
5.// OUTPUT:
<BehaviorTree><Sequence><Action>detect_intruders</Action><Selector><Condition>intruder_captured</Condition><Sequence><Action>surround_intruder</Action><Selector><Condition>wait_for_backup</Condition><Sequence><Action>move_to_center</Action><Action>halt_intruder</Action></Sequence></Selector></Sequence></Selector></Sequence></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'is_low_battery': 'Condition: Check if the robot's battery level is below a threshold. Returns True if the battery is low, False otherwise.', 'return_to_base': 'Action: Navigate back to the home base to recharge the battery. Always returns True.', 'gather_resource': 'Action: Collect resources from the surrounding environment. Always returns True.', 'is_resource_full': 'Condition: Check if the robot's resource storage is full. Returns True if the storage is full, False otherwise.', 'unload_resource': 'Action: Unload resources at the designated drop-off point. Always returns True.', 'is_resource_needed': 'Condition: Check if there is a shortage of resources at the home base. Returns True if resources are needed, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Gather and transport resources back to the home base, and only return if the home base needs additional resources.
6.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_low_battery</Condition><Selector><Sequence><Action>return_to_base</Action><Selector><Condition>is_resource_needed</Condition><Sequence><Action>gather_resource</Action><Condition>is_resource_full</Condition><Action>unload_resource</Action></Sequence><Action>wait_for_resource_need</Action></Selector></Sequence></Selector></Sequence></BehaviorTree>
###
4.// INSTRUCTIONS: Use only the following behaviors {'identify_target': "Action: Identify the target object by scanning the environment and using object recognition. Returns True if the target is identified, False otherwise.", 'navigate_to_target': 'Action: Use path planning algorithms to navigate towards the identified target. Returns True once reached the target location.', 'scan_surroundings': 'Action: Scan the surrounding environment for potential obstacles and targets. Returns True once scanning is complete.', 'is_path_obstructed': 'Condition: Check if the planned path towards the target is obstructed. Returns True if the path is obstructed, False if it is clear.', 'is_target_visible': 'Condition: Check if the target object is currently visible in the robot\'s current line of sight. Returns True if the target is visible, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (insufficient behaviors)
4.// USER COMMAND: Generate behavior tree for a robot to track and follow a target object.
4.// OUTPUT:
Sorry, I can't do the task.

###
5.// INSTRUCTIONS: Use only the following behaviors {'search_area': "Action: Search a designated area for a specific target object. Returns True once the object is found or the area is fully searched.", 'return_to_base': 'Action: Return to the designated base location for recharge or further instructions. Returns True once reached the base location.', 'gather_information': 'Action: Gather information from the environment using sensors and data collection algorithms. Returns True once information is collected.', 'detect_anomaly': 'Condition: Check if an anomaly is detected in the environment. Returns True if an anomaly is detected, False otherwise.', 'is_information_gathered': 'Condition: Check if enough information has been gathered about the environment. Returns True if enough information has been gathered, False otherwise.', 'is_target_found': 'Condition: Check if the target object has been found. Returns True if the target is found, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Generate behavior tree for a group of swarm robots to search for a missing object in a large area.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>gather_information</Action><Sequence><Condition>is_information_gathered</Condition><Selector><Sequence><Condition>detect_anomaly</Condition><Action>search_area</Action></Sequence><Action>return_to_base</Action></Selector></Sequence></Sequence><Condition>is_target_found</Condition></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'climb_tree': 'Action: Use mechanisms to climb vertical structures if within range. Returns True once successfully climbed.', 'search_for_food': 'Action: Search the surrounding environment for sources of food. Returns True once food source is located.', 'avoid_predator': "Action: Activate evasion mechanisms and avoid contact with known predators. Returns True once predator is out of range or evaded.", 'gather_nectar': 'Action: Use specialized tools to gather and store nectar from flowers. Returns True once enough nectar is collected.', 'return_to_hive': 'Action: Return to the designated hive location for depositing nectar or further instructions. Returns True once reached the hive location.', 'is_nectar_collected': 'Condition: Check if enough nectar has been gathered. Returns True if enough nectar is collected, False otherwise.', 'is_hive_reached': 'Condition: Check if the designated hive location has been reached. Returns True if the hive is reached, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Generate behavior tree for a group of swarm robots to forage for food and nectar in an unknown environment.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>search_for_food</Action><Sequence><Condition>is_nectar_collected</Condition><Selector><Sequence><Condition>is_hive_reached</Condition><Action>climb_tree</Action></Sequence><Action>return_to_hive</Action></Selector></Sequence></Sequence><Condition>is_target_found</Condition></Selector></BehaviorTree>
###
4.// INSTRUCTIONS: Use only the following behaviors {'scan_area': 'Subtree node: Scans the area for targets and updates the agent's target list.', 'choose_target': 'Action: Chooses a target from the list of possible targets. Always returns True.', 'aim_at_target': 'Action: Aims the agent's weapon at the selected target. Always returns True.', 'is_weapon_ready': 'Condition: Checks if the agent's weapon is ready to fire. Returns True if the weapon is ready, False otherwise.', 'is_target_alive': 'Condition: Checks if the selected target is alive. Returns True if the target is alive, False otherwise.', 'fire_weapon': 'Action: Fires the agent's weapon at the selected target. Always returns True.', 'target_eliminated': 'Event: Triggers when the selected target is eliminated. Returns True.', 'move_to_target': 'Action: Moves the agent towards the selected target. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Scan the area and choose a target. If the target is alive, aim and fire. Otherwise, move towards the target.
4.//OUTPUT:
<BehaviorTree><Sequence><Action>scan_area</Action><Action>choose_target</Action><Trigger>is_target_alive</Trigger><Sequence><Action>aim_at_target</Trigger><Condition>is_weapon_ready</Condition><Action>fire_weapon</Action></Sequence><Action>move_to_target</Action><Trigger>target_eliminated</Trigger></Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'dance': 'Action: Make the agent perform a random dance routine. Always returns True.', 'cheer': 'Action: Make the agent cheer for its teammates. Always returns True.', 'get_ball': 'Subtree node: Represents a behavior tree for getting the ball in a game.', 'is_ball_nearby': 'Condition: Checks if the ball is within a specific distance. Returns True if the ball is nearby, False otherwise.', 'is_teammate_nearby': 'Condition: Checks if a teammate is within a specific distance. Returns True if a teammate is nearby, False otherwise.', 'pass_ball': 'Action: Passes the ball to a nearby teammate. Always returns True.', 'score_goal': 'Action: Attempts to score a goal with the ball. Returns True if a goal is scored, False otherwise.', 'is_game_started': 'Condition: Checks if the game has started. Returns True if the game has started, False otherwise.', 'is_opponent_nearby': 'Condition: Checks if an opponent is within a specific distance. Returns True if an opponent is nearby, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: If the game has started, get the ball and pass it to a nearby teammate. If there are no nearby teammates, score a goal. If an opponent is nearby, cheer for teammates.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_game_started</Condition><Action>get_ball</Action><Trigger>is_teammate_nearby</Trigger><Action>pass_ball</Action></Sequence><Sequence><Condition>is_game_started</Condition><Action>get_ball</Action><Trigger>is_teammate_nearby</Trigger><Condition>is_opponent_nearby</Condition><Action>cheer</Action></Sequence><Sequence><Condition>is_game_started</Condition><Action>get_ball</Action><Trigger>is_teammate_nearby</Trigger><Action>score_goal</Action></Sequence></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'search_and_destroy': 'Subtree node: Represents a behavior tree for searching and destroying enemy bases.', 'attack_enemy': 'Action: Attacks the closest enemy base. Returns True if the base is destroyed, False otherwise.', 'defend_self': 'Action: Defends the agent against incoming attacks. Always returns True.', 'is_enemy_nearby': 'Condition: Checks if an enemy base is within a specific distance. Returns True if an enemy base is nearby, False otherwise.', 'is_attacked': 'Condition: Checks if the agent is currently under attack. Returns True if the agent is being attacked, False otherwise.', 'move_to_base': 'Action: Moves the agent towards the designated enemy base. Always returns True.', 'is_base_destroyed': 'Condition: Checks if the designated enemy base has been destroyed. Returns True if the base is destroyed, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Search and destroy the nearest enemy base. If under attack, defend self until the base is destroyed.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_enemy_nearby</Condition><SubTree>search_and_destroy</SubTree><Trigger>is_attacked</Trigger><Action>defend_self</Action></Sequence><Condition>is_base_destroyed</Condition><Action>move_to_base</Action><Action>attack_enemy</Action></Selector></BehaviorTree> 
###
4.// INSTRUCTIONS: Use only the following behaviors {'move_forward': 'Action: Move the agent in the current direction. Always returns True.', 'avoid_object': 'Action: Move the agent around detected obstacles. Always returns True.', 'sense_obstacle': 'Condition: Detect obstacles in the surrounding environment. Returns True if an obstacle is detected, False otherwise.', 'sense_target': 'Condition: Detect the target in the surrounding environment. Returns True if the target is detected, False otherwise.', 'reach_target': 'Action: Move the agent towards the target. Always returns True.', 'stop_movement': 'Action: Stop the agent movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Move towards target while avoiding obstacles until target is reached.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>sense_target</Condition><Action>reach_target</Action></Sequence><Sequence><Condition>sense_obstacle</Condition><Action>avoid_object</Action></Sequence><Action>move_forward</Action><Action>stop_movement</Action></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'move_forward': 'Action: Move the robot in the current direction. Always returns True.', 'turn_counterclockwise': 'Action: Turn the robot 90 degrees counterclockwise. Always returns True.', 'turn_clockwise': 'Action: Turn the robot 90 degrees clockwise. Always returns True.', 'update_map': "Action: Update the robot's internal map of the environment based on its current location and sensor readings. Always returns True.", 'is_path_blocked': 'Condition: Check if the path in the current direction is blocked or impassable. Returns True if the path is blocked, False otherwise.', 'is_area_explored': 'Condition: Check if the entire area has been explored. Returns True if the area is fully explored, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Generate behavior tree for a robot to explore and map an unknown environment, turning clockwise if the path is blocked and stopping once the entire area is explored.
5.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_area_explored</Condition><Sequence><Condition>is_path_blocked</Condition><Selector><Action>turn_counterclockwise</Action><Action>turn_clockwise</Action></Selector></Sequence><Action>move_forward</Action><Action>update_map</Action></Sequence></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'move_forward': 'Action: Move the agent one step forward in the current direction. Always returns True.', 'turn_left': 'Action: Turn the agent 90 degrees to the left. Always returns True.', 'turn_right': 'Action: Turn the agent 90 degrees to the right. Always returns True.', 'is_target_reached': 'Condition: Check if target is within 10 units. Returns True if the target is within 10 units of distance, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'pick_up_object': 'Action: Pick up the object in front of the agent. Always returns True.', 'drop_object': 'Action: Drop the object currently held by the agent. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Collect an object while avoiding obstacles and dropping previously held objects if necessary.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_target_reached</Condition><Action>pick_up_object</Action></Sequence><Sequence><Condition>is_obstacle_detected</Condition><Selector><Action>turn_left</Action><Action>turn_right</Action></Selector></Sequence><Action>move_forward</Action><Action>drop_object</Action></Selector></BehaviorTree> 
###
4.// INSTRUCTIONS: Use only the following behaviors {'go_to_target': 'Action: Move towards the specified target location. Returns True when target is reached.', 'pick_up_object': 'Action: Pick up the specified object. Returns True when object is successfully picked up.', 'drop_object': 'Action: Drop the currently held object. Returns True when object is successfully dropped.', 'is_object_nearby': 'Condition: Checks if an object is within a specified distance. Returns True if an object is nearby, False otherwise.', 'is_target_within_reach': 'Condition: Checks if the target is within reach of the robot. Returns True if target is within reach, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Retrieve the red key from the shelf and bring it to the locked door to unlock it.
4.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Action>go_to_target (shelf)</Action><Condition>is_object_nearby (red key)</Condition><Action>pick_up_object (red key)</Action><Action>go_to_target (locked door)</Action><Condition>is_target_within_reach (locked door)</Condition><Action>drop_object (red key)</Action></Sequence><Action>pick_up_object (red key)</Action><Action>find_another_solution (red key is not available)</Action></Selector></Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'move_to_nearest_enemy': 'Action: Move towards the nearest enemy. Returns True when enemy is reached.', 'attack': 'Action: Attack the nearest enemy. Returns True when enemy is successfully defeated.', 'is_enemy_nearby': 'Condition: Checks if an enemy is within a specified distance. Returns True if an enemy is nearby, False otherwise.', 'fight_mode': 'Action: Activate fight mode for increased attack power and speed. Always returns True.', 'is_health_low': 'Condition: Checks if health is below a specific threshold. Returns True if health is below the threshold, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Defend the base by attacking the nearest enemy and activate fight mode if health is low.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>fight_mode</Condition><Action>attack</Action></Sequence><Sequence><Condition>is_health_low</Condition><Action>move_to_nearest_enemy</Action><Condition>is_enemy_nearby</Condition></Sequence></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'form_circle': 'Action: Form a circle formation around a central point. Always returns True.', 'attack': 'Action: Attack the nearest enemy. Returns True when enemy is successfully defeated.', 'heal': 'Action: Heal the nearest injured robot. Returns True when healing is complete.', 'is_enemy_nearby': 'Condition: Checks if an enemy is within a specified distance. Returns True if an enemy is nearby, False otherwise.', 'is_injury_detected': 'Condition: Checks if any robot in the circle is injured. Returns True if an injury is detected, False otherwise.', 'is_formation_stable': 'Condition: Checks if the circle formation is stable. Returns True if all robots are evenly spaced, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Form a circle formation and attack any nearby enemies while healing injured robots within the formation.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>form_circle (central point)</Action><Condition>is_formation_stable</Condition><Selector><Sequence><Condition>is_enemy_nearby</Condition><Action>attack</Action></Sequence><Sequence><Condition>is_injury_detected</Condition><Action>heal (nearest injured robot)</Action></Sequence></Selector></Sequence><Action>wait_for_command</Action></Selector></BehaviorTree>
###
4.// INSTRUCTIONS: Use only the following behaviors {'move_towards_object': 'Action: Move towards the target object. Always returns True.', 'check_object_distance': 'Condition: Checks the distance between the agent and the target object. Returns True if the target object is within range, False otherwise.', 'pick_up_object': 'Action: Pick up the target object. Returns True if the object is successfully picked up, False otherwise.', 'drop_object': 'Action: Drop the currently held object. Returns True if the object is successfully dropped, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Pick up an object, move towards a designated location, and drop the object at the location.
4.// OUTPUT:
<BehaviorTree><Sequence><Condition>check_object_distance</Condition><Action>move_towards_object</Action><Action>pick_up_object</Action><Action>move_towards_destination</Action><Action>drop_object</Action></Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'wait': 'Action: Wait for a set amount of time. Returns True after waiting.', 'detect_intruder': 'Condition: Checks the surroundings for any potential intruders. Returns True if an intruder is detected, False otherwise.', 'alert_team': 'Action: Send an alert signal to the rest of the team. Returns True if the alert signal is successfully sent, False otherwise.', 'defend_position': 'Action: Defend the current position against intruders. Returns True if the position is successfully defended, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Patrol an area and defend against any potential intruders, sending an alert signal to the team if an intruder is detected.
5.// OUTPUT:
<BehaviorTree><Sequence><Action>wait</Action><Sequence><Action>detect_intruder</Action><Action>alert_team</Action><Action>defend_position</Action></Sequence></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'search_for_resource': 'Action: Search for nearby resources. Returns True when resources are found.', 'move_to_resource': 'Action: Move towards the nearest resource. Returns True when the resource is reached.', 'gather_resource': 'Action: Gather the resource. Returns True when the resource is successfully gathered.', 'return_to_base': 'Action: Return to the base with the gathered resources. Returns True when the base is reached.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Gather resources from the environment and return them to the base.
6.// OUTPUT:
<BehaviorTree><Sequence><Sequence><Action>search_for_resource</Action><Action>move_to_resource</Action><Action>gather_resource</Action><Action>return_to_base</Action></Sequence></Sequence></BehaviorTree> 
###
4.// INSTRUCTIONS: Use only the following behaviors {'find_food': 'Action: Search for nearby food sources. Always returns True.', 'consume_food': "Action: Consume food if nearby. Returns True if food source is consumed, False otherwise.", 'return_to_nest': "Action: Return to the nest's center. Always returns True.", 'follow_scent': 'Action: Follow a scent trail towards a potential food source. Returns True if scent trail leads to a food source, False otherwise.', 'is_food_detected': 'Condition: Check if any nearby food sources are detected. Returns True if a food source is detected, False otherwise.', 'is_nest_reached': 'Condition: Check if the nest center is reached. Returns True if the agent is in the nest center, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Search for food and return to nest to deposit it
4.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_food_detected</Condition><Sequence><Action>find_food</Action><Condition>is_food_detected</Condition><Action>follow_scent</Action></Sequence></Sequence><Sequence><Action>consume_food</Action><Action>return_to_nest</Action><Condition>is_nest_reached</Condition></Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'activate_shields': 'Action: Activates the robot's shields for protection. Always returns True.', 'deactivate_shields': 'Action: Deactivates the robot's shields. Always returns True.', 'charge_battery': 'Action: Charge the robot's battery. Always returns True.', 'detect_threats': 'Subtree node: Represents a behavior tree for detecting and responding to potential threats.', 'defend': 'Action: Defend against a detected threat using appropriate tactics and weapons. Returns True if the threat is neutralized, False otherwise.', 'is_battery_low': 'Condition: Check if the battery is below a specific threshold. Returns True if battery is low, False otherwise.', 'is_threat_detected': 'Condition: Check if any potential threats are detected. Returns True if a threat is detected, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: If the battery is low, activate shields and charge battery. Otherwise, detect and defend against threats.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_battery_low</Condition><Sequence><Action>activate_shields</Action><Action>charge_battery</Action></Sequence></Sequence><Sequence><Condition>is_threat_detected</Condition><Subtree>detect_threats</Subtree><Action>defend</Action></Sequence></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'move_forward': 'Action: Move the robot one step forward in the current direction. Always returns True.', 'turn_left': 'Action: Turn the robot 90 degrees to the left. Always returns True.', 'turn_right': 'Action: Turn the robot 90 degrees to the right. Always returns True.', 'explore': 'Action: Explore the environment by randomly moving and mapping the area. Always returns True.', 'gather_resources': 'Action: Gather resources or objects from the environment. Always returns True.', 'is_resource_detected': 'Condition: Check if a resource or object is detected nearby. Returns True if a resource is detected, False otherwise.', 'is_map_complete': 'Condition: Check if the entire environment has been mapped and explored. Returns True if the map is complete, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Explore the environment and gather resources until the entire map is complete, then return to the starting point.
6.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_map_complete</Condition><Sequence><Selector><Condition>is_resource_detected</Condition><Action>gather_resources</Action><Action>explore</Action></Selector></Sequence></Sequence><Sequence><Action>move_forward</Action><Selector><Sequence><Action>turn_right</Action><Action>turn_left</Action></Sequence><Condition>is_map_complete</Condition></Selector></Sequence></BehaviorTree>
###
4.// INSTRUCTIONS: Use only the following behaviors {'go_to_docking_station': "Action: Move robot to the designated docking station. Always returns True.", 'gather_resource': "Action: Gather resources from the environment. Returns True if resources are successfully gathered, False otherwise.", 'deposit_resource': "Action: Deposit gathered resources at the docking station. Returns True if resources are successfully deposited, False otherwise.", 'is_resource_low': "Condition: Check if resources are running low. Returns True if resources are below a certain threshold, False otherwise.", 'is_docking_station_reachable': "Condition: Check if the docking station is reachable. Returns True if the docking station is within the robot's range, False otherwise.", 'is_resource_depleted': "Condition: Check if resources have been fully depleted. Returns True if all resources have been gathered and deposited, False otherwise."}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Generate behavior tree for a robot to gather and deposit resources at the designated docking station while ensuring that resources do not deplete completely
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_resource_low</Condition><Selector><Sequence><Action>go_to_docking_station</Action><Sequence><Condition>is_docking_station_reachable</Condition><Sequence><Condition>gather_resource</Condition><Sequence><Condition>is_resource_depleted</Condition><Action>deposit_resource</Action></Sequence></Sequence></Sequence></Sequence></Selector></Sequence><Action>wait</Action></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'avoid_collision': "Action: Avoid collisions with other robots. Always returns True.", 'follow_leader': "Action: Follow the designated leader robot. Returns True if the robot successfully follows the leader, False otherwise.", 'wait_for_signal': "Action: Wait for a signal from the leader robot. Returns True if the signal is received, False otherwise.", 'is_leader_in_range': "Condition: Check if the leader robot is within communication range. Returns True if the leader is within range, False otherwise.", 'is_leader_moving': "Condition: Check if the leader is currently moving. Returns True if the leader is moving, False otherwise.", 'is_reached_checkpoint': "Condition: Check if the robot has reached the designated checkpoint. Returns True if the robot is at the checkpoint, False otherwise."}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Generate behavior tree for a robot to follow and communicate with a designated leader and reach a specific checkpoint
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_leader_in_range</Condition><Selector><Sequence><Condition>is_leader_moving</Condition><Sequence><Condition>follow_leader</Condition><Sequence><Condition>is_reached_checkpoint</Condition><Action>wait_for_signal</Action></Sequence></Sequence></Sequence></Selector></Sequence><Action>avoid_collision</Action></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'explore_area': "Action: Explore the designated area using different movement patterns. Always returns True.", 'collect_samples': "Action: Collect samples from the environment. Returns True if samples are successfully collected, False otherwise.", 'analyze_samples': "Action: Analyze collected samples. Returns True if samples are successfully analyzed, False otherwise.", 'is_area_explored': "Condition: Check if the designated area has been fully explored. Returns True if all exploration patterns have been completed, False otherwise.", 'is_samples_collected': "Condition: Check if samples have been collected. Returns True if at least one sample has been successfully collected, False otherwise.", 'is_all_samples_analyzed': "Condition: Check if all collected samples have been analyzed. Returns True if all samples have been analyzed, False otherwise."}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Generate behavior tree for a robot to explore an area, collect and analyze samples, ensuring that all samples are analyzed before ending exploration
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_area_explored</Condition><Selector><Sequence><Sequence><Condition>is_all_samples_analyzed</Condition><Action>explore_area</Action></Sequence><Sequence><Condition>is_samples_collected</Condition><Selector><Sequence><Condition>is_all_samples_analyzed</Condition><Action>analyze_samples</Action></Sequence></Selector></Sequence></Selector></Sequence></Selector></BehaviorTree>###
4.// INSTRUCTIONS: Use only the following behaviors {'battery_check': 'Action: Check the battery level of the robot. Returns True if battery level is above 25%, False otherwise.','move_to_charging_station': 'Action: Move towards the nearest charging station. Returns True once the station is reached.','scan_surroundings': 'Action: Scan the surroundings for potential threats. Returns True if no threats are detected, False otherwise.','charge_battery': 'Action: Charge the battery at the charging station. Returns True once the battery is fully charged.','is_battery_low': 'Condition: Checks if the battery level is below 20%. Returns True if the battery level is below 20%, False otherwise.','is_charging_station_available': 'Condition: Checks if a charging station is within a 50-unit radius. Returns True if a charging station is within 50 units, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: If the battery level is low, move to the nearest charging station and charge the battery. If no charging station is available, scan the surroundings for potential threats.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_battery_low</Condition><Action>move_to_charging_station</Action><Condition>is_charging_station_available</Condition><Action>charge_battery</Action></Sequence><Action>scan_surroundings</Action></Selector></BehaviorTree>
###
5.// INSTRUCTIONS: Use only the following behaviors {'detect_people': 'Action: Detect any people within 10 meters of the robot. Returns True if people are detected, False otherwise.','approach_people': 'Subtree node: Action tree to approach a group of people.','speak_to_people': 'Action: Speak to people and provide assistance. Returns True when the conversation is complete.','collect_data': "Action: Collect data on the number of people and their location. Always returns True.",'update_log': 'Action: Update the data log with the collected information. Always returns True.','check_data_log': 'Condition: Check if the data log is updated. Returns True if data log is updated, False otherwise.','is_people_detected': 'Condition: Check if people are detected nearby. Returns True if people are detected, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: If people are detected, approach them, speak to them and collect data on their location. Once done, update the data log and check if it is updated.
5.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_people_detected</Condition><Action>detect_people</Action><Selector><Sequence><Action>approach_people</Action><Action>speak_to_people</Action></Sequence><Sequence><Action>collect_data</Action><Action>update_log</Action><Condition>check_data_log</Condition></Sequence></Selector></Sequence></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'find_treasure': 'Action: Search for treasures in the designated area. Returns True once a treasure is found.','interact_treasure': 'Action: Interact with the found treasure. Returns True once the interaction is complete.','calculate_value': 'Function: Calculates the value of the treasure. Returns a score based on the value.','deposit_treasure': 'Action: Deposit the treasure in the designated location. Returns True once the treasure is deposited.','is_treasure_found': 'Condition: Checks if a treasure has been found. Returns True if a treasure is found, False otherwise.','is_treasure_interacted': 'Condition: Checks if the treasure has been interacted with. Returns True if the treasure has been interacted with, False otherwise.','has_treasure': "Condition: Checks if the agent is carrying a treasure. Returns True if the agent is carrying a treasure, False otherwise."}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Search for treasures in the designated area. If a treasure is found, interact with it, calculate its value, and deposit it in the designated location. If the agent is already carrying a treasure, continue searching for more.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>find_treasure</Action><Condition>is_treasure_found</Condition><Sequence><Action>interact_treasure</Action><Condition>is_treasure_interacted</Condition><Action>calculate_value</Action><Action>deposit_treasure</Action></Sequence></Sequence><Condition>has_treasure</Condition><Action>find_treasure</Action></Selector></BehaviorTree> 
###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_translate_to_italian': "Action: Translate agent's language to Italian. Always returns True.", 'change_color_to_blue': "Action: Change agent's color to blue. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_color_green': 'Condition: Check if agent's color is green. Returns True if color is green, False otherwise', 'is_italian_translation_successful': 'Condition: Check if Italian translation is successful. Returns True if translation is successful, False otherwise', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'say_hello': 'Action: Greet target by saying "Ciao!". Always returns True.', 'say_sorry': 'Action: Apologize to target by saying "Mi dispiace!". Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Greet the target in Italian, translate to English, change color to blue and apologize.' Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree><Sequence> <Selector> <Sequence> <Action>say_hello</Action> <Condition>is_italian_translation_successful</Condition> <Action>change_translate_to_italian</Action> </Sequence> <Sequence> <Action>say_sorry</Action> <Action>change_color_to_blue</Action> <Condition>is_agent_in_nest</Condition> <Action>agent_movement_freeze</Action> </Sequence> </Selector> <Sequence> <Condition>is_color_green</Condition> <Action>change_color_to_blue</Action> </Sequence> </Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'detect_target': 'Action: Detect target using vision and sensors. Always returns True.', 'find_nearest_target': 'Action: Find the nearest target within range. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_target_detected': 'Condition: Check if target is within range. Returns True if target is detected, False otherwise.', 'navigate_to_target': 'Action: Navigate towards target. Always returns True.', 'charge_battery': 'Action: Charge agent's battery. Always returns True.', 'is_battery_low': 'Condition: Check if agent's battery is low. Returns True if battery is below 30%, False otherwise.', 'process_data': 'Action: Process data collected from target. Always returns True.', 'is_data_processed': 'Condition: Check if data is successfully processed. Returns True if data is processed, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors they will form such a long tree that exceeds the limit of 50 words, say (Sorry, I can't do the task).
5.// USER COMMAND: generate behavior tree to 'Detect and navigate to the nearest target, collect data, process it and return to the nest.' Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree><Sequence> <Selector> <Sequence> <Action>detect_target</Action> <Condition>is_target_detected</Condition> <Action>find_nearest_target</Action> </Sequence> <Sequence> <Selector> <Sequence> <Action>navigate_to_target</Action> <Condition>is_agent_in_nest</Condition> <Action>agent_movement_freeze</Action> <Selector> <Sequence> <Action>charge_battery</Action> <Condition>is_battery_low</Condition> </Sequence> <Sequence> <Action>process_data</Action> <Condition>is_data_processed</Condition> </Sequence> </Selector> </Sequence> </Selector> </Sequence> <Condition>is_target_detected</Condition> <Action>task_completed</Action> </Selector> </Sequence></BehaviorTree> 
###
4.// INSTRUCTIONS: Use only the following behaviors {'build_structure': 'Action: Build a new structure at the designated location. Returns True if successful, False otherwise.', 'collect_resources': 'Action: Collect resources from the environment. Returns True if resources are collected, False otherwise.', 'deposit_resources': 'Action: Deposit collected resources at the designated location. Returns True if successful, False otherwise.', 'is_building_available': 'Condition: Checks if a building structure is available for construction. Returns True if a structure is available, False otherwise.', 'is_nearby_resource': 'Condition: Checks if a nearby resource is available. Returns True if a resource is nearby, False otherwise.', 'is_structure_completed': 'Condition: Checks if a structure is completed. Returns True if a structure is completed, False otherwise.', 'is_structure_needed': 'Condition: Checks if more structures are needed for colony growth. Returns True if more structures are needed, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command, say (Sorry, I can't do the task)
4.// USER COMMAND: If a nearby resource is available, collect it. Otherwise, check if a structure is needed. If so, build a structure at a designated location. If a structure is completed, deposit resources. Otherwise, continue collecting resources.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_nearby_resource</Condition><Action>collect_resources</Action></Sequence><Sequence><Condition>is_structure_needed</Condition><Action>build_structure</Action></Sequence></Selector><Sequence><Condition>is_structure_completed</Condition><Action>deposit_resources</Action></Sequence><Action>collect_resources</Action></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'search_for_enemy': 'Subtree node: Represents a behavior tree for searching for enemies.', 'attack_closest_enemy': 'Action: Attack the closest enemy. Returns True if an enemy is attacked, False otherwise.', 'avoid_obstacle': 'Action: Avoid detected obstacles. Returns True if obstacles are avoided, False otherwise.', 'move_to_target_location': 'Action: Move towards a designated target location. Returns True if the target is reached, False otherwise.', 'is_enemy_near': 'Condition: Checks if an enemy is within a certain distance. Returns True if an enemy is within the designated distance, False otherwise.', 'is_obstacle_present': 'Condition: Checks for obstacles in front of the agent. Returns True if an obstacle is present, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command, say (Sorry, I can't do the task)
5.// USER COMMAND: Search for an enemy. If an enemy is found, attack it. Otherwise, move towards a designated location while avoiding obstacles.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>search_for_enemy</Action><Sequence><Condition>is_enemy_near</Condition><Action>attack_closest_enemy</Action></Sequence></Selector><Sequence><Action>move_to_target_location</Action><Condition>is_obstacle_present</Condition><Action>avoid_obstacle</Action></Sequence></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'detect_danger': 'Action: Scan the environment for potential dangers. Returns True if a danger is detected, False otherwise.', 'repair_structure': 'Action: Repair a damaged structure. Returns True if successful, False otherwise.', 'gather_resources': 'Action: Gather resources from the environment. Returns True if resources are collected, False otherwise.', 'build_structure': 'Action: Build a new structure at the designated location. Returns True if successful, False otherwise.', 'is_danger_present': 'Condition: Checks if a danger is present in the environment. Returns True if a danger is detected, False otherwise.', 'is_structure_damaged': 'Condition: Checks if a structure is damaged. Returns True if a structure is damaged, False otherwise.', 'is_structure_available': 'Condition: Checks if a structure can be built at the designated location. Returns True if the location is available for building, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command, say (Sorry, I can't do the task)
6.// USER COMMAND: Scan for potential dangers. If a danger is detected, prioritize repairing any damaged structures. If no danger is present, check for available resources and build a new structure if possible.
6.// OUTPUT:
<BehaviorTree><Sequence><Action>detect_danger</Action><Selector><Sequence><Condition>is_danger_present</Condition><Sequence><Condition>is_structure_damaged</Condition><Action>repair_structure</Action></Sequence></Sequence></Selector><Sequence><Condition>gather_resources</Condition><Sequence><Condition>is_structure_available</Condition><Action>build_structure</Action></Sequence></Sequence></Sequence></BehaviorTree>
###
4.// INSTRUCTIONS: Use only the following behaviors {'extend_arm': 'Action: Extend the robot's arm to reach for objects. Always returns True.', 'rotate_arm': 'Action: Rotate the robot's arm to a specific angle. Always returns True.', 'grab_object': 'Action: Use the robot's arm to grab an object in front. Returns True if object is successfully grasped, False otherwise.', 'is_object_grabbed': 'Condition: Check if an object is currently grasped by the robot's arm. Returns True if an object is grasped, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_target_reached': 'Condition: Check if the target destination is reached. Returns True if the target is reached, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Generate behavior tree for a robot to navigate and manipulate objects in a warehouse
4.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_target_reached</Condition><Selector><Sequence><Action>extend_arm</Action><Action>rotate_arm</Action><Selector><Sequence><Condition>is_object_grabbed</Condition><Action>place_object_in_bin</Action></Sequence></Selector></Sequence><Sequence><Action>move_to_next_target</Action><Selector><Sequence><Condition>is_obstacle_detected</Condition><Action>avoid_obstacle</Action></Sequence></Selector></Sequence></Selector></Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'charge_battery': 'Action: Charge the robot's battery. Always returns True.', 'move_to_charging_station': 'Action: Move the robot towards the charging station. Always returns True.', 'is_battery_full': 'Condition: Check if the battery is fully charged. Returns True if the battery is fully charged, False otherwise.', 'is_charging_station_reachable': 'Condition: Check if the charging station is within range. Returns True if the charging station is reachable, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Generate behavior tree for a robot to manage its battery life and charging needs
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_charging_station_reachable</Condition><Selector><Sequence><Condition>is_battery_full</Condition><Action>move_to_next_target</Action></Sequence><Sequence><Action>move_to_charging_station</Action><Selector><Sequence><Condition>is_battery_full</Condition><Action>charge_battery</Action></Sequence></Selector></Sequence></Selector></Sequence><Action>wander</Action></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'move_to_target': 'Action: Move towards the target location. Always returns True.', 'avoid_collision': 'Action: Use sensors to detect and avoid any potential collisions. Always returns True.', 'pick_up_object': 'Action: Pick up an object at the given location. Returns True if object is successfully picked up, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_target_reached': 'Condition: Check if the target destination is reached. Returns True if the target is reached, False otherwise.', 'is_object_picked_up': 'Condition: Check if an object is currently picked up by the robot. Returns True if an object is picked up, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Generate behavior tree for a robot to navigate and manipulate objects in a cluttered environment
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_target_reached</Condition><Selector><Sequence><Action>pick_up_object</Action><Selector><Sequence><Condition>is_object_picked_up</Condition><Action>place_object_in_designated_area</Action></Sequence></Selector></Sequence><Sequence><Action>move_to_next_target</Action><Selector><Sequence><Condition>is_obstacle_detected</Condition><Action>avoid_collision</Action></Sequence></Selector></Sequence></Selector></Sequence><Action>wander</Action></Selector></BehaviorTree>###
4.// INSTRUCTIONS: Use only the following behaviors{'move_forward': 'Action: Move 1 unit forward in the environment. Always returns True.', 'turn_left': 'Action: Turn 90 degrees left. Always returns True.', 'turn_right': 'Action: Turn 90 degrees right. Always returns True.', 'is_wall_detected': 'Condition: Check for walls within 2 units. Returns True if a wall is detected within 2 units, False otherwise.', 'is_target_detected': 'Condition: Check if target is within 3 units. Returns True if the target is within 3 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 1 unit. Returns True if the target is within 1 unit of distance, False otherwise.', 'is_home_detected': 'Condition: Check for the presence of the home base. Returns True if home base is detected, False otherwise.', 'stop_movement': 'Action: Stop all agent movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'move forward until a wall is detected, then turn left and continue moving until the target is reached. If the target is not reached, stop all movement.'
4.// OUTPUT:
<BehaviorTree> <Sequence> <Condition>is_wall_detected</Condition> <Sequence> <Action>turn_left</Action> <Action>move_forward</Action> </Sequence> </Sequence> <Sequence> <Condition>is_target_detected</Condition> <Sequence> <Action>turn_left</Action> <Sequence> <Condition>is_target_reached</Condition> <Action>stop_movement</Action> </Sequence> </Sequence> </Sequence> </BehaviorTree>
###
5.// INSTRUCTIONS: Use only the following behaviors{'detect_obstacles': 'Action: Detect and mark nearby obstacles. Always returns True.', 'move_forward': 'Action: Move 1 unit forward in the environment. Always returns True.', 'avoid_obstacle': 'Action: Avoid detected obstacles by moving to the left or right. Always returns True.', 'is_target_detected': 'Condition: Check if target is within 3 units. Returns True if the target is within 3 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 1 unit. Returns True if the target is within 1 unit of distance, False otherwise.', 'wait': 'Action: Wait for 5 seconds before proceeding. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'move forward and detect obstacles, then avoid them until the target is reached. If the target is not reached, wait for 5 seconds and try again.'
5.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Action>detect_obstacles</Action> <Selector> <Action>avoid_obstacle</Action> <Action>move_forward</Action> </Selector> <Action>wait</Action> </Selector> <Sequence> <Condition>is_target_detected<Condition> <Sequence> <Action>move_forward</Action> <Sequence> <Condition>is_target_reached</Condition> <Action>stop_movement</Action> </Sequence> </Sequence> </Sequence> </BehaviorTree>
###
6.// INSTRUCTIONS: Use only the following behaviors{'collect_resource': 'Action: Collect resource and return to the home base. Always returns True.', 'is_resource_detected': 'Condition: Check if a resource is found within 10 units. Returns True if a resource is detected within 10 units, False otherwise.', 'is_home_detected': 'Condition: Check for the presence of the home base. Returns True if home base is detected, False otherwise.', 'move_to_resource': 'Action: Move towards the detected resource. Always returns True.', 'move_to_home': 'Action: Move towards the home base. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'move to a resource if found, collect it and return to the home base. If no resource is found, continue moving to the home base.'
6.// OUTPUT:
<BehaviorTree> <Selector> <Condition>is_resource_detected</Condition> <Action>move_to_resource</Action> <Selector> <Condition>is_home_detected</Condition> <Action>move_to_home</Action> <Action>collect_resource</Action> </Selector> </BehaviorTree>
###
4.// INSTRUCTIONS: Use only the following behaviors {'move_to_target': 'Action: Move towards the specified target. Always returns True.', 'move_randomly': 'Action: Move randomly within the environment. Always returns True.', 'circle_around_target': 'Action: Circle around the target while maintaining a specific distance. Always returns True.', 'wait_for_target': 'Action: Wait until the target is within a specified distance. Always returns True.', 'is_target_visible': 'Condition: Check if the target is currently visible. Returns True if the target is in range and visible, False otherwise.', 'is_target_reached': 'Condition: Check if the target has been reached. Returns True if the target is within a specified distance, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Move towards target, circle around it and wait until it is reached.
4.// OUTPUT:
<BehaviorTree><Sequence><Action>move_to_target</Action><Action>circle_around_target</Action><Selector><Sequence><Condition>is_target_visible</Condition><Action>wait_for_target</Action></Sequence></Selector></Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'navigate_to_goal': 'Subtree node: Represents a behavior tree for navigating to a given goal.', 'avoid_obstacles': 'Subtree node: Represents a behavior tree for avoiding obstacles while moving.', 'detect_goal_reached': 'Condition: Check if the goal has been reached. Returns True if the goal is within a specified distance, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_target_visible': 'Condition: Check if the target is currently visible. Returns True if the target is in range and visible, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: navigate towards goal while avoiding obstacles. Once the goal is reached, check if the target is visible and continue navigation if it is not.
5.// OUTPUT:
<BehaviorTree><Sequence><Action>navigate_to_goal</Action><Action>avoid_obstacles</Action><Condition>detect_goal_reached</Condition><Selector><Sequence><Condition>is_target_visible</Condition><Action>navigate_to_goal</Action></Sequence></Selector></Sequence></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'go_to_start_location': 'Action: Move to the start location defined by the environment. Always returns True.', 'approach_target': 'Action: Approach the target while maintaining a specific distance. Always returns True.', 'collect_items': 'Subtree node: Represents a behavior tree for collecting items in the environment.', 'deliver_items': 'Subtree node: Represents a behavior tree for delivering items to a specified location.', 'check_inventory_full': 'Condition: Check if the inventory is full. Returns True if the inventory is full, False otherwise.', 'is_target_visible': 'Condition: Check if the target is currently visible. Returns True if the target is in range and visible, False otherwise.', 'is_target_reached': 'Condition: Check if the target has been reached. Returns True if the target is within a specified distance, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Collect items and deliver them to a specified location, while maintaining a specific distance from the target.
6.// OUTPUT:
<BehaviorTree><Sequence><Action>collect_items</Action><Action>approach_target</Action><Condition>check_inventory_full</Condition><Action>deliver_items</Action></Sequence></BehaviorTree>4.// INSTRUCTIONS: Use only the following behaviors {'parasail': 'Action: Deploy parasail for aerial survey. Returns True if deployment is successful.', 'take_off': 'Action: Take off for aerial survey. Always returns True.', 'landing': 'Action: Land the drone after completing survey. Always returns True.', 'detect_obstacles': 'Condition: Check for obstacles in the survey area. Returns True if obstacles are detected, False otherwise.', 'is_survey_area_clear': 'Condition: Check if the survey area is clear for flight. Returns True if no obstacles are detected, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Create a behavior tree for conducting aerial survey by deploying parasail, taking off, flying to a designated area, checking for obstacles, and landing after completing the survey.
4.// OUTPUT:
<BehaviorTree> <Sequence><Action>parasail</Action> <Action>take_off</Action> <Action>detect_obstacles</Action> <Sequence> <Condition>is_survey_area_clear</Condition> <Sequence> <Action>fly_to_designated_area</Action> <Condition>is_survey_area_clear</Condition> </Sequence> </Sequence> <Action>landing</Action> </Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'explore': 'Action: Explore the environment. Always returns True.', 'return_to_base': 'Action: Return to base after completing task. Always returns True.', 'collect_data': 'Action: Collect data from the environment. Returns True if successful.', 'is_resource_available': 'Condition: Check if resources are available in the environment. Returns True if resources are present, False otherwise.', 'is_target_reached': 'Condition: Check if target location is reached. Returns True if the target location is reached, False otherwise.', 'is_data_collected': 'Condition: Check if data is successfully collected. Returns True if data is collected, False otherwise.', 'scan_for_resources': 'Action: Scan the environment for resources. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Create behavior tree to 'Explore the environment, scan for resources, collect data and return to base after completing task.'
5.// OUTPUT:
<BehaviorTree> <Sequence><Action>explore</Action> <Sequence> <Condition>is_resource_available</Condition> <Sequence> <Action>scan_for_resources</Action> <Condition>is_resource_available</Action> </Sequence> </Sequence> <Sequence> <Condition>is_data_collected</Condition> <Sequence><Action>collect_data</Action> <Condition>is_data_collected</Condition> </Sequence> </Sequence> <Action>return_to_base</Action> </Sequence> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'get_distance_to_target': 'Action: Get the distance to the target. Returns the distance in units.', 'move_to_target': 'Action: Move towards target location. Always returns True.', 'stop_movement': 'Action: Stop all movement. Always returns True.', 'is_obstacle_detected': 'Condition: Check for obstacles in the environment. Returns True if an obstacle is detected, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Create a behavior tree for a robot to 'Constantly move towards a target location, stopping if obstacles are detected, and retrieve the distance to the target.'
6.// OUTPUT:
<BehaviorTree><Sequence> <Sequence><Condition>is_obstacle_detected</Condition> <Action>stop_movement</Action> </Sequence> <Sequence><Action>move_to_target</Action> <Action>get_distance_to_target</Action> </Sequence> </Sequence></BehaviorTree> 
###
4.// INSTRUCTIONS: Use only the following behaviors {'start_experimental_protocol': "Action: Start the experimental protocol process for the robot. Always returns True.", 'run_sensors': 'Action: Activate and run sensors for data collection. Always returns True.', 'collect_data': 'Action: Collect and analyze sensor data. Always returns True.', 'make_decision': 'Condition: Make a decision based on the collected data. Returns True if a decision can be made, False otherwise.', 'perform_action': 'Action: Perform the recommended action based on the decision. Always returns True.', 'is_protocol_complete': 'Condition: Check if the entire experimental protocol has been completed. Returns True if protocol is complete, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree for a robot to complete an experimental protocol for a scientific study
4.// OUTPUT:
<BehaviorTree> <Sequence> <Action>start_experimental_protocol</Action> <Selector> <Sequence> <Action>run_sensors</Action> <Action>collect_data</Action> </Sequence> <Sequence> <Condition>make_decision</Condition> <Action>perform_action</Action> </Sequence> </Selector> <Condition>is_protocol_complete</Condition> </Sequence> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'move_to_target': "Action: Move towards the target location. Always returns True.", 'collect_samples': 'Action: Collect samples from the target location. Always returns True.', 'analyze_samples': 'Action: Analyze the collected samples. Always returns True.', 'is_target_reached': 'Condition: Check if the target location has been reached. Returns True if target has been reached, False otherwise.', 'do_analyses_complete': "Condition: Check if the analysis of all samples has been completed. Returns True if all samples have been analyzed, False otherwise."}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree for a robot to collect and analyze samples from a specific location
5.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>is_target_reached</Condition> <Selector> <Sequence> <Action>collect_samples</Action> <Action>analyze_samples</Action> </Sequence> <Sequence> <Condition>do_analyses_complete</Condition> <Action>task_completed</Action> </Sequence> </Selector> </Sequence> <Action>move_to_target</Action> </Selector> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'recharge_battery': "Action: Recharge the robot's battery. Always returns True.", 'navigate_home': 'Action: Navigate the robot back to its charging station. Always returns True.', 'is_low_battery': 'Condition: Check if the robot's battery voltage is below a specified threshold. Returns True if battery is low, False otherwise.'}, to construct behavior tree in XML format for a robot to autonomously recharge its battery.
6.// USER COMMAND: generate behavior tree for a robot to monitor its battery level and recharge as needed
6.// OUTPUT:
<BehaviorTree> <Sequence> <Condition>is_low_battery</Condition> <Selector> <Sequence> <Action>recharge_battery</Action> <Selector> <Sequence> <Condition>is_low_battery</Condition> <Action>task_completed</Action> </Sequence> </Selector> </Sequence> <Action>navigate_home</Action> </Selector> </BehaviorTree> 
###
4.// INSTRUCTIONS: Use only the following behaviors {'fly_to_destination': 'Subtree node: Represents a behavior tree for flying to a specified destination.', 'takeoff': 'Action: Makes the drone take off. Always returns True.', 'land': 'Action: Makes the drone land. Always returns True.', 'hover': 'Action: Makes the drone hover in place. Always returns True.', 'move_forward': 'Action: Makes the drone move forward in a straight line. Always returns True.', 'avoid_obstacles': 'Action: Uses sensors to detect and avoid obstacles while flying. Always returns True.', 'has_arrived': 'Condition: Check if the drone has reached the destination. Returns True if the destination has been reached, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles using sensors. Returns True if an obstacle is detected, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Fly to a specific destination, avoiding obstacles on the way.
4.// OUTPUT:
<BehaviorTree><Sequence><Action>takeoff</Action><Selector><Sequence><Condition>is_obstacle_detected</Condition><Action>avoid_obstacles</Action></Sequence><Action>move_forward</Action></Selector><Condition>has_arrived</Condition><Action>hover</Action><Action>land</Action></Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'detect_fire': "Condition: Checks if fire is detected within a certain range. Returns True if fire is detected, False otherwise.", 'extinguish_fire': "Action: Uses a fire extinguisher to put out the detected fire. Always returns True.", 'change_color_to_red': "Action: Changes the drone's color to red. Always returns True.", 'change_color_to_green': "Action: Changes the drone's color to green. Always returns True.", 'return_to_base': "Action: Sends the drone back to base for refueling. Always returns True.", 'recharge': "Action: Refuels the drone at the base. Always returns True."}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Detect and extinguish fire, and change color to red if successful. If no fire is detected, return to base and recharge.
5.// OUTPUT:
<BehaviorTree><Sequence><Condition>detect_fire</Condition><Action>extinguish_fire</Action><Action>change_color_to_red</Action></Sequence><Selector><Sequence><Condition>detect_fire</Condition><Action>extinguish_fire</Action><Action>change_color_to_red</Action></Sequence><Sequence><Condition>detect_fire</Condition><Action>extinguish_fire</Action><Action>change_color_to_red</Action></Sequence><Else><Action>return_to_base</Action><Action>recharge</Action><Action>change_color_to_green</Action></Else></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'clean': "Action: Uses a vacuum to clean the specified area. Always returns True.", 'empty_vacuum': "Action: Empties the vacuum. Always returns True.", 'navigate_to_room': "Action: Navigates the robot to the specified room. Always returns True.", 'check_dirt_level': "Condition: Checks the dirt level in the vacuum. Returns True if the vacuum is full, False otherwise.", 'is_room_clean': "Condition: Checks if the specified room is clean. Returns True if the room is clean, False otherwise."}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Clean the living room until it is completely free of dirt.
6.// OUTPUT:
<BehaviorTree><Sequence><Action>navigate_to_room</Action><Selector><Sequence><Condition>is_room_clean</Condition><Action>clean</Action></Sequence><Sequence><Condition>check_dirt_level</Condition><Action>empty_vacuum</Action><Else><Action>clean</Action></Else></Sequence></Selector></Sequence></BehaviorTree> 
###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'follow_path': 'Subtree node: Represents a behavior tree for following a predetermined path.', 'recharge_battery': 'Action: Recharge the agent's battery. Always returns True.', 'on_low_battery': "Event: Triggers when the agent's battery level falls below a threshold. Returns True if battery is low, False otherwise.", 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.' }, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Follow a designated path. If battery level is low, recharge before continuing to follow path.
4.// OUTPUT:
<BehaviorTree><Sequence><Action>follow_path</Action><Trigger>on_low_battery</Trigger><Sequence><Action>recharge_battery</Action></Sequence></Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'find_object': 'Subtree node: Represents a behavior tree for finding an object within a designated area.', 'pick_up_object': 'Action: Pick up the object within reach. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Find and pick up the designated object within the area.
5.// OUTPUT:
<BehaviorTree><Sequence><Action>find_object</Action><Action>pick_up_object</Action></Sequence></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'move_to_location': 'Subtree node: Represents a behavior tree for moving to a designated location.', 'analyze_environment': 'Subtree node: Represents a behavior tree for analyzing the environment.', 'gather_data': 'Action: Gather data from the environment. Always returns True.', 'process_data': 'Action: Process the gathered data. Always returns True.', 'return_to_base': 'Action: Return to base after completing task. Always returns True.' }, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Analyze the environment, gather and process data, then return to base.
6.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Action>analyze_environment</Action><Sequence><Action>gather_data</Action><Action>process_data</Action></Sequence></Sequence><Action>return_to_base</Action></Selector></Sequence></BehaviorTree>
###
4.// INSTRUCTIONS: Use only the following behaviors {'send_message': "Action: Send a message to another robot with specified content. Returns True if message is successfully sent, False if not.", 'receive_message': 'Action: Receive a message from another robot. Returns the content of the message if received, False if no message was received.', 'is_target_reached': 'Condition: Check if the robot has reached its designated target location. Returns True if target is reached, False otherwise.', 'is_message_received': 'Condition: Check if the robot has received a message from another robot. Returns True if a message is received, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Generate a behavior tree for a swarm of robots to maneuver towards a target location while communicating with each other.
4.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>is_target_reached</Condition><Action>task_completed</Action></Sequence><Action>move_towards_target</Action></Selector><Selector><Sequence><Condition>is_message_received</Condition><Action>send_message</Action></Sequence><Action>receive_message</Action></Selector></Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'enter_cover_mode': 'Action: Enter cover mode to protect from enemy fire. Returns True if successfully entered cover mode, False if not.', 'shoot': 'Action: Shoot at visible enemy targets. Returns True if shot is fired, False if not.', 'is_target_visible': 'Condition: Check if there are visible enemy targets in range. Returns True if targets are in range, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Create a behavior tree for a swarm of robots to strategically coordinate shooting at enemies while also entering cover when necessary.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_target_visible</Condition><Action>shoot</Action></Sequence><Selector><Sequence><Condition>is_enemy_fire_detected</Condition><Action>enter_cover_mode</Action></Sequence><Action>move_to_next_strategic_position</Action></Selector></Selector> 
###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_blue': "Action: Change agent's color to blue. Always returns True.", 'change_color_to_red': "Action: Change agent's color to red. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_color_blue': 'Condition: Check if agent's color is blue. Returns True if the agent's color is blue, False otherwise.', 'is_color_red': 'Condition: Check if agent's color is red. Returns True if the agent's color is red, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'change color to red if blue, continue movement and avoid obstacles, then change color to blue if red once target is reached'Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_color_blue</Condition><Sequence><Action>change_color_to_red</Action><Action>continue_movement_agent</Action></Sequence></Sequence><Sequence><Condition>is_target_reached</Condition><Action>change_color_to_blue</Action></Sequence></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_red': "Action: Change agent's color to red. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_triangle': 'Action: Form an equilateral triangle at the center. Returns True if triangle is formed, False otherwise.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_color_green': 'Condition: Check if agent's color is green. Returns True if the agent's color is green, False otherwise.', 'is_color_red': 'Condition: Check if agent's color is red. Returns True if the agent's color is red, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'goal_reached': 'Condition: Check if agent's goal location is reached. Returns True if the goal location is reached, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'change color to red when in the triangle, avoid obstacles, and reach the goal location'Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_agent_in_nest</Condition><Action>change_color_to_green</Action></Sequence><Sequence><Condition>goal_reached</Condition><Action>change_color_to_red</Action></Sequence></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_red': "Action: Change agent's color to red. Always returns True.", 'change_color_to_black': "Action: Change agent's color to black. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_square': 'Action: Form a square at the center. Returns True if square is formed, False otherwise.', 'is_agent_in_square': 'Condition: Check if the agent is within the square. Returns True if the agent is inside the square, False otherwise.', 'is_color_green': 'Condition: Check if agent's color is green. Returns True if the agent's color is green, False otherwise.', 'is_color_red': 'Condition: Check if agent's color is red. Returns True if the agent's color is red, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Form a square, change color to black if in square, and avoid obstacles until target is reached'Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>form_square</Action><Sequence><Condition>is_agent_in_square</Condition><Action>change_color_to_black</Action></Sequence></Sequence><Sequence><Condition>is_target_detected</Condition><Action>continue_movement_agent</Action></Sequence></Selector></BehaviorTree> 
###
4.// INSTRUCTIONS: Use only the following behaviors {'move_to_next_food_source': 'Action: Move the robot to the next food source in a foraging route. Always returns True.', 'harvest_food': 'Action: Collect food from the current food source. Always returns True.', 'is_food_available': 'Condition: Check if there is food available at the current food source. Returns True if food is available, False otherwise.', 'is_nest_detected': 'Condition: Check if the nest is within 50 units. Returns True if the nest is within 50 units of distance, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Generate behavior tree for a robot to forage for food and return to the nest
4.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_nest_detected</Condition><Action>return_to_nest</Action><Selector><Sequence><Action>move_to_next_food_source</Action><Action>harvest_food</Action><Selector><Condition>is_food_available</Condition><Action>harvest_food</Action></Selector></Sequence></Selector></Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'take_off': 'Action: Take off from the base station. Always returns True.', 'hover_at_50m': 'Action: Hover at an altitude of 50 meters. Always returns True.', 'scan_for_volcanoes': 'Action: Scan the current location for any signs of volcanic activity. Always returns True.', 'is_location_clear': 'Condition: Check if the current location is safe and clear of any potential hazards. Returns True if the location is safe, False otherwise.', 'is_volcano_detected': 'Condition: Check if a volcano has been detected in the current location. Returns True if a volcano is detected, False otherwise.', 'land_at_base': 'Action: Land at the base station and recharge. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Generate behavior tree for a drone to conduct aerial surveillance and return to the base station for recharge
5.// OUTPUT:
<BehaviorTree><Sequence><Action>take_off</Action><Action>hover_at_50m</Action><Selector><Sequence><Condition>is_location_clear</Condition><Action>scan_for_volcanoes</Action><Selector><Condition>is_volcano_detected</Condition><Action>return_to_base</Action></Selector></Sequence><Action>print_safety_alert</Action></Selector><Action>land_at_base</Action></Sequence></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'move_to_target_location': 'Action: Move the robot to the target location. Always returns True.', 'survey_stars': 'Action: Use sensors to survey the stars and detect any potential threats. Always returns True.', 'take_cover': 'Action: Take cover behind the nearest asteroid or obstacle. Always returns True.', 'is_target_reached': 'Condition: Check if the target location has been reached. Returns True if the target is reached, False otherwise.', 'is_threat_detected': 'Condition: Check if a threat has been detected in the star field. Returns True if a threat is detected, False otherwise.', 'is_in_cover': 'Condition: Check if the robot is currently in cover. Returns True if the robot is in cover, False otherwise.', 'is_backup_called': 'Condition: Check if backup has been requested. Returns True if backup has been requested, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Generate behavior tree for a robot to navigate through a star field and take cover if a threat is detected
6.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_target_reached</Condition><Action>print_target_reached</Action><Selector><Sequence><Action>move_to_target_location</Action><Selector><Sequence><Condition>is_threat_detected</Condition><Action>take_cover</Action><Selector><Condition>is_in_cover</Condition><Action>survey_stars</Action></Selector></Sequence></Selector></Sequence><Selector><Condition>is_backup_called</Condition><Action>call_backup</Action></Selector></Sequence></BehaviorTree> 
###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'avoid_collisions': 'Action: Avoid collisions with other agents. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_red': "Action: Change agent's color to red. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'is_intruder_detected': 'Condition: Check if an intruder is detected in the monitored area. Returns True if an intruder is detected, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Avoid collisions with other robots while maintaining a specified distance, form a line at the center, and change color to red when an intruder is detected'. Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>is_agent_in_nest</Condition> <Sequence> <Condition>is_target_reached</Condition> <Action>change_color_to_white</Action> <Action>task_completed</Action> </Sequence> </Sequence> <Sequence> <Condition>is_obstacle_detected</Condition> <Condition>is_target_detected</Condition> <Action>change_color_to_green</Action> <Action>avoid_obstacle</Action> </Sequence> </Selector> <Sequence> <Condition>is_intruder_detected</Condition> <Sequence> <Action>form_line</Action> <Action>change_color_to_red</Action> </Sequence> </Sequence> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'activate_sensor': 'Action: Activate a specific sensor. Always returns True.', 'check_sensor_status': 'Condition: Check the status of a specific sensor. Returns True is the sensor is working properly, False otherwise.', 'shutdown_sensor': 'Action: Shutdown a specific sensor. Always returns True.', 'move_backward': 'Action: Move the robot backward. Always returns True.', 'turn_right': 'Action: Turn the robot to the right. Always returns True.', 'turn_left': 'Action: Turn the robot to the left. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: create a behavior tree to 'Check the status of a specific sensor, if it is not working properly, activate the sensor and continue moving backward until sensor is working'. Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree><Selector> <Sequence> <Condition>check_sensor_status</Condition> <Action>move_backward</Action> </Sequence> <Sequence> <Condition>activate_sensor</Condition> <Action>turn_right</Action> <Action>turn_left</Action> </Sequence> </Selector> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'activate_booster': 'Action: Activate booster for increased speed. Always returns True.', 'deactivate_booster': 'Action: Deactivate booster to return to normal speed. Always returns True.', 'check_battery_level': 'Condition: Check the battery level. Returns True if battery level is above 50%, False otherwise.', 'recharge_battery': 'Action: Return to charging station to recharge battery. Always returns True.', 'move_forward': 'Action: Move the robot forward. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Activate booster for increased speed, check battery level, and recharge battery if level is below 50%'. Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree><Selector> <Sequence> <Condition>check_battery_level</Condition> <Action>activate_booster</Action> <Action>move_forward</Action> </Sequence> <Sequence> <Condition>reactivate_booster</Condition> <Action>recharge_battery</Action> </Sequence> </Selector> </BehaviorTree> 
###
4.// INSTRUCTIONS: Use only the following behaviors {'search_for_food': 'Subtree node: Represents a behavior tree for searching an area for food.', 'pick_up_food': 'Action: Pick up food item when found. Returns True if successful in picking up food, False otherwise.', 'return_to_nest': 'Action: Return to the nest with the collected food item. Always returns True.', 'is_food_available': 'Condition: Check if there is food available in the current area. Returns True if food is available, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Send a group of robots to search for food and bring it back to the nest.
4.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Action>search_for_food</Action><Selector><Sequence><Condition>is_food_available</Condition><Action>pick_up_food</Action></Sequence></Selector></Sequence><Action>return_to_nest</Action></Selector></Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'follow_waypoints': 'Subtree node: Represents a behavior tree for following a given set of waypoints.', 'scan_for_danger': 'Action: Scan the environment for any potential danger. Always returns True.', 'perform_evasive_action': 'Action: Take evasive action to avoid any danger. Returns True if successfully avoided danger, False otherwise.', 'has_reached_destination': 'Condition: Check if the robot has reached the final destination. Returns True if reached, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Create a behavior tree for a robot to follow a set of waypoints while being on constant lookout for danger and taking evasive action if needed.
5.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Action>follow_waypoints</Action><Action>scan_for_danger</Action><Selector><Action>perform_evasive_action</Action><Action>wait</Action></Selector></Sequence><Condition>has_reached_destination</Condition></Selector></Sequence></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'collect_resources': 'Subtree node: Represents a behavior tree for collecting resources in the environment.', 'deposit_resources': 'Action: Deposit collected resources at designated location. Returns True if successful, False otherwise.', 'repair_robot': 'Action: Use collected resources to repair any damaged robots in the swarm. Always returns True.', 'is_resource_available': 'Condition: Check if any resources are available in the current area. Returns True if resources are available, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Assign swarm robots to gather resources, repair damaged robots, and deposit resources at a designated location.
6.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Action>collect_resources</Action><Selector><Sequence><Condition>is_resource_available</Condition><Action>repair_robot</Action></Sequence></Selector></Sequence><Action>deposit_resources</Action></Selector></Sequence></BehaviorTree><BehaviorTree><Sequence><Selector><Sequence><Condition>is_line_formed</Condition><Selector><Action>change_color_to_red</Action><Action>agent_movement_freeze</Action></Selector></Sequence><Action>form_line</Action></Selector></Sequence></BehaviorTree>

###
4.// INSTRUCTIONS: Use only the following behaviors {'search_and_rescue': 'Action: Move to the designated search area and search for missing person. Always returns True.', 'move_to_nest': 'Action: Move towards the designated nest area. Always returns True.', 'rescue_person': 'Action: Perform rescue actions such as administering first aid. Always returns True.', 'is_missing_person_found': 'Condition: Check if the missing person has been located. Returns True if person is found, False otherwise.', 'is_at_search_area': 'Condition: Check if the robot is at the designated search area. Returns True if at the search area, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Search for missing person and perform rescue actions if found. Return to nest afterwards.'
4.// OUTPUT:
<BehaviorTree> <Sequence> <Action>move_to_nest</Action> <Sequence> <Condition>is_at_search_area</Condition> <Action>search_and_rescue</Action> <Sequence> <Condition>is_missing_person_found</Condition> <Action>rescue_person</Action> </Sequence> </Sequence> </Sequence> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'mount_camera': 'Action: Mount a camera onto the designated spot. Always returns True.', 'adjust_camera_angle': 'Action: Adjust the angle of the mounted camera. Always returns True.', 'take_picture': 'Action: Take a picture with the mounted camera. Always returns True.', 'move_to_location': 'Action: Move to the designated location. Always returns True.', 'is_camera_mounted': 'Condition: Check if the camera is mounted. Returns True if the camera is mounted, False otherwise.', 'is_camera_adjusted': 'Condition: Check if the camera angle has been adjusted. Returns True if the camera angle is corrected, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Mount a camera and take a picture at the designated location.'
5.// OUTPUT:
<BehaviorTree> <Sequence> <Action>move_to_location</Action> <Sequence> <Condition>is_camera_mounted</Condition> <Action>mount_camera</Action> <Sequence> <Condition>is_camera_adjusted</Condition> <Action>adjust_camera_angle</Action> <Action>take_picture</Action> </Sequence> </Sequence> </Sequence> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'traverse_maze': 'Action: Traverse the maze using predefined algorithms and navigation techniques. Always returns True.', 'move_to_exit': 'Action: Move towards the designated exit. Always returns True.', 'find_shortest_path': 'Action: Use pathfinding algorithms to find the shortest path to the designated location. Always returns True.', 'verify_exit_reached': 'Condition: Check if the designated exit has been reached. Returns True if at the exit, False otherwise.', 'is_maze_traversed': 'Condition: Check if the maze has been successfully traversed. Returns True if the maze has been completed, False otherwise.'}, to construct behavior treein XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Traverse a maze and reach the designated exit using pathfinding algorithms.'
6.// OUTPUT:
<BehaviorTree> <Selector> <Action>traverse_maze</Action> <Sequence> <Action>find_shortest_path</Action> <Sequence> <Condition>is_maze_traversed</Condition> <Action>move_to_exit</Action> </Sequence> </Sequence> </Selector> </BehaviorTree>
###
4.// INSTRUCTIONS: Use only the following behaviors {'rotate_right': 'Action: Rotate the agent 90 degrees to the right. Always returns True.', 'rotate_left': 'Action: Rotate the agent 90 degrees to the left. Always returns True.', 'move_to_target': 'Action: Move towards the target location while avoiding obstacles. Always returns True.', 'wait': 'Action: Pause agent's movement for a specified time. Always returns True.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_target_reached': 'Condition: Check if the agent has reached the target location. Returns True if the agent has reached the target, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Navigate the environment and reach the target location while avoiding obstacles. If the target location is unreachable, wait for 30 seconds and try again.
4.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_target_reached</Condition><Action>rotate_right</Action><Action>rotate_left</Action></Sequence><Selector><Sequence><Condition>is_obstacle_detected</Condition><Action>move_to_target</Action></Sequence><Action>wait</Action></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'scout_area': 'Action: Scout the area and gather information about the environment. Always returns True.', 'move_to_target': 'Action: Move towards the target location while avoiding obstacles. Always returns True.', 'pick_up_item': 'Action: Pick up and store a useful item found during scouting. Always returns True.', 'avoid_enemy': 'Subtree node: Represents a behavior tree for evading enemies.', 'is_item_available': 'Condition: Check if a useful item is detected in the area. Returns True if an item is detected, False otherwise.', 'is_enemy_detected': 'Condition: Check for enemies nearby. Returns True if an enemy is detected, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Scout the area, pick up any useful items, and avoid enemies. If no items are found, move towards the target location.
5.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_item_available</Condition><Action>scout_area</Action><Action>pick_up_item</Action></Sequence><Selector><Sequence><Condition>is_enemy_detected</Condition><Action>avoid_enemy</Action></Sequence><Action>move_to_target</Action></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'form_circle': 'Action: Form a circle formation with other agents. Always returns True.', 'is_circle_formed': 'Condition: Check if a circle formation is currently formed. Returns True if a circle is formed, False otherwise.', 'gather_energy': 'Subtree node: Represents a behavior tree for gathering energy resources.', 'consume_energy': 'Subtree node: Represents a behavior tree for consuming energy resources.', 'is_energy_low': 'Condition: Checks if energy levels are below a specific threshold. Returns True if energy is low, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Make a group of swarm robots gather and consume energy resources while maintaining a circle formation.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_energy_low</Condition><Sequence><Condition>is_circle_formed</Condition><Action>gather_energy</Action></Sequence></Sequence><Sequence><Condition>is_circle_formed</Condition><Action>consume_energy</Action></Sequence><Sequence><Condition>is_circle_formed</Condition><Action>form_circle</Action></Sequence></Selector></BehaviorTree>
###
4.// INSTRUCTIONS: Use only the following behaviors {'find_food': 'Action: Search for food in the designated area. Always returns True.', 'collect_food': 'Action: Collect the food once found. Always returns True.', 'return_to_nest': 'Action: Return to the nest with the collected food. Always returns True.', 'is_food_found': 'Condition: Check if food is found within 10 units. Returns True if food is within 10 units of distance, False otherwise.', 'is_nest_reached': 'Condition: Check if the nest is reached. Returns True if the nest is reached, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Find and collect food, then return to the nest.'Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree> <Sequence> <Condition>is_nest_reached</Condition> <Selector> <Sequence> <Condition>is_food_found</Condition> <Action>collect_food</Action> <Selector> <Action>find_food</Action> <Action>wander</Action> </Selector> <Action>return_to_nest</Action> </Sequence> <Action>move_to_next_waypoint</Action> </Selector> </Sequence> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'detect_water_source': 'Action: Search for a designated water source in the environment. Always returns True.', 'collect_water': 'Action: Collect the water once a source is found. Always returns True.', 'pour_water': 'Action: Pour the collected water into a designated area. Always returns True.', 'is_water_source_found': 'Condition: Check if a water source is found within 15 units. Returns True if a water source is within 15 units of distance, False otherwise.', 'is_water_needed': 'Condition: Check if water is needed for the designated area. Returns True if water is needed, False otherwise.', 'is_water_poured': 'Condition: Check if water has been successfully poured into the designated area. Returns True if water has been poured, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Find and collect water, then pour it into the designated area.'Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>is_water_poured</Condition> <Action>agent_movement_freeze</Action> <Action>task_completed</Action> </Sequence> <Sequence> <Condition>is_water_needed</Condition> <Selector> <Sequence> <Condition>is_water_source_found</Condition> <Action>collect_water</Action> <Selector> <Action>detect_water_source</Action> <Action>wander</Action> </Selector> <Action>pour_water</Action> </Sequence> <Selector> <Action>detect_water_source</Action> <Action>wander</Action> </Selector> </Sequence> </Selector> </Sequence> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'search_for_target': 'Action: Search for a designated target in the environment. Always returns True.', 'approach_target': 'Action: Move towards the target once it's found. Always returns True.', 'scan_surroundings': 'Action: Scan the surrounding area for any potential targets. Always returns True.', 'pick_up_target': 'Action: Pick up the target. Always returns True.', 'drop_target': 'Action: Drop the currently held target. Always returns True.', 'is_target_found': 'Condition: Check if a target is found within 20 units. Returns True if a target is within 20 units of distance, False otherwise.', 'is_target_held': 'Condition: Check if a target is currently being held. Returns True if a target is held, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Search for a target, pick it up, and drop it at a designated location.'Output only the XML behavior tree without extra text.
6.// OUTPUT:
Sorry, I can't do the task with the provided behaviors.
###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'change_speed': 'Action: Change the agent's movement speed. Always returns True.', 'face_target': "Action: Rotate the agent to face the target location. Always returns True.", 'find_target': "Action: Search for the target by following a spiral pattern. Returns True when target is found, False otherwise.", 'move_to_target': "Action: Move towards the target location with a specified speed. Always returns True.", 'update_map': "Action: Update the robot's internal map of the environment based on its current location and sensor readings. Always returns True.", 'is_target_reachable': 'Condition: Check if the target is reachable from the agent. Returns True if reachable, False otherwise.', 'is_target_visible': 'Condition: Check if the target is currently in the agent's line of sight. Returns True if visible, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Reach a target location using path planning and obstacle avoidance'
4.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Action>find_target</Action> <Sequence> <Condition>is_target_visible</Condition> <Action>face_target</Action> <Action>move_to_target</Action> </Sequence> </Sequence> <Action>update_map</Action> </Selector> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'check_distance_to_obstacle': 'Condition: Check the distance to the nearest obstacle in front of the agent. Returns True if the distance is less than 5 units, False otherwise.', 'continue_movement_agent': 'Action: Continue agent's movement. Always returns True.', 'explore': 'Action: Explore the environment by moving in a random direction. Always returns True.', 'face_obstacle': "Action: Rotate the agent to face the nearest obstacle. Always returns True.", 'move_backward': 'Action: Move the agent backward one step. Always returns True.', 'move_forward': 'Action: Move the agent forward one step. Always returns True.', 'move_left': 'Action: Move the agent left one step. Always returns True.', 'move_right': 'Action: Move the agent right one step. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Navigate through a maze-like environment while avoiding obstacles'
5.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>check_distance_to_obstacle</Condition> <Action>face_obstacle</Action> <Action>move_backward</Action> </Sequence> <Sequence> <Selector> <Condition>check_distance_to_obstacle</Condition> <Selector> <Condition>is_path_clear</Condition> <Action>move_forward</Action> </Selector> <Sequence> <Action>move_left</Action> <Action>face_obstacle</Action> <Action>move_forward</Action> </Sequence> </Selector> <Sequence> <Action>move_right</Action> <Action>face_obstacle</Action> <Action>move_forward</Action> </Sequence> </Sequence> <Action>explore</Action> <Action>move_backward</Action> <Action>continue_movement_agent</Action> </Selector> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'follow_path': 'Action: Follow a predefined path in the environment. Returns True when target is reached, False if unable to follow the path.', 'is_agent_stuck': 'Condition: Check if the agent is stuck and unable to move. Returns True if stuck, False otherwise.', 'is_nest_nearby': 'Condition: Check if the nest is within 10 units of distance. Returns True if nest is nearby, False otherwise.', 'is_target_reached': 'Condition: Check if the agent has reached the target location. Returns True if target is reached, False otherwise.', 'move_to_target': 'Action: Move towards the target location with a specified speed. Always returns True.', 'search_area': 'Action: Conduct a systematic search of the surrounding area. Always returns True.', 'set_target': 'Action: Set the target location for the agent. Always returns True.', 'update_map': "Action: Update the robot's internal map of the environment based on its current location and sensor readings. Always returns True."}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Navigate to a specified location while conducting a search for the target'
6.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Action>set_target</Action> <Selector> <Condition>is_agent_stuck</Condition> <Action>search_area</Action> <Sequence> <Condition>is_nest_nearby</Condition> <Action>follow_path</Action> </Sequence> </Selector> <Action>move_to_target</Action> </Sequence> <Action>update_map</Action> </Selector> </BehaviorTree> 
###
4.// INSTRUCTIONS: Use only the following behaviors {'charge': 'Action: Recharge the robot battery until it reaches 100%. Returns True when the battery is fully charged, False otherwise.', 'get_location': 'Action: Obtain the current location of the robot. Returns True when the location is successfully retrieved, False otherwise.', 'go_to_location': 'Action: Move the robot to the specified location. Returns True when the robot reaches the location, False otherwise.', 'is_obstacle_detected': 'Condition: Check if there are any obstacles within 10 units of the robot. Returns True if an obstacle is detected, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'charge the battery and then go to the specified location' Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Action>charge</Action> <Action>go_to_location</Action> </Sequence> <Condition>is_obstacle_detected</Condition> </Selector> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'collect_resource': 'Action: Collect a resource from the environment. Returns True when the resource has been successfully collected, False otherwise.', 'deposit_resource': 'Action: Deposit a resource at the designated location. Returns True when the resource has been successfully deposited, False otherwise.', 'is_resource_available': 'Condition: Check if there is a resource available in the environment. Returns True if there is a resource available, False otherwise.', 'is_target_reached': 'Condition: Check if the destination has been reached. Returns True if the destination has been reached, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'collect a resource, deposit it at designated location, repeat until destination is reached' Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>is_resource_available</Condition> <Action>collect_resource</Action> </Sequence> <Selector> <Sequence><Condition>is_target_reached</Condition><Action>deposit_resource</Action></Sequence> <Action>move_to_next_waypoint</Action> </Selector> </Selector> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'rush_to_target': 'Action: Move quickly towards the target. Returns True when the target is reached, False otherwise.', 'slow_down': 'Action: Slow down the robot movement. Returns True when the robot has slowed down, False otherwise.', 'wait': 'Action: Wait for a specified amount of time. Returns True when the time has elapsed, False otherwise.', 'is_target_valid': 'Condition: Check if the designated target is valid. Returns True if the target is valid, False otherwise.', 'finish_task': 'Action: Signal task completion by stopping all movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'rush to the target while checking for validity, slow down if needed, and finish the task'Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>is_target_valid</Condition> <Action>rush_to_target</Action> </Sequence> <Selector> <Condition>is_target_valid</Condition> <Action>slow_down</Action> </Selector> </Selector> <Action>finish_task</Action> </Sequence> </BehaviorTree> 
###
4.// INSTRUCTIONS: Use only the following behaviors {'go_forward': 'Action: Move the robot one step forward. Always returns True.', 'go_backward': 'Action: Move the robot one step backward. Always returns True.', 'turn_right': 'Action: Turn the robot right by 90 degrees. Always returns True.', 'turn_left': 'Action: Turn the robot left by 90 degrees. Always returns True.', 'is_in_corridor': 'Condition: Check if the robot is in a corridor. Returns True if the robot is in a corridor, False otherwise.', 'is_intersection': 'Condition: Check if the robot is at an intersection. Returns True if the robot is at an intersection, False otherwise.', 'is_obstacle_ahead': 'Condition: Check if an obstacle is detected ahead. Returns True if an obstacle is detected, False otherwise.', 'is_target_reached': 'Condition: Check if the target destination is reached. Returns True if the target destination is reached, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: navigate through a maze, avoiding obstacles and reaching the designated target destination. 
4.// OUTPUT:
<BehaviorTree><Sequence><Selector><Condition>is_in_corridor</Condition><Action>go_forward</Action></Selector><Selector><Condition>is_obstacle_ahead</Condition><Action>turn_right</Action></Selector><Selector><Condition>is_intersection</Condition><Action>turn_left</Action></Selector><Selector><Condition>is_target_reached</Condition><Action>task_completed</Action></Selector></Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'search_area': 'Action: Move to a designated search area. Always returns True.', 'scan_area': 'Action: Scan the designated area for targets. Always returns True.', 'identify_target': 'Action: Identify and classify the target. Always returns True.', 'approach_target': 'Action: Move towards the target. Always returns True.', 'is_target_detected': 'Condition: Check if a target is detected in the scanned area. Returns True if a target is detected, False otherwise.', 'is_target_identified': 'Condition: Check if the target is correctly identified. Returns True if the target is identified correctly, False otherwise.', 'is_target_close': 'Condition: Check if the target is within a certain distance. Returns True if the target is within the specified distance, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: search for, identify, and approach a target in a specific area. 
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>search_area</Action><Action>scan_area</Action></Sequence><Sequence><Condition>is_target_detected</Condition><Selector><Sequence><Action>identify_target</Action><Condition>is_target_identified</Condition><Sequence><Condition>is_target_close</Condition><Action>approach_target</Action></Sequence></Sequence></Selector></Sequence></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'maintain_distance_from_neighbors': 'Action: Maintain a safe distance from other swarm robots. Always returns True.', 'respond_to_distress_call': 'Action: Respond to a distress call from a nearby robot. Always returns True.', 'send_distress_call': 'Action: Send a distress call to nearby robots. Always returns True.', 'move_towards_distress_call': 'Action: Move towards the location of the distress call. Always returns True.', 'is_within_range_of_distress_call': 'Condition: Check if the robot is within range of a distress call. Returns True if it is within range, False otherwise.', 'is_neighboring_robot_in_distress': 'Condition: Check if a neighboring robot is in distress. Returns True if a neighboring robot is in distress, False otherwise.', 'is_distress_resolved': 'Condition: Check if the distress call has been resolved. Returns True if the distress call has been resolved, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: coordinate with other swarm robots in response to distress calls, maintaining safe distance and resolving the distress call.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_neighboring_robot_in_distress</Condition><Action>send_distress_call</Action><Sequence><Action>respond_to_distress_call</Action><Condition>is_within_range_of_distress_call</Condition><Action>move_towards_distress_call</Action></Sequence><Condition>is_distress_resolved</Condition><Action>maintain_distance_from_neighbors</Action></Sequence></BehaviorTree> 
###
4.// INSTRUCTIONS: Use only the following behaviors {'find_food': 'Subtree node: Represents a behavior tree for finding food.', 'eat_food': 'Action: Eat the collected food. Always returns True.', 'is_hungry': 'Condition: Checks if the agent is hungry. Returns True if the agent's hunger level is below a specific threshold, False otherwise.', 'follow_smell': 'Action: Follow the smell of food. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: If hungry, find and eat food. Otherwise, follow the smell of food.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_hungry</Condition><Sequence><Action>find_food</Action><Action>eat_food</Action></Sequence></Sequence><Action>follow_smell</Action></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'detect_intruders': 'Action: Use sensors to detect any intruders in the area. Always returns True.', 'pursue_intruder': 'Action: Move towards and attempt to capture the detected intruder. Always returns True.', 'call_assistance': 'Action: Call for backup if unable to capture intruder alone. Always returns True.', 'is_backup_available': 'Condition: Checks if backup is available. Returns True if backup is available, False otherwise.', 'backup_arrived': 'Action: Signal that backup has arrived and coordinate actions with them. Always returns True.', 'reposition': 'Action: Move to a new strategic location to better capture the intruder. Always returns True.', 'is_intruder_captured': 'Condition: Checks if the intruder has been captured. Returns True if the intruder is captured, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Track and capture intruders, calling for backup if necessary.
5.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Action>detect_intruders</Action><Action>pursue_intruder</Action><Selector><Sequence><Condition>is_intruder_captured</Condition><Action>call_assistance</Action></Sequence><Action>reposition</Action></Selector></Sequence><Condition>is_backup_available</Condition><Action>backup_arrived</Action></Selector></Sequence></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'collect_resources': 'Subtree node: Represents a behavior tree for collecting resources.', 'return_to_base': 'Action: Return to base while carrying collected resources. Always returns True.', 'is_inventory_full': 'Condition: Checks if the agent's inventory is full. Returns True if inventory is full, False otherwise.', 'upgrade_base': 'Action: Use collected resources to upgrade the base. Always returns True.', 'is_upgrade_possible': 'Condition: Checks if there are enough resources to upgrade the base. Returns True if upgrade is possible, False otherwise.', 'wait_for_resource': 'Action: Wait for another agent to deliver resources if inventory is full. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Collect resources, upgrade the base if possible, and return to base if inventory is full.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_inventory_full</Condition><Sequence><Action>upgrade_base</Action><Action>return_to_base</Action></Sequence></Sequence><Sequence><Condition>is_upgrade_possible</Condition><Action>collect_resources</Action></Sequence><Action>wait_for_resource</Action></Selector></BehaviorTree>
###
4.// INSTRUCTIONS: Use only the following behaviors {'move_forward': 'Action: Move one step forward. Always returns True.', 'turn_left': 'Action: Turn the robot 90 degrees to the left. Always returns True.', 'turn_right': 'Action: Turn the robot 90 degrees to the right. Always returns True.', 'check_battery_level': 'Condition: Check the current battery level. Returns True if the battery level is below 50%, False otherwise.', 'find_charging_station': 'Action: Find the nearest charging station. Always returns True.', 'return_to_station': 'Action: Return to the charging station. Always returns True.', 'is_battery_full': 'Condition: Check if the battery has been charged to 100%. Returns True if battery is fully charged, False otherwise.', 'task_completed': 'Action: Signal task completion by stopping movement. Always returns True.', 'find_target': 'Action: Search for and identify the target object. Always returns True.', 'pick_up_target': 'Action: Pick up the target object if it is within reach. Always returns True.', 'drop_target': 'Action: Drop the target object at the designated drop-off location. Always returns True.', 'is_target_picked_up': 'Condition: Check if the target object has been picked up. Returns True if the target is picked up, False otherwise.', 'is_at_dropoff': 'Condition: Check if the robot is at the designated drop-off location. Returns True if at the drop-off location, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Search for and pick up a target object, drop it off at the designated location, and recharge battery if it falls below 50% during the process'. Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>check_battery_level</Condition><Sequence><Condition>find_charging_station</Condition><Action>return_to_station</Action></Sequence></Sequence><Sequence><Condition>is_battery_full</Condition><Sequence><Condition>is_at_dropoff</Condition><Action>drop_target</Action></Sequence></Sequence><Sequence><Condition>is_battery_full</Condition><Action>find_target</Action><Action>pick_up_target</Action></Sequence></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'move_forward': 'Action: Move one step forward while maintaining formation. Always returns True.', 'spread_out': 'Action: Spread out and maintain a safe distance from other robots. Always returns True.', 'gather': 'Action: Gather together with other robots in close proximity. Always returns True.', 'wait': 'Action: Pause and wait for a specific amount of time. Always returns True.', 'is_formation_intact': 'Condition: Check if the formation is still intact. Returns True if the formation is still in its original shape, False otherwise.', 'is_distance_safe': 'Condition: Check if the distance between robots is safe. Returns True if the distance is safe, False otherwise.', 'is_at_checkpoint': 'Condition: Check if the robot has reached the designated checkpoint. Returns True if at the checkpoint, False otherwise.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by stopping movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Form a tight formation and navigate to a designated checkpoint, while adjusting formation if obstacle is detected'. Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_distance_safe</Condition><Action>spread_out</Action><Action>wait</Action><Action>gather</Action></Sequence><Sequence><Condition>is_target_detected</Condition><Selector><Sequence><Condition>is_distance_safe</Condition><Action>spread_out</Action></Sequence><Action>gather</Action></Selector></Sequence><Sequence><Condition>is_formation_intact</Condition><Sequence><Condition>is_at_checkpoint</Condition><Action>task_completed</Action></Sequence></Sequence></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'move_forward': 'Action: Move one step forward while maintaining formation. Always returns True.', 'turn_left': 'Action: Turn the robot 90 degrees to the left. Always returns True.', 'turn_right': 'Action: Turn the robot 90 degrees to the right. Always returns True.', 'is_formation_intact': 'Condition: Check if the formation is still intact. Returns True if the formation is still in its original shape, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by stopping movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Search for and reach a target location, while avoiding obstacles and maintaining formation'. Output only the XML behavior tree without extra text
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_path_clear</Condition><Selector><Sequence><Condition>is_target_detected</Condition><Action>turn_right</Action></Sequence><Action>move_forward</Action></Selector></Sequence><Sequence><Condition>is_target_reached</Condition><Action>task_completed</Action></Sequence><Sequence><Condition>is_formation_intact</Condition><Action>move_forward</Action></Sequence></Selector></BehaviorTree>
###
4.// INSTRUCTIONS: Use only the following behaviors {'calculate_path_to_target': 'Action: Calculate the shortest path to a given target location. Always returns True.', 'move_to_next_node': 'Action: Move to the next node in the calculated path. Always returns True.', 'rotate_left': 'Action: Rotate the robot 90 degrees to the left. Always returns True.', 'rotate_right': 'Action: Rotate the robot 90 degrees to the right. Always returns True.', 'is_target_reached': 'Condition: Check if the robot has reached the target location. Returns True if the robot is at the target location, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Generate a behavior tree for a robot to navigate a maze and reach the end goal
4.// OUTPUT:
<BehaviorTree><Sequence><Action>calculate_path_to_target</Action><Selector><Sequence><Action>rotate_left</Action><Action>rotate_right</Action></Sequence><Sequence><Condition>is_target_reached</Condition><Action>task_completed</Action></Sequence></Selector></Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'random_walk': 'Action: Move in a random direction for a set period of time. Always returns True.', 'seek_target': 'Action: Use sensors to detect the target location and move towards it. Always returns True.', 'wait_for_signal': 'Action: Pause and wait for a signal from the group leader to proceed with the next action. Always returns True.', 'is_target_detected': 'Condition: Check if the target location is detected within a certain range. Returns True if the target location is detected, False otherwise.', 'is_leader_signal': 'Condition: Check if a signal has been received from the group leader. Returns True if a signal is received, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Generate a behavior tree for a swarm of robots to locate and rescue a lost member
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_target_detected</Condition><Action>seek_target</Action></Sequence><Sequence><Condition>is_leader_signal</Condition><Action>wait_for_signal</Action></Sequence><Sequence><Action>random_walk</Action></Sequence></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'avoid_collision': 'Action: Use sensors to detect nearby objects and avoid collisions. Always returns True.', 'follow_path': 'Action: Follow a predetermined path to reach the target destination. Always returns True.', 'send_signal': 'Action: Send a signal to other robots to coordinate actions. Always returns True.', 'is_destination_reached': 'Condition: Check if the robot has reached the target destination. Returns True if the destination is reached, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles in the surrounding environment. Returns True if an obstacle is detected, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Generate a behavior tree for a swarm of robots to navigate through a maze while avoiding collisions and reaching the end goal
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_obstacle_detected</Condition><Action>avoid_collision</Action></Sequence><Sequence><Condition>is_destination_reached</Condition><Action>task_completed</Action></Sequence><Sequence><Action>follow_path</Action></Sequence></Selector></BehaviorTree>###
4.// INSTRUCTIONS: Use only the following behaviors {'search_food': 'Subtree node: Represents a behavior tree for searching for food.', 'lead': 'Subtree node: Represents a behavior tree for leading the group of robots.', 'follow': 'Subtree node: Represents a behavior tree for following the leader.', 'is_leader': 'Condition: Check if the agent is currently the leader of the group. Returns True if agent is the leader, False otherwise.', 'is_thirsty': 'Condition: Check if the agent is low on water. Returns True if water level is low, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: If agent is thirsty, search for food. Otherwise, lead the group.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_thirsty</Condition><Action>search_food</Action></Sequence><Sequence><Condition>is_leader</Condition><Action>lead</Action></Sequence></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'attack': 'Action: Attack enemies. Always returns True.', 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'follow_leader': 'Action: Follow the leader's movements. Always returns True.', 'form_line': 'Action: Form a horizontal line with the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_formed_line': 'Condition: Check if a horizontal line is formed with the center. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by stopping all movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Form a line and attack enemies while following the leader's movements. Stop all movement when task is completed.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_target_detected</Condition><Action>attack</Action><Sequence><Condition>is_formed_line</Condition><Action>form_line</Action></Sequence></Sequence><Action>follow_leader</Action><Action>task_completed</Action></Selector></BehaviorTree>
###
6.// INSTRUCTIONS: Use only the following behaviors {'move_forward': 'Action: Move forward in a straight line. Always returns True.', 'turn_left': 'Action: Turn 90 degrees to the left. Always returns True.', 'turn_right': 'Action: Turn 90 degrees to the right. Always returns True.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_line_detected': 'Condition: Check for a line in front of the agent. Returns True if a line is detected, False otherwise.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by stopping all movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Navigate through a maze, following the line while avoiding obstacles. Stop all movement when task is completed.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_line_detected</Condition><Action>move_forward</Action></Sequence><Sequence><Condition>is_obstacle_detected</Condition><Sequence><Action>turn_left</Action><Action>turn_right</Action></Sequence></Sequence><Action>task_completed</Action></Selector></BehaviorTree> 
###
4.// INSTRUCTIONS: Use only the following behaviors {'hunt': 'Action: Hunt for prey in designated area. Always returns True.', 'look_around': "Action: Look around in the environment for potential targets. Always returns True.", 'chase_prey': "Action: Chase the target. Always returns True.", 'capture_prey': "Action: Successfully capture the target. Always returns True.", 'release_prey': "Action: Release the captured prey. Always returns True.", 'is_prey_available': 'Condition: Check if there is a prey available to hunt. Returns True if a prey is within the designated area, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Hunt for prey in designated area. If a prey is available, chase and capture it. If not, release any currently held prey and continue hunting.
4.// OUTPUT:
<BehaviorTree><Sequence><Action>hunt</Action><Condition>is_prey_available</Condition><Sequence><Action>chase_prey</Action><Action>capture_prey</Action></Sequence><Action>release_prey</Action><Action>hunt</Action></Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'find_smallest_number': 'Subtree node: Represents a behavior tree for finding the smallest number from a list.', 'reverse_list': 'Subtree node: Represents a behavior tree for reversing a given list.', 'multiply_by_two': "Subtree node: Represents a behavior tree for multiplying each element in a list by 2", 'sort_list_ascending': "Subtree node: Represents a behavior tree for sorting a list in ascending order"}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Find the smallest number from the given list, reverse the list, and then sort the list in ascending order.
5.// OUTPUT: 
<BehaviorTree><Sequence><Action>find_smallest_number</Action><Action>reverse_list</Action><Action>sort_list_ascending</Action></Sequence></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'collect_item': 'Subtree node: Represents a behavior tree for collecting a specific item.', 'drop_item': 'Subtree node: Represents a behavior tree for dropping a collected item.', 'inspect_item': "Action: Inspect the item and record details. Always returns True.", 'navigate_to_item': "Action: Navigate towards the desired item. Always returns True.", 'pick_up_item': "Action: Pick up the desired item. Always returns True."}, to construct behavior tree in XML format to the following command.If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Collect an item, inspect it, and then drop it. If no item is available, navigate to the nearest item and pick it up.
6.// OUTPUT:
<BehaviorTree><Sequence><Action>collect_item</Action><Sequence><Condition>is_item_available</Condition><Action>inspect_item</Action><Action>drop_item</Action></Sequence><Action>navigate_to_item</Action><Action>pick_up_item</Action></Sequence></BehaviorTree>
###
4.// INSTRUCTIONS: Use only the following behaviors {'explore': 'Subtree node: Represents a behavior tree for exploring a new area.', 'is_area_mapped': 'Condition: Check if the current area has already been mapped and explored. Returns: True if the area is mapped, False otherwise.', 'is_target_found': 'Condition: Check if the target location has been reached or detected. Returns True if the target is found, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Explore the environment until the target location is found, then signal success.
4.// OUTPUT:
<BehaviorTree><Sequence><Action>explore</Action><Selector><Condition>is_target_found</Condition><Action>signal_success</Action></Selector></Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'pick_up_item': 'Action: Pick up an item in the environment and add it to inventory. Always returns True.', 'drop_item': 'Action: Drop the specified item from the inventory. Always returns True.', 'is_inventory_full': 'Condition: Check if the inventory is full. Returns True if the inventory is full, False otherwise.', 'has_item': 'Condition: Check if the specified item is in the inventory. Returns True if the item is in the inventory, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Pick up an item and if the inventory is full, drop it. If the inventory is not full, check if the item is in the inventory. If not, pick up the item. Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>pick_up_item</Action><Condition>is_inventory_full</Condition><Action>drop_item</Action></Sequence><Sequence><Condition>has_item</Condition><Action>pick_up_item</Action></Sequence></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: {Use only the following behaviors {'wait': 'Action: Wait in place for a specified amount of time. Always returns True.', 'is_enemy_present': 'Condition: Check if enemies are nearby. Returns True if enemies are present, False otherwise.', 'flee': 'Action: Flee from enemies. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: If enemies are nearby, flee for 3 seconds. If no enemies are present, wait for 5 seconds and then flee again for 3 seconds. Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>is_enemy_present</Condition><Action>flee</Action></Sequence><Sequence><Action>wait(5)</Action><Action>flee</Action></Sequence></Selector></Sequence></BehaviorTree>###
4.// INSTRUCTIONS: Use only the following behaviors {'navigate_to_destination': 'Action: Navigate to a predefined destination. Always returns True.', 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'choose_destination': 'Function: Randomly choose a destination from a list. Returns the chosen destination.', 'get_current_location': 'Function: Returns the current location of the agent.', 'check_destination_reached': 'Condition: Checks if the agent has reached the destination. Returns True if the agent has reached the destination, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Navigate to a randomly chosen destination from a given list. If obstacles are encountered, choose a new destination and navigate to it.
4.// OUTPUT:
<BehaviorTree><Sequence><Action>navigate_to_destination</Action><Sequence><Condition>is_obstacle_detected</Condition><Action>choose_destination</Action><Action>avoid_obstacle</Action></Sequence><Condition>check_destination_reached</Condition></Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'detect_object': 'Action: Detect objects in the environment. Always returns True.', 'get_closest_object': 'Function: Returns the closest object detected by the agent.', 'move_towards_object': 'Action: Move towards a specific object. Always returns True.', 'pick_up_object': 'Action: Pick up the target object. Accepts the object ID as parameter.', 'drop_object': 'Action: Drop the currently held object. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Detect and pick up the closest object in the environment. If no objects are detected, move towards a random location.
5.// OUTPUT:
<BehaviorTree><Sequence><Sequence><Condition>detect_object</Condition><Action>get_closest_object</Action><Action>pick_up_object</Action></Sequence><Selector><Sequence><Condition>no_objects_detected</Condition><Action>move_towards_object</Action></Sequence><Action>drop_object</Action></Selector></Sequence></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'detect_social_space': 'Action: Detect the social space around the agent. Always returns True.', 'check_social_space_size': 'Function: Calculates the size of the social space. Returns the size of the social space as an integer.', 'is_social_space_occupied': 'Condition: Checks if the social space is occupied by other agents. Returns True if the social space is occupied, False otherwise.', 'move_forward': 'Action: Move forward in the environment. Accepts a distance parameter.', 'turn_left': 'Action: Turn left by a specified angle. Accepts an angle parameter.', 'turn_right': 'Action: Turn right by a specified angle. Accepts an angle parameter.', 'stop_moving': 'Action: Stop moving. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Move towards a randomly chosen location while maintaining a safe social distance from other agents. If the social space is occupied, turn left and continue moving.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>detect_social_space</Condition><Sequence><Action>move_forward</Action><Condition>is_social_space_occupied</Condition><Sequence><Action>turn_left</Action><Action>move_forward</Action></Sequence></Sequence></Selector><Action>stop_moving</Action></BehaviorTree>(50 words)

Assume the robot moves in a grid pattern. For each area, it will scan for survivors and mark it as searched. If a survivor is found, it will call for rescue. The robot will continue searching until the entire area is searched.
###
4.// INSTRUCTIONS: Use only the following behaviors {'collect_resource': 'Action: Collect the resource at the current location. Always returns True.', 'deposit_resource': 'Action: Deposit the collected resource at the designated location. Always returns True.', 'is_resource_available': 'Condition: Check if there is a resource available at the current location. Returns True if a resource is available, False otherwise.', 'is_at_deposit_location': 'Condition: Check if the robot is at the designated deposit location. Returns True if at the deposit location, False otherwise.', 'is_carrying_resource': 'Condition: Check if the robot is currently carrying a resource. Returns True if carrying a resource, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Send a swarm of robots to collect resources from various locations and deposit them at a central location.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_resource_available</Condition><Action>collect_resource</Action><Sequence><Condition>is_carrying_resource</Condition><Selector><Sequence><Condition>is_at_deposit_location</Condition><Action>deposit_resource</Action></Sequence><Action>move_to_deposit_location</Action></Selector></Sequence></Sequence><Selector><Sequence><Condition>is_resource_available</Condition><Action>collect_resource</Action></Sequence><Action>move_to_next_resource_location</Action></Selector></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'follow_leader': 'Action: Follow the designated leader agent. Always returns True.', 'avoid_collisions': 'Action: Avoid collisions with nearby agents through communication and coordination. Always returns True.', 'wait_for_signal': 'Action: Wait for a signal from the leader before moving. Always returns True.', 'is_leader_moving': 'Condition: Check if the leader agent is currently moving. Returns True if the leader is moving, False otherwise.', 'is_leader_at_destination': 'Condition: Check if the leader has reached the designated destination. Returns True if the leader is at the destination, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Coordinate the movement of a swarm of robots led by a designated leader to reach a specific destination.
5.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_leader_moving</Condition><Selector><Sequence><Condition>is_obstacle_detected</Condition><Action>communicate_avoidance</Action></Sequence><Action>follow_leader</Action></Selector></Sequence><Condition>is_leader_at_destination</Condition><Action>wait_for_signal</Action></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'search_area': 'Subtree node: Represents a behavior tree for searching a designated area.', 'send_message': 'Action: Send a message to other robots to coordinate and communicate. Always returns True.', 'wait_for_reply': 'Action: Wait for a reply message from other robots. Always returns True.', 'is_target_found': 'Condition: Check if the target has been found. Returns True if the target is found, False otherwise.', 'is_search_area_covered': 'Condition: Check if the designated search area has been covered. Returns True if the search area is covered, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Search for a target in a designated area while coordinating and communicating with other robots.
6.// OUTPUT:
<BehaviorTree><Sequence><Action>search_area</Action><Condition>is_target_found</Condition><Sequence><Action>send_message</Action><Action>wait_for_reply</Action></Sequence></Sequence><Condition>is_search_area_covered</Condition><Action>return_to_base</Action></BehaviorTree>###
4.// INSTRUCTIONS: Use only the following behaviors {'start_engine': 'Action: Start the engine of the drone. Always returns True.', 'takeoff': 'Action: Lift off into the air. Always returns True.', 'search_for_target': 'Action: Scan the area for the target using cameras and sensors. Always returns True.', 'hover': 'Action: Hover in the air to maintain current position. Always returns True.', 'land': 'Action: Land the drone on the ground. Always returns True.', 'is_target_detected': 'Condition: Check if the target is detected in the current area. Returns True if the target is detected, False otherwise.', 'is_target_reachable': 'Condition: Check if the target is within range for capturing. Returns True if the target is within range, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'track and capture a moving target'
4.// OUTPUT:
<BehaviorTree><Sequence><Action>start_engine</Action><Action>takeoff</Action><Selector><Sequence><Action>search_for_target</Action><Selector><Action>hover</Action><Action>land</Action></Selector></Sequence><Selector><Condition>is_target_detected</Condition><Selector><Condition>is_target_reachable</Condition><Action>capture_target</Action></Selector></Selector></Selector></Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'move_to_next_checkpoint': 'Action: Move the robot to the next checkpoint on the route. Always returns True.', 'detect_water_source': 'Action: Use sensors to detect a nearby water source. Always returns True.', 'collect_water': 'Action: Collect water from the detected source. Returns True once the water is collected successfully.', 'deposit_water': 'Action: Deposit the collected water in a designated storage tank. Returns True once the water is deposited successfully.', 'is_checkpoint_reached': 'Condition: Check if the robot has reached the next checkpoint. Returns True if the checkpoint is reached, False otherwise.', 'is_water_source_detected': 'Condition: Check if a water source is detected nearby. Returns True if a water source is detected, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Generate behavior tree for a robot to collect and deposit water from various points along a designated route
5.// OUTPUT:
<BehaviorTree><Sequence><Selector><Condition>is_checkpoint_reached</Condition><Action>move_to_next_checkpoint</Action></Selector><Selector><Condition>is_water_source_detected</Condition><Selector><Action>detect_water_source</Action><Sequence><Action>collect_water</Action><Action>deposit_water</Action></Sequence></Selector></Selector></Sequence></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'move_to_object': 'Action: Move the robot to the closest object detected. Returns True once the object is reached.', 'scan_for_objects': 'Action: Use sensors to scan the surrounding environment for objects. Always returns True.', 'pickup_object': 'Action: Pick up the nearest object using a robotic arm. Returns True once the object is picked up successfully.', 'place_object': 'Action: Place the object in a designated location. Returns True once the object is placed successfully.', 'is_object_detected': 'Condition: Check if an object is detected nearby. Returns True if an object is detected, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Generate behavior tree for a robot to search for and retrieve objects in the surrounding environment
6.// OUTPUT:
<BehaviorTree><Sequence><Selector><Condition>is_object_detected</Condition><Selector><Action>scan_for_objects</Action><Sequence><Action>move_to_object</Action><Sequence><Action>pickup_object</Action><Action>place_object</Action></Sequence></Selector></Selector></Sequence></BehaviorTree>
###
4.// INSTRUCTIONS: Use only the following behaviors{'move_forward': 'Action: Move the robot forward by one unit. Always returns True.', 'turn_left': 'Action: Turn the robot left by 90 degrees. Always returns True.', 'turn_right': 'Action: Turn the robot right by 90 degrees. Always returns True.', 'rotate_clockwise': 'Action: Rotate the robot clockwise by 45 degrees. Always returns True.', 'rotate_counterclockwise': 'Action: Rotate the robot counterclockwise by 45 degrees. Always returns True.', 'detect_obstacle': 'Condition: Check if an obstacle is detected in front of the robot. Returns True if an obstacle is detected, False otherwise.', 'detect_target': 'Condition: Check if a target is detected within 5 units. Returns True if a target is detected, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Move robot forward, turn left, detect an obstacle, rotate counterclockwise if obstacle is present, and then move forward again.
4.// OUTPUT:
<BehaviorTree> <Sequence> <Action>move_forward</Action> <Action>turn_left</Action> <Selector> <Sequence> <Condition>detect_obstacle</Condition> <Action>rotate_counterclockwise</Action> </Sequence> <Action>move_forward</Action> </Selector> </Sequence> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors{'scan_area': 'Action: Scan the surrounding area for potential targets. Always returns True.', 'move_to_target': 'Action: Move towards the target object. Always returns True.', 'push_object': 'Action: Push the target object. Always returns True.', 'lift_object': 'Action: Lift the target object. Always returns True.', 'detect_target': 'Condition: Check if a target object is detected within 10 units. Returns True if a target is detected, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Scan the area for potential targets, move towards the target object, lift the object, then push it to a designated location.
5.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Action>scan_area</Action> <Selector> <Sequence> <Condition>detect_target</Condition> <Action>move_to_target</Action> <Selector> <Sequence> <Action>lift_object</Action> <Action>push_object</Action> </Sequence> </Selector> </Selector> </Sequence> </Selector> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors{'maneuver_obstacle': 'Action: Use specific technique to maneuver around the obstacle. Always returns True.', 'detect_obstacle': 'Condition: Check if an obstacle is detected in front of the robot. Returns True if an obstacle is detected, False otherwise.', 'detect_target': 'Condition: Check if a target is detected within 10 units. Returns True if a target is detected, False otherwise.', 'count_obstacles': 'Condition: Count the number of obstacles detected within range. Returns the number of obstacles detected.', 'get_closer_to_target': 'Action: Move closer to the target object. Always returns True.', 'pick_up_object': 'Action: Pick up the target object. Always returns True.', 'place_object': 'Action: Place the object at a designated location. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Find the path with the least obstacles, maneuver around them, pick up the target object, and place it at the designated location.
6.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Action>count_obstacles</Action> <Selector> <Sequence> <Condition>detect_obstacle</Condition> <Action>maneuver_obstacle</Action> </Sequence> <Action>get_closer_to_target</Action> </Selector> </Sequence> <Selector> <Sequence> <Condition>detect_target</Condition> <Selector> <Sequence> <Action>pick_up_object</Action> <Action>place_object</Action> </Sequence> </Selector> </Sequence> <Sequence> <Action>get_closer_to_target</Action> <Action>place_object</Action> </Sequence> </Selector> </Sequence> </BehaviorTree>###
4.// INSTRUCTIONS: Use only the following behaviors {'gather_resources': 'Action: Gather resources from the environment and store them. Always returns True.', 'upgrade': 'Action: Use gathered resources to upgrade agent. Always returns True.', 'is_inventory_full': 'Condition: Checks if the agent's inventory is full. Returns True if inventory is full, False otherwise.', 'is_upgrade_complete': 'Condition: Checks if the agent's upgrade is complete. Returns True when the upgrade is completed, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Gather resources until inventory is full, then upgrade.
4.// OUTPUT:
<BehaviorTree><Sequence><Action>gather_resources</Action><Condition>is_inventory_full</Condition></Sequence><Sequence><Condition>is_upgrade_complete</Condition><Action>upgrade</Action></Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'find_path_to_target': 'Subtree node: Represents a behavior tree for finding the path to the target.', 'move_to_target': 'Action: Moves the agent towards the specified target location. Returns True when the agent reaches the target, False otherwise.', 'is_on_path': 'Condition: Checks if the agent is on the specified path. Returns True if the agent is on the path, False otherwise.', 'is_target_reached': 'Condition: Checks if the target has been reached. Returns True when the target is reached, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Find the path to the target and move towards it until it is reached.
5.// OUTPUT:
<BehaviorTree><Sequence><Action>find_path_to_target</Action><Sequence><Condition>is_on_path</Condition><Action>move_to_target</Action><Condition>is_target_reached</Condition></Sequence></Sequence></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'group_movement': "Action: Move as a group with other agents. Always returns True.", 'perform_task': 'Action: Perform a specific task coordinated with other agents. Returns True when the task is completed, False otherwise.', 'is_task_in_progress': 'Condition: Checks if the task is already being performed by another agent. Returns True if the task is in progress, False otherwise.', 'is_group_moving': 'Condition: Checks if the group is currently moving. Returns True if the group is moving, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Move in a group and perform a task until it is completed.
6.// OUTPUT:
<BehaviorTree><Sequence><Selector><Action>group_movement</Action><Condition>is_group_moving</Condition></Selector><Sequence><Action>perform_task</Action><Condition>is_task_in_progress</Condition></Sequence></Sequence></BehaviorTree>      
###
4.// INSTRUCTIONS: Use only the following behaviors {'detect_target': 'Action: Detect the target using sensors. Always returns True.', 'move_to_target': 'Action: Move towards the detected target. Returns False if obstacles are encountered.', 'search_for_target': 'Action: Scans the area for the target using sensors. Always returns True.', 'target_visible': 'Condition: Check if the target is currently visible. Returns True if target is within line of sight, False otherwise.', 'lost_target': 'Condition: Check if the target was lost. Returns True if target was out of sight for more than 1 minute, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Create a behavior tree for a robot to search for a target and move towards it if it is visible.
4.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Action>detect_target</Action> <Condition>target_visible</Condition> <Action>move_to_target</Action> </Sequence> <Action>search_for_target</Action> </Selector> </BehaviorTree>
      
      
###
5.// INSTRUCTIONS: Use only the following behaviors {'explore': 'Action: Explore for undiscovered areas. Always returns True.', 'collect_resource': 'Action: Collect resources found while exploring. Always returns True.', 'deposit_resource': 'Action: Deposit collected resources at a designated location. Always returns True.', 'gather_resource': 'Condition: Check if there are any resources nearby to collect. Returns True if resources are within 5 units, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Create a behavior tree for a robot to explore and collect resources, depositing them at a designated location.
5.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Action>explore</Action> <Condition>gather_resource</Condition> <Action>collect_resource</Action> <Action>deposit_resource</Action> </Sequence> <Action>explore</Action> </Selector> </BehaviorTree>
      
###
6.// INSTRUCTIONS: Use only the following behaviors {'follow_leader': 'Action: Follow the designated leader. Returns False if leader is too far away.', 'send_signal': "Action: Send message to other robots indicating current status. Always returns True.", 'wait_for_signal': "Action: Wait for signal from other robots before proceeding. Returns False if no signal is received within 1 minute.", 'is_leader_visible': 'Condition: Check if the designated leader is currently visible. Returns True if leader is within line of sight, False otherwise.', 'is_leader_lost': 'Condition: Check if the designated leader was lost. Returns True if leader was out of sight for more than 1 minute, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Generate behavior tree for a swarm of robots to follow a designated leader and send signals to each other.
6.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_leader_visible</Condition><Action>follow_leader</Action><Action>send_signal</Action><Condition>is_leader_lost</Condition><Action>wait_for_signal</Action></Sequence></BehaviorTree>###
4.// INSTRUCTIONS: Use only the following behaviors {'move_to_target': 'Action: Move towards the designated target location. Always returns True.', 'check_for_obstacles': 'Action: Use sensors to detect obstacles in the path. Always returns True.', 'is_target_reached': 'Condition: Check if the robot has reached the designated target location. Returns True if the target is reached, False otherwise.', 'is_target_in_sight': 'Condition: Check if the target is in sight within 30 units. Returns True if the target is in sight, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Generate behavior tree for a robot to navigate towards a specific location while avoiding obstacles along the way
4.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_target_reached</Condition><Sequence><Condition>is_target_in_sight</Condition><Action>move_to_target</Action></Sequence><Selector><Sequence><Condition>is_obstacle_detected</Condition><Action>check_for_obstacles</Action></Sequence><Action>avoid_obstacle</Action></Selector></Sequence></BehaviorTree>
###
5.// INSTRUCTIONS: Use only the following behaviors {'move_to_next_location': 'Action: Move to the next designated location. Always returns True.', 'analyze_data': 'Action: Analyze data collected from previous location. Always returns True.', 'record_data': 'Action: Record the data collected from the current location. Always returns True.', 'is_dataset_empty': 'Condition: Check if the dataset has any relevant information. Returns True if the dataset is empty, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Generate behavior tree for a robot to map out and collect data from different locations in an unknown environment
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_dataset_empty</Condition><Action>record_data</Action></Sequence><Action>move_to_next_location</Action><Action>analyze_data</Action></Selector></BehaviorTree>
###
6.// INSTRUCTIONS: Use only the following behaviors {'change_speed': 'Action: Change the robot's speed to the given value. Always returns True.', 'follow_line': 'Action: Use line following algorithms to follow a specified path. Always returns True.', 'is_line_detected': 'Condition: Check if a line is detected in the current environment. Returns True if a line is detected, False otherwise.', 'is_target_reached': 'Condition: Check if the robot has reached the designated target location. Returns True if the target is reached, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Generate behavior tree for a robot to follow a specific path at a designated speed and stop at a certain location
6.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_target_reached</Condition><Selector><Sequence><Condition>is_line_detected</Condition><Action>change_speed</Action><Action>follow_line</Action></Sequence><Action>stop</Action></Selector></Sequence></BehaviorTree>
###
4.// INSTRUCTIONS: Use only the following behaviors {'gather_items': "Action: Gather items from the environment and store them. Returns True if items are successfully gathered, False otherwise.", 'is_inventory_full': "Condition: Check if the robot's inventory is full. Returns True if inventory is full, False otherwise.", 'is_target_reached': "Condition: Check if the target location has been reached. Returns True if target is reached, False otherwise.", 'move_to_target': "Action: Move towards the target location. Returns True if movement is successful, False otherwise.", 'random_movement': "Action: Move randomly within the environment. Always returns True.", 'return_to_start': "Action: Return to the starting location. Returns True if successfully returned, False otherwise.", 'set_destination': "Action: Set the target location for the robot. Returns True if destination is set, False otherwise."}, to construct behavior tree in XML format to the following task. If the available behaviors do not fit with the user command say (Sorry, I can't do the task).
4.// USER COMMAND: Given an inventory capacity of 20, gather items until the inventory is full. Then return to the starting location.
4.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>is_inventory_full</Condition> <Action>return_to_start</Action> </Sequence> <Action>gather_items</Action> </Selector> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'charge_battery': "Action: Charge the robot's battery. Always returns True.", 'is_battery_low': "Condition: Check if the robot's battery is below a certain threshold. Returns True if battery is low, False otherwise.", 'move_to_charging_station': "Action: Move towards the nearest charging station. Returns True if movement is successful, False otherwise.", 'navigate_to_location': "Action: Navigate to a specific location. Returns True if successfully navigated, False otherwise.", 'scan_surroundings': "Action: Scan the surroundings for potential obstacles or targets. Always returns True.", 'set_target_location': "Action: Set the target location for the robot. Returns True if destination is set, False otherwise."}, to construct behavior tree in XML format to the following task. If the available behaviors do not fit with the user command say (Sorry, I can't do the task).
5.// USER COMMAND: Given a low battery, navigate to the nearest charging station. Once charged, scan the surroundings and then move to a specific location.
5.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>is_battery_low</Condition> <Selector> <Action>set_target_location</Action> <Action>move_to_charging_station</Action> </Selector> <Action>charge_battery</Action> <Action>set_target_location</Action> <Action>scan_surroundings</Action> <Action>move_to_target</Action> </Sequence> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'is_weapon_ready': "Condition: Check if the weapon is fully loaded. Returns True if weapon is ready, False otherwise.", 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'reload_weapon': 'Action: Reload the weapon. Returns True if successfully reloaded, False otherwise.'}, to construct behavior tree in XML format to the following task. If the available behaviors do not fit with the user command say (Sorry, I can't do the task).
6.// USER COMMAND: While attacking enemies, check if the weapon is loaded. If not, reload the weapon. Once the weapon is ready, continue attacking.
6.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>is_weapon_ready</Condition> <Action>continue_movement_agent</Action> </Sequence> <Selector> <Action>is_obstacle_detected</Action> <Sequence> <Action>change_color_to_green</Action> <Action>is_line_formed</Action> <Action>change_color_to_white</Action> </Sequence> <Action>avoid_obstacle</Action> </Selector> </BehaviorTree>###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'move_forward': 'Action: Move forward in a straight line. Always returns True.', 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_at_checkpoint': 'Condition: Check if the robot has reached a designated checkpoint. Returns True if at the checkpoint, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Navigate through a series of checkpoints and change color to green at each checkpoint'. Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree><Sequence><Selector><Condition>is_at_checkpoint</Condition><Action>change_color_to_green</Action></Selector><Sequence><Condition>is_agent_in_nest</Condition><Action>move_forward</Action></Sequence><Sequence><Condition>is_target_grabbed</Condition><Sequence><Condition>is_at_dropoff</Condition><Action>drop_target</Action></Sequence></Sequence><Sequence><Condition>is_obstacle_detected</Condition><Action>avoid_obstacle</Action></Sequence></Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_blue': "Action: Change agent's color to blue. Always returns True.", 'change_color_to_red': "Action: Change agent's color to red. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a horizontal line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_enemy_detected': 'Condition: Check if an enemy is detected nearby. Returns True if an enemy is detected, False otherwise.', 'is_line_formed': 'Condition: Check if a horizontal line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Form a horizontal line and change color to blue whenever an enemy is detected nearby'. Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree><Selector><Condition>is_enemy_detected</Condition><Action>form_line</Action><Action>change_color_to_blue</Action></Sequence><Action>wander</Action></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'move_forward': 'Action: Move forward in a straight line. Always returns True.', 'move_backward': 'Action: Move backward in a straight line. Always returns True.', 'rotate_left': 'Action: Rotate the robot 90 degrees to the left. Always returns True.', 'rotate_right': 'Action: Rotate the robot 90 degrees to the right. Always returns True.', 'change_color_to_yellow': "Action: Change agent's color to yellow. Always returns True.", 'change_color_to_purple': "Action: Change agent's color to purple. Always returns True.", 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_at_checkpoint': 'Condition: Check if the robot has reached a designated checkpoint. Returns True if at the checkpoint, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'is_enemy_detected': 'Condition: Check if an enemy is detected nearby. Returns True if an enemy is detected, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Navigate through a series of checkpoints, avoid obstacles, and change color to yellow when an enemy is nearby and purple when at the final checkpoint'. Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree><Sequence><Selector><Condition>is_enemy_detected</Condition><Action>change_color_to_yellow</Action></Selector><Sequence><Condition>is_at_checkpoint</Condition><Action>rotate_left</Action></Sequence><Sequence><Condition>is_target_reached</Condition><Action>move_backward</Action></Sequence><Sequence><Condition>is_obstacle_detected</Condition><Action>move_backward</Action></Sequence></Sequence><Condition>is_at_checkpoint</Condition><Action>rotate_left</Action></Selector><Sequence><Selector><Condition>is_enemy_detected</Condition><Action>move_forward</Action></Selector><Sequence><Condition>is_target_reached</Condition><Action>task_completed</Action></Sequence></Sequence></Selector></BehaviorTree>
###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Follow a path to the target, avoiding obstacles along the way.'Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>is_target_detected</Condition> <Action>continue_movement_agent</Action> </Sequence> <Selector> <Sequence> <Condition>is_obstacle_detected</Condition> <Action>avoid_obstacle</Action> </Sequence> <Action>wander</Action> </Selector> </Selector> <Sequence> <Condition>is_target_reached</Condition> <Action>task_completed</Action> </Sequence> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Navigate through a maze, staying on a clear path at all times.'Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>is_path_clear</Condition> <Action>continue_movement_agent</Action> </Sequence> <Action>avoid_obstacle</Action> </Selector> <Selector> <Sequence> <Action>wander</Action> </Selector> </Sequence> <Selector> <Condition>is_obstacle_detected</Condition> <Action>agent_movement_freeze</Action> <Action>task_completed</Action> </Sequence> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Move towards a target and form a line with the first robot encountered.'Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Selector> <Condition>is_target_detected</Condition> <Action>continue_movement_agent</Action> </Selector> <Action>wander</Action> </Sequence> <Selector> <Condition>is_obstacle_detected</Condition> <Action>form_line 
###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'change_color_to_blue': "Action: Change agent's color to blue. Always returns True.", 'change_color_to_red': "Action: Change agent's color to red. Always returns True.", 'gather_resource': 'Action: Gather nearby resources. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_resource_available': 'Condition: Check if there are resources available. Returns True if resources are available within 10 units, False otherwise.', 'is_resource_collected': 'Condition: Check if the resource has been collected. Returns True if the resource has been collected, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Search for resources, gather them, and return to the nest to store them.'
4.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>is_agent_in_nest</Condition> <Action>change_color_to_red</Action> <Action>agent_movement_freeze</Action> </Sequence> <Sequence> <Condition>is_resource_available</Condition> <Action>gather_resource</Action> <Action>change_color_to_blue</Action> <Action>task_completed</Action> </Sequence> </Selector> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'change_color_to_blue': "Action: Change agent's color to blue. Always returns True.", 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_red': "Action: Change agent's color to red. Always returns True.", 'follow_target': 'Action: Follow a designated target. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Find and follow a designated target until it is reached, then change color to blue.'
5.// OUTPUT:
<BehaviorTree> <Sequence> <Condition>is_target_detected</Condition> <Action>follow_target</Action> <Sequence> <Condition>is_target_reached</Condition> <Action>change_color_to_blue</Action> <Action>task_completed</Action> </Sequence> </Sequence> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'explore': 'Action: Move to an unexplored area. Always returns True.', 'is_agent_at_boundary': 'Condition: Check if the agent is at the boundary of the environment. Returns True if the agent is at the boundary, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_target_collected': 'Condition: Check if the target has been collected. Returns True if the target has been collected, False otherwise.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Explore the environment and avoid obstacles until target is detected, then collect the target and return to the starting position.'
6.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>is_target_detected</Condition> <Action>task_completed</Action> </Sequence> <Sequence> <Condition>is_agent_at_boundary</Condition> <Action>wander</Action> <Action>task_completed</Action> </Sequence> <Sequence> <Condition>is_obstacle_detected</Condition> <Action>avoid_obstacle</Action> <Action>task_completed</Action> </Sequence> <Sequence> <Action>explore</Action> <Condition>is_target_collected</Condition> <Action>agent_movement_freeze</Action> </Sequence> </Selector> </BehaviorTree>
###
4.// INSTRUCTIONS: Use only the following behaviors {'move_forward': 'Action: Move forward in a straight line. Always returns True.', 'turn_left': 'Action: Turn the robot 90 degrees to the left. Always returns True.', 'turn_right': 'Action: Turn the robot 90 degrees to the right. Always returns True.', 'random_turn': 'Action: Turn the robot in a random direction. Always returns True.', 'rotate_left': 'Action: Rotate the robot's head 90 degrees to the left. Always returns True.', 'rotate_right': 'Action: Rotate the robot's head 90 degrees to the right. Always returns True.', 'detect_wall': 'Condition: Check for a wall in front of the robot. Returns True if a wall is detected, False otherwise.', 'detect_enemy': 'Condition: Check for an enemy within sight. Returns True if an enemy is detected, False otherwise.', 'detect_obstacle': 'Condition: Check for an obstacle in front of the robot. Returns True if an obstacle is detected, False otherwise.', 'detect_target': 'Condition: Check for a target within sight. Returns True if a target is detected, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Move forward until an obstacle is detected, then turn left and rotate head to scan for enemy.' Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree><Sequence><Condition>detect_obstacle</Condition><Action>turn_left</Action><Action>rotate_left</Action></Sequence><Action>move_forward</Action></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'move_toward_target': 'Action: Move towards the designated target location. Always returns True.', 'analyze_area': 'Action: Use sensors to analyze the area for threats. Always returns True.', 'communicate_with_team': 'Action: Send and receive information from other team members. Always returns True.', 'deploy_weapon': 'Action: Deploy a weapon to neutralize a threat. Always returns True.', 'is_target_reachable': 'Condition: Check if the designated target location is reachable. Returns True if reachable, False otherwise.', 'is_area_safe': 'Condition: Check if the analyzed area is deemed safe. Returns True if safe, False otherwise.', 'is_team_comms_active': 'Condition: Check if team communication is active. Returns True if active, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Analyze the area and deploy a weapon if a threat is detected. Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_area_safe</Condition><Action>analyze_area</Action><Selector><Condition>is_target_reachable</Condition><Action>move_toward_target</Action><Sequence><Condition>is_team_comms_active</Condition><Action>communicate_with_team</Action></Sequence></Selector></Sequence><Selector><Condition>is_target_reachable</Condition><Action>deploy_weapon</Action></Selector></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'avoid_collision': 'Action: Avoid potential collisions with other robots. Always returns True.', 'join_swarm': 'Action: Move towards the designated leader and join the swarm. Always returns True.', 'random_movement': 'Action: Move randomly within the designated area. Always returns True.', 'scan_leader': 'Action: Scan for the location of the designated leader. Always returns True.', 'pick_item': 'Action: Pick up an item within reach. Always returns True.', 'place_item': 'Action: Place the picked up item in a designated location. Always returns True.', 'is_collision_detected': 'Condition: Check if a collision is detected. Returns True if a collision is detected, False otherwise.', 'is_item_picked': 'Condition: Check if an item has been picked up. Returns True if an item is picked up, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Randomly move within the designated area, and join the swarm if the leader is within sight. Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_collision_detected</Condition><Selector><Action>avoid_collision</Action><Sequence><Action>random_movement</Action><Condition>is_item_picked</Condition></Sequence></Selector></Sequence><Selector><Condition>is_collision_detected</Condition><Action>join_swarm</Action></Selector></BehaviorTree> 
###
4.// INSTRUCTIONS: Use only the following behaviors {'check_battery_level': 'Condition: Check if the robot's battery level is above 75%. Returns True if the battery level is above 75%, False otherwise.', 'charge_battery': 'Action: Return to charging station and recharge battery. Always returns True.', 'routines_complete': 'Condition: Check if all predetermined tasks have been completed. Returns True if all tasks are completed, False otherwise.', 'navigate_to_point': 'Action: Move towards the designated navigation point. Always returns True.', 'gather_samples': 'Action: Collect and store environmental samples. Always returns True.', 'analyze_samples': 'Action: Analyze gathered samples for data. Always returns True.', 'retrieve_GPS_coordinates': 'Action: Retrieve GPS coordinates of current location. Always returns True.', 'send_data': 'Action: Send gathered data to central hub for analysis. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Generate a behavior tree for a swarm of robots to perform a routine of scientific data collection and analysis, while ensuring their battery levels do not fall below 75%.
4.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>check_battery_level</Condition> <Action>navigate_to_point</Action> <Sequence><Condition>is_target_reached</Condition> <Action>gather_samples</Action> <Action>retrieve_GPS_coordinates</Action> <Action>send_data</Action> <Action>analyze_samples</Action> <Sequence><Condition>routines_complete</Condition> <Action>agent_movement_freeze</Action> </Sequence> </Sequence> <Action>charge_battery</Action> </Selector> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'search_for_intruder': 'Action: Move around the designated search area to locate intruders. Always returns True.', 'notify_swarm': 'Action: Use signal to alert other swarm members of intruder presence. Always returns True.', 'surround_and_encircle': 'Action: Surround and encircle the detected intruder. Always returns True.', 'capture_intruder': 'Action: Use capturing mechanism to immobilize the intruder. Always returns True.', 'return_to_nest': 'Action: Return to the nest for further instructions. Always returns True.', 'is_intruder_detected': 'Condition: Check if an intruder has been detected in the designated search area. Returns True if an intruder is detected, False otherwise.', 'has_intruder_been_captured': 'Condition: Check if an intruder has been successfully captured. Returns True if the intruder has been captured, False otherwise.', 'remaining_battery_above_50%': 'Condition: Check if the robot's battery level is above 50%. Returns True if the battery level is above 50%, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Generate a behavior tree for a swarm of robots to defend their territory by capturing intruders while ensuring their battery levels do not fall below 50%.
5.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>remaining_battery_above_50%</Condition> <Action>search_for_intruder</Action> <Sequence> <Condition>is_intruder_detected</Condition> <Action>notify_swarm</Action> <Action>surround_and_encircle</Action> <Action>capture_intruder</Action> <Sequence> <Condition>has_intruder_been_captured</Condition> <Action>return_to_nest</Action> </Sequence> </Sequence> <Action>charge_battery</Action> </Selector> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'find_path_to_nest': 'Action: Use pathfinding algorithm to locate shortest route to the nest. Always returns True.', 'navigate_to_nest': 'Action: Follow the path to the nest. Always returns True.', 'gather_resources': 'Action: Collect necessary resources for building project. Always returns True.', 'check_resource_level': 'Condition: Check if the robot's resource level is above a predetermined threshold. Returns True if the resource level is above the threshold, False otherwise.', 'build_structure': 'Action: Use collected resources to build designated structure. Always returns True.', 'analyze_environment': 'Action: Use sensors to analyze environment for potential hazards. Always returns True.', 'avoid_hazard': 'Action: Use established avoidance protocol to steer clear of potential hazards. Always returns True.', 'check_temperature': 'Condition: Check the ambient temperature. Returns True if temperature is between safe ranges, False otherwise.', 'return_to_bunker': 'Action: Return to designated bunker in case of extreme temperature conditions. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Generate a behavior tree for a swarm of robots to construct a new building while ensuring their resource levels remain above a certain threshold and monitoring for environmental hazards.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>check_resource_level</Condition><Action>gather_resources</Action><Action>find_path_to_nest</Action><Action>navigate_to_nest</Action><Sequence><Condition>is_at_nest</Condition><Action>analyze_environment</Action></Sequence></Sequence><Sequence><Condition>has_detected_hazard</Condition><Sequence><Condition>check_temperature</Condition><Action>avoid_hazard</Action></Sequence></Sequence><Sequence><Condition>is_resource_level_above_threshold</Condition><Action>build_structure</Action></Sequence><Sequence><Condition>is_temperature_too_high</Condition><Action>return_to_bunker</Action></Sequence></Selector></BehaviorTree>
###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'follow_leader': 'Action: Follow the movement of the designated leader robot. Always returns True.', 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_blue': "Action: Change agent's color to blue. Always returns True.", 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'is_leader_moving_left': 'Condition: Check if the leader robot is moving left. Returns True if the leader is moving left, False otherwise.', 'is_leader_moving_right': 'Condition: Check if the leader robot is moving right. Returns True if the leader is moving right, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Generate a behavior tree for a swarm of robots to follow a designated moving leader, avoid obstacles, and change color to blue when near the target.Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree> <Sequence> <Condition>is_leader_moving_left</Condition> <Action>agent_movement_freeze</Action> <Action>follow_leader</Action> </Sequence> <Selector> <Sequence> <Condition>is_target_detected</Condition> <Action>change_color_to_blue</Action> <Action>task_completed</Action> </Sequence> <Action>avoid_obstacle</Action> </Selector> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'move_to_target': 'Action: Move towards the designated target. Always returns True.', 'change_color_to_yellow': "Action: Change agent's color to yellow. Always returns True.", 'change_color_to_orange': "Action: Change agent's color to orange. Always returns True.", 'is_agent_near_target': 'Condition: Check if the agent is within 10 units of distance to the target. Returns True if the agent is near the target, False otherwise.', 'is_agent_far_from_target': 'Condition: Check if the agent is more than 15 units of distance to the target. Returns True if the agent is far from the target, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_reached': 'Condition: Check if target is reached. Returns True if the target is reached, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Generate a behavior tree for a swarm of robots to reach the target, change color to yellow when near, and change color to orange when reached the target.Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>is_target_reached</Condition> <Action>change_color_to_orange</Action> <Action>task_completed</Action> </Sequence> <Sequence> <Condition>is_agent_near_target</Condition> <Action>change_color_to_yellow</Action> </Sequence> </Selector> <Sequence> <Selector> <Sequence> <Condition>is_agent_far_from_target</Condition> <Action>move_to_target</Action> </Sequence> <Action>wander</Action> </Selector> <Action>agent_movement_freeze</Action> </Sequence> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'cooperate': 'Action: Cooperate with other robots by following set instructions. Always returns True.', 'avoid_other_robots': 'Action: Avoid other robots in the environment. Always returns True.', 'gather_resource': 'Action: Gather and collect resources from the environment. Always returns True.', 'is_resource_available': 'Condition: Check if there are resources available in the environment. Returns True if there are resources, False otherwise.', 'is_agent_near_other_robot': 'Condition: Check if the agent is within 5 units of distance to another robot. Returns True if the agent is near another robot, False otherwise.', 'is_agent_far_from_other_robot': 'Condition: Check if the agent is more than 10 units of distance to another robot. Returns True if the agent is far from another robot, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'harvest_resource': 'Action: Harvest the gathered resources. Always returns True.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Generate a behavior tree for a swarm of robots to gather and harvest resources, while avoiding other robots and cooperating with each other.Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>is_resource_available</Condition> <Action>gather_resource</Action> <Selector> <Sequence> <Condition>is_agent_near_other_agent</Condition> <Action>cooperate</Action> </Sequence> <Action>avoid_other_robots</Action> </Selector> </Sequence> <Sequence> <Condition>is_agent_far_from_other_agent</Condition> <Action>harvest_resource</Action> </Sequence> </Selector> <Sequence> <Selector> <Sequence> <Condition>is_agent_far_from_resource</Condition> <Action>move_to_resource</Action> </Sequence> <Action>move_randomly</Action> </Selector> <Action>agent_movement_freeze</Action> </Sequence> </BehaviorTree>
###
4.// INSTRUCTIONS: Use only the following behaviors {'gather_resources': 'Subtree node: Determines the actions needed to gather resources for the swarm.', 'collect_resource': 'Action: Collects a resource from the environment. Always returns True.', 'send_request': 'Action: Sends a request to other robots in the swarm for assistance in gathering resources. Always returns True.', 'check_resource_capacity': 'Condition: Checks if the robot's resource capacity has been reached. Returns True if capacity is reached, False otherwise.', 'check_resource_available': 'Condition: Checks if there are available resources in the environment. Returns True if resources are available, False otherwise.', 'return_to_nest': 'Action: Moves the robot back to the nest. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Create a behavior tree for a swarm robot to gather as many resources as possible before returning to the nest.
4.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>check_resource_available</Condition><Action>collect_resource</Action><Selector><Action>send_request</Action><Action>gather_resources</Action></Selector></Sequence><Action>return_to_nest</Action></Selector></Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'detect_object': 'Subtree node: Defines the actions needed to detect objects in the environment.', 'move_towards_object': 'Action: Moves the robot towards the nearest detected object. Always returns True.', 'pick_up_object': 'Action: Picks up the object if it is small enough. Always returns True.', 'place_object': 'Action: Places the object in a designated location. Always returns True.', 'check_object_size': 'Condition: Checks the size of the detected object. Returns True if the object is small enough to pick up, False otherwise.', 'check_object_distance': 'Condition: Checks the distance of the object from the robot. Returns True of the object is within a certain range, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Create behavior tree for a robot to detect, pick up, and place objects in a designated location.
5.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Action>detect_object</Action><Condition>check_object_distance</Condition><Action>move_towards_object</Action><Condition>check_object_size</Condition><Action>pick_up_object</Action></Sequence><Sequence><Action>move_towards_object</Action><Action>place_object</Action></Sequence></Selector></Sequence></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'detect_intruders': 'Subtree node: Detects and handles intruders in the swarm.', 'send_warning': 'Action: Sends a warning signal to alert other robots of an intruder. Always returns True.', 'surround_intruder': 'Action: Coordinates with other robots to surround and isolate the intruder. Always returns True.', 'secure_perimeter': 'Action: Increases patrol and defense efforts to secure perimeter. Always returns True.', 'check_intruder_detected': 'Condition: Checks if an intruder is detected in the swarm. Returns True if an intruder is detected, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Create a behavior tree for the swarm robots to handle an intruder detected within the swarm.
6.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>check_intruder_detected</Condition><Action>send_warning</Action><Action>detect_intruders</Action><Action>surround_intruder</Action></Sequence><Action>secure_perimeter</Action></Selector></Sequence></BehaviorTree>Note: This behavior tree assumes that the agent continues to move and check for the target, and only stops and changes color when it is in the nest.

###
4.// INSTRUCTIONS: Use only the following behaviors {'move_forward': 'Action: Move one step forward while checking for any obstacles. Always returns True.', 'turn_left': 'Action: Turn the robot left 90 degrees. Always returns True.', 'turn_right': 'Action: Turn the robot right 90 degrees. Always returns True.', 'avoid_obstacle': 'Action: Move around and avoid obstacles. Always returns True.', 'is_object_detected': 'Condition: Check if there is a desirable object nearby. Returns True if an object is detected, False otherwise.', 'is_obstacle_ahead': 'Condition: Check if there is an obstacle ahead. Returns True if an obstacle is detected, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Generate a behavior tree for the robot to collect all nearby desirable objects while avoiding obstacles.
4.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_obstacle_ahead</Condition><Selector><Action>turn_left</Action><Action>turn_right</Action></Selector></Sequence><Selector><Sequence><Condition>is_object_detected</Condition><Action>collect_object</Action></Sequence><Sequence><Condition>is_obstacle_detected</Condition><Action>avoid_obstacle</Action></Sequence></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'move_forward': 'Action: Move one step forward while avoiding obstacles. Returns True if successful, False otherwise.', 'turn_left': 'Action: Turn the robot 90 degrees to the left. Returns True if successful, False otherwise.', 'turn_right': 'Action: Turn the robot 90 degrees to the right. Returns True if successful, False otherwise.', 'is_dest_reached': 'Condition: Check if the robot has reached the destination. Returns True if the destination is reached, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Generate a behavior tree for the robot to navigate to a designated end point while avoiding obstacles.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_dest_reached</Condition><Action>destination_reached</Action></Sequence><Selector><Sequence><Condition>is_obstacle_detected</Condition><Selector><Action>turn_left</Action><Action>turn_right</Action></Selector></Sequence><Action>move_forward</Action></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'move_forward': 'Action: Move one step forward while checking for any obstacles. Always returns True.', 'turn_left': 'Action: Turn the robot left 90 degrees. Always returns True.', 'turn_right': 'Action: Turn the robot right 90 degrees. Always returns True.', 'change_direction': 'Action: Change the direction the robot is moving. Takes in a parameter of 'left' or 'right'. Returns True if successful, False otherwise.', 'is_target_detected': 'Condition: Check if the target is within range. Returns True if the target is within range, False otherwise.', 'is_obstacle_ahead': 'Condition: Check if there is an obstacle ahead. Returns True if an obstacle is detected, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Generate a behavior tree to move in a spiral pattern while searching for a target within range and avoiding obstacles.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_target_detected</Condition><Action>move_forward</Action></Sequence><Selector><Sequence><Condition>is_obstacle_ahead</Condition><Selector><Action>turn_left</Action><Action>turn_right</Action></Selector></Sequence><Sequence><Action>change_direction('left')</Action><Action>move_forward</Action><Action>change_direction('right')</Action><Action>move_forward</Action></Sequence></Selector></BehaviorTree>###
4.// INSTRUCTIONS: Use only the following behaviors {'collect_resource': 'Action: Collect the nearest available resource. Always returns True.', 'deposit_resource': 'Action: Deposit the collected resource. Always returns True.', 'find_resource_patch': 'Condition: Check for the nearest resource patch. Returns True if a resource patch is detected, False otherwise.', 'is_resource_collected': 'Condition: Check if the agent has collected a resource. Returns True if a resource has been collected, False otherwise.', 'is_resource_deposited': 'Condition: Check if the agent has deposited a resource. Returns True if a resource has been deposited, False otherwise.', 'move_to_resource_patch': 'Action: Move the agent to the nearest resource patch. Always returns True.', 'is_at_resource_patch': 'Condition: Check if the agent is at the nearest resource patch. Returns True if the agent is at the resource patch, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Collect a resource from a resource patch and deposit it to the designated location'Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>find_resource_patch</Condition> <Action>move_to_resource_patch</Action> </Sequence> <Selector> <Sequence> <Condition>is_at_resource_patch</Condition> <Action>collect_resource</Action> </Sequence> <Action>deposit_resource</Action> </Selector> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'detect_threat': 'Condition: Check if threat is detected in the environment. Returns True if a threat is detected, False otherwise.', 'escape': 'Action: Move away from the detected threat. Always returns True.', 'hide': 'Action: Find a suitable hiding spot. Always returns True.', 'communicate': 'Action: Send a message to other robots. Always returns True.', 'move_to_location': 'Action: Move to a specific location. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Handle a threat by escaping or hiding and communicating with other robots'Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>detect_threat</Condition> <Selector> <Action>escape</Action> <Action>hide</Action> </Selector> </Sequence> <Action>communicate</Action> </Selector> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'move_to_next_target': 'Action: Move the robot to the next designated target. Always returns True.', 'is_target_reached': 'Condition: Check if the target has been reached. Returns True if the target has been reached, False otherwise.', 'scan_for_targets': 'Action: Scan the surrounding environment for any targets. Always returns True.', 'attack_target': 'Action: Attack the nearest target. Always returns True.', 'is_enough_resources': 'Condition: Check if there are enough resources available. Returns True if enough resources are available, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Attack the nearest target if enough resources are available, otherwise scan for more targets'Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>is_enough_resources</Condition> <Action>attack_target</Action> </Sequence> <Action>scan_for_targets</Action> </Selector> <Selector> <Condition>is_target_reached</Condition> <Action>move_to_next_target</Action> </Selector> </BehaviorTree> 
###
4.// INSTRUCTIONS: Use only the following behaviors {'align_with_target': 'Action: Align robot with target direction. Always returns True.', 'follow_line': 'Action: Follow a predetermined line. Always returns True.', 'rotate_clockwise': 'Action: Rotate clockwise at a fixed speed. Always returns True.', 'rotate_counter-clockwise': 'Action: Rotate counter-clockwise at a fixed speed. Always returns True.', 'stop_movement': 'Action: Stop robot movement. Always returns True.', 'accelerate': 'Action: Accelerate robot movement. Always returns True.', 'decelerate': 'Action: Decelerate robot movement. Always returns True.', 'is_target_detected': 'Condition: Check if a target is detected within a specific range. Returns True if a target is detected, False otherwise.', 'is_target_aligned': 'Condition: Check if the robot is aligned with the target direction. Returns True if aligned, False otherwise.', 'is_line_followed': 'Condition: Check if the robot is following a predetermined line. Returns True if following the line, False otherwise.', 'is_movement_stopped': 'Condition: Check if the robot's movement is completely stopped. Returns True if stopped, False otherwise.', 'is_moving_forward': 'Condition: Check if the robot is currently moving forward. Returns True if moving forward, False otherwise.', 'is_accelerating': 'Condition: Check if the robot's movement is accelerating. Returns True if accelerating, False otherwise.', 'is_at_target': 'Condition: Check if the robot has reached the target location. Returns True if at the target, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: create behavior tree for 'Navigate to a specific location using a combination of acceleration and rotation'
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_moving_forward</Condition><Sequence><Action>stop_movement</Action></Sequence></Sequence><Selector><Condition>is_accelerating</Condition><Sequence><Action>decelerate</Action><Sequence><Condition>is_target_detected</Condition><Action>accelerate</Action></Sequence></Sequence></Selector><Selector><Sequence><Condition>is_target_aligned</Condition><Action>align_with_target</Action><Selector><Condition>is_line_followed</Condition><Action>follow_line</Action></Selector></Sequence><Selector><Sequence><Condition>is_target_detected</Condition><Selector><Condition>is_at_target</Condition><Action>stop_movement</Action></Selector><Selector><Condition>is_target_detected</Condition><Action>accelerate</Action></Selector></Sequence></Selector></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'hover': 'Action: Hover in place. Always returns True.', 'move_away': 'Action: Move away from target at a fixed speed. Always returns True.', 'is_facing_target': 'Condition: Checks if the robot is facing the target location. Returns True if facing the target, False otherwise.', 'is_target_detected': 'Condition: Checks if a target is detected within a specific range. Returns True if a target is detected, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: create behavior tree for 'Detect target and hover in place, but move away if facing target'
5.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_target_detected</Condition><Selector><Condition>is_facing_target</Condition><Action>move_away</Action><Action>hover</Action></Selector></Sequence></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'avoid_obstacle': 'Action: Avoid detected obstacles by changing direction. Always returns True.', 'dash': 'Action: Perform a quick dash in a specific direction. Always returns True.', 'is_obstacle_in_front': 'Condition: Checks if there is an obstacle directly in front of the robot. Returns True if an obstacle is present, False otherwise.', 'is_moving_forward': 'Condition: Checks if the robot is currently moving forward. Returns True if moving forward, False otherwise.', 'is_dashing': 'Condition: Checks if the robot is currently performing a dash. Returns True if dashing, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: create behavior tree for 'Avoid obstacles while moving forward, but perform a quick dash if an obstacle is directly in front'
6.// OUTPUT:
<BehaviorTree><Selector><Condition>is_obstacle_in_front</Condition><Action>dash</Action><Selector><Condition>is_moving_forward</Condition><Action>avoid_obstacle</Action></Selector></Selector></BehaviorTree> 
###
4.// INSTRUCTIONS: Use only the following behaviors {'explore': 'Action: Explore for resources. Always returns True.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'move_forward': 'Action: Move the robot forward. Always returns True.', 'turn_left': 'Action: Turn the robot 90 degrees to the left. Always returns True.', 'turn_right': 'Action: Turn the robot 90 degrees to the right. Always returns True.', 'is_agent_nearby': 'Condition: Check if there are other robots within a 10 unit radius. Returns True if other robots are nearby, False otherwise.', 'is_resource_nearby': 'Condition: Check if there are resources within a 15 unit radius. Returns True if resources are nearby, False otherwise.', 'gather_resource': 'Action: Gather the nearby resources. Always returns True.', 'deposit_resource': 'Action: Deposit the gathered resources at the designated location. Always returns True.', 'is_nest_nearby': 'Condition: Check if there is a nest within a 20 unit radius. Returns True if a nest is within range, False otherwise.', 'search_for_nest': 'Action: Move towards the nearest nest within range. Always returns True.', 'recharge_battery': 'Action: Recharge the robot's battery at the designated location. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Use the robot to find resources, gather them, and deposit them at the designated location. If the battery is low, recharge it at the nearest charging station.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Sequence><Condition>is_resource_nearby</Condition><Action>gather_resource</Action><Sequence><Condition>is_nest_nearby</Condition><Action>deposit_resource</Action></Sequence></Sequence><Sequence><Action>search_for_nest</Action><Condition>is_nest_nearby</Condition><Sequence><Condition>is_agent_nearby</Condition><Action>move_forward</Action></Sequence></Sequence><Sequence><Condition>is_nest_nearby</Condition><Action>recharge_battery</Action></Sequence><Action>explore</Action></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'is_agent_nearby': 'Condition: Check if there are other robots within a 10 unit radius. Returns True if other robots are nearby, False otherwise.', 'is_nest_reached': 'Condition: Check if the robot has reached the designated nest. Returns True if reached, False otherwise.', 'is_home': 'Action: Return to the designated home location. Always returns True.', 'is_in_home_range': 'Condition: Check if the robot is within the designated home range. Returns True if within range, False otherwise.', 'is_target_reached': 'Condition: Check if the target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'move_forward': 'Action: Move the robot forward. Always returns True.', 'move_backward': 'Action: Move the robot backwards. Always returns True.', 'turn_left': 'Action: Turn the robot 90 degrees to the left. Always returns True.', 'turn_right': 'Action: Turn the robot 90 degrees to the right. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Use the robot to navigate towards the designated nest, avoiding obstacles along the way. Once the nest is reached, return to the designated home location.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>move_forward</Action><Condition>is_nest_reached</Condition><Sequence><Action>move_forward</Action><Condition>is_target_reached</Condition><Action>turn_left</Action></Sequence></Sequence><Sequence><Action>turn_right</Action><Condition>is_agent_nearby</Condition><Action>move_backward</Action></Sequence><Sequence><Action>move_backward</Action><Condition>is_in_home_range</Condition><Action>is_home</Action></Sequence></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'is_resource_nearby': 'Condition: Check if there are resources within a 15 unit radius. Returns True if resources are nearby, False otherwise.', 'gather_resource': 'Action: Gather the nearby resources. Always returns True.', 'move_forward': 'Action: Move the robot forward. Always returns True.', 'turn_left': 'Action: Turn the robot 90 degrees to the left. Always returns True.', 'turn_right': 'Action: Turn the robot 90 degrees to the right. Always returns True.', 'is_at_dropoff': 'Condition: Check if the robot is at the designated drop-off location. Returns True if at the drop-off location, False otherwise.', 'drop_resource': 'Action: Drop the gathered resources at the designated drop-off location. Always returns True.', 'is_home': 'Action: Return to the designated home location. Always returns True.', 'is_home_range': 'Condition: Check if the robot is within the designated home range. Returns True if within range, False otherwise.', 'recharge_battery': 'Action: Recharge the robot's battery at the designated location. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Use the robot to gather resources and drop them off at the designated location, while avoiding obstacles along the way. If the battery is low, return to the designated home location and recharge.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_obstacle_detected</Condition><Action>avoid_obstacle</Action><Sequence><Condition>is_resource_nearby</Condition><Action>gather_resource</Action><Sequence><Condition>is_at_dropoff</Condition><Sequence><Action>turn_left</Action><Action>drop_resource</Action><Action>turn_right</Action></Sequence></Sequence></Sequence></Sequence><Sequence><Action>move_forward</Action><Condition>is_home_range</Condition><Action>is_home</Action></Sequence><Sequence><Condition>is_resource_nearby</Condition><Sequence><Action>turn_left</Action><Action>drop_resource</Action><Action>turn_right</Action></Sequence></Sequence><Sequence><Condition>is_resource_nearby</Condition><Action>move_forward</Action></Sequence></Selector></BehaviorTree> 
###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'navigate to the object and collect it'. Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_target_detected</Condition><Selector><Sequence><Condition>is_target_reached</Condition><Action>task_completed</Action></Sequence><Action>agent_movement_freeze</Action><Action>wander</Action></Selector><Action>wander</Action></Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_circle': 'Action: Form a circle with other robots. Returns True when the circle is formed with other robots, False otherwise.', 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_circle_formed': 'Condition: Check if a circle is formed. Returns True if the circle is formed with other robots, False otherwise.', 'is_color_green': 'Condition: Check if the agent's color is green. Returns True if the agent's color is green, False otherwise.', 'is_color_white': 'Condition: Check if the agent's color is white. Returns True if the agent's color is white, False otherwise.', 'is_same_color': 'Condition: Check if all robots in the circle have the same color. Returns True if all robots have the same color, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Returns True after the circle is formed and all robots have the same color.', 'move_to_center': 'Action: Move to the center of the circle. Returns True once the agent is at the center of the circle.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'form a circle with other robots and make all agents have the same color'.Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_circle_formed</Condition><Selector><Sequence><Condition>is_color_green</Condition><Action>agent_movement_freeze</Action></Sequence><Sequence><Condition>is_color_white</Condition><Action>change_color_to_green</Action></Sequence></Selector></Sequence><Sequence><Condition>is_same_color</Condition><Action>task_completed</Action></Sequence><Action>wander</Action></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'is_line_complete': 'Condition: Check if the line is complete. Returns True if the line is complete, False otherwise.', 'is_target_reached': 'Condition: Check if target is reached. Returns True if the target is reached, False otherwise.', 'look_for_target': 'Action: Look for the target in the environment. Always returns True.', 'move_forward': 'Action: Move forward towards target. Always returns True.', 'reverse_movement': 'Action: Reverse agent's movement. Always returns True.', 'start_formation': 'Action: Start line formation. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'form a line and move forward until the target is reached, then form a new line with the target at the end'.Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_line_complete</Condition><Selector><Sequence><Condition>is_target_reached</Condition><Action>agent_movement_freeze</Action><Action>reverse_movement</Action></Sequence><Sequence><Condition>is_target_reached</Condition><Action>move_forward</Action><Action>start_formation</Action></Sequence></Selector></Sequence></BehaviorTree>
###
4.// INSTRUCTIONS: Use only the following behaviors {'move_toward_player': 'Action: Move the robot towards the player character. Always returns True.', 'attack_player': 'Action: Attack the player character with equipped weapon. Returns True if successful, False otherwise.', 'is_player_within_range': 'Condition: Check if the player character is within attack range. Returns True if within range, False otherwise.', 'is_enemy_around': 'Condition: Check for any enemy characters nearby. Returns True if an enemy is detected, False otherwise.', 'retreat': 'Action: Move the robot away from the player character. Returns True if successful, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Generate behavior tree for a robot enemy to engage in combat with the player character, while also considering the presence of other enemies.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_player_within_range</Condition><Action>attack_player</Action></Sequence><Selector><Sequence><Condition>is_enemy_around</Condition><Action>move_toward_player</Action></Sequence><Action>retreat</Action></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'move_to_pickup_location': 'Action: Move to the designated location to pick up an item. Always returns True.', 'pick_up_item': 'Action: Pick up the item at the current location. Returns True if successful, False otherwise.', 'is_item_nearby': 'Condition: Check if an item is within a certain distance of the robot. Returns True if an item is nearby, False otherwise.', 'is_item_in_range': 'Condition: Check if the item is within the robot's picking range. Returns True if the item is in range, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Generate behavior tree for a robot to pick up a designated item in the environment
5.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>is_item_nearby</Condition><Action>move_to_pickup_location</Action><Selector><Action>pick_up_item</Action><Action>wait</Action></Selector></Sequence><Selector><Condition>is_item_in_range</Condition><Action>wait</Action></Selector></Selector></Sequence></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'move_to_resource': 'Action: Move the robot towards a resource node. Always returns True.', 'gather_resource': 'Action: Gather resources from the designated resource node. Returns True if successful, False otherwise.', 'is_node_available': 'Condition: Check if the designated resource node is available for gathering. Returns True if the node is available, False otherwise.', 'is_resource_full': 'Condition: Check if the robot's resource storage is full. Returns True if full, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Generate behavior tree for a robot to gather resources from available nodes until its storage is full
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_resource_full</Condition><Action>wait</Action></Sequence><Selector><Sequence><Condition>is_node_available</Condition><Action>move_to_resource</Action><Selector><Action>gather_resource</Action><Action>wait</Action></Selector></Sequence><Action>wander</Action></Selector></BehaviorTree> 
###
4.// INSTRUCTIONS: Use only the following behaviors {'attack': 'Action: Attack enemies. Always returns True.', 'gather_items': 'Subtree node: Represents a behavior tree for gathering resources and items.', 'is_target_detected': 'Condition: Check if target is within sight. Returns True if the target is detected, False otherwise.', 'is_item_needed': 'Condition: Checks if the agent needs a specific item. Returns True if the item is needed, False otherwise.', 'pick_up_item': 'Action: Pick up a specific item. Always returns True.', 'move_to_target': 'Action: Move towards target. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: If target is detected, gather items. Otherwise, move towards the target.
4.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>is_target_detected</Condition> <Action>gather_items</Action> </Sequence> <Action>move_to_target</Action> </Selector> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'attack': 'Action: Attack enemies. Always returns True.', 'continue_patrolling': "Action: Continue agent's patrolling route. Always returns True.", 'get_new_patrol_point': 'Action: Get a new patrol point from the team leader. Returns True if a new patrol point is given, False otherwise.', 'is_enemy_detected': 'Condition: Checks if the agent has detected enemies. Returns True if enemies are detected, False otherwise.', 'is_patrol_point_reached': 'Condition: Checks if the agent has reached the patrol point. Returns True if the patrol point is reached, False otherwise.', 'is_patrol_route_complete': 'Condition: Checks if the entire patrol route is completed. Returns True if the patrol route is completed, False otherwise.', 'receive_orders': 'Action: Receive orders from the team leader. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Follow the given patrol route, attacking enemies if detected. If new orders are received, update the patrol route and continue.
5.// OUTPUT: 
<BehaviorTree> <Selector> <Sequence> <Condition>is_patrol_route_complete</Condition> <Action>get_new_patrol_point</Action> </Sequence> <Sequence> <Condition>is_enemy_detected</Condition> <Action>attack</Action> </Sequence> <Action>continue_patrolling</Action> <Action>receive_orders</Action> </Selector> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'attack': 'Action: Attack enemies. Always returns True.', 'continue_following_leader': "Action: Continue following the team leader's movements. Always returns True.", 'is_leader_detected': 'Condition: Checks if the team leader is within sight. Returns True if the leader is detected, False otherwise.', 'is_leader_destination_reached': 'Condition: Checks if the team leader has reached their destination. Returns True if the leader's destination is reached, False otherwise.', 'is_leader_moving': 'Condition: Checks if the team leader is currently moving. Returns True if the leader is moving, False otherwise.', 'queue_for_destination': 'Action: Queue for the team leader's destination. Always returns True.', 'stay_in_group': 'Action: Maintain a certain distance from the team leader. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Follow the team leader and maintain a certain distance from them. If they reach their destination, queue for the same destination and continue following.
6.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>is_leader_detected</Condition> <Action>stay_in_group</Action> </Sequence> <Sequence> <Condition>is_leader_destination_reached</Condition> <Action>queue_for_destination</Action> </Sequence> <Action>continue_following_leader</Action> </Selector> </BehaviorTree>
###
4.// INSTRUCTIONS: Use only the following behaviors {'find_food_source': 'Subtree node: Represents a behavior tree for finding a food source.', 'eat_food': 'Action: Eat the food in the current location. Always returns True.', 'is_hungry': "Condition: Check if the robot's hunger level is low. Returns True if the hunger level is low, False otherwise.", 'navigate_to_nest': 'Subtree node: Represents a behavior tree for navigating to the nest.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Use swarm robots to gather food and bring it back to the nest to feed the colony.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_hungry</Condition><Subtree>find_food_source</Subtree><Action>eat_food</Action></Sequence><Selector><Action>navigate_to_next</Action><Action>wait</Action></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'navigate_to_target': 'Action: Navigate to the target location. Always returns True.', 'gather_materials': 'Action: Gather materials at the target location. Always returns True.', 'build_structure': 'Action: Build a structure using the gathered materials. Always returns True.', 'retreat_to_nest': 'Subtree node: Represents a behavior tree for retreating to the nest when threatened.', 'is_building_complete': 'Condition: Check if the structure has been built completely. Returns True if the structure is complete, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Use swarm robots to construct a shelter at the target location while retreating to the nest if threatened.
5.// OUTPUT:
<BehaviorTree><Sequence><Action>navigate_to_target</Action><Action>gather_materials</Action><Sequence><Condition>is_building_complete</Condition><Action>build_structure</Action></Sequence><Subtree>retreat_to_nest</Subtree></Sequence></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'search_for_water': 'Subtree node: Represents a behavior tree for searching for a water source.', 'drink_water': 'Action: Drink water at the current location. Always returns True.', 'navigate_to_nest': 'Subtree node: Represents a behavior tree for navigating to the nest.', 'is_thirsty': "Condition: Check if the robot's thirst level is low. Returns True if the thirst level is low, False otherwise."}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Send swarm robots to search for water and bring it back to the nest to replenish the colony's water supply.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_thirsty</Condition><Subtree>search_for_water</Subtree><Action>drink_water</Action></Sequence><Selector><Action>navigate_to_next</Action><Action>wait</Action></Selector></BehaviorTree>
###
4.// INSTRUCTIONS: Use only the following behaviors {'attack_enemy': 'Action: Attack the nearest enemy. Always returns True.', 'retreat': 'Action: Retreat from the enemy. Always returns True.', 'is_enemy_nearby': 'Condition: Check if an enemy is within 10 units of distance. Returns True if an enemy is nearby, False otherwise.', 'is_health_low': 'Condition: Check if agent's health is below a specific threshold. Returns True if health is low, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: If health is low, retreat and find a health pack. If no health pack is available, keep attacking enemies.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_health_low</Condition><Selector><Sequence><Condition>is_health_pack_available</Condition><Action>go_to_health_pack</Action></Sequence><Action>retreat</Action></Selector></Sequence><Action>attack_enemy</Action></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'find_food': 'Subtree node: Represents a behavior tree for foraging and obtaining food.', 'collect_food': 'Action: Pick up the food and bring it back to the nest. Always returns True.', 'is_food_nearby': 'Condition: Check if there is food within a certain distance. Returns True if food is nearby, False otherwise.', 'are_hungry': "Condition: Check if agent's hunger level is above a specific threshold. Returns True if agent is hungry, False otherwise."}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: If hungry, find food and bring it back to the nest. Otherwise, keep exploring the environment.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>are_hungry</Condition><Selector><Sequence><Condition>is_food_nearby</Condition><Action>collect_food</Action></Sequence><Action>find_food</Action></Selector></Sequence><Action>explore</Action></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'detect_fault': 'Action: Identify and locate the source of a fault in the system. Always returns True.', 'repair_fault': 'Action: Fix the fault. Always returns True.', 'navigate_to_area': 'Action: Navigate to the specified area. Always returns True.', 'is_fault_detected': 'Condition: Check if a fault is detected. Returns True if a fault is detected, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: If a fault is detected, navigate to the location and repair it. Otherwise, continue monitoring the system.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_fault_detected</Condition><Selector><Sequence><Action>navigate_to_area</Action><Action>repair_fault</Action></Sequence><Action>detect_fault</Action></Selector></Sequence><Action>monitor_system</Action></Selector></BehaviorTree> 
###
4.// INSTRUCTIONS: Use only the following behaviors {'wait': "Action: Wait for a specific amount of time. Always returns True.", 'move_left': 'Action: Move the agent to the left. Always returns True.', 'move_right': 'Action: Move the agent to the right. Always returns True.', 'move_forward': 'Action: Move the agent forward. Always returns True.', 'move_backward': 'Action: Move the agent backward. Always returns True.', 'pick_up_object': 'Action: Pick up a nearby object. Always returns True.', 'drop_object': 'Action: Drop the object the agent is holding. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Perform a search and rescue operation by moving forward, picking up any objects, and dropping them at the destination.
4.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Action>move_forward</Action> <Action>pick_up_object</Action> </Sequence> <Action>drop_object</Action> </Selector> </Sequence> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'randomly_switch_agent': "Action: Send a random agent in the team to a different area. Always returns True.", 'form_square': 'Action: Form a square formation with other robots. Always returns True.', 'check_battery_level': 'Condition: Check the agent\'s battery level. Returns True if battery level is above 50%, False otherwise.', 'check_distance_from_target': 'Condition: Check the distance from the target. Returns True if the target is within 10 units of distance, False otherwise.', 'navigate_to_target': 'Action: Move towards the target location. Always returns True.', 'signal_task_complete': 'Action: Signal task completion to other robots. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Create a swarm to move towards the target location, form a square once 3 robots are within 15 units of distance, and randomly switch out agents if the battery level is low.
5.// OUTPUT:
<Sequence> <Condition>check_distance_from_target</Condition> <Action>form_square</Action> </Sequence> <Selector> <Sequence> <Condition>check_battery_level</Condition> <Action>randomly_switch_agent</Action> </Sequence> <Sequence> <Action>navigate_to_target</Action> <Action>signal_task_complete</Action> </Sequence> </Selector> <Action>signal_task_complete</Action> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'move_to_target': "Action: Move towards the target location. Always returns True.", 'is_target_reached': 'Condition: Check if the target is reached. Returns True if the agent is within a certain distance of the target, False otherwise.', 'drop_beacon': 'Action: Drop a beacon at the current location. Always returns True.', 'detect_intruder': 'Subtree node: Represents a behavior tree for detecting and chasing intruders.', 'check_battery_level': 'Condition: Check the agent\'s battery level. Returns True if battery level is above 30%, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Move towards the target location, drop a beacon when the target is reached, and check for any intruders while maintaining a battery level above 30%.
6.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Action>move_to_target</Action> <Sequence> <Condition>is_target_reached</Condition> <Action>drop_beacon</Action> </Sequence> </Selector> </Sequence> <Selector> <Sequence> <Condition>check_battery_level</Condition> <Action>detect_intruder</Action> </Sequence> <Action>detect_intruder</Action> </Selector> <Selector> <Action>detect_intruder</Action> </Selector> </BehaviorTree> 
###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_circle': 'Action: Form a circle with the other robots. Always returns True.', 'is_circle_formed': 'Condition: Check if a circle is formed with the other robots. Returns True if a circle is formed, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'join_circle': 'Action: Move towards the center of the circle. Always returns True.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Form a circle with other robots and then join the circle.'Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_circle_formed</Condition><Action>agent_movement_freeze</Action><Action>task_completed</Action></Sequence><Sequence><Condition>is_circle_formed</Condition><Action>join_circle</Action></Sequence><Action>form_circle</Action></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'navigate_to_target': 'Action: Navigate towards the target. Always returns True.', 'scan_surroundings': 'Action: Scan the nearby area for obstacles. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Navigate to the target while scanning for obstacles along the way.'Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_target_reached</Condition><Action>task_completed</Action></Sequence><Selector><Sequence><Condition>is_path_clear</Condition><Action>scan_surroundings</Action></Sequence><Sequence><Condition>is_path_clear</Condition><Action>navigate_to_target</Action></Sequence></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'drop_rock': 'Action: Drop a rock to mark a location. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'pick_up_rock': 'Action: Pick up a rock from the ground. Always returns True.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Pick up a rock, carry it to a specific location, and drop the rock to mark the spot.'Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_path_clear</Condition><Action>pick_up_rock</Action></Sequence><Sequence><Condition>is_agent_in_nest</Condition><Action>drop_rock</Action><Action>task_completed</Action></Sequence></BehaviorTree> 
###
4.// INSTRUCTIONS: Use only the following behaviors {'approach': 'Action: Move towards the designated target location. Returns True once the target is reached.', 'collect_data': 'Action: Collect data from the environment. Always returns True.', 'is_data_collected': 'Condition: Check if data has been collected. Returns True if data has been collected, False otherwise.', 'decide_next_destination': 'Subtree node: Represents a behavior tree for deciding the next target location based on collected data.', 'search_for_target': 'Subtree node: Represents a behavior tree for searching for the designated target location.', 'continue_searching': 'Action: Continue searching for the designated target location. Always returns True.', 'is_target_found': 'Condition: Check if the target location has been found. Returns True if the target is found, False otherwise.'} to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Collect data, analyze and decide next target location. If target is found, approach and collect data. If data is collected, continue searching for target'.
4.// OUTPUT:
<BehaviorTree> <Sequence> <Action>collect_data</Action> <Sequence> <Condition>is_data_collected</Condition> <Subtree>decide_next_destination</Subtree> </Sequence> </Sequence> <Sequence> <Subtree>search_for_target</Subtree> <Sequence> <Condition>is_target_found</Condition> <Action>approach</Action> </Sequence> <Action>continue_searching</Action> </Sequence> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'check_temperature': 'Action: Check the temperature of the environment. Returns True once the temperature is known.', 'adjust_temperature': 'Action: Adjust the temperature to maintain a set range. Always returns True.', 'is_temperature_low': 'Condition: Check if the temperature is below a specified threshold. Returns True if temperature is low, False otherwise.', 'is_temperature_high': 'Condition: Check if the temperature is above a specified threshold. Returns True if temperature is high, False otherwise.', 'wait': 'Action: Wait for a specified amount of time. Returns True after the designated wait time.', 'detect_fires': 'Action: Use sensors to detect fires in the environment. Returns True once a fire is detected.'} to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Monitor temperature and adjust accordingly. If temperature is high, detect fires and wait for firefighter support. If temperature is low, adjust accordingly'. Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree> <Sequence> <Action>check_temperature</Action> <Selector> <Sequence> <Condition>is_temperature_high</Condition> <Sequence> <Condition>detect_fires</Condition> <Action>wait</Action> </Sequence> </Sequence> <Sequence> <Condition>is_temperature_low</Condition> <Action>adjust_temperature</Action> </Sequence> </Selector> </Sequence> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'detect_collisions': 'Action: Use sensors to detect any potential collisions. Return True if a collision is detected, False otherwise.', 'avoid_collision': 'Action: Take evasive action to avoid the detected collision. Always returns True.', 'follow_path': 'Action: Follow the designated path towards a specific destination. Return True once the destination is reached.', 'is_at_destination': 'Condition: Check if the robot has reached the designated destination. Returns True if at the destination, False otherwise.', 'initiate_rescue': 'Action: Initiate a rescue operation by moving towards the last known location of a lost robot. Returns True once the lost robot is found.', 'return_to_home': 'Action: Return to the designated home base location. Returns True once the home base is reached.'} to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'During a rescue mission, follow designated path, avoid collisions, return to home base or initiate rescue if lost robot is detected'. Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>detect_collisions</Condition> <Action>avoid_collision</Action> </Sequence> <Sequence> <Subtree>initiate_rescue</Subtree> <Action>follow_path</Action> </Sequence> <Sequence> <Condition>is_at_destination</Condition> <Action>return_to_home</Action> </Sequence> </Selector> </BehaviorTree>
###
4.//INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'fly_to_target': 'Action: Fly towards the target at a constant speed. Blocks movement until target is reached.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_reached': 'Condition: Check if target is reached. Returns True if the target is reached, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.', 'get_location': 'Action: Retrieve the current location of the agent.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Fly to a specific location at the top of a tower and change color to green, then return to the nest and change color to white' Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Sequence> <Condition>is_agent_in_nest</Condition> <Action>get_location</Action> </Sequence> <Sequence> <Condition>is_target_reached</Condition> <Action>change_color_to_white</Action> <Action>agent_movement_freeze</Action> </Sequence> </Sequence> <Action>wander</Action> </Selector> <Sequence> <Condition>is_path_clear</Condition> <Action>fly_to_target</Action> <Action>change_color_to_green</Action> </Sequence> </Sequence> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'form_circle': 'Action: Form a circle at the center with a radius of 5 units. Always returns True.', 'is_circle_formed': 'Condition: Check if a circle is formed with the center. Returns True if the circle is formed with a radius of 5 units, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_reached': 'Condition: Check if target is within 10 units. Returns True if the target is within 10 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Form a circle at the center, change color to green and white, and move towards the designated target'Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Action>form_circle</Action> <Sequence> <Condition>is_circle_formed</Condition> <Action>change_color_to_white</Action> </Sequence> </Sequence> <Sequence> <Condition>is_path_clear</Condition> <Action>wander</Action> </Sequence> <Sequence> <Condition>is_target_reached</Condition> <Action>change_color_to_green</Action> <Action>agent_movement_freeze</Action> </Sequence> </Selector> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_yellow': "Action: Change agent's color to yellow. Always returns True.", 'check_surroundings': 'Action: Check the surroundings for nearby agents or obstacles. Blocks movement until check is complete.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_agent_found': 'Condition: Check if another agent is found within 5 units. Returns True if another agent is detected within 5 units, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_found': 'Condition: Check if the target is found within 20 units. Returns True if the target is found within 20 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Find another agent, change color to green and yellow, and move towards the designated target that can be reached without crossing any obstacles' Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Sequence> <Action>check_surroundings</Action> <Sequence> <Condition>is_agent_found</Condition> <Action>change_color_to_green</Action> </Sequence> </Sequence> <Sequence> <Condition>is_path_clear</Condition> <Action>wander</Action> </Sequence> <Sequence> <Condition>is_target_found</Condition> <Action>change_color_to_yellow</Action> <Action>agent_movement_freeze</Action> </Sequence> </Selector> </BehaviorTree>###
4.// INSTRUCTIONS: Use only the following behaviors {'move_to_next_point': 'Action: Move to the next point in the specified path. Always returns True.', 'collect_item': "Action: Collect the specified item at the current location. Always returns True.", 'drop_item': "Action: Drop the collected item at a designated drop-off point. Always returns True.", 'is_at_dropoff': 'Condition: Check if the robot is at the designated drop-off point. Returns True if at the drop-off point, False otherwise.', 'is_item_present': 'Condition: Check if the specified item is present at the current location. Returns True if the item is present, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Generate behavior tree to collect a specific item and drop it off at a designated location
4.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>is_item_present</Condition> <Action>collect_item</Action> </Sequence> <Sequence> <Condition>is_at_dropoff</Condition> <Action>drop_item</Action> </Sequence> <Sequence> <Action>wait</Action> <Action>move_to_next_point</Action> </Sequence> </Selector> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'move_to_next_stop': 'Action: Move to the next designated stop on the delivery route. Always returns True.', 'deliver_package': 'Action: Deliver the package at the current stop to its intended recipient. Always returns True.', 'is_delivery_complete': 'Condition: Check if all packages have been successfully delivered. Returns True if all packages have been delivered, False otherwise.', 'is_at_stop': 'Condition: Check if the robot is at the designated stop. Returns True if at the stop, False otherwise.', 'is_package_present': 'Condition: Check if there is a package to be delivered at the current stop. Returns True if a package is present, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Generate behavior tree for a delivery robot to complete all package deliveries on a specified route
5.// OUTPUT:
<BehaviorTree> <Sequence> <Condition>is_delivery_complete</Condition> <Selector> <Sequence> <Condition>is_at_stop</Condition> <Action>deliver_package</Action> </Sequence> <Sequence> <Action>wait</Action> <Action>move_to_next_stop</Action> </Sequence> </Selector> </Sequence> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'detect_obstacles': 'Action: Use sensors to detect obstacles in front of the robot. Always returns True.', 'avoid_obstacles': 'Action: Move away from obstacles detected by the sensors. Always returns True.', 'navigate_to_goal': 'Action: Use predefined map to navigate to the designated goal location. Always returns True.', 'recharge': 'Action: Stop and recharge the robot when the battery is low. Always returns True.', 'is_obstacle_detected': 'Condition: Check if any obstacles are detected in front of the robot. Returns True if obstacles are detected, False otherwise.', 'at_goal': 'Condition: Check if the robot has reached the designated goal location. Returns True if at the goal, False otherwise.', 'battery_low': 'Condition: Check if the robot's battery level is below a certain threshold. Returns True if low battery, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Generate behavior tree for a robot to navigate to a goal while avoiding obstacles and recharging when needed
6.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>battery_low</Condition> <Action>recharge</Action> </Sequence> <Sequence> <Condition>is_obstacle_detected</Condition> <Action>avoid_obstacles</Action> </Sequence> <Sequence> <Condition>at_goal</Condition> <Action>wait</Action> </Sequence> <Action>detect_obstacles</Action> <Action>navigate_to_goal</Action> </Selector> </BehaviorTree> 
###
4.// INSTRUCTIONS: Use only the following behaviors {'detect_boundary': 'Condition: Check if the robot is near the environment boundary. Returns True if near boundary, False otherwise.', 'turn_left': 'Action: Turn the robot 90 degrees to the left. Always returns True.', 'turn_right': 'Action: Turn the robot 90 degrees to the right. Always returns True.', 'backtrack': 'Action: Turn around and move in the opposite direction. Always returns True.', 'alert_team': 'Action: Send out an alert to the team. Always returns True.', 'track_target': 'Action: Track and follow the target object. Always returns True.', 'follow_line': 'Action: Follow a line on the ground. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Follow a specific path while staying within the boundaries of the environment and tracking a target object.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>detect_boundary</Condition><Sequence><Action>backtrack</Action></Sequence></Sequence><Sequence><Selector><Sequence><Action>follow_line</Action></Sequence><Sequence><Action>track_target</Action></Sequence></Selector></Sequence><Action>alert_team</Action></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'navigate_to_location': 'Action: Move towards a specific location. Always returns True.', 'wait_for_signal': 'Action: Wait for a specific signal or event before proceeding. Always returns True.', 'detect_terrain_changes': 'Action: Continuously scan and detect changes in terrain. Always returns True.', 'analyze_surface': 'Subtree node: Represents a behavior tree for analyzing the surface of the environment.', 'collect_samples': 'Action: Collect samples from the environment. Always returns True.', 'map_surroundings': 'Subtree node: Represents a behavior tree for mapping the surroundings.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Navigate to a specific location while continuously analyzing the surface and mapping the surroundings. Collect samples along the way and wait for a specific signal before proceeding.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Selector><Sequence><Action>navigate_to_location</Action><Selector><Sequence><Action>detect_terrain_changes</Action><Subtree>analyze_surface</Subtree></Sequence></Selector></Sequence></Selector><Selector><Sequence><Action>collect_samples</Action><Action>map_surroundings</Action></Sequence></Selector><Sequence><Action>wait_for_signal</Action></Sequence></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'collect_resource': 'Action: Collect the available resource at the current location. Always returns True.', 'upgrade_structure': 'Action: Upgrade the structure at the current location. Always returns True.', 'request_assistance': 'Action: Request assistance from neighboring robots. Always returns True.', 'is_resource_available': 'Condition: Check if the resource is available at the current location. Returns True if resource is available, False otherwise.', 'is_structure_upgradable': 'Condition: Check if the structure at the current location can be upgraded. Returns True if upgradeable, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Improve the existing structures by collecting resources and upgrading them, while requesting assistance from neighboring robots if needed.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_resource_available</Condition><Selector><Sequence><Action>collect_resource</Action><Condition>is_structure_upgradable</Condition><Action>upgrade_structure</Action></Sequence></Selector><Action>request_assistance</Action></Selector></BehaviorTree> 
4.// INSTRUCTIONS: Use only the following behaviors {'gotToExit': 'Subtree node: Represents a behavior tree for reaching the designated exit point.', 'recharge': 'Action: Recharge the robot if battery is low. Always returns True.', 'batteryLow': 'Condition: Checks if battery is below a specific threshold. Returns True if battery is low, False otherwise.', 'searchObject': 'Action: Search for desired object in the environment. Always returns True.', 'is_object_found': 'Condition: Checks if desired object is found. Returns True if object is found, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Create a behavior tree to find and collect a specific object, and then make it to the designated exit point.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_object_found</Condition><Action>gotToExit</Action></Sequence><Selector><Sequence><Condition>batteryLow</Condition><Action>recharge</Action></Sequence><Action>searchObject</Action></Selector></BehaviorTree>

5.// INSTRUCTIONS: Use only the following behaviors {'collect_resources': 'Action: Collect nearby resources. Always returns True.', 'is_resources_low': 'Condition: Check if the amount of resources collected is below a specific threshold. Returns True if resources are low, False otherwise.', 'deposit_resources': 'Action: Deposit collected resources. Always returns True.', 'is_collecting_successful': 'Condition: Check if resources were successfully collected. Returns True if resources were successfully collected, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Construct a behavior tree to gather resources until a certain amount is reached, then deposit them and resume gathering.
5.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_collecting_successful</Condition><Selector><Sequence><Condition>is_resources_low</Condition><Action>collect_resources</Action></Sequence><Sequence><Action>deposit_resources</Action><Action>collect_resources</Action></Sequence></Selector></Sequence><Action>deposit_resources</Action></BehaviorTree>

6.// INSTRUCTIONS: Use only the following behaviors {'follow_leader': 'Action: Follow the designated leader robot. Always returns True.', 'communicate_with_leader': 'Action: Communicate with the leader robot for further instructions. Always returns True.', 'leader_visible': 'Condition: Check if the leader robot is currently visible. Returns True if the leader is visible, False otherwise.', 'is_leader_moving': 'Condition: Check if the leader robot is currently moving. Returns True if the leader is moving, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Create a behavior tree for a swarm of robots to follow and communicate with a leader robot in a dynamic environment.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>leader_visible</Condition><Action>follow_leader</Action></Sequence><Sequence><Condition>is_leader_moving</Condition><Action>communicate_with_leader</Action></Sequence></Selector></BehaviorTree>
###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.', 'is_conflict_detected': 'Condition: Check if there is another robot within a 10-unit radius. Returns True if another robot is detected, False otherwise.', 'move_to_center': 'Action: Move towards the central location of the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Search the environment for other robots, if conflict is detected, move to the center and form a line'. Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_conflict_detected</Condition><Action>move_to_center</Action><Sequence><Condition>is_agent_in_nest</Condition><Action>change_color_to_white</Action></Sequence></Sequence><Sequence><Condition>is_agent_in_nest</Condition><Action>continue_movement_agent</Action></Sequence><Sequence><Condition>is_agent_in_nest</Condition><Action>form_line</Action></Sequence><Action>wander</Action></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'move_forward': 'Action: Move forward for 5 seconds. Returns True when time is up.', 'move_backward': 'Action: Move backward for 5 seconds. Returns True when time is up.', 'turn_left': 'Action: Turn the robot 90 degrees to the left. Always returns True.', 'turn_right': 'Action: Turn the robot 90 degrees to the right. Always returns True.', 'grab_target': 'Action: Grab the target object if it is within reach. Always returns True.', 'drop_target': 'Action: Drop the target object at the designated drop-off location. Always returns True.', 'is_target_grabbed': 'Condition: Check if the target object has been grabbed. Returns True if the target is grabbed, False otherwise.', 'is_at_dropoff': 'Condition: Check if the robot is at the designated drop-off location. Returns True if at the drop-off location, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Navigate through obstacles and deliver target to drop-off location'. Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_obstacle_detected</Condition><Action>avoid_obstacle</Action></Sequence><Sequence><Condition>is_target_grabbed</Condition><Action>move_forward</Action><Action>move_backward</Action><Sequence><Condition>is_at_dropoff</Condition><Action>drop_target</Action></Sequence></Sequence><Sequence><Condition>is_at_dropoff</Condition><Action>drop_target</Action></Sequence><Action>wander</Action></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'move_to_center': 'Action: Move towards the central location of the environment. Always returns True.', 'analyze_environment': 'Action: Analyze the environment for changes. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.', 'find_path_to_target': 'Action: Use pathfinding algorithm to determine shortest path to target. Always returns True.', 'follow_path': 'Action: Follow the pre-determined path to reach target. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Analyze the environment, if no changes are detected, find the shortest path to target and follow it'. Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>analyze_environment</Condition><Action>move_to_center</Action></Sequence><Sequence><Condition>is_agent_in_nest</Condition><Action>continue_movement_agent</Action></Sequence><Sequence><Condition>is_agent_in_nest</Condition><Action>follow_path</Action></Sequence><Action>wander</Action></Selector></BehaviorTree>  
 ###
4.// INSTRUCTIONS: Use only the following behaviors {'move_towards_target': 'Action: Move towards the target location. Always returns True.', 'scan_for_targets': 'Action: Scan the environment for any potential targets. Always returns True.', 'attack_target': 'Action: Attack the target by shooting a projectile. Always returns True.', 'is_target_reached': 'Condition: Check if the target has been reached. Returns True if the target has been reached, False otherwise.', 'is_target_hostile': 'Condition: Check if the target is hostile. Returns True if the target is hostile, False otherwise.', 'idle': 'Action: Do nothing and wait for further instructions. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Generate behavior tree for a swarm of robots to engage in combat and eliminate all hostile targets
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Conditional>is_target_hostile</Conditional><Selector><Action>move_towards_target</Action><Action>scan_for_targets</Action></Selector><Action>attack_target </Action></Sequence><Action>idle</Action></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'move_to_nearest_resource': 'Action: Move towards the nearest resource. Always returns True.', 'collect_resource': 'Action: Collect the resource and bring it back to the base. Always returns True.', 'is_resource_available': 'Condition: Check if there is a resource available nearby. Returns True if a resource is detected, False otherwise.', 'is_base_reached': 'Condition: Check if the base has been reached. Returns True if the base has been reached, False otherwise.', 'return_to_base': 'Action: Return to the base with the collected resources. Always returns True.', 'idle': 'Action: Do nothing and wait for further instructions. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Generate behavior tree for a swarm of robots to collect resources and bring them back to the base
5.// OUTPUT:
<BehaviorTree><Sequence><Selector><Conditional>is_resource_available</Conditional><Sequence><Action>move_to_nearest_resource</Action><Selector><Action>collect_resource</Action><Action>return_to_base</Action></Selector></Sequence><Action>idle</Action></Selector></Sequence></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'move_to_target_location': 'Action: Move towards the specified target location. Always returns True.', 'scan_for_targets': 'Action: Scan the environment for any potential targets. Always returns True.', 'attack_target': 'Action: Attack the target by shooting a projectile. Always returns True.', 'is_target_reached': 'Condition: Check if the target has been reached. Returns True if the target has been reached, False otherwise.', 'idle': 'Action: Do nothing and wait for further instructions. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Generate behavior tree for a swarm of robots to protect a given area by patrolling and attacking any potential targets.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Conditional>is_target_reached</Conditional><Selector><Action>move_to_target_location</Action><Action>scan_for_targets</Action></Selector><Action>attack_target</Action></Sequence><Action>idle</Action></Selector></BehaviorTree>
###
4.// INSTRUCTIONS: Use only the following behaviors {'find_food_source': 'Action: Search for nearby food sources. Always returns True.', 'gather_food': 'Action: Gather food from a designated source. Always returns True.', 'eat_food': 'Action: Eat the gathered food. Always returns True.', 'is_hungry': 'Condition: Check if the robot's hunger levels are below a certain threshold. Returns True if robot is hungry, False otherwise.', 'is_food_source_available': 'Condition: Check if there is a nearby food source available. Returns True if a source is available, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Continuously search for food and gather and eat when hungry. If there are no available food sources, continue searching.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_hungry</Condition><Selector><Condition>is_food_source_available</Condition><Sequence><Action>find_food_source</Action><Action>gather_food</Action><Action>eat_food</Action></Sequence><Action>find_food_source</Action><Action>gather_food</Action><Action>eat_food</Action></Selector></Sequence><Action>find_food_source</Action></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'explore_area': 'Action: Explore a designated area. Always returns True.', 'collect_data': 'Subtree node: Represents a behavior tree for collecting data from the environment.', 'analyze_data': 'Action: Analyze the collected data. Always returns True.', 'upload_data': 'Action: Upload the analyzed data to a designated server. Always returns True.', 'is_data_collected': 'Condition: Check if the necessary data has been collected. Returns True if data is complete, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Explore the designated area and collect and analyze data until all necessary data is obtained. Then upload the data to a server.
5.// OUTPUT:
<BehaviorTree><Sequence><Action>explore_area</Action><Selector><Condition>is_data_collected</Condition><Sequence><Subtree>collect_data</Subtree><Action>analyze_data</Action><Action>upload_data</Action></Sequence></Selector></Sequence></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'detect_obstacle': 'Subtree node: Represents a behavior tree for detecting obstacles.', 'navigate_around_obstacle': 'Action: Navigate around the obstacle. Always returns True.', 'follow_path': 'Action: Follow a designated path. Always returns True.', 'is_path_blocked': 'Condition: Check if there is an obstacle blocking the designated path. Returns True if path is blocked, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Continuously follow a designated path while also detecting and navigating around obstacles along the way.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_path_blocked</Condition><Subtree>detect_obstacle</Subtree><Action>navigate_around_obstacle</Action></Sequence><Sequence><Action>follow_path</Action></Sequence></Selector></BehaviorTree>
###
4.// INSTRUCTIONS: Use only the following behaviors {'move_forward': "Action: Move forward one unit. Always returns True.", 'turn_left': 'Action: Turn left by 90 degrees. Always returns True.', 'turn_right': 'Action: Turn right by 90 degrees. Always returns True.', 'pick_up_object': 'Action: Pick up an object from the environment. Always returns True.', 'place_object': 'Action: Place an object in a designated location. Always returns True.', 'detect_obstacle': 'Condition: Check for obstacles within a 2 unit radius. Returns True if an obstacle is detected, False otherwise.', 'in_designated_location': 'Condition: Check if agent is in designated location. Returns True if agent is in the designated location, False otherwise.', 'has_object': 'Condition: Check if agent is holding an object. Returns True if agent is holding an object, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Move forward one unit, detect obstacle and turn left if necessary, pick up object, move to designated location and place object.
4.// OUTPUT:
<BehaviorTree> <Sequence> <Action>move_forward</Action> <Selector> <Sequence> <Condition>detect_obstacle</Condition> <Action>turn_left</Action> <Action>move_forward</Action> </Sequence> <Action>pick_up_object</Action> <Sequence> <Condition>in_designated_location</Condition> <Action>place_object</Action> </Sequence> </Selector> </Sequence> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'move_to_target': "Action: Move towards the target. Always returns True.", 'detect_obstacles': 'Condition: Check for obstacles within a 2 unit radius. Returns True if an obstacle is detected, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 1 unit. Returns True if the target is within 1 unit of distance, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Move towards the target, while avoiding obstacles and stop once target is reached.
5.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>detect_obstacles</Condition> <Action>move_to_target</Action> </Sequence> <Action>is_target_reached</Action> </Selector> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'follow_path': "Action: Follow a designated path. Always returns True.", 'detect_obstacle': 'Condition: Check for obstacles within a 2 unit radius. Returns True if an obstacle is detected, False otherwise.', 'in_nest': 'Condition: Check if agent is in the nest. Returns True if agent is in the nest, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Follow a designated path, avoid obstacles, and stop when reaching the nest.
6.// OUTPUT:
<BehaviorTree> <Sequence> <Action>follow_path</Action> <Selector> <Condition>detect_obstacle</Condition> <Action>follow_path</Action> </Selector> <Action>in_nest</Action> </Sequence> </BehaviorTree>
###
4.// INSTRUCTIONS: Use only the following behaviors {'gather_resources': 'Action: Gather resources in the current area. Always returns True.', 'defend_base': 'Action: Defend the base from incoming attacks. Always returns True.', 'is_enemy_nearby': 'Condition: Check if there is an enemy within a certain distance. Returns True if an enemy is detected, False otherwise.', 'is_resource_found': 'Condition: Check if there are resources available in the current area. Returns True if resources are found, False otherwise.', 'is_base_defended': 'Condition: Check if the base is currently being attacked. Returns True if the base is being attacked, False otherwise.', 'has_resources': 'Condition: Check if there are enough resources gathered. Returns True if enough resources are gathered, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Create a behavior tree for a colony of ants to gather resources, defend their base, and maintain a sufficient amount of resources.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_resource_found</Condition><Action>gather_resources</Action></Sequence><Sequence><Condition>has_resources</Condition><Action>defend_base</Action></Sequence><Selector><Sequence><Condition>is_enemy_nearby</Condition><Action>defend_base</Action></Sequence><Action>gather_resources</Action></Selector></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'survey_area': 'Action: Survey the current area using cameras and other sensors. Always returns True.', 'communicate_with_other_robots': 'Action: Send and receive information and commands to and from other robots. Always returns True.', 'calculate_optimal_path': 'Action: Use algorithms to calculate the optimal path for the swarm robots. Always returns True.', 'has_new_task': 'Condition: Check if a new task has been assigned to the swarm robots. Returns True if a new task is given, False otherwise.', 'is_map_complete': 'Condition: Check if the entire map has been fully surveyed. Returns True if the map is complete, False otherwise.', 'has_map_data': 'Condition: Check if the swarm robots have received map data from other robots. Returns True if map data is available, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Create a behavior tree for a swarm of robots to efficiently survey and map an unknown area.
5.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_map_complete</Condition><Selector><Sequence><Condition>has_map_data</Condition><Action>calculate_optimal_path</Action><Action>communicate_with_other_robots</Action></Sequence></Selector></Sequence><Selector><Sequence><Condition>has_new_task</Condition><Action>communicate_with_other_robots</Action></Sequence><Action>survey_area</Action></Selector></BehaviorTree>


###
6.// INSTRUCTIONS: Use only the following behaviors {'collect_fruits': 'Action: Use vacuum arm to collect ripe fruits. Always returns True.', 'sort_fruits': 'Action: Sort collected fruits based on size. Always returns True.', 'navigate_to_next_tree': 'Action: Navigate to the next fruit tree using GPS and sensors. Always returns True.', 'is_fruit_available': 'Condition: Check if there are ripe fruits available for collection. Returns True if fruits are available, False otherwise.', 'is_navigation_successful': 'Condition: Check if the robot has successfully navigated to the next tree. Returns True if navigation is successful, False otherwise.', 'has_sorted_fruits': 'Condition: Check if the collected fruits have been sorted based on size. Returns True if fruits are sorted, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Create a behavior tree for a robot to autonomously collect and sort fruits from a fruit orchard.
6.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_fruit_available</Condition><Selector><Sequence><Action>collect_fruits</Action><Action>sort_fruits</Action><Condition>has_sorted_fruits</Condition><Action>navigate_to_next_tree</Action></Sequence><Action>collect_fruits</Action></Selector></Sequence></BehaviorTree> 	
###
4.// INSTRUCTIONS: Use only the following behaviors {'move_forward': 'Action: Move the robot one step forward in the current direction. Always returns True.', 'monitor_health': "Action: Continuously checks the agent's health. Always returns True.", 'get_health_pack': 'Action: Find and retrieve a health pack. Always returns True.', 'restore_health': 'Action: Use a health pack to restore health. Always returns True.', 'is_health_low': 'Condition: Check if health is below a specific threshold. Returns True if health is below the threshold, False otherwise.', 'move_to_target': 'Action: Move towards a target location. Always returns True.', 'is_target_reached': 'Condition: Check if target is reached. Returns True if the agent is within a certain range of the target, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: move towards target location and restore health if necessary
4.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>is_health_low</Condition> <Action>get_health_pack</Action> <Action>restore_health</Action> </Sequence> <Action>move_to_target</Action></Selector> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'detect_enemy': "Condition: Check if an enemy is detected within 10 units. Returns True if an enemy is detected, False otherwise.", 'attack': 'Action: Engage in combat with a detected enemy. Always returns True.', 'heal_ally': 'Action: Heal a nearby ally. Always returns True.', 'move_to_position': "Action: Move towards a specific position. Always returns True.", 'has_ally_in_range': 'Condition: Check if an ally is within a certain range. Returns True if an ally is within the defined range, False otherwise.', 'is_in_cover': 'Condition: Check if the agent is in a covered position. Returns True if the agent is in cover, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: search for enemies, engage in combat, and heal nearby allies
5.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Condition>detect_enemy</Condition> <Action>attack</Action> </Selector> <Sequence> <Condition>has_ally_in_range</Condition> <Action>heal_ally</Action> </Sequence> <Action>move_to_position</Action> </Sequence></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'detect_food_source': 'Condition: Check if a food source is detected. Returns True if a food source is detected, False otherwise.', 'gather_food': 'Action: Gather food from a food source. Always returns True.', 'is_food_low': 'Condition: Check if food stores are below a certain threshold. Returns True if food stores are low, False otherwise.', 'return_to_nest': 'Action: Return to the nest with gathered food. Always returns True.', 'is_nest_reached': 'Condition: Check if the nest is reached. Returns True if the agent is within a certain range of the nest, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: gather food and return to nest if food is low
6.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>is_food_low</Condition> <Action>detect_food_source</Action> <Action>gather_food</Action> <Condition>is_nest_reached</Condition> <Action>return_to_nest</Action> </Sequence> </Selector></BehaviorTree>
###
4.// INSTRUCTIONS: Use only the following behaviors {'gather_resources': 'Action: Gather resources. Always returns True.', 'build': 'Action: Build structures. Always returns True.', 'is_enemy_nearby': 'Condition: Check for enemies in the surrounding area. Returns True if an enemy is detected, False otherwise.', 'is_resource_available': 'Condition: Check if resources are available in the environment. Returns True if resources are present, False otherwise.', 'is_structure_complete': 'Condition: Check if the structure is complete. Returns True if the structure is complete, False otherwise.', 'is_inventory_full': 'Condition: Check if the agent's inventory is full. Returns True if the inventory is full, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: When an enemy is nearby, gather resources and build until inventory is full. Otherwise, keep gathering resources.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_enemy_nearby</Condition><Selector><Sequence><Condition>is_resource_available</Condition><Selector><Sequence><Action>gather_resources</Action><Condition>is_inventory_full</Condition><Action>build</Action></Sequence><Action>gather_resources</Action></Selector></Sequence><Action>gather_resources</Action></Selector></Sequence><Action>gather_resources</Action></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'enter_building': 'Action: Enter a building. Always returns True.', 'exit_building': 'Action: Exit a building. Always returns True.', 'is_building_open': 'Condition: Check if a building is open. Returns True if the building is open, False otherwise.', 'is_inside_building': 'Condition: Check if the agent is inside a building. Returns True if the agent is inside a building, False otherwise.', 'is_button_pressed': 'Condition: Check if a button has been pressed. Returns True if the button is pressed, False otherwise.', 'press_button': 'Action: Press a button. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: When inside a building, press a button and then exit the building. Otherwise, enter a building and press a button.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_inside_building</Condition><Selector><Sequence><Condition>is_button_pressed</Condition><Action>press_button</Action><Action>exit_building</Action></Sequence><Action>enter_building</Action></Selector></Sequence><Selector><Sequence><Condition>is_button_pressed</Condition><Action>press_button</Action></Sequence></Selector></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'move_forward': 'Action: Move forward. Always returns True.', 'rotate': 'Action: Rotate agent. Always returns True.', 'is_obstacle_in_front': 'Condition: Check for obstacles in front. Returns True if an obstacle is detected, False otherwise.', 'is_goal_reached': 'Condition: Check if the goal has been reached. Returns True if the goal is reached, False otherwise.', 'check_battery': 'Condition: Check battery level. Returns True if battery level is above a certain threshold, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Check battery level. If battery is above 50%, move forward. If not, rotate until fully charged.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>check_battery</Action><Condition>is_goal_reached</Condition><Action>move_forward</Action></Sequence><Selector><Sequence><Condition>is_battery_low</Condition><Action>rotate</Action><Condition>is_battery_high</Condition></Selector></Sequence></Selector></BehaviorTree> 
###
4.// INSTRUCTIONS: Use only the following behaviors {'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_red': "Action: Change agent's color to red. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'is_intruder_detected': 'Condition: Check if an intruder is detected in the monitored area. Returns True if an intruder is detected, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Transport an object from one location to another' Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_path_clear</Condition><Action>continue_movement_agent</Action><Sequence><Condition>is_target_reached</Condition><Action>change_color_to_red</Action></Sequence></Sequence><Sequence><Condition>is_agent_in_nest</Condition><Sequence><Action>wander</Action><Sequence><Condition>is_target_reached</Condition><Action>change_color_to_green</Action></Sequence></Sequence></Sequence><Sequence><Condition>is-agent-in-nest</Condition><Action>task_completed</Action></Sequence><Action>wander</Action></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_red': "Action: Change agent's color to red. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.', 'backward': 'Action: Move the robot one step backward in the current direction. Always returns True.', 'turn_left': 'Action: Turn the robot 90 degrees to the left. Always returns True.', 'turn_right': 'Action: Turn the robot 90 degrees to the right. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Patrol a designated area and change color to red if an intruder is detected'. Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>wander</Action><Condition>is_path_clear</Condition><Sequence><Condition>is_target_detected</Condition><Action>change_color_to_red</Action></Sequence></Sequence><Sequence><Condition>is_agent_in_nest</Condition><Sequence><Action>wander</Action><Condition>is_path_clear</Condition><Sequence><Condition>is_target_detected</Condition><Action>change_color_to_red</Action></Sequence></Sequence></Sequence><Sequence><Condition>is_agent_in_nest</Condition><Action>task_completed</Action></Sequence><Action>wander</Action></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_red': "Action: Change agent's color to red. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.', 'go_to_target': 'Action: Move towards the designated target location. Always returns True.', 'is_target_reached': 'Condition: Check if the target location is reached. Returns True if the target location is reached, False otherwise.', 'is_investigated': 'Condition: Check if the agent has investigated the designated target location. Returns True if the agent has investigated the target, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Investigate a designated target location and update internal map'. Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>wander</Action><Action>go_to_target</Action><Condition>is_obstacle_detected</Condition><Action>avoid_obstacle</Action><Sequence><Condition>is_agent_in_nest</Condition><Action>task_completed</Action></Sequence><Sequence><Condition>is_target_reached</Condition><Condition>is_investigated</Condition><Action>task_completed</Action></Sequence></Sequence></Selector></BehaviorTree>###
4.// INSTRUCTIONS: Use only the following behaviors {'find_highest_point': 'Action: Move to the highest point in the environment. Always returns True.', 'descend': "Action: Move downwards towards the bottom of the current structure. Always returns True.", 'ascend': "Action: Move upwards towards the top of the current structure. Always returns True.", 'is_highest_point': 'Condition: Check if the robot is at the highest point in the environment. Returns True if at the highest point, False otherwise.', 'is_bottom_reached': 'Condition: Check if the robot has reached the bottom of the current structure. Returns True if the bottom is reached, False otherwise.', 'is_top_reached': 'Condition: Check if the robot has reached the top of the current structure. Returns True if the top is reached, False otherwise.', 'is_structure_detected': 'Condition: Check if a structure is within the robot\'s vicinity. Returns True if a structure is detected, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Generate behavior tree for a robot to climb and explore tall structures while avoiding obstacles and maintaining stability.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_structure_detected</Condition><Selector><Sequence><Condition>is_highest_point</Condition><Action>descend</Action></Sequence><Sequence><Condition>is_top_reached</Condition><Action>descend</Action><Action>find_highest_point</Action></Sequence></Selector></Sequence><Sequence><Condition>is_obstacle_detected</Condition><Action>avoid_obstacle</Action><Action>ascend</Action></Sequence></Selector></BehaviorTree>
###
5.// INSTRUCTIONS: Use only the following behaviors {'find_food': 'Action: Locate the nearest source of food. Always returns True.', 'eat': "Action: Consume the found food source. Always returns True.", 'is_hungry': 'Condition: Check if the robot is feeling hungry. Returns True if the robot is hungry, False otherwise.', 'is_food_present': 'Condition: Check if food is detected in the environment. Returns True if food is detected, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Create behavior tree for a robot to forage for food and satisfy its hunger.
5.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_hungry</Condition><Selector><Sequence><Condition>is_food_present</Condition><Action>eat</Action></Sequence><Action>find_food</Action></Selector></Sequence></BehaviorTree>
###
6.// INSTRUCTIONS: Use only the following behaviors {'collect_resource': 'Action: Gather and collect the available resources. Always returns True.', 'build_structure': "Action: Use the collected resources to construct a designated structure in the environment. Always returns True.", 'is_resource_available': 'Condition: Check if there are resources present in the environment. Returns True if resources are present, False otherwise.', 'is_structure_built': 'Condition: Check if the designated structure has been completed. Returns True if the structure is built, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Generate behavior tree for a group of robots to collect and use resources to build a designated structure in the environment.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Conditionr>is_resource_available</Condition><Selector><Sequence><Condition>is_structure_built</Condition><Action>build_structure</Action></Sequence><Sequence><Action>collect_resource</Action><Action>build_structure</Action></Sequence></Selector></Sequence></BehaviorTree> 
###
4.// INSTRUCTIONS: Use only the following behaviors {'explore': 'Action: Explore the surrounding area. Always returns True.', 'detect_food_source': 'Action: Use sensors to detect nearby food sources. Always returns True.', 'gather_food': 'Subtree node: Represents a behavior tree for gathering food.', 'is_food_source_available': 'Condition: Checks if a food source is within range. Returns True if a food source is detected, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Explore the area and gather food if a food source is detected
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>explore</Action><Condition>is_food_source_available</Condition><Action>gather_food</Action></Sequence><Action>explore</Action></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'identify_object': 'Action: Use sensors to identify objects in the area. Always returns True.', 'pick_up_object': 'Action: Pick up the identified object. Always returns True.', 'drop_object': 'Action: Drop the object that was picked up. Always returns True.', 'is_object_available': 'Condition: Checks if any objects are nearby. Returns True if an object is detected, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Identify and pick up any objects in the area. If no objects are available, continue exploring.
5.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_object_available</Condition><Sequence><Action>identify_object</Action><Action>pick_up_object</Action></Sequence></Sequence><Action>drop_object</Action></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'detect_fire': 'Action: Use sensors to detect if there is a fire nearby. Always returns True.', 'extinguish_fire': 'Action: Use a fire extinguisher to put out the fire. Always returns True.', 'escape_path': 'Condition: Checks for a clear path for escape. Returns True if a clear path is detected, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: If a fire is detected, extinguish it. Otherwise, find an escape path.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>detect_fire</Condition><Action>extinguish_fire</Action></Sequence><Condition>escape_path</Condition></Selector></BehaviorTree>
###
4.// INSTRUCTIONS: Use only the following behaviors {'scan_area_depth': 'Action: Scan the surrounding area using depth sensors. Always returns True.', 'analyze_environmental_data': 'Action: Analyze collected data and make informed decisions. Always returns True.', 'identify_object': 'Condition: Check if an object has been identified in the current area. Returns True if an object has been identified, False otherwise.', 'identify_water_source_depth': 'Condition: Check if the water source is within reach using depth sensors. Returns True if the water source is within reach, False otherwise.', 'navigate_to_water_source': 'Action: Move towards the nearest water source. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Generate behavior tree for a robot to locate and access water sources in a dry environment.
4.// OUTPUT:
<BehaviorTree><Sequence><Condition>identify_water_source_depth</Condition><Selector><Action>navigate_to_water_source</Action><Sequence><Action>scan_area_depth</Action><Condition>identify_object</Condition><Action>analyze_environmental_data</Action></Sequence></Selector></Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'pick_up_item': 'Action: Pick up the specified item. Returns True if the item is successfully picked up, False otherwise.', 'place_item': 'Action: Place the specified item at the designated location. Returns True if the item is successfully placed at the designated location, False otherwise.', 'check_inventory': 'Condition: Check the robot's inventory for the specified item. Returns True if the item is present in the inventory, False otherwise.', 'navigate_to_item_location': 'Action: Move towards the location of the specified item. Returns True if the robot successfully reaches the item location, False otherwise.', 'is_item_needed': 'Condition: Check if the specified item is needed for the current task. Returns True if the item is needed, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Generate behavior tree for a robot to retrieve and place a specific tool at a designated location.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>check_inventory</Condition><Selector><Action>navigate_to_item_location</Action><Selector><Sequence><Condition>is_item_needed</Condition><Action>pick_up_item</Action><Action>place_item</Action></Sequence><Action>inform_task_complete</Action></Selector></Sequence><Action>inform_task_failed</Action></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'detect_fallen_trees': 'Action: Scan the environment for any fallen trees. Always returns True.', 'clear_path': 'Action: Move and push any fallen trees out of the way to clear a path. Always returns True.', 'avoid_fallen_trees': 'Action: Avoid any fallen trees while navigating. Always returns True.', 'charge_battery_low': 'Action: Go to the nearest charging station to recharge the battery. Returns True if the battery is successfully recharged, False otherwise.', 'detect_obstacle': 'Condition: Check for obstacles in the path. Returns True if an obstacle is detected, False otherwise.', 'move_to_destination': 'Action: Move towards the designated destination. Returns True if the robot reaches the destination, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Generate behavior tree for a robot to clear obstacles and reach a specific destination while avoiding fallen trees and recharging the battery if needed.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Selector><Action>detect_fallen_trees</Action><Sequence><Action>avoid_fallen_trees</Action><Condition>detect_obstacle</Condition><Action>clear_path</Action></Sequence></Selector><Action>charge_battery_low</Action></Sequence><Action>move_to_destination</Action></Selector></BehaviorTree>
###
4.// INSTRUCTIONS: Use only the following behaviors {'search': 'Action: Search for a specific target object. Returns True when the target object is found, False otherwise.', 'collect': 'Action: Collect the target object once it is found. Returns True when the object is successfully collected, False otherwise.', 'is_object_detected': 'Condition: Check if the target object is detected within the robot\'s range. Returns False if the object is not detected, True otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Design a behavior tree for a robot to search for and collect a specific object in a designated area while avoiding obstacles.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>search</Action><Condition>is_object_detected</Condition><Action>collect</Action></Sequence><Selector><Condition>is_obstacle_detected</Condition><Action>turn_left</Action><Action>turn_right</Action></Selector><Action>move_forward</Action></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'avoid_obstacles': 'Action: Avoid any obstacles in the robot\'s path. Returns True when the obstacle is successfully avoided, False otherwise.', 'navigate_to_target': 'Action: Move towards a designated target location. Returns True when the target is successfully reached, False otherwise.', 'check_battery_level': 'Condition: Check the robot\'s current battery level and return True if it is above a certain threshold, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Create a behavior tree for a robot to navigate to a specific location while avoiding obstacles and ensuring a minimum battery level.
5.// OUTPUT:
<BehaviorTree><Sequence><Condition>check_battery_level</Condition><Selector><Sequence><Action>navigate_to_target</Action><Condition>is_obstacle_detected</Condition><Action>avoid_obstacles</Action></Sequence><Selector><Condition>is_obstacle_detected</Condition><Action>turn_left</Action><Action>turn_right</Action></Selector><Action>move_forward</Action></Selector></Sequence></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'detect_objects': 'Action: Use sensors to detect objects in the environment. Returns True if objects are detected, False otherwise.', 'identify_objects': 'Action: Identify and classify objects that were detected. Returns True when all objects have been identified, False otherwise.', 'process_data': 'Action: Process and analyze data from the detected and identified objects. Returns True when the analysis is complete, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Implement a behavior tree for a robot to detect, identify, and analyze various objects in the environment.
6.// OUTPUT:
<BehaviorTree><Sequence><Action>detect_objects</Action><Selector><Sequence><Action>identify_objects</Action><Action>process_data</Action></Sequence><Selector><Condition>is_obstacle_detected</Condition><Action>turn_left</Action><Action>turn_right</Action></Selector><Action>move_forward</Action></Selector></Sequence></BehaviorTree>
###
4.// INSTRUCTIONS: Use only the following behaviors {'move_to_next_position': 'Action: Move to the next position. Always returns True.', 'wait_for_signal': 'Action: Wait for a signal from a designated leader robot. Always returns True.', 'broadcast_position': 'Action: Broadcast current position to other robots. Always returns True.', 'is_leader_detected': 'Condition: Check if a leader robot is within 10 units of distance. Returns True if a leader is detected, False otherwise.', 'is_position_reached': 'Condition: Check if the next position has been reached. Returns True if the next position has been reached, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to assist robots in coordinating their movements and reaching a designated position
4// OUTPUT:
<BehaviorTree> <Selector> <Condition>is_leader_detected</Condition> <Sequence> <Action>move_to_next_position</Action> <Selector> <Condition>is_position_reached</Condition> <Action>wait_for_signal</Action> </Selector> </Sequence> <Selector> <Condition>is_position_reached</Condition> <Action>broadcast_position</Action> </Selector> </Selector> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'search_for_food': 'Action: Search for food using designated sensors. Always returns True.', 'collect_food': 'Action: Collect food from the environment. Always returns True.', 'return_to_nest': 'Action: Return to the nest with collected food. Always returns True.', 'is_food_detected': 'Condition: Check if food is detected in the current area. Returns True if food is detected, False otherwise.', 'is_nest_reached': 'Condition: Check if the nest has been reached. Returns True if the nest has been reached, False otherwise.', 'is_food_collected': 'Condition: Check if food has been successfully collected. Returns True if food has been collected, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree for a robot to forage for food and return it to the nest
5//OUTPUT:
<BehaviorTree> <Sequence> <Action>search_for_food</Action> <Selector> <Condition>is_food_detected</Condition> <Sequence> <Action>collect_food</Action> <Selector> <Condition>is_food_collected</Condition> <Sequence> <Action>return_to_nest</Action> <Selector> <Condition>is_nest_reached</Condition> <Action>wait_for_signal</Action> </Selector> </Sequence> <Selector> <Condition>is_nest_reached</Condition> <Action>return_to_nest</Action> </Selector> </Sequence> </Selector> </Sequence> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'detect_danger': 'Condition: Check if danger is detected in the environment. Returns True if danger is detected, False otherwise.', 'evade_danger': 'Action: Evade danger by moving to a safe distance away from the danger. Always returns True.', 'communicate_danger': 'Action: Communicate the presence of danger to other robots. Always returns True.', 'move_to_safety': 'Action: Move to a designated safe location. Always returns True.', 'is_danger_avoided': 'Condition: Check if the danger has been successfully avoided by reaching a safe distance. Returns True if danger has been successfully avoided, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to assist robots in detecting and avoiding danger in the environment
6//OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>detect_danger</Condition> <Action>evade_danger</Action> <Selector> <Condition>is_danger_avoided</Condition> <Selector> <Condition>is_danger_avoided</Condition> <Action>communicate_danger</Action> </Selector> <Selector> <Condition>is_danger_avoided</Condition> <Action>move_to_safety</Action> </Selector> </Selector> </Sequence> </Selector> </BehaviorTree> 
###
4.// INSTRUCTIONS: Use only the following behaviors {'move_to_next_waypoint': 'Action: Move the robot to the next waypoint in the patrol route. Always returns True.', 'scan_for_intruders': 'Action: Scan the current area for any intruders using sensors. Always returns True.', 'escape': 'Action: Move to a safe location outside the intruder's range. Always returns True.', 'report_intruder': 'Action: Send an alert signal indicating an intruder has been detected. Always returns True.', 'is_target_detected': 'Condition: Check if the target is detected in the designated area. Returns True if target is detected, False otherwise.', 'is_intruder_detected': 'Condition: Check if an intruder is detected in the monitored area. Returns True if an intruder is detected, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Generate behavior tree to scan for intruders in the designated area, escape if an intruder is detected, and report any detected targets.
4.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_intruder_detected</Condition><Sequence><Action>escape</Action><Selector><Sequence><Condition>is_target_detected</Condition><Action>report_intruder</Action></Sequence></Selector></Sequence></Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'move_to_next_location': 'Action: Move robot to designated location within the environment. Always returns True.', 'scan_for_targets': 'Action: Scan the current area for any targets using sensors. Always returns True.', 'pick_up_target': 'Action: Pick up the target object in the designated location. Always returns True.', 'deposit_target': 'Action: Deposit the target object in the designated location. Always returns True.', 'is_target_picked_up': 'Condition: Check if the target object has been picked up. Returns True if the target is picked up, False otherwise.', 'is_target_deposited': 'Condition: Check if the target object has been deposited. Returns True if the target is deposited, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Generate behavior tree for a robot to pick up and deposit a target object at a designated location.
5.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>is_target_deposited</Condition><Action>move_to_next_location</Action></Sequence><Sequence><Condition>is_target_picked_up</Condition><Action>deposit_target</Action></Sequence></Selector><Action>scan_for_targets</Action><Action>pick_up_target</Action></Sequence></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'move_to_next_location': 'Action: Move robot to designated location within the environment. Always returns True.', 'turn_left': 'Action: Turn the robot 90 degrees to the left. Always returns True.', 'turn_right': 'Action: Turn the robot 90 degrees to the right. Always returns True.', 'wait': 'Action: Wait at the current location for a designated amount of time. Always returns True.', 'is_location_visited': 'Condition: Check if the current location has been visited. Returns True if the location has been visited, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Generate behavior tree for a robot to patrol an area by moving to each designated location, turning left at each location, and waiting for 5 seconds.
6.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_location_visited</Condition><Select 
###
4.// INSTRUCTIONS: Use only the following behaviors {'is_leader': 'Condition: Check if the robot is designated as the leader. Returns True if the robot is the leader, False otherwise.', 'sync_leader_direction': 'Action: Align the robot's direction with the leader. Always returns True.', 'sync_leader_speed': 'Action: Match the robot's speed with the leader. Always returns True.', 'rotate_around_leader': 'Action: Move in a circular path around the leader. Always returns True.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Generate behavior tree for a robot to support the leader in a formation maneuver
4.// OUTPUT:
<BehaviorTree><Selector><Condition>is_obstacle_detected</Condition><Action>avoid_obstacle</Action><Sequence><Condition>is_leader</Condition><Selector><Sequence><Condition>is_leader</Condition><Action>move_to_leader</Action><Sequence><Condition>is_obstacle_detected</Condition><Action>avoid_obstacle</Action></Sequence></Sequence></Selector></Sequence></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'collect_water': 'Action: Collect water from a nearby source. Always returns True.', 'purify_water': 'Action: Purify the collected water using a purification system. Always returns True.', 'deliver_water': 'Action: Deliver the purified water to the designated drop-off location. Always returns True.', 'is_water_full': 'Condition: Check if the water storage tank is full. Returns True if the tank is full, False otherwise.', 'is_water_purified': 'Condition: Check if the collected water has been purified. Returns True if the water is purified, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Generate behavior tree for a robot to assist in providing clean water to a remote community in need
5.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_water_full</Condition><Selector><Sequence><Condition>is_water_purified</Condition><Action>deliver_water</Action><Selector><Sequence><Condition>is_target_detected</Condition><Action>move_to_target</Action><Sequence><Condition>is_water_full</Condition><Action>purify_water</Action></Sequence></Selector></Sequence></Selector></Sequence></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'move_to_next_checkpoint': 'Action: Move the robot to the next checkpoint along the specified path. Always returns True.', 'wait_for_signal': 'Action: Wait for a signal from the leader robot to proceed to the next checkpoint. Always returns True.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'synchronize_speed': 'Action: Match the robot's speed with the leader. Always returns True.', 'is_at_checkpoint': 'Condition: Check if the robot has reached the designated checkpoint. Returns True if at the checkpoint, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Generate behavior tree for a robot to participate in a coordinated race with other robots
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_obstacle_detected</Condition><Action>avoid_obstacle</Action><Sequence><Condition>is_at_checkpoint</Condition><Action>wait_for_signal</Action><Selector><Sequence><Condition>synchronize_speed</Condition><Action>move_to_next_checkpoint</Action></Sequence><Action>wait_for_signal</Action></Selector></Sequence></Selector></BehaviorTree>
###
4.// INSTRUCTIONS: Use only the following behaviors {'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_red': "Action: Change agent's color to red. Always returns True.", 'change_color_to_blue': "Action: Change agent's color to blue. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'move_forward': 'Action: Move the robot one step forward in the current direction. Always returns True.', 'move_backward': 'Action: Move the robot one step backward from the current direction. Always returns True.', 'turn_left': 'Action: Turn the robot 90 degrees to the left. Always returns True.', 'turn_right': 'Action: Turn the robot 90 degrees to the right. Always returns True.', 'stop_movement': 'Action: Stop all movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task).
4.// USER COMMAND: generate behavior tree to 'Move in a zigzag pattern and change color to red, blue, and green repeatedly' Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Action>move_forward</Action> <Action>change_color_to_red</Action> </Sequence> <Sequence> <Action>move_backward</Action> <Action>change_color_to_blue</Action> </Sequence> <Sequence> <Action>move_forward</Action> <Action>change_color_to_green</Action> <Sequence> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.', 'go_to_nest': 'Action: Move towards the designated nest location. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task).
5.// USER COMMAND: generate behavior tree to 'Maintain a specified distance from the nest, while avoiding obstacles and returning to the nest when target is detected' Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>is_target_detected</Condition> <Action>go_to_nest</Action> <Sequence> <Condition>is_target_reached</Condition> <Action>agent_movement_freeze</Action> </Sequence> </Sequence> <Sequence> <Condition>is_obstacle_detected</Condition> <Action>avoid_obstacle</Action> </Sequence> <Action>wander</Action> </Selector> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'change_color_to_yellow': "Action: Change agent's color to yellow. Always returns True.", 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_near_obstacle': 'Condition: Check if the agent is close to an obstacle. Returns True if the agent is within a certain distance of an obstacle, False otherwise.', 'is_target_in_sight': 'Condition: Check if the target is currently within the agent's line of sight. Returns True if the target is visible, False otherwise.', 'move_towards_target': 'Action: Move towards the target location. Always returns True.', 'stop_movement': 'Action: Stop all movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task).
6.// USER COMMAND: generate behavior tree to 'Move towards the target while avoiding obstacles and change color to yellow when target is in sight' Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>is_near_obstacle</Condition> <Action>stop_movement</Action> </Sequence> <Sequence> <Condition>is_target_in_sight</Condition> <Action>change_color_to_yellow</Action> <Sequence> <Action>move_towards_target</Action> <Sequence> <Condition>is_target_in_sight</Condition> <Action>stop_movement</Action> </Sequence> </Sequence> </Sequence> </Selector> </BehaviorTree>        
###
4.// INSTRUCTIONS: Use only the following behaviors {'start_movement': 'Action: Begin movement towards the target location. Returns True if movement is successfully started, False if unable to move.', 'update_position': 'Action: Update current position based on sensor readings and previous movements. Always returns True.', 'is_stuck': 'Condition: Check if the robot is stuck in one location without any progress. Returns True if the robot is stuck, False otherwise.', 'is_target_reached': 'Condition: Check if the robot has reached the target location. Returns True if the target is reached, False otherwise.', 'is_boundary_reached': 'Condition: Check if the robot has reached the boundary of the environment. Returns True if the boundary is reached, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Generate a behavior tree for a robot to navigate and explore a maze, reaching the end goal while avoiding getting stuck or hitting boundaries.
4.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>is_stuck</Condition><Action>start_movement</Action></Sequence><Sequence><Condition>is_boundary_reached</Condition><Action>turn_right</Action></Sequence></Selector><Sequence><Condition>is_target_reached</Condition><Action>task_completed</Action></Sequence><Action>update_position</Action></Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'take_photo': 'Action: Use camera to capture an image of the current location. Always returns True.', 'analyze_photo': 'Action: Analyze the captured photo and identify key objects or features. Always returns True.', 'find_navigation_path': 'Action: Use the analyzed photo to determine the best path for navigation. Returns True if a path is found, False otherwise.', 'follow_path': 'Action: Follow the determined navigation path. Returns True if successfully following the path, False if path is blocked or obstacle is encountered.', 'is_photo_taken': 'Condition: Check if a photo has been captured. Returns True if photo is taken, False otherwise.', 'is_path_blocked': 'Condition: Check if the current direction of movement is blocked by an obstacle or impasse. Returns True if the path is blocked, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Generate a behavior tree for a vision-equipped robot to navigate and complete a visually-guided task, using the captured photo to find the most feasible path.
5.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_photo_taken</Condition><Selector><Sequence><Condition>is_path_blocked</Condition><Action>analyze_photo</Action></Sequence><Action>take_photo</Action></Selector></Sequence><Sequence><Condition>is_path_blocked</Condition><Action>find_navigation_path</Action><Action>follow_path</Action></Sequence></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'pick_resource': 'Action: Pick up the closest available resource. Returns True if successfully picked up a resource, False if no resources are available or already carrying a resource.', 'deposit_resource': 'Action: Deposit a carried resource at a designated location. Returns True if successfully deposited, False if not currently carrying a resource.', 'find_resource': 'Action: Use sensor readings to locate the nearest available resource. Returns True if a resource is found, False otherwise.', 'explore_area': 'Action: Explore the surrounding area for potential resources. Always returns True.', 'is_resource_depleted': 'Condition: Check if all resources in the environment have been collected and depleted. Returns True if all resources are depleted, False otherwise.', 'is_target_reached': 'Condition: Check if the designated resource deposit location has been reached. Returns True if reached, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Generate a behavior tree for a group of robots to efficiently collect and deposit resources, constantly exploring and adapting to changing resource availability.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_resource_depleted</Condition><Action>task_completed</Action></Sequence><Sequence><Condition>is_target_reached</Condition><Selector><Sequence><Action>deposit_resource</Action><Action>pick_resource</Action></Sequence><Selector><Condition>is_resource_depleted</Condition><Action>explore_area</Action></Selector></Selector></Sequence><Sequence><Condition>is_resource_depleted</Condition><Action>find_resource</Action></Sequence></Selector></BehaviorTree>
###
4.// INSTRUCTIONS: Use only the following behaviors {'detect_obstacles': 'Condition: Check for obstacles in the environment. Returns True if any obstacles are present, False otherwise.', 'avoid_obstacles': 'Action: Move the robot to avoid obstacles. Returns True when the robot successfully avoids an obstacle.', 'return_to_home': 'Action: Return the robot to its designated home location. Returns True when the robot reaches its home.', 'scan_area': 'Action: Use sensors to scan the surrounding area. Returns True when the scan is completed.', 'is_target_found': 'Condition: Check if the target is within range. Returns True if the target is detected within range, False otherwise.', 'collect_resource': 'Action: Collect the resource in the area. Returns True when the resource is successfully collected.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Create behavior tree to navigate through obstacles, scan the area for the target, collect the target and return home.
4.// OUTPUT:
<BehaviorTree><Sequence><Condition>detect_obstacles</Condition><Action>avoid_obstacles</Action></Sequence><Sequence><Condition>is_target_found</Condition><Action>collect_resource</Action></Sequence><Action>scan_area</Action><Action>return_to_home</Action></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'follow_leader': 'Action: Follow the designated leader. Returns True when following the leader.', 'avoid_collision': 'Action: Avoid collisions with other robots. Returns True when successfully avoiding collision.', 'detect_leader': 'Condition: Check if the designated leader is within range. Returns True if the leader is within range of detection, False otherwise.', 'gather_resource': 'Action: Gather resources in the surrounding area. Returns True when successfully gathering resources.', 'is_resource_gathered': 'Condition: Check if a resource has been gathered. Returns True if a resource has been successfully gathered, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Build behavior tree for a swarm of robots to follow a designated leader, avoid collisions with other robots and gather resources nearby.
5.// OUTPUT:
<BehaviorTree><Sequence><Condition>detect_leader</Condition><Action>follow_leader</Action></Sequence><Action>avoid_collision</Action><Sequence><Condition>is_resource_gathered</Condition><Action>gather_resource</Action></Sequence></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'move_to_goal': 'Action: Move towards the designated goal location. Returns True when the goal is within reach.', 'obstacle_avoidance': 'Action: Use sensors and decision-making to avoid obstacles. Returns True when successfully avoiding an obstacle.', 'random_movement': 'Action: Move randomly within the environment. Returns True when moving randomly.', 'check_battery': 'Condition: Check the battery level. Returns True if the battery is above a designated threshold, False otherwise.', 'recharge': 'Action: Recharge the battery to a designated level. Returns True when successfully recharging the battery.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Create a behavior tree for a robot to move to a designated goal location, but also avoid obstacles and recharge its battery if necessary.
6.// OUTPUT:
<BehaviorTree><Sequence><Condition>check_battery</Condition><Action>move_to_goal</Action></Sequence><Sequence><Action>random_movement</Action><Action>obstacle_avoidance</Action></Sequence><Sequence><Condition>battery_below_threshold</Condition><Action>recharge</Action></Sequence></BehaviorTree>
###
4.// INSTRUCTIONS: Use only the following behaviors {'shoot_hoop': 'Action: Shoot a basket in a basketball game. Always returns True.', 'dribble': 'Action: Dribble the ball in a basketball game. Always returns True.', 'pass_ball': 'Action: Pass the ball to a teammate in a basketball game. Always returns True.', 'is_ball_held': 'Condition: Checks if the ball is currently held by the agent. Returns True if the ball is held, False otherwise.', 'is_player_defensed': 'Condition: Checks if a defender is blocking the agent. Returns True if a defender is present, False otherwise.', 'is_player_open': 'Condition: Checks if a teammate is open for a pass. Returns True if a teammate is open, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: During a basketball game, check if a defender is blocking the agent. If so, pass the ball to a teammate. Otherwise, shoot a hoop.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_player_defensed</Condition><Action>pass_ball</Action><Action>shoot_hoop</Action></Sequence><Action>dribble</Action></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'find_key': 'Action: Search for a key in the environment. Always returns True.', 'open_door': 'Action: Open a door if the key has been found. Always returns True.', 'is_key_found': 'Condition: Checks if the key has been found. Returns True if the key is found, False otherwise.', 'is_door_opened': 'Condition: Checks if the door has been opened. Returns True if the door is opened, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'wait': 'Action: Wait for a short period of time. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: While looking for a key, avoid obstacles and wait for 5 seconds if the path is not clear. Once the key is found and the door is opened, exit the room.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_key_found</Condition><Action>open_door</Action><Sequence><Condition>is_door_opened</Condition><Action>wander</Action></Sequence></Sequence><Sequence><Condition>is_obstacle_detected</Condition><Action>wander</Action></Sequence><Action>wait</Action></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'graze': 'Action: Eat grass in a grazing simulation. Always returns True.', 'rest': 'Action: Rest in a safe area in a grazing simulation. Always returns True.', 'is_hungry': 'Condition: Checks if the agent is hungry. Returns True if the agent is hungry, False otherwise.', 'is_tired': 'Condition: Checks if the agent is tired. Returns True if the agent is tired, False otherwise.', 'is_danger_nearby': 'Condition: Checks for predators or other dangers nearby. Returns True if danger is detected, False otherwise.', 'move_to_safety': 'Action: Move to a safe area if danger is nearby. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: In a grazing simulation, check if the agent is hungry. If so, eat grass. If the agent is tired, rest in a safe area. If danger is nearby, move to safety.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_hungry</Condition><Action>graze</Action></Sequence><Sequence><Condition>is_tired</Condition><Action>rest</Action></Sequence><Sequence><Condition>is_danger_nearby</Condition><Action>move_to_safety</Action></Sequence></Selector></BehaviorTree>
###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: navigate through a maze with obstacles and reach the target within 50 units.
4.// OUTPUT:
<BehaviorTree> <Sequence> <Condition>is_path_clear</Condition> <Action>move_forward</Action> <Selector> <Sequence> <Condition>is_obstacle_detected</Condition> <Action>avoid_obstacle</Action> </Sequence> </Selector> <Sequence> <Condition>is_target_detected</Condition> <Action>move_forward</Action> <Sequence> <Condition>is_line_formed</Condition> <Action>change_color_to_green</Action> <Action>agent_movement_freeze</Action> <Action>task_completed</Action> </Sequence> </Sequence> <Sequence> <Condition>is_path_blocked</Condition> <Action>turn_left</Action> <Selector> <Sequence> <Condition>is_obstacle_detected</Condition> <Action>avoid_obstacle</Action> </Sequence> </Selector> </Sequence> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'explore': 'Action: Explore for resources. Always returns True.', 'attack': 'Action: Attack enemies. Always returns True.', 'get_resource_urgency': 'Function: Calculates the urgency of acquiring resources. Returns a score based on urgency.', 'get_enemy_threat': 'Function: Calculates the threat level of nearby enemies. Returns a score based on threat.', 'utility_score': 'Function: Combines resource urgency and enemy threat into a single score.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Determine the most beneficial course of action based on the current utility score.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>get_resource_urgency</Action><Condition>greater_than_enemy_threat</Condition><Action>explore</Action></Sequence><Action>attack</Action></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'approach_target': 'Action: Move towards a designated target location. Returns True once the target is reached.', 'check_path_clear': 'Condition: Check if the path to the designated target is clear. Returns True if the path is clear, False if there are obstacles.', 'perform_task': 'Action: Perform a specific task at the designated target location. Returns True when the task is completed.', 'wait_for_target': 'Action: Suspend movement and wait for new target location. Returns True once a new target is received.', 'is_target_valid': 'Condition: Check if the designated target is valid. Returns True if the target is valid, False if it is invalid.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: guide swarm robots to perform a task at a designated target location and wait for a new target.
6.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_target_valid</Condition><Action>approach_target</Action><Condition>check_path_clear</Condition><Selector><Sequence><Condition>is_path_clear</Condition><Action>perform_task</Action><Action>wait_for_target</Action></Sequence><Action>wait_for_target</Action></Selector></Sequence></BehaviorTree> 
###
4.// INSTRUCTIONS: Use only the following behaviors {'move_towards_nearest_object': 'Action: Move the robot towards the nearest object in the environment. Always returns True.', 'identify_target': 'Action: Identify the target object using sensors. Always returns True.', 'avoid_obstacle': 'Action: Avoid obstacles in the environment. Always returns True.', 'is_object_nearby': 'Condition: Check if an object is within 5 units of distance. Returns True if an object is detected within 5 units, False otherwise.', 'is_target_reached': 'Condition: Check if the target object is within 2 units of distance. Returns True if the target is reached within 2 units, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles in front using sensors. Returns True if an obstacle is detected, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Traverse the environment, identify and reach the target object while avoiding obstacles.
4.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>is_target_reached</Sequence><Action>move_towards_nearest_object</Action><Action>identify_target</Action></Selector><Sequence><Condition>is_obstacle_detected</Condition><Action>avoid_obstacle</Action><Selector><Sequence><Condition>is_object_nearby</Condition><Action>move_towards_nearest_object</Action></Sequence></Selector></Sequence></Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'collect_resource': 'Action: Collect a resource from the environment. Always returns True.', 'is_resource_available': 'Condition: Check if a resource is available in the environment. Returns True if a resource is detected, False otherwise.', 'has_inventory_space': 'Condition: Check if the agent's inventory has space. Returns True if the inventory has space, False otherwise.', 'deposit_resource': 'Action: Deposit the resource in. Always returns True.', 'explore': 'Action: Explore the environment by moving randomly. Always returns True.', 'is_inventory_full': 'Condition: Check if the inventory is full. Returns True if the inventory is full, False otherwise.', 'idle': 'Action: Remain stationary and do nothing. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Efficiently collect resources from the environment and deposit them in the designated area while exploring for more resources.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_resource_available</Condition><Selector><Sequence><Condition>has_inventory_space</Condition><Action>collect_resource</Action><Selector><Sequence><Condition>is_inventory_full</Condition><Action>deposit_resource</Action></Sequence></Selector></Sequence></Selector></Sequence><Sequence><Action>explore</Action><Action>idle</Action></Sequence></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'navigate_to_target': 'Action: Navigate to the target location using path planning algorithms. Always returns True.', 'identify_target': 'Action: Identify the target object or location using cameras and sensors. Always returns True.', 'collect_sample': 'Action: Collect a sample from the target location or object. Always returns True.', 'analyze_sample': 'Action: Analyze the collected sample and gather data. Always returns True.', 'return_to_base': 'Action: Return to the base location while avoiding obstacles. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Effectively navigate to the target location, collect a sample, analyze it, and safely return to the base.
6.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>is_target_reached</Condition><Action>identify_target</Action><Action>collect_sample</Action><Action>analyze_sample</Action><Selector><Sequence><Condition>is_obstacle_detected</Condition><Action>return_to_base</Action></Sequence></Selector></Sequence></Selector><Action>navigate_to_target</Action></Sequence></BehaviorTree>
###
4.// INSTRUCTIONS: Use only the following behaviors {'detect_obstacle': 'Action: Use sensors to detect nearby obstacles. Always returns True.', 'avoid_obstacle': 'Action: Move away or around detected obstacles. Always returns True.', 'track_object': 'Action: Use sensors to track a specific object. Always returns True.', 'follow_object': 'Action: Follow and align with the tracked object. Always returns True.', 'discard_object': 'Action: Drop the tracked object. Always returns True.', 'is_object_detected': 'Condition: Check if a specific object is detected. Returns True if object is detected, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_tracking_successful': 'Condition: Check if the object is being successfully tracked. Returns True if successful, False otherwise.', 'is_robot_near_object': 'Condition: Check if the robot is within a certain distance of the tracked object. Returns True if within distance, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task).
4.// USER COMMAND: Generate a behavior tree for a swarm of robots to detect and track a specific object while avoiding obstacles and staying near the object.
4.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_object_detected</Condition><Action>track_object</Action></Sequence><Selector><Sequence><Condition>is_tracking_successful</Condition><Selector><Sequence><Condition>is_robot_near_object</Condition><Action>follow_object</Action></Sequence><Action>discard_object</Action></Selector></Sequence><Condition>is_obstacle_detected</Condition><Action>avoid_obstacle</Action></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'detect_area_fire': 'Condition: Use thermal sensors to detect a fire within a certain area. Returns True if fire is detected, False otherwise.', 'extinguish_fire': 'Action: Use fire extinguisher to put out the fire. Always returns True.', 'navigate_to_target': 'Action: Use sensors and movement to navigate towards a specific target. Always returns True.', 'avoid_obstacle': 'Action: Move away or around detected obstacles. Always returns True.', 'collect_water': 'Action: Use a water collection device to gather water. Always returns True.', 'is_near_water_source': 'Condition: Check if the robot is within a certain distance of a water source. Returns True if near a water source, False otherwise.', 'is_water_tank_full': 'Condition: Check if the water tank is full and can no longer collect water. Returns True if tank is full, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task).
5.// USER COMMAND: Generate a behavior tree for a swarm of robots to detect and extinguish fires in a specific area while avoiding obstacles and refilling water.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>detect_area_fire</Condition><Action>extinguish_fire</Action></Sequence><Selector><Sequence><Condition>is_near_water_source</Condition><Sequence><Condition>is_water_tank_full</Condition><Action>empty_water_tank</Action></Sequence><Action>collect_water</Action></Sequence><Action>navigate_to_target</Action></Selector><Condition>is_obstacle_detected</Condition><Action>avoid_obstacle</Action></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'scan_area': 'Action: Move around and scan the area using sensors. Always returns True.', 'collect_and_store_data': 'Action: Collect and store data from the scanned area. Always returns True.', 'analyze_data': 'Action: Use algorithms to analyze the collected data. Always returns True.', 'send_data': 'Action: Send the analyzed data to a specified destination. Always returns True.', 'is_destination_reached': 'Condition: Check if the robot has reached the specified destination. Returns True if destination is reached, False otherwise.', 'is_data_acquired': 'Condition: Check if data has been successfully collected and stored. Returns True if data is acquired, False otherwise.', 'is_data_analysis_successful': 'Condition: Check if data has been successfully analyzed. Returns True if analysis is successful, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task).
6.// USER COMMAND: Generate a behavior tree for a swarm of robots to scan, collect, analyze, and send data to a specified destination.
6.// OUTPUT:
<BehaviorTree><Sequence><Action>scan_area</Action><Selector><Sequence><Condition>is_data_acquired</Condition><Action>analyze_data</Action></Sequence><Selector><Condition>is_data_analysis_successful</Condition><Sequence><Condition>is_destination_reached</Condition><Action>send_data</Action></Sequence></Selector></Sequence><Action>collect_and_store_data</Action></Selector></Sequence></BehaviorTree>
###
4.// INSTRUCTIONS: Use only the following behaviors {'collect_resources': 'Action: Collect resources such as food, water, or building materials. Always returns True.', 'deposit_resources': 'Action: Deposit collected resources at a designated location. Always returns True.', 'is_resource_available': 'Condition: Check if any resources are available in the current area. Returns True if resources are available, False otherwise.', 'is_resource_storage_full': 'Condition: Check if the designated resource storage location is full. Returns True if storage is full, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Gather resources and deposit them at a storage location until the storage is full.
4.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_resource_storage_full</Condition><Selector><Sequence><Condition>is_resource_available</Condition><Action>collect_resources</Action><Action>deposit_resources</Action></Sequence></Selector></Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'communication': 'Action: Establish communication with other robots in the swarm. Always returns True.', 'follow_leader': 'Action: Follow the designated leader in the swarm. Always returns True.', 'is_leader_present': 'Condition: Check if the designated leader is present in the swarm. Returns True if leader is present, False otherwise.', 'is_communication_possible': 'Condition: Check if communication with other robots is possible in the current environment. Returns True if communication is possible, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Communicate with other robots in the swarm and follow the designated leader if present.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_leader_present</Condition><Action>follow_leader</Action><Selector><Sequence><Condition>is_communication_possible</Condition><Action>communication</Action><Action>wait</Action></Sequence><Action>follow_leader</Action></Selector></Sequence></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'find_exit': 'Action: Use sensors and navigation to find the exit of a maze. Always returns True.', 'open_door': 'Action: Unlock and open a door in the maze. Always returns True.', 'is_exit_found': 'Condition: Check if the exit of the maze has been found. Returns True if exit is found, False otherwise.', 'are_doors_blocked': 'Condition: Check if any doors in the maze are blocked. Returns True if a door is blocked, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: If a door is blocked, find another route to the exit. Otherwise, open the door and proceed towards the exit.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>are_doors_blocked</Condition><Action>find_exit</Action><Sequence><Action>open_door</Action><Action>wait</Action></Sequence></Sequence><Action>find_exit</Action></Selector></BehaviorTree> 
###
4.// INSTRUCTIONS: Use only the following behaviors {'rotate_clockwise': 'Action: Rotate the robot clockwise by 90 degrees. Always returns True.', 'move_forward': 'Action: Move the robot forward by one unit. Always returns True.', 'move_backward': 'Action: Move the robot backward by one unit. Always returns True.', 'check_collision': 'Condition: Check if the robot has collided with an obstacle. Returns True if collision is detected, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Avoid obstacles and move forward until collision is detected, then rotate and move backward to avoid the obstacle'.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>move_forward</Action><Condition>check_collision</Condition><Selector><Action>rotate_clockwise</Action><Action>move_backward</Action></Selector></Sequence><Action>wander</Action></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'rotate_left': 'Action: Rotate the robot left by 45 degrees. Always returns True.', 'rotate_right': 'Action: Rotate the robot right by 45 degrees. Always returns True.', 'move_forward': 'Action: Move the robot forward by one unit. Always returns True.', 'check_color': 'Condition: Check the color of the robot. Returns True if the color is red, False if it is not red.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Rotate left if the robot is red, rotate right if it is not red, then move forward'.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>check_color</Condition><Action>rotate_left</Action><Action>move_forward</Action></Sequence><Sequence><Action>rotate_right</Action><Action>move_forward</Action></Sequence></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'detect_target': 'Action: Use sensors to detect target. Always returns True.', 'move_towards_target': 'Action: Move the robot towards the detected target. Always returns True.', 'wait_for_target': 'Condition: Check if the robot has reached the target. Returns True if the target is reached, False otherwise.', 'check_battery': 'Condition: Check the battery level of the robot. Returns True if battery level is above 20%, False otherwise.', 'recharge_battery': 'Action: Recharge the battery of the robot. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Move towards target, but recharge battery if the battery level is below 20%, and wait until fully recharged before resuming movement'.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Selector><Sequence><Action>detect_target</Action><Action>move_towards_target</Action></Sequence><Selector><Condition>check_battery</Condition><Action>wait_for_target</Action></Selector></Selector><Sequence><Action>recharge_battery</Action><Sequence><Condition>check_battery</Condition><Action>move_towards_target</Action></Sequence></Sequence></Selector></BehaviorTree>
###
4.// INSTRUCTIONS: Use only the following behaviors {'move_to_next_point': "Action: Move the robot to the next specified point. Always returns True.", 'detect_obstacle': 'Action: Detect nearby obstacles using sensors. Always returns True.', 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'pick_up_item': "Action: Pick up an item at the current point. Always returns True.", 'deposit_item': "Action: Deposit item at designated location. Always returns True.", 'check_batterylife': "Condition: Check the remaining battery life. Returns True if battery life is above 20%, False otherwise.", 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'item_available': 'Condition: Check if an item is available to be picked up at the current point. Returns True if an item is available, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree for a robot to collect items and deposit them at a designated location
4.// OUTPUT:
<BehaviorTree><Sequence><Condition>check_batterylife</Condition><Selector><Sequence><Condition>item_available</Condition><Action>pick_up_item</Action><Action>move_to_next_point</Action></Sequence><Selector><Sequence><Condition>is_obstacle_detected</Condition><Action>detect_obstacle</Action><Action>avoid_obstacle</Action></Sequence><Action>deposit_item</Action></Selector></Selector></Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'move_to_nearest_treasure': "Action: Move the robot to the nearest treasure location. Always returns True.", 'collect_treasure': 'Action: Collect the treasure at the current location. Always returns True.', 'check_inventory': 'Condition: Check the current inventory for available space. Returns True if there is available space, False otherwise.', 'is_treasure_detected': 'Condition: Check if there is a treasure at the current location. Returns True if a treasure is detected, False otherwise.', 'return_to_base': 'Action: Return to the designated base location. Always returns True.', 'drop_off_treasure': 'Action: Drop off collected treasure at the designated base location. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree for a robot to collect as many treasures as possible and return them to base
5.// OUTPUT:
<BehaviorTree><Sequence><Condition>check_inventory</Condition><Selector><Sequence><Condition>is_treasure_detected</Condition><Action>collect_treasure</Action><Action>move_to_nearest_treasure</Action></Sequence><Selector><Condition>check_inventory</Condition><Selector><Sequence><Condition>is_treasure_detected</Condition><Action>collect_treasure</Action><Action>move_to_nearest_treasure</Action></Sequence><Selector><Condition>check_inventory</Condition><Action>return_to_base</Action><Action>drop_off_treasure</Action></Selector></Selector></Selector></Selector></Sequence></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'move_to_resources': "Action: Move the robot to the nearest resource location. Always returns True.", 'gather_resources': 'Action: Gather resources at the current location. Always returns True.', 'check_inventory': 'Condition: Check the current inventory for available space. Returns True if there is available space, False otherwise.', 'is_resource_available': 'Condition: Check if there is a resource at the current location. Returns True if a resource is available, False otherwise.', 'return_to_base': 'Action: Return to the designated base location. Always returns True.', 'deposit_resources': 'Action: Deposit gathered resources at the designated base location. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree for a robot to gather resources and return them to base while avoiding obstacles
6.// OUTPUT:
<BehaviorTree><Sequence><Condition>check_inventory</Condition><Selector><Sequence><Condition>is_resource_available</Condition><Action>gather_resources</Action><Action>move_to_resources</Action></Sequence><Selector><Condition>check_inventory</Condition><Selector><Sequence><Condition>is_obstacle_detected</Condition><Action>move_to_resources</Action><Action>gather_resources</Action></Sequence><Selector><Condition>check_inventory</Condition><Action>return_to_base</Action><Action>deposit_resources</Action></Selector></Selector></Selector></Selector></Sequence></BehaviorTree> 
###
4.// INSTRUCTIONS: Use only the following behaviors {'orient_left': 'Action: Rotate the agent 90 degrees counter-clockwise. Always returns True.', 'orient_right': 'Action: Rotate the agent 90 degrees clockwise. Always returns True.', 'move_forward': 'Action: Move forward a predefined amount. Always returns True.', 'is_obstacle_ahead': 'Condition: Check if there is an obstacle directly ahead. Returns True if an obstacle is detected in front of the agent, False otherwise.', 'is_on_slope': 'Condition: Check if the agent is on a slope. Returns True if the agent is on a slope, False otherwise.', 'is_target_reached': 'Condition: Check if the agent has reached its target. Returns True if the target has been reached, False otherwise.', 'climb_slope': 'Action: Use specialized mechanisms to climb the slope ahead. Always returns True.', 'pickup_object': 'Action: Pick up the object located in front of the agent. Always returns True.', 'deliver_object': 'Action: Deliver the picked up object to its destination. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Navigate through a terrain with obstacles and slopes, pick up and deliver objects to specific targets.'
4.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>is_on_slope</Condition> <Action>climb_slope</Action> <Action>orient_left</Action> </Sequence> <Action>move_forward</Action> <Sequence> <Condition>is_obstacle_ahead</Condition> <Action>orient_right</Action> </Sequence> <Action>move_forward</Action> </Selector> <Selector> <Sequence> <Condition>is_target_reached</Condition> <Action>pickup_object</Action> <Action>deliver_object</Action> </Sequence> <Selector> <Action>orient_left</Action> <Action>orient_right</Action> </Selector> </Selector> </Sequence> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'follow_leader': 'Action: Follow the designated leader robot. Returns True upon successful following.', 'stop_following': 'Action: Cease following the leader robot. Returns True upon successful stopping.', 'move_to_position': 'Action: Move to a pre-defined position while remaining within the designated formation. Returns True upon reaching the position.', 'detect_movement': 'Condition: Check if any movement is detected within the swarm. Returns True if movement is detected, False otherwise.', 'detect_leader': 'Condition: Check if the designated leader robot is detected within the swarm. Returns True if the leader is detected, False otherwise.', 'detect_formation_break': 'Condition: Check if the predetermined formation has been broken. Returns True if the formation is broken, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Follow the designated leader robot while maintaining a predetermined formation and detect any potential breakage of formation.'
5.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>detect_leader</Condition> <Action>follow_leader</Action> </Sequence> <Action>move_to_position</Action> <Selector> <Sequence> <Condition>detect_formation_break</Condition> <Action>stop_following</Action> </Sequence> <Action>detect_movement</Action> </Selector> </Selector> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'detect_nest': 'Condition: Check if the nest is located within the specified distance from the agent. Returns True if the nest is within the specified distance, False otherwise.', 'detect_food_source': 'Condition: Check if a food source is located within the specified distance from the agent. Returns True if a food source is within the specified distance, False otherwise.', 'move_to_target': 'Action: Move towards the specified target while avoiding obstacles. Returns True upon reaching the target.', 'return_to_nest': 'Action: Move back to the nest while carrying any collected food. Returns True upon successfully returning to the nest.', 'collect_food': 'Action: Collect food from a nearby food source. Returns True upon successful collection.', 'release_food': 'Action: Release and deposit the food collected into the nest. Returns True upon successful deposit.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Collect food from a nearby food source, and return it to the nest while avoiding obstacles.'
6.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>detect_food_source</Condition> <Action>move_to_target</Action> <Selector> <Sequence> <Condition>detect_nest</Condition> <Action>collect_food</Action> <Action>return_to_nest</Action> </Sequence> <Action>release_food</Action> </Selector> </Sequence> <Sequence> <Condition>detect_nest</Condition> <Action>return_to_nest</Action> </Sequence> </Selector> </BehaviorTree> <BehaviorTree><Selector><Sequence><Condition>is_line_formed</Condition><Action>change_color_to_green</Action></Sequence><Action>agent_movement_freeze</Action><Action>change_color_to_white</Action></Selector></BehaviorTree>

###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_red': "Action: Change agent's color to red. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'rotate_left': 'Action: Rotate robot left by 90 degrees. Always returns True.', 'rotate_right': 'Action: Rotate robot right by 90 degrees. Always returns True.', 'move_forward': 'Action: Move the robot forward by 1 unit. Always returns True.', 'move_backward': 'Action: Move the robot backward by 1 unit. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Explore the environment, while avoiding obstacles and changing color to green, and choose a random direction to move forward'. Output only the XML behavior tree without extra text.
4.//OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>is_obstacle_detected</Condition><Action>avoid_obstacle</Action><Action>change_color_to_green</Action></Sequence><Sequence><Condition>is_agent_in_nest</Condition><Action>move_forward</Action></Sequence></Selector><Selector><Sequence><Action>rotate_left</Action></Sequence><Sequence><Action>rotate_right</Action></Sequence><Sequence><Action>move_forward</Action></Sequence></Selector></Sequence></BehaviorTree>

###
5. // INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_black': "Action: Change agent's color to black. Always returns True.", 'clean_area': 'Action: Clean the area by removing debris and obstacles. Always returns True.', 'take_shelter': 'Action: Find and take shelter from external factors. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_path_blocked': 'Condition: Check if path is blocked by debris or obstacles. Returns True if path is blocked, False otherwise.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_removed': 'Condition: Check if target is removed. Returns True if the target is no longer detected, False otherwise.', 'is_area_cleaned': 'Condition: Check if the area is cleaned. Returns True if all debris and obstacles are removed, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Clean the area while avoiding obstacles and take shelter in case of external factors'. Output only the XML behavior tree without extra text.
5.//OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>is_target_detected</Condition> <Action>clean_area</Action> </Sequence> <Sequence> <Condition>is_path_blocked</Condition> <Action>avoid_obstacle</Action> <Sequence> <Condition>is_agent_in_nest</Condition> <Action>move_backward</Action> </Sequence> <Sequence> <Condition>is_area_cleaned</Condition> <Action>take_shelter</Action> </Sequence> </Selector> </Sequence> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'follow_straight_line': 'Action: Follow a straight line towards the target. Returns True if the target is reached, False if obstacles are encountered along the way.', 'search_target': 'Action: Search for the target by moving in a random direction. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_path_blocked': 'Condition: Check if path is blocked by obstacles. Returns True if obstacles are detected, False otherwise.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'rotate_left': 'Action: Rotate robot left by 90 degrees. Always returns True.', 'rotate_right': 'Action: Rotate robot right by 90 degrees. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6. // USER COMMAND: generate behavior tree to 'Find the target by following a straight line, while avoiding obstacles and changing color to green'. Output only the XML behavior tree without extra text.
6. // OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>is_target_detected</Condition> <Action>change_color_to_green</Action> </Sequence> <Sequence> <Condition>is_path_blocked</Condition> <Action>avoid_obstacle</Action> </Sequence> </Selector> <Selector> <Sequence> 
###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Avoid obstacles while searching for the target'Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_obstacle_detected</Condition><Action>avoid_obstacle</Action><Action>wander</Action></Sequence><Sequence><Condition>is_target_detected</Condition></Sequence></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Find the target and change color to green, then form a line and change color to white'Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>is_target_detected</Condition><Action>change_color_to_green</Action><Action>form_line</Action><Action>change_color_to_white</Action></Sequence><Action>wander</Action></Selector></Sequence></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Move forward, then avoid obstacles, then find the target and form a line'Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_path_clear</Condition><Action>move_forward</Action></Sequence><Sequence><Condition>is_obstacle_detected</Condition><Action>avoid_obstacle</Action></Sequence><Sequence><Condition>is_target_detected</Condition><Action>form_line</Action></Sequence><Action>wander</Action></Selector></BehaviorTree> 
###
4.// INSTRUCTIONS: Use only the following behaviors {'move_forward': 'Action: Move forward. Always returns True.', 'stop': 'Action: Stop moving. Always returns True.', 'turn_left': 'Action: Turn left. Always returns True.', 'turn_right': 'Action: Turn right. Always returns True.', 'check_battery_level': 'Condition: Check battery level. Returns True if battery level is above 20%, False if below 20%.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Move forward, turn left, check battery level, then turn right'. Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree><Sequence><Action>move_forward</Action><Action>turn_left</Action><Condition>check_battery_level</Condition><Action>turn_right</Action></Sequence></BehaviorTree>
 
###
5.// INSTRUCTIONS: Use only the following behaviors {'pick_up_food': 'Action: Pick up food from a specific location. Returns True if food is picked up successfully, False otherwise.', 'put_away_food': 'Action: Put away food in a specific storage location. Returns True if food is put away successfully, False otherwise.', 'go_to_food_source': 'Action: Move to the nearest food source. Always returns True.', 'has_food': 'Condition: Check if the robot has food. Returns True if the robot is carrying food, False otherwise.', 'recharge': 'Action: Recharge the robot battery. Always returns True.'},to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Go to the nearest food source, pick up food, recharge if battery level is low, then put away food in storage location'. Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>go_to_food_source</Action><Sequence><Condition>has_food</Condition><Sequence><Condition>check_battery_level</Condition><Action>recharge</Action></Sequence><Action>pick_up_food</Action><Action>put_away_food</Action></Sequence></Sequence></BehaviorTree>
 
###
6.// INSTRUCTIONS: Use only the following behaviors {'move_forward': 'Action: Move forward. Always returns True.', 'stop': 'Action: Stop moving. Always returns True.', 'turn_left': 'Action: Turn left. Always returns True.', 'turn_right': 'Action: Turn right. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Input a basic instruction to generate and output a simple behavior tree for a swarm of robots to follow.Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>move_forward</Action></Sequence><Sequence><Action>turn_right</Action></Sequence><Sequence><Action>turn_left</Action></Sequence><Action>stop</Action></Selector></BehaviorTree> 
###
4.// INSTRUCTIONS: Use only the following behaviors {'move_forward': 'Action: Move the robot one step forward in the current direction. Always returns True.', 'turn_left': 'Action: Turn the robot 90 degrees to the left. Always returns True.', 'turn_right': 'Action: Turn the robot 90 degrees to the right. Always returns True.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Navigate an obstacle course without stopping'. Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>is_obstacle_detected</Condition> <Selector> <Sequence> <Action>turn_left</Action> <Action>move_forward</Action> </Sequence> <Sequence> <Action>turn_right</Action> <Action>move_forward</Action> </Sequence> </Selector> </Sequence> <Action>move_forward</Action> </Selector> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'change_color_to_red': "Action: Change agent's color to red. Always returns True.", 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'pick_up_item': "Action: Pick up any nearby items within reach and store in inventory. Always returns True.", 'drop_item': "Action: Drop an item from the inventory at the designated drop-off location. Always returns True.", 'is_item_picked_up': 'Condition: Check if an item has been picked up and is currently in the robot's inventory. Returns True if an item is in the inventory, False otherwise.', 'is_inventory_full': 'Condition: Check if the robot's inventory is at maximum capacity. Returns True if full, False otherwise.', 'is_item_dropped': 'Condition: Check if an item has been successfully dropped off at the designated location. Returns True if the item has been dropped off, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Collect resources and bring them to the designated location, as long as there is space in the inventory'. Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>is_agent_in_nest</Condition> <Selector> <Sequence> <Condition>is_target_reached</Condition> <Action>drop_item</Action> </Sequence> <Sequence> <Action>change_color_to_red</Action> <Action>pick_up_item</Action> </Sequence> </Selector> </Sequence> <Action>pick_up_item</Action> </Selector> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'move_forward': 'Action: Move the robot one step forward in the current direction. Always returns True.', 'turn_left': 'Action: Turn the robot 90 degrees to the left. Always returns True.', 'turn_right': 'Action: Turn the robot 90 degrees to the right. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'go_to_next_checkpoint': 'Action: Move to the next designated checkpoint within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Follow a designated path and reach the final destination without deviating'. Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>is_obstacle_detected</Condition> <Selector> <Sequence> <Action>turn_left</Action> <Action>move_forward</Action> </Sequence> <Sequence> <Action>turn_right</Action> <Action>move_forward</Action> </Sequence> </Selector> </Sequence> <Action>move_forward</Action> </Selector> <Sequence> <Condition>is_agent_in_nest</Condition> <Selector> <Sequence> <Condition>is_path_clear</Condition> <Action>go_to_next_checkpoint</Action> </Sequence> <Sequence> <Selector> <Sequence> <Condition>is_path_clear</Condition> <Action>go_to_next_checkpoint</Action> </Sequence> <Sequence> <Action>turn_left</Action> </Sequence> </Selector> <Action>move_forward</Action> </Sequence> </Selector> </Sequence> </BehaviorTree><BehaviorTree></BehaviorTree>

###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'identify and collect nearest resources, deposit into designated location'. Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_target_detected</Condition><Sequence><Action>move_forward</Action><Action>change_color_to_green</Action></Sequence></Sequence><Sequence><Condition>is_resource_detected</Condition><Sequence><Action>navigate_to_resource</Action><Action>collect_resource</Action><Action>return_to_designated_location</Action></Sequence></Sequence><Action>wander</Action></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'move_to_home': 'Action: Move to the designated home location. Always returns True.', 'check_mailbox': 'Subtree node: Represents a behavior tree for checking the mailbox.', 'retrieve_mail': 'Action: Retrieve any mail found in the mailbox. Always returns True.', 'send_message': 'Action: Send a designated message to the chosen recipient. Always returns True.', 'is_mail_found': 'Condition: Check if there is any mail present in the mailbox. Returns True if mail is found, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Collect any mail from the mailbox and send a thank you message to the sender.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>move_to_home</Action><Selector><Sequence><Action>check_mailbox</Action><Selector><Sequence><Condition>is_mail_found</Condition><Action>retrieve_mail</Action><Action>send_message</Action></Sequence></Selector></Sequence></Selector></Sequence></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'pickup_object': 'Action: Pick up an object. Always returns True.', 'putdown_object': 'Action: Put down the currently held object. Always returns True.', 'approach_object': 'Action: Move towards the object. Always returns True.', 'is_object_detected': 'Condition: Check if an object is detected. Returns True if an object is within range, False otherwise.', 'is_object_held': 'Condition: Check if an object is currently held by the robot. Returns True if an object is held, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Move towards the nearest object, pick it up and transport it to a specific location.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_object_detected</Condition><Sequence><Action>approach_object</Action><Action>pickup_object</Action><Action>move_to_destination</Action><Action>putdown_object</Action></Sequence></Selector></Sequence><Action>wander</Action></Selector></BehaviorTree>
###
4.// INSTRUCTIONS: Use only the following behaviors {'search_for_food': 'Action: Search for area with highest concentration of food. Returns True if successful, False otherwise.', 'collect_food': 'Action: Collect food from current location. Returns True if successful, False otherwise.', 'is_food_available': 'Condition: Check if food is available at current location. Returns True if food is present, False otherwise.', 'is_nest_reached': 'Condition: Check if nest is within 10 units from current location. Returns True if nest is within 10 units, False otherwise.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Collect food on the way to the nest, but explore for better food source if no food is available on the way.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_food_available</Condition><Action>collect_food</Action></Sequence><Action>search_for_food</Action></Selector><Sequence><Condition>is_nest_reached</Condition><Action>wander</Action></Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'move_to_object': 'Action: Move towards a specific object. Returns True if object is reached, False otherwise.', 'is_object_reached': 'Condition: Check if the object is within 5 units from current location. Returns True if object is reached, False otherwise.', 'collect_object': 'Action: Collect the object at current location. Returns True if successful, False otherwise.', 'follow_path': 'Action: Follow a predetermined path. Returns True if path is completed, False otherwise.', 'is_path_complete': 'Condition: Check if path has been completed. Returns True if path is complete, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Move towards a specific object and collect it, if not reached within 10 seconds, follow a predetermined path instead.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>move_to_object</Action><Condition>is_object_reached</Condition><Action>collect_object</Action></Sequence><Sequence><Condition>greater_than_10_seconds</Condition><Action>follow_path</Action><Condition>is_path_complete</Condition></Sequence></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'scan_environment': 'Action: Use sensors to scan the environment for potential obstacles. Always returns True.', 'avoid_obstacle': 'Action: Move away from detected obstacles. Always returns True.', 'identify_target': 'Action: Use sensors to identify the closest target. Returns True if target is detected, False otherwise.', 'move_to_target': 'Action: Move towards the identified target. Returns True if target is reached, False otherwise.', 'is_target_missed': 'Condition: Check if target has been lost. Returns True if target is no longer detected, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 5 units from current location. Returns True if target is reached, False otherwise.', 'move_randomly': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Search for target and move towards it, but avoid obstacles along the way. If the target is lost, continue to move randomly until the target is acquired again.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>identify_target</Action><Sequence><Condition>target_lost</Condition><Action>move_to_target</Action><Condition>is_target_reached</Condition></Sequence></Sequence><Action>avoid_obstacle</Action></Selector><Sequence><Condition>is_target_missed</Condition><Action>move_randomly</Action></Sequence></BehaviorTree>###
4.// INSTRUCTIONS: Use only the following behaviors {'charge_battery': "Action: Charge robot's battery. Always returns True.", 'find_energy_source': 'Action: Move towards the nearest energy source. Always returns True.', 'is_batttery_low': 'Condition: Check if battery level is below 10%. Returns True if battery level is below 10%, False otherwise.', 'is_battery_charged': 'Condition: Check if battery level is above 90%. Return True if battery level is above 90%, False otherwise.', 'is_energy_source_detected': 'Condition: Check for energy sources nearby. Returns True if an energy source is detected, False otherwise.', 'is_at_energy_source': 'Condition: Check if the robot is at the designated energy source. Returns True if at the energy source, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Search for energy sources and charge the battery when it reaches critical level'. Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_battery_low</Condition><Selector><Sequence><Condition>is_energy_source_detected</Condition><Sequence><Condition>is_at_energy_source</Condition><Action>charge_battery</Action></Sequence></Selector><Action>find_energy_source</Action></Sequence></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'scan_area': "Action: Perform a full scan of the designated area. Always returns True.", 'collect_data': 'Action: Collect data from the environment. Always returns True.', 'is_data_available': 'Condition: Check if any new data is available. Returns True if new data is available, False otherwise.', 'is_scan_complete': 'Condition: Check if full scan of the area is complete. Returns True if the scan is complete, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say ('Sorry, I can't do the task'):
5.// USER COMMAND: generate behavior tree to 'Collect as much data as possible from the designated area, perform full scan and repeat until all data is collected'. Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>is_data_available</Condition><Action>collect_data</Action></Sequence><Action>scan_area</Action></Selector><Condition>is_scan_complete</Condition></Sequence></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'find_path_to_target': "Action: Find the shortest path to the target location. Always returns True.", 'follow_path': 'Action: Follow the designated path to reach the target location. Always returns True.', 'is_target_reached': 'Condition: Check if the target location has been reached. Returns True if the target location is reached, False otherwise.', 'is_path_obstructed': 'Condition: Check if the designated path is obstructed. Returns True if the path is obstructed, False otherwise.', 'is_path_available': 'Condition: Check if a path to the target location is available. Returns True if a path is available, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task):
6.// USER COMMAND: generate behavior tree to 'Find a path to the target location, follow the path and avoid obstacles along the way until the target is reached'. Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>is_path_available</Condition><Action>find_path_to_target</Action><Action>follow_path</Action></Sequence><Condition>is_path_obstructed</Condition><Action>avoid_obstacle</Action></Selector><Condition>is_target_reached</Condition></Sequence></BehaviorTree> 
###
4.// INSTRUCTIONS: Use only the following behaviors {'move_to_specific_point': 'Action: Move the robot to a specific point in the environment. Always returns True.', 'pick_up_object': 'Action: Pick up the object at the robot's current location. Returns True if an object is successfully picked up, False otherwise.', 'drop_object': 'Action: Drop the object currently held by the robot at its current location. Returns True if the object is successfully dropped, False otherwise.', 'is_object_nearby': 'Condition: Check if there is an object within the robot's vicinity. Returns True if an object is detected, False otherwise.', 'is_at_specific_point': 'Condition: Check if the robot has reached the designated point. Returns True if the robot is at the designated point, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Generate behavior tree for a robot to pick up an object at a specific point and deliver it to another specific point
4.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>is_at_specific_point</Condition> <Action>pick_up_object</Action> <Action>move_to_specific_point</Action> <Selector> <Action>drop_object</Action> <Action>wait</Action> </Selector> </Sequence> <Action>move_to_specific_point</Action> </Selector> </Sequence> </BehaviorTree>
 
###
5.// INSTRUCTIONS: Use only the following behaviors {'align_with_target': 'Action: Align the robot's orientation with the target's orientation. Always returns True.', 'follow_waypoints': 'Action: Follow a set of predetermined waypoints in a specific order. Always returns True.', 'detect_obstacles': 'Action: Use sensors to detect any obstacles in the robot's path. Returns True if an obstacle is detected, False otherwise.', 'avoid_obstacle': 'Action: Take evasive action to avoid the obstacle detected. Returns True if the robot successfully avoids the obstacle, False otherwise.', 'has_reached_target': 'Condition: Check if the robot has reached the final target destination. Returns True if the robot has reached the final target, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Generate behavior tree for a robot to follow a specific path, align with a target, and avoid obstacles along the way
5.// OUTPUT:
<BehaviorTree> <Sequence> <Condition>detect_obstacles</Condition> <Selector> <Sequence> <Condition>has_reached_target</Condition> <Action>align_with_target</Action> </Sequence> <Action>follow_waypoints</Action> <Action>avoid_obstacle</Action> </Selector> </Sequence></BehaviorTree>
 
###
6.// INSTRUCTIONS: Use only the following behaviors {'request_help': 'Action: Request assistance from nearby robots if needed. Always returns True.', 'scan_environment': 'Action: Use sensors to scan and collect data about the environment. Always returns True.', 'update_map': 'Action: Update the robot's internal map of the environment based on its current location and sensor readings. Always returns True.', 'is_area_safe': 'Condition: Check if the current area is safe for the robot to operate in. Returns True if the area is safe, False otherwise.', 'is_complete_map_available': 'Condition: Check if a complete map of the environment has been generated. Returns True if a complete map is available, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Generate behavior tree for a robot to scan and map the environment, request help if needed, and check for safety before continuing operations
6.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>is_complete_map_available</Condition><Action>update_map</Action><Action>scan_environment</Action></Sequence><Condition>is_area_safe</Condition></Selector><Action>request_help</Action></Sequence></BehaviorTree>
###
4.// INSTRUCTIONS: Use only the following behaviors {'find_closest_target': 'Action: Search for the closest target within 30 units and move towards it. Always returns True.', 'move_away_from_obstacle': 'Action: Move away from detected obstacles. Always returns True.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Search for the closest target, move away from obstacles, and repeat until target is reached.'Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>is_target_detected</Condition> <Action>stop_movement</Action> <Action>task_completed</Action> </Sequence> <Action>find_closest_target</Action> </Selector> <Sequence> <Condition>is_obstacle_detected</Condition> <Action>move_away_from_obstacle</Action> <Action>move_to_next_waypoint</Action> </Sequence> </Sequence> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'detect_light_source': 'Action: Use sensors to detect a light source and move towards it. Always returns True.', 'find_path_to_light': 'Action: Compute the shortest path to the detected light source. Always returns True.', 'follow_path': 'Action: Move along the shortest path towards the light source. Always returns True.', 'is_path_clear': 'Condition: Check if the path is clear. Returns True if no obstacles are detected on the path, False if obstacles are present.', 'is_light_source_reached': 'Condition: Check if the light source has been reached. Returns True if the light source is within 10 units of distance, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Generate behavior tree for a robot to navigate towards a detected light source.
5.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>is_light_source_reached</Condition> <Action>stop_movement</Action> <Action>task_completed</Action> </Sequence> <Sequence> <Condition>is_path_clear</Condition> <Action>follow_path</Action> </Sequence> <Selector> <Sequence> <Action>detect_light_source</Action> <Action>find_path_to_light</Action> </Selector> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'detect_victims': 'Action: Use sensors to detect any victims in the area. Always returns True.', 'alert_team': 'Action: Send an alert signal to the team indicating the presence of victims. Always returns True.', 'move_to_next_location': 'Action: Move to the next designated location in the search area. Always returns True.', 'is_victim_found': 'Condition: Check if a victim has been found. Returns True if a victim is detected, False otherwise.', 'is_search_complete': 'Condition: Check if the entire search area has been covered. Returns True if the search is complete, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Search for victims in designated locations and alert team upon detection, repeating until the entire search area is covered.'Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>is_search_complete</Condition> <Action>stop_movement</Action> <Action>task_completed</Action> </Sequence> <Sequence> <Condition>is_victim_found</Condition> <Action>alert_team</Action> </Sequence> <Action>detect_victims</Action> <Action>move_to_next_location</Action> </Selector> </Sequence> </BehaviorTree>###
4.// INSTRUCTIONS: Use only the following behaviors {'detect_object': 'Action: Use sensors to detect nearby objects. Always returns True.', 'approach_object': 'Action: Move towards the target object within reach. Always returns True.', 'lift_object': 'Action: Lift the target object if it is within reach and can be lifted. Always returns True.', 'is_object_on_platform': 'Condition: Check if the target object is on the designated platform. Returns True if the object is on the platform, False otherwise.', 'is_object_lifted': 'Condition: Check if the target object is lifted by the robot. Returns True if the object is lifted, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Pick up a specific object and bring it to a designated platform.
4.// OUTPUT:
<BehaviorTree><Sequence><Action>detect_object</Action><Condition>pick_up_object</Condition><Action>lift_object</Action><Condition>is_object_lifted</Condition><Action>approach_platform</Action><Condition>is_object_on_platform</Condition><Action>drop_object</Action></Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'change_speed': 'Action: Change the robot's speed to the given value. Always returns True.', 'move_forward': 'Action: Move the robot one step forward in the current direction. Always returns True.', 'wait': 'Action: Pause the robot's movement for a set amount of time. Always returns True.', 'is_at_destination': 'Condition: Check if the robot has reached the designated destination. Returns True if at the destination, False otherwise.', 'is_line_formed': 'Condition: Check if a line is formed with other robots. Returns True if the line is formed, False otherwise.', 'is_enemy_detected': 'Condition: Check for enemies within a certain range. Returns True if an enemy is detected, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Move in a line formation with other robots while avoiding enemies and reach a specific destination.
5.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_enemy_detected</Condition><Selector><Action>move_forward</Action><Sequence><Action>wait</Action><Action>change_speed</Action></Sequence></Selector></Sequence><Condition>is_at_destination</Condition><Action>rotate_line</Action></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'navigate_to_destination': 'Action: Use pathfinding algorithm to navigate to a specified destination. Always returns True.', 'charge_battery': 'Action: Recharge the robot's battery by plugging in. Always returns True.', 'is_battery_low': 'Condition: Check if the battery level is below a certain threshold. Returns True if the battery is low, False otherwise.', 'is_at_charge_station': 'Condition: Check if the robot has reached the designated charge station. Returns True if at the charge station, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Navigate to a designated charging station while ensuring the battery level does not drop below 20%.
6.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_battery_low</Condition><Action>turn_off_nonessential_functions</Action><Action>navigate_to_destination</Action><Sequence><Condition>is_at_charge_station</Condition><Action>charge_battery</Action></Sequence></BehaviorTree>  
###
4.// INSTRUCTIONS: Use only the following behaviors {'move_to_target': 'Action: Move the robot to the designated target. Returns True if the target is reached, False otherwise.', 'avoid_obstacles': 'Action: Continuously avoid detected obstacles. Always returns True.', 'scan_area': "Action: Scan the environment for any changes or new obstacles. Always returns True.", 'go_to_safe_zone': "Action: Move the robot to the designated safe zone. Returns True if the safe zone is reached, False otherwise.", 'finish_task': "Action: Signal task completion. Always returns True.", 'is_target_reached': "Condition: Check if the designated target is reached. Returns True if the target is reached, False otherwise.", 'is_obstacle_detected': "Condition: Check if any obstacles are detected. Returns True if an obstacle is detected, False otherwise.", 'is_safe_zone_reached': "Condition: Check if the designated safe zone is reached. Returns True if the safe zone is reached, False otherwise.", 'is_task_complete': "Condition: Check if the designated task is completed. Returns True if the task is completed, False otherwise."}, to construct behavior tree in XML format to the following command. If the in use behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Generate behavior tree for a robot to complete a series of tasks, including moving to a target, avoiding obstacles, and reaching a safe zone
4.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>is_target_reached</Condition><Action>finish_task</Action></Sequence><Sequence><Action>scan_area</Action><Selector><Action>move_to_target</Action><Action>avoid_obstacles</Action></Selector></Sequence></Selector><Sequence><Selector><Sequence><Condition>is_safe_zone_reached</Condition><Action>finish_task</Action></Sequence><Action>go_to_safe_zone</Action></Selector></Sequence></Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'move_to_next_position': "Action: Move the robot to the next position in the designated path. Returns True if the next position exists, False otherwise.", 'detect_source': 'Action: Use sensors to detect the presence of the designated source. Returns True if the source is detected, False otherwise.', 'collect_resource': "Action: Collect the designated resource. Returns True if the resource is successfully collected, False otherwise.", 'is_path_complete': "Condition: Check if the designated path has been completed. Returns True if the path is complete, False otherwise.", 'is_source_detected': "Condition: Check if the designated source has been detected. Returns True if the source is detected, False otherwise.", 'resource_collected': "Condition: Check if the designated resource has been successfully collected. Returns True if the resource is collected, False otherwise."}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Generate behavior tree for a robot to follow a specific path, detect a designated source, and collect a specified resource
5.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>is_path_complete</Condition><Action>detect_source</Action></Sequence><Sequence><Selector><Sequence><Condition>is_path_complete</Condition><Action>collect_resource</Action></Sequence><Action>move_to_next_position</Action></Selector></Sequence></Selector></Sequence></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'build_structure': "Action: Construct the designated structure at the current location. Returns True if the structure is successfully built, False otherwise.", 'gather_materials': "Action: Gather the designated materials from nearby. Returns True if enough materials are gathered, False otherwise.", 'deliver_materials': "Action: Deliver all materials to the designated location. Returns True if all materials are successfully delivered, False otherwise.", 'is_structure_built': "Condition: Check if the designated structure has been built. Returns True if the structure is completed, False otherwise.", 'has_enough_materials': "Condition: Check if enough materials have been gathered. Returns True if there are enough materials, False otherwise."}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Generate behavior tree for a robot to construct a designated structure, gather necessary materials, and deliver them to a specific location
6.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>has_enough_materials</Condition><Action>build_structure</Action></Sequence><Sequence><Action>gather_materials</Action><Action>deliver_materials</Action></Sequence></Selector></Sequence></BehaviorTree>
###
4.// INSTRUCTIONS: Use only the following behaviors {'move_forward': 'Action: Move the robot one step forward in the current direction. Always returns True.', 'rotate_left': 'Action: Rotate the robot 90 degrees counterclockwise. Always returns True.', 'rotate_right': 'Action: Rotate the robot 90 degrees clockwise. Always returns True.', 'detect_goal': 'Condition: Check if the goal is within sight. Returns True if the goal is detected, False otherwise.', 'is_goal_reached': 'Condition: Check if the goal is within 5 units. Returns True if the goal is within 5 units of distance, False otherwise.', 'navigate_to_goal': 'Subtree node: Represents a behavior tree for navigating to the goal.', 'wait': 'Action: Pause the robot for a certain amount of time. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Navigate to the goal while avoiding obstacles. If the goal is not within reach within 30 seconds, pause and scan the environment for potential obstacles.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_goal_reached</Condition><Action>move_forward</Action></Sequence><Sequence><Selector><Sequence><Action>navigate_to_goal</Action><Action>move_forward</Action></Sequence><Sequence><Action>rotate_left</Action><Action>wait</Action><Action>rotate_right</Action><Action>wait</Action></Sequence></Selector><Action>wait</Action></Sequence></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'move_forward': 'Action: Move the robot one step forward in the current direction. Always returns True.', 'swap_direction': 'Action: Change the robot's direction to the opposite direction. Always returns True.', 'detect_obstacle': 'Condition: Check for obstacles in front of the robot. Returns True if an obstacle is detected, False otherwise.', 'detect_goal': 'Condition: Check if the goal is within sight. Returns True if the goal is detected, False otherwise.', 'is_goal_reached': 'Condition: Check if the goal is within 5 units. Returns True if the goal is within 5 units of distance, False otherwise.', 'navigate_to_goal': 'Subtree node: Represents a behavior tree for navigating to the goal and avoiding obstacles.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Reach the goal by traveling in a zig-zag pattern, navigating around obstacles.
5.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_obstacle_detected</Condition><Action>swap_direction</Action><Action>move_forward</Action><Action>swap_direction</Action></Sequence><Sequence><Sequence><Condition>detect_goal</Condition><Action>move_forward</Action></Sequence><Sequence><Action>navigate_to_goal</Action><Action>move_forward</Action></Sequence></Sequence></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'collect_item': 'Action: Collect an item and add it to the inventory. Returns True if item is successfully collected, False otherwise.', 'drop_item': 'Action: Drop an item from the inventory onto the ground. Returns True if item is successfully dropped, False otherwise.', 'is_inventory_full': 'Condition: Check if the inventory is full. Returns True if there is no space in the inventory, False otherwise.', 'navigate_to_item': 'Subtree node: Represents a behavior tree for navigating to an item and collecting it.', 'navigate_to_dropzone': 'Subtree node: Represents a behavior tree for navigating to the designated dropzone and releasing items.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Collect 3 items and bring them to the designated dropzone, while avoiding obstacles.
6.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Selector><Sequence><Condition>is_inventory_full</Condition><Action>navigate_to_dropzone</Action></Sequence><Sequence><Selector><Sequence><Action>collect_item</Action><Action>move_forward</Action></Sequence><Sequence><Condition>is_obstacle_detected</Condition><Action>move_forward</Action></Sequence></Selector><Action>collect_item</Action></Sequence><Action>navigate_to_item</Action></Selector></Sequence><Selector><Action>move_forward</Action><Action>drop_item</Action></Selector></Sequence></BehaviorTree>  
###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'form_circle': 'Action: Form a circular shape with other agents. Always returns True.', 'is_circle_formed': 'Condition: Check if a circular shape is formed. Returns True if the circle is formed, False otherwise.', 'is_nest_reached': 'Condition: Check if the agent has reached the designated nest. Returns True if the nest is reached, False otherwise.', 'move_towards_target': 'Action: Move towards a designated target in a straight line. Always returns True.', 'rotate_left': 'Action: Rotate the agent 90 degrees to the left. Always returns True.', 'rotate_right': 'Action: Rotate the agent 90 degrees to the right. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Form a circular shape, rotate to the left, move towards target, and change color to white.'
Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Action>form_circle</Action> <Condition>is_circle_formed</Condition> <Action>rotate_left</Action> </Sequence> <Action>move_towards_target</Action> <Action>change_color_to_white</Action> </Selector> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_blue': "Action: Change agent's color to blue. Returns True if agent's color is changed to blue, False otherwise.", 'gather_resources': 'Action: Gather resources from the environment. Always returns True.', 'is_agent_full': 'Condition: Check if agent has reached maximum resource capacity. Returns True if the agent has reached maximum capacity, False otherwise.', 'is_resource_available': 'Condition: Check if resources are available in the environment. Returns True if resources are present, False otherwise.', 'move_to_resource': 'Action: Move towards the nearest resource. Always returns True.', 'move_to_nest': 'Action: Move towards the designated nest. Always returns True.', 'store_resources': 'Action: Store gathered resources in the designated nest. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Gather resources, move to designated nest, store resources, change color to blue.'
Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree> <Sequence> <Action>move_to_resource</Action> <Selector> <Sequence> <Condition>is_agent_full</Condition> <Action>move_to_nest</Action> <Action>store_resources</Action> </Sequence> <Action>change_color_to_blue</Action> </Selector> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_yellow': "Action: Change agent's color to yellow. Returns True if agent's color is changed to yellow, False otherwise.", 'follow_leader': 'Action: Move towards the designated leader. Always returns True.', 'is_leader_reached': 'Condition: Check if the designated leader is reached. Returns True if the leader is reached, False otherwise.', 'is_movement_blocked': 'Condition: Check if agent's movement is blocked by other agents or obstacles. Returns True if movement is blocked, False otherwise.', 'obstacle_avoidance': 'Action: Move in a different direction to avoid obstacles. Always returns True.', 'random_rotation': 'Action: Rotate the agent randomly to change direction. Always returns True.', 'signal_leader': 'Action: Send a signal to the designated leader. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Follow the designated leader, avoid obstacles, signal leader, and change color to yellow.'
Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Action>follow_leader</Action> <Condition>is_leader_reached</Condition> <Action>obstacle_avoidance</Action> <Action>signal_leader</Action> </Sequence> <Action>random_rotation</Action> </Selector> <Action>change_color_to_yellow</Action> </BehaviorTree>
###
4.// INSTRUCTIONS: Use only the following behaviors {'search_cover': 'Action: Search for a cover position. Always returns True.', 'move_to_cover': 'Action: Move towards a cover position. Always returns True.', 'reload': 'Action: Reload weapon. Always returns True.', 'wait_for_enemy': 'Condition: Check if enemies are nearby. Returns True if enemies are detected within a certain radius, False otherwise.', 'is_weapon_loaded': 'Condition: Check if weapon is loaded. Returns True if weapon has enough ammo, False if it needs to be reloaded.', 'is_in_cover': 'Condition: Check if agent is in cover. Returns True if agent is behind cover, False otherwise.', 'fire_weapon': 'Action: Fire weapon at enemy target. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Engage in a cover battle by searching for cover, moving towards it, and firing at enemies while avoiding getting hit.
4.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>wait_for_enemy</Condition><Action>search_cover</Action><Action>move_to_cover</Action></Sequence><Sequence><Condition>is_weapon_loaded</Condition><Condition>is_in_cover</Condition><Action>fire_weapon</Action></Sequence><Action>reload</Action></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'repair': 'Action: Repair damaged structures. Always returns True.', 'is_base_destroyed': 'Condition: Check if base is destroyed. Returns True if base structure is destroyed, False otherwise.', 'find_resources': 'Action: Search for resources to gather them. Always returns True.', 'is_enemy_detected': 'Condition: Check for nearby enemies. Returns True if enemies are detected, False otherwise.', 'build_turret': 'Action: Build a turret to defend the base. Always returns True.', 'defend_base': 'Action: Engage in combat with nearby enemies to defend the base. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Build a turret to defend the base, but only if the base is not destroyed and there are resources available. Otherwise, repair any damaged structures and defend the base.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_base_destroyed</Condition><Action>repair</Action></Sequence><Sequence><Condition>find_resources</Condition><Action>build_turret</Action></Sequence></Selector><Action>defend_base</Action></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'detect_fires': 'Action: Scan the environment for any signs of fire. Always returns True.', 'ask_for_assistance': 'Action: Send out a distress call to nearby units for assistance. Always returns True.', 'collect_water': 'Action: Collect water from nearby sources. Always returns True.', 'is_fire_detected': 'Condition: Check if fire is detected. Returns True if a fire is detected, False otherwise.', 'is_water_available': 'Condition: Check if there is enough water to collect. Returns True if water is available, False otherwise.', 'extinguish_fire': 'Action: Use collected water to extinguish the detected fire. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Detect fires and extinguish them using collected water, but only if there is enough water available. Otherwise, send out a distress call for assistance.
6.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>is_water_available</Condition><Condition>is_fire_detected</Condition><Action>collect_water</Action><Action>extinguish_fire</Action></Sequence><Sequence><Action>ask_for_assistance</Action></Sequence></Selector><Action>detect_fires</Action></Sequence></BehaviorTree> 
###
4.// INSTRUCTIONS: Use only the following behaviors {'hide_from_predator': 'Action: Move to a hiding spot to avoid being detected by a predator. Always returns True.', 'signal_to_group': 'Action: Use visual or auditory signals to communicate with the rest of the swarm. Always returns True.', 'avoid_obstacle': 'Action: Navigate around detected obstacles. Always returns True.', 'form_circle': 'Action: Form a circle formation with other swarm members. Always returns True.', 'is_predator_detected': 'Condition: Check if a predator is detected within the vicinity. Returns True if a predator is detected, False otherwise.', 'is_swarm_safe': 'Condition: Check if the entire swarm is within a safe zone. Returns True if all swarm members are within the safe zone, False otherwise.', 'is_hiding_spot_reached': 'Condition: Check if the hiding spot has been reached. Returns True if the hiding spot is reached, False otherwise.' }, to construct behavior tree in XML format to the following command. If the
available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Generate a behavior tree for a swarm of robots to hide and communicate in case of a detected predator while avoiding obstacles and staying within a safe zone.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_predator_detected</Condition><Selector><Sequence><Condition>is_hiding_spot_reached</Condition><Action>signal_to_group</Action></Sequence><Action>hide_from_predator</Action></Selector></Sequence><Sequence><Condition>is_obstacle_ahead</Condition><Action>avoid_obstacle</Action></Sequence><Sequence><Condition>is_swarm_safe</Condition><Action>form_circle</Action></Sequence></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'collect_resource': 'Action: Collect resources from the environment. Always returns True.', 'deposit_resource': 'Action: Deposit collected resources at a designated zone. Always returns True.', 'find_path': 'Action: Use pathfinding algorithms to find the most efficient route to a target location. Always returns True.', 'repair_structure': 'Action: Use collected resources to repair damaged structures. Always returns True.', 'is_resource_available': 'Condition: Check if there are resources available in the environment. Returns True if resources are available, False otherwise.', 'is_structure_damaged': 'Condition: Check if a structure is damaged and in need of repair. Returns True if a structure is damaged, False otherwise.', 'is_path_complete': 'Condition: Check if the designated route has been completed. Returns True if the path is complete, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command
say (Sorry, I can't do the task)
5.// USER COMMAND: Generate a behavior tree for a swarm of robots to collect resources, repair structures, and deposit resources at a designated zone while efficiently navigating to different locations using pathfinding algorithms.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_resource_available</Condition><Selector><Sequence><Condition>is_structure_damaged</Condition><Action>repair_structure</Action></Sequence><Selector><Sequence><Condition>is_path_complete</Condition><Action>deposit_resource</Action></Sequence><Action>find_path</Action></Selector></Selector></Sequence><Action>collect_resource</Action></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'forage': 'Action: Search the environment for food sources. Always returns True.', 'return_to_nest': 'Action: Return to the nest with gathered resources. Always returns True.', 'build_structure': 'Action: Use collected resources to build a structure at a designated location. Always returns True.', 'harvest_resource': 'Action: Gather resources from a designated source. Always returns True.', 'is_food_source_nearby': 'Condition: Check if a food source is within a certain proximity. Returns True if a food source is nearby, False otherwise.', 'is_resource_full': 'Condition: Check if the robot's resource storage is full. Returns True if the storage is full, False otherwise.', 'is_structure_built': 'Condition: Check if a structure has been built at the designated location. Returns True if a structure is built, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do
not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Generate a behavior tree for a swarm of robots to forage for food sources, gather resources, build structures, and return to the nest while managing storage and successfully building structures at designated locations.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_resource_full</Condition><Sequence><Condition>is_structure_built</Condition><Action>return_to_nest</Action></Sequence><Selector><Sequence><Condition>is_resource_full</Condition><Action>build_structure</Action></Sequence><Action>harvest_resource</Action></Selector></Selector></Sequence><Action>forage</Action></Selector></BehaviorTree> 
###
4.// INSTRUCTIONS: Use only the following behaviors {'fire_laser': 'Action: Fire the robot\'s laser weapon. Always returns True.', 'change_direction': 'Action: Change the robot\'s movement direction randomly. Always returns True.', 'is_enemy_detected': 'Condition: Check if an enemy robot is within the robot\'s range. Returns True if an enemy is detected, False otherwise.', 'is_weapon_fired': 'Condition: Check if the laser weapon has been fired. Returns True if the weapon is fired, False otherwise.', 'is_moving_forward': 'Condition: Check if the robot is moving forward. Returns True if the robot is moving forward, False otherwise.',} to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Patrol the designated area and fire the laser weapon at any enemy robots detected within range.'Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_enemy_detected</Condition><Action>fire_laser</Action><Selector><Sequence><Condition>is_weapon_fired</Condition><Action>change_direction</Action></Sequence><Action>continue_movement</Action></Selector></Sequence><Sequence><Condition>is_moving_forward</Condition><Action>change_direction</Action></Sequence></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'collect_resource': 'Action: Collect the nearest resource in sight. Always returns True.', 'deposit_resource': 'Action: Deposit the collected resource at the designated deposit location. Always returns True.', 'is_resource_found': 'Condition: Check if any resources are within sight. Returns True if a resource is detected, False otherwise.', 'is_resource_collected': 'Condition: Check if a resource has been collected. Returns True if a resource is being carried, False otherwise.', 'is_robot_at_deposit': 'Condition: Check if the robot has reached the designated deposit location. Returns True if at the deposit location, False otherwise.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree for a swarm of robots to collect and deposit resources while navigating the environment.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_resource_found</Condition><Selector><Sequence><Condition>is_resource_collected</Condition><Sequence><Condition>is_robot_at_deposit</Condition><Action>deposit_resource</Action></Sequence></Sequence><Action>collect_resource</Action></Selector></Sequence><Action>wander</Action></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'follow_leader': 'Action: Follow the designated leader robot. Always returns True.', 'explore_area': 'Action: Explore the environment while avoiding obstacles. Always returns True.', 'is_leader_detected': 'Condition: Check if the designated leader robot is within sight. Returns True if the leader is in sight, False otherwise.', 'is_obstacle_detected': 'Condition: Check if an obstacle is detected in front of the robot. Returns True if an obstacle is detected, False otherwise.', 'is_leader_reached': 'Condition: Check if the robot has reached the designated leader. Returns True if the leader is reached, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Form a swarm and explore the environment while following the designated leader.' Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_obstacle_detected</Condition><Action>avoid_obstacle</Action></Sequence><Action>explore_area</Action></Selector><Sequence><Condition>is_leader_detected</Condition><Selector><Sequence><Condition>is_leader_reached</Condition><Action>follow_leader</Action></Sequence><Action>wander</Action></Selector></Sequence></BehaviorTree>
###
4.// INSTRUCTIONS: Use only the following behaviors {'collect_berries': 'Action: Collect berries from nearby bushes. Always returns True.', 'water_plants': 'Action: Use watering can to water plants. Always returns True.', 'check_plant_health': 'Action: Check the health of plants and return True if they need to be watered.', 'is_berry_bush_nearby': 'Condition: Check if there is a berry bush nearby. Returns True if a berry bush is nearby, False otherwise.', 'is_garden_complete': 'Condition: Check if all plants in the garden have been watered. Returns True if the garden is fully watered, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Create behavior tree for a swarm of agricultural robots to water and collect berries from a garden.
4.// OUTPUT:
<BehaviorTree><Sequence><Action>is_berry_bush_nearby</Action><Selector><Sequence><Action>check_plant_health</Action><Action>water_plants</Action></Sequence><Action>collect_berries</Action></Selector></Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'search_for_food': 'Sequence: Search for food in the surroundings. Returns True if food is found, False otherwise.', 'navigate_to_food': 'Action: Navigate to the location of the nearest food source. Always returns True.', 'eat_food': 'Action: Eat the food to replenish energy. Always returns True.', 'is_hungry': 'Condition: Check the energy level and returns True if energy is below a certain threshold, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: If the robot is hungry, search for food and eat it. If not, continue with current tasks.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_hungry</Condition><Action>search_for_food</Action><Action>navigate_to_food</Action><Action>eat_food</Action></Sequence><Action>continue_with_tasks</Action></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'collect_resource': 'Sequence: Collect resources from the environment. Returns True if resources are collected, False otherwise.', 'transport_resource': 'Selector: Choose between returning to the base or continue collecting resources. Always returns True.', 'return_to_base': 'Action: Return to the base with the collected resources. Always returns True.', 'is_resource_full': 'Condition: Check if the resource container is full. Returns True if it is full, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Ensure that the robot collects resources and returns to base when the resource container is full, but continues collecting if there is still space.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_resource_full</Condition><Sequence><Action>collect_resource</Action><Action>transport_resource</Action><Action>return_to_base</Action></Sequence><Action>collect_resource</Action></Selector></BehaviorTree>
###
4.// INSTRUCTIONS: Use only the following behaviors {'detect_enemy': 'Condition: Check if an enemy is within range of the robot. Returns True if an enemy is detected, False otherwise.', 'attack_enemy': 'Action: Engages in combat with the detected enemy. Always returns True.', 'retreat': 'Action: Moves the robot away from the enemy to a safe distance. Always returns True.', 'reload_ammo': 'Action: Restocks the robot's ammunition reserve. Always returns True.', 'is_low_ammo': 'Condition: Check if the robot's ammunition reserve is low. Returns True if ammo is low, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Engage in combat with nearby enemies while managing ammunition and retreating if necessary.
4.// OUTPUT:
<BehaviorTree><Sequence><Condition>detect_enemy</Condition><Selector><Sequence><Condition>is_low_ammo</Condition><Action>reload_ammo</Action></Sequence><Sequence><Action>attack_enemy</Action><Action>retreat</Action></Sequence></Selector></Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'explore_area': 'Subtree node: Represents a behavior tree for exploring and mapping a new area.', 'collect_resources': 'Subtree node: Represents a behavior tree for collecting resources.', 'build_structure': 'Action: Utilizes collected resources to construct a structure. Always returns True.', 'is_resource_available': 'Condition: Check if there are available resources in the surroundings. Returns True if resources are available, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Explore and map a new area, collect resources, and use them to build a structure.
5.// OUTPUT:
<BehaviorTree><Sequence><Action>explore_area</Action><Condition>is_resource_available</Condition><Selector><Sequence><Condition>is_resource_available</Condition><Action>collect_resources</Action></Sequence><Sequence><Action>build_structure</Action></Sequence></Selector></Sequence></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'follow_leader': 'Action: Follows the designated leader robot within a swarm. Always returns True.', 'avoid_collisions': 'Action: Utilizes sensors and algorithms to avoid collisions with other swarm robots. Always returns True.', 'send_message': 'Action: Sends a message to other robots in the swarm with a specific content. Always returns True.', 'receive_message': 'Condition: Checks for incoming messages from other swarm robots. Returns True if a message is received, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Coordinate movement and communication within a swarm of robots while avoiding collisions and maintaining a specific formation.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>receive_message</Condition><Action>follow_leader</Action></Sequence><Sequence><Condition>avoid_collisions</Condition><Selector><Action>follow_leader</Action><Sequence><Condition>receive_message</Condition><Action>send_message{'content':'maintain_formation'}</Action></Sequence></Selector></Sequence></Selector></BehaviorTree> 
###
4.// INSTRUCTIONS: Use only the following behaviors {'detect_obstacles': 'Action: Use sensors to detect obstacles nearby. Always return True.', 'avoid_obstacle': 'Action: Avoid the detected obstacle. Always returns True.', 'find_target': 'Subtree node: Behavior tree for finding a specific target.', 'is_task_completed': 'Condition: Checks if the current task is completed. Returns True if task is completed, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Find and retrieve target object. If no target is detected, avoid obstacles and continue searching until target is found.
4.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Action>detect_obstacles</Action> <Action>avoid_obstacle</Action> </Sequence> <Sequence> <Action>find_target</Action> <Selector> <Sequence> <Condition>is_task_completed</Condition> <Action>is_task_completed</Action> </Sequence> </Selector> </Sequence> </Selector> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'turn_left': 'Action: Turn the robot left by 90 degrees. Always returns True.', 'turn_right': 'Action: Turn the robot right by 90 degrees. Always returns True.', 'move_forward': 'Action: Move the robot one step forward in the current direction. Always returns True.', 'move_backward': 'Action: Move the robot one step backward from the current direction. Always returns True.', 'detect_food': 'Action: Use sensors to detect food nearby. Always returns True.', 'eat_food': 'Action: Eat the detected food. Always returns True.', 'is_food_available': 'Condition: Checks if food is available within a specific range. Returns True if food is within range, False otherwise.', 'is_hungry': 'Condition: Checks if the robot's hunger level is below a specific threshold. Returns True if hunger level is below the threshold, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Forage for food while avoiding obstacles and staying above a certain hunger level.
5.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Action>detect_food</Action> <Selector> <Sequence> <Condition>is_food_available</Condition> <Action>eat_food</Action> <Action>is_food_available</Action> </Sequence> </Selector> </Sequence> <Sequence> <Condition>is_hungry</Condition> <Selector> <Sequence> <Action>detect_obstacles</Action> <Action>avoid_obstacle</Action> <Action>move_forward</Action> <Action>turn_left</Action> <Action>turn_right</Action> <Action>move_backward</Action> </Sequence> </Selector> </Sequence> </Selector> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'move_to_target_center': 'Action: Move the robot towards the center of the target. Always returns True.', 'calculate_distance': 'Action: Calculate the distance from the robot to the target. Always returns True.', 'is_target_in_sight': 'Condition: Checks if the target is within the robot's line of sight. Returns True if target is visible, False otherwise.', 'is_movement_complete': 'Condition: Checks if the robot has reached the target center. Returns True if movement is complete, False otherwise.'}, to construct behavior tree in XML format for the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Calculate and move towards the center of the target while keeping it in sight.
6.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Action>calculate_distance</Action> <Condition>is_target_in_sight</Condition> </Sequence> <Action>move_to_target_center</Action> <Selector> <Sequence> <Condition>is_movement_complete</Condition> <Action>is_movement_complete</Action> </Sequence> </Selector> </Selector> </BehaviorTree>  
###
4.// INSTRUCTIONS: Use only the following behaviors {'search_for_food': 'Subtree node: Represents a behavior tree for finding food sources.', 'eat_food': 'Action: Consumes the food item. Always returns True.', 'is_hungry': 'Condition: Check if the agent's hunger level is below a certain threshold. Returns True if agent is hungry, False otherwise.', 'socialize': 'Action: Engages in social interactions with other robots in the area. Always returns True.', 'is_alone': 'Condition: Check if the agent is alone in the area. Returns True if there are no other robots in the area, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Create a behavior tree for a robot in a social environment to balance between finding food when hungry and socializing when alone.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_hungry</Condition><Action>search_for_food</Action><Action>eat_food</Action></Sequence><Sequence><Condition>is_alone</Condition><Action>socialize</Action></Sequence></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'mine_resource': 'Action: Mine the specified resource. Always returns True.', 'return_to_base': 'Action: Return to the base with the collected resources. Always returns True.', 'check_resource_amount': 'Function: Checks the amount of resources that have been collected. Returns the current amount of resources.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Construct a behavior tree for a mining robot to collect resources and return to the base when a threshold amount is reached.
5.// OUTPUT:
<BehaviorTree><Sequence><Condition>greater_than_resource_threshold</Condition><Selector><Sequence><Action>mine_resource</Action><Action>return_to_base</Action></Sequence><Action>check_resource_amount</Action></Selector></Sequence></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'move_to_target': 'Action: Move to the designated target location. Always returns True.', 'scan_for_obstacles': 'Action: Use sensors to scan for any obstacles in the path. Always returns True.', 'avoid_obstacles': 'Action: Use maneuvering techniques to avoid any obstacles. Always returns True.', 'is_target_reached': 'Condition: Check if the target location has been reached. Returns True if target is reached, False otherwise.', 'is_obstacle_detected': 'Condition: Check if any obstacles have been detected in the path. Returns True if an obstacle is detected, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Create a behavior tree for a navigation robot to reach a target location while avoiding obstacles.
6.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_target_reached</Condition><Selector><Sequence><Action>move_to_target</Action><Selector><Condition>is_obstacle_detected</Condition><Action>scan_for_obstacles</Action><Action>avoid_obstacles</Action></Selector></Sequence></Selector></Sequence></BehaviorTree> 
###
4.// INSTRUCTIONS: Use only the following behaviors {'task_1': 'Action: Perform task 1. Returns True upon completion.', 'task_2': 'Action: Perform task 2. Returns True upon completion.', 'task_3': 'Action: Perform task 3. Returns True upon completion.', 'condition_1': 'Condition: Check if condition 2 is met. Returns True if condition 2 is met, False otherwise.', 'condition_2': 'Condition: Check if condition 3 is met. Returns True if condition 3 is met, False otherwise.', 'condition_3': 'Condition: Check if condition 4 is met. Returns True if condition 4 is met, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Create a behavior tree that checks whether condition 1 is met, and if so, performs tasks 1, 2, and 3 in sequence. If condition 1 is not met, the behavior tree should return False.
4.// OUTPUT:
<BehaviorTree><Sequence><Condition>condition_1</Condition><Sequence><Action>task_1</Action><Action>task_2</Action><Action>task_3</Action></Sequence></Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'navigate_to_beacon': 'Action: Navigate towards the designated beacon location. Returns True upon reaching the beacon location.', 'scan_area': 'Action: Perform a scan of the area to locate objects or obstacles. Always returns True.', 'avoid_obstacle': 'Action: Move away from any detected obstacles. Always returns True.', 'pick_up_object': 'Action: Pick up a designated object. Always returns True.', 'drop_object': 'Action: Drop the currently held object. Returns True upon completion.', 'is_beacon_reached': 'Condition: Check if the beacon location has been reached. Returns True if the beacon location has been reached, False otherwise.', 'is_object_detected': 'Condition: Check if an object is detected in the proximity. Returns True if an object is detected, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Use the following behavior tree to collect an object: navigate to beacon, scan area for object, pick up object, return to beacon, drop object, then return to starting location.
5.// OUTPUT:
<BehaviorTree><Sequence><Action>navigate_to_beacon</Action><Selector><Sequence><Action>scan_area</Action><Condition>is_object_detected</Condition><Sequence><Action>pick_up_object</Action><Action>navigate_to_beacon</Action><Action>drop_object</Action><Action>return_to_start</Action></Sequence></Sequence><Action>avoid_obstacle</Action></Selector></Sequence></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'detect_target': 'Action: Use sensors to detect the target. Returns True if target is detected, False otherwise.', 'approach_target': 'Action: Approach the target. Returns True if target is in close proximity, False otherwise.', 'defend': 'Action: Defend the target. Returns True upon completion.', 'is_target_in_range': 'Condition: Check if the target is within range. Returns True if target is within range, False otherwise.', 'is_target_attacked': 'Condition: Check if the target is being attacked. Returns True if the target is being attacked, False otherwise.', 'is_target_defended': 'Condition: Check if the target has been successfully defended. Returns True if the target is defended, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Create a behavior tree that detects, approaches, and defends a target, while constantly checking if the target is being attacked and if it needs to be defended again.
6.// OUTPUT:
<BehaviorTree><Sequence><Action>detect_target</Action><Selector><Sequence><Condition>is_target_in_range</Condition><Action>approach_target</Action></Sequence><Selector><Sequence><Condition>is_target_attacked</Condition><Action>defend</Action><Condition>is_target_defended</Condition></Sequence><Action>wait</Action></Selector></Selector></BehaviorTree> 
###
4.// INSTRUCTIONS: Use only the following behaviors {'surround_target': 'Action: Move to surround the target location. Always returns True.', 'converge_to_target': "Action: Move all agents towards the target's location. Always returns True.", 'is_target_reached': 'Condition: Check if all agents have reached their target location. Returns True if all agents have reached, False otherwise.', 'is_safe_to_engage': 'Condition: Check the safety of engaging the target. Returns True if it is safe to engage, False otherwise.', 'attack_target': 'Action: Initiate an attack on the target. Always returns True.', 'move_randomly': 'Action: Move randomly to evade enemy fire. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: coordinate attack on enemy target location while maintaining safety
4.// OUTPUT:
<BehaviorTree><Sequence><Action>move_randomly</Action><Selector><Sequence><Condition>is_safe_to_engage</Condition><Action>converge_to_target</Action></Sequence><Selector><Action>attack_target</Action><Action>surround_target</Action></Selector></Selector><Selector><Sequence><Condition>is_target_reached</Condition></Sequence><Action>attack_target</Action><Action>surround_target</Action></Selector></Sequence></BehaviorTree>
 
###
5.// INSTRUCTIONS: Use only the following behaviors {'scan_surroundings': 'Action: Gather sensor readings from surrounding environment and store in memory. Always returns True.', 'explore_location': "Action: Move towards an unexplored location. Always returns True.", 'check_memory': 'Subtree node: Represents a behavior tree for checking the robot\'s memory.', 'update_memory': 'Action: Update the robot\'s internal memory with new sensor readings and locations. Always returns True.', 'is_location_unknown': 'Condition: Checks if a specific location is unknown. Returns True if location is unknown, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Explore the surroundings, store sensor readings in memory, and update memory with new information.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>scan_surroundings</Action><Action>explore_location</Action></Sequence><Sequence><Condition>is_location_unknown</Condition><Selector><Sequence><Action>scan_surroundings</Action><Sequence><Condition>check_memory</Condition><Selector><Action>update_memory</Action><Action>explore_location</Action></Selector></Sequence></Selector></Sequence></Selector></BehaviorTree>
 
###
6.// INSTRUCTIONS: Use only the following behaviors {'scout_location': 'Action: Move to and scout a specific location. Always returns True.', 'explore_surroundings': "Action: Explore the immediate surroundings of the current location. Always returns True.", 'detect_hazard': 'Action: Detect and mark potential hazards in the environment. Always returns True.', 'navigate_to_goal': 'Action: Move towards the designated goal location. Always returns True.', 'is_goal_reached': 'Condition: Check if the goal location has been reached. Returns True if the goal is reached, False otherwise.', 'is_hazard_nearby': 'Condition: Check if any potential hazards have been marked nearby. Returns True if there are hazards nearby, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Scout a specific location, mark potential hazards, and navigate to the goal while avoiding hazards.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>scout_location</Action><Action>explore_surroundings</Action><Selector><Condition>is_hazard_nearby</Condition><Action>detect_hazard</Action><Action>navigate_to_goal</Action></Selector></Sequence><Sequence><Action>explore_surroundings</Action><Action>navigate_to_goal</Action></Sequence><Sequence><Condition>is_goal_reached</Condition></Sequence></Selector></BehaviorTree> 
###
4.// INSTRUCTIONS: Use only the following behaviors {'detect_enemy': "Condition: Check for enemies nearby. Returns True if an enemy is detected, False otherwise.", 'chase_enemy': "Action: Move towards enemy's direction. Returns True if enemy is successfully chased, False otherwise.", 'fire_weapon': "Action: Fire weapon in enemy's direction. Returns True if enemy is hit, False otherwise.", 'hide': "Action: Find a hiding spot to avoid enemy attacks. Returns True if a suitable hiding spot is found, False otherwise."}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Detect enemy, chase and shoot if close enough. If no enemy in sight, find a hiding spot.
4.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>detect_enemy</Condition> <Action>chase_enemy</Action> <Action>fire_weapon</Action> </Sequence> <Action>hide</Action> </Selector> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'collect_resource': 'Action: Collect resource. Always returns True.', 'deposit_resource': 'Action: Deposit resource at specified location. Returns True if resource is successfully deposited, False otherwise.', 'get_tool': 'Subtree node: Represents a behavior tree for finding tools.', 'find_path_resource': 'Subtree node: Represents a behavior tree for finding the shortest path to a resource.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Collect resources and deposit at designated location.
5.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Action>collect_resource</Action> <Action>find_path_resource</Action> </Sequence> <Action>deposit_resource</Action> </Selector> </Sequence> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'pollinate_flower': 'Action: Pollinate a nearby flower. Returns True if a suitable flower is found and pollen is successfully transferred, False otherwise.', 'find_new_location': "Action: Move to a new location. Returns True if a suitable location is found, False otherwise."}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Pollinate a flower and if no flowers are nearby, find a new location to continue pollination.
6.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Action>pollinate_flower</Action> <Action>find_new_location</Action> </Sequence> <Action>find_new_location</Action> </Selector> </BehaviorTree> 
###
4.// INSTRUCTIONS: Use only the following behaviors {'move_to_center': 'Action: Move towards the center of the environment. Always returns True.', 'collect_resource': 'Action: Collect the detected resource. Always returns True.', 'sense_environment': 'Action: Use sensors to sense the environment. Always returns True.', 'is_resource_detected': 'Condition: Check if a resource is detected within 10 units. Returns True if a resource is detected, False otherwise.', 'is_resource_picked_up': 'Condition: Check if the resource has been successfully picked up. Returns True if the resource has been picked up, False otherwise.', 'is_at_center': 'Condition: Check if the robot has reached the center. Returns True if the robot is at the center, False otherwise.', 'return_to_nest': 'Action: Returns to the nest. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Construct a behavior tree for a robot to collect resources and return to the nest while avoiding obstacles.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Sequence><Action>sense_environment</Action><Condition>is_resource_detected</Condition><Action>collect_resource</Action></Sequence><Condition>is_resource_picked_up</Condition><Sequence><Condition>is_at_center</Condition><Action>return_to_nest</Action></Sequence></Sequence><Action>avoid_obstacle</Action></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'move_towards_target': 'Action: Move towards the specified target location. Always returns True.', 'wait_for_target': 'Condition: Check if the target has been acquired. Returns True if the target is acquired, False otherwise.', 'is_target_within_range': 'Condition: Check if the target is within range. Returns True if the target is within 5 units, False otherwise.', 'intimidate_target': 'Action: Intimidate the target with flashing LED lights. Always return True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Generate a behavior tree for a group of robots to surround and intimidate an intruder within a 5 unit range.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_target_within_range</Condition><Action>intimidate_target</Action></Sequence><Sequence><Condition>is_target_within_range</Condition><Action>move_towards_target</Action></Sequence><Sequence><Condition>is_target_within_range</Condition><Condition>wait_for_target</Condition><Action>wander</Action></Sequence></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'gather_resources': 'Action: Gather nearby resources and bring them back to the nest. Always returns True.', 'explore_for_resources': 'Action: Explore for unclaimed resources. Always returns True.', 'deposit_resources': 'Action: Deposit gathered resources to the nest. Always returns True.', 'is_resource_available': 'Condition: Check if there are resources available in the environment. Returns True if resources are available, False otherwise.', 'return_to_nest': 'Action: Returns to the nest. Always returns True.', 'is_nest_full': 'Condition: Check if the nest is full. Returns True if the nest has reached its capacity, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Create a behavior tree for swarm robots to gather resources and return to the nest when the nest is not full
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_resource_available</Condition><Action>gather_resources</Action><Condition>return_to_nest</Condition><Condition>is_nest_full</Condition><Action>wander</Action></Sequence><Sequence><Condition>is_resource_available</Condition><Action>explore_for_resources</Action></Sequence></Selector></BehaviorTree>
###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'move_forward': 'Action: Move forward 5 units. Always returns True.', 'target_found': 'Condition: Check for target within 10 units. Returns True if target is within 10 units of distance, False otherwise.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Traverse the environment in a spiral pattern until target is found, then return to the nest and freeze movement.
4.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>target_found</Condition> <Action>move_forward</Action> <Action>target_found</Action> </Sequence> <Sequence> <Condition>is_agent_in_nest</Condition> <Action>agent_movement_freeze</Action> </Sequence> </Selector> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'form_diamond': 'Action: Form a diamond shape with other robots. Always returns True.', 'is_enemy_nearby': 'Condition: Checks for nearby enemies. Returns True if an enemy is within 10 units, False otherwise.', 'is_team_closer_to_target': 'Condition: Checks if the team is closer to the target than the previous check. Returns True if the team is closer, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: If an enemy is detected, form a diamond shape with other robots. If there is no enemy nearby, check if the team is closer to the target than the previous check. Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>is_enemy_nearby</Condition> <Action>form_diamond</Action> </Sequence> <Sequence> <Condition>is_team_closer_to_target</Condition> </Sequence> </Selector> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'attack': 'Action: Attack enemies. Always returns True.', 'follow_team_leader': 'Action: Follow the leader of the team. Always returns True.', 'is_team_leader': 'Condition: Checks if the agent is the leader of the team. Returns True if the agent is the leader, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: If the agent is the leader, attack enemies. If not, follow the leader of the team.
6.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>is_team_leader</Condition> <Action>attack</Action> </Sequence> <Action>follow_team_leader</Action> </Selector> </BehaviorTree>  
###
4.// INSTRUCTIONS: Use only the following behaviors {'collect_resource': 'Action: Collect nearby resources. Always returns True.', 'return_to_base': 'Action: Return to the base location. Always returns True.', 'is_resource_available': 'Condition: Check if there are resources within a certain radius. Returns True if resources are available, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Collect as many resources as possible and return to base for processing.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_resource_available</Condition><Action>collect_resource</Action><Action>return_to_base</Action></Sequence><Action>return_to_base</Action></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'navigate_to_destination': 'Subtree node: Represents behavior tree for navigating to a specific location.', 'avoid_obstacles': 'Subtree node: Represents behavior tree for avoiding obstacles.', 'is_destination_reached': 'Condition: Check if the final destination is reached. Returns True if destination is reached, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Use behavior trees for navigating to destination and avoiding obstacles while doing so, until the destination is reached.
5.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>is_destination_reached</Condition> <Action>navigate_to_destination</Action> </Sequence> <Action>return_to_base</Action> </Selector> <Selector> <Sequence> <Condition>is_obstacle_detected</Condition> <Action>avoid_obstacles</Action> </Sequence> <Action>navigate_to_destination</Action> </Selector> </Sequence> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'identify_target': 'Action: Identify the target based on specific criteria. Always returns True.', 'approach_target': 'Action: Move towards the target. Returns True if target is reached, False otherwise.', 'is_enemy_in_range': 'Condition: Check if enemy is within attack range. Returns True if enemy is within range, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Identify and approach the enemy target, then attack when in range.
6.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Action>identify_target</Action><Action>approach_target</Action><Condition>is_enemy_in_range</Condition></Sequence><Action>attack</Action></Selector></Sequence></BehaviorTree> 
###
4.// INSTRUCTIONS: Use only the following behaviors {'avoid_self_collision': 'Action: Adjusts agent's movement to avoid self-collision. Always returns True.', 'check_nearby_agents': 'Condition: Checks for nearby agents. Returns True if nearby agents are detected, False otherwise.', 'send_message': 'Action: Sends a message to nearby agents. Always returns True.', 'follow_path': 'Subtree node: Represents a behavior tree for following a predefined path.', 'wait': "Action: Pause agent's movement. Always returns True.", 'check_obstacle_distance': 'Condition: Checks the distance to the nearest obstacle. Returns True if the distance is above a threshold, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Avoid self-collision, follow path, and send message to nearby agents if obstacles are present.
4.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>check_obstacle_distance</Condition><Sequence><Action>avoid_self_collision</Action><Action>follow_path</Action><Action>send_message</Action></Sequence></Sequence><Action>wait</Action></Selector></Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'detect_obstacles': 'Action: Use sensors to detect obstacles. Always returns True.', 'navigate_to_target': 'Subtree node: Represents a behavior tree for navigating to a target location.', 'send_signal': 'Action: Sends a signal to nearby robots. Always returns True.', 'check_battery_level': 'Condition: Checks the battery level. Returns True if battery level is above a threshold, False otherwise.', 'charge_battery': 'Action: Charges the battery to full capacity. Always returns True.', 'return_home': 'Subtree node: Represents a behavior tree for returning to the home base.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: If the battery level is low, navigate back home and charge the battery. Otherwise, detect obstacles and send a signal to nearby robots.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>check_battery_level</Condition><Sequence><Action>return_home</Action><Action>charge_battery</Action></Sequence></Sequence><Sequence><Action>detect_obstacles</Action><Action>send_signal</Action></Sequence></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'detect_collisions': 'Action: Use sensors to detect collisions. Always returns True.', 'go_to_safe_location': 'Subtree node: Represents a behavior tree for finding a safe location to move to.', 'report_status': 'Action: Report the current status to the base station. Always returns True.', 'check_health': 'Condition: Checks the health status. Returns True if health is above a threshold, False otherwise.', 'heal': 'Action: Uses a healing tool to restore health. Always returns True.', 'patrol': 'Subtree node: Represents a behavior tree for patrolling the area.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: If health is low, find a safe location and heal. Otherwise, detect collisions and report status.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>check_health</Condition><Sequence><Action>go_to_safe_location</Action><Action>heal</Action></Sequence></Sequence><Sequence><Action>detect_collisions</Action><Action>report_status</Action></Sequence></Selector></BehaviorTree> 
###
4.// INSTRUCTIONS: Use only the following behaviors {'explore': 'Action: Explore for potential nesting spots. Always returns True.', 'gather_food': 'Action: Gather food resources. Always returns True.', 'build_nest': 'Action: Build a nest at the current location. Always returns True.', 'change_color_to_orange': "Action: Change the agent's color to orange. Always returns True.", 'is_nest_built': 'Condition: Check if a nest has been built at the current location. Returns True if a nest is present, False otherwise.', 'is_food_detected': 'Condition: Check if food resource is within 10 units. Returns True if a food resource is detected, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Generate a behavior tree for swarm robots to find food resources and build a nest at the most favorable location.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_food_detected</Condition><Action>gather_food</Action></Sequence><Sequence><Action>explore</Action><Sequence><Condition>is_nest_built</Condition><Selector><Sequence><Action>build_nest</Action><Action>change_color_to_orange</Action></Sequence><Action>wander</Action></Selector></Sequence></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'explore': 'Action: Explore the environment and gather data. Always returns True.', 'scan_for_obstacles': 'Action: Use sensors to scan for obstacles. Always returns True.', 'avoid_collision': 'Action: Alter movement to avoid potential collisions. Always returns True.', 'return_to_nest': 'Action: Return to the nest after gathering data. Always returns True.', 'is_obstacle_detected': 'Condition: Check if any obstacles were detected during exploration. Returns True if an obstacle is detected, False otherwise.', 'is_obstacle_evaded': 'Condition: Check if the robot successfully avoided the obstacle. Returns True if the robot changed movement to avoid collision, False otherwise.', 'is_nest_reached': 'Condition: Check if the robot has successfully returned to the nest. Returns True if the robot is within 5 units of the nest, False otherwise.', 'is_database_full': 'Condition: Check if the robot has gathered enough data to fill the database. Returns True if the database is full, False otherwise.', 'clear_data': 'Action: Clear the data from the database. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Create a behavior tree for swarm robots to collect data and avoid obstacles while exploring, and return to the nest once the database is full.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_obstacle_detected</Condition><Action>scan_for_obstacles</Action><Condition>is_obstacle_evaded</Condition><Action>return_to_nest</Action></Sequence><Sequence><Action>explore</Action><Selector><Condition>is_database_full</Condition><Action>clear_data</Action></Selector></Sequence></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'follow_target': 'Action: Follow and maintain a safe distance from the target. Always returns True.', 'hunt_target': 'Action: Continuously track and try to get closer to the target. Always returns True.', 'avoid_guards': 'Action: Avoid and evade the guarding robots. Always returns True.', 'collect_data': 'Action: Collect data from the target. Returns False if no data is available or True once data has been successfully collected.', 'remember_route': 'Action: Store the successful route travelled. Always returns True.', 'is_target_in_sight': 'Condition: Check if the target is within line of sight. Returns True if the target is visible, False otherwise.', 'is_guard_detected': 'Condition: Check if any guarding robots are in close proximity. Returns True if a guard is detected, False otherwise.', 'is_data_available': 'Condition: Check if data is available from the target. Returns True if data is present, False otherwise.', 'is_hunt_successful': 'Condition: Check if the hunt for the target was successful. Returns True if data was successfully collected, False otherwise.', 'is_route_stored': 'Action: Check if the route was successfully stored. Returns True if the route was stored, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Create a behavior tree for swarm robots to hunt and collect data from a target while avoiding guards and storing a successful route.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_target_in_sight</Condition><Action>follow_target</Action><Condition>is_guard_detected</Condition><Action>avoid_guards</Action></Sequence><Sequence><Condition>is_data_available</Condition><Selector><Condition>is_hunt_successful</Condition><Action>collect_data</Action><Sequence><Condition>is_route_stored</Condition><Action>remember_route</Action></Sequence></Selector></Sequence><Action>hunt_target</Action></Selector></BehaviorTree>
###
4.// INSTRUCTIONS: Use only the following behaviors {'move_forward': 'Action: Move the robot one step forward in the current direction. Always returns True.', 'turn_left': 'Action: Turn the robot 90 degrees to the left. Always returns True.', 'turn_right': 'Action: Turn the robot 90 degrees to the right. Always returns True.', 'is_target_reached': 'Condition: Check if the target is within 5 units of distance. Returns True if the target is reached, False otherwise.', 'is_path_blocked': 'Condition: Check if the path in the current direction is blocked or impassable. Returns True if the path is blocked, False otherwise.', 'scan_surroundings': 'Action: Scan the surroundings and update the robot's internal map. Always returns True.', 'mark_visited': 'Action: Mark the current location as visited in the internal map. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Generate behavior tree for a robot to navigate to a specific location while avoiding obstacles and updating its internal map
4.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_path_blocked</Condition><Selector><Sequence><Action>turn_left</Action><Action>mark_visited</Action></Sequence><Sequence><Action>turn_right</Action><Action>mark_visited</Action></Sequence></Selector><Selector><Sequence><Condition>is_target_reached</Condition><Action>move_forward</Action></Sequence><Sequence><Action>scan_surroundings</Action><Action>mark_visited</Action></Sequence></Selector></Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'align_to_reference': 'Action: Align the robot's orientation to a reference angle. Always returns True.', 'move_towards_reference': 'Action: Move the robot towards a reference point. Always returns True.', 'start_rotation': 'Action: Begin rotation of the robot. Always returns True.', 'is_rotation_complete': 'Condition: Check if the rotation has been completed. Returns True if rotation is complete, False otherwise.', 'release_grasping_arm': 'Action: Release any object currently being grasped by the robot. Always returns True.', 'is_object_grasped': 'Condition: Check if an object is currently being grasped. Returns True if an object is grasped, False otherwise.', 'pick_up_object': 'Action: Use the robot's grasping arm to pick up an object. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Generate behavior tree for a robot to pick up a specified object and move it to a specified location
5.// OUTPUT:
<BehaviorTree><Sequence><Selector><Condition>is_object_grasped</Condition><Sequence><Action>release_grasping_arm</Action><Action>align_to_reference</Action><Action>start_rotation</Action><Condition>is_rotation_complete</Condition><Action>move_towards_reference</Action></Sequence></Selector><Sequence><Condition>is_object_grasped</Condition><Action>pick_up_object</Action></Sequence></Sequence></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'move_randomly': 'Action: Move the robot in a random direction. Always returns True.', 'analyze_surroundings': 'Action: Use sensors to analyze the surroundings and update the robot's internal map. Always returns True.', 'is_goal_reached': 'Condition: Check if the goal location has been reached. Returns True if the goal is reached, False otherwise.', 'is_path_blocked': 'Condition: Check if the path in the current direction is blocked or impassable. Returns True if the path is blocked, False otherwise.', 'turn_to_face_goal': 'Action: Turn the robot to face the direction of the goal. Always returns True.', 'pick_up_object': 'Action: Use the robot's grasping arm to pick up an object. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree for a robot to navigate towards a specified goal location while avoiding obstacles and picking up any objects in its path
6.// OUTPUT:
<BehaviorTree><Selector><Condition>is_path_blocked</Condition><Sequence><Action>pick_up_object</Action><Action>analyze_surroundings</Action><Selector><Sequence><Action>turn_to_face_goal</Action><Condition>is_goal_reached</Condition></Sequence><Action>move_randomly</Action></Selector></Sequence></Selector></BehaviorTree>###
4.// INSTRUCTIONS: Use only the following behaviors {'go_to_source': "Action: Make agent go to the source. Always returns True.", 'charge_source': 'Action: Make agent charge at the source. Always returns True.', 'collect_resource': 'Action: Make agent collect resource from the source. Always returns True.', 'carry_resource': 'Action: Make agent carry resource back to the destination. Always returns True.', 'drop_resource': 'Action: Make agent drop resource at destination. Always returns True.', 'charge_destination': 'Action: Make agent charge at the destination. Always returns True.', 'go_to_destination': "Action: Make agent go to the destination. Always returns True.", 'is_source_reached': 'Condition: Check if agent has reached the source. Returns True if the source is reached, False otherwise.', 'is_resource_collected': 'Condition: Check if agent has successfully collected resource. Returns True if resource is collected, False otherwise.', 'is_resource_dropped': 'Condition: Check if agent has successfully dropped resource. Returns True if resource is dropped, False otherwise.', 'is_destination_reached': 'Condition: Check if agent has reached the destination. Returns True if the destination is reached, False otherwise.', 'is_inventory_full': 'Condition: Check if agent's inventory is full. Returns True if inventory is full, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Make an agent start from destination, go to source, collect resource, carry resource, drop resource, go back to destination and charge
4.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>is_destination_reached</Condition></Sequence><Sequence><Selector><Sequence><Condition>is_source_reached</Condition><Action>charge_source</Action></Sequence><Action>go_to_source</Action></Selector></Sequence><Sequence><Selector><Sequence><Condition>is_resource_collected</Condition></Sequence><Sequence><Action>collect_resource</Action><Action>carry_resource</Action></Sequence></Selector></Sequence><Sequence><Condition>is_resource_dropped</Condition><Action>drop_resource</Action></Sequence><Selector><Sequence><Condition>is_inventory_full</Condition></Sequence><Action>charge_destination</Action></Selector></Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'start_recording': 'Action: Start recording sensor data and save it to a file. Always returns True.', 'navigate_to_start_position': 'Action: Make robot navigate back to its starting position. Always returns True.', 'stop_recording': 'Action: Stop recording and save data to file. Always returns True.', 'analyze_data': 'Action: Analyze sensor data and make decisions. Always returns True.', 'follow_command': 'Action: Follow a specific command given by the user. Always returns True.', 'is_recording': 'Condition: Check if recording is currently in progress. Returns True if recording is in progress, False otherwise.', 'is_analysis_complete': 'Condition: Check if data analysis is complete and decisions can be made. Returns True if analysis is complete, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Record sensor data, analyze it and make decisions based on the data
5.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>is_recording</Condition></Sequence><Action>start_recording</Action></Selector><Sequence><Action>navigate_to_start_position</Action><Action>stop_recording</Action></Sequence><Selector><Sequence><Condition>is_analysis_complete</Condition></Sequence><Action>analyze_data</Action></Selector><Action>follow_command</Action></Sequence></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'detect_enemy': "Condition: Check for nearby enemies. Returns True if an enemy is detected, False otherwise.", 'move_towards_enemy': 'Action: Move towards the detected enemy. Always returns True.', 'attack_enemy': 'Action: Attack the enemy within range. Always returns True.', 'escape_enemy': 'Action: Retreat and escape from enemy. Always returns True.', 'is_enemy_attacking': 'Condition: Check if enemy is currently attacking. Returns True if enemy is attacking, False otherwise.', 'is_health_low': 'Condition: Check if agent's health is low. Returns True if health is low, False otherwise.', 'heal': 'Action: Use a health pack to restore agent's health. Always returns True.', 'reload': 'Action: Reload agent's weapon. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Create behavior tree for a swarm of robots to defend against attacking enemies. If an enemy is detected, move towards it and attack. If agent's health is low, use a health pack. If weapon is out of ammo, reload.
6.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>is_enemy_attacking</Condition><Sequence><Condition>is_health_low</Condition><Action>heal</Action></Sequence><Sequence><Condition>is_ammo_empty</Condition><Action>reload</Action></Sequence></Selector><Sequence><Condition>detect_enemy</Condition><Sequence><Selector><Condition>is_enemy_attacking</Condition><Action>attack_enemy</Action></Selector><Action>move_towards_enemy</Action></Sequence></Sequence></BehaviorTree>###
4.// INSTRUCTIONS: Use only the following behaviors {'scan_environment': 'Action: Use sensors to scan the environment and gather data. Always returns True.', 'compare_object_size': 'Function: Compares the sizes of different objects and returns a score indicating the larger object.', 'pick_up_object': 'Action: Move to and pick up the larger object based on the comparison score. Returns True when object is successfully lifted.', 'move_to_conveyor': 'Action: Move to the conveyor belt to deposit the carried object. Returns True when robot reaches the conveyor.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Create a behavior tree for a robot to scan its environment, choose the largest object, and transport it to a conveyor belt.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>scan_environment</Action><Action>compare_object_size</Action><Condition>larger_object_detected</Condition><Action>pick_up_object</Action></Sequence><Sequence><Condition>is_object_lifted</Condition><Action>move_to_conveyor</Action></Sequence></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'search_for_pheromones': 'Action: Use sensors to detect and follow pheromones left by other robots. Returns True when successful.', 'release_pheromones': 'Action: Release pheromones in the environment to guide other robots. Returns True when successfully released.', 'evaluate_resource': 'Function: Calculates the value of a resource based on its size and location. Returns a score indicating the value of the resource.', 'collect_resource': 'Action: Move to and collect the highest valued resource. Returns True when resource is successfully collected.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Design a behavior tree for a swarm of robots to search for and collect the most valuable resource in the environment.
5.// OUTPUT:
<BehaviorTree><Sequence><Action>search_for_pheromones</Action><Selector><Sequence><Condition>resource_detected</Condition><Action>evaluate_resource</Action><Action>collect_resource</Action></Sequence><Action>release_pheromones</Action></Selector></Sequence></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'move_to_recharge_station': 'Action: Move the robot to the nearest recharge station. Always returns True.', 'check_battery_level': 'Function: Checks the current battery level and returns a percentage indicating the remaining charge.', 'recharge': 'Action: Stay at the recharge station until the battery level reaches full. Returns True when fully charged.', 'avoid_obstacles': 'Action: Use sensors to detect obstacles and navigate around them. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Create a behavior tree for a robot to autonomously recharge when the battery level is low and avoid obstacles while navigating back to its original position.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>battery_low</Condition><Action>move_to_recharge_station</Action><Function>check_battery_level</Function><Condition>battery_full</Condition><Action>recharge</Action></Sequence><Action>avoid_obstacles</Action></Selector></BehaviorTree>  
###
4.// INSTRUCTIONS: Use only the following behaviors {'gather_ingredients': 'Action: Collect ingredients needed for a recipe. Always returns True.', 'follow_recipe': 'Subtree node: Follows a set of instructions for cooking a specific dish.', 'prepare_ingredients': 'Action: Prepares the collected ingredients based on the recipe. Always returns True.', 'cook_dish': 'Action: Uses the prepared ingredients to cook the dish. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Help the robot in preparing and cooking a spaghetti dish by gathering ingredients, following the recipe, and cooking the dish.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>gather_ingredients</Action><Action>follow_recipe</Action><Action>prepare_ingredients</Action><Action>cook_dish</Action></Sequence><Action>say Sorry, I can't do the task</Action></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'move_to_destination': 'Action: Move the robot to the specified location. Always returns True.', 'scan_for_obstacles': 'Action: Use sensors to scan for any obstacles in the robot's path. Always returns True.', 'avoid_obstacles': 'Action: Use predefined path-planning algorithm to avoid obstacles. Always returns True.', 'is_at_destination': 'Condition: Checks if the robot has reached the specified destination. Returns True if the destination is reached, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Navigate the robot to a specific location while avoiding any obstacles on the way
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>move_to_destination</Action><Condition>is_at_destination</Condition></Sequence><Sequence><Action>scan_for_obstacles</Action><Action>avoid_obstacles</Action></Sequence><Action>say Sorry, I can't do the task</Action></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'identify_object': 'Action: Use vision and object recognition to identify an object. Always returns True.', 'pick_up_object': 'Action: Uses a robotic arm to pick up the identified object. Always returns True.', 'move_to_object_location': 'Action: Moves the robot to the location of the identified object. Always returns True.', 'is_object_picked_up': 'Condition: Checks if the identified object has been successfully picked up. Returns True if the object is picked up, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Design a behavior tree for a robot to identify and pick up a specific object in its environment
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>identify_object</Action><Condition>is_object_picked_up</Condition></Sequence><Sequence><Action>pick_up_object</Action><Action>move_to_object_location</Action></Sequence><Action>say Sorry, I can't do the task</Action></Selector></BehaviorTree> Note: This example does not include all of the available behaviors listed in instructions due to the length of the task description.

###
4.// INSTRUCTIONS: Use only the following behaviors {'gather_resources': 'Action: Gather resources from the environment. Always returns True.', 'harvest_crops': 'Action: Harvest ripe crops. Always returns True.', 'plant_crops': 'Action: Plant crops in designated areas. Always returns True.', 'water_crops': 'Action: Water crops to maintain their health. Always returns True.', 'is_resource_full': 'Condition: Checks if the agent's resource container is full. Returns True if the container is full, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Create a behavior tree for a farming robot to gather resources, plant and water crops, and harvest ripe crops until the resource container is full.
4.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_resource_full</Condition><Selector><Sequence><Action>gather_resources</Action><Sequence><Action>plant_crops</Action><Action>water_crops</Action></Sequence><Action>harvest_crops</Action></Sequence></Selector></Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'move_forward': 'Action: Move the agent forward a specified distance. Always returns True.', 'turn_left': 'Action: Turn the agent left a specified angle. Always returns True.', 'turn_right': 'Action: Turn the agent right a specified angle. Always returns True.', 'is_wall_in_front': 'Condition: Checks if there is a wall directly in front of the agent. Returns True if there is a wall, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Generate a behavior tree for a maze-solving robot to navigate through the maze until it reaches the end.
5.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>is_wall_in_front</Condition><Sequence><Action>turn_left</Action><Action>move_forward</Action></Sequence></Sequence><Selector><Sequence><Condition>is_wall_in_front</Condition><Sequence><Action>turn_right</Action><Action>move_forward</Action></Sequence></Sequence><Sequence><Condition>is_wall_in_front</Condition><Action>move_forward</Action></Sequence></Selector></Sequence></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'drill': 'Action: Use the agent's drill to dig into the ground. Always returns True.', 'move_down': 'Action: Move the agent downwards. Always returns True.', 'arm_grab': 'Action: Extend the agent's arm to grab an object. Always returns True.', 'release_object': 'Action: Release the object held by the agent. Always returns True.', 'is_target_reached': 'Condition: Checks if the agent has reached its designated target. Returns True if the target is reached, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Generate a behavior tree for a digging robot to drill into the ground, move downwards, grab an object, and release it at a specified location.
6.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>is_target_reached</Condition><Sequence><Action>arm_grab</Action><Sequence><Action>drill</Action><Action>move_down</Action></Sequence><Action>release_object</Action></Sequence></Selector><Sequence><Condition>is_target_reached</Condition><Selector><Action>drill</Action><Action>move_down</Action></Selector></Sequence></Sequence></BehaviorTree> 
###
4.// INSTRUCTIONS: Use only the following behaviors {'detect_enemy': 'Action: Detect and identify potential enemies in the area. Always returns True.', 'avoid_enemy': 'Action: Avoid and evade enemies. Always returns True.', 'is_enemy_nearby': 'Condition: Checks if there are enemies within a certain radius. Returns True if enemies are nearby, False otherwise.', 'is_in_danger': 'Condition: Checks if the agent is currently in danger. Returns True if in danger, False otherwise.', 'counter_attack': 'Action: Initiate a counter attack against enemies. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Detect and identify enemies, avoid them if possible. If in danger, initiate a counter attack.
4.// OUTPUT:
<BehaviorTree><Sequence><Action>detect_enemy</Action><Condition>is_enemy_nearby</Condition><Sequence><Selector><Sequence><Condition>is_in_danger</Condition><Action>counter_attack</Action></Sequence><Action>avoid_enemy</Action></Selector></Sequence></Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'process_orders': 'Subtree node: Processes orders from a central command. Returns True if orders have been processed, False otherwise.', 'send_status': 'Action: Send a status report to the central command. Returns True if the status has been sent, False otherwise.', 'weather_check': 'Action: Check for any potential weather threats in the area. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Continuously process orders and send status report. Perform weather check every 30 minutes.
5.// OUTPUT:
<BehaviorTree><Sequence><Action>process_orders</Action><Selector><Sequence><Condition>every_30_min</Condition><Action>weather_check</Action></Sequence><Action>send_status</Action></Selector></Sequence></BehaviorTree>
 
###
6.// INSTRUCTIONS: Use only the following behaviors {'explore': 'Subtree node: Represents a behavior tree for exploring a new area.', 'rest': 'Action: Rest and recharge the agent. Always returns True.', 'on_low_battery': "Event: Triggers when the agent's battery level falls below a threshold. Returns True if battery is low, False otherwise."}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Continuously explore new areas, but take a break to rest and recharge when battery is low.
6.// OUTPUT:
<BehaviorTree><Sequence><Action>explore</Action><Trigger>on_low_battery</Trigger><Action>rest</Action></Sequence></BehaviorTree>
###
4.// INSTRUCTIONS: Use only the following behaviors {'detect_nearby_objects': 'Action: Detect nearby objects and identify the most valuable object. Always returns True.', 'move_towards_object': 'Action: Move towards the most valuable object. Always returns True.', 'pickup_object': 'Action: Pick up the identified object. Returns True if the object is successfully picked up, False otherwise.', 'deposit_object': 'Action: Deposit the carried objects in the designated location. Returns True if all objects are successfully deposited, False otherwise.', 'is_object_collected': 'Condition: Checks if the object has been successfully picked up and is currently being carried. Returns True if object is being carried, False otherwise.', 'are_all_objects_collected': 'Condition: Checks if all identified objects have been collected and deposited. Returns True if all objects are collected and deposited, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Collect all valuable objects in a specific area and deposit them at a designated location.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>detect_nearby_objects</Action><Condition>greater_than_current_object_value</Condition><Action>move_towards_object</Action><Selector><Sequence><Condition>is_object_collected</Condition><Action>deposit_object</Action></Sequence></Selector></Sequence><Sequence><Condition>are_all_objects_collected</Condition><Action>return_to_base</Action></Sequence></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'move_to_target': 'Action: Move towards a specific target location. Returns True if the target location is reached, False otherwise.', 'detect_obstacles': 'Action: Detect obstacles and avoid them while moving. Returns True if obstacles are successfully avoided, False otherwise.', 'search_for_target': 'Action: Continuously search for a target location. Returns True if target location is found, False otherwise.', 'is_barrel_reachable': 'Condition: Checks if the target location is within reach of the robot to collect the barrel. Returns True if the target location is within reach, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Navigate and collect a valuable barrel located in a maze-like environment while avoiding obstacles.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>move_to_target</Action><Sequence><Action>detect_obstacles</Action><Action>rotate_90_degrees</Action></Sequence></Sequence><Sequence><Action>search_for_target</Action><Selector><Sequence><Condition>is_barrel_reachable</Condition><Action>collect_barrel</Action></Sequence></Selector></Sequence></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'move_to_checkpoint': 'Action: Move to the designated checkpoint location. Returns True if the checkpoint is reached, False otherwise.', 'halt_movement': 'Action: Halt any current movement. Returns True if movement is successfully halted, False otherwise.', 'scan_surroundings': 'Action: Scan the surroundings for potential threats. Always returns True.', 'perform_evasive_maneuvers': 'Subtree node: Represents a behavior tree for performing evasive maneuvers when faced with a threat.', 'evaluate_threat_level': 'Condition: Checks the current threat level. Returns True if the threat level is above a certain threshold, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Safely navigate a hazardous area, frequently scanning for potential threats and using evasive maneuvers if needed.
6.// OUTPUT:
<BehaviorTree><Sequence><Action>move_to_checkpoint</Action><Action>halt_movement</Action><Action>scan_surroundings</Action><Selector><Sequence><Condition>evaluate_threat_level</Condition><Action>perform_evasive_maneuvers</Action></Sequence></Selector></Sequence></BehaviorTree>
###
4.// INSTRUCTIONS: Use only the following behaviors {'move_to_specific_location': 'Action: Move the robot to a specific location set by the user. Always returns True.', 'pick_up_object': 'Action: Pick up an object located at the current location. Always returns True.', 'drop_object': 'Action: Drop any object being carried by the robot. Always returns True.', 'detect_obstacles': "Action: Use sensors to detect any obstacles in the surrounding environment. Always returns True.", 'is_object_held': 'Condition: Check if the robot is currently holding an object. Returns True if an object is being held, False otherwise.', 'is_path_safe': 'Condition: Check if the path ahead is safe to travel. Returns True if there are no obstacles, False if obstacles are present.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Generate behavior tree for a robot to navigate an obstacle course while carrying an object
4.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_path_safe</Condition><Selector><Sequence><Action>detect_obstacles</Action><Action>move_to_specific_location</Action><Selector><Action>pick_up_object</Action><Action>drop_object</Action></Selector></Sequence></Selector></Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'align_with_target': 'Action: Align the robot with the target location. Always returns True.', 'fire_laser': 'Action: Fire a laser at the target. Always returns True.', 'reload_laser': 'Action: Reload the laser with ammunition. Always returns True.', 'move_to_safe_location': 'Action: Move the robot to a safe location. Always returns True.', 'is_laser_ready': 'Condition: Check if the laser has been reloaded and is ready to fire. Returns True if the laser is ready, False otherwise.', 'is_enemy_present': 'Condition: Check if an enemy is present within range. Returns True if an enemy is detected, False otherwise', 'is_target_destroyed': 'Condition: Check if the target has been successfully destroyed. Returns True if the target is destroyed, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Generate behavior tree for a robot to destroy an enemy target
5.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_enemy_present</Condition><Selector><Sequence><Condition>is_laser_ready</Condition><Selector><Action>reload_laser</Action><Selector><Action>align_with_target</Action><Selector><Action>fire_laser</Action><Action>wait</Action></Selector></Selector></Sequence><Action>move_to_safe_location</Action></Selector></Sequence></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'find_resource': 'Action: Search for available resources in the area. Always returns True.', 'collect_resource': 'Action: Collect the available resource found. Always returns True.', 'return_to_base': 'Action: Return to the base location. Always returns True.', 'is_resource_collected': 'Condition: Check if the resource has been successfully collected. Returns True if the resource is collected, False otherwise.', 'is_resource_available': 'Condition: Check if there are any resources available in the area. Returns True if resources are present, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Generate behavior tree for a robot to gather resources and bring them back to the base
6.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_resource_available</Condition><Selector><Sequence><Action>find_resource</Action><Selector><Action>collect_resource</Action><Action>return_to_base</Action></Selector></Sequence><Action>wait</Action></Selector></Sequence></BehaviorTree>4.// INSTRUCTIONS: Use only the following behaviors {'gather_resources': 'Action: Gather resources from the environment. Always returns True.', 'craft_tool': 'Action: Use gathered resources to craft a tool. Always returns True.', 'deposit_resources': 'Action: Deposit crafted tool into a designated area. Always returns True.', 'check_inventory_full': 'Condition: Check if the inventory is full. Returns True if the inventory is full, False otherwise.', 'is_tool_crafted': 'Condition: Check if a tool has been crafted. Returns True if a tool is crafted, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Gather resources, craft a tool, and deposit it into a designated area.
4.// OUTPUT:
<BehaviorTree><Sequence><Action>gather_resources</Action><Sequence><Condition>check_inventory_full</Condition><Selector><Action>craft_tool</Action><Action>wait</Action></Selector><Action>deposit_resources</Action></Sequence></Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'move_to_point': 'Action: Move the robot to a specified point in the environment. Always returns True.', 'detect_other_robots': 'Action: Use sensors to detect other robots nearby. Always returns True.', 'form_circle': 'Action: Form a circle with other robots nearby. Always returns True.', 'is_circle_formed': 'Condition: Check if a circle has been formed with other robots. Returns True if a circle is formed, False otherwise.', 'is_circle_complete': 'Condition: Check if the circle is complete. Returns True if all robots in the circle are connected, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Move to a specific point and form a connected circle with other robots nearby.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>move_to_point</Action></Sequence><Sequence><Condition>is_circle_complete</Condition><Selector><Sequence><Action>detect_other_robots</Action><Selector><Condition>is_circle_formed</Condition><Action>form_circle</Action></Selector></Sequence></Selector></Sequence></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'move_to_next_point': 'Action: Move the robot to the next point in the predefined path. Always returns True.', 'detect_box': 'Action: Use sensors to detect a box nearby. Always returns True.', 'pick_up_box': 'Action: Pick up the detected box. Always returns True.', 'check_inventory_empty': 'Condition: Check if the inventory is empty. Returns True if the inventory is empty, False otherwise.', 'drop_box': 'Action: Drop the box at a designated drop-off area. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Move along the predefined path and pick up and drop a box at a designated area.
6.// OUTPUT:
<BehaviorTree><Sequence><Action>move_to_next_point</Action><Sequence><Condition>check_inventory_empty</Condition><Selector><Action>detect_box</Action><Selector><Selector><Action>pick_up_box</Action><Action>wait</Action></Selector><Action>drop_box</Action></Selector></Sequence></Sequence></BehaviorTree>// greater_than_enemy_threat condition connected to attack action node through utility_score function

###
4.// INSTRUCTIONS: Use only the following behaviors {'follow_leader': 'Action: Follow the leader robot. Always returns True.', 'avoid_obstacles': 'Condition: Checks for nearby obstacles and returns True if obstacle is detected, False otherwise.', 'move_to_target': 'Action: Moves towards a designated target location. Always returns True.', 'has_target': 'Condition: Checks if the robot has a designated target location to move towards. Returns True if a target is set, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Occupy and secure a designated area while following the leader robot and avoiding any obstacles.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>has_target</Condition><Sequence><Action>follow_leader</Action><Condition>avoid_obstacles</Condition><Action>move_to_target</Action></Sequence></Sequence></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'rotate_left': 'Action: Rotate the robot to the left. Always returns True.', 'rotate_right': 'Action: Rotate the robot to the right. Always returns True.', 'has_detected_obstacle': 'Condition: Checks if an obstacle is detected by sensors. Returns True if obstacle is detected, False otherwise.', 'has_moved_stopped': 'Condition: Checks if the robot has moved or stopped since last check. Returns True if the robot has moved, False if the robot has stopped.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Rotate left until an obstacle is detected, then rotate right and continue rotating until the robot moves.
5.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>has_detected_obstacle</Condition><Action>rotate_right</Action></Sequence><Action>rotate_left</Action></Selector><Condition>has_moved_stopped</Condition></Sequence></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'collect_resources': 'Action: Collect resources from designated location. Always returns True.', 'deposit_resources': 'Action: Deposit collected resources at a designated location. Always returns True.', 'has_resources': 'Condition: Checks if the robot has any resources stored. Returns True if resources are available, False otherwise.', 'has_target': 'Condition: Checks if the robot has a designated target location to move towards. Returns True if a target is set, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Collect resources and deposit them at a designated location, while constantly checking for new resources and changing target locations if necessary.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>has_resources</Condition><Action>deposit_resources</Action></Sequence><Action>collect_resources</Action></Selector></BehaviorTree>
// collect_resources action node connected to deposit_resources action node through has_target condition. 
###
4.// INSTRUCTIONS: Use only the following behaviors {'leave_nest': 'Action: Leave the nest and start exploring. Always returns True.', 'reach_food_source': 'Action: Move to the nearest food source. Always returns True.', 'carry_food': 'Action: Pick up and carry food back to the nest. Returns True if the food is successfully brought back to the nest, False otherwise.', 'recharge_battery': 'Action: Recharge the robot�s battery when it is low. Always returns True.', 'is_food_nearby': 'Condition: Check if food is nearby. Returns True if food is within 10 units, False otherwise.', 'is_nest_reached': 'Condition: Check if the nest is reached. Returns True if the nest is reached, False otherwise.', 'is_battery_low': 'Condition: Check if the battery level is below 20%. Returns True if the battery level is below 20%, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree for a robot to gather food and bring it back to the nest, while also managing its battery life
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_food_nearby</Condition><Action>reach_food_source</Action><Action>carry_food</Action></Sequence><Condition>is_battery_low</Condition><Selector><Sequence><Condition>is_nest_reached</Condition><Action>recharge_battery</Action></Sequence><Action>leave_nest</Action></Selector></Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'move_to_start_position': "Action: Move robot to the starting position. Returns True if the starting position is reached, False otherwise.", 'detect_object': 'Action: Use sensors to detect object in front of the robot. Returns True if an object is detected, False otherwise.', 'grab_object': 'Action: Use gripper to grab the detected object. Returns True if the object is successfully grabbed, False otherwise.', 'rotate_left': 'Action: Rotate the robot 90 degrees to the left. Always returns True.', 'rotate_right': 'Action: Rotate the robot 90 degrees to the right. Always returns True.', 'is_object_grabbed': 'Condition: Check if an object is currently grabbed by the robot. Returns True if an object is grabbed, False otherwise.', 'is_rotation_completed': 'Condition: Check if the robot has completed its rotation. Returns True if the rotation is completed, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree for a robot to navigate and pick up an object at a specified starting position.
5.// OUTPUT:
<BehaviorTree><Sequence><Action>move_to_start_position</Action><Selector><Sequence><Condition>detect_object</Condition><Action>grab_object</Action></Sequence><Condition>is_object_grabbed</Condition><Selector><Sequence><Condition>is_rotation_completed</Condition><Action>rotate_left</Action></Sequence><Action>rotate_right</Action></Selector></Sequence></Selector></Sequence></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'move_forward': 'Action: Move the robot forward. Returns True if the robot successfully moves forward, False otherwise.', 'move_backward': 'Action: Move the robot backward. Returns True if the robot successfully moves backward, False otherwise.', 'turn_left': 'Action: Turn the robot 90 degrees to the left. Always returns True.', 'turn_right': 'Action: Turn the robot 90 degrees to the right. Always returns True.', 'is_obstacle_detected': 'Condition: Check for obstacles ahead. Returns True if an obstacle is detected, False otherwise.', 'is_target_reached': 'Condition: Check if the target is reached. Returns True if the target is reached, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree for a robot to navigate through an obstacle course and reach the target.
6.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_obstacle_detected</Condition><Sequence><Action>move_backward</Action><Action>turn_left</Action></Sequence><Action>move_forward</Action></Sequence><Condition>is_target_reached</Condition><Sequence><Action>turn_right</Action><Action>move_forward</Action></Sequence></BehaviorTree>
###
4.// INSTRUCTIONS: Use only the following behaviors {'avoid_collision': 'Action: Move in a different direction to avoid collision. Always returns True.', 'move_to_point': 'Action: Move the agent to a designated point. Always returns True.', 'detect_wall': 'Condition: Check for any nearby walls. Returns True if a wall is detected, False otherwise.', 'wait_for_signal': 'Condition: Wait for a signal from another agent. Returns True if a signal is received, False otherwise.', 'send_signal': 'Action: Send a signal to another agent. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Navigate to a designated point while avoiding collisions with walls and communicating with other agents to avoid congestion.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>detect_wall</Condition><Action>avoid_collision</Action></Sequence><Sequence><Condition>wait_for_signal</Condition><Action>move_to_point</Action></Sequence><Action>send_signal</Action></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'follow_lead_agent': 'Action: Follow the lead agent. Always returns True.', 'analyze_team_performance': 'Action: Analyze and assess the team's performance. Always returns True.', 'is_enemy_detected': 'Condition: Check if an enemy is detected. Returns True if an enemy is detected, False otherwise.', 'is_operation_successful': 'Condition: Check if the team's operation has been successful. Returns True if successful, False otherwise.', 'is_obstacle_present': 'Condition: Check if there are obstacles in the team's path. Returns True if an obstacle is present, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Follow the lead agent while monitoring for enemy activity and obstacles, and assess the team's performance.
5.// OUTPUT:
<BehaviorTree><Sequence><Action>follow_lead_agent</Action><Condition>is_enemy_detected</Condition><Action>analyze_team_performance</Action><Condition>is_obstacle_present</Condition><Condition>is_operation_successful</Condition></Sequence></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'move_to_target': 'Action: Move towards the designated target. Always returns True.', 'detect_object': 'Condition: Check for any nearby objects. Returns True if an object is detected, False otherwise.', 'pick_up_object': 'Action: Pick up the detected object. Always returns True.', 'drop_object': 'Action: Drop the object currently being carried. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Pick up a nearby object, move towards a designated target while avoiding obstacles, and drop the object at the destination.
6.// OUTPUT:
<BehaviorTree><Sequence><Condition>detect_object</Condition><Sequence><Selector><Action>pick_up_object</Action><Action>drop_object</Action></Selector><Action>move_to_target</Action></Sequence></Sequence></BehaviorTree> 
###
4.// INSTRUCTIONS: Use only the following behaviors {'collect_resource': 'Action: Collect a resource found in the environment. Always returns True.', 'deposit_resource': "Action: Deposit collected resources. Always returns True.", 'is_resource_available': 'Condition: Check if there are resources nearby. Returns True if resources are available, False otherwise.', 'is_resource_depleted': 'Condition: Check if the resource has been depleted. Returns True if the resource has been depleted, False otherwise.', 'is_resource_deposited': "Condition: Check if the resource has been deposited. Returns True if the resource has been deposited, False otherwise.", 'navigate_to_resource': 'Action: Navigate to the nearest available resource. Always returns True.', 'navigate_to_deposit': 'Action: Navigate to the deposit location. Always returns True.', 'wait': 'Action: Wait for a certain amount of time to simulate resource collection. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
// INSTRUCTIONS: Use only the following behaviors {'collect_resource': 'Action: Collect a resource found in the environment. Always returns True.', 'deposit_resource': "Action: Deposit collected resources. Always returns True.", 'is_resource_available': '
5. 
// USER COMMAND: generate behavior tree to 'collect resources from 5 different locations and deposit at the designated area.' Output only the XML behavior tree without extra text.
5. // OUTPUT: <BehaviorTree> <Sequence> <Selector> <Sequence> <Selector> <Condition>is_resource_available</Condition> <Action>collect_resource</Action> <Condition>is_resource_depleted</Condition> <Action>wait</Action> </Selector> <Action>wait</Action> </Sequence> <Action>wait</Action> <Sequence> <Condition>is_resource_deposited</Condition> <Action>deposit_resource</Action> </Sequence> </Selector> <Selector> <Sequence> <Condition>is_resource_available</Condition> <Action>navigate_to_resource</Action> <Action>collect_resource</Action> </Sequence> <Action>navigate_to_deposit</Action> </Selector> </Sequence> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'scan_for_intruders': 'Action: Scan the current area for any intruders using sensors. Always returns True.', 'is_intruder_detected': 'Condition: Check if an intruder is detected within the designated range. Returns True if an intruder is detected, False otherwise.', 'send_warning_signal': 'Action: Send a warning signal to nearby robots. Always returns True.', 'is_warning_sent': 'Condition: Check if a warning signal has been sent. Returns True if a signal has been sent, False otherwise.', 'approach_intruder': 'Action: Move towards the detected intruder. Always returns True.', 'capture_intruder': 'Action: Capture the intruder and bring them to the designated location. Always returns True.', 'is_intruder_captured': 'Condition: Check if the intruder has been captured. Returns True if the intruder is captured, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Scan the environment for intruders, send a warning signal if detected, then capture the intruder and bring them to the designated location.'  Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree> <Selector> <Selector> <Condition>is_intruder_detected</Condition> <Sequence> <Action>send_warning_signal</Action> <Selector> <Condition>is_warning_sent</Condition> <Sequence> <Action>approach_intruder</Action> <Selector> <Condition>is_intruder_captured</Condition> <Action>capture_intruder</Action> </Selector> </Sequence> </Selector> </Sequence> <Action>scan_for_intruders</Action> </Selector> </BehaviorTree> 
###
4.// INSTRUCTIONS: Use only the following behaviors {'move_forward': 'Action: Move the robot one step forward in the current direction. Always returns True.', 'turn_left': 'Action: Turn the robot 90 degrees to the left. Always returns True.', 'turn_right': 'Action: Turn the robot 90 degrees to the right. Always returns True.', 'update_map': "Action: Update the robot's internal map of the environment based on its current location and sensor readings. Always returns True.", 'is_path_blocked': 'Condition: Check if the path in the current direction is blocked or impassable. Returns True if the path is blocked, False otherwise.', 'is_area_mapped': 'Condition: Check if the current area has already been mapped and explored. Returns True if the area is mapped, False otherwise.', 'is_target_visible': 'Condition: Check if the target is within the robot's field of view. Returns True if the target is visible, False otherwise.', 'reach_target': 'Action: Move towards and reach the target. Returns True once the target is reached.', 'task_completed': 'Action: Signal task completion by stopping and updating internal map. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Generate behavior tree for a robot to explore and map a large, complex environment while searching for a specific target.
4.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_area_mapped</Condition><Selector><Sequence><Condition>is_path_blocked</Condition><Selector><Action>turn_left</Action><Action>turn_right</Action></Selector></Sequence><Sequence><Action>move_forward</Action><Action>update_map</Action></Sequence></Selector></Sequence><Sequence><Condition>is_target_visible</Condition><Action>reach_target</Action></Sequence><Action>task_completed</Action></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'circle_area': 'Action: Move in a circle around a specified area. Returns True once the specified area has been circled.', 'wait_for_obstacle': 'Action: Wait for an obstacle to be detected. Returns True once an obstacle is detected.', 'change_color_to_blue': "Action: Change robot's color to blue. Always returns True.", 'move_to_center': 'Action: Move to the center of the environment. Returns True once the center is reached.', 'is_color_blue': 'Condition: Check if the robot's color is blue. Returns True if the color is blue, False otherwise.', 'is_center_reached': 'Condition: Check if the robot has reached the center of the environment. Returns True if the center is reached, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Generate behavior tree for a robot to circle an unknown area, wait for an obstacle, and change color to blue when an obstacle is detected.
5.// OUTPUT:
<BehaviorTree><Sequence><Action>circle_area</Action><Action>wait_for_obstacle</Action><Action>change_color_to_blue</Action></Sequence></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'move_forward': 'Action: Move the robot one step forward in the current direction. Always returns True.', 'move_backwards': 'Action: Move the robot one step backwards in the current direction. Always returns True.', 'turn_left': 'Action: Turn the robot 90 degrees to the left. Always returns True.', 'turn_right': 'Action: Turn the robot 90 degrees to the right. Always returns True.', 'drop_marker': 'Action: Drop a marker at the current location. Always returns True.', 'is_marker_present': 'Condition: Check if a marker is present at the current location. Returns True if a marker is present, False otherwise.', 'is_path_clear': 'Condition: Check if the robot can move forward without encountering an obstacle. Returns True if the path is clear, False otherwise.', 'at_goal': 'Condition: Check if the robot has reached the goal location. Returns True if the goal is reached, False otherwise.', 'task_completed': 'Action: Signal task completion by stopping. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Generate behavior tree for a robot to navigate through a maze by avoiding obstacles and dropping markers at each intersection.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_marker_present</Condition><Action>drop_marker</Action></Sequence><Sequence><Condition>is_path_clear</Condition><Action>move_forward</Action></Sequence><Action>avoid_obstacle</Action></Selector><Condition>at_goal</Condition><Action>task_completed</Action></BehaviorTree> 
###
4.// INSTRUCTIONS: Use only the following behaviors {'navigate_to_target': 'Subtree node: Represents a behavior tree for navigating to a specific target.', 'synchronize_locations': "Action: Synchronize the agent's current location with other agents. Always returns True.", 'search_target': 'Action: Use sensors to search for the target in the current location. Always returns True.', 'is_target_found': 'Condition: Check if the target has been found. Returns True if the target has been found, False otherwise.', 'intercept_target': 'Action: Move towards the target and intercept it. Always returns True.', 'is_obstacle_present': 'Condition: Check if there are any obstacles in the path. Returns True if an obstacle is detected, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Create a behavior tree for swarm robots to intercept a moving target while avoiding obstacles.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Subtree>navigate_to_target</Subtree><Action>synchronize_locations</Action></Sequence><Sequence><Action>search_target</Action><Selector><Sequence><Condition>is_target_found</Condition><Action>intercept_target</Action></Sequence><Sequence><Condition>is_obstacle_present</Condition><Action>avoid_obstacle</Action></Sequence></Selector></Sequence></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'collect_resources': "Subtree node: Represents a behavior tree for resource collection.", 'deposit_resources': "Action: Deposit collected resources at a designated location. Always returns True.", 'is_resource_full': 'Condition: Check if the robot has reached its maximum resource capacity. Returns True if the capacity is reached, False otherwise.', 'is_resource_available': 'Condition: Check if there are resources nearby. Returns True if resources are detected, False otherwise.', 'search_for_resource': 'Action: Use sensors to search for resources in the current location. Always returns True.', 'travel_to_location': 'Subtree node: Represents a behavior tree for traveling to a specific location.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Build a behavior tree for swarm robots to collect resources and deposit them at a designated location.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Subtree>travel_to_location</Subtree><Selector><Sequence><Condition>is_resource_available</Condition><Action>collect_resources</Action></Sequence><Sequence><Condition>is_resource_full</Condition><Action>deposit_resources</Action></Sequence></Selector></Sequence><Action>search_for_resource</Action></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'move_to_next_task': "Action: Move to the next task in the assigned task list. Always returns True.", 'execute_task': 'Subtree node: Represents a behavior tree for executing a specific task.', 'is_task_completed': 'Condition: Check if the current task has been completed. Returns True if the task is completed, False otherwise.', 'wait_for_task': 'Action: Wait for instructions from the task coordinator. Always returns True.', 'assign_task': "Action: Assign a new task from the task list. Always returns True.", 'is_new_task_available': 'Condition: Check if there are any new tasks available. Returns True if a new task is available, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Generate behavior tree for swarm robots to execute a list of assigned tasks while waiting for new tasks.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Subtree>execute_task</Subtree><Action>move_to_next_task</Action></Sequence><Selector><Sequence><Condition>is_task_completed</Condition><Action>wait_for_task</Action></Sequence><Selector><Condition>is_new_task_available</Condition><Action>assign_task</Action></Selector></Selector></Selector></BehaviorTree>
###
4.// INSTRUCTIONS: Use only the following behaviors {'scan_for_enemy': 'Action: Scan for enemies within a 10 unit radius. Always returns True.', 'move_to_cover': 'Action: Move to nearest cover found. Always returns True.', 'fire_weapon': 'Action: Fire weapon at detected enemy. Always returns True.', 'is_enemy_detected': 'Condition: Check if an enemy is detected within 10 unit radius. Returns True if an enemy is detected, False otherwise.', 'is_cover_available': 'Condition: Check if cover is available within 20 unit radius. Returns True if cover is available, False otherwise.', 'is_weapon_loaded': 'Condition: Check if weapon is loaded. Returns True if weapon is loaded, False if not loaded.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Create a behavior tree for a group of robots to engage and eliminate any enemies within range while taking cover and reloading weapons when necessary.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_enemy_detected</Condition><Sequence><Action>fire_weapon</Action><Action>move_to_cover</Action></Sequence></Sequence><Selector><Condition>is_cover_available</Condition><Action>move_to_cover</Action></Selector><Sequence><Condition>not is_weapon_loaded</Condition><Action>reload_weapon</Action></Sequence></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'detect_terrain': 'Action: Detect terrain types (i.e. water, sand, rock) surrounding the robot. Always returns True.', 'navigate_to_water': 'Action: Move towards the nearest source of water. Always returns True.', 'gather_resources': 'Action: Use tools to gather resources from the surrounding area. Always returns True.', 'analyze_terrain': 'Action: Analyze terrain to determine the optimal path. Always returns True.', 'is_water_detected': 'Condition: Check if water is detected nearby. Returns True if water is detected, False otherwise.', 'is_resource_available': 'Condition: Check if there are resources available within 5 units. Returns True if resources are available, False otherwise.', 'is_terrain_valid': 'Condition: Check if the terrain type is valid for navigation. Returns True if the terrain type is optimal for navigation, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Design a behavior tree for a robot to navigate and gather resources in a terrain with varying types of terrain, while avoiding any terrain that may damage the robot.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>detect_terrain</Action><Selector><Sequence><Condition>is_water_detected</Condition><Action>gather_resources</Action><Selector><Condition>is_terrain_valid</Condition><Action>analyze_terrain</Action><Action>navigate_to_water</Action></Selector></Sequence><Action>navigate_to_safety</Action></Selector></Sequence><Action>wander</Action></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'find_exit': 'Action: Search for the nearest exit. Always returns True.', 'grab_food': 'Action: Pick up food if available nearby. Always returns True.', 'navigate_to_water': 'Action: Move towards the nearest source of water. Always returns True.', 'eat_food': 'Action: Eat food to sustain energy. Always returns True.', 'is_exit_found': 'Condition: Check if exit is detected within 10 unit radius. Returns True if exit is found, False otherwise.', 'is_food_detected': 'Condition: Check if food is detected within 5 unit radius. Returns True if food is detected, False otherwise.', 'is_thirsty': 'Condition: Check if robot's thirst level is low. Returns True if thirst level is below a certain threshold, False otherwise.', 'is_hungry': 'Condition: Check if robot's hunger level is low. Returns True if hunger level is below a certain threshold, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Create a behavior tree for a robot to find the nearest exit while managing thirst and hunger levels by searching for and consuming food and water if necessary.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_thirsty</Condition><Sequence><Action>find_exit</Action><Selector><Condition>is_food_detected</Condition><Sequence><Action>grab_food</Action><Action>eat_food</Action></Sequence></Selector><Action>navigate_to_water</Action></Sequence></Selector><Sequence><Condition>is_hungry</Condition><Sequence><Action>find_exit</Action><Sequence><Condition>is_food_detected</Condition><Sequence><Action>grab_food</Action><Action>eat_food</Action></Sequence></Selector></Sequence></Sequence><Action>wander</Action></Selector></BehaviorTree>
###
4.// INSTRUCTIONS: Use only the following behaviors {'scan_area': 'Subtree node: Scans the surrounding area for targets.', 'move_to_target': 'Subtree node: Represents a behavior tree for moving towards a target.', 'attack': 'Action: Attacks the target within range. Returns True if target is attacked, False otherwise.', 'check_idle': "Condition: Checks if the agent is idle. Returns True if agent is idle, False otherwise."}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Scan the area for targets. Move to the closest target and attack until it is removed.
4.// OUTPUT:
<BehaviorTree> <Sequence> <Action>scan_area</Action> <Action>move_to_target</Action> <Selector> <Sequence> <Condition>check_idle</Condition> <Action>attack</Action> </Sequence> <Action>continue_movement_agent</Action> </Selector> </Sequence> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'gather_resources': 'Subtree node: Represents a behavior tree for collecting resources.', 'return_to_base': 'Subtree node: Represents a behavior tree for returning to base.', 'deposit_resources': 'Action: Deposits gathered resources at the base. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Gather resources and return to base. Deposit resources before resuming gathering.
5.// OUTPUT:
<BehaviorTree> <Sequence> <Action>gather_resources</Action> <Action>return_to_base</Action> <Action>deposit_resources</Action> </Sequence> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'follow_path': 'Subtree node: Represents a behavior tree for following a designated path.', 'move_to_target': 'Subtree node: Represents a behavior tree for moving towards a target.', 'find_cover': 'Subtree node: Represents a behavior tree for finding cover in case of attack.', 'check_health': 'Condition: Checks the agent's health and returns True if it falls below a certain threshold, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Follow a designated path. If health falls below 50%, find cover and wait for assistance.
6.// OUTPUT:
<BehaviorTree> <Sequence> <Action>follow_path</Action> <Conditional> <Condition>check_health</Condition> <Subtree> <Action>find_cover</Action> <Action>agent_movement_freeze</Action> </Subtree> </Conditional> </Sequence> </BehaviorTree>
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_blue': "Action: Change agent's color to blue. Always returns True.", 'change_color_to_yellow': "Action: Change agent's color to yellow. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'get_nearest_object': 'Action: Move towards the nearest object. Returns True when object is reached, False otherwise.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_in_range': 'Condition: Check if the agent is within 5 units of a specified location. Returns True if within range, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Collect the nearest blue object and return to the nest, then change color to yellow'. Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>is_target_detected</Condition><Action>get_nearest_object</Action><Action>task_completed</Action><Condition>is_in_range</Condition><Sequence><Action>change_color_to_yellow</Action><Action>task_completed</Action></Sequence></Sequence><Sequence><Condition>is_agent_in_nest</Condition><Action>change_color_to_blue</Action><Action>task_completed</Action></Sequence></Selector></Sequence></BehaviorTree>

5.// INSTRUCTIONS: Use only the following behaviors {'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_blue': "Action: Change agent's color to blue. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'follow_path': 'Action: Follow a predefined path. Returns True once the path is completed, False otherwise.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_agent_outside': 'Condition: Check if the agent is outside the nest. Returns True if outside, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'set_destination': 'Action: Set the destination for the agent. Returns True once the destination is set, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Navigate through an obstacle course and return to the nest, changing color to blue along the way'. Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Action>set_destination</Action><Sequence><Condition>is_agent_in_nest</Condition><Action>change_color_to_blue</Action><Action>task_completed</Action></Sequence><Sequence><Condition>follow_path</Condition><Sequence><Condition>is_agent_outside</Condition><Sequence><Condition>is_obstacle_detected</Condition><Action>avoid_obstacle</Action></Sequence></Sequence></Sequence></Sequence><Action>move_towards_destination</Action></Sequence></Selector></BehaviorTree>

6.// INSTRUCTIONS: Use only the following behaviors {'change_color_to_blue': "Action: Change agent's color to blue. Always returns True.", 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'follow_path': 'Action: Follow a predefined path. Returns True once the path is completed, False otherwise.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_on_mission': 'Condition: Check if the agent is on a mission. Returns True if on a mission, False otherwise.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Follow a path, change color to blue, complete a task, then return to the nest and change color to green'. Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>is_on_mission</Condition><Action>follow_path</Action><Action>task_completed</Action><Condition>is_target_detected</Condition><Sequence><Action>change_color_to_blue</Action><Action>task_completed</Action></Sequence></Sequence><Sequence><Condition>is_agent_in_nest</Condition><Action>change_color_to_green</Action><Action>task_completed</Action></Sequence></Selector></Sequence></BehaviorTree> 
###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'change_color_to_cyan': "Action: Change agent's color to cyan. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_circle_at_position_x_y': "Action: Form a circle with a specified radius at a given position (x,y). Always returns True.", 'is_agent_in_position_x_y': 'Condition: Check if the agent is in the specified position (x,y). Returns True if the agent is in the position, False otherwise.', 'is_agent_moving': 'Condition: Check if the agent is currently in motion. Returns True if the agent is moving, False otherwise.', 'is_circle_formed': 'Condition: Check if a circle is formed at the specified position. Returns True if the circle is formed, False otherwise.', 'rotate_clockwise': 'Action: Rotate the agent clockwise. Always returns True.', 'rotate_counter_clockwise': 'Action: Rotate the agent counter clockwise. Always returns True.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Form a circle at position (2,5), rotate clockwise and change color to cyan'. Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree><Condition>is_agent_in_position_2_5</Condition><Sequence><Action>form_circle_at_position_2_5</Action><Action>rotate_clockwise</Action><Action>change_color_to_cyan</Action><Action>task_completed</Action></Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'follow_target': 'Action: Follow target within 10 units distance. Returns True if the agent successfully follows the target, False otherwise.', 'is_agent_following': 'Condition: Check if the agent is currently following a target. Returns True if agent is following a target, False otherwise.', 'is_target_reached': 'Condition: Check if the agent has reached the target. Returns True if the agent is within 2 units distance of the target, False otherwise.', 'move_towards_direction': "Action: Move towards a specific direction. Returns True if the agent successfully moves towards the direction, False otherwise.", 'prioritize_target': 'Action: Prioritize a target for the agent to follow. Returns True if the agent successfully prioritizes the target, False otherwise.', 'reached_target': 'Action: Signal when the agent has reached the target. Always returns True.', 'stop_following': 'Action: Stop the agent from following any target. Always returns True.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Follow the target, if unable to reach within 20 units, prioritize another target and stop following once reached'. Output only the XML behavior tree without extra text.
5.// OUTPUT:
 <BehaviorTree><Sequence><Sequence><Condition>is_agent_following</Condition><Selector><Sequence><Condition>is_target_reached</Condition><Action>stop_following</Action></Sequence><Sequence><Condition>move_towards_direction</Condition><Action>reached_target</Action></Sequence><Action>prioritize_target</Action></Selector></Sequence><Action>follow_target</Action><Action>task_completed</Action></Sequence></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'check_environment': 'Action: Check the environment for any obstacles or targets. Returns True if no obstacles or targets are present, False otherwise.', 'is_environment_safe': 'Condition: Check if the environment is safe. Returns True if no obstacles or targets are detected, False otherwise.', 'move_forward': 'Action: Move forward in a straight line. Returns True if the agent successfully moves forward, False otherwise.', 'turn_left': 'Action: Turn left by 90 degrees. Returns True if the agent successfully turns left, False otherwise.', 'turn_right': 'Action: Turn right by 90 degrees. Returns True if the agent successfully turns right, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Move through the environment, checking for safety and turning left if obstacle is detected, then move forward again until the task is completed'. Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree><Sequence><Sequence><Condition>is_environment_safe</Condition><Action>move_forward</Action></Sequence><Selector><Sequence><Condition>check_environment</Condition><Action>turn_left</Action></Sequence><Action>move_forward</Action></Selector><Action>task_completed</Action></Sequence></BehaviorTree> <BehaviorTree><Selector><Condition>is_intruder_detected</Condition><Action>change_color_to_red</Action></Selector></BehaviorTree>


###
4.// INSTRUCTIONS: Use only the following behaviors {'explore': 'Action: Explore for resources. Always returns True.', 'gather_resource': 'Action: Gather nearest resource. Returns True once resource is gathered.', 'return_to_nest': 'Action: Return to the nest. Returns True once the agent reaches the nest.', 'distance_to_nest': 'Function: Calculates the distance between agent and nest. Returns the distance in units.', 'has_resource': 'Condition: Check if the agent is carrying a resource. Returns True if the agent is carrying a resource, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Gather resources while exploring and return to nest when carrying a resource.
4.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Action>gather_resource</Action><Condition>has_resource</Condition><Action>return_to_nest</Action></Sequence><Action>explore</Action></Selector></Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'form_square': 'Action: Form a square shape using multiple agents. Returns True once the square is formed.', 'move_to_coord': 'Action: Move to specified coordinates. Returns True once the agent reaches the coordinates.', 'is_square_formed': 'Condition: Check if the square is formed. Returns True if the square is formed, False otherwise.', 'within_distance': 'Condition: Check if agent is within specified distance from specified coordinates. Returns True if agent is within the specified distance, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Create a square shape using multiple agents, with each agent moving to a specific set of coordinates and forming a line.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>move_to_coord</Action><Sequence><Condition>within_distance_coord</Condition><Sequence><Action>form_square</Action><Sequence><Condition>is_square_formed</Condition><Action>continue_movement_agent</Action></Sequence></Sequence></Sequence></Sequence><Action>wander</Action></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'get_target_position': 'Function: Get the current position of a specified target. Returns the coordinates of the target.', 'get_enemy_position': 'Function: Get the current position of nearby enemies. Returns a list of enemy coordinates.', 'calculate_distance': 'Function: Calculate the distance between two points. Returns the distance in units.', 'move_to_coord': 'Action: Move to specified coordinates. Returns True once the agent reaches the coordinates.', 'is_enemy_nearby': 'Condition: Check if at least one enemy is within a certain range. Returns True if an enemy is within the specified range, False otherwise.', 'is_target_reached': 'Condition: Check if the agent has reached the target. Returns True if the agent has reached the target, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Move to a specified target while avoiding nearby enemies, using the enemy position and target position to calculate the best path.
6.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_enemy_nearby</Condition><Selector><Action>avoid_obstacle</Action><Sequence><Action>get_target_position</Action><Sequence><Action>get_enemy_position</Action><Condition>is_target_reached</Condition><Action>wander</Action></Sequence></Selector></Sequence></Sequence></BehaviorTree>
4.// INSTRUCTIONS: Use only the following behaviors {'find_nearest_resource': 'Action: Find the nearest resource using sensors. Always returns True.', 'collect_resource': 'Action: Collect the resource and store it. Always returns True.', 'deposit_resource': 'Action: Deposit the collected resources into the designated storage area. Always returns True.', 'is_storage_full': 'Condition: Check if the designated storage area is full. Returns True if full, False otherwise.', 'resource_available': 'Condition: Check if there are resources available in the environment. Returns True if resources are available, False otherwise.', 'return_to_base': 'Action: Return to the base after collecting resources. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Construct behavior tree for a resource-collecting robot to efficiently gather and store resources.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>resource_available</Condition><Action>find_nearest_resource</Action><Action>collect_resource</Action><Selector><Sequence><Condition>is_storage_full</Condition><Action>return_to_base</Action></Sequence><Action>deposit_resource</Action></Selector></Sequence></Selector></BehaviorTree>

5.// INSTRUCTIONS: Use only the following behaviors {'navigate_to_destination': 'Action: Navigate the robot to the designated destination using sensors. Always returns True.', 'detect_obstacles': 'Condition: Check for obstacles in the path ahead. Returns True if obstacles are detected, False otherwise.', 'avoid_obstacles': 'Action: Avoid detected obstacles. Always returns True.', 'recharge_battery': 'Action: Recharge the robot's battery if it falls below 20%. Always returns True.', 'check_battery_level': 'Condition: Check if the robot's battery level is below 20%. Returns True if battery level is below 20%, False otherwise.', 'is_destination_reached': 'Condition: Check if the robot has reached the designated destination. Returns True if destination is reached, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Generate behavior tree for a robot to safely navigate through obstacles and recharge its battery as needed.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>navigate_to_destination</Action><Selector><Sequence><Condition>detect_obstacles</Condition><Action>avoid_obstacles</Action></Sequence><Condition>check_battery_level</Condition><Sequence><Action>recharge_battery</Action><Action>continue_movement_agent</Action></Sequence></Selector><Condition>is_destination_reached</Condition></Selector></BehaviorTree>

6.// INSTRUCTIONS: Use only the following behaviors {'detect_intruders': 'Action: Use sensors to detect any intruders in the area. Always returns True.', 'defend_area': 'Action: Take defensive actions to protect the area from unauthorized individuals. Always returns True.', 'start_patrol': 'Action: Begin a patrol of the area to ensure security. Always returns True.', 'return_to_base': 'Action: Return to the designated base if an intruder is detected. Always returns True.', 'check_base_security': 'Condition: Check if the base is secure. Returns True if secure, False otherwise.', 'check_intruder_detected': 'Condition: Check if an intruder has been detected. Returns True if an intruder is detected, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Create behavior tree for a security robot to monitor and defend a designated area.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Selector><Condition>check_base_security</Condition><Action>start_patrol</Action></Selector><Selector><Condition>check_intruder_detected</Condition><Action>detect_intruders</Action><Action>defend_area</Action><Action>return_to_base</Action></Selector></Sequence></Selector></BehaviorTree> 
###
4.// INSTRUCTIONS: Use only the following behaviors {'search_area': 'Subtree node: Search the designated area for a specific target.', 'detect_enemy': 'Condition: Checks if an enemy is detected in the area specified. Returns True if an enemy is found, False otherwise.', 'approach_enemy': 'Action: Approach the detected enemy. Always returns True.', 'attack_enemy': 'Action: Attack the enemy. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Search for enemies in the designated area. If an enemy is found, approach and attack them.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>search_area</Action><Condition>detect_enemy</Condition><Sequence><Action>approach_enemy</Action><Action>attack_enemy</Action></Sequence></Sequence><HTML><p>&nbsp;</p><p><strong>A big forest block bl</strong></p></HTML></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'collect_resource': 'Subtree node: Represents a behavior tree for collecting a specific resource.', 'recharge': 'Action: Makes the agent recharge its energy. Always returns True.', 'is_battery_low': 'Condition: Checks if battery is below a specific threshold. Returns True if battery is low, False otherwise.', 'wait': 'Action: Makes the agent wait for a certain amount of time. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Collect resources. If battery is low, recharge, then continue collecting resources.
5.// OUTPUT:
<BehaviorTree><Selector><Action>collect_resource</Action><Sequence><Condition>is_battery_low</Condition><Action>recharge</Action><Action>collect_resource</Action></Sequence></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'form_group': 'Action: Makes the agent join a designated group of robots. Always returns True.', 'avoid_collision': 'Condition: Checks if there is an obstacle in the path of the robot. Returns True if an obstacle is detected, False otherwise.', 'move_to_destination': 'Action: Moves the robot to a specific destination. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Form a group with designated robots and move to a specific destination, avoiding collisions along the way.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>form_group</Action><Condition>avoid_collision</Condition><Action>move_to_destination</Action></Sequence></Selector></BehaviorTree><BehaviorTree><Sequence><Condition>is_patrol_complete</Condition><Selector><!--start loop--><Sequence><Action>move_to_next_waypoint</Action><Action>scan_all_areas</Action><Selector><Sequence><Action>report_intruder</Action><Action>wait</Action></Sequence></Selector></Sequence><Selector><!--end loop--><Action>report_all_clear</Action></Selector></Sequence></BehaviorTree>

###
4.// INSTRUCTIONS: Use only the following behaviors {'scan_for_damages': 'Action: Use sensors to scan for any damages to the building. Always returns True.', 'repair_damage': 'Action: Repair any damages found using the necessary tools. Always returns True.', 'move_to_next_floor': 'Action: Move to the next floor of the building. Always returns True.', 'check_floor_for_damages': 'Action: Check the current floor for any damages before performing repairs. Always returns True.', 'is_building_survivable': 'Condition: Check if the building is still livable after all repairs are completed. Returns True if the building is still livable, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Generate behavior tree for a robot to inspect and repair damages in an apartment building.
4.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_building_survivable</Condition><Selector><Sequence><Action>move_to_next_floor</Action><Action>scan_for_damages</Action><Selector><Sequence><Action>check_floor_for_damages</Action><Action>repair_damage</Action></Sequence></Selector></Sequence></Selector></Sequence></BehaviorTree>
<BehaviorTree><Sequence><Condition>is_building_survivable</Condition><Selector><!--start loop--><Sequence><Action>move_to_next_floor</Action><Selector><!--start loop--><Action>scan_for_damages</Action><Selector><Sequence><Action>check_floor_for_damages</Action><Action>repair_damage</Action></Sequence></Selector><!--end loop--></Sequence><Selector><!--end loop--><Action>report_all_clear</Action></Selector></Sequence></Selector></Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'start_engine': 'Action: Turn on the engine of the vehicle. Always returns True.', 'drive_forward': 'Action: Drive the vehicle forward at a constant speed. Always returns True.', 'turn_left': 'Action: Turn the vehicle 90 degrees to the left. Always returns True.', 'turn_right': 'Action: Turn the vehicle 90 degrees to the right. Always returns True.', 'slow_down': 'Action: Slow down the speed of the vehicle. Always returns True.', 'stop_engine': 'Action: Turn off the engine of the vehicle. Always returns True.', 'is_obstacle_ahead': 'Condition: Check if there is an obstacle in front of the vehicle. Returns True if an obstacle is detected, False otherwise.', 'is_intersecting_path': 'Condition: Check if the current path intersects with other vehicles. Returns True if an intersection is detected, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Generate behavior tree for a self-driving car to navigate through traffic and safely reach its destination.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><!--start loop--><Selector><Sequence><!--check for obstacles--><Condition>is_obstacle_ahead</Condition><Action>slow_down</Action></Sequence><Sequence><!--check for intersections--><Condition>is_intersecting_path</Condition><Selector><Action>turn_left</Action><Action>turn_right</Action></Selector></Sequence></Selector><Action>drive_forward</Action></Sequence><Selector><!--end loop--><Sequence><Condition>is_destination_reached</Condition><Action>stop_engine</Action></Sequence></Selector></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'start_engine': 'Action: Turn on the engine of the plane. Always returns True.', 'take_off': 'Action: Use the runway to take off. Always returns True.', 'increase_altitude': 'Action: Increase the altitude of the plane to reach a specified height. Always returns True.', 'fly_to_destination': 'Action: Fly to the specified destination using the best route. Always returns True.', 'detect_weather_conditions': 'Action: Use sensors to detect weather conditions throughout the flight. Always returns True.', 'avoid_bad_weather': 'Action: Take appropriate action to avoid flying into bad weather. Always returns True.', 'land': 'Action: Land the plane at the designated airport. Always returns True.', 'is_destination_reached': 'Condition: Check if the plane has reached its final destination. Returns True if the destination is reached, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Generate behavior tree for a commercial airline to fly from one city to another while avoiding any potential bad weather.
6.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_destination_reached</Condition><Action>land</Action></Sequence><Sequence><Action>start_engine</Action><Action>take_off</Action><Selector><Sequence><Action>increase_altitude</Action><Action>fly_to_destination</Action></Sequence><Sequence><Action>detect_weather_conditions</Action><Action>avoid_bad_weather</Action></Sequence></Selector></Sequence></BehaviorTree> 
###
4.// INSTRUCTIONS: Use only the following behaviors {'detect_enemy_base': 'Condition: Check if the enemy base is within range. Returns True if enemy base is within range, False otherwise.', 'detect_enemy_unit': 'Condition: Check if an enemy unit is within range. Returns True if an enemy unit is detected, False otherwise.', 'attack_enemy_unit': 'Action: Attack the specified enemy unit. Returns True when the attack is successful.', 'move_to_base': 'Action: Move towards the base. Returns True when successfully reached the base.', 'destroy_enemy_base': 'Action: Destroy enemy base. Returns True when the base is destroyed.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Guard the base by detecting and attacking any nearby enemy units. If the enemy base is within range, prioritize destroying the base.
4.// OUTPUT:
<BehaviorTree><Selector><Selector><Sequence><Condition>detect_enemy_unit</Condition><Action>attack_enemy_unit</Action></Sequence></Selector></Selector><Selector><Sequence><Condition>detect_enemy_base</Condition><Action>destroy_enemy_base</Action></Sequence><Sequence><Action>move_to_base</Action></Sequence></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'collect_food': 'Action: Collect food from the environment. Returns True when food is collected.', 'is_food_available': 'Condition: Check if food is available nearby. Returns True if food is available, False otherwise.', 'store_food': 'Action: Store collected food in the storage unit. Returns True when the food is successfully stored.', 'is_storage_full': 'Condition: Check if the storage unit is full. Returns True if the storage unit is full, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Forage for food and store it in the storage unit. If the storage unit is full, return to the swarm.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>collect_food</Action><Selector><Sequence><Condition>is_food_available</Condition><Action>store_food</Action></Sequence></Selector></Sequence><Sequence><Condition>is_storage_full</Condition><Action>return_to_swarm</Action></Sequence></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'detect_mine': 'Condition: Check if a mine is within range. Returns True if a mine is detected, False otherwise.', 'defuse_mine': 'Action: Defuse the specified mine. Returns True when the mine is defused.', 'move_to_mine': 'Action: Move towards the specified mine. Returns True when successfully reached the mine.', 'plant_mine': 'Action: Plant a mine in the specified location. Returns True when the mine is successfully planted.', 'detect_enemy_unit': 'Condition: Check if an enemy unit is within range. Returns True if an enemy unit is detected, False otherwise.', 'attack_enemy_unit': 'Action: Attack the specified enemy unit. Returns True when the attack is successful.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Lay mines as a defensive measure while being alert for nearby enemy units. If an enemy unit is detected, prioritize attacking the unit.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>detect_mine</Condition><Action>defuse_mine</Action></Sequence><Sequence><Action>move_to_mine</Action><Action>plant_mine</Action></Sequence></Selector><Selector><Sequence><Condition>detect_enemy_unit</Condition><Action>attack_enemy_unit</Action></Sequence></Selector></BehaviorTree>     
###
4.// INSTRUCTIONS: Use only the following behaviors {'start_cooking': 'Action: Start cooking with the given ingredients. Always returns True.', 'cut_ingredients': 'Action: Cut and prepare the ingredients. Always returns True.', 'boil_pasta': 'Action: Boil the pasta for specified time. Always returns True.', 'combine_contents': 'Action: Combine all ingredients together. Always returns True.', 'is_pasta_done': 'Condition: Check if the pasta is cooked and ready. Returns True if pasta is done, False otherwise.', 'are_ingredients_ready': 'Condition: Check if all ingredients are prepared and ready. Returns True if all ingredients are ready, False otherwise.', 'is_meal_prepared': 'Condition: Check if the meal is fully prepared and ready to serve. Returns True if meal is prepared, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: If ingredients are ready, start cooking. Otherwise, cut and prepare the ingredients, boil the pasta, and combine all contents together.
4.// OUTPUT:
<BehaviorTree> <Selector><Sequence> <Condition>are_ingredients_ready</Condition> <Action>start_cooking</Action> </Sequence> <Sequence> <Action>cut_ingredients</Action> <Action>boil_pasta</Action> <Action>combine_contents</Action> </Sequence> </Selector> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'search_for_target': 'Action: Search for the target within the designated search area. Progress through each position and return true once the target is found. Returns False if target is not found.', 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_yellow': "Action: Change agent's color to yellow. Always returns True.", 'is_target_reached': 'Condition: Check if the target is reached. Returns True if the target is within reach, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Search for an object within the designated area and change color to yellow when found.
5.// OUTPUT:
<BehaviorTree><Sequence><Action>search_for_target</Action><Selector><Sequence><Condition>is_target_detected</Condition><Action>change_color_to_yellow</Action><Action>agent_movement_freeze</Action><Action>task_completed</Action></Sequence><Sequence><Condition>is_obstacle_detected</Condition><Action>avoid_obstacle</Action><Action>continue_movement_agent</Action></Sequence></Selector></Sequence></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'read_instructions': 'Action: Read instructions and follow steps. Always returns True.', 'perform_action': 'Action: Perform the specified action. Always returns True.', 'is_step_completed': 'Condition: Check if the current step is completed. Returns True if step is completed, False otherwise.', 'is_all_steps_completed': 'Condition: Check if all steps are completed. Returns True if all steps are completed, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Read instructions and perform each step until the task is completed.
6.// OUTPUT:
<BehaviorTree><Sequence><Action>read_instructions</Action><Selector><Sequence><Condition>is_step_completed</Condition><Action>perform_action</Action></Sequence><Condition>is_all_steps_completed</Condition></Selector></Sequence></BehaviorTree> 
###
4.// INSTRUCTIONS: Use only the following behaviors {'move_to_build_site': 'Action: Move the robot to the designated build site. Always returns True.', 'gather_resource': 'Action: Use the robot's tools to gather resources at the build site. Always returns True.', 'build_structure': 'Action: Use gathered resources to build a structure at the designated build site. Always returns True.', 'is_resource_available': 'Condition: Check if there are resources available at the build site. Returns True if resources are available, False otherwise.', 'is_build_complete': 'Condition: Check if the structure has been fully built. Returns True if the structure is complete, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Generate behavior tree for a robot to gather resources and build a structure at a designated site.
4.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_resource_available</Condition><Selector><Sequence><Action>move_to_build_site</Action><Action>gather_resource</Action><Selector><Action>build_structure</Action><Action>wait</Action></Selector></Sequence></Selector></Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'move_to_target': 'Action: Move the robot to the target location. Always returns True.', 'pick_up_item': 'Action: Use the robot's arm to pick up the item at the target location. Always returns True.', 'place_item': 'Action: Use the robot's arm to place the item at a designated location. Always returns True.', 'is_item_available': 'Condition: Check if there is an item at the target location. Returns True if an item is present, False otherwise.', 'is_item_placed': 'Condition: Check if the item has been successfully placed. Returns True if the item is placed, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Generate behavior tree for a robot to pick up an item and place it at a designated location.
5.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_item_available</Condition><Selector><Sequence><Action>move_to_target</Action><Action>pick_up_item</Action><Selector><Action>place_item</Action><Action>wait</Action></Selector></Sequence></Selector></Sequence></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'trust_target': 'Action: Trust the target and follow their instructions. Always returns True.', 'distrust_target': 'Action: Distrust the target and ignore their instructions. Always returns True.', 'follow_instructions': 'Action: Follow the instructions given by the target. Always returns True.', 'ignore_instructions': 'Action: Ignore the instructions given by the target. Always returns True.', 'is_target_trusted': 'Condition: Check if the robot trusts the target. Returns True if the target is trusted, False otherwise.', 'is_task_completed': 'Condition: Check if the task given by the target is completed. Returns True if the task is completed, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Generate behavior tree for a robot to trust or distrust a target, and follow or ignore their instructions.
6.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_target_trusted</Condition><Selector><Sequence><Selector><Action>trust_target</Action><Action>follow_instructions</Action></Selector><Selector><Action>distrust_target</Action><Action>ignore_instructions</Action></Selector><Condition>is_task_completed</Condition></Sequence></Selector></Sequence></BehaviorTree>  
###
4.// INSTRUCTIONS: Use only the following behaviors {'detect_person': 'Action: Scan the environment to detect the nearest person. Returns True if a person is detected, False otherwise.', 'go_to_person': 'Action: Move towards the detected person and stop within 1 meter. Returns True once the person is reached.', 'wait_for_person': 'Action: Stop and wait until the detected person moves away. Always returns True.', 'take_photo': 'Action: Take a photo of the person once within 1 meter. Returns True once the photo is taken.', 'detect_obstacle': 'Action: Scan the environment for obstacles. Returns True if an obstacle is detected, False otherwise.', 'avoid_obstacle': "Action: Move around the obstacle while maintaining a safe distance. Returns True once the obstacle is avoided.", 'is_photo_taken': 'Condition: Check if a photo of the person has been taken. Returns True if a photo has been taken, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say 
('Sorry, I can't do the task')
4.// USER COMMAND: Generate behavior tree for a robot to approach a person, take a photo, and avoid obstacles in a crowded space.
4.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>detect_person</Condition> <Action>go_to_person</Action> <Condition>is_photo_taken</Condition> <Action>take_photo</Action> </Sequence> <Sequence> <Condition>detect_obstacle</Condition> <Action>avoid_obstacle</Action> <Action>wait_for_person</Action> </Sequence> <Action>wait_for_person</Action> </Selector> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'detect_uniform': 'Action: Look for the nearest robot wearing a specific uniform color. Returns True if a robot is detected, False otherwise.', 'go_to_uniform': 'Action: Move towards the detected robot with the specified uniform color. Returns True once the robot is reached.', 'wait_for_uniform': 'Action: Stop and wait until the detected robot moves away. Always returns True.', 'scan_surroundings': 'Action: Scan the environment for robots with different uniform colors. Returns True if a robot with a different uniform color is detected, False otherwise.', 'navigate_maze': 'Action: Use algorithms to navigate through a maze. Returns True once the maze is completed.', 'check_battery_level': 'Condition: Check the remaining battery level. Returns True if the battery level is above 20%, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say 
('Sorry, I can't do the task')
5.// USER COMMAND: Generate behavior tree for a swarm of robots to complete a maze together while making sure all robots have enough battery life.
5.// OUTPUT:
<BehaviorTree><Sequence><Condition>check_battery_level</Condition><Selector><Sequence><Condition>detect_uniform</Condition><Action>go_to_uniform</Action></Sequence><Sequence><Condition>scan_surroundings</Condition><Action>navigate_maze</Action></Sequence></Selector></Sequence></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'detect_light': 'Action: Scan the environment for sources of light. Returns True if a light source is detected, False otherwise.', 'go_to_light': 'Action: Move towards the detected light source and stop within a safe distance. Returns True once the light source is reached.', 'check_color': 'Condition: Check the color of the detected light source. Returns True if the color is red, False otherwise.', 'detect_obstacle': 'Action: Scan the environment for obstacles. Returns True if an obstacle is detected, False otherwise.', 'avoid_obstacle': "Action: Move around the obstacle while maintaining a safe distance. Returns True once the obstacle is avoided.", 'is_safe_distance': 'Condition: Check if the robot is within a safe distance from the light source. Returns True if the robot is within 3 meters, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say 
('Sorry, I can't do the task')
6.// USER COMMAND: Generate behavior tree for a robot to approach a red light source while avoiding obstacles and maintaining a safe distance.
6.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>detect_light</Condition> <Action>go_to_light</Action> <Condition>check_color</Condition> </Sequence> <Sequence> <Condition>detect_obstacle</Condition> <Action>avoid_obstacle</Action> <Condition>is_safe_distance</Condition></Sequence> <Action>wait_for_person</Action> </Selector> <Action>wait_for_person</Action> </Sequence> </BehaviorTree>
###
4.// INSTRUCTIONS: Use only the following behaviors {'navigate_to_target': 'Action: Navigate to the designated target location. Returns True once the target has been reached.', 'patrol_around_target': 'Action: Patrol around the designated target location. Always returns True.', 'calculate_target_distance': 'Function: Calculates the distance to the target location. Returns a numerical value.', 'check_for_enemies': 'Condition: Check for enemies in the surrounding area. Returns True if enemies are present, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Create a behavior tree for a security robot to patrol and protect a designated target location while checking for any potential enemies in the vicinity.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>check_for_enemies</Condition><Action>engage_enemies</Action></Sequence><Selector><Sequence><Action>calculate_target_distance</Action><Condition>target_reached</Condition><Action>patrol_around_target</Action></Sequence><Action>navigate_to_target</Action></Selector></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'gather_resources': 'Action: Gather resources from nearby sources. Always returns True.', 'store_resources': 'Action: Store gathered resources in designated storage location. Always returns True.', 'check_resource_capacity': 'Function: Check if resource storage is at full capacity. Returns True if storage is full, False otherwise.', 'is_enemy_present': 'Condition: Check for enemies in the surrounding area. Returns True if enemies are present, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Create a behavior tree for a resource-gathering robot to collect and store resources while also being aware of any enemy threats.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_enemy_present</Condition><Action>defend_against_enemies</Action></Sequence><Selector><Sequence><Action>gather_resources</Action><Function>check_resource_capacity</Function><Selector><Sequence><Condition>storage_full</Condition><Action>empty_resources_to_storage</Action></Sequence><Action>store_resources</Action></Selector></Sequence></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'plant_seeds': 'Action: Plant seeds in designated locations. Always returns True.', 'water_plants': 'Action: Water plants to ensure proper growth. Always returns True.', 'check_plant_health': 'Function: Check the health of the planted seeds. Returns a numerical value.', 'harvest_plants': 'Condition: Check if the plants are ready to be harvested. Returns True if the plants are ready, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Generate a behavior tree for a farming robot to plant, water, and harvest crops while also monitoring the health of the plants.
6.// OUTPUT:
<BehaviorTree><Sequence><Function>check_plant_health</Function><Selector><Sequence><Condition>plants_healthy</Condition><Action>plant_seeds</Action></Sequence><Action>water_plants</Action></Selector></Sequence><Condition>harvest_plants</Condition><Action>harvest_crops</Action><Action>clean_up_planting_area</Action></BehaviorTree> 
###
4.// INSTRUCTIONS: Use only the following behaviors {'detect_enemy': 'Condition: Check for nearby enemy robots. Returns True if enemies are detected, False otherwise.', 'detect_food': 'Condition: Check for nearby food sources. Returns True if food sources are detected, False otherwise.', 'go_to_random_location': 'Action: Move to a random location within the environment. Always returns True.', 'move_to_food_source': 'Action: Move to the nearest food source. Always returns True.', 'move_to_nest': 'Action: Move to the nest. Always returns True.', 'navigate_to_enemy': 'Action: Move towards the nearest enemy. Always returns True.', 'pick_up_food': 'Action: Pick up food from the current location. Always returns True.', 'return_to_nest': 'Action: Return to the nest. Always returns True.', 'search_for_food': 'Action: Search for food by moving in a spiral pattern. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Gather food from nearby sources, then return to the nest and drop off the food.'
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Selector><Condition>detect_food</Condition><Sequence><Condition>is_agent_in_nest</Condition><Action>return_to_nest</Action></Sequence></Selector><Sequence><Selector><Condition>detect_food</Condition><Action>move_to_food_source</Action><Action>pick_up_food</Action></Selector><Sequence><Condition>detect_enemy</Condition><Action>navigate_to_enemy</Action></Sequence><Selector><Condition>go_to_random_location</Condition><Selector><Condition>detect_enemy</Condition><Action>navigate_to_enemy</Action></Selector><Selector><Condition>detect_food</Condition><Action>move_to_food_source</Action></Selector><Sequence><Action>search_for_food</Action><Action>go_to_random_location</Action></Sequence></Selector></Sequence></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'attack': 'Action: Attack the designated target. Always returns True.', 'calculate_distance_to_target': 'Condition: Calculate the distance to the designated target. Returns True if the distance is greater than 10 units, False otherwise.', 'calculate_enemy_strength': 'Condition: Calculate the strength of the nearest enemy. Returns True if the enemy strength is greater than the agent strength, False otherwise.', 'find_nearest_enemy': 'Action: Find the nearest enemy and move towards them. Always returns True.', 'form_triangle_formation': 'Action: Form a triangle formation with two other agents. Always returns True.', 'heal': 'Action: Heal a nearby injured agent. Always returns True.', 'is_agent_injured': 'Condition: Check if the agent is injured. Returns True if the agent is injured, False otherwise.', 'is_enemy_nearby': 'Condition: Check if an enemy is within 10 units. Returns True if an enemy is within 10 units of distance, False otherwise.', 'reposition': 'Action: Reposition in the formation based on the agent ID. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Attack the designated target while maintaining a triangle formation with 2 other agents. If injured, heal an injured agent within 5 units.'
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_enemy_nearby</Condition><Action>attack</Action><Action>form_triangle_formation</Action><Sequence><Condition>is_agent_injured</Condition><Action>heal</Action></Sequence></Sequence><Selector><Condition>calculate_distance_to_target</Condition><Action>find_nearest_enemy</Action><Action>reposition</Action></Selector></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'change_speed': 'Action: Change the robot's speed based on the environment. Always returns True.', 'collect_items': 'Action: Collect any useful items found in the environment. Always returns True.', 'detect_landmark': 'Condition: Check for nearby landmarks. Returns True if a landmark is detected, False otherwise.', 'enter_cave': 'Action: Enter the nearest cave entrance. Always returns True.', 'exit_cave': 'Action: Exit the current cave. Always returns True.', 'find_cave_entrance': 'Action: Find the nearest cave entrance and move towards it. Always returns True.', 'go_to_landmark': 'Action: Move towards the nearest landmark. Always returns True.', 'navigate_to_exit': 'Action: Navigate towards the exit of the current cave. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Collect any useful items while navigating through a cave system, and once out of the cave, change speed based on the environment.'
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>detect_landmark</Condition><Sequence><Condition>is_agent_in_nest</Condition><Action>exit_cave</Action></Sequence></Sequence><Selector><Condition>detect_landmark</Condition><Action>go_to_landmark</Action><Action>collect_items</Action></Selector><Sequence><Action>find_cave_entrance</Action><Action>enter_cave</Action><Selector><Sequence><Condition>is_agent_in_nest</Condition><Action>exit_cave</Action></Sequence><Sequence><Condition>detect_landmark</Condition><Action>navigate_to_exit</Action></Sequence></Selector></Sequence><Action>change_speed</Action></Selector></BehaviorTree>
###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_red': "Action: Change agent's color to red. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Navigate to a specific location by avoiding obstacles and form a line at the destination'Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>is_obstacle_detected</Condition> <Action>avoid_obstacle</Action> <Action>continue_movement_agent</Action> </Sequence> <Sequence> <Condition>is_agent_in_nest</Condition> <Action>form_line</Action> </Sequence> </Selector> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_red': "Action: Change agent's color to red. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'detect_sound': 'Condition: Check for any sound detected. Returns True if a sound is detected, False otherwise.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_agent_in_group': 'Condition: Check if the agent is in a group of 5 or more agents. Returns True if the agent is in a group of 5 or more agents, False otherwise.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'move_towards_sound_source': "Action: Move towards the detected sound's source. Always returns True.", 'form_circle': 'Action: Form a circle with other agents. Always returns True.', 'stop_movement': 'Action: Stop agent's movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Gather in a circle when a sound is detected and stop movement if there are already 5 or more agents in the group'Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>is_agent_in_group</Condition> <Action>stop_movement</Action> </Sequence> <Sequence> <Condition>detect_sound</Condition> <Sequence> <Action>move_towards_sound_source</Action> <Action>form_circle</Action> </Sequence> <Action>wander</Action> </Selector> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_injured': 'Condition: Check if the agent is injured. Returns True if the agent is injured, False otherwise.', 'is_medical_kit_detected': 'Condition: Check if a medical kit is detected within 10 units. Returns True if a medical kit is within 10 units of distance, False otherwise.', 'pick_up_medical_kit': "Action: Pick up the detected medical kit. Always returns True.", 'return_to_nest': 'Action: Move back to the nest. Always returns True.', 'search_for_medical_kit': 'Action: Move randomly within the environment to search for a medical kit. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'If an agent is injured, search for a nearby medical kit and return it to the nest' Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree> <Sequence> <Condition>is_injured</Condition> <Sequence> <Condition>is_medical_kit_detected</Condition> <Action>pick_up_medical_kit</Action> <Sequence> <Condition>is_agent_in_nest</Condition> <Action>change_color_to_white</Action> <Action>agent_movement_freeze</Action> </Sequence> <Action>return_to_nest</Action> </Sequence> <Action>search_for_medical_kit</Action> </Sequence> </BehaviorTree>
###
4.// INSTRUCTIONS: Use only the following behaviors {'collect_resource': 'Action: Collect resource at current location. Returns True if resource is collected successfully, False otherwise.', 'deposit_resource': 'Action: Deposit collected resource into designated location. Returns True if resource is deposited successfully, False otherwise.', 'is_resource_available': 'Condition: Check if resource is available at current location. Returns True if resource is present, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Collect resources until the storage is full, then deposit them.
4.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_resource_available</Condition><Action>collect_resource</Action><Action>continue_movement_agent</Action></Sequence><Sequence><Action>deposit_resource</Action><Action>task_completed</Action></Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'start_task': 'Action: Signal start of task. Returns True if task is successfully started, False otherwise.', 'complete_task': 'Action: Signal task completion. Returns True if task is completed successfully, False otherwise.', 'check_location': 'Condition: Check if agent has reached specified location. Returns True if location is reached, False otherwise.', 'travel_to_location': 'Action: Travel to specified location. Returns True if agent successfully reaches location, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Travel to different locations in a specific order and signal completion after each location is reached.
5.// OUTPUT:
<BehaviorTree><Sequence><Action>start_task</Action><Selector><Sequence><Action>travel_to_location</Action><Condition>check_location</Condition></Sequence><Action>complete_task</Action></Selector></Sequence></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'is_cargo_at_target': 'Condition: Check if cargo is at specified target location. Returns True if cargo is at target location, False otherwise.', 'pick_up_cargo': 'Action: Pick up cargo at current location. Returns True if cargo is successfully picked up, False otherwise.', 'deliver_cargo': 'Action: Deliver cargo to designated location. Returns True if cargo is successfully delivered, False otherwise.', 'navigate_to_target': 'Action: Navigate agent to specified target location. Returns True if agent successfully reaches target location, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Pick up cargo at current location, navigate to target location, and deliver cargo.
6.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_cargo_at_target</Condition><Action>pick_up_cargo</Action><Action>navigate_to_target</Action><Action>deliver_cargo</Action><Action>task_completed</Action></Sequence></BehaviorTree>				 
###
4.// INSTRUCTIONS: Use only the following behaviors {'detect_gas': 'Action: Sense and detect presence of harmful gas in the environment. Always returns True.', 'navigate_to_destination': 'Action: Use path-planning algorithm to navigate to the designated destination. Always returns True.', 'avoid_gas': 'Action: Change direction to avoid the harmful gas clouds. Always returns True.', 'collect_sample': 'Action: Collect a sample of the gas for analysis. Always returns True.', 'analyze_sample': 'Action: Analyze the collected sample for gas composition and levels. Always returns True.', 'is_gas_detected': 'Condition: Check if harmful gas is detected in the environment. Returns True if gas is detected, False otherwise.', 'is_destination_reached': 'Condition: Check if the robot has reached the designated destination. Returns True if the destination is reached, False otherwise.', 'is_sample_collected': 'Condition: Check if a sample of gas has been successfully collected. Returns True if a sample is collected, False otherwise.', 'is_analysis_complete': 'Condition: Check if the gas sample has been fully analyzed. Returns True if analysis is complete, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Construct a behavior tree to guide a swarm of robots on a mission to detect and analyze harmful gas in a specific location, while avoiding the gas clouds and reaching the destination.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_gas_detected</Condition><Action>avoid_gas</Action></Sequence><Sequence><Condition>is_destination_reached</Condition><Action>analyze_sample</Action></Sequence><Selector><Sequence><Condition>is_gas_detected</Condition><Action>collect_sample</Action></Sequence><Action>navigate_to_destination</Action></Selector></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'detect_intruders': 'Action: Use sensors to detect any intruders in the environment. Always returns True.', 'launch_countermeasures': 'Action: Deploy countermeasures to stop or disable the intruders. Always returns True.', 'surround_intruders': 'Action: Surround and trap the intruders by forming a circle around them. Always returns True.', 'observe_behavior': 'Action: Observe the behavior of the intruders to gather information. Always returns True.', 'call_for_reinforcements': 'Action: Send a distress signal to call for reinforcements. Always returns True.', 'is_intruder_detected': 'Condition: Check if an intruder is detected in the environment. Returns True if an intruder is detected, False otherwise.', 'is_intruder_trapped': 'Condition: Check if the intruders have been successfully trapped. Returns True if intruders are trapped, False otherwise.', 'is_behavior_observed': 'Condition: Check if the behavior of the intruders has been observed. Returns True if behavior is observed, False otherwise.', 'is_reinforcements_arrived': 'Condition: Check if reinforcements have arrived to assist with the intruders. Returns True if reinforcements have arrived, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Create a behavior tree for swarm robots to defend an area from potential intruders, while gathering information and calling for reinforcements.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_intruder_detected</Condition><Action>observe_behavior</Action><Selector><Sequence><Condition>is_intruder_trapped</Condition><Action>surround_intruders</Action></Sequence><Action>launch_countermeasures</Action></Selector></Sequence><Selector><Sequence><Condition>is_behavior_observed</Condition><Action>call_for_reinforcements</Action></Sequence><Action>detect_intruders</Action></Selector></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'detect_leaks': 'Action: Search for and detect any potential leaks in the system. Always returns True.', 'fix_leak': 'Action: Use tools to fix and seal any detected leaks. Always returns True.', 'monitor_pressure': 'Action: Continuously monitor and maintain the pressure in the system. Always returns True.', 'is_leak_detected': 'Condition: Check if a leak has been detected. Returns True if a leak is detected, False otherwise.', 'is_pressure_under_control': 'Condition: Check if the pressure in the system is within acceptable levels. Returns True if pressure is under control, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Generate a behavior tree for swarm robots to inspect and maintain the pressure and integrity of a complex system, while also fixing any potential leaks.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_leak_detected</Condition><Action>fix_leak</Action></Sequence><Sequence><Condition>is_pressure_under_control</Condition><Action>monitor_pressure</Action></Sequence><Action>detect_leaks</Action></Selector></BehaviorTree> 
###
4.// INSTRUCTIONS: Use only the following behaviors {'rotate_left': 'Action: Rotate the robot to the left. Always returns True.', 'rotate_right': 'Action: Rotate the robot to the right. Always returns True.', 'move_backward': 'Action: Move the robot one step backward in the current direction. Always returns True.', 'pick_up_object': 'Action: Pick up the nearest object using a robotic arm. Always returns True.', 'drop_object': 'Action: Drop the currently held object. Always returns True.', 'is_object_held': 'Condition: Check if the robot is currently holding an object. Returns True if an object is held, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Generate behavior tree for a robot to navigate through a maze and pick up an object at the end
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_object_held</Condition><Action>drop_object</Action></Sequence><Sequence><Selector><Condition>is_object_held</Condition><Sequence><Action>rotate_left</Action><Action>move_backward</Action></Sequence></Selector><Sequence><Condition>is_object_held</Condition><Sequence><Action>rotate_right</Action><Action>pick_up_object</Action></Sequence></Selector></Sequence></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'go_to_ship': 'Action: Move the robot to the designated ship for pickup. Always returns True.', 'communicate_with_ship': 'Action: Establish communication with the designated ship for pickup. Always returns True.', 'pick_up_cargo': 'Action: Use robotic arm to pick up the cargo from the designated ship. Always returns True.', 'store_cargo': 'Action: Store the picked up cargo in the designated storage area. Always returns True.', 'deliver_cargo': 'Action: Deliver the stored cargo to its destination. Always returns True.', 'is_ship_communicated': 'Condition: Check if communication with the designated ship has been established. Returns True if communication is established, False otherwise.', 'is_cargo_picked_up': 'Condition: Check if the designated cargo has been successfully picked up. Returns True if cargo is picked up, False otherwise.', 'is_cargo_stored': 'Condition: Check if the picked up cargo has been successfully stored. Returns True if cargo is stored, False otherwise.', 'is_cargo_delivered': 'Condition: Check if the cargo has been successfully delivered. Returns True if cargo is delivered, False otherwise.', 'is_waiting_area_reached': 'Condition: Check if the robot has reached the designated waiting area. Returns True if the waiting area is reached, False otherwise.', 'wait_for_permission': 'Action: Wait for permission from designated authority to proceed. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Generate behavior tree for a robot to pick up cargo from a designated ship, store it, and deliver it to its destination
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_waiting_area_reached</Condition><Action>wait_for_permission</Action></Sequence><Sequence><Selector><Condition>is_ship_communicated</Condition><Action>go_to_ship</Action><Action>communicate_with_ship</Action></Sequence><Selector><Condition>is_cargo_picked_up</Condition><Sequence><Action>pick_up_cargo</Action><Selector><Condition>is_waiting_area_reached</Condition><Action>wait_for_permission</Action></Selector></Sequence></Selector><Sequence><Condition>is_cargo_stored</Condition><Action>store_cargo</Action><Selector><Condition>is_waiting_area_reached</Condition><Action>wait_for_permission</Action></Selector></Sequence></Selector><Sequence><Condition>is_cargo_delivered</Condition><Action>deliver_cargo</Action><Selector><Condition>is_waiting_area_reached</Condition><Action>wait_for_permission</Action></Selector></Sequence></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'move_to_target': 'Action: Move the robot to the designated target location. Always returns True.', 'collect_resource': 'Action: Use robotic arm to collect the available resources at the target location. Always returns True.', 'store_resource': 'Action: Store the collected resources at the designated storage. Always returns True.', 'use_resource': 'Action: Use the stored resources for a specific task. Always returns True.', 'is_resource_available': 'Condition: Check if resources are available at the target location. Returns True if resources are available, False otherwise.', 'is_resource_stored': 'Condition: Check if resources have been successfully stored. Returns True if resources are stored, False otherwise.', 'is_resource_used': 'Condition: Check if resources have been successfully used. Returns True if resources are used, False otherwise.', 'is_target_reached': 'Condition: Check if the robot has successfully reached the designated target location. Returns True if the target location is reached, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Generate behavior tree for a robot to collect and use resources at a designated location
6.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_target_reached</Condition><Selector><Sequence><Selector><Condition>is_resource_available</Condition><Action>move_to_target</Action><Action>collect_resource</Action></Selector><Selector><Condition>is_resource_stored</Condition><Action>store_resource</Action><Selector><Condition>is_target_reached</Condition><Action>move_to_target</Action></Selector></Selector><Selector><Condition>is_resource_used</Condition><Action>use_resource</Action></Selector></Sequence></Selector></Sequence></BehaviorTree>
###
4.// INSTRUCTIONS: Use only the following behaviors {'move_forward': 'Action: Move the agent forward. Always returns True.', 'turn_left': 'Action: Turn the agent left. Always returns True.', 'turn_right': 'Action: Turn the agent to the right. Always returns True.', 'check_surroundings': 'Action: Check for surrounding obstacles and update directions accordingly. Always returns True.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_white_spot_detected': 'Condition: Check if there is a white spot within 10 units. Returns True if a white spot is detected within 10 units, False otherwise.', 'is_black_spot_detected': 'Condition: Check if there is a black spot within 10 units. Returns True if a black spot is detected within 10 units, False otherwise.', 'task_completed': 'Action: Signal task completion by stopping the agent. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Move forward, turn left if black spot is detected and turn right if white spot is detected, then stop at the target.'Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree> <Selector> <Sequence><Action>move_forward</Action> <Condition>is_black_spot_detected</Condition> <Action>turn_left</Action> </Sequence> <Sequence><Action>move_forward</Action> <Condition>is_white_spot_detected</Condition> <Action>turn_right</Action> </Sequence> <Sequence><Action>check_surroundings</Action> <Trigger>is_obstacle_detected</Trigger> <Action>task_completed</Action> </Sequence> </Selector> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'scan_area': 'Subtree node: Scans the area for a specific target.', 'identify_target': 'Action: Identifies the target within the scanned area. Always returns True.', 'approach_target': 'Action: Move towards the target. Always returns True.', 'is_target_detected': 'Condition: Check if the target is within sight. Returns True if the target is within sight, False otherwise.', 'get_target_distance': 'Condition: Get the distance to the target. Returns the distance to the target.', 'is_near_target': 'Condition: Check if the agent is close enough to the target. Returns True if the agent is within 5 units of distance from the target, False otherwise.', 'task_completed': 'Action: Signal task completion by stopping the agent. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Identify the target within sight, approach and stop within 5 units of it.
5.// OUTPUT:
<BehaviorTree> <Sequence> <Action>scan_area</Action> <Condition>is_target_detected</Condition> <Action>identify_target</Action> <Action>approach_target</Action> <Condition>get_target_distance</Condition> <Condition>is_near_target</Condition> <Action>task_completed</Action> </Sequence> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'move_forward': 'Action: Move the agent forward. Always returns True.', 'turn_left': 'Action: Turn the agent left. Always returns True.', 'turn_right': 'Action: Turn the agent to the right. Always returns True.', 'is_left_open': 'Condition: Check if the left side is open. Returns True if there are no obstacles on the left, False otherwise.', 'is_right_open': 'Condition: Check if the right side is open. Returns True if there are no obstacles on the right, False otherwise.', 'is_front_clear': 'Condition: Check if the path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'reach_goal': 'Action: Move towards the goal. Always returns True.', 'is_goal_reached': 'Condition: Check if the goal is reached. Returns True if the agent is within 2 units of distance from the goal, False otherwise.', 'task_completed': 'Action: Signal task completion by stopping the agent. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Move forward until the path is blocked, then turn left if left is clear and turn right if right is clear, then reach the goal and stop.'Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Action>move_forward</Action> <Condition>is_front_clear</Condition> </Sequence> <Sequence> <Condition>is_left_open</Condition> <Action>turn_left</Action> </Sequence> <Sequence> <Condition>is_right_open</Condition> <Action>turn_right</Action> </Sequence> <Sequence> <Action>reach_goal</Action> <Condition>is_goal_reached</Condition> <Action>task_completed</Action> </Sequence> </Selector> </BehaviorTree>
###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_blue': "Action: Change agent's color to blue. Always returns True.", 'change_color_to_red': "Action: Change agent's color to red. Always returns True.", 'explore': 'Action: Move randomly within the environment and avoid obstacles. Always returns True.', 'follow_path': 'Subtree node: Represents a behavior tree for following a predefined path.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_path_found': 'Condition: Check if a viable path has been found. Returns True if a path has been found, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 10 units. Returns True if the target is within 10 units of distance, False otherwise.', 'return_to_nest': 'Subtree node: Represents a behavior tree for returning to the nest.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Follow a set path and change color between blue and red every 3 steps, while avoiding obstacles.Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>is_path_found</Condition> <Selector> <Sequence> <Action>change_color_to_blue</Action> <Action>is_target_reached</Action> <Action>change_color_to_red</Action> </Sequence> <Action>follow_path</Action> </Selector> <Sequence> <Condition>is_agent_in_nest</Condition> <Action>change_color_to_blue</Action> </Sequence> </Sequence> <Selector> <Sequence> <Condition>is_agent_in_nest</Condition> <Action>change_color_to_red</Action> </Sequence> <Action>explore</Action> </Selector> </Sequence> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'catch_target': 'Action: Catch the target if within 5 units. Always returns True.', 'change_color_to_yellow': "Action: Change agent's color to yellow. Always returns True.", 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 10 units. Returns True if the target is within 10 units of distance, False otherwise.', 'patrol': 'Subtree node: Represents a behavior tree for patrolling a specified area and catching targets.', 'return_to_nest': 'Subtree node: Represents a behavior tree for returning to the nest.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Patrol the environment and catch the target if within 5 units, then return to the nest and change color to yellow.Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>is_target_detected</Condition> <Action>catch_target</Action> <Action>return_to_nest</Action> </Sequence> <Selector> <Sequence> <Condition>is_agent_in_nest</Condition> <Action>change_color_to_yellow</Action> </Sequence> <Action>patrol</Action> </Selector> </Sequence> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'gather_resources': 'Subtree node: Represents a behavior tree for gathering resources from the environment.', 'check_inventory': "Action: Continuously checks agent's inventory for available resources. Always returns True.", 'drop_resources': 'Action: Drop all resources currently held by the agent. Always returns True.', 'is_inventory_full': 'Condition: Check if agent's inventory is full. Returns True if inventory is full, False otherwise.', 'is_resource_detected': 'Condition: Check if there are resources in proximity. Returns True if resources are detected, False otherwise.', 'move_to_resource': 'Action: Move towards the nearest resource. Always returns True.', 'return_to_base': 'Subtree node: Represents a behavior tree for returning to the base once resources are gathered.', 'is_agent_in_base': 'Condition: Check if the agent is in the base. Returns True if the agent is in the base, False otherwise.', 'deposit_resources': 'Action: Deposit all resources currently held by the agent into the base. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Gather resources from the environment and return to the base once inventory is full.Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>is_inventory_full</Condition> <Action>drop_resources</Action> <Action>return_to_base</Action> </Sequence> <Selector> <Sequence> <Condition>is_resource_detected</Condition> <Action>move_to_resource</Action> </Sequence> <Action>gather_resources</Action> </Selector> </Sequence> <Selector> <Sequence> <Condition>is_agent_in_base</Condition> <Action>deposit_resources</Action> </Sequence> <Action>check_inventory</Action> </Selector> </BehaviorTree> 
###
4.// INSTRUCTIONS: Use only the following behaviors {'take_picture': 'Action: Take a picture of the environment. Always returns True.', 'evaluate_obstacles': 'Action: Evaluate obstacles in the environment. Returns True if the obstacles are manageable, False if they are not.', 'mark_dangerous_areas': 'Action: Mark dangerous areas in the environment. Always returns True.', 'navigate_to_next_waypoint': 'Action: Navigate to the next waypoint. Returns True if the waypoint is reached, False otherwise.', 'check_battery_level': 'Condition: Check the battery level of the robot. Returns True if the battery level is above 50%, False if it is below 50%.', 'is_obstacle_present': 'Condition: Check if an obstacle is present in front of the robot. Returns True if an obstacle is detected, False otherwise.', 'is_waypoint_reached': 'Condition: Check if the next waypoint is reached. Returns True if the waypoint is reached, False otherwise.', 'find_safe_route': 'Action: Find a safe route to the next waypoint. Returns True if a safe route is found, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Take a picture of the environment, evaluate obstacles, mark dangerous areas, and navigate to the next waypoint.'Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree> <Sequence> <Action>take_picture</Action> <Sequence> <Condition>check_battery_level</Condition> <Action>evaluate_obstacles</Action> </Sequence> <Action>mark_dangerous_areas</Action> <Sequence> <Condition>is_obstacle_present</Condition> <Action>navigate_to_next_waypoint</Action> </Sequence> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'take_picture': 'Action: Take a picture of the environment. Always returns True.', 'evaluate_obstacles': 'Action: Evaluate obstacles in the environment. Returns True if the obstacles are manageable, False if they are not.', 'mark_dangerous_areas': 'Action: Mark dangerous areas in the environment. Always returns True.', 'navigate_to_next_waypoint': 'Action: Navigate to the next waypoint. Returns True if the waypoint is reached, False otherwise.', 'check_battery_level': 'Condition: Check the battery level of the robot. Returns True if the battery level is above 50%, False if it is below 50%.', 'is_obstacle_present': 'Condition: Check if an obstacle is present in front of the robot. Returns True if an obstacle is detected, False otherwise.', 'is_waypoint_reached': 'Condition: Check if the next waypoint is reached. Returns True if the waypoint is reached, False otherwise.', 'find_safe_route': 'Action: Find a safe route to the next waypoint. Returns True if a safe route is found, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Take a picture of the environment, find a safe route to the next waypoint, and navigate to the next waypoint.'Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Action>take_picture</Action> <Condition>check_battery_level</Condition> <Action>find_safe_route</Action> </Sequence> <Selector> <Condition>is_waypoint_reached</Condition> <Action>mark_dangerous_areas</Action> <Action>navigate_to_next_waypoint</Action> </Selector> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'take_picture': 'Action: Take a picture of the environment. Always returns True.', 'evaluate_obstacles': 'Action: Evaluate obstacles in the environment. Returns True if the obstacles are manageable, False if they are not.', 'mark_dangerous_areas': 'Action: Mark dangerous areas in the environment. Always returns True.', 'navigate_to_next_waypoint': 'Action: Navigate to the next waypoint. Returns True if the waypoint is reached, False otherwise.', 'check_battery_level': 'Condition: Check the battery level of the robot. Returns True if the battery level is above 50%, False if it is below 50%.', 'is_obstacle_present': 'Condition: Check if an obstacle is present in front of the robot. Returns True if an obstacle is detected, False otherwise.', 'is_waypoint_reached': 'Condition: Check if the next waypoint is reached. Returns True if the waypoint is reached, False otherwise.', 'find_safe_route': 'Action: Find a safe route to the next waypoint. Returns True if a safe route is found, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Take a picture of the environment, evaluate obstacles, and mark dangerous areas.'Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Action>take_picture</Action> <Sequence> <Condition>check_battery_level</Condition> <Action>evaluate_obstacles</Action> </Sequence> <Action>mark_dangerous_areas</Action> </Selector> </BehaviorTree> 
###
4.// INSTRUCTIONS: Use only the following behaviors {'move_to_target': "Action: Move the agent to the designated target's location. Always returns True.", 'give_high_five': "Action: Give a high five to the target. Always returns True.", 'is_agent_at_target': 'Condition: Check if the agent is at the designated target location. Returns True if at the target, False otherwise.', 'is_target_waiting': 'Condition: Check if the target is waiting for a high five. Returns True if the target is waiting, False otherwise.', 'is_target_smiling': 'Condition: Check if the target is smiling. Returns True if the target is smiling, False otherwise.', 'smile_back': 'Action: Smile back at the target. Always returns True.', 'wait_for_target': 'Action: Remain stationary while awaiting target to arrive. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Greet a waiting friend with a high five and a smile'. Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_target_waiting</Condition><Action>wait_for_target</Action></Sequence><Selector><Sequence><Condition>is_target_smiling</Condition><Action>give_high_five</Action><Action>smile_back</Action></Sequence><Action>move_to_target</Action></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'move_to_goal': "Action: Move the agent towards the designated goal location. Always returns True.", 'calculate_distance_to_target': "Condition: Calculate the agent's distance to the target. Returns True if the distance is within range, False otherwise.", 'is_at_goal': 'Condition: Check if the agent has reached the goal location. Returns True if at the goal, False otherwise.', 'is_path_blocked': 'Condition: Check if the path ahead is blocked by an obstacle. Returns True if the path is blocked, False otherwise.', 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'wait_for_goal': 'Action: Remain stationary while awaiting goal location to be set. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Navigate through a maze to reach the goal position'. Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_at_goal</Condition><Action>move_to_goal</Action></Sequence><Selector><Condition>is_path_blocked</Condition><Action>avoid_obstacle</Action></Selector><Selector><Condition>calculate_distance_to_target</Condition><Sequence><Action>wait_for_goal</Action><Action>move_to_goal</Action></Sequence></Selector><Action>move_to_goal</Action></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'get_close_to_target': "Action: Move toward the target while maintaining a safe distance. Always returns True.", 'back_away': "Action: Move away from the target. Always returns True.", 'scan_surroundings': 'Action: Scan the environment for potential threats. Always returns True.', 'is_target_detected': 'Condition: Check if the target is within sensor range. Returns True if the target is detected, False otherwise.', 'is_threat_detected': 'Condition: Check if a potential threat is detected. Returns True if a threat is detected, False otherwise.', 'is_at_safe_distance': 'Condition: Check if the agent is at a safe distance from the target. Returns True if at a safe distance, False otherwise.', 'is_destination_reached': 'Condition: Check if the agent has reached the designated destination. Returns True if at the destination, False otherwise.', 'wait_for_target': 'Action: Pause and wait for the target to come closer. Always returns True.', 'move_to_destination': 'Action: Move to the designated destination. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: calculate the behavior tree needed to 'Safely escort a target to a designated destination while scanning for potential threats'. Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_destination_reached</Condition><Action>move_to_destination</Action></Sequence><Selector><Condition>is_at_safe_distance</Condition><Action>move_to_destination</Action><Sequence><Condition>is_target_detected</Condition><Action>back_away</Action><Action>wait_for_target</Action></Sequence></Selector><Selector><Condition>is_threat_detected</Condition><Action>scan_surroundings</Action></Selector><Action>get_close_to_target</Action></BehaviorTree> 
###
4.// INSTRUCTIONS: Use only the following behaviors {'mine_gold': 'Action: Mine for gold. Always returns True.', 'deposit_gold': 'Action: Deposit stored gold into storage area. Always returns True.', 'is_gold_depleted': 'Condition: Checks if there is no more gold left to mine. Returns True if gold is depleted, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Gather as much gold as possible, depositing it when the storage is full. Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>is_gold_depleted</Condition><Action>deposit_gold</Action><Action>mine_gold</Action></Sequence><Action>mine_gold</Action></Selector></Sequence></BehaviorTree>
 
###
5.// INSTRUCTIONS: Use only the following behaviors {'move_to_target': 'Action: Move towards a target location. Returns True when the target location is reached within a certain distance threshold, otherwise returns False.', 'stop_movement': 'Action: Stop movement. Always returns True.', 'is_target_nearby': 'Condition: Checks if the target is within a certain distance threshold. Returns True if the target is nearby, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Search for and approach the nearest source of water. Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_target_nearby</Condition><Sequence><Action>move_to_target</Action><Action>stop_movement</Action></Sequence><Action>move_to_target</Action></Sequence></BehaviorTree>
 
###
6.// INSTRUCTIONS: Use only the following behaviors {'gather_resource': 'Action: Gather a specific resource. Returns True once the resource is collected.', 'go_home': 'Action: Return to the designated home base. Always returns True.', 'is_resource_nearby': 'Condition: Checks if the resource is within a certain distance threshold. Returns True if resource is nearby, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Gather wood until a certain amount is reached, then return home. Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_resource_nearby</Condition><Sequence><Action>gather_resource</Action><Action>go_home</Action></Sequence><Action>gather_resource</Action></Sequence></BehaviorTree>4.// INSTRUCTIONS: Use only the following behaviors {'send_signal': 'Action: Send signal to other robots. Always returns True.', 'change_color_to_blue': "Action: Change agent's color to blue. Always returns True.", 'check_distance_to_target': 'Condition: Check the distance to target. Returns True if less than 10 units, False otherwise.', 'check_for_intruders': 'Condition: Check the perimeter for any intruders. Returns True if an intruder is detected, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'When the target is within 10 units, send a signal to other robots and change color to blue. If there are no intruders, continue moving and freeze movement when task is completed.'Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree> <Sequence> <Condition>check_distance_to_target</Condition> <Sequence> <Action>send_signal</Action> <Action>change_color_to_blue</Action> </Sequence> <Selector> <Action>wander</Action> <Sequence> <Condition>check_for_intruders</Condition> <Action>task_completed</Action> </Sequence> </Selector> </Sequence> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.', 'signal_in_range': 'Condition: Check if a signal is detected within range. Returns True if a signal is detected, False otherwise.', 'move_towards_signal': 'Action: Move towards the detected signal. Always returns True.', 'check_for_signals': 'Action: Scan the environment for any incoming signals. Returns True when completed scanning.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'If a signal is detected within range, move towards the signal. Otherwise, avoid obstacles and continue wandering until a signal is detected.'Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>signal_in_range</Condition> <Action>move_towards_signal</Action> </Sequence> <Selector> <Action>avoid_obstacle</Action> <Sequence> <Condition>check_for_signals</Condition> <Action>wander</Action> </Sequence> </Selector> </Selector> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.', 'rotate_left': 'Action: Rotate the robot 90 degrees to the left. Always returns True.', 'rotate_right': 'Action: Rotate the robot 90 degrees to the right. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Avoid obstacles while moving towards the nest. If the agent is not currently in the nest, rotate left and continue moving.'Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>is_agent_in_nest</Condition> <Sequence> <Action>change_color_to_green</Action> <Action>task_completed</Action> </Sequence> </Selector> <Sequence> <Condition>is_obstacle_detected</Condition> <Action>avoid_obstacle</Action> <Sequence> <Selector> <Condition>is_agent_in_nest</Condition> <Sequence> <Condition>is_line_formed</Condition> <Action>rotate_left</Action> </Sequence> </Selector> <Action>wander</Action> </Sequence> </Sequence> </BehaviorTree>
###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Avoid obstacles and continue moving, while forming a line and changing color to green when a target is detected.'Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>is_target_detected</Condition> <Action>form_line</Action> <Action>change_color_to_green</Action> <Action>continue_movement_agent</Action> </Sequence> <Action>avoid_obstacle</Action> </Selector> </Sequence> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 10 units. Returns True if the target is within 10 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Find the target and change color to green, then move towards the target and signal completion when it is within 10 units.'Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>is_target_detected</Condition> <Action>change_color_to_green</Action> <Action>continue_movement_agent</Action> <Sequence> <Condition>is_target_reached</Condition> <Action>agent_movement_freeze</Action> <Action>task_completed</Action> </Sequence> </Sequence> <Action>continue_movement_agent</Action> </Selector> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Form a line and change color to green, while avoiding obstacles and returning to the nest.'Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Action>avoid_obstacle</Action> <Action>form_line</Action> <Action>change_color_to_green</Action> </Sequence> <Action>change_color_to_white</Action> <Sequence> <Condition>is_agent_in_nest</Condition> <Action>agent_movement_freeze</Action> </Sequence> </Selector> </Sequence> </BehaviorTree>
###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.', 'is_resource_found': 'Condition: Check if a resource is found. Returns True if a resource is detected, False otherwise.', 'collect_resource': 'Action: Collect the resource. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Search for resources, form a vertical line, collect a resource, and then return to the nest.'Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>is_resource_found</Condition> <Action>collect_resource</Action> </Sequence> <Action>wander</Action> </Selector> <Selector> <Sequence> <Action>form_line</Action> <Condition>is_agent_in_nest</Condition> <Action>task_completed</Action> </Sequence> <Action>continue_movement_agent</Action> </Selector> </Sequence> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_speed_to_slow': "Action: Change agent's speed to slow. Always returns True.', 'change_speed_to_fast': "Action: Change agent's speed to fast. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Detect an obstacle, change speed to slow, avoid the obstacle, then change speed to fast and continue movement.'Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>is_obstacle_detected</Condition> <Action>change_speed_to_slow</Action> <Action>avoid_obstacle</Action> </Sequence> <Action>change_speed_to_fast</Action> <Action>continue_movement_agent</Action> </Selector> </Sequence> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_speed_to_slow': "Action: Change agent's speed to slow. Always returns True.', 'change_speed_to_fast': "Action: Change agent's speed to fast. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Detect an obstacle, change speed to slow, form a vertical line, then continue movement.'Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>is_obstacle_detected</Condition> <Action>change_speed_to_slow</Action> <Action>form_line</Action> <Action>task_completed</Action> </Sequence> <Action>continue_movement_agent</Action> </Selector> </Sequence> </BehaviorTree> 
###
4.// INSTRUCTIONS: Use only the following behaviors {'move1_forward': 'Action: Move the robot 1 step forward. Always returns True.', 'move1_backward': 'Action: Move the robot 1 step backward. Always returns True.', 'turn_left': 'Action: Turn the robot left by 90 degrees. Always returns True.', 'turn_right': 'Action: Turn the robot right by 90 degrees. Always returns True.', 'is_wall_detected': 'Condition: Check if the robot has detected a wall in front. Returns True if a wall is detected, False otherwise.', 'is_target_reached': 'Condition: Check if the robot has reached the designated target. Returns True if the target is reached, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Generate behavior tree for a robot to navigate through a maze and reach the goal
4.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_target_reached</Condition><Selector><Sequence><Selector><Sequence><Selector><Sequence><Action>move1_forward</Action></Sequence><Action>turn_left</Action></Selector><Action>turn_left</Action></Sequence><Selector><Sequence><Action>move1_forward</Action></Sequence><Action>turn_right</Action></Selector></Sequence><Action>move1_forward</Action></Selector></Sequence><Action>turn_left</Action></Selector><Selector><Sequence><Action>move1_forward</Action></Sequence><Action>turn_right</Action></Selector></Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'ascend': 'Action: Make the robot ascend by one level. Always returns True.', 'descend': 'Action: Make the robot descend by one level. Always returns True.', 'move_forward': 'Action: Move the robot forward. Always returns True.', 'move_backward': 'Action: Move the robot backward. Always returns True.', 'turn_left': 'Action: Turn the robot left by 90 degrees. Always returns True.', 'turn_right': 'Action: Turn the robot right by 90 degrees. Always returns True.', 'is_obstacle_detected': 'Condition: Check for obstacles in front of the robot. Returns True if an obstacle is detected, False otherwise.', 'is_goal_reached': 'Condition: Check if the robot has reached the designated goal. Returns True if the goal is reached, False otherwise.', 'is_danger_detected': 'Condition: Check for potential danger in the current area. Returns True if danger is detected, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Generate behavior tree for a robot to explore a multi-level building and reach a designated goal while avoiding danger
5.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Selector><Sequence><Action>move_forward</Action></Sequence><Action>turn_left</Action></Selector><Selector><Sequence><Action>move_forward</Action></Sequence><Action>turn_right</Action></Selector></Sequence><Selector><Sequence><Condition>is_goal_reached</Condition><Action>ascend</Action></Sequence><Action>move_forward</Action></Selector><Selector><Sequence><Action>move_forward</Action><Condition>is_danger_detected</Condition></Sequence><Action>descend</Action></Selector></Selector></Sequence></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'move_forward': 'Action: Move the robot forward. Always returns True.', 'move_backward': 'Action: Move the robot backward. Always returns True.', 'move_left': 'Action: Move the robot left. Always returns True.', 'move_right': 'Action: Move the robot right. Always returns True.', 'is_obstacle_detected': 'Condition: Check for obstacles in front of the robot. Returns True if an obstacle is detected, False otherwise.', 'is_collision_detected': 'Condition: Check for collisions with other robots. Returns True if a collision is detected, False otherwise.', 'is_item_detected': 'Condition: Check for items in the current area. Returns True if an item is detected, False otherwise.', 'is_item_collected': 'Condition: Check if the robot has collected the designated item. Returns True if the item is collected, False otherwise.', 'change_robot_speed': 'Action: Change the speed of the robot. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Generate behavior tree for a swarm of robots to search for and collect items while avoiding obstacles and collisions with each other
6.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_item_collected</Condition><Selector><Sequence><Selector><Sequence><Action>move_forward</Action></Sequence><Action>move_left</Action></Selector><Selector><Sequence><Action>move_forward</Action></Sequence><Action>move_right</Action></Selector></Sequence><Sequence><Selector><Selector><Sequence><Sequence><Condition>is_item_detected</Condition><Action>change_robot_speed</Action></Sequence><Action>move_forward</Action></Selector><Selector><Sequence><Condition>is_obstacle_detected</Condition><Action>move_backward</Action></Sequence><Action>change_robot_speed</Action></Selector></Selector><Action>move_forward</Action></Sequence></Selector></Sequence></BehaviorTree>
###
4.// INSTRUCTIONS: Use only the following behaviors {'detect_target': 'Condition: Checks if a target is detected within a certain range. Returns True if target is detected, False otherwise.', 'chase_target': 'Action: Move towards the target until it is reached. Always returns True.', 'communicate_with_team': 'Action: Sends a message to other robots in the team. Always returns True.', 'enemy_detected': 'Condition: Checks if an enemy is detected within a certain range. Returns True if enemy is detected, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Create a behavior tree for a swarm of robots to search for and converge on a target, while avoiding and communicating about any detected enemies.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>enemy_detected</Condition><Action>communicate_with_team</Action></Sequence><Sequence><Condition>detect_target</Condition><Action>chase_target</Action></Sequence></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'fly': 'Action: Makes the robot fly upwards. Always returns True.', 'scan_area': 'Action: Scans the surrounding area for potential targets. Always returns True.', 'return_home': 'Action: Makes the robot return to its designated home location. Always returns True.', 'charge_battery': 'Subtree node: Represents a behavior tree for automatically finding and charging at a battery station.', 'is_battery_low': 'Condition: Checks if the robot's battery level is below a certain threshold. Returns True if battery is low, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Send out a swarm of flying robots to scan the area for potential targets. If battery level is low, automatically find and charge at a battery station before resuming scanning.
5.// OUTPUT:
<BehaviorTree><Sequence><Action>fly</Action><Action>scan_area</Action><Trigger>is_battery_low</Trigger><Sequence><Action>charge_battery</Action><Action>return_home</Action></Sequence></Sequence></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'detect_collisions': 'Condition: Checks for collisions with other robots. Returns True if a collision is detected, False otherwise.', 'remove_obstacle': 'Action: Removes an obstacle from the environment. Always returns True.', 'build_structure': 'Action: Constructs a structure using available resources. Always returns True.', 'collect_resources': 'Action: Collects resources from the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: A swarm of robots is tasked with building a structure while avoiding collisions. If an obstacle is encountered, remove it before continuing to build.
6.// OUTPUT:
<BehaviorTree><Selector><Condition>detect_collisions</Condition><Sequence><Action>remove_obstacle</Action><Action>build_structure</Action></Sequence></Selector></BehaviorTree> 
###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'avoid obstacles, move towards target and freeze upon reaching' Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>is_obstacle_detected</Condition> <Action>avoid_obstacle</Action> </Sequence> <Sequence> <Condition>is_target_detected</Condition> <Action>continue_movement_agent</Action> </Sequence> <Condition>is_target_reached</Condition> <Action>task_completed</Action> </Selector> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'move towards the target, avoid obstacles, and freeze when target is reached' Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>is_target_detected</Condition> <Action>continue_movement_agent</Action> </Sequence> <Sequence> <Condition>is_obstacle_detected</Condition> <Action>avoid_obstacle</Action> </Sequence> <Condition>is_target_reached</Condition> <Action>task_completed</Action> </Selector> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'move towards target, avoid obstacles, form a line, and change color to green when target is reached' Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>is_target_detected</Condition> <Action>continue_movement_agent</Action> </Sequence> <Sequence> <Condition>is_obstacle_detected</Condition> <Action>avoid_obstacle</Action> </Sequence> <Sequence> <Action>form_line</Action> <Condition>is_line_formed</Condition> <Action>change 
###
4.// INSTRUCTIONS: Use only the following behaviors {'get_to_destination': "Action: Move towards the designated destination. Returns True if destination is reached, False otherwise.", 'check_obstacle': 'Condition: Checks for obstacles in front of the agent. Returns True if an obstacle is detected, False otherwise.', 'call_backup': "Action: Use communication to call for backup support. Always returns True.", 'clear_path': "Condition: Checks for a clear path in front of the agent. Returns True if no obstacles are detected, False otherwise.", 'halt_movement': "Action: Halt all agent movement. Always returns True.", 'enable_sensors': "Action: Activate sensors for more accurate navigation. Always returns True."}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Safely navigate through a maze to reach the designated destination. If an obstacle is detected, call for backup.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>get_to_destination</Action></Sequence><Sequence><Condition>check_obstacle</Condition><Action>call_backup</Action><Selector><Sequence><Condition>clear_path</Condition></Sequence><Sequence><Action>halt_movement</Action><Action>enable_sensors</Action></Sequence></Selector></Sequence></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'gather_resources': 'Action: Gather necessary resources for the task. Returns True if resources are successfully gathered, False otherwise.', 'deliver_resources': 'Action: Deliver resources to the designated location. Returns True if resources are successfully delivered, False otherwise.', 'check_resource_level': "Condition: Checks the agent's resource level. Returns True if resources are above a specified threshold, False otherwise.", 'is_delivery_spot_clear': "Condition: Checks if the delivery spot is clear. Returns True if no obstacles are detected in the delivery spot, False otherwise.", 'is_task_completed': 'Condition: Checks if the task is completed. Returns True if resources are successfully delivered and task is completed, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Gather resources from multiple locations and deliver them to a central location. Ensure delivery spot is clear before proceeding with delivery.
5.// OUTPUT:
<BehaviorTree><Sequence><Action>gather_resources</Action><Selector><Sequence><Condition>check_resource_level</Condition><Action>deliver_resources</Action><Selector><Sequence><Condition>is_delivery_spot_clear</Condition></Sequence><Sequence><Task_completed</Sequence></Selector></Sequence></Selector></Sequence></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'navigate_to_checkpoint': 'Action: Navigate to the designated checkpoint. Returns True if the checkpoint is reached, False otherwise.', 'search_for_target': 'Action: Use sensors to search for the target. Always returns True.', 'mark_checkpoint_visited': 'Action: Mark the current checkpoint as visited so it is not revisited. Always returns True.', 'is_all_checkpoints_visited': 'Condition: Checks if all checkpoints have been visited. Returns True if all checkpoints have been visited, False otherwise.', 'is_target_found': 'Condition: Checks if the target has been detected. Returns True if the target has been found, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Navigate through a maze to find a hidden target, marking each checkpoint along the way as visited and ensuring all checkpoints are visited before proceeding.
6.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_all_checkpoints_visited</Condition><Selector><Sequence><Action>navigate_to_checkpoint</Action><Action>search_for_target</Action><Sequence><Condition>is_target_found</Condition><Action>continue_movement_agent</Action></Sequence><Action>mark_checkpoint_visited</Action></Selector></Sequence></BehaviorTree>###
4.// INSTRUCTIONS: Use only the following behaviors {'fly_to_destination': 'Action: Fly to designated location. Always returns True.', 'scan_surface': 'Action: Scan the surface area for potential threats. Returns True if no threats are detected, False otherwise.', 'identify_target': 'Action: Identify the target object for retrieval. Returns True if target is identified, False otherwise.', 'is_target_retrieved': 'Condition: Check if the target object has been retrieved. Returns True if the target has been retrieved, False otherwise.', 'is_destination_reached': 'Condition: Check if the destination location has been reached. Returns True if the destination is reached, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Fly to designated location, scan the surface area, identify and retrieve target object'. Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>fly_to_destination</Action><Sequence><Condition>scan_surface</Condition><Sequence><Action>identify_target</Action><Condition>is_target_retrieved</Condition></Sequence></Sequence></Sequence><Condition>is_destination_reached</Condition></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'detect_obstacle': 'Action: Use sensors to detect obstacles. Returns True if an obstacle is detected, False otherwise.', 'avoid_obstacle': 'Action: Take evasive maneuvers to avoid obstacles. Always returns True.', 'move_in_straight_line': 'Action: Move in a straight line towards a designated location. Always returns True.', 'is_destination_reached': 'Condition: Check if the destination location has been reached. Returns True if the destination is reached, False otherwise.', 'is_obstacle_detected': 'Condition: Check if an obstacle is detected in the path. Returns True if an obstacle is detected, False otherwise.', 'scan_for_threats': 'Action: Use sensors to scan for potential threats in the environment. Returns True if no threats are detected, False otherwise.', 'identify_target': 'Action: Identify the target object for retrieval. Returns True if target is identified, False otherwise.', 'is_target_retrieved': 'Condition: Check if the target object has been retrieved. Returns True if the target has been retrieved, False otherwise.', 'is_destination_reached': 'Condition: Check if the destination location has been reached. Returns True if the destination is reached, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Scan for obstacles, avoid them, move towards destination, scan for threats, identify and retrieve target object'. Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Sequence><Condition>detect_obstacle</Condition><Sequence><Condition>is_obstacle_detected</Condition><Action>avoid_obstacle</Action></Sequence></Sequence><Sequence><Condition>detect_obstacle</Condition><Sequence><Action>move_in_straight_line</Action><Condition>is_destination_reached</Condition></Sequence></Sequence><Sequence><Condition>scan_for_threats</Condition><Sequence><Action>identify_target</Action><Condition>is_target_retrieved</Condition><Condition>is_destination_reached</Condition></Sequence></Sequence><Sequence><Condition>scan_for_threats</Condition><Sequence><Action>identify_target</Action><Condition>is_target_retrieved</Condition><Action>move_in_straight_line</Action><Condition>is_destination_reached</Condition></Sequence></Sequence></Sequence></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'detect_obstacle': 'Action: Use sensors to detect obstacles. Returns True if an obstacle is detected, False otherwise.', 'avoid_obstacle': 'Action: Take evasive maneuvers to avoid obstacles. Always returns True.', 'move_in_straight_line': 'Action: Move in a straight line towards a designated location. Always returns True.', 'is_destination_reached': 'Condition: Check if the destination location has been reached. Returns True if the destination is reached, False otherwise.', 'is_obstacle_detected': 'Condition: Check if an obstacle is detected in the path. Returns True if an obstacle is detected, False otherwise.', 'scan_for_threats': 'Action: Use sensors to scan for potential threats in the environment. Returns True if no threats are detected, False otherwise.', 'identify_target': 'Action: Identify the target object for retrieval. Returns True if target is identified, False otherwise.', 'is_target_retrieved': 'Condition: Check if the target object has been retrieved. Returns True if the target has been retrieved, False otherwise.', 'land_on_destination': 'Action: Land the drone on the designated landing spot. Returns True if the landing spot is clear, False otherwise.', 'is_landing_spot_clear': 'Condition: Check if the designated landing spot is clear. Returns True if the landing spot is clear, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Detect obstacles, avoid them, move towards destination, scan for threats, identify and retrieve target object, and land on designated landing spot'. Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Sequence><Condition>detect_obstacle</Condition><Sequence><Condition>is_obstacle_detected</Condition><Action>avoid_obstacle</Action></Sequence></Sequence><Sequence><Condition>detect_obstacle</Condition><Sequence><Action>move_in_straight_line</Action><Condition>is_destination_reached</Condition></Sequence></Sequence><Sequence><Condition>scan_for_threats</Condition><Sequence><Action>identify_target</Action><Condition>is_target_retrieved</Condition></Sequence></Sequence><Sequence><Condition>scan_for_threats</Condition><Sequence><Action>identify_target</Action><Condition>is_target_retrieved</Condition><Action>move_in_straight_line</Action><Condition>is_destination_reached</Condition></Sequence></Sequence><Sequence><Condition>scan_for_threats</Condition><Sequence><Action>land_on_destination</Action><Condition>is_landing_spot_clear</Condition></Sequence></Sequence></Sequence></Selector></BehaviorTree> 
###
4.// INSTRUCTIONS: Use only the following behaviors {'send_message': 'Subtree node: Represents a behavior tree for sending messages to other robots.', 'hear_message': 'Action: Makes the agent listen for incoming messages from other robots and execute the corresponding behavior. Always returns True.', 'is_message_received': 'Condition: Checks if the agent has received a message. Returns True if a message is received, False otherwise.', 'move_to_position': 'Action: Move the robot to a specified position. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can�t do the task)
4.// USER COMMAND: Send a message to a designated robot to move to a specific position.
4.// OUTPUT:
<BehaviorTree><Sequence><Action>send_message</Action><Condition>is_message_received</Condition><Action>hear_message</Action></Sequence><Action>move_to_position</Action></BehaviorTree>
 
###
5.// INSTRUCTIONS: Use only the following behaviors {'find_food': 'Action: Finds and picks up food. Always returns True.', 'eat_food': 'Action: Makes the agent eat the food. Always returns True.', 'is_hungry': 'Condition: Checks if agent's hunger level is below a threshold. Returns True if hungry, False otherwise.', 'drop_food': 'Action: Drops the food at a designated location. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: If the agent is hungry, find food and eat it. Otherwise, drop food at a designated location.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_hungry</Condition><Action>find_food</Action><Action>eat_food</Action></Sequence><Action>drop_food</Action></Selector></BehaviorTree>
 
###
6.// INSTRUCTIONS: Use only the following behaviors {'search_object': 'Action: Searches for a specific object in the environment. Always returns True.', 'is_object_found': 'Condition: Checks if the object is found. Returns True if object is found, False otherwise.', 'interact_with_object': 'Action: Interacts with the object once it is found. Always returns True.', 'return_to_home': 'Action: Makes the agent return to the designated home location. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Search for a specific object. If the object is found, interact with it. Once completed, return to home location.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_object_found</Condition><Action>interact_with_object</Action><Sequence><Action>search_object</Action></Sequence></Sequence><Action>return_to_home</Action></Selector></BehaviorTree>
###
4.// INSTRUCTIONS: Use only the following behaviors {'detect_landmarks': 'Subtree node: Represents a behavior tree for identifying and recognizing landmarks.', 'move_to_next_landmark': 'Action: Move towards the next recognized landmark. Always returns True.', 'stop_at_checkpoint': 'Action: Stop and wait for <checkpoint> seconds at the current checkpoint. Always returns True.', 'change_speed_based_on_height': "Action: Adjusts agent's speed based on its current height. Always returns True.", 'is_landmark_reached': 'Condition: Check if the agent has reached the current landmark. Returns True if the landmark is reached, False otherwise.', 'is_landmark_detected': 'Condition: Check if a landmark is within range and detected. Returns True if a landmark is detected, False otherwise.', 'mission_completed': 'Condition: Check if all landmarks have been reached and the mission is completed. Returns True if all landmarks are reached, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Once a landmark is reached, stop at the checkpoint for 10 seconds before moving to the next landmark.
4.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_landmark_reached</Condition><Action>stop_at_checkpoint</Action><Sequence><Action>move_to_next_landmark</Action><Action>change_speed_based_on_height</Action></Sequence></Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'scan_surroundings': 'Action: Scan the surroundings for any threats or enemies. Always returns True.', 'search_for_target': 'Action: Search for the target within a designated area. Always returns True.', 'move_to_exploration_site': 'Action: Move towards the exploration site while avoiding obstacles. Always returns True.', 'is_target_in_sight': 'Condition: Check if the target is within the agent\'s field of vision. Returns True if the target is in sight, False otherwise.', 'is_area_cleared': 'Condition: Check if the designated area has been thoroughly searched and cleared. Returns True if the area is cleared, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Explore and scan the designated area until the target is in sight.
5.// OUTPUT:
<BehaviorTree><Sequence><Action>move_to_exploration_site</Action><Sequence><Action>scan_surroundings</Action><Condition>is_target_in_sight</Condition></Sequence></Sequence></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'run_routine_task': 'Action: Perform routine tasks such as cleaning, maintenance, etc. Always returns True.', 'scan_barcode': 'Action: Scan a barcode and check for authenticity. Always returns True.', 'open_container': 'Action: Open the designated container. Always returns True.', 'close_container': 'Action: Close the designated container. Always returns True.', 'is_container_full': 'Condition: Check if the designated container is at full capacity. Returns True if the container is full, False otherwise.', 'is_container_opened': 'Condition: Check if the designated container is currently opened. Returns True if the container is open, False otherwise.', 'is_barcode_valid': 'Condition: Check if the scanned barcode is valid. Returns True if the barcode is valid, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: If container is full, close the container. Otherwise, open the container and scan a barcode.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_container_full</Condition><Action>close_container</Action></Sequence><Sequence><Condition>is_container_opened</Condition><Action>open_container</Action><Condition>is_barcode_valid</Condition><Action>scan_barcode</Action></Sequence></Selector></BehaviorTree>
###
4.// INSTRUCTIONS: Use only the following behaviors {'self_destruct': "Action: Cause the robot to self-destruct. Always returns True.", 'identify_target': 'Action: Use sensor data to identify the target. Returns True if target is identified, False otherwise.', 'move_towards_target': 'Action: Move towards the identified target. Always returns True.', 'is_target_reached': 'Condition: Check if the target is within reach. Returns True if target is reached, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles ahead. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are present ahead, False otherwise.', 'is_task_completed': 'Condition: Check if task is completed. Returns True if task is completed, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Locate and move towards the target, self-destruct when within 5 steps of the target.
4.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Selector> <Action>identify_target</Action> <Action>move_towards_target</Action> <Condition>is_target_reached</Condition> </Selector> <Sequence> <Condition>is_obstacle_detected</Condition> <Condition>is_path_clear</Condition> </Sequence> <Condition>is_task_completed</Condition> <Action>self_destruct</Action> </Sequence> </Selector> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'pick_up_object': "Action: Pick up the specified object. Returns True if the object is picked up, False otherwise.", 'carry_object': 'Action: Encase the object within the robot. Returns True if the object is carried, False otherwise.', 'drop_object': 'Action: Release the carried object. Always returns True.', 'is_object_in_range': 'Condition: Check for objects within the designated range. Returns True if an object is in range, False otherwise.', 'is_object_captured': 'Condition: Check if the object is securely captured within the robot. Returns True if the object is securely captured, False otherwise.', 'is_path_clear': 'Condition: Check if the path ahead is clear. Returns True if no obstacles are present, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Pick up the nearest object and carry it until reaching a specific location. Drop the object once arrived.
5.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>is_object_in_range</Condition> <Action>pick_up_object</Action> <Action>carry_object</Action> <Condition>is_object_captured</Condition> </Sequence> <Sequence> <Condition>is_path_clear</Condition> </Sequence> <Action>drop_object</Action> </Selector> </Sequence> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'move_towards_sound': "Action: Move towards the detected sound source. Always returns True.", 'rotate': 'Action: Rotate the robot in a particular direction. Always returns True.', 'is_sound_detected': 'Condition: Check for any detected sounds. Returns True if a sound is detected, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles ahead. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected, False otherwise.', 'execute_command': 'Action: Execute the specified command. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Move towards the source of the detected sound, while avoiding obstacles. If an obstacle is detected, rotate in a different direction.
6.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Action>move_towards_sound</Action> <Condition>is_obstacle_detected</Condition> <Action>rotate</Action> </Sequence> <Sequence> <Condition>is_sound_detected</Condition> <Condition>is_path_clear</Condition> </Sequence> </Selector> </BehaviorTree> 
###
4.// INSTRUCTIONS: Use only the following behaviors {'move_up': 'Action: Move one unit up. Always returns True.', 'move_down': 'Action: Move one unit down. Always returns True.', 'move_left': 'Action: Move one unit left. Always returns True.', 'move_right': 'Action: Move one unit right. Always returns True.', 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'pick_up_object': 'Action: Pick up object within reach. Always returns True.', 'release_object': 'Action: Release held object. Always returns True.', 'is_obstacle_ahead': 'Condition: Check if an obstacle is present ahead. Returns True if an obstacle is detected, False otherwise.', 'is_obstacle_below': 'Condition: Check if an obstacle is present below. Returns True if an obstacle is detected, False otherwise.', 'is_object_held': 'Condition: Check if an object is currently held. Returns True if an object is held, False otherwise.', 'is_object_within_reach': 'Condition: Check if an object is within reach. Returns True if an object is within reach, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Generate a behavior tree for a single robot to navigate through a maze and collect a specific number of objects while avoiding obstacles.
4.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_obstacle_ahead</Condition><Selector><Sequence><Condition>is_obstacle_below</Condition><Action>move_right</Action></Sequence><Action>move_up</Action></Selector></Sequence><Sequence><Condition>is_object_within_reach</Condition><Action>pick_up_object</Action></Sequence><Action>avoid_obstacle</Action><Action>release_object</Action></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Navigate through a series of checkpoints, avoiding obstacles and collecting items along the way, then return to the starting point and signal task completion.'
5.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>is_obstacle_detected</Condition><Action>avoid_obstacle</Action></Sequence><Action>continue_movement_agent</Action></Selector><Sequence><Condition>is_target_detected</Condition><Selector><Sequence><Condition>is_line_formed</Condition><Action>change_color_to_green</Action><Action>task_completed</Action></Sequence><Action>wander</Action></Sequence></Sequence><Sequence><Condition>is_agent_in_nest</Condition><Action>change_color_to_white</Action></Sequence></Sequence></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'navigate_to_location': 'Action: Navigate to the specified location. Always returns True.', 'move_towards_waypoint': 'Action: Move towards the given waypoint. Always returns True.', 'stop_all_movement': 'Action: Stop all movement and actions. Always returns True.', 'pick_up_object': 'Action: Pick up object within reach. Always returns True.', 'drop_object': 'Action: Drop picked up object. Always returns True.', 'is_object_held': 'Condition: Check if an object is currently held. Returns True if an object is holding, False otherwise.', 'is_object_within_reach': 'Condition: Check if an object is within reach. Returns True if an object is within reach, False otherwise.', 'is_moving_toward_waypoint': 'Condition: Check if the robot is currently moving towards a waypoint. Returns True if moving towards a waypoint, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Generate a behavior tree for a swarm of robots to perform a search and rescue mission, navigating through a complex environment and carrying and dropping off objects at designated waypoints.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_moving_toward_waypoint</Condition><Selector><Sequence><Condition>is_object_held</Condition><Action>drop_object</Action></Sequence><Action>pick_up_object</Action></Selector></Sequence><Sequence><Condition>is_object_within_reach</Condition><Action>pick_up_object</Action></Sequence></Selector><Sequence><Condition>is_moving_toward_waypoint</Condition><Action>navigate_to_location</Action></Sequence></BehaviorTree>
###
4.// INSTRUCTIONS: Use only the following behaviors {'follow_target': 'Action: Follow a designated target. Always returns True.', 'rotate': 'Action: Rotate in place. Always returns True.', 'is_target_reached': 'Condition: Check if target is within 5 units. Returns True if the target is within 5 units of distance, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: If path is clear, follow target. If an obstacle is detected, rotate and then continue following target.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_path_clear</Condition><Action>follow_target</Action></Sequence><Sequence><Condition>is_obstacle_detected</Condition><Sequence><Action>rotate</Action><Action>follow_target</Action></Sequence></Sequence></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'scout': 'Action: Scout the environment and provide updates. Always returns True.', 'build_structure': 'Action: Build a structure in a designated location. Always returns True.', 'gather_resources': 'Subtree node: Represents a behavior tree for gathering resources.', 'is_resource_available': 'Condition: Checks if resources are available at a specific location. Returns True if resources are available, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: If resources are available, gather them and then build a structure. Otherwise, scout the environment and provide updates.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_resource_available</Condition><Sequence><Action>gather_resources</Action><Action>build_structure</Action></Sequence></Sequence><Action>scout</Action></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'move_along_path': 'Action: Move along a predetermined path. Always returns True.', 'detect_target': 'Subtree node: Represents a behavior tree for detecting a target.', 'wait': 'Action: Wait in place for a designated amount of time. Always returns True.', 'is_target_detected': 'Condition: Checks if a target is within the agent's vision. Returns True if a target is detected, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: If a target is detected, move along path. If no target is detected, wait for 5 seconds and then start detecting again.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_target_detected</Condition><Action>move_along_path</Action></Sequence><Sequence><Action>wait</Action><Action>detect_target</Action></Sequence></Selector></BehaviorTree>###
4.// INSTRUCTIONS: Use only the following behaviors {'scan_for_intruders': 'Action: Scan the area for any intruders using sensors. Always returns True.', 'track_intruder': 'Action: Begin tracking an intruder once it has been detected. Always returns True.', 'is_intruder_detected': 'Condition: Check if an intruder has been detected in the area. Returns True if an intruder is detected, False otherwise.', 'alert_team': 'Action: Send an alert to the rest of the team once an intruder is detected. Always returns True.', 'engage_intruder': 'Action: Engage the intruder in combat once it has been tracked. Always returns True.', 'is_team_engaged': 'Condition: Check if the team is already engaged in combat with an intruder. Returns True if the team is engaged, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.//USER COMMAND: Generate behavior tree for a patrol robot to detect and engage intruders in an area.
4.//OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>is_intruder_detected</Condition><Action>track_intruder</Action><Action>alert_team</Action></Sequence><Action>scan_for_intruders</Action></Selector><Selector><Condition>is_team_engaged</Condition><Action>continue_patrol</Action><Action>engage_intruder</Action></Selector></Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'precede_target': 'Subtree node: Precede the target location.', 'circle_target': 'Subtree node: Circle the target location.', 'get_target_position': 'Action: Retrieves the current position of the target. Always returns True.', 'is_in_position': 'Condition: Check if the robot is in the target position. Returns True if the robot is in position, False otherwise.', 'is_target_lost': 'Condition: Check if the target has been lost. Returns True if the target has been lost, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.//USER COMMAND: Precede and circle a moving target while maintaining position.
5.//OUTPUT:
<BehaviorTree><Sequence><Selector><Condition>is_target_lost</Condition><Action>get_target_position</Action></Selector><Action>precede_target</Action><Selector><Condition>is_in_position</Condition><Action>circle_target</Action><Selector><Condition>is_target_lost</Condition><Action>get_target_position</Action></Selector></Selector></Sequence></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'search_for_food': 'Action: Search for sources of food within the environment. Always returns True.', 'gather_food': 'Action: Gather the found food and bring it back to the nest. Always returns True.', 'is_nest_reached': 'Condition: Check if the robot has returned to the designated nest. Returns True if the robot is at the nest, False otherwise.', 'is_food_found': 'Condition: Check if food has been found by the robot. Returns True if food is found, False otherwise.', 'roam_around': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.//USER COMMAND: Create a behavior tree for a swarm of robots to gather food and bring it back to the nest.
6.//OUTPUT:
<BehaviorTree><Sequence><Condition>is_nest_reached</Condition><Selector><Sequence><Condition>is_food_found</Condition><Action>gather_food</Action></Sequence><Action>search_for_food</Action></Selector></Sequence></BehaviorTree> 
###
4.// INSTRUCTIONS: Use only the following behaviors {'get_into_formation': 'Action: Coordinate with other robots to get into a specific formation. Returns True once formation is achieved.', 'move_towards_target': 'Action: Move towards the designated target location. Returns True once target is reached.', 'scan_surroundings': 'Action: Scan the surrounding environment for any obstacles or targets. Returns True once scan is completed.', 'attack_target': 'Action: Initiate an attack on the designated target. Returns True once attack is successful.', 'follow_leader': 'Action: Follow the instructions of the designated leader robot. Returns True once successfully following leader instructions.', 'is_formation_achieved': 'Condition: Check if the robot has successfully achieved the desired formation. Returns True if formation is achieved, False otherwise.', 'is_target_reached': 'Condition: Check if the robot has reached the designated target location. Returns True if target is reached, False otherwise.', 'is_obstacle_detected': 'Condition: Check if there are any obstacles in the surrounding environment. Returns True if an obstacle is detected, False otherwise.', 'leader_has_instructions': 'Condition: Check if the designated leader robot has provided instructions to follow. Returns True if instructions are provided, False otherwise.', 'is_target_safe_to_attack': 'Condition: Check if the designated target is safe to attack. Returns True if target is safe to attack, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Get into a formation and attack the designated target if it is safe to attack.'Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Action>get_into_formation</Action> <Sequence> <Condition>is_formation_achieved</Condition> <Selector> <Action>scan_surroundings</Action> <Sequence> <Condition>is_target_safe_to_attack</Condition> <Action>attack_target</Action> </Sequence> </Selector> </Sequence> </Selector> </Sequence> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'detect_enemy': 'Action: Use sensors to detect any enemy presence. Always returns True.', 'perform_combat_move': 'Action: Perform a specific combat move to attack the enemy. Returns True once move is executed.', 'retreat': 'Action: Retreat to a safe location. Returns True once safely retreated.', 'reload_weapon': 'Action: Reload the weapons. Returns True once weapons are reloaded.', 'check_magazine': 'Action: Check the weapon's magazine for remaining bullets. Returns True once magazine is checked.', 'is_enemy_detected': 'Condition: Check if an enemy is detected using sensors. Returns True if enemy is detected, False otherwise.', 'is_magazine_empty': 'Condition: Check if the weapon's magazine is empty. Returns True if magazine is empty, False otherwise.', 'is_weapon_loaded': 'Condition: Check if the weapons are fully loaded. Returns True if weapons are loaded, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Detect enemy presence, check magazine, reload weapons, and perform a combat move to attack the enemy.'Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Action>detect_enemy</Action> <Selector> <Sequence> <Condition>is_enemy_detected</Condition> <Action>check_magazine</Action> <Selector> <Condition>is_magazine_empty</Condition> <Action>reload_weapon</Action> </Selector> </Sequence> <Action>perform_combat_move</Action> </Selector> <Action>retreat</Action> </Sequence> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'search_for_food': 'Action: Search the surrounding environment for sources of food. Returns True once a source is found.', 'eat_food': 'Action: Consume the available food source. Returns True once food is eaten.', 'track_mates': 'Action: Use sensors to track the location of other swarm robots. Returns True once other robots are tracked.', 'align_with_mate': 'Action: Align with other robots in the swarm to form a cohesive unit. Returns True once aligned.', 'is_food_found': 'Condition: Check if a food source has been detected. Returns True if a source is detected, False otherwise.', 'is_mates_tracked': 'Condition: Check if the locations of other robots have been tracked. Returns True if locations are tracked, False otherwise.', 'is_aligned': 'Condition: Check if the robot has aligned with other swarm robots. Returns True if aligned, False otherwise.'}, to construct behavior tree in XML format to the following command.  If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Search for food source, track location of other robots, align with them, and eat the available food source.'Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Action>search_for_food</Action> <Selector> <Condition>is_food_found</Condition> <Action>track_mates</Action> <Sequence> <Condition>is_mates_tracked</Condition> <Action>align_with_mate</Action> <Action>eat_food</Action> </Sequence> </Selector> </Sequence> <Action>wander</Action> </Selector> </BehaviorTree>
###
4.// INSTRUCTIONS: Use only the following behaviors {'move_forward': 'Action: Move the robot one step forward in the current direction. Always returns True.', 'move_backward': 'Action: Move the robot one step backward in the current direction. Always returns True.', 'turn_left': 'Action: Turn the robot 45 degrees to the left. Always returns True.', 'turn_right': 'Action: Turn the robot 45 degrees to the right. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Do a zigzag motion by moving forward, turning left, moving forward, turning right, and repeating the pattern until the task is completed.
4.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Action>move_forward</Action><Action>turn_left</Action></Sequence><Sequence><Action>move_forward</Action><Action>turn_right</Action></Sequence></Selector></Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'move_forward': 'Action: Move the robot one step forward in the current direction. Always returns True.', 'move_to_target': 'Subtree node: Represents a behavior tree for navigating to a specific target.', 'check_distance_to_target': 'Condition: Checks the distance to the target. Returns True if distance is within a specific range, False otherwise.', 'collect_resource': 'Action: Collect the resource at the current location and add it to the robot's inventory. Always returns True.', 'is_resource_full': 'Condition: Checks if the robot's inventory is full. Returns True if full, False otherwise.', 'deposit_resources': 'Action: Deposits all resources in the robot's inventory at the designated location. Always returns True.', 'is_deposit_location_reached': 'Condition: Checks if the robot has reached the designated deposit location. Returns True if reached, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Navigate to a specific target, collect resources along the way until inventory is full, then deposit resources at a designated location.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>move_to_target</Action><Condition>check_distance_to_target</Condition><Selector><Sequence><Action>collect_resource</Action><Condition>is_resource_full</Condition><Action>deposit_resources</Action></Sequence><Selector><Sequence><Action>move_forward</Action><Action>collect_resource</Action></Sequence></Selector></Selector></Sequence><Sequence><Condition>is_deposit_location_reached</Condition><Action>move_to_target</Action></Sequence></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'move_forward': 'Action: Move the robot one step forward in the current direction. Always returns True.', 'move_backwards': 'Action: Move the robot one step backward in the current direction. Always returns True.', 'turn_left': 'Action: Turn the robot 45 degrees to the left. Always returns True.', 'turn_right': 'Action: Turn the robot 45 degrees to the right. Always returns True.', 'take_picture': 'Action: Take a picture of the surrounding environment and store it in the robot's memory. Always returns True.', 'detect_obstacle': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'analyze_picture': 'Subtree node: Represents a behavior tree for analyzing the pictures taken by the robot.', 'navigate_to_location': 'Subtree node: Represents a behavior tree for navigating to a specific location.', 'is_location_reached': 'Condition: Checks if the robot has reached the designated location. Returns True if reached, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Take a picture of the surrounding environment, analyze it, and navigate to a specific location while avoiding obstacles.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>take_picture</Action><Subtree>analyze_picture</Subtree><Selector><Sequence><Condition>detect_obstacle</Condition><Action>move_backward</Action><Action>turn_left</Action></Sequence><Selector><Sequence><Action>move_forward</Action></Sequence></Selector></Selector></Sequence><Action>check_location</Action><Subtree>navigate_to_location</Subtree></Selector></BehaviorTree>
###
4.// INSTRUCTIONS: Use only the following behaviors {'call_backup': 'Action: Signals for additional robots to come for backup. Always returns True.', 'defend': "Action: Move to a strategic position and defend the area. Always returns True.", 'is_backup_available': 'Condition: Checks if backup has arrived. Returns True if backup is available, False otherwise.', 'is_enemy_detected': 'Condition: Checks for nearby enemies. Returns True if an enemy is detected, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: If enemies are detected, signal for backup and defend the area until backup arrives.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_enemy_detected</Condition><Sequence><Action>call_backup</Action><Selector><Sequence><Condition>is_backup_available</Condition><Action>defend</Action></Sequence></Selector></Sequence></Sequence></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'move_to_target': 'Action: Move towards the specified target. Always returns True.', 'perform_task': "Action: Perform a specific task at the target location. Always returns True.", 'is_target_reached': 'Condition: Check if target has been reached. Returns True if the target has been reached, False otherwise.', 'is_task_complete': 'Condition: Check if the task has been completed. Returns True if the task is completed, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Move to a designated location and perform a task until it is completed.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>move_to_target</Action><Condition>is_target_reached</Condition><Sequence><Condition>is_task_complete</Condition><Action>perform_task</Action></Sequence></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'collect_resource': 'Action: Collect a designated resource. Always returns True.', 'deposit_resource': 'Action: Deposit collected resource. Always returns True.', 'return_to_nest': "Action: Return to the nest. Always returns True.", 'is_resource_found': 'Condition: Checks if a resource is within range. Returns True if a resource is detected, False otherwise.', 'is_resource_depleted': 'Condition: Checks if the resource has been depleted. Returns True if the resource is depleted, False otherwise.', 'is_deposit_complete': 'Condition: Checks if the resource deposit is complete. Returns True if the deposit is complete, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Scout for a resource, collect it and deposit it at the nest. If the resource is depleted, return to the nest without collecting.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Selector><Sequence><Action>collect_resource</Action><Condition>is_resource_found</Condition></Sequence><Condition>is_resource_depleted</Condition></Selector><Action>deposit_resource</Action><Condition>is_deposit_complete</Condition></Sequence><Action>return_to_nest</Action></Selector></BehaviorTree> 
###
4.// INSTRUCTIONS: Use only the following behaviors {'patrol': 'Subtree node: Represents a behavior tree for patrolling a specific area.', 'search': 'Action: Search for any potential threats in the surrounding area. Returns True if a threat is detected, False otherwise.', 'follow_target': 'Action: Follow a designated target or leader. Always returns True.', 'identify_threat': 'Condition: Identifies the level of threat posed by a potential enemy. Returns True if the threat level is high, False otherwise.', 'is_target_reachable': 'Condition: Checks if the designated target is within reachable distance. Returns True if the target is reachable, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Patrol the designated area while searching for potential threats. If a high level threat is identified, follow the designated target.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>search</Action><Condition>is_target_reachable</Condition><Action>follow_target</Action></Sequence><Sequence><Action>patrol</Action><Condition>identify_threat</Condition><Action>follow_target</Action></Sequence></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'collect_resources': 'Subtree node: Represents a behavior tree for collecting and depositing resources.', 'craft': 'Subtree node: Represents a behavior tree for crafting items using collected resources.', 'is_storage_full': 'Condition: Checks if the storage is at full capacity. Returns True if the storage is full, False otherwise.', 'go_to_storage': 'Action: Moves the robot to the designated storage area. Always returns True.', 'is_resource_available': 'Condition: Checks if there are any resources available in the surrounding area. Returns True if resources are available, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Continuously collect resources until the storage is full, then go to designated storage area and craft items.
5.// OUTPUT:
<BehaviorTree><Sequence><Action>collect_resources</Action><Condition>is_resource_available</Condition><Selector><Sequence><Condition>is_storage_full</Condition><Action>go_to_storage</Action><Action>craft</Action></Sequence><Action>collect_resources</Action></Selector></Sequence></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'explore': 'Subtree node: Represents a behavior tree for exploring a new area.', 'collect_samples': 'Subtree node: Represents a behavior tree for collecting samples and data.', 'analyze_samples': 'Action: Analyze collected samples and data. Returns True if data is sufficient, False otherwise.', 'recharge': 'Action: Recharge the robot if battery is below a certain threshold. Always returns True.', 'is_obstacle_detected': 'Condition: Checks if an obstacle is detected in the surroundings. Returns True if an obstacle is detected, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Continuously explore and collect samples until enough data is gathered. Recharge if necessary during the exploration.
6.// OUTPUT:
<BehaviorTree><Sequence><Action>explore</Action><Selector><Condition>is_obstacle_detected</Condition><Action>recharge</Action></Selector></Sequence><Sequence><Action>collect_samples</Action><Action>analyze_samples</Action><Condition>analyze_samples</Condition><Selector><Action>explore</Action><Action>collect_samples</Action></Selector></Sequence></BehaviorTree> 
###
4.// INSTRUCTIONS: Use only the following behaviors {'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'call_for_help': "Action: Call for help from other agents. Always returns True.", 'change_color_to_blue': "Action: Change agent's color to blue. Always returns True.", 'change_color_to_yellow': "Action: Change agent's color to yellow. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_goal_reached': 'Condition: Check if the goal is reached. Returns True if the goal is reached, False otherwise.', 'move_forward': 'Action: Move forward. Always returns True.', 'move_backward': 'Action: Move backward. Always returns True.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'rotate_left': 'Action: Rotate agent to the left. Always returns True.', 'rotate_right': 'Action: Rotate agent to the right. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Find nearest agent and call for help, move forward for 10 units, avoid obstacles and continue moving towards the goal.'Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>is_agent_in_nest</Condition> <Action>call_for_help</Action> </Sequence> <Action>wander</Action> </Selector> <Sequence> <Action>move_forward</Action> <Condition>is_goal_reached</Condition> <Action>move_backward</Action> <Action>task_completed</Action> </Sequence> </BehaviorTree>
 
###
5.// INSTRUCTIONS: Use only the following behaviors {'change_color_to_blue': "Action: Change agent's color to blue. Always returns True.", 'change_color_to_red': "Action: Change agent's color to red. Always returns True.", 'check_battery_level': 'Condition: Check if battery level is above 50%. Returns True if the battery level is above 50%, False otherwise.', 'fly_to_location': 'Action: Fly towards a specific location. Always returns True.', 'land': 'Action: Land the drone. Always returns True.', 'lift_off': 'Action: Lift off from the ground. Always returns True.', 'navigate_to_next_waypoint': 'Action: Navigate to the next waypoint. Always returns True.', 'rotate_clockwise': 'Action: Rotate drone clockwise. Always returns True.', 'rotate_counter_clockwise': 'Action: Rotate drone counter clockwise. Always returns True.', 'scan_environment': 'Action: Scan the environment for any obstacles. Always returns True.', 'send_data_to_base': 'Action: Send data to base. Always returns True.', 'take_picture': 'Action: Take a picture using the onboard camera. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Check battery level, fly to location A, take a picture, and return to base.'Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree> <Sequence> <Condition>check_battery_level</Condition> <Sequence> <Action>take_picture</Action> <Condition>is_location_A_reached</Condition> <Action>fly_to_location</Action> <Action>land</Action> <Action>send_data_to_base</Action> </Sequence> </Sequence> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'detect_objects': 'Action: Detect objects in the environment. Always returns True.', 'grab_object': "Action: Grab the detected object. Always returns True.", 'is_object_in_gripper': 'Condition: Check if object is currently in the robot\'s gripper. Returns True if object is in gripper, False otherwise.', 'move_forward': 'Action: Move forward. Always returns True.', 'move_backward': 'Action: Move backward. Always returns True.', 'place_object': 'Action: Place object at specified location. Always returns True.', 'rotate_clockwise': 'Action: Rotate robot clockwise. Always returns True.', 'rotate_counter_clockwise': 'Action: Rotate robot counter clockwise. Always returns True.', 'scan_environment': 'Action: Scan the environment for objects. Always returns True.', 'set_destination': 'Action: Set destination for the robot to move towards. Always returns True.', 'stop_movement': 'Action: Stop all movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Scan the environment, detect objects, grab object A, move forward, rotate clockwise, place object A at destination, then stop movement.'Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree> <Sequence> <Sequence> <Action>scan_environment</Action> <Action>detect_objects</Action> <Action>grab_object</Action> <Condition>is_object_A_in_gripper</Condition> <Action>move_forward</Action> <Action>rotate_clockwise</Action> <Action>place_object<
###
4.// INSTRUCTIONS: Use only the following behaviors {'collect_item_A': 'Action: Collect item A. Always returns True.', 'collect_item_B': 'Action: Collect item B. Always returns True.', 'collect_item_C': 'Action: Collect item C. Always returns True.', 'carry_items_to_destination': 'Subtree node: Represents a behavior tree for carrying items to a specific destination.', 'is_item_available': 'Condition: Check if any of item A, B, or C is available nearby. Returns True if any item is available, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Collect as many items as possible and carry them to the destination.
4.// OUTPUT:
<BehaviorTree><Selector><Action>collect_item_A</Action><Action>collect_item_B</Action><Action>collect_item_C</Action></Selector><Action>carry_items_to_destination</Action></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'explore_area': 'Action: Explore the designated area based on the given coordinates. Always returns True.', 'return_to_base': 'Action: Return to base and recharge. Always returns True.', 'scan_area': 'Subtree node: Represents a behavior tree for scanning the environment.', 'is_area_explored': 'Condition: Check if the designated area has been fully explored. Returns True if the area is explored, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Explore a designated area, scan for resources, and return to base for recharge.
5.// OUTPUT:
<BehaviorTree><Sequence><Action>explore_area</Action><Sequence><Action>scan_area</Action><Action>return_to_base</Action></Sequence></Sequence></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'send_signal': 'Action: Send a signal to other robots in the swarm. Always returns True.', 'follow_leader': 'Action: Follow the leader robot in the swarm. Always returns True.', 'communicate_with_leader': 'Subtree node: Represents a behavior tree for communication with the leader robot.', 'is_leader_in_range': 'Condition: Check if the leader robot is within communication range. Returns True if the leader is in range, False otherwise.', 'is_in_position': 'Condition: Check if the robot is in the designated position to perform a task. Returns True if the robot is in position, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Follow the leader and perform a task in a specific position.
6.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_leader_in_range</Condition><Sequence><Action>follow_leader</Action><Condition>is_in_position</Condition></Sequence></Sequence><Action>communicate_with_leader</Action><Action>send_signal</Action></BehaviorTree> 
###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'move_to': "Action: Move to specified coordinates. Always returns True.", 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Explore the environment by moving to random coordinates, while avoiding obstacles. Return to nest if path is blocked.' Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>move_to</Action><Action>avoid_obstacle</Action></Sequence><Selector><Condition>is_path_clear</Condition><Action>continue_movement_agent</Action></Selector><Sequence><Condition>is_obstacle_detected</Condition><Action>move_to</Action></Sequence><Sequence><Condition>is_agent_in_nest</Condition><Action>agent_movement_freeze</Action></Sequence></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'change_color_to_blue': "Action: Change agent's color to blue. Always returns True.", 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_color_blue': 'Condition: Check if agent's color is blue. Returns True if the agent's color is blue, False otherwise.', 'is_color_green': 'Condition: Check if agent's color is green. Returns True if the agent's color is green, False otherwise.', 'is_color_red': 'Condition: Check if agent's color is red. Returns True if the agent's color is red, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Change color to blue, move to a random coordinate, and return to nest if agent's color is not blue.' Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree><Sequence><Action>change_color_to_blue</Action><Action>continue_movement_agent</Action><Selector><Condition>is_agent_in_nest</Condition><Action>change_color_to_blue</Action><Action>agent_movement_freeze</Action></Selector></Sequence></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'move_to': "Action: Move to specified coordinates. Always returns True.", 'form_rectangle': 'Action: Form a rectangle with other agents. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_agent_in_position': 'Condition: Check if agent is in specified coordinates. Returns True if agent is in specified coordinates, False otherwise.', 'is_rectangle_formed': 'Condition: Check if a rectangle is formed with other agents. Returns True if the rectangle is formed, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Move to a specific location, then form a rectangle with other agents, and freeze movement until the rectangle is formed.' Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree><Sequence><Action>move_to</Action><Selector><Condition>is_agent_in_position</Condition><Action>form_rectangle</Action><Selector><Condition>is_rectangle_formed</Condition><Action>agent_movement_freeze</Action></Selector></Selector></Sequence></BehaviorTree>
###
4.// INSTRUCTIONS: Use only the following behaviors {'measure_water_depth': 'Action: Use a sensor to measure the depth of water in a designated area. Returns the measurement in feet.', 'is_water_shallow': 'Condition: Check if the water depth is less than 3 feet. Returns True if the water is shallow, False otherwise.', 'is_water_deep': 'Condition: Check if the water depth is more than 6 feet. Returns True if the water is deep, False otherwise.', 'stabilize_boat': 'Action: Utilize stabilizing paddles to keep the boat steady in the water. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Generate behavior tree for a robot to safely navigate through a shallow or deep water area while measuring the depth, with the goal of stabilizing the boat when needed.Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Condition>is_water_shallow</Condition> <Action>measure_water_depth</Action> <Action>stabilize_boat</Action> </Sequence> <Sequence> <Condition>is_water_deep</Condition> <Action>measure_water_depth</Action> <Action>stabilize_boat</Action> </Sequence> </Selector> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'detect_other_robots': 'Action: Use sensors to detect other robots in the area. Always returns True.', 'is_robot_near': 'Condition: Check if another robot is within 10 units. Returns True if another robot is detected within 10 units, False otherwise.', 'move_away_from_robot': 'Action: Use designated movements to move away from the nearest detected robot. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Generate behavior tree for a robot to avoid collisions with other robots in a crowded environment.Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree> <Sequence> <Condition>is_robot_near</Condition> <Action>move_away_from_robot</Action> <Action>detect_other_robots</Action> </Sequence> <Action>detect_other_robots</Action> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'detect_object': 'Action: Use sensors to detect objects in the environment. Returns True if an object is detected, False otherwise.', 'grab_object': 'Action: Utilize a robotic arm to grab the detected object. Always returns True.', 'lift_object': 'Action: Use the robotic arm to lift the object and keep it steady. Always returns True.', 'is_object_lifted': 'Condition: Check if the object has been successfully lifted and is being held steadily. Returns True if the object is lifted, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Generate behavior tree for a robot to use its robotic arm to grab and securely lift an object and carry it to a designated location.Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Action>detect_object</Action> <Selector> <Sequence> <Condition>is_object_lifted</Condition> <Action>move_to_destination</Action> </Sequence> <Action>grab_object</Action> </Selector> </Sequence> <Sequence> <Condition>is_object_lifted</Condition> <Action>lift_object</Action> </Sequence> </Selector> </BehaviorTree>4.// INSTRUCTIONS: Use only the following behaviors {'stop': 'Action: Stop robot movement. Always returns True.', 'move_forward': 'Action: Move forward in a straight line. Always returns True.', 'turn_left': 'Action: Turn the robot 90 degrees to the left. Always returns True.', 'turn_right': 'Action: Turn the robot 90 degrees to the right. Always returns True.', 'is_at_target': 'Condition: Check if the robot is at the designated target location. Returns True if at the target location, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Move forward until reaching the target, then turn left and stop'. Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Action>stop</Action> </Sequence> <Sequence> <Condition>is_at_target</Condition> <Selector> <Sequence> <Action>turn_left</Action> <Action>stop</Action> </Sequence> <Action>move_forward</Action> </Selector> </Sequence> <Action>move_forward</Action> </Selector> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'change_color_to_blue': "Action: Change agent's color to blue. Always returns True.", 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_agent_stuck': 'Condition: Check if the agent is stuck in one place. Returns True if the agent has not moved in the last 10 seconds, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'move_to_target': 'Action: Move towards the designated target location. Always returns True.', 'explore': 'Action: Explore the environment by moving in a random direction. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Move to the designated target location, change color to blue, and explore if stuck'. Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Selector> <Sequence> <Action>move_to_target</Action> <Action>change_color_to_blue</Action> </Sequence> <Sequence> <Condition>is_obstacle_detected</Condition> <Action>agent_movement_freeze</Action> </Sequence> </Selector> <Action>explore</Action> </Sequence> <Action>agent_movement_freeze</Action> </Selector> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_formation': 'Action: Move to designated positions to form a specific formation. Always returns True.', 'wait_for_formation': 'Action: Wait for other robots to also complete the formation before continuing. Always returns True.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Avoid obstacles while forming a line, then move to designated positions to form a circle'. Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>is_obstacle_detected</Condition> <Action>avoid_obstacle</Action> </Sequence> <Selector> <Sequence> <Action>form_formation</Action> <Selector> <Sequence> <Condition>is_line_formed</Condition> <Action>wait_for_formation</Action> </Sequence> <Action>agent_movement_freeze</Action> </Selector> </Sequence> </Selector> </Sequence> <Selector> <Sequence> <Condition>is_path_clear</Condition> <Action>continue_movement_agent</Action> </Sequence> <Action>agent_movement_freeze</Action> </Selector> </Sequence> </BehaviorTree>
###
4.// INSTRUCTIONS: Use only the following behaviors {'enter_building': 'Action: Enter the designated building. Always returns True.', 'exit_building': 'Action: Exit the designated building. Always returns True.', 'check_for_injured': "Condition: Check if there are injured individuals inside the building. Returns True if there are injured individuals, False otherwise.", 'treat_injured': 'Action: Provide medical treatment to the injured individuals. Always returns True.', 'carry_out_rescue': 'Action: Carry out the rescue mission for trapped individuals. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Design a behavior tree to 'Enter building, check for injured individuals and provide medical treatment, then exit building and carry out rescue mission'.
4.// OUTPUT:
<BehaviorTree><Sequence><Action>enter_building</Action><Condition>check_for_injured</Condition><Sequence><Action>treat_injured</Action><Action>exit_building</Action></Sequence><Action>carry_out_rescue</Action></Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'go_to_destination': 'Action: Move towards the designated destination. Always returns True.', 'check_for_hazard': "Condition: Check if there are hazards in the environment. Returns True if hazards are present, False otherwise.", 'avoid_hazard': 'Action: Avoid detected hazards. Always returns True.', 'perform_maintenance': 'Action: Perform maintenance tasks. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Design a behavior tree to 'Check for hazards, avoid them, and reach the destination while performing maintenance tasks along the way.'
5.// OUTPUT:
<BehaviorTree><Sequence><Trigger>on_low_health</Trigger><Sequence><Condition>check_for_hazard</Condition><Selector><Action>perform_maintenance</Action><Action>avoid_hazard</Action></Selector><Action>go_to_destination</Action></Sequence></Sequence></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'detect_intruder': 'Condition: Check for intruders. Returns True if an intruder is detected, False otherwise.', 'call_for_backup': 'Action: Call for backup. Always returns True.', 'attack_intruder': 'Action: Attack the intruder. Always returns True.', 'retreat': 'Action: Retreat from the current location. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Design a behavior tree to 'If an intruder is detected, call for backup and attack, otherwise retreat.'
6.// OUTPUT:
<BehaviorTree><Selector><Condition>detect_intruder</Condition><Sequence><Action>call_for_backup</Action><Action>attack_intruder</Action><Action>retreat</Action></Sequence><Action>retreat</Action></Selector></BehaviorTree>###
4.// INSTRUCTIONS: Use only the following behaviors {'find_enemy': 'Action: Searches for an enemy in the environment. Returns True if an enemy is found, False otherwise.', 'detect_enemy': 'Condition: Checks for an enemy within 10 units. Returns True if an enemy is detected, False otherwise.', 'charge': 'Action: Charges at the enemy within range. Returns True if charge is successful, False otherwise.', 'retreat': 'Action: Retreats from the enemy if outnumbered. Returns True if retreat is successful, False otherwise.', 'call_for_reinforcement': 'Action: Signals for reinforcements if outnumbered. Returns True if reinforcement is called, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Engage in a strategic battle against enemies, initiating a charge if an enemy is detected within 10 units. Signal for reinforcement or retreat if outnumbered.
4.// OUTPUT:
<BehaviorTree> <Sequence> <Condition>find_enemy</Condition> <Condition>detect_enemy</Condition> <Action>charge</Action> </Sequence> <Selector> <Action>call_for_reinforcement</Action> <Action>retreat</Action> </Selector> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'collect_resource': 'Action: Moves towards and collects a nearby resource. Returns True if successful, False otherwise.', 'is_resource_available': 'Condition: Checks if a resource is available in the environment. Returns True if resource is available, False otherwise.', 'navigate_to_homebase': 'Action: Navigates back to home base. Returns True if successful, False otherwise.', 'upgrade_base': 'Action: Upgrades the home base. Returns True if successful, False otherwise.', 'is_base_upgradeable': 'Condition: Checks if the home base is upgradable. Returns True if base is upgradable, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Collect resources, return to home base and upgrade it if possible.
5.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Action>collect_resource</Action> <Sequence> <Condition>is_resource_available</Condition> <Action>navigate_to_homebase</Action> <Sequence> <Condition>is_base_upgradeable</Condition> <Action>upgrade_base</Action> </Sequence> </Sequence> </Selector> </Sequence> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'find_water': 'Action: Searches the environment for water. Returns True if water is found, False otherwise.', 'detect_water': 'Condition: Checks for water within 15 units. Returns True if water is detected, False otherwise.', 'drink_water': 'Action: Drinks from a water source within range. Returns True if successful, False otherwise.', 'rest': 'Action: Rests in a safe location. Returns True if successful, False otherwise.', 'is_enemy_nearby': 'Condition: Checks for enemies within 20 units. Returns True if enemies are detected, False otherwise.', 'escape_enemy': 'Action: Flees from the enemy if detected. Returns True if escape is successful, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Prioritize safety by finding a water source, drinking from it if within range, and resting in a safe location if no enemies are nearby. If enemies are detected, prioritize escaping.
6.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Condition>find_water</Condition> <Sequence> <Condition>detect_water</Condition> <Action>drink_water</Action> </Sequence> </Selector> <Selector> <Condition>is_enemy_nearby</Condition> <Action>escape_enemy</Action> </Selector> <Selector> <Condition>is_enemy_nearby</Condition> <Action>rest</Action> </Selector> </Sequence> </BehaviorTree> 
###
4.// INSTRUCTIONS: Use only the following behaviors {'detect_object': 'Condition: Check if an object is detected within 5 units. Returns True if an object is detected, False otherwise.', 'pick_up_object': 'Action: Pick up the detected object. Always returns True.', 'store_object': 'Action: Store the picked up object in a designated storage area. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Create a behavior tree to pick up and store any detected objects within 5 units of the robot
4.// OUTPUT:
<BehaviorTree><Sequence><Condition>detect_object</Condition><Action>pick_up_object</Action><Action>store_object</Action></Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'detect_collision': 'Condition: Check if a collision with another robot is about to occur. Returns True if a collision is imminent, False otherwise.', 'adjust_speed': 'Action: Adjust the robot's speed to avoid collisions. Always returns True.', 'report_position': 'Action: Report the robot's current position to other members of the swarm. Always returns True.', 'check_battery': 'Condition: Check the robot's battery level. Returns True if the battery level is below 20%, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Generate behavior tree for swarm robots to navigate while avoiding collisions and ensuring battery levels are above 20%
5.// OUTPUT:
<BehaviorTree><Sequence><Condition>check_battery</Condition><Selector><Sequence><Condition>detect_collision</Condition><Action>adjust_speed</Action></Sequence><Action>report_position</Action></Selector></Sequence></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'detect_target': 'Condition: Check if a target is detected within 10 units. Returns True if a target is detected, False otherwise.', 'move_to_target': 'Action: Move towards the detected target. Returns True once the target is reached.', 'calculate_distance': 'Function: Calculates the distance to the target. Returns the distance in units.', 'get_best_strategy': 'Function: Calculates the best strategy to use based on the distance to the target and the available resources. Returns the best strategy option.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Generate behavior tree for swarm robots to determine the best strategy to reach a target within 10 units, taking into account available resources.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>detect_target</Condition><Action>move_to_target</Action></Sequence><Action>get_best_strategy</Action></Selector></BehaviorTree>
###
4.// INSTRUCTIONS: Use only the following behaviors {'detect_obstacles': 'Condition: Check for obstacles within a 5 meter radius. Returns True if obstacles are present, False otherwise.', 'avoid_obstacles': 'Action: Change direction to avoid obstacles. Returns True if new direction is set, False otherwise.', 'move_to_target': 'Action: Move towards a designated target. Returns True if movement is successful, False otherwise.', 'check_for_target': 'Condition: Check for a designated target within a 10 meter radius. Returns True if target is detected, False otherwise.', 'is_at_target': 'Condition: Check if the robot has reached the target. Returns True if the robot is within 1 meter of the target, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Construct a behavior tree for a swarm of robots to move towards a designated target while avoiding obstacles.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>detect_obstacles</Condition><Action>avoid_obstacles</Action></Sequence><Selector><Condition>check_for_target</Condition><Sequence><Action>move_to_target</Action><Condition>is_at_target</Condition></Sequence></Selector></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'detect_resource': 'Condition: Check for resources within a 10 meter radius. Returns True if resources are present, False otherwise.', 'gather_resource': 'Action: Gather resources from the closest available source. Returns True if resources are successfully gathered, False otherwise.', 'deposit_resource': 'Action: Deposit gathered resources at a designated location. Returns True if resources are successfully deposited, False otherwise.', 'move_to_location': 'Action: Move towards a designated location. Returns True if movement is successful, False otherwise.', 'check_for_space': 'Condition: Check if there is space available at the designated location for resource deposit. Returns True if space is available, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Create a behavior tree for a swarm of robots to gather resources and deposit them at a designated location.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>detect_resource</Condition><Sequence><Action>gather_resource</Action><Condition>check_for_space</Condition><Action>deposit_resource</Action></Sequence></Sequence><Action>move_to_location</Action></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'move_to_location': 'Action: Move towards a designated location. Returns True if movement is successful, False otherwise.', 'detect_target': 'Condition: Check for a designated target within a 15 meter radius. Returns True if target is detected, False otherwise.', 'attack_target': 'Action: Perform a specific attack action on the target. Returns True if attack is successful, False otherwise.', 'retreat': 'Action: Retreat to a safe location. Returns True if retreat is successful, False otherwise.', 'check_for_danger': 'Condition: Check for danger nearby. Returns True if danger is present, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Generate a behavior tree for a swarm of robots to attack a designated target while being aware of nearby dangers.
6.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>detect_target</Condition><Sequence><Action>attack_target</Action><Action>retreat</Action></Sequence></Sequence><Sequence><Action>move_to_location</Action><Condition>check_for_danger</Condition></Sequence></Selector></BehaviorTree> 
###
4.// INSTRUCTIONS: Use only the following behaviors {'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: generate behavior tree to 'Form a line and move forward, then check for obstacles and avoid them, and finally change color to green.'Output only the XML behavior tree without extra text.
4.// OUTPUT:
<BehaviorTree> <Sequence> <Action>form_line</Action> <Action>continue_movement_agent</Action> <Selector> <Sequence> <Condition>is_obstacle_detected</Condition> <Action>avoid_obstacle</Action> </Sequence> <Action>wander</Action> </Selector> <Action>change_color_to_green</Action> </Sequence> </BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: generate behavior tree to 'Change color to green and continue moving, then check for obstacles and avoid them, and finally change color to white and return to the nest.'Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree> <Sequence> <Action>change_color_to_green</Action> <Action>continue_movement_agent</Action> <Selector> <Sequence> <Condition>is_obstacle_detected</Condition> <Action>avoid_obstacle</Action> </Sequence> <Action>wander</Action> </Selector> <Sequence> <Condition>is_agent_in_nest</Condition> <Action>change_color_to_white</Action> </Sequence> </Sequence> </BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'form_line': 'Action: Form a vertical line at the center. Always returns True.', 'is_agent_in_nest': 'Condition: Check if the agent is in the nest. Returns True if the agent is in the nest, False otherwise.', 'is_line_formed': 'Condition: Check if a vertical line is formed. Returns True if the line is formed with the center, False otherwise.', 'is_obstacle_detected': 'Condition: Check for obstacles nearby. Returns True if an obstacle is detected, False otherwise.', 'is_path_clear': 'Condition: Check if path ahead is clear. Returns True if no obstacles are detected ahead, False if obstacles are present.', 'is_target_detected': 'Condition: Check if target is within 20 units. Returns True if the target is within 20 units of distance, False otherwise.', 'is_target_reached': 'Condition: Check if target is within 15 units. Returns True if the target is within 15 units of distance, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.', 'wander': 'Action: Move randomly within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: generate behavior tree to 'Wander around, detect obstacles and avoid them, then form a line and change color to green, and finally go back to wandering.'Output only the XML behavior tree without extra text.
6.// OUTPUT:
<BehaviorTree> <Selector> <Sequence> <Action>wander</Action> <Selector> <Sequence> <Condition>is_obstacle_detected</Condition> <Action>avoid_obstacle</Action> </Sequence> <Action>wander</Action> </Selector> <Sequence> <Action>form_line</Action> <Action>change_color_to_green</Action> <Action>wander</Action> </Sequence> </Selector> </BehaviorTree>Note: This is a simplified representation of a behavior tree in XML format and may not include all necessary nodes for proper functionality.

###
4.// INSTRUCTIONS: Use only the following behaviors {'agent_movement_freeze': "Action: Freeze agent's movement. Always returns True.", 'avoid_obstacle': 'Action: Avoid detected obstacles. Always returns True.', 'change_color_to_green': "Action: Change agent's color to green. Always returns True.", 'change_color_to_white': "Action: Change agent's color to white. Always returns True.", 'continue_movement_agent': "Action: Continue agent's movement. Always returns True.", 'find_food': 'Action: Search the surrounding area for food. Returns True if food is found and False if no food is found.', 'gather_food': 'Action: Move towards food source and gather food. Returns True when food is successfully gathered.', 'is_hungry': 'Condition: Check if agent is hungry. Returns True if the agent has a low energy level and needs to find food.', 'is_near_nest': 'Condition: Check if agent is near the nest. Returns True if the agent is within a certain distance from the nest, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Find and gather food, then return to the nest to deposit it.
4.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>is_hungry</Condition><Action>find_food</Action><Condition>is_near_nest</Condition><Action>gather_food</Action><Action>task_completed</Action></Sequence><Action>wander</Action></Selector><Sequence><Condition>is_near_nest</Condition><Action>continue_movement_agent</Action></Sequence></Sequence></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'charge_battery': 'Action: Find a charging station and recharge the agent's battery. Returns True once the battery is fully charged.', 'clean_area': 'Action: Move to a designated area and clean up debris. Returns True when the area is clean.', 'is_area_dirty': 'Condition: Check if designated area is dirty. Returns True if there is debris present, False otherwise.', 'is_battery_low': 'Condition: Check if agent's battery is low. Returns True if battery level is below a certain threshold, False otherwise.', 'move_to_location': 'Action: Move to designated location. Returns True once the agent reaches the location.', 'random_move': 'Action: Move randomly within the environment. Returns True always.', 'signal_completed_task': 'Action: Signal the completion of a task by freezing movement. Returns True always.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Charge the battery and then clean the designated area. If battery is already charged, start with cleaning.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_battery_low</Condition><Action>charge_battery</Action><Action>signal_completed_task</Action></Sequence><Sequence><Condition>is_area_dirty</Condition><Action>move_to_location</Action><Action>clean_area</Action><Action>signal_completed_task</Action></Sequence><Action>random_move</Action></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'form_circle': 'Action: Form a circle shape with other nearby agents. Returns True if all agents are able to form the circle, False otherwise.', 'get_current_position': 'Action: Get the agent's current position. Returns True once the position is retrieved.', 'move_to_position': 'Action: Move to designated position. Returns True once the agent reaches the position.', 'ready_to_form_circle': 'Condition: Check if all agents are within a certain distance and facing the same direction. Returns True if all conditions are met, False otherwise.', 'release_agent': 'Action: Release another agent from the group. Returns True once the agent is released.', 'rotate_in_place': 'Action: Rotate the agent in place. Returns True once the rotation is complete.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Coordinate with other agents to form a circle, release one agent from the circle, then form a new circle with the remaining agents.
6.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Condition>ready_to_form_circle</Condition><Action>form_circle</Action><Action>get_current_position</Action><Action>move_to_position</Action><Action>release_agent</Action><Action>form_circle</Action></Sequence><Sequence><Action>rotate_in_place</Action></Sequence></Selector></BehaviorTree>
###
4.// INSTRUCTIONS: Use only the following behaviors {'start_engine': 'Action: Start engine and warm up motors. Always returns True.', 'check_battery_level': 'Condition: Check battery level. Returns True if battery level is sufficient, False otherwise.', 'perform_maintanence': 'Action: Perform maintenance on the robot. Always returns True.', 'calibrate_sensors': 'Action: Calibrate sensors for accurate readings. Always returns True.', 'check_environment': 'Condition: Check environment for any potential hazards. Returns True if no hazards are found, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Perform necessary actions before starting a long-distance exploration mission
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>start_engine</Action><Condition>check_battery_level</Condition><Action>perform_maintenance<Action><Action>calibrate_sensors</Action><Condition>check_environment</Condition></Sequence><Action>wait</Action></Selector></BehaviorTree>

###
5.// INSTRUCTIONS: Use only the following behaviors {'communicate': 'Action: Communicate with other robots in the swarm. Always returns True.', 'share_info': 'Action: Share relevant information with other robots. Always returns True.', 'gather_data': 'Action: Gather data from sensors. Always returns True.', 'analyze_data': 'Action: Analyze gathered data to make informed decisions. Always returns True.', 'determine_goal': 'Function: Determines the next goal for the swarm based on shared information and analyzed data. Returns a goal for the swarm.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Coordinate with other swarm robots to gather and analyze data, and determine the next goal for the swarm.
5.// OUTPUT:
<BehaviorTree><Selector><Sequence><Action>gather_data</Action><Action>analyze_data</Action><Function>determine_goal</Function></Sequence><Action>communicate</Action></Selector></BehaviorTree>

###
6.// INSTRUCTIONS: Use only the following behaviors {'collect_sample': 'Action: Use robotic arm to collect a sample from designated location. Always returns True.', 'analyze_sample': 'Action: Analyze the collected sample for any signs of life. Always returns True.', 'send_data': 'Action: Send analyzed data to base station. Always returns True.', 'is_analysis_complete': 'Condition: Check if sample analysis is complete. Returns True if analysis is complete, False otherwise.', 'wait': 'Action: Wait for a specific amount of time. Always returns True.', 'return_to_base': 'Action: Return to the base station. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Collect and analyze samples from different locations and send the data to the base station.
6.// OUTPUT:
<BehaviorTree><Sequence><Selector><Sequence><Action>collect_sample</Action><Condition>is_analysis_complete</Condition><Action>analyze_sample</Action><Action>wait</Action><Action>send_data</Action></Sequence><Action>return_to_base</Action></Selector></Sequence></BehaviorTree>4.// INSTRUCTIONS: Use only the following behaviors {'gather_resource': 'Subtree node: Represents a behavior tree for gathering resources.', 'repair_structure': 'Subtree node: Represents a behavior tree for repairing structures.', 'is_resource_nearby': 'Condition: Checks if there are resources within 10 units. Returns True if resources are nearby, False otherwise.', 'is_structure_damaged': 'Condition: Checks if the designated structure is damaged. Returns True if damaged, False otherwise.', 'is_structure_repaired': 'Condition: Checks if the designated structure is repaired. Returns True if repaired, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Find and gather resources. If a structure is damaged, repair it and continue gathering resources.
4.// OUTPUT:
<BehaviorTree> <Sequence> <Selector> <Sequence> <Action>gather_resources</Action> </Sequence> </Selector> <Trigger>is_structure_damaged</Trigger> <RepairStructure>repair_structure</RepairStructure> </Sequence> </BehaviorTree>

5.// INSTRUCTIONS: Use only the following behaviors {'charge_battery': 'Action: Make the agent start charging its battery. Always returns True.', 'is_battery_low': 'Condition: Checks if battery level is below a specific threshold. Returns True if battery is below the threshold, False otherwise.', 'random_walk': 'Action: Perform a random walk within the environment. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Charge the battery, then perform a random walk until the battery is fully charged.
5.// OUTPUT:
<BehaviorTree> <Sequence> <Action>charge_battery</Action> <Sequence> <Action>random_walk</Action> <Selector> <Condition>is_battery_low</Condition> <Action>charge_battery</Action> </Selector> </Sequence> </Sequence> </BehaviorTree>

6.// INSTRUCTIONS: Use only the following behaviors {'scan_area': 'Subtree node: Represents a behavior tree for scanning the designated area.', 'communicate_with_other_robots': 'Subtree node: Represents a behavior tree for communication with other robots.', 'check_for_obstacles': 'Action: Check for any obstacles in the current path. Returns True if obstacles are detected, False otherwise.', 'move_to_coordinates': 'Action: Move towards designated coordinates. Returns True when coordinates are reached.', 'is_communication_successful': 'Condition: Checks if communication was successful with other robots. Returns True if successfully communicated, False otherwise.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Scan the area for obstacles and communicate with other robots. If communication is successful, move to designated coordinates.
6.// OUTPUT:
<BehaviorTree> <Sequence> <Action>scan_area</Action> <Selector> <Sequence> <Action>communicate_with_other_robots</Action> <Condition>is_communication_successful</Condition> <Action>move_to_coordinates</Action> </Sequence> </Selector> </Sequence> </BehaviorTree> 
###
4.// INSTRUCTIONS: Use only the following behaviors {'collect_food': 'Subtree node: Represents a behavior tree for finding and collecting food.', 'send_message': 'Action: Send a message to other robots. Always returns True', 'drop_food': "Action: Drop food at the designated location. Always returns True.", 'is_food_detected': 'Condition: Check if food is detected in the environment. Returns True if food is detected, False otherwise.', 'is_nest_reached': 'Condition: Check if the nest is reached. Returns True if the nest is reached, False otherwise.', 'on_low_energy': "Event: Triggers when the agent's energy falls below a threshold. Returns True if energy is low, False otherwise."}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
4.// USER COMMAND: Forage food and drop it off at the nest. If energy is low, send a message to other robots for assistance.
4.// OUTPUT:
<BehaviorTree><Selector><Sequence><Condition>is_food_detected</Condition><Sequence><Action>collect_food</Action><Condition>is_nest_reached</Condition><Action>drop_food</Action></Sequence></Sequence><Trigger>on_low_energy</Trigger><Action>send_message</Action></Selector></BehaviorTree>

 
###
5.// INSTRUCTIONS: Use only the following behaviors {'navigate_to_target': 'Subtree node: Represents a behavior tree for navigating to a target location.', 'inspect_target': 'Action: Inspect and scan the target location. Always returns True.', 'repair_target': "Action: Repair the target if damaged. Always returns True.", 'is_target_detected': 'Condition: Check if a target is detected in the environment. Returns True if a target is detected, False otherwise.', 'is_target_in_repair_range': 'Condition: Check if the target is within repair range. Returns True if the target is within repair range, False otherwise.', 'task_completed': 'Action: Signal task completion by freezing movement. Always returns True.'}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
5.// USER COMMAND: Navigate to a target location, inspect and repair if necessary. Output only the XML behavior tree without extra text.
5.// OUTPUT:
<BehaviorTree><Sequence><Condition>is_target_detected</Condition><Sequence><Action>navigate_to_target</Action><Condition>is_target_in_repair_range</Condition><Action>inspect_target</Action><Action>repair_target</Action></Sequence></Sequence></BehaviorTree>

 
###
6.// INSTRUCTIONS: Use only the following behaviors {'navigate_to_exit': 'Subtree node: Represents a behavior tree for navigating to the exit.', 'detect_exit': 'Condition: Check if the exit is detected in the environment. Returns True if the exit is detected, False otherwise.', 'is_agent_safe': 'Condition: Check if the agent is in a safe position. Returns True if the agent is safe, False otherwise.', 'escape_maze': "Action: Escape the maze to the designated exit. Always returns True.", 'on_low_battery': "Event: Triggers when the agent's battery level falls below a threshold. Returns True if battery is low, False otherwise."}, to construct behavior tree in XML format to the following command. If the available behaviors do not fit with the user command say (Sorry, I can't do the task)
6.// USER COMMAND: Navigate to the exit while ensuring safety. If battery is low, quickly escape the maze to the nearest exit.
6.// OUTPUT:
<BehaviorTree><Sequence><Condition>detect_exit</Condition><Sequence><Action>navigate_to_exit</Action><Condition>is_agent_safe</Condition><Trigger>on_low_battery</Trigger><Action>escape_maze</Action></Sequence></Sequence></BehaviorTree>

###